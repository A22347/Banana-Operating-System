
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 38 63 01 00       	call   c0016358 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 45 03 c0       	mov    eax,0xc00345e4
c0000025:	3d e4 45 03 c0       	cmp    eax,0xc00345e4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 45 03 c0       	push   0xc00345e4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 45 03 c0       	mov    eax,0xc00345e4
c0000051:	2d e4 45 03 c0       	sub    eax,0xc00345e4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 45 03 c0       	push   0xc00345e4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d a0 68 03 c0 00 	cmp    BYTE PTR ds:0xc00368a0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 4c f2 02 c0       	mov    ebx,0xc002f24c
c0000097:	81 eb 48 f2 02 c0    	sub    ebx,0xc002f248
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 48 f2 02 c0       	mov    esi,0xc002f248
c00000a6:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 a4 68 03 c0       	mov    ds:0xc00368a4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 a4 68 03 c0       	mov    eax,ds:0xc00368a4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 45 03 c0       	push   0xc00345e4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 a0 68 03 c0 01 	mov    BYTE PTR ds:0xc00368a0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 a8 68 03 c0       	push   0xc00368a8
c0000108:	68 e4 45 03 c0       	push   0xc00345e4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 07 47 02 00       	call   c00249b4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 50 8c 01 00       	call   c0018f15 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 e5 46 02 00       	call   c00249b4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 f2 4b 02 00       	call   c0024ee0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 95 50 02 00       	call   c002538c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c4 a9 03 c0 	lgdtd  ds:0xc003a9c4
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 f7 fd 01 00       	jmp    c0020176 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 c0 68 03 c0       	mov    ds:0xc00368c0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 c0 68 03 c0    	mov    DWORD PTR ds:0xc00368c0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d c0 68 03 c0    	mov    ebx,DWORD PTR ds:0xc00368c0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 60 f2 02 c0 02 	test   BYTE PTR [edx-0x3ffd0da0],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 60 f2 02 c0 01 	test   BYTE PTR [edx-0x3ffd0da0],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 60 f2 02 c0 08 	test   BYTE PTR [edx-0x3ffd0da0],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 60 f2 02 c0 04 	test   BYTE PTR [ecx-0x3ffd0da0],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 60 f2 02 c0 01 	test   BYTE PTR [edx-0x3ffd0da0],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <LWIP_PLATFORM_HTONS>:
c0000be8:	83 ec 04             	sub    esp,0x4
c0000beb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000bef:	66 89 04 24          	mov    WORD PTR [esp],ax
c0000bf3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000bf7:	c1 e8 08             	shr    eax,0x8
c0000bfa:	89 c2                	mov    edx,eax
c0000bfc:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0000c00:	c1 e0 08             	shl    eax,0x8
c0000c03:	09 d0                	or     eax,edx
c0000c05:	83 c4 04             	add    esp,0x4
c0000c08:	c3                   	ret    
c0000c09:	8d 76 00             	lea    esi,[esi+0x0]

c0000c0c <LWIP_PLATFORM_HTONL>:
c0000c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c10:	c1 e8 18             	shr    eax,0x18
c0000c13:	89 c2                	mov    edx,eax
c0000c15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c19:	c1 e8 08             	shr    eax,0x8
c0000c1c:	25 00 ff 00 00       	and    eax,0xff00
c0000c21:	09 c2                	or     edx,eax
c0000c23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c27:	c1 e0 08             	shl    eax,0x8
c0000c2a:	25 00 00 ff 00       	and    eax,0xff0000
c0000c2f:	09 c2                	or     edx,eax
c0000c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c35:	c1 e0 18             	shl    eax,0x18
c0000c38:	09 d0                	or     eax,edx
c0000c3a:	c3                   	ret    
c0000c3b:	90                   	nop

c0000c3c <lwip_socket_init>:
c0000c3c:	90                   	nop
c0000c3d:	c3                   	ret    
c0000c3e:	66 90                	xchg   ax,ax

c0000c40 <tcpip_callback_with_block>:
c0000c40:	90                   	nop
c0000c41:	c3                   	ret    
c0000c42:	66 90                	xchg   ax,ax

c0000c44 <sys_sem_new>:
c0000c44:	83 ec 1c             	sub    esp,0x1c
c0000c47:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0000c4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0000c4f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0000c54:	83 ec 08             	sub    esp,0x8
c0000c57:	50                   	push   eax
c0000c58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0000c5c:	e8 93 0f 02 00       	call   c0021bf4 <KeNetCreateSemaphore>
c0000c61:	83 c4 10             	add    esp,0x10
c0000c64:	b0 00                	mov    al,0x0
c0000c66:	83 c4 1c             	add    esp,0x1c
c0000c69:	c3                   	ret    
c0000c6a:	66 90                	xchg   ax,ax

c0000c6c <sys_sem_free>:
c0000c6c:	83 ec 0c             	sub    esp,0xc
c0000c6f:	83 ec 0c             	sub    esp,0xc
c0000c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c76:	e8 bd 0f 02 00       	call   c0021c38 <KeNetFreeSemaphore>
c0000c7b:	83 c4 10             	add    esp,0x10
c0000c7e:	90                   	nop
c0000c7f:	83 c4 0c             	add    esp,0xc
c0000c82:	c3                   	ret    
c0000c83:	90                   	nop

c0000c84 <sys_sem_signal>:
c0000c84:	83 ec 0c             	sub    esp,0xc
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000c8e:	e8 c1 0f 02 00       	call   c0021c54 <KeNetSignalSemaphore>
c0000c93:	83 c4 10             	add    esp,0x10
c0000c96:	90                   	nop
c0000c97:	83 c4 0c             	add    esp,0xc
c0000c9a:	c3                   	ret    
c0000c9b:	90                   	nop

c0000c9c <sys_arch_sem_wait>:
c0000c9c:	83 ec 0c             	sub    esp,0xc
c0000c9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0000ca3:	83 ec 08             	sub    esp,0x8
c0000ca6:	50                   	push   eax
c0000ca7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0000cab:	e8 c0 0f 02 00       	call   c0021c70 <KeNetWaitSemaphore>
c0000cb0:	83 c4 10             	add    esp,0x10
c0000cb3:	83 c4 0c             	add    esp,0xc
c0000cb6:	c3                   	ret    
c0000cb7:	90                   	nop

c0000cb8 <sys_mbox_new>:
c0000cb8:	b0 00                	mov    al,0x0
c0000cba:	c3                   	ret    
c0000cbb:	90                   	nop

c0000cbc <sys_mbox_free>:
c0000cbc:	90                   	nop
c0000cbd:	c3                   	ret    
c0000cbe:	66 90                	xchg   ax,ax

c0000cc0 <sys_mbox_post>:
c0000cc0:	90                   	nop
c0000cc1:	c3                   	ret    
c0000cc2:	66 90                	xchg   ax,ax

c0000cc4 <sys_arch_mbox_fetch>:
c0000cc4:	b8 00 00 00 00       	mov    eax,0x0
c0000cc9:	c3                   	ret    
c0000cca:	66 90                	xchg   ax,ax

c0000ccc <sys_arch_mbox_tryfetch>:
c0000ccc:	b8 00 00 00 00       	mov    eax,0x0
c0000cd1:	c3                   	ret    
c0000cd2:	66 90                	xchg   ax,ax

c0000cd4 <sys_mbox_trypost>:
c0000cd4:	90                   	nop
c0000cd5:	c3                   	ret    
c0000cd6:	66 90                	xchg   ax,ax

c0000cd8 <sys_thread_new>:
c0000cd8:	b8 00 00 00 00       	mov    eax,0x0
c0000cdd:	c3                   	ret    
c0000cde:	66 90                	xchg   ax,ax

c0000ce0 <sys_init>:
c0000ce0:	90                   	nop
c0000ce1:	c3                   	ret    

c0000ce2 <largebin_index>:
c0000ce2:	89 c2                	mov    edx,eax
c0000ce4:	c1 ea 08             	shr    edx,0x8
c0000ce7:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ced:	77 10                	ja     c0000cff <largebin_index+0x1d>
c0000cef:	0f bd d2             	bsr    edx,edx
c0000cf2:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cf5:	d3 e8                	shr    eax,cl
c0000cf7:	83 e0 03             	and    eax,0x3
c0000cfa:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cfe:	c3                   	ret    
c0000cff:	b8 5f 00 00 00       	mov    eax,0x5f
c0000d04:	c3                   	ret    

c0000d05 <malloc_init_state>:
c0000d05:	53                   	push   ebx
c0000d06:	8d 50 34             	lea    edx,[eax+0x34]
c0000d09:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000d0f:	89 d1                	mov    ecx,edx
c0000d11:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000d14:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000d17:	83 c2 08             	add    edx,0x8
c0000d1a:	39 da                	cmp    edx,ebx
c0000d1c:	75 f3                	jne    c0000d11 <malloc_init_state+0xc>
c0000d1e:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d20:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000d2a:	83 e2 03             	and    edx,0x3
c0000d2d:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000d37:	83 ca 48             	or     edx,0x48
c0000d3a:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000d44:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d4e:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d55:	89 10                	mov    DWORD PTR [eax],edx
c0000d57:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d5a:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d64:	5b                   	pop    ebx
c0000d65:	c3                   	ret    

c0000d66 <malloc_consolidate>:
c0000d66:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d68:	85 d2                	test   edx,edx
c0000d6a:	0f 84 d8 00 00 00    	je     c0000e48 <malloc_consolidate+0xe2>
c0000d70:	55                   	push   ebp
c0000d71:	83 e2 fd             	and    edx,0xfffffffd
c0000d74:	57                   	push   edi
c0000d75:	89 c5                	mov    ebp,eax
c0000d77:	56                   	push   esi
c0000d78:	8d 78 34             	lea    edi,[eax+0x34]
c0000d7b:	53                   	push   ebx
c0000d7c:	83 ec 10             	sub    esp,0x10
c0000d7f:	89 10                	mov    DWORD PTR [eax],edx
c0000d81:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d85:	c1 ea 03             	shr    edx,0x3
c0000d88:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d8c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d90:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d93:	85 d2                	test   edx,edx
c0000d95:	0f 84 98 00 00 00    	je     c0000e33 <malloc_consolidate+0xcd>
c0000d9b:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000da2:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000da5:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000da8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000dac:	89 f9                	mov    ecx,edi
c0000dae:	83 e1 fe             	and    ecx,0xfffffffe
c0000db1:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000db4:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db7:	83 e3 fc             	and    ebx,0xfffffffc
c0000dba:	83 e7 01             	and    edi,0x1
c0000dbd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000dc0:	75 14                	jne    c0000dd6 <malloc_consolidate+0x70>
c0000dc2:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000dc4:	29 fa                	sub    edx,edi
c0000dc6:	01 f9                	add    ecx,edi
c0000dc8:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dcb:	89 fb                	mov    ebx,edi
c0000dcd:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000dd0:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000dd3:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000dd6:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000dd9:	74 40                	je     c0000e1b <malloc_consolidate+0xb5>
c0000ddb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000dde:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000de1:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000de5:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000de8:	83 e7 01             	and    edi,0x1
c0000deb:	75 0e                	jne    c0000dfb <malloc_consolidate+0x95>
c0000ded:	01 d9                	add    ecx,ebx
c0000def:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000df2:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000df5:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000df8:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000dfb:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000dfe:	89 ce                	mov    esi,ecx
c0000e00:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000e03:	83 ce 01             	or     esi,0x1
c0000e06:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000e09:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000e0c:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000e0f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000e13:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000e16:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000e19:	eb 0c                	jmp    c0000e27 <malloc_consolidate+0xc1>
c0000e1b:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000e1e:	83 c9 01             	or     ecx,0x1
c0000e21:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e24:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000e27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000e2b:	85 d2                	test   edx,edx
c0000e2d:	0f 85 6f ff ff ff    	jne    c0000da2 <malloc_consolidate+0x3c>
c0000e33:	83 c5 04             	add    ebp,0x4
c0000e36:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000e3a:	0f 85 50 ff ff ff    	jne    c0000d90 <malloc_consolidate+0x2a>
c0000e40:	83 c4 10             	add    esp,0x10
c0000e43:	5b                   	pop    ebx
c0000e44:	5e                   	pop    esi
c0000e45:	5f                   	pop    edi
c0000e46:	5d                   	pop    ebp
c0000e47:	c3                   	ret    
c0000e48:	e9 b8 fe ff ff       	jmp    c0000d05 <malloc_init_state>

c0000e4d <dlfree>:
c0000e4d:	57                   	push   edi
c0000e4e:	56                   	push   esi
c0000e4f:	53                   	push   ebx
c0000e50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e54:	85 db                	test   ebx,ebx
c0000e56:	0f 84 e2 00 00 00    	je     c0000f3e <dlfree+0xf1>
c0000e5c:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e5f:	8b 0d e0 68 03 c0    	mov    ecx,DWORD PTR ds:0xc00368e0
c0000e65:	89 f0                	mov    eax,esi
c0000e67:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e6a:	83 e0 fc             	and    eax,0xfffffffc
c0000e6d:	39 c1                	cmp    ecx,eax
c0000e6f:	72 24                	jb     c0000e95 <dlfree+0x48>
c0000e71:	83 c9 03             	or     ecx,0x3
c0000e74:	c1 e8 03             	shr    eax,0x3
c0000e77:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000e7d:	83 e8 02             	sub    eax,0x2
c0000e80:	8b 0c 85 e4 68 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc971c]
c0000e87:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e89:	89 14 85 e4 68 03 c0 	mov    DWORD PTR [eax*4-0x3ffc971c],edx
c0000e90:	e9 a9 00 00 00       	jmp    c0000f3e <dlfree+0xf1>
c0000e95:	83 e6 02             	and    esi,0x2
c0000e98:	0f 85 a0 00 00 00    	jne    c0000f3e <dlfree+0xf1>
c0000e9e:	83 c9 01             	or     ecx,0x1
c0000ea1:	8d 34 02             	lea    esi,[edx+eax*1]
c0000ea4:	89 0d e0 68 03 c0    	mov    DWORD PTR ds:0xc00368e0,ecx
c0000eaa:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000ead:	83 e1 fc             	and    ecx,0xfffffffc
c0000eb0:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000eb4:	75 13                	jne    c0000ec9 <dlfree+0x7c>
c0000eb6:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000eb9:	29 da                	sub    edx,ebx
c0000ebb:	01 d8                	add    eax,ebx
c0000ebd:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000ec0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000ec3:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ec6:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000ec9:	39 35 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,esi
c0000ecf:	74 40                	je     c0000f11 <dlfree+0xc4>
c0000ed1:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ed5:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000ed8:	80 e3 01             	and    bl,0x1
c0000edb:	75 0e                	jne    c0000eeb <dlfree+0x9e>
c0000edd:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000ee0:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000ee3:	01 c8                	add    eax,ecx
c0000ee5:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ee8:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000eeb:	8b 0d 1c 69 03 c0    	mov    ecx,DWORD PTR ds:0xc003691c
c0000ef1:	c7 42 0c 14 69 03 c0 	mov    DWORD PTR [edx+0xc],0xc0036914
c0000ef8:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000efb:	89 15 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edx
c0000f01:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000f04:	89 c1                	mov    ecx,eax
c0000f06:	83 c9 01             	or     ecx,0x1
c0000f09:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f0c:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000f0f:	eb 10                	jmp    c0000f21 <dlfree+0xd4>
c0000f11:	01 c8                	add    eax,ecx
c0000f13:	89 c1                	mov    ecx,eax
c0000f15:	83 c9 01             	or     ecx,0x1
c0000f18:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f1b:	89 15 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edx
c0000f21:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000f26:	76 16                	jbe    c0000f3e <dlfree+0xf1>
c0000f28:	f6 05 e0 68 03 c0 02 	test   BYTE PTR ds:0xc00368e0,0x2
c0000f2f:	74 0d                	je     c0000f3e <dlfree+0xf1>
c0000f31:	5b                   	pop    ebx
c0000f32:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0000f37:	5e                   	pop    esi
c0000f38:	5f                   	pop    edi
c0000f39:	e9 28 fe ff ff       	jmp    c0000d66 <malloc_consolidate>
c0000f3e:	5b                   	pop    ebx
c0000f3f:	5e                   	pop    esi
c0000f40:	5f                   	pop    edi
c0000f41:	c3                   	ret    

c0000f42 <sYSMALLOc>:
c0000f42:	55                   	push   ebp
c0000f43:	57                   	push   edi
c0000f44:	56                   	push   esi
c0000f45:	53                   	push   ebx
c0000f46:	89 d3                	mov    ebx,edx
c0000f48:	83 ec 2c             	sub    esp,0x2c
c0000f4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f4f:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000f55:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000f58:	8d 42 ff             	lea    eax,[edx-0x1]
c0000f5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f5f:	74 1f                	je     c0000f80 <sYSMALLOc+0x3e>
c0000f61:	89 d8                	mov    eax,ebx
c0000f63:	e8 fe fd ff ff       	call   c0000d66 <malloc_consolidate>
c0000f68:	83 ec 0c             	sub    esp,0xc
c0000f6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f6f:	83 e8 07             	sub    eax,0x7
c0000f72:	50                   	push   eax
c0000f73:	e8 2d 02 00 00       	call   c00011a5 <dlmalloc>
c0000f78:	83 c4 10             	add    esp,0x10
c0000f7b:	e9 1d 02 00 00       	jmp    c000119d <sYSMALLOc+0x25b>
c0000f80:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f83:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f89:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f8c:	83 e0 fc             	and    eax,0xfffffffc
c0000f8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f97:	83 c0 10             	add    eax,0x10
c0000f9a:	01 c1                	add    ecx,eax
c0000f9c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000fa0:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fa7:	74 04                	je     c0000fad <sYSMALLOc+0x6b>
c0000fa9:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000fad:	f7 da                	neg    edx
c0000faf:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000fb3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000fb7:	21 d1                	and    ecx,edx
c0000fb9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000fbd:	7f 07                	jg     c0000fc6 <sYSMALLOc+0x84>
c0000fbf:	31 c0                	xor    eax,eax
c0000fc1:	e9 d7 01 00 00       	jmp    c000119d <sYSMALLOc+0x25b>
c0000fc6:	83 ec 0c             	sub    esp,0xc
c0000fc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000fcd:	e8 fe 51 01 00       	call   c00161d0 <sbrk>
c0000fd2:	83 c4 10             	add    esp,0x10
c0000fd5:	89 c6                	mov    esi,eax
c0000fd7:	83 f8 ff             	cmp    eax,0xffffffff
c0000fda:	74 e3                	je     c0000fbf <sYSMALLOc+0x7d>
c0000fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000fe0:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000fe3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fe7:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000fed:	39 f1                	cmp    ecx,esi
c0000fef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ff3:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ff9:	75 13                	jne    c000100e <sYSMALLOc+0xcc>
c0000ffb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fff:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001003:	83 c8 01             	or     eax,0x1
c0001006:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001009:	e9 37 01 00 00       	jmp    c0001145 <sYSMALLOc+0x203>
c000100e:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0001014:	89 d5                	mov    ebp,edx
c0001016:	83 e5 01             	and    ebp,0x1
c0001019:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000101e:	0f 95 c0             	setne  al
c0001021:	21 e8                	and    eax,ebp
c0001023:	39 f1                	cmp    ecx,esi
c0001025:	76 12                	jbe    c0001039 <sYSMALLOc+0xf7>
c0001027:	85 c0                	test   eax,eax
c0001029:	74 0e                	je     c0001039 <sYSMALLOc+0xf7>
c000102b:	83 e2 fe             	and    edx,0xfffffffe
c000102e:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0001034:	e9 82 00 00 00       	jmp    c00010bb <sYSMALLOc+0x179>
c0001039:	85 ed                	test   ebp,ebp
c000103b:	74 7e                	je     c00010bb <sYSMALLOc+0x179>
c000103d:	85 c0                	test   eax,eax
c000103f:	74 0e                	je     c000104f <sYSMALLOc+0x10d>
c0001041:	89 f0                	mov    eax,esi
c0001043:	29 c8                	sub    eax,ecx
c0001045:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0001049:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c000104f:	89 f2                	mov    edx,esi
c0001051:	83 e2 07             	and    edx,0x7
c0001054:	74 0c                	je     c0001062 <sYSMALLOc+0x120>
c0001056:	b8 08 00 00 00       	mov    eax,0x8
c000105b:	29 d0                	sub    eax,edx
c000105d:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0001060:	eb 04                	jmp    c0001066 <sYSMALLOc+0x124>
c0001062:	89 f5                	mov    ebp,esi
c0001064:	31 c0                	xor    eax,eax
c0001066:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000106a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000106e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001072:	01 c1                	add    ecx,eax
c0001074:	83 ec 0c             	sub    esp,0xc
c0001077:	01 f1                	add    ecx,esi
c0001079:	01 ca                	add    edx,ecx
c000107b:	29 c8                	sub    eax,ecx
c000107d:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0001081:	01 c2                	add    edx,eax
c0001083:	52                   	push   edx
c0001084:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001088:	e8 43 51 01 00       	call   c00161d0 <sbrk>
c000108d:	83 c4 10             	add    esp,0x10
c0001090:	83 f8 ff             	cmp    eax,0xffffffff
c0001093:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001097:	75 0f                	jne    c00010a8 <sYSMALLOc+0x166>
c0001099:	83 ec 0c             	sub    esp,0xc
c000109c:	6a 00                	push   0x0
c000109e:	e8 2d 51 01 00       	call   c00161d0 <sbrk>
c00010a3:	83 c4 10             	add    esp,0x10
c00010a6:	eb 30                	jmp    c00010d8 <sYSMALLOc+0x196>
c00010a8:	39 c6                	cmp    esi,eax
c00010aa:	76 33                	jbe    c00010df <sYSMALLOc+0x19d>
c00010ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00010b0:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c00010b7:	01 f0                	add    eax,esi
c00010b9:	eb 1d                	jmp    c00010d8 <sYSMALLOc+0x196>
c00010bb:	83 ec 0c             	sub    esp,0xc
c00010be:	89 f5                	mov    ebp,esi
c00010c0:	6a 00                	push   0x0
c00010c2:	e8 09 51 01 00       	call   c00161d0 <sbrk>
c00010c7:	89 c2                	mov    edx,eax
c00010c9:	29 f2                	sub    edx,esi
c00010cb:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c00010cf:	83 c4 10             	add    esp,0x10
c00010d2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010d8:	31 d2                	xor    edx,edx
c00010da:	83 f8 ff             	cmp    eax,0xffffffff
c00010dd:	74 66                	je     c0001145 <sYSMALLOc+0x203>
c00010df:	29 e8                	sub    eax,ebp
c00010e1:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00010e4:	01 d0                	add    eax,edx
c00010e6:	83 c8 01             	or     eax,0x1
c00010e9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00010ec:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010f2:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010f7:	74 4c                	je     c0001145 <sYSMALLOc+0x203>
c00010f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010fd:	83 e8 0c             	sub    eax,0xc
c0001100:	83 e0 f8             	and    eax,0xfffffff8
c0001103:	89 c2                	mov    edx,eax
c0001105:	83 ca 01             	or     edx,0x1
c0001108:	83 f8 0f             	cmp    eax,0xf
c000110b:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000110e:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001116:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c000111e:	76 25                	jbe    c0001145 <sYSMALLOc+0x203>
c0001120:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001126:	83 ec 0c             	sub    esp,0xc
c0001129:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001133:	83 c7 08             	add    edi,0x8
c0001136:	57                   	push   edi
c0001137:	e8 11 fd ff ff       	call   c0000e4d <dlfree>
c000113c:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001142:	83 c4 10             	add    esp,0x10
c0001145:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000114b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001151:	73 06                	jae    c0001159 <sYSMALLOc+0x217>
c0001153:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001159:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000115f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001165:	73 06                	jae    c000116d <sYSMALLOc+0x22b>
c0001167:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000116d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001170:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001173:	83 e2 fc             	and    edx,0xfffffffc
c0001176:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c000117a:	0f 82 3f fe ff ff    	jb     c0000fbf <sYSMALLOc+0x7d>
c0001180:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001184:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001187:	29 fa                	sub    edx,edi
c0001189:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000118c:	83 ca 01             	or     edx,0x1
c000118f:	89 fb                	mov    ebx,edi
c0001191:	83 c0 08             	add    eax,0x8
c0001194:	83 cb 01             	or     ebx,0x1
c0001197:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000119a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000119d:	83 c4 2c             	add    esp,0x2c
c00011a0:	5b                   	pop    ebx
c00011a1:	5e                   	pop    esi
c00011a2:	5f                   	pop    edi
c00011a3:	5d                   	pop    ebp
c00011a4:	c3                   	ret    

c00011a5 <dlmalloc>:
c00011a5:	55                   	push   ebp
c00011a6:	57                   	push   edi
c00011a7:	56                   	push   esi
c00011a8:	53                   	push   ebx
c00011a9:	83 ec 1c             	sub    esp,0x1c
c00011ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00011b0:	83 f8 df             	cmp    eax,0xffffffdf
c00011b3:	0f 87 70 03 00 00    	ja     c0001529 <dlmalloc+0x384>
c00011b9:	83 c0 0b             	add    eax,0xb
c00011bc:	be 10 00 00 00       	mov    esi,0x10
c00011c1:	83 f8 0f             	cmp    eax,0xf
c00011c4:	76 05                	jbe    c00011cb <dlmalloc+0x26>
c00011c6:	83 e0 f8             	and    eax,0xfffffff8
c00011c9:	89 c6                	mov    esi,eax
c00011cb:	8b 3d e0 68 03 c0    	mov    edi,DWORD PTR ds:0xc00368e0
c00011d1:	f7 c7 01 00 00 00    	test   edi,0x1
c00011d7:	75 17                	jne    c00011f0 <dlmalloc+0x4b>
c00011d9:	85 ff                	test   edi,edi
c00011db:	0f 85 05 03 00 00    	jne    c00014e6 <dlmalloc+0x341>
c00011e1:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c00011e6:	e8 7b fb ff ff       	call   c0000d66 <malloc_consolidate>
c00011eb:	e9 f6 02 00 00       	jmp    c00014e6 <dlmalloc+0x341>
c00011f0:	39 f7                	cmp    edi,esi
c00011f2:	72 1f                	jb     c0001213 <dlmalloc+0x6e>
c00011f4:	89 f2                	mov    edx,esi
c00011f6:	c1 ea 03             	shr    edx,0x3
c00011f9:	83 ea 02             	sub    edx,0x2
c00011fc:	8b 04 95 e4 68 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc971c]
c0001203:	85 c0                	test   eax,eax
c0001205:	74 0c                	je     c0001213 <dlmalloc+0x6e>
c0001207:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000120a:	89 0c 95 e4 68 03 c0 	mov    DWORD PTR [edx*4-0x3ffc971c],ecx
c0001211:	eb 30                	jmp    c0001243 <dlmalloc+0x9e>
c0001213:	89 f0                	mov    eax,esi
c0001215:	81 fe ff 00 00 00    	cmp    esi,0xff
c000121b:	77 2e                	ja     c000124b <dlmalloc+0xa6>
c000121d:	c1 e8 03             	shr    eax,0x3
c0001220:	8d 14 c5 14 69 03 c0 	lea    edx,[eax*8-0x3ffc96ec]
c0001227:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000122b:	8d 5a f8             	lea    ebx,[edx-0x8]
c000122e:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001231:	39 c3                	cmp    ebx,eax
c0001233:	74 2e                	je     c0001263 <dlmalloc+0xbe>
c0001235:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001238:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000123d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001240:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001243:	83 c0 08             	add    eax,0x8
c0001246:	e9 e0 02 00 00       	jmp    c000152b <dlmalloc+0x386>
c000124b:	e8 92 fa ff ff       	call   c0000ce2 <largebin_index>
c0001250:	83 e7 02             	and    edi,0x2
c0001253:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001257:	74 0a                	je     c0001263 <dlmalloc+0xbe>
c0001259:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c000125e:	e8 03 fb ff ff       	call   c0000d66 <malloc_consolidate>
c0001263:	8d 46 10             	lea    eax,[esi+0x10]
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	8b 1d 20 69 03 c0    	mov    ebx,DWORD PTR ds:0xc0036920
c0001270:	81 fb 14 69 03 c0    	cmp    ebx,0xc0036914
c0001276:	0f 84 13 01 00 00    	je     c000138f <dlmalloc+0x1ea>
c000127c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000127f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001282:	83 e7 fc             	and    edi,0xfffffffc
c0001285:	81 fe ff 00 00 00    	cmp    esi,0xff
c000128b:	77 4c                	ja     c00012d9 <dlmalloc+0x134>
c000128d:	3d 14 69 03 c0       	cmp    eax,0xc0036914
c0001292:	75 45                	jne    c00012d9 <dlmalloc+0x134>
c0001294:	39 1d 10 69 03 c0    	cmp    DWORD PTR ds:0xc0036910,ebx
c000129a:	75 3d                	jne    c00012d9 <dlmalloc+0x134>
c000129c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00012a0:	73 37                	jae    c00012d9 <dlmalloc+0x134>
c00012a2:	8d 04 33             	lea    eax,[ebx+esi*1]
c00012a5:	89 fa                	mov    edx,edi
c00012a7:	a3 1c 69 03 c0       	mov    ds:0xc003691c,eax
c00012ac:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00012b1:	a3 10 69 03 c0       	mov    ds:0xc0036910,eax
c00012b6:	29 f2                	sub    edx,esi
c00012b8:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00012bf:	c7 40 0c 14 69 03 c0 	mov    DWORD PTR [eax+0xc],0xc0036914
c00012c6:	83 ce 01             	or     esi,0x1
c00012c9:	89 d1                	mov    ecx,edx
c00012cb:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00012ce:	83 c9 01             	or     ecx,0x1
c00012d1:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00012d4:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00012d7:	eb 15                	jmp    c00012ee <dlmalloc+0x149>
c00012d9:	a3 20 69 03 c0       	mov    ds:0xc0036920,eax
c00012de:	39 fe                	cmp    esi,edi
c00012e0:	c7 40 08 14 69 03 c0 	mov    DWORD PTR [eax+0x8],0xc0036914
c00012e7:	75 0d                	jne    c00012f6 <dlmalloc+0x151>
c00012e9:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012ee:	8d 43 08             	lea    eax,[ebx+0x8]
c00012f1:	e9 35 02 00 00       	jmp    c000152b <dlmalloc+0x386>
c00012f6:	89 f8                	mov    eax,edi
c00012f8:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012fe:	77 19                	ja     c0001319 <dlmalloc+0x174>
c0001300:	c1 e8 03             	shr    eax,0x3
c0001303:	8d 14 00             	lea    edx,[eax+eax*1]
c0001306:	83 c2 0d             	add    edx,0xd
c0001309:	8d 2c 95 d8 68 03 c0 	lea    ebp,[edx*4-0x3ffc9728]
c0001310:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001317:	eb 46                	jmp    c000135f <dlmalloc+0x1ba>
c0001319:	e8 c4 f9 ff ff       	call   c0000ce2 <largebin_index>
c000131e:	8d 14 00             	lea    edx,[eax+eax*1]
c0001321:	83 c2 0d             	add    edx,0xd
c0001324:	8d 0c 95 e0 68 03 c0 	lea    ecx,[edx*4-0x3ffc9720]
c000132b:	8b 14 95 e0 68 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc9720]
c0001332:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001335:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001339:	89 d5                	mov    ebp,edx
c000133b:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000133f:	74 1e                	je     c000135f <dlmalloc+0x1ba>
c0001341:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001344:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001347:	77 12                	ja     c000135b <dlmalloc+0x1b6>
c0001349:	83 cf 01             	or     edi,0x1
c000134c:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000134f:	76 05                	jbe    c0001356 <dlmalloc+0x1b1>
c0001351:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001354:	eb f6                	jmp    c000134c <dlmalloc+0x1a7>
c0001356:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001359:	eb 04                	jmp    c000135f <dlmalloc+0x1ba>
c000135b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000135f:	89 c7                	mov    edi,eax
c0001361:	88 c1                	mov    cl,al
c0001363:	c1 ff 05             	sar    edi,0x5
c0001366:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000136a:	bf 01 00 00 00       	mov    edi,0x1
c000136f:	d3 e7                	shl    edi,cl
c0001371:	89 f8                	mov    eax,edi
c0001373:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001377:	09 04 bd 14 6c 03 c0 	or     DWORD PTR [edi*4-0x3ffc93ec],eax
c000137e:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001381:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001384:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001387:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000138a:	e9 db fe ff ff       	jmp    c000126a <dlmalloc+0xc5>
c000138f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001395:	76 78                	jbe    c000140f <dlmalloc+0x26a>
c0001397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000139b:	8d 04 c5 14 69 03 c0 	lea    eax,[eax*8-0x3ffc96ec]
c00013a2:	8d 48 f8             	lea    ecx,[eax-0x8]
c00013a5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013a8:	39 ca                	cmp    edx,ecx
c00013aa:	74 63                	je     c000140f <dlmalloc+0x26a>
c00013ac:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00013af:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00013b2:	83 e3 fc             	and    ebx,0xfffffffc
c00013b5:	39 de                	cmp    esi,ebx
c00013b7:	77 52                	ja     c000140b <dlmalloc+0x266>
c00013b9:	89 df                	mov    edi,ebx
c00013bb:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00013be:	29 f7                	sub    edi,esi
c00013c0:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00013c3:	01 d3                	add    ebx,edx
c00013c5:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00013c8:	83 ff 0f             	cmp    edi,0xf
c00013cb:	8d 42 08             	lea    eax,[edx+0x8]
c00013ce:	77 09                	ja     c00013d9 <dlmalloc+0x234>
c00013d0:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00013d4:	e9 52 01 00 00       	jmp    c000152b <dlmalloc+0x386>
c00013d9:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00013dc:	83 ce 01             	or     esi,0x1
c00013df:	89 0d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,ecx
c00013e5:	89 0d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,ecx
c00013eb:	c7 41 08 14 69 03 c0 	mov    DWORD PTR [ecx+0x8],0xc0036914
c00013f2:	c7 41 0c 14 69 03 c0 	mov    DWORD PTR [ecx+0xc],0xc0036914
c00013f9:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013fc:	89 fa                	mov    edx,edi
c00013fe:	83 ca 01             	or     edx,0x1
c0001401:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001404:	89 3b                	mov    DWORD PTR [ebx],edi
c0001406:	e9 20 01 00 00       	jmp    c000152b <dlmalloc+0x386>
c000140b:	89 c2                	mov    edx,eax
c000140d:	eb 99                	jmp    c00013a8 <dlmalloc+0x203>
c000140f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001413:	b8 01 00 00 00       	mov    eax,0x1
c0001418:	41                   	inc    ecx
c0001419:	89 cb                	mov    ebx,ecx
c000141b:	8d 14 cd 0c 69 03 c0 	lea    edx,[ecx*8-0x3ffc96f4]
c0001422:	c1 eb 05             	shr    ebx,0x5
c0001425:	d3 e0                	shl    eax,cl
c0001427:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c000142e:	39 f8                	cmp    eax,edi
c0001430:	77 04                	ja     c0001436 <dlmalloc+0x291>
c0001432:	85 c0                	test   eax,eax
c0001434:	75 26                	jne    c000145c <dlmalloc+0x2b7>
c0001436:	43                   	inc    ebx
c0001437:	83 fb 02             	cmp    ebx,0x2
c000143a:	0f 87 a6 00 00 00    	ja     c00014e6 <dlmalloc+0x341>
c0001440:	8b 3c 9d 14 6c 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc93ec]
c0001447:	85 ff                	test   edi,edi
c0001449:	74 eb                	je     c0001436 <dlmalloc+0x291>
c000144b:	89 d8                	mov    eax,ebx
c000144d:	c1 e0 06             	shl    eax,0x6
c0001450:	8d 14 85 0c 69 03 c0 	lea    edx,[eax*4-0x3ffc96f4]
c0001457:	b8 01 00 00 00       	mov    eax,0x1
c000145c:	85 f8                	test   eax,edi
c000145e:	75 07                	jne    c0001467 <dlmalloc+0x2c2>
c0001460:	83 c2 08             	add    edx,0x8
c0001463:	01 c0                	add    eax,eax
c0001465:	eb f5                	jmp    c000145c <dlmalloc+0x2b7>
c0001467:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000146a:	39 ca                	cmp    edx,ecx
c000146c:	75 14                	jne    c0001482 <dlmalloc+0x2dd>
c000146e:	89 c1                	mov    ecx,eax
c0001470:	83 c2 08             	add    edx,0x8
c0001473:	f7 d1                	not    ecx
c0001475:	01 c0                	add    eax,eax
c0001477:	21 cf                	and    edi,ecx
c0001479:	89 3c 9d 14 6c 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc93ec],edi
c0001480:	eb ac                	jmp    c000142e <dlmalloc+0x289>
c0001482:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001485:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001488:	83 e0 fc             	and    eax,0xfffffffc
c000148b:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000148e:	89 c3                	mov    ebx,eax
c0001490:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001493:	29 f3                	sub    ebx,esi
c0001495:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001498:	83 fb 0f             	cmp    ebx,0xf
c000149b:	8d 41 08             	lea    eax,[ecx+0x8]
c000149e:	77 09                	ja     c00014a9 <dlmalloc+0x304>
c00014a0:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00014a4:	e9 82 00 00 00       	jmp    c000152b <dlmalloc+0x386>
c00014a9:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00014ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00014b2:	89 3d 1c 69 03 c0    	mov    DWORD PTR ds:0xc003691c,edi
c00014b8:	89 3d 20 69 03 c0    	mov    DWORD PTR ds:0xc0036920,edi
c00014be:	c7 47 08 14 69 03 c0 	mov    DWORD PTR [edi+0x8],0xc0036914
c00014c5:	c7 47 0c 14 69 03 c0 	mov    DWORD PTR [edi+0xc],0xc0036914
c00014cc:	77 06                	ja     c00014d4 <dlmalloc+0x32f>
c00014ce:	89 3d 10 69 03 c0    	mov    DWORD PTR ds:0xc0036910,edi
c00014d4:	83 ce 01             	or     esi,0x1
c00014d7:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00014da:	89 d9                	mov    ecx,ebx
c00014dc:	83 c9 01             	or     ecx,0x1
c00014df:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00014e2:	89 1a                	mov    DWORD PTR [edx],ebx
c00014e4:	eb 45                	jmp    c000152b <dlmalloc+0x386>
c00014e6:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c00014eb:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014ee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014f1:	83 e2 fc             	and    edx,0xfffffffc
c00014f4:	39 d1                	cmp    ecx,edx
c00014f6:	77 1e                	ja     c0001516 <dlmalloc+0x371>
c00014f8:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014fb:	89 f3                	mov    ebx,esi
c00014fd:	89 0d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,ecx
c0001503:	83 cb 01             	or     ebx,0x1
c0001506:	29 f2                	sub    edx,esi
c0001508:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000150b:	83 ca 01             	or     edx,0x1
c000150e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001511:	e9 2d fd ff ff       	jmp    c0001243 <dlmalloc+0x9e>
c0001516:	83 c4 1c             	add    esp,0x1c
c0001519:	89 f0                	mov    eax,esi
c000151b:	5b                   	pop    ebx
c000151c:	ba e0 68 03 c0       	mov    edx,0xc00368e0
c0001521:	5e                   	pop    esi
c0001522:	5f                   	pop    edi
c0001523:	5d                   	pop    ebp
c0001524:	e9 19 fa ff ff       	jmp    c0000f42 <sYSMALLOc>
c0001529:	31 c0                	xor    eax,eax
c000152b:	83 c4 1c             	add    esp,0x1c
c000152e:	5b                   	pop    ebx
c000152f:	5e                   	pop    esi
c0001530:	5f                   	pop    edi
c0001531:	5d                   	pop    ebp
c0001532:	c3                   	ret    

c0001533 <iALLOc>:
c0001533:	55                   	push   ebp
c0001534:	89 c5                	mov    ebp,eax
c0001536:	57                   	push   edi
c0001537:	56                   	push   esi
c0001538:	53                   	push   ebx
c0001539:	83 ec 2c             	sub    esp,0x2c
c000153c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001540:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001544:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001548:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c000154f:	75 12                	jne    c0001563 <iALLOc+0x30>
c0001551:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001555:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c000155a:	e8 07 f8 ff ff       	call   c0000d66 <malloc_consolidate>
c000155f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001563:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001568:	74 12                	je     c000157c <iALLOc+0x49>
c000156a:	85 ed                	test   ebp,ebp
c000156c:	0f 84 64 01 00 00    	je     c00016d6 <iALLOc+0x1a3>
c0001572:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000157a:	eb 33                	jmp    c00015af <iALLOc+0x7c>
c000157c:	85 ed                	test   ebp,ebp
c000157e:	75 14                	jne    c0001594 <iALLOc+0x61>
c0001580:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001588:	83 c4 2c             	add    esp,0x2c
c000158b:	5b                   	pop    ebx
c000158c:	5e                   	pop    esi
c000158d:	5f                   	pop    edi
c000158e:	5d                   	pop    ebp
c000158f:	e9 11 fc ff ff       	jmp    c00011a5 <dlmalloc>
c0001594:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000159b:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00015a3:	83 f8 0f             	cmp    eax,0xf
c00015a6:	76 07                	jbe    c00015af <iALLOc+0x7c>
c00015a8:	83 e0 f8             	and    eax,0xfffffff8
c00015ab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00015af:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00015b4:	75 09                	jne    c00015bf <iALLOc+0x8c>
c00015b6:	89 d0                	mov    eax,edx
c00015b8:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00015bb:	31 f6                	xor    esi,esi
c00015bd:	eb 3b                	jmp    c00015fa <iALLOc+0xc7>
c00015bf:	8b 02                	mov    eax,DWORD PTR [edx]
c00015c1:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00015c9:	83 c0 0b             	add    eax,0xb
c00015cc:	83 f8 0f             	cmp    eax,0xf
c00015cf:	76 07                	jbe    c00015d8 <iALLOc+0xa5>
c00015d1:	83 e0 f8             	and    eax,0xfffffff8
c00015d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00015d8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00015dc:	0f af f5             	imul   esi,ebp
c00015df:	eb 25                	jmp    c0001606 <iALLOc+0xd3>
c00015e1:	8b 18                	mov    ebx,DWORD PTR [eax]
c00015e3:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015e6:	bb 10 00 00 00       	mov    ebx,0x10
c00015eb:	83 f9 0f             	cmp    ecx,0xf
c00015ee:	76 05                	jbe    c00015f5 <iALLOc+0xc2>
c00015f0:	83 e1 f8             	and    ecx,0xfffffff8
c00015f3:	89 cb                	mov    ebx,ecx
c00015f5:	01 de                	add    esi,ebx
c00015f7:	83 c0 04             	add    eax,0x4
c00015fa:	39 c7                	cmp    edi,eax
c00015fc:	75 e3                	jne    c00015e1 <iALLOc+0xae>
c00015fe:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001606:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000160a:	8b 1d 34 6c 03 c0    	mov    ebx,DWORD PTR ds:0xc0036c34
c0001610:	83 ec 0c             	sub    esp,0xc
c0001613:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c000161d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001621:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001625:	50                   	push   eax
c0001626:	e8 7a fb ff ff       	call   c00011a5 <dlmalloc>
c000162b:	83 c4 10             	add    esp,0x10
c000162e:	89 1d 34 6c 03 c0    	mov    DWORD PTR ds:0xc0036c34,ebx
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 92 00 00 00    	je     c00016ce <iALLOc+0x19b>
c000163c:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000163f:	8d 78 f8             	lea    edi,[eax-0x8]
c0001642:	83 e3 fc             	and    ebx,0xfffffffc
c0001645:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001649:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000164e:	74 1e                	je     c000166e <iALLOc+0x13b>
c0001650:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001654:	89 d9                	mov    ecx,ebx
c0001656:	52                   	push   edx
c0001657:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000165b:	83 e9 04             	sub    ecx,0x4
c000165e:	51                   	push   ecx
c000165f:	6a 00                	push   0x0
c0001661:	50                   	push   eax
c0001662:	e8 89 ee ff ff       	call   c00004f0 <memset>
c0001667:	83 c4 10             	add    esp,0x10
c000166a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000166e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001673:	75 14                	jne    c0001689 <iALLOc+0x156>
c0001675:	8d 04 37             	lea    eax,[edi+esi*1]
c0001678:	29 f3                	sub    ebx,esi
c000167a:	8d 48 08             	lea    ecx,[eax+0x8]
c000167d:	83 cb 01             	or     ebx,0x1
c0001680:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001684:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001687:	89 f3                	mov    ebx,esi
c0001689:	31 c0                	xor    eax,eax
c000168b:	4d                   	dec    ebp
c000168c:	8d 4f 08             	lea    ecx,[edi+0x8]
c000168f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001693:	39 c5                	cmp    ebp,eax
c0001695:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001698:	74 2c                	je     c00016c6 <iALLOc+0x193>
c000169a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000169e:	85 c9                	test   ecx,ecx
c00016a0:	75 15                	jne    c00016b7 <iALLOc+0x184>
c00016a2:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00016a5:	8d 71 0b             	lea    esi,[ecx+0xb]
c00016a8:	b9 10 00 00 00       	mov    ecx,0x10
c00016ad:	83 fe 0f             	cmp    esi,0xf
c00016b0:	76 05                	jbe    c00016b7 <iALLOc+0x184>
c00016b2:	83 e6 f8             	and    esi,0xfffffff8
c00016b5:	89 f1                	mov    ecx,esi
c00016b7:	89 ce                	mov    esi,ecx
c00016b9:	29 cb                	sub    ebx,ecx
c00016bb:	83 ce 01             	or     esi,0x1
c00016be:	40                   	inc    eax
c00016bf:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00016c2:	01 cf                	add    edi,ecx
c00016c4:	eb c6                	jmp    c000168c <iALLOc+0x159>
c00016c6:	83 cb 01             	or     ebx,0x1
c00016c9:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00016cc:	eb 08                	jmp    c00016d6 <iALLOc+0x1a3>
c00016ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00016d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016da:	83 c4 2c             	add    esp,0x2c
c00016dd:	5b                   	pop    ebx
c00016de:	5e                   	pop    esi
c00016df:	5f                   	pop    edi
c00016e0:	5d                   	pop    ebp
c00016e1:	c3                   	ret    

c00016e2 <dlrealloc>:
c00016e2:	55                   	push   ebp
c00016e3:	57                   	push   edi
c00016e4:	56                   	push   esi
c00016e5:	53                   	push   ebx
c00016e6:	83 ec 1c             	sub    esp,0x1c
c00016e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016f1:	85 db                	test   ebx,ebx
c00016f3:	75 10                	jne    c0001705 <dlrealloc+0x23>
c00016f5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	5b                   	pop    ebx
c00016fd:	5e                   	pop    esi
c00016fe:	5f                   	pop    edi
c00016ff:	5d                   	pop    ebp
c0001700:	e9 a0 fa ff ff       	jmp    c00011a5 <dlmalloc>
c0001705:	83 f8 df             	cmp    eax,0xffffffdf
c0001708:	76 07                	jbe    c0001711 <dlrealloc+0x2f>
c000170a:	31 db                	xor    ebx,ebx
c000170c:	e9 6a 01 00 00       	jmp    c000187b <dlrealloc+0x199>
c0001711:	83 c0 0b             	add    eax,0xb
c0001714:	bd 10 00 00 00       	mov    ebp,0x10
c0001719:	83 f8 0f             	cmp    eax,0xf
c000171c:	76 05                	jbe    c0001723 <dlrealloc+0x41>
c000171e:	83 e0 f8             	and    eax,0xfffffff8
c0001721:	89 c5                	mov    ebp,eax
c0001723:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001726:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001729:	89 c6                	mov    esi,eax
c000172b:	83 e6 fc             	and    esi,0xfffffffc
c000172e:	a8 02                	test   al,0x2
c0001730:	75 d8                	jne    c000170a <dlrealloc+0x28>
c0001732:	39 f5                	cmp    ebp,esi
c0001734:	0f 86 04 01 00 00    	jbe    c000183e <dlrealloc+0x15c>
c000173a:	8d 14 37             	lea    edx,[edi+esi*1]
c000173d:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001740:	39 15 0c 69 03 c0    	cmp    DWORD PTR ds:0xc003690c,edx
c0001746:	75 33                	jne    c000177b <dlrealloc+0x99>
c0001748:	83 e1 fc             	and    ecx,0xfffffffc
c000174b:	01 f1                	add    ecx,esi
c000174d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001751:	8d 4d 10             	lea    ecx,[ebp+0x10]
c0001754:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001758:	77 49                	ja     c00017a3 <dlrealloc+0xc1>
c000175a:	01 ef                	add    edi,ebp
c000175c:	83 e0 01             	and    eax,0x1
c000175f:	09 e8                	or     eax,ebp
c0001761:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001764:	89 3d 0c 69 03 c0    	mov    DWORD PTR ds:0xc003690c,edi
c000176a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000176e:	29 e8                	sub    eax,ebp
c0001770:	83 c8 01             	or     eax,0x1
c0001773:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0001776:	e9 00 01 00 00       	jmp    c000187b <dlrealloc+0x199>
c000177b:	89 c8                	mov    eax,ecx
c000177d:	83 e0 fe             	and    eax,0xfffffffe
c0001780:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001785:	75 1c                	jne    c00017a3 <dlrealloc+0xc1>
c0001787:	83 e1 fc             	and    ecx,0xfffffffc
c000178a:	01 f1                	add    ecx,esi
c000178c:	39 cd                	cmp    ebp,ecx
c000178e:	77 13                	ja     c00017a3 <dlrealloc+0xc1>
c0001790:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001793:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001796:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001799:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000179c:	89 ce                	mov    esi,ecx
c000179e:	e9 9b 00 00 00       	jmp    c000183e <dlrealloc+0x15c>
c00017a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00017a7:	8d 45 f9             	lea    eax,[ebp-0x7]
c00017aa:	83 ec 0c             	sub    esp,0xc
c00017ad:	50                   	push   eax
c00017ae:	e8 f2 f9 ff ff       	call   c00011a5 <dlmalloc>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	85 c0                	test   eax,eax
c00017b8:	0f 84 4c ff ff ff    	je     c000170a <dlrealloc+0x28>
c00017be:	8d 48 f8             	lea    ecx,[eax-0x8]
c00017c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017c5:	39 ca                	cmp    edx,ecx
c00017c7:	75 0a                	jne    c00017d3 <dlrealloc+0xf1>
c00017c9:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00017cc:	83 e0 fc             	and    eax,0xfffffffc
c00017cf:	01 c6                	add    esi,eax
c00017d1:	eb 6b                	jmp    c000183e <dlrealloc+0x15c>
c00017d3:	8d 4e fc             	lea    ecx,[esi-0x4]
c00017d6:	83 f9 27             	cmp    ecx,0x27
c00017d9:	76 08                	jbe    c00017e3 <dlrealloc+0x101>
c00017db:	89 de                	mov    esi,ebx
c00017dd:	89 c7                	mov    edi,eax
c00017df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00017e1:	eb 43                	jmp    c0001826 <dlrealloc+0x144>
c00017e3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00017e5:	83 f9 13             	cmp    ecx,0x13
c00017e8:	89 10                	mov    DWORD PTR [eax],edx
c00017ea:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00017ed:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00017f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00017f3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00017f6:	76 2e                	jbe    c0001826 <dlrealloc+0x144>
c00017f8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00017fb:	83 f9 1b             	cmp    ecx,0x1b
c00017fe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001801:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001804:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001807:	76 1d                	jbe    c0001826 <dlrealloc+0x144>
c0001809:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000180c:	83 f9 23             	cmp    ecx,0x23
c000180f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001812:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001815:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001818:	76 0c                	jbe    c0001826 <dlrealloc+0x144>
c000181a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000181d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001820:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001823:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001826:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000182a:	83 ec 0c             	sub    esp,0xc
c000182d:	53                   	push   ebx
c000182e:	e8 1a f6 ff ff       	call   c0000e4d <dlfree>
c0001833:	83 c4 10             	add    esp,0x10
c0001836:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000183a:	89 c3                	mov    ebx,eax
c000183c:	eb 3d                	jmp    c000187b <dlrealloc+0x199>
c000183e:	89 f2                	mov    edx,esi
c0001840:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001843:	29 ea                	sub    edx,ebp
c0001845:	83 e1 01             	and    ecx,0x1
c0001848:	8d 04 37             	lea    eax,[edi+esi*1]
c000184b:	83 fa 0f             	cmp    edx,0xf
c000184e:	77 0b                	ja     c000185b <dlrealloc+0x179>
c0001850:	09 ce                	or     esi,ecx
c0001852:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001855:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001859:	eb 20                	jmp    c000187b <dlrealloc+0x199>
c000185b:	01 ef                	add    edi,ebp
c000185d:	83 ec 0c             	sub    esp,0xc
c0001860:	09 cd                	or     ebp,ecx
c0001862:	83 ca 01             	or     edx,0x1
c0001865:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c0001868:	83 c7 08             	add    edi,0x8
c000186b:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c000186e:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001872:	57                   	push   edi
c0001873:	e8 d5 f5 ff ff       	call   c0000e4d <dlfree>
c0001878:	83 c4 10             	add    esp,0x10
c000187b:	83 c4 1c             	add    esp,0x1c
c000187e:	89 d8                	mov    eax,ebx
c0001880:	5b                   	pop    ebx
c0001881:	5e                   	pop    esi
c0001882:	5f                   	pop    edi
c0001883:	5d                   	pop    ebp
c0001884:	c3                   	ret    

c0001885 <dlmemalign>:
c0001885:	55                   	push   ebp
c0001886:	57                   	push   edi
c0001887:	56                   	push   esi
c0001888:	53                   	push   ebx
c0001889:	83 ec 0c             	sub    esp,0xc
c000188c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001890:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001894:	83 fa 08             	cmp    edx,0x8
c0001897:	77 10                	ja     c00018a9 <dlmemalign+0x24>
c0001899:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000189d:	83 c4 0c             	add    esp,0xc
c00018a0:	5b                   	pop    ebx
c00018a1:	5e                   	pop    esi
c00018a2:	5f                   	pop    edi
c00018a3:	5d                   	pop    ebp
c00018a4:	e9 fc f8 ff ff       	jmp    c00011a5 <dlmalloc>
c00018a9:	bf 10 00 00 00       	mov    edi,0x10
c00018ae:	83 fa 0f             	cmp    edx,0xf
c00018b1:	76 13                	jbe    c00018c6 <dlmemalign+0x41>
c00018b3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00018b6:	85 d1                	test   ecx,edx
c00018b8:	75 04                	jne    c00018be <dlmemalign+0x39>
c00018ba:	89 d7                	mov    edi,edx
c00018bc:	eb 08                	jmp    c00018c6 <dlmemalign+0x41>
c00018be:	39 d7                	cmp    edi,edx
c00018c0:	73 04                	jae    c00018c6 <dlmemalign+0x41>
c00018c2:	01 ff                	add    edi,edi
c00018c4:	eb f8                	jmp    c00018be <dlmemalign+0x39>
c00018c6:	83 f8 df             	cmp    eax,0xffffffdf
c00018c9:	76 07                	jbe    c00018d2 <dlmemalign+0x4d>
c00018cb:	31 c0                	xor    eax,eax
c00018cd:	e9 ce 00 00 00       	jmp    c00019a0 <dlmemalign+0x11b>
c00018d2:	83 c0 0b             	add    eax,0xb
c00018d5:	bd 10 00 00 00       	mov    ebp,0x10
c00018da:	83 f8 0f             	cmp    eax,0xf
c00018dd:	76 05                	jbe    c00018e4 <dlmemalign+0x5f>
c00018df:	83 e0 f8             	and    eax,0xfffffff8
c00018e2:	89 c5                	mov    ebp,eax
c00018e4:	83 ec 0c             	sub    esp,0xc
c00018e7:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018eb:	50                   	push   eax
c00018ec:	e8 b4 f8 ff ff       	call   c00011a5 <dlmalloc>
c00018f1:	83 c4 10             	add    esp,0x10
c00018f4:	89 c1                	mov    ecx,eax
c00018f6:	85 c0                	test   eax,eax
c00018f8:	74 d1                	je     c00018cb <dlmemalign+0x46>
c00018fa:	31 d2                	xor    edx,edx
c00018fc:	8d 70 f8             	lea    esi,[eax-0x8]
c00018ff:	f7 f7                	div    edi
c0001901:	85 d2                	test   edx,edx
c0001903:	74 62                	je     c0001967 <dlmemalign+0xe2>
c0001905:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001909:	89 f8                	mov    eax,edi
c000190b:	f7 d8                	neg    eax
c000190d:	21 c3                	and    ebx,eax
c000190f:	83 eb 08             	sub    ebx,0x8
c0001912:	89 d8                	mov    eax,ebx
c0001914:	29 f0                	sub    eax,esi
c0001916:	83 f8 0f             	cmp    eax,0xf
c0001919:	77 02                	ja     c000191d <dlmemalign+0x98>
c000191b:	01 fb                	add    ebx,edi
c000191d:	89 d8                	mov    eax,ebx
c000191f:	29 f0                	sub    eax,esi
c0001921:	89 c6                	mov    esi,eax
c0001923:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001926:	89 c2                	mov    edx,eax
c0001928:	83 e2 fc             	and    edx,0xfffffffc
c000192b:	29 f2                	sub    edx,esi
c000192d:	a8 02                	test   al,0x2
c000192f:	74 10                	je     c0001941 <dlmemalign+0xbc>
c0001931:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001934:	83 ca 02             	or     edx,0x2
c0001937:	8d 43 08             	lea    eax,[ebx+0x8]
c000193a:	89 33                	mov    DWORD PTR [ebx],esi
c000193c:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000193f:	eb 5f                	jmp    c00019a0 <dlmemalign+0x11b>
c0001941:	83 ec 0c             	sub    esp,0xc
c0001944:	89 d0                	mov    eax,edx
c0001946:	83 c8 01             	or     eax,0x1
c0001949:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000194c:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001951:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001954:	83 e0 01             	and    eax,0x1
c0001957:	09 f0                	or     eax,esi
c0001959:	89 de                	mov    esi,ebx
c000195b:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000195e:	51                   	push   ecx
c000195f:	e8 e9 f4 ff ff       	call   c0000e4d <dlfree>
c0001964:	83 c4 10             	add    esp,0x10
c0001967:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000196a:	a8 02                	test   al,0x2
c000196c:	75 2f                	jne    c000199d <dlmemalign+0x118>
c000196e:	83 e0 fc             	and    eax,0xfffffffc
c0001971:	8d 55 10             	lea    edx,[ebp+0x10]
c0001974:	39 c2                	cmp    edx,eax
c0001976:	73 25                	jae    c000199d <dlmemalign+0x118>
c0001978:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000197b:	83 ec 0c             	sub    esp,0xc
c000197e:	29 e8                	sub    eax,ebp
c0001980:	83 c2 08             	add    edx,0x8
c0001983:	83 c8 01             	or     eax,0x1
c0001986:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001989:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000198c:	83 e0 01             	and    eax,0x1
c000198f:	09 c5                	or     ebp,eax
c0001991:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001994:	52                   	push   edx
c0001995:	e8 b3 f4 ff ff       	call   c0000e4d <dlfree>
c000199a:	83 c4 10             	add    esp,0x10
c000199d:	8d 46 08             	lea    eax,[esi+0x8]
c00019a0:	83 c4 0c             	add    esp,0xc
c00019a3:	5b                   	pop    ebx
c00019a4:	5e                   	pop    esi
c00019a5:	5f                   	pop    edi
c00019a6:	5d                   	pop    ebp
c00019a7:	c3                   	ret    

c00019a8 <dlcalloc>:
c00019a8:	53                   	push   ebx
c00019a9:	83 ec 14             	sub    esp,0x14
c00019ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00019b0:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00019b5:	50                   	push   eax
c00019b6:	e8 ea f7 ff ff       	call   c00011a5 <dlmalloc>
c00019bb:	83 c4 10             	add    esp,0x10
c00019be:	89 c3                	mov    ebx,eax
c00019c0:	85 c0                	test   eax,eax
c00019c2:	74 77                	je     c0001a3b <dlcalloc+0x93>
c00019c4:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00019c7:	89 d0                	mov    eax,edx
c00019c9:	83 e0 fc             	and    eax,0xfffffffc
c00019cc:	80 e2 02             	and    dl,0x2
c00019cf:	75 5a                	jne    c0001a2b <dlcalloc+0x83>
c00019d1:	83 e8 04             	sub    eax,0x4
c00019d4:	83 f8 27             	cmp    eax,0x27
c00019d7:	76 03                	jbe    c00019dc <dlcalloc+0x34>
c00019d9:	51                   	push   ecx
c00019da:	eb 53                	jmp    c0001a2f <dlcalloc+0x87>
c00019dc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019e2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019e9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019f0:	83 f8 13             	cmp    eax,0x13
c00019f3:	76 46                	jbe    c0001a3b <dlcalloc+0x93>
c00019f5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019fc:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001a03:	83 f8 1b             	cmp    eax,0x1b
c0001a06:	76 33                	jbe    c0001a3b <dlcalloc+0x93>
c0001a08:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001a0f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001a16:	83 f8 23             	cmp    eax,0x23
c0001a19:	76 20                	jbe    c0001a3b <dlcalloc+0x93>
c0001a1b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001a22:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001a29:	eb 10                	jmp    c0001a3b <dlcalloc+0x93>
c0001a2b:	83 e8 08             	sub    eax,0x8
c0001a2e:	52                   	push   edx
c0001a2f:	50                   	push   eax
c0001a30:	6a 00                	push   0x0
c0001a32:	53                   	push   ebx
c0001a33:	e8 b8 ea ff ff       	call   c00004f0 <memset>
c0001a38:	83 c4 10             	add    esp,0x10
c0001a3b:	89 d8                	mov    eax,ebx
c0001a3d:	83 c4 08             	add    esp,0x8
c0001a40:	5b                   	pop    ebx
c0001a41:	c3                   	ret    

c0001a42 <dlcfree>:
c0001a42:	e9 06 f4 ff ff       	jmp    c0000e4d <dlfree>

c0001a47 <dlindependent_calloc>:
c0001a47:	83 ec 28             	sub    esp,0x28
c0001a4a:	b9 03 00 00 00       	mov    ecx,0x3
c0001a4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a63:	e8 cb fa ff ff       	call   c0001533 <iALLOc>
c0001a68:	83 c4 2c             	add    esp,0x2c
c0001a6b:	c3                   	ret    

c0001a6c <dlindependent_comalloc>:
c0001a6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a74:	31 c9                	xor    ecx,ecx
c0001a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a7a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a7e:	e9 b0 fa ff ff       	jmp    c0001533 <iALLOc>

c0001a83 <dlvalloc>:
c0001a83:	83 ec 0c             	sub    esp,0xc
c0001a86:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001a8d:	75 0a                	jne    c0001a99 <dlvalloc+0x16>
c0001a8f:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001a94:	e8 cd f2 ff ff       	call   c0000d66 <malloc_consolidate>
c0001a99:	50                   	push   eax
c0001a9a:	50                   	push   eax
c0001a9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a9f:	ff 35 3c 6c 03 c0    	push   DWORD PTR ds:0xc0036c3c
c0001aa5:	e8 db fd ff ff       	call   c0001885 <dlmemalign>
c0001aaa:	83 c4 1c             	add    esp,0x1c
c0001aad:	c3                   	ret    

c0001aae <dlpvalloc>:
c0001aae:	83 ec 0c             	sub    esp,0xc
c0001ab1:	83 3d e0 68 03 c0 00 	cmp    DWORD PTR ds:0xc00368e0,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlpvalloc+0x16>
c0001aba:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001abf:	e8 a2 f2 ff ff       	call   c0000d66 <malloc_consolidate>
c0001ac4:	a1 3c 6c 03 c0       	mov    eax,ds:0xc0036c3c
c0001ac9:	89 c1                	mov    ecx,eax
c0001acb:	52                   	push   edx
c0001acc:	f7 d9                	neg    ecx
c0001ace:	52                   	push   edx
c0001acf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001ad3:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001ad7:	21 ca                	and    edx,ecx
c0001ad9:	52                   	push   edx
c0001ada:	50                   	push   eax
c0001adb:	e8 a5 fd ff ff       	call   c0001885 <dlmemalign>
c0001ae0:	83 c4 1c             	add    esp,0x1c
c0001ae3:	c3                   	ret    

c0001ae4 <dlmalloc_trim>:
c0001ae4:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001ae9:	e8 78 f2 ff ff       	call   c0000d66 <malloc_consolidate>
c0001aee:	31 c0                	xor    eax,eax
c0001af0:	c3                   	ret    

c0001af1 <dlmalloc_usable_size>:
c0001af1:	53                   	push   ebx
c0001af2:	31 c0                	xor    eax,eax
c0001af4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001af8:	85 c9                	test   ecx,ecx
c0001afa:	74 24                	je     c0001b20 <dlmalloc_usable_size+0x2f>
c0001afc:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001aff:	f6 c2 02             	test   dl,0x2
c0001b02:	74 08                	je     c0001b0c <dlmalloc_usable_size+0x1b>
c0001b04:	83 e2 fc             	and    edx,0xfffffffc
c0001b07:	8d 42 f8             	lea    eax,[edx-0x8]
c0001b0a:	eb 14                	jmp    c0001b20 <dlmalloc_usable_size+0x2f>
c0001b0c:	89 d3                	mov    ebx,edx
c0001b0e:	31 c0                	xor    eax,eax
c0001b10:	83 e3 fe             	and    ebx,0xfffffffe
c0001b13:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001b18:	74 06                	je     c0001b20 <dlmalloc_usable_size+0x2f>
c0001b1a:	83 e2 fc             	and    edx,0xfffffffc
c0001b1d:	8d 42 fc             	lea    eax,[edx-0x4]
c0001b20:	5b                   	pop    ebx
c0001b21:	c3                   	ret    

c0001b22 <dlmallinfo>:
c0001b22:	55                   	push   ebp
c0001b23:	57                   	push   edi
c0001b24:	56                   	push   esi
c0001b25:	53                   	push   ebx
c0001b26:	83 ec 08             	sub    esp,0x8
c0001b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001b2d:	83 3d 0c 69 03 c0 00 	cmp    DWORD PTR ds:0xc003690c,0x0
c0001b34:	75 0a                	jne    c0001b40 <dlmallinfo+0x1e>
c0001b36:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001b3b:	e8 26 f2 ff ff       	call   c0000d66 <malloc_consolidate>
c0001b40:	a1 0c 69 03 c0       	mov    eax,ds:0xc003690c
c0001b45:	31 ed                	xor    ebp,ebp
c0001b47:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b4a:	31 c9                	xor    ecx,ecx
c0001b4c:	83 e0 fc             	and    eax,0xfffffffc
c0001b4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b53:	31 c0                	xor    eax,eax
c0001b55:	8b 14 85 e4 68 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc971c]
c0001b5c:	85 d2                	test   edx,edx
c0001b5e:	74 0e                	je     c0001b6e <dlmallinfo+0x4c>
c0001b60:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b63:	45                   	inc    ebp
c0001b64:	83 e6 fc             	and    esi,0xfffffffc
c0001b67:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b6a:	01 f1                	add    ecx,esi
c0001b6c:	eb ee                	jmp    c0001b5c <dlmallinfo+0x3a>
c0001b6e:	40                   	inc    eax
c0001b6f:	83 f8 0a             	cmp    eax,0xa
c0001b72:	75 e1                	jne    c0001b55 <dlmallinfo+0x33>
c0001b74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b78:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b7f:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b82:	b8 14 69 03 c0       	mov    eax,0xc0036914
c0001b87:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b8a:	39 f0                	cmp    eax,esi
c0001b8c:	74 10                	je     c0001b9e <dlmallinfo+0x7c>
c0001b8e:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b91:	ff 04 24             	inc    DWORD PTR [esp]
c0001b94:	83 e7 fc             	and    edi,0xfffffffc
c0001b97:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b9a:	01 fa                	add    edx,edi
c0001b9c:	eb ec                	jmp    c0001b8a <dlmallinfo+0x68>
c0001b9e:	83 c0 08             	add    eax,0x8
c0001ba1:	3d 0c 6c 03 c0       	cmp    eax,0xc0036c0c
c0001ba6:	75 df                	jne    c0001b87 <dlmallinfo+0x65>
c0001ba8:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001bab:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001bae:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001bb1:	a1 48 6c 03 c0       	mov    eax,ds:0xc0036c48
c0001bb6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001bb9:	89 03                	mov    DWORD PTR [ebx],eax
c0001bbb:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001bbe:	8b 35 30 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c30
c0001bc4:	29 d0                	sub    eax,edx
c0001bc6:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001bc9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001bcc:	8b 35 44 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c44
c0001bd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001bd6:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001bd9:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001bdc:	8b 35 54 6c 03 c0    	mov    esi,DWORD PTR ds:0xc0036c54
c0001be2:	89 d8                	mov    eax,ebx
c0001be4:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001be7:	83 c4 08             	add    esp,0x8
c0001bea:	5b                   	pop    ebx
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	5d                   	pop    ebp
c0001bee:	c2 04 00             	ret    0x4

c0001bf1 <dlmalloc_stats>:
c0001bf1:	83 ec 30             	sub    esp,0x30
c0001bf4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bf8:	50                   	push   eax
c0001bf9:	e8 24 ff ff ff       	call   c0001b22 <dlmallinfo>
c0001bfe:	83 c4 30             	add    esp,0x30
c0001c01:	c3                   	ret    

c0001c02 <dlmallopt>:
c0001c02:	56                   	push   esi
c0001c03:	b8 e0 68 03 c0       	mov    eax,0xc00368e0
c0001c08:	53                   	push   ebx
c0001c09:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001c0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001c11:	e8 50 f1 ff ff       	call   c0000d66 <malloc_consolidate>
c0001c16:	8d 46 04             	lea    eax,[esi+0x4]
c0001c19:	83 f8 05             	cmp    eax,0x5
c0001c1c:	77 67                	ja     c0001c85 <dlmallopt+0x83>
c0001c1e:	ff 24 85 64 f3 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd0c9c]
c0001c25:	83 fb 50             	cmp    ebx,0x50
c0001c28:	77 5b                	ja     c0001c85 <dlmallopt+0x83>
c0001c2a:	ba 08 00 00 00       	mov    edx,0x8
c0001c2f:	85 db                	test   ebx,ebx
c0001c31:	74 12                	je     c0001c45 <dlmallopt+0x43>
c0001c33:	83 c3 0b             	add    ebx,0xb
c0001c36:	ba 10 00 00 00       	mov    edx,0x10
c0001c3b:	83 fb 0f             	cmp    ebx,0xf
c0001c3e:	76 05                	jbe    c0001c45 <dlmallopt+0x43>
c0001c40:	89 da                	mov    edx,ebx
c0001c42:	83 e2 f8             	and    edx,0xfffffff8
c0001c45:	a1 e0 68 03 c0       	mov    eax,ds:0xc00368e0
c0001c4a:	83 e0 03             	and    eax,0x3
c0001c4d:	09 d0                	or     eax,edx
c0001c4f:	a3 e0 68 03 c0       	mov    ds:0xc00368e0,eax
c0001c54:	eb 31                	jmp    c0001c87 <dlmallopt+0x85>
c0001c56:	89 1d 24 6c 03 c0    	mov    DWORD PTR ds:0xc0036c24,ebx
c0001c5c:	eb 06                	jmp    c0001c64 <dlmallopt+0x62>
c0001c5e:	89 1d 28 6c 03 c0    	mov    DWORD PTR ds:0xc0036c28,ebx
c0001c64:	be 01 00 00 00       	mov    esi,0x1
c0001c69:	eb 1c                	jmp    c0001c87 <dlmallopt+0x85>
c0001c6b:	89 1d 2c 6c 03 c0    	mov    DWORD PTR ds:0xc0036c2c,ebx
c0001c71:	eb f1                	jmp    c0001c64 <dlmallopt+0x62>
c0001c73:	31 f6                	xor    esi,esi
c0001c75:	85 db                	test   ebx,ebx
c0001c77:	75 0e                	jne    c0001c87 <dlmallopt+0x85>
c0001c79:	c7 05 34 6c 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036c34,0x0
c0001c83:	eb df                	jmp    c0001c64 <dlmallopt+0x62>
c0001c85:	31 f6                	xor    esi,esi
c0001c87:	89 f0                	mov    eax,esi
c0001c89:	5b                   	pop    ebx
c0001c8a:	5e                   	pop    esi
c0001c8b:	c3                   	ret    

c0001c8c <isblank>:
c0001c8c:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c91:	74 09                	je     c0001c9c <isblank+0x10>
c0001c93:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c98:	75 0a                	jne    c0001ca4 <isblank+0x18>
c0001c9a:	66 90                	xchg   ax,ax
c0001c9c:	b8 01 00 00 00       	mov    eax,0x1
c0001ca1:	c3                   	ret    
c0001ca2:	66 90                	xchg   ax,ax
c0001ca4:	b8 00 00 00 00       	mov    eax,0x0
c0001ca9:	c3                   	ret    
c0001caa:	66 90                	xchg   ax,ax

c0001cac <iscntrl>:
c0001cac:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001cb1:	7e 09                	jle    c0001cbc <iscntrl+0x10>
c0001cb3:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001cb8:	75 0a                	jne    c0001cc4 <iscntrl+0x18>
c0001cba:	66 90                	xchg   ax,ax
c0001cbc:	b8 01 00 00 00       	mov    eax,0x1
c0001cc1:	c3                   	ret    
c0001cc2:	66 90                	xchg   ax,ax
c0001cc4:	b8 00 00 00 00       	mov    eax,0x0
c0001cc9:	c3                   	ret    
c0001cca:	66 90                	xchg   ax,ax

c0001ccc <isdigit>:
c0001ccc:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001cd1:	7e 0d                	jle    c0001ce0 <isdigit+0x14>
c0001cd3:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001cd8:	7f 06                	jg     c0001ce0 <isdigit+0x14>
c0001cda:	b8 01 00 00 00       	mov    eax,0x1
c0001cdf:	c3                   	ret    
c0001ce0:	b8 00 00 00 00       	mov    eax,0x0
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax

c0001ce8 <islower>:
c0001ce8:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001ced:	7e 0d                	jle    c0001cfc <islower+0x14>
c0001cef:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001cf4:	7f 06                	jg     c0001cfc <islower+0x14>
c0001cf6:	b8 01 00 00 00       	mov    eax,0x1
c0001cfb:	c3                   	ret    
c0001cfc:	b8 00 00 00 00       	mov    eax,0x0
c0001d01:	c3                   	ret    
c0001d02:	66 90                	xchg   ax,ax

c0001d04 <isspace>:
c0001d04:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d09:	7c 19                	jl     c0001d24 <isspace+0x20>
c0001d0b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001d10:	7e 0a                	jle    c0001d1c <isspace+0x18>
c0001d12:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d17:	75 0b                	jne    c0001d24 <isspace+0x20>
c0001d19:	8d 76 00             	lea    esi,[esi+0x0]
c0001d1c:	b8 01 00 00 00       	mov    eax,0x1
c0001d21:	c3                   	ret    
c0001d22:	66 90                	xchg   ax,ax
c0001d24:	b8 00 00 00 00       	mov    eax,0x0
c0001d29:	c3                   	ret    
c0001d2a:	66 90                	xchg   ax,ax

c0001d2c <isupper>:
c0001d2c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d31:	7e 0d                	jle    c0001d40 <isupper+0x14>
c0001d33:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001d38:	7f 06                	jg     c0001d40 <isupper+0x14>
c0001d3a:	b8 01 00 00 00       	mov    eax,0x1
c0001d3f:	c3                   	ret    
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isalpha>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 db ff ff ff       	call   c0001d2c <isupper>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 10                	jne    c0001d68 <isalpha+0x20>
c0001d58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d5c:	e8 87 ff ff ff       	call   c0001ce8 <islower>
c0001d61:	83 c4 04             	add    esp,0x4
c0001d64:	85 c0                	test   eax,eax
c0001d66:	74 08                	je     c0001d70 <isalpha+0x28>
c0001d68:	b8 01 00 00 00       	mov    eax,0x1
c0001d6d:	c3                   	ret    
c0001d6e:	66 90                	xchg   ax,ax
c0001d70:	b8 00 00 00 00       	mov    eax,0x0
c0001d75:	c3                   	ret    
c0001d76:	66 90                	xchg   ax,ax

c0001d78 <isalnum>:
c0001d78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d7c:	e8 c7 ff ff ff       	call   c0001d48 <isalpha>
c0001d81:	83 c4 04             	add    esp,0x4
c0001d84:	85 c0                	test   eax,eax
c0001d86:	75 10                	jne    c0001d98 <isalnum+0x20>
c0001d88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d8c:	e8 3b ff ff ff       	call   c0001ccc <isdigit>
c0001d91:	83 c4 04             	add    esp,0x4
c0001d94:	85 c0                	test   eax,eax
c0001d96:	74 08                	je     c0001da0 <isalnum+0x28>
c0001d98:	b8 01 00 00 00       	mov    eax,0x1
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax
c0001da0:	b8 00 00 00 00       	mov    eax,0x0
c0001da5:	c3                   	ret    
c0001da6:	66 90                	xchg   ax,ax

c0001da8 <ispunct>:
c0001da8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dac:	e8 c7 ff ff ff       	call   c0001d78 <isalnum>
c0001db1:	83 c4 04             	add    esp,0x4
c0001db4:	85 c0                	test   eax,eax
c0001db6:	75 28                	jne    c0001de0 <ispunct+0x38>
c0001db8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dbc:	e8 43 ff ff ff       	call   c0001d04 <isspace>
c0001dc1:	83 c4 04             	add    esp,0x4
c0001dc4:	85 c0                	test   eax,eax
c0001dc6:	75 18                	jne    c0001de0 <ispunct+0x38>
c0001dc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dcc:	e8 db fe ff ff       	call   c0001cac <iscntrl>
c0001dd1:	83 c4 04             	add    esp,0x4
c0001dd4:	85 c0                	test   eax,eax
c0001dd6:	75 08                	jne    c0001de0 <ispunct+0x38>
c0001dd8:	b8 01 00 00 00       	mov    eax,0x1
c0001ddd:	c3                   	ret    
c0001dde:	66 90                	xchg   ax,ax
c0001de0:	b8 00 00 00 00       	mov    eax,0x0
c0001de5:	c3                   	ret    
c0001de6:	66 90                	xchg   ax,ax

c0001de8 <isgraph>:
c0001de8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dec:	e8 87 ff ff ff       	call   c0001d78 <isalnum>
c0001df1:	83 c4 04             	add    esp,0x4
c0001df4:	85 c0                	test   eax,eax
c0001df6:	75 10                	jne    c0001e08 <isgraph+0x20>
c0001df8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001dfc:	e8 a7 ff ff ff       	call   c0001da8 <ispunct>
c0001e01:	83 c4 04             	add    esp,0x4
c0001e04:	85 c0                	test   eax,eax
c0001e06:	74 08                	je     c0001e10 <isgraph+0x28>
c0001e08:	b8 01 00 00 00       	mov    eax,0x1
c0001e0d:	c3                   	ret    
c0001e0e:	66 90                	xchg   ax,ax
c0001e10:	b8 00 00 00 00       	mov    eax,0x0
c0001e15:	c3                   	ret    
c0001e16:	66 90                	xchg   ax,ax

c0001e18 <isprint>:
c0001e18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e1c:	e8 c7 ff ff ff       	call   c0001de8 <isgraph>
c0001e21:	83 c4 04             	add    esp,0x4
c0001e24:	85 c0                	test   eax,eax
c0001e26:	75 08                	jne    c0001e30 <isprint+0x18>
c0001e28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001e2d:	75 09                	jne    c0001e38 <isprint+0x20>
c0001e2f:	90                   	nop
c0001e30:	b8 01 00 00 00       	mov    eax,0x1
c0001e35:	c3                   	ret    
c0001e36:	66 90                	xchg   ax,ax
c0001e38:	b8 00 00 00 00       	mov    eax,0x0
c0001e3d:	c3                   	ret    
c0001e3e:	66 90                	xchg   ax,ax

c0001e40 <isxdigit>:
c0001e40:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e44:	e8 83 fe ff ff       	call   c0001ccc <isdigit>
c0001e49:	83 c4 04             	add    esp,0x4
c0001e4c:	85 c0                	test   eax,eax
c0001e4e:	75 20                	jne    c0001e70 <isxdigit+0x30>
c0001e50:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001e55:	7e 09                	jle    c0001e60 <isxdigit+0x20>
c0001e57:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001e5c:	7e 12                	jle    c0001e70 <isxdigit+0x30>
c0001e5e:	66 90                	xchg   ax,ax
c0001e60:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001e65:	7e 11                	jle    c0001e78 <isxdigit+0x38>
c0001e67:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001e6c:	7f 0a                	jg     c0001e78 <isxdigit+0x38>
c0001e6e:	66 90                	xchg   ax,ax
c0001e70:	b8 01 00 00 00       	mov    eax,0x1
c0001e75:	c3                   	ret    
c0001e76:	66 90                	xchg   ax,ax
c0001e78:	b8 00 00 00 00       	mov    eax,0x0
c0001e7d:	c3                   	ret    

c0001e7e <disk_status>:
c0001e7e:	31 c0                	xor    eax,eax
c0001e80:	c3                   	ret    

c0001e81 <disk_initialize>:
c0001e81:	31 c0                	xor    eax,eax
c0001e83:	c3                   	ret    

c0001e84 <disk_read>:
c0001e84:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e89:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001e91:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001e95:	e9 0e 6a 02 00       	jmp    c00288a8 <fatWrapperReadDisk>

c0001e9a <disk_write>:
c0001e9a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001e9f:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001ea7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001eab:	e9 38 6a 02 00       	jmp    c00288e8 <fatWrapperWriteDisk>

c0001eb0 <disk_ioctl>:
c0001eb0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001eb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001eb9:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001ebe:	0f b6 04 85 20 03 04 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffbfce0]
c0001ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001eca:	e9 59 6a 02 00       	jmp    c0028928 <fatWrapperIoctl>

c0001ecf <ld_word>:
c0001ecf:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ed3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed6:	c1 e2 08             	shl    edx,0x8
c0001ed9:	09 d0                	or     eax,edx
c0001edb:	c3                   	ret    

c0001edc <ld_dword>:
c0001edc:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001ee0:	89 d1                	mov    ecx,edx
c0001ee2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ee6:	c1 e1 08             	shl    ecx,0x8
c0001ee9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001eec:	09 ca                	or     edx,ecx
c0001eee:	c1 e2 08             	shl    edx,0x8
c0001ef1:	09 d0                	or     eax,edx
c0001ef3:	c3                   	ret    

c0001ef4 <st_word>:
c0001ef4:	66 89 10             	mov    WORD PTR [eax],dx
c0001ef7:	c3                   	ret    

c0001ef8 <st_dword>:
c0001ef8:	89 10                	mov    DWORD PTR [eax],edx
c0001efa:	c3                   	ret    

c0001efb <mem_cpy>:
c0001efb:	85 c9                	test   ecx,ecx
c0001efd:	74 10                	je     c0001f0f <mem_cpy+0x14>
c0001eff:	57                   	push   edi
c0001f00:	01 c1                	add    ecx,eax
c0001f02:	56                   	push   esi
c0001f03:	89 c7                	mov    edi,eax
c0001f05:	89 d6                	mov    esi,edx
c0001f07:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001f08:	39 f9                	cmp    ecx,edi
c0001f0a:	75 fb                	jne    c0001f07 <mem_cpy+0xc>
c0001f0c:	5e                   	pop    esi
c0001f0d:	5f                   	pop    edi
c0001f0e:	c3                   	ret    
c0001f0f:	c3                   	ret    

c0001f10 <mem_set>:
c0001f10:	01 c1                	add    ecx,eax
c0001f12:	40                   	inc    eax
c0001f13:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001f16:	39 c8                	cmp    eax,ecx
c0001f18:	75 f8                	jne    c0001f12 <mem_set+0x2>
c0001f1a:	c3                   	ret    

c0001f1b <mem_cmp>:
c0001f1b:	57                   	push   edi
c0001f1c:	56                   	push   esi
c0001f1d:	89 c6                	mov    esi,eax
c0001f1f:	53                   	push   ebx
c0001f20:	46                   	inc    esi
c0001f21:	42                   	inc    edx
c0001f22:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001f26:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001f2a:	29 fb                	sub    ebx,edi
c0001f2c:	89 cf                	mov    edi,ecx
c0001f2e:	29 f7                	sub    edi,esi
c0001f30:	01 c7                	add    edi,eax
c0001f32:	74 04                	je     c0001f38 <mem_cmp+0x1d>
c0001f34:	85 db                	test   ebx,ebx
c0001f36:	74 e8                	je     c0001f20 <mem_cmp+0x5>
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	5b                   	pop    ebx
c0001f3b:	5e                   	pop    esi
c0001f3c:	5f                   	pop    edi
c0001f3d:	c3                   	ret    

c0001f3e <chk_chr>:
c0001f3e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001f41:	85 c9                	test   ecx,ecx
c0001f43:	74 07                	je     c0001f4c <chk_chr+0xe>
c0001f45:	39 d1                	cmp    ecx,edx
c0001f47:	74 03                	je     c0001f4c <chk_chr+0xe>
c0001f49:	40                   	inc    eax
c0001f4a:	eb f2                	jmp    c0001f3e <chk_chr>
c0001f4c:	89 c8                	mov    eax,ecx
c0001f4e:	c3                   	ret    

c0001f4f <dbc_1st>:
c0001f4f:	31 c0                	xor    eax,eax
c0001f51:	c3                   	ret    

c0001f52 <dbc_2nd>:
c0001f52:	31 c0                	xor    eax,eax
c0001f54:	c3                   	ret    

c0001f55 <tchar2uni>:
c0001f55:	57                   	push   edi
c0001f56:	56                   	push   esi
c0001f57:	53                   	push   ebx
c0001f58:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001f5a:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001f5c:	8d 73 01             	lea    esi,[ebx+0x1]
c0001f5f:	f6 c1 80             	test   cl,0x80
c0001f62:	75 0a                	jne    c0001f6e <tchar2uni+0x19>
c0001f64:	0f b6 d1             	movzx  edx,cl
c0001f67:	89 f3                	mov    ebx,esi
c0001f69:	e9 b2 00 00 00       	jmp    c0002020 <tchar2uni+0xcb>
c0001f6e:	89 ca                	mov    edx,ecx
c0001f70:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001f76:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001f7c:	89 ca                	mov    edx,ecx
c0001f7e:	75 0a                	jne    c0001f8a <tchar2uni+0x35>
c0001f80:	83 e2 1f             	and    edx,0x1f
c0001f83:	b9 01 00 00 00       	mov    ecx,0x1
c0001f88:	eb 37                	jmp    c0001fc1 <tchar2uni+0x6c>
c0001f8a:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001f90:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001f96:	75 0c                	jne    c0001fa4 <tchar2uni+0x4f>
c0001f98:	89 ca                	mov    edx,ecx
c0001f9a:	b9 02 00 00 00       	mov    ecx,0x2
c0001f9f:	83 e2 0f             	and    edx,0xf
c0001fa2:	eb 1d                	jmp    c0001fc1 <tchar2uni+0x6c>
c0001fa4:	89 cf                	mov    edi,ecx
c0001fa6:	83 ca ff             	or     edx,0xffffffff
c0001fa9:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001faf:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001fb5:	75 70                	jne    c0002027 <tchar2uni+0xd2>
c0001fb7:	89 ca                	mov    edx,ecx
c0001fb9:	b9 03 00 00 00       	mov    ecx,0x3
c0001fbe:	83 e2 07             	and    edx,0x7
c0001fc1:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001fc5:	46                   	inc    esi
c0001fc6:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001fc9:	89 cf                	mov    edi,ecx
c0001fcb:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001fd1:	83 c7 80             	add    edi,0xffffff80
c0001fd4:	75 4e                	jne    c0002024 <tchar2uni+0xcf>
c0001fd6:	c1 e2 06             	shl    edx,0x6
c0001fd9:	83 e1 3f             	and    ecx,0x3f
c0001fdc:	09 ca                	or     edx,ecx
c0001fde:	39 de                	cmp    esi,ebx
c0001fe0:	75 e3                	jne    c0001fc5 <tchar2uni+0x70>
c0001fe2:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001fe5:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001feb:	77 37                	ja     c0002024 <tchar2uni+0xcf>
c0001fed:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ff3:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ff9:	76 29                	jbe    c0002024 <tchar2uni+0xcf>
c0001ffb:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0002001:	76 1d                	jbe    c0002020 <tchar2uni+0xcb>
c0002003:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0002009:	81 e2 ff 03 00 00    	and    edx,0x3ff
c000200f:	c1 e1 06             	shl    ecx,0x6
c0002012:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002018:	09 ca                	or     edx,ecx
c000201a:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002020:	89 18                	mov    DWORD PTR [eax],ebx
c0002022:	eb 03                	jmp    c0002027 <tchar2uni+0xd2>
c0002024:	83 ca ff             	or     edx,0xffffffff
c0002027:	5b                   	pop    ebx
c0002028:	89 d0                	mov    eax,edx
c000202a:	5e                   	pop    esi
c000202b:	5f                   	pop    edi
c000202c:	c3                   	ret    

c000202d <put_utf>:
c000202d:	53                   	push   ebx
c000202e:	83 f8 7f             	cmp    eax,0x7f
c0002031:	89 c3                	mov    ebx,eax
c0002033:	b0 00                	mov    al,0x0
c0002035:	77 11                	ja     c0002048 <put_utf+0x1b>
c0002037:	85 c9                	test   ecx,ecx
c0002039:	0f 84 e5 00 00 00    	je     c0002124 <put_utf+0xf7>
c000203f:	88 1a                	mov    BYTE PTR [edx],bl
c0002041:	b0 01                	mov    al,0x1
c0002043:	e9 dc 00 00 00       	jmp    c0002124 <put_utf+0xf7>
c0002048:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000204e:	77 23                	ja     c0002073 <put_utf+0x46>
c0002050:	83 f9 01             	cmp    ecx,0x1
c0002053:	0f 86 cb 00 00 00    	jbe    c0002124 <put_utf+0xf7>
c0002059:	89 d8                	mov    eax,ebx
c000205b:	83 e3 3f             	and    ebx,0x3f
c000205e:	c1 e8 06             	shr    eax,0x6
c0002061:	83 cb 80             	or     ebx,0xffffff80
c0002064:	83 c8 c0             	or     eax,0xffffffc0
c0002067:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000206a:	88 02                	mov    BYTE PTR [edx],al
c000206c:	b0 02                	mov    al,0x2
c000206e:	e9 b1 00 00 00       	jmp    c0002124 <put_utf+0xf7>
c0002073:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0002079:	77 40                	ja     c00020bb <put_utf+0x8e>
c000207b:	83 f9 02             	cmp    ecx,0x2
c000207e:	0f 86 a0 00 00 00    	jbe    c0002124 <put_utf+0xf7>
c0002084:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000208a:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002090:	0f 86 8e 00 00 00    	jbe    c0002124 <put_utf+0xf7>
c0002096:	89 d8                	mov    eax,ebx
c0002098:	c1 e8 0c             	shr    eax,0xc
c000209b:	83 c8 e0             	or     eax,0xffffffe0
c000209e:	88 02                	mov    BYTE PTR [edx],al
c00020a0:	89 d8                	mov    eax,ebx
c00020a2:	83 e3 3f             	and    ebx,0x3f
c00020a5:	c1 e8 06             	shr    eax,0x6
c00020a8:	83 cb 80             	or     ebx,0xffffff80
c00020ab:	83 e0 3f             	and    eax,0x3f
c00020ae:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00020b1:	83 c8 80             	or     eax,0xffffff80
c00020b4:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00020b7:	b0 03                	mov    al,0x3
c00020b9:	eb 69                	jmp    c0002124 <put_utf+0xf7>
c00020bb:	83 f9 03             	cmp    ecx,0x3
c00020be:	76 64                	jbe    c0002124 <put_utf+0xf7>
c00020c0:	89 d9                	mov    ecx,ebx
c00020c2:	0f b7 c3             	movzx  eax,bx
c00020c5:	66 31 c9             	xor    cx,cx
c00020c8:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00020ce:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00020d4:	c1 e9 06             	shr    ecx,0x6
c00020d7:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00020dd:	77 43                	ja     c0002122 <put_utf+0xf5>
c00020df:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00020e5:	77 3b                	ja     c0002122 <put_utf+0xf5>
c00020e7:	09 cb                	or     ebx,ecx
c00020e9:	81 c3 00 00 01 00    	add    ebx,0x10000
c00020ef:	89 d8                	mov    eax,ebx
c00020f1:	c1 e8 12             	shr    eax,0x12
c00020f4:	83 c8 f0             	or     eax,0xfffffff0
c00020f7:	88 02                	mov    BYTE PTR [edx],al
c00020f9:	89 d8                	mov    eax,ebx
c00020fb:	c1 e8 0c             	shr    eax,0xc
c00020fe:	83 e0 3f             	and    eax,0x3f
c0002101:	83 c8 80             	or     eax,0xffffff80
c0002104:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0002107:	89 d8                	mov    eax,ebx
c0002109:	83 e3 3f             	and    ebx,0x3f
c000210c:	c1 e8 06             	shr    eax,0x6
c000210f:	83 cb 80             	or     ebx,0xffffff80
c0002112:	83 e0 3f             	and    eax,0x3f
c0002115:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002118:	83 c8 80             	or     eax,0xffffff80
c000211b:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000211e:	b0 04                	mov    al,0x4
c0002120:	eb 02                	jmp    c0002124 <put_utf+0xf7>
c0002122:	31 c0                	xor    eax,eax
c0002124:	5b                   	pop    ebx
c0002125:	c3                   	ret    

c0002126 <clst2sect>:
c0002126:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002129:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000212c:	83 ea 02             	sub    edx,0x2
c000212f:	39 ca                	cmp    edx,ecx
c0002131:	76 0d                	jbe    c0002140 <clst2sect+0x1a>
c0002133:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002137:	0f af d1             	imul   edx,ecx
c000213a:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000213d:	89 d0                	mov    eax,edx
c000213f:	c3                   	ret    
c0002140:	31 c0                	xor    eax,eax
c0002142:	c3                   	ret    

c0002143 <pick_lfn>:
c0002143:	55                   	push   ebp
c0002144:	57                   	push   edi
c0002145:	89 c7                	mov    edi,eax
c0002147:	56                   	push   esi
c0002148:	8d 42 1a             	lea    eax,[edx+0x1a]
c000214b:	53                   	push   ebx
c000214c:	89 d3                	mov    ebx,edx
c000214e:	e8 7c fd ff ff       	call   c0001ecf <ld_word>
c0002153:	66 85 c0             	test   ax,ax
c0002156:	74 04                	je     c000215c <pick_lfn+0x19>
c0002158:	31 c0                	xor    eax,eax
c000215a:	eb 62                	jmp    c00021be <pick_lfn+0x7b>
c000215c:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000215f:	bd 01 00 00 00       	mov    ebp,0x1
c0002164:	83 e1 bf             	and    ecx,0xffffffbf
c0002167:	31 f6                	xor    esi,esi
c0002169:	49                   	dec    ecx
c000216a:	6b c9 0d             	imul   ecx,ecx,0xd
c000216d:	0f b6 86 c0 f4 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffd0b40]
c0002174:	01 d8                	add    eax,ebx
c0002176:	e8 54 fd ff ff       	call   c0001ecf <ld_word>
c000217b:	66 85 ed             	test   bp,bp
c000217e:	74 11                	je     c0002191 <pick_lfn+0x4e>
c0002180:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002186:	77 d0                	ja     c0002158 <pick_lfn+0x15>
c0002188:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000218c:	89 c5                	mov    ebp,eax
c000218e:	41                   	inc    ecx
c000218f:	eb 0a                	jmp    c000219b <pick_lfn+0x58>
c0002191:	0f b7 c0             	movzx  eax,ax
c0002194:	3d ff ff 00 00       	cmp    eax,0xffff
c0002199:	75 bd                	jne    c0002158 <pick_lfn+0x15>
c000219b:	46                   	inc    esi
c000219c:	83 fe 0d             	cmp    esi,0xd
c000219f:	75 cc                	jne    c000216d <pick_lfn+0x2a>
c00021a1:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00021a4:	74 13                	je     c00021b9 <pick_lfn+0x76>
c00021a6:	66 85 ed             	test   bp,bp
c00021a9:	74 0e                	je     c00021b9 <pick_lfn+0x76>
c00021ab:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00021b1:	77 a5                	ja     c0002158 <pick_lfn+0x15>
c00021b3:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00021b9:	b8 01 00 00 00       	mov    eax,0x1
c00021be:	5b                   	pop    ebx
c00021bf:	5e                   	pop    esi
c00021c0:	5f                   	pop    edi
c00021c1:	5d                   	pop    ebp
c00021c2:	c3                   	ret    

c00021c3 <put_lfn>:
c00021c3:	55                   	push   ebp
c00021c4:	57                   	push   edi
c00021c5:	89 d7                	mov    edi,edx
c00021c7:	56                   	push   esi
c00021c8:	31 f6                	xor    esi,esi
c00021ca:	53                   	push   ebx
c00021cb:	83 ec 0c             	sub    esp,0xc
c00021ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00021d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00021d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00021da:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00021e0:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00021e3:	8d 42 1a             	lea    eax,[edx+0x1a]
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	e8 07 fd ff ff       	call   c0001ef4 <st_word>
c00021ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021f4:	0f b6 d9             	movzx  ebx,cl
c00021f7:	4b                   	dec    ebx
c00021f8:	6b db 0d             	imul   ebx,ebx,0xd
c00021fb:	0f b7 c6             	movzx  eax,si
c00021fe:	3d ff ff 00 00       	cmp    eax,0xffff
c0002203:	74 09                	je     c000220e <put_lfn+0x4b>
c0002205:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002209:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c000220d:	43                   	inc    ebx
c000220e:	0f b7 ee             	movzx  ebp,si
c0002211:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002214:	89 ea                	mov    edx,ebp
c0002216:	0f b6 80 c0 f4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0b40]
c000221d:	01 f8                	add    eax,edi
c000221f:	e8 d0 fc ff ff       	call   c0001ef4 <st_word>
c0002224:	85 ed                	test   ebp,ebp
c0002226:	75 05                	jne    c000222d <put_lfn+0x6a>
c0002228:	be ff ff 00 00       	mov    esi,0xffff
c000222d:	ff 04 24             	inc    DWORD PTR [esp]
c0002230:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002234:	75 c5                	jne    c00021fb <put_lfn+0x38>
c0002236:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000223c:	74 0b                	je     c0002249 <put_lfn+0x86>
c000223e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002242:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002247:	75 07                	jne    c0002250 <put_lfn+0x8d>
c0002249:	83 c9 40             	or     ecx,0x40
c000224c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002250:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002254:	88 07                	mov    BYTE PTR [edi],al
c0002256:	83 c4 0c             	add    esp,0xc
c0002259:	5b                   	pop    ebx
c000225a:	5e                   	pop    esi
c000225b:	5f                   	pop    edi
c000225c:	5d                   	pop    ebp
c000225d:	c3                   	ret    

c000225e <gen_numname>:
c000225e:	57                   	push   edi
c000225f:	89 cf                	mov    edi,ecx
c0002261:	56                   	push   esi
c0002262:	b9 0b 00 00 00       	mov    ecx,0xb
c0002267:	53                   	push   ebx
c0002268:	89 c6                	mov    esi,eax
c000226a:	83 ec 10             	sub    esp,0x10
c000226d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002271:	e8 85 fc ff ff       	call   c0001efb <mem_cpy>
c0002276:	83 fb 05             	cmp    ebx,0x5
c0002279:	76 30                	jbe    c00022ab <gen_numname+0x4d>
c000227b:	66 8b 07             	mov    ax,WORD PTR [edi]
c000227e:	66 85 c0             	test   ax,ax
c0002281:	74 28                	je     c00022ab <gen_numname+0x4d>
c0002283:	83 c7 02             	add    edi,0x2
c0002286:	ba 10 00 00 00       	mov    edx,0x10
c000228b:	01 db                	add    ebx,ebx
c000228d:	89 c1                	mov    ecx,eax
c000228f:	c1 e0 10             	shl    eax,0x10
c0002292:	83 e1 01             	and    ecx,0x1
c0002295:	c1 e8 11             	shr    eax,0x11
c0002298:	01 cb                	add    ebx,ecx
c000229a:	0f ba e3 10          	bt     ebx,0x10
c000229e:	73 06                	jae    c00022a6 <gen_numname+0x48>
c00022a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00022a6:	4a                   	dec    edx
c00022a7:	75 e2                	jne    c000228b <gen_numname+0x2d>
c00022a9:	eb d0                	jmp    c000227b <gen_numname+0x1d>
c00022ab:	b8 07 00 00 00       	mov    eax,0x7
c00022b0:	89 d9                	mov    ecx,ebx
c00022b2:	83 e1 0f             	and    ecx,0xf
c00022b5:	8d 79 30             	lea    edi,[ecx+0x30]
c00022b8:	89 fa                	mov    edx,edi
c00022ba:	83 ff 39             	cmp    edi,0x39
c00022bd:	76 03                	jbe    c00022c2 <gen_numname+0x64>
c00022bf:	8d 51 37             	lea    edx,[ecx+0x37]
c00022c2:	8d 48 ff             	lea    ecx,[eax-0x1]
c00022c5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00022c9:	89 da                	mov    edx,ebx
c00022cb:	c1 ea 04             	shr    edx,0x4
c00022ce:	83 fb 0f             	cmp    ebx,0xf
c00022d1:	76 06                	jbe    c00022d9 <gen_numname+0x7b>
c00022d3:	89 c8                	mov    eax,ecx
c00022d5:	89 d3                	mov    ebx,edx
c00022d7:	eb d7                	jmp    c00022b0 <gen_numname+0x52>
c00022d9:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00022de:	31 d2                	xor    edx,edx
c00022e0:	8d 58 fe             	lea    ebx,[eax-0x2]
c00022e3:	8d 04 16             	lea    eax,[esi+edx*1]
c00022e6:	39 ca                	cmp    edx,ecx
c00022e8:	73 19                	jae    c0002303 <gen_numname+0xa5>
c00022ea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00022ed:	83 f8 20             	cmp    eax,0x20
c00022f0:	74 11                	je     c0002303 <gen_numname+0xa5>
c00022f2:	e8 58 fc ff ff       	call   c0001f4f <dbc_1st>
c00022f7:	85 c0                	test   eax,eax
c00022f9:	74 05                	je     c0002300 <gen_numname+0xa2>
c00022fb:	39 d3                	cmp    ebx,edx
c00022fd:	74 04                	je     c0002303 <gen_numname+0xa5>
c00022ff:	42                   	inc    edx
c0002300:	42                   	inc    edx
c0002301:	eb e0                	jmp    c00022e3 <gen_numname+0x85>
c0002303:	b0 20                	mov    al,0x20
c0002305:	83 f9 07             	cmp    ecx,0x7
c0002308:	77 05                	ja     c000230f <gen_numname+0xb1>
c000230a:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000230e:	41                   	inc    ecx
c000230f:	42                   	inc    edx
c0002310:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002314:	83 fa 07             	cmp    edx,0x7
c0002317:	76 ea                	jbe    c0002303 <gen_numname+0xa5>
c0002319:	83 c4 10             	add    esp,0x10
c000231c:	5b                   	pop    ebx
c000231d:	5e                   	pop    esi
c000231e:	5f                   	pop    edi
c000231f:	c3                   	ret    

c0002320 <sum_sfn>:
c0002320:	53                   	push   ebx
c0002321:	31 c9                	xor    ecx,ecx
c0002323:	31 db                	xor    ebx,ebx
c0002325:	0f b6 d1             	movzx  edx,cl
c0002328:	c1 e1 07             	shl    ecx,0x7
c000232b:	d1 ea                	shr    edx,1
c000232d:	09 ca                	or     edx,ecx
c000232f:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002332:	43                   	inc    ebx
c0002333:	01 ca                	add    edx,ecx
c0002335:	83 fb 0b             	cmp    ebx,0xb
c0002338:	88 d1                	mov    cl,dl
c000233a:	75 e9                	jne    c0002325 <sum_sfn+0x5>
c000233c:	88 d0                	mov    al,dl
c000233e:	5b                   	pop    ebx
c000233f:	c3                   	ret    

c0002340 <get_ldnumber>:
c0002340:	8b 10                	mov    edx,DWORD PTR [eax]
c0002342:	85 d2                	test   edx,edx
c0002344:	74 14                	je     c000235a <get_ldnumber+0x1a>
c0002346:	56                   	push   esi
c0002347:	53                   	push   ebx
c0002348:	89 d3                	mov    ebx,edx
c000234a:	43                   	inc    ebx
c000234b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000234e:	80 f9 1f             	cmp    cl,0x1f
c0002351:	76 0d                	jbe    c0002360 <get_ldnumber+0x20>
c0002353:	80 f9 3a             	cmp    cl,0x3a
c0002356:	75 f2                	jne    c000234a <get_ldnumber+0xa>
c0002358:	eb 0a                	jmp    c0002364 <get_ldnumber+0x24>
c000235a:	83 c9 ff             	or     ecx,0xffffffff
c000235d:	89 c8                	mov    eax,ecx
c000235f:	c3                   	ret    
c0002360:	31 c9                	xor    ecx,ecx
c0002362:	eb 24                	jmp    c0002388 <get_ldnumber+0x48>
c0002364:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002367:	8d 4e d0             	lea    ecx,[esi-0x30]
c000236a:	80 f9 09             	cmp    cl,0x9
c000236d:	77 16                	ja     c0002385 <get_ldnumber+0x45>
c000236f:	83 c2 02             	add    edx,0x2
c0002372:	83 c9 ff             	or     ecx,0xffffffff
c0002375:	39 d3                	cmp    ebx,edx
c0002377:	75 0f                	jne    c0002388 <get_ldnumber+0x48>
c0002379:	89 f2                	mov    edx,esi
c000237b:	89 18                	mov    DWORD PTR [eax],ebx
c000237d:	0f be ca             	movsx  ecx,dl
c0002380:	83 e9 30             	sub    ecx,0x30
c0002383:	eb 03                	jmp    c0002388 <get_ldnumber+0x48>
c0002385:	83 c9 ff             	or     ecx,0xffffffff
c0002388:	89 c8                	mov    eax,ecx
c000238a:	5b                   	pop    ebx
c000238b:	5e                   	pop    esi
c000238c:	c3                   	ret    

c000238d <validate>:
c000238d:	56                   	push   esi
c000238e:	53                   	push   ebx
c000238f:	89 d6                	mov    esi,edx
c0002391:	51                   	push   ecx
c0002392:	85 c0                	test   eax,eax
c0002394:	75 09                	jne    c000239f <validate+0x12>
c0002396:	b8 09 00 00 00       	mov    eax,0x9
c000239b:	31 c9                	xor    ecx,ecx
c000239d:	eb 2e                	jmp    c00023cd <validate+0x40>
c000239f:	89 c3                	mov    ebx,eax
c00023a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00023a3:	85 c0                	test   eax,eax
c00023a5:	74 ef                	je     c0002396 <validate+0x9>
c00023a7:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023aa:	74 ea                	je     c0002396 <validate+0x9>
c00023ac:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00023af:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00023b3:	75 e1                	jne    c0002396 <validate+0x9>
c00023b5:	83 ec 0c             	sub    esp,0xc
c00023b8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023bc:	50                   	push   eax
c00023bd:	e8 bc fa ff ff       	call   c0001e7e <disk_status>
c00023c2:	83 c4 10             	add    esp,0x10
c00023c5:	a8 01                	test   al,0x1
c00023c7:	75 cd                	jne    c0002396 <validate+0x9>
c00023c9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023cb:	31 c0                	xor    eax,eax
c00023cd:	89 0e                	mov    DWORD PTR [esi],ecx
c00023cf:	5a                   	pop    edx
c00023d0:	5b                   	pop    ebx
c00023d1:	5e                   	pop    esi
c00023d2:	c3                   	ret    

c00023d3 <sync_window>:
c00023d3:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023d7:	74 58                	je     c0002431 <sync_window+0x5e>
c00023d9:	56                   	push   esi
c00023da:	53                   	push   ebx
c00023db:	8d 70 34             	lea    esi,[eax+0x34]
c00023de:	51                   	push   ecx
c00023df:	89 c3                	mov    ebx,eax
c00023e1:	6a 01                	push   0x1
c00023e3:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00023e6:	56                   	push   esi
c00023e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 a9 fa ff ff       	call   c0001e9a <disk_write>
c00023f1:	83 c4 10             	add    esp,0x10
c00023f4:	ba 01 00 00 00       	mov    edx,0x1
c00023f9:	85 c0                	test   eax,eax
c00023fb:	75 2e                	jne    c000242b <sync_window+0x58>
c00023fd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002400:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002403:	89 c1                	mov    ecx,eax
c0002405:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002409:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000240c:	39 d1                	cmp    ecx,edx
c000240e:	73 19                	jae    c0002429 <sync_window+0x56>
c0002410:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002414:	75 13                	jne    c0002429 <sync_window+0x56>
c0002416:	6a 01                	push   0x1
c0002418:	01 d0                	add    eax,edx
c000241a:	50                   	push   eax
c000241b:	56                   	push   esi
c000241c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002420:	50                   	push   eax
c0002421:	e8 74 fa ff ff       	call   c0001e9a <disk_write>
c0002426:	83 c4 10             	add    esp,0x10
c0002429:	31 d2                	xor    edx,edx
c000242b:	89 d0                	mov    eax,edx
c000242d:	5a                   	pop    edx
c000242e:	5b                   	pop    ebx
c000242f:	5e                   	pop    esi
c0002430:	c3                   	ret    
c0002431:	31 d2                	xor    edx,edx
c0002433:	89 d0                	mov    eax,edx
c0002435:	c3                   	ret    

c0002436 <move_window>:
c0002436:	57                   	push   edi
c0002437:	56                   	push   esi
c0002438:	31 f6                	xor    esi,esi
c000243a:	53                   	push   ebx
c000243b:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000243e:	74 32                	je     c0002472 <move_window+0x3c>
c0002440:	89 c3                	mov    ebx,eax
c0002442:	89 d7                	mov    edi,edx
c0002444:	e8 8a ff ff ff       	call   c00023d3 <sync_window>
c0002449:	89 c6                	mov    esi,eax
c000244b:	85 c0                	test   eax,eax
c000244d:	75 23                	jne    c0002472 <move_window+0x3c>
c000244f:	6a 01                	push   0x1
c0002451:	8d 43 34             	lea    eax,[ebx+0x34]
c0002454:	57                   	push   edi
c0002455:	50                   	push   eax
c0002456:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000245a:	50                   	push   eax
c000245b:	e8 24 fa ff ff       	call   c0001e84 <disk_read>
c0002460:	83 c4 10             	add    esp,0x10
c0002463:	85 c0                	test   eax,eax
c0002465:	74 08                	je     c000246f <move_window+0x39>
c0002467:	be 01 00 00 00       	mov    esi,0x1
c000246c:	83 cf ff             	or     edi,0xffffffff
c000246f:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002472:	89 f0                	mov    eax,esi
c0002474:	5b                   	pop    ebx
c0002475:	5e                   	pop    esi
c0002476:	5f                   	pop    edi
c0002477:	c3                   	ret    

c0002478 <check_fs>:
c0002478:	53                   	push   ebx
c0002479:	89 c3                	mov    ebx,eax
c000247b:	83 ec 08             	sub    esp,0x8
c000247e:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002482:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002489:	e8 a8 ff ff ff       	call   c0002436 <move_window>
c000248e:	ba 04 00 00 00       	mov    edx,0x4
c0002493:	85 c0                	test   eax,eax
c0002495:	75 68                	jne    c00024ff <check_fs+0x87>
c0002497:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000249d:	e8 2d fa ff ff       	call   c0001ecf <ld_word>
c00024a2:	ba 03 00 00 00       	mov    edx,0x3
c00024a7:	66 3d 55 aa          	cmp    ax,0xaa55
c00024ab:	75 52                	jne    c00024ff <check_fs+0x87>
c00024ad:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00024b0:	8d 50 18             	lea    edx,[eax+0x18]
c00024b3:	80 fa 01             	cmp    dl,0x1
c00024b6:	76 09                	jbe    c00024c1 <check_fs+0x49>
c00024b8:	ba 02 00 00 00       	mov    edx,0x2
c00024bd:	3c eb                	cmp    al,0xeb
c00024bf:	75 3e                	jne    c00024ff <check_fs+0x87>
c00024c1:	ba e0 31 03 c0       	mov    edx,0xc00331e0
c00024c6:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00024c9:	b9 03 00 00 00       	mov    ecx,0x3
c00024ce:	e8 48 fa ff ff       	call   c0001f1b <mem_cmp>
c00024d3:	31 d2                	xor    edx,edx
c00024d5:	85 c0                	test   eax,eax
c00024d7:	74 26                	je     c00024ff <check_fs+0x87>
c00024d9:	ba 7c f3 02 c0       	mov    edx,0xc002f37c
c00024de:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00024e4:	b9 05 00 00 00       	mov    ecx,0x5
c00024e9:	e8 2d fa ff ff       	call   c0001f1b <mem_cmp>
c00024ee:	31 d2                	xor    edx,edx
c00024f0:	85 c0                	test   eax,eax
c00024f2:	74 0b                	je     c00024ff <check_fs+0x87>
c00024f4:	31 d2                	xor    edx,edx
c00024f6:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00024fa:	0f 95 c2             	setne  dl
c00024fd:	01 d2                	add    edx,edx
c00024ff:	89 d0                	mov    eax,edx
c0002501:	83 c4 08             	add    esp,0x8
c0002504:	5b                   	pop    ebx
c0002505:	c3                   	ret    

c0002506 <find_volume>:
c0002506:	55                   	push   ebp
c0002507:	57                   	push   edi
c0002508:	56                   	push   esi
c0002509:	89 c6                	mov    esi,eax
c000250b:	53                   	push   ebx
c000250c:	89 d3                	mov    ebx,edx
c000250e:	83 ec 2c             	sub    esp,0x2c
c0002511:	31 d2                	xor    edx,edx
c0002513:	e8 60 ff ff ff       	call   c0002478 <check_fs>
c0002518:	83 f8 02             	cmp    eax,0x2
c000251b:	74 06                	je     c0002523 <find_volume+0x1d>
c000251d:	77 62                	ja     c0002581 <find_volume+0x7b>
c000251f:	85 db                	test   ebx,ebx
c0002521:	74 5e                	je     c0002581 <find_volume+0x7b>
c0002523:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002527:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000252d:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002537:	89 cf                	mov    edi,ecx
c0002539:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000253d:	89 e8                	mov    eax,ebp
c000253f:	83 c5 10             	add    ebp,0x10
c0002542:	e8 95 f9 ff ff       	call   c0001edc <ld_dword>
c0002547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000254b:	89 01                	mov    DWORD PTR [ecx],eax
c000254d:	83 c1 04             	add    ecx,0x4
c0002550:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002554:	75 e3                	jne    c0002539 <find_volume+0x33>
c0002556:	31 ed                	xor    ebp,ebp
c0002558:	85 db                	test   ebx,ebx
c000255a:	74 03                	je     c000255f <find_volume+0x59>
c000255c:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000255f:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002562:	b8 03 00 00 00       	mov    eax,0x3
c0002567:	85 d2                	test   edx,edx
c0002569:	74 0c                	je     c0002577 <find_volume+0x71>
c000256b:	89 f0                	mov    eax,esi
c000256d:	e8 06 ff ff ff       	call   c0002478 <check_fs>
c0002572:	83 f8 01             	cmp    eax,0x1
c0002575:	76 0a                	jbe    c0002581 <find_volume+0x7b>
c0002577:	85 db                	test   ebx,ebx
c0002579:	75 06                	jne    c0002581 <find_volume+0x7b>
c000257b:	45                   	inc    ebp
c000257c:	83 fd 03             	cmp    ebp,0x3
c000257f:	76 de                	jbe    c000255f <find_volume+0x59>
c0002581:	83 c4 2c             	add    esp,0x2c
c0002584:	5b                   	pop    ebx
c0002585:	5e                   	pop    esi
c0002586:	5f                   	pop    edi
c0002587:	5d                   	pop    ebp
c0002588:	c3                   	ret    

c0002589 <mount_volume>:
c0002589:	55                   	push   ebp
c000258a:	89 d5                	mov    ebp,edx
c000258c:	57                   	push   edi
c000258d:	89 cf                	mov    edi,ecx
c000258f:	56                   	push   esi
c0002590:	53                   	push   ebx
c0002591:	bb 0b 00 00 00       	mov    ebx,0xb
c0002596:	83 ec 1c             	sub    esp,0x1c
c0002599:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000259f:	e8 9c fd ff ff       	call   c0002340 <get_ldnumber>
c00025a4:	85 c0                	test   eax,eax
c00025a6:	0f 88 c4 02 00 00    	js     c0002870 <mount_volume+0x2e7>
c00025ac:	8b 34 85 80 6c 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9380]
c00025b3:	89 c2                	mov    edx,eax
c00025b5:	bb 0c 00 00 00       	mov    ebx,0xc
c00025ba:	85 f6                	test   esi,esi
c00025bc:	0f 84 ae 02 00 00    	je     c0002870 <mount_volume+0x2e7>
c00025c2:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00025c5:	83 e7 fe             	and    edi,0xfffffffe
c00025c8:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00025cb:	74 3a                	je     c0002607 <mount_volume+0x7e>
c00025cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00025d0:	83 ec 0c             	sub    esp,0xc
c00025d3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00025d7:	50                   	push   eax
c00025d8:	e8 a1 f8 ff ff       	call   c0001e7e <disk_status>
c00025dd:	83 c4 10             	add    esp,0x10
c00025e0:	a8 01                	test   al,0x1
c00025e2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00025e5:	75 20                	jne    c0002607 <mount_volume+0x7e>
c00025e7:	31 db                	xor    ebx,ebx
c00025e9:	81 e7 fe 00 00 00    	and    edi,0xfe
c00025ef:	0f 84 7b 02 00 00    	je     c0002870 <mount_volume+0x2e7>
c00025f5:	a8 04                	test   al,0x4
c00025f7:	0f 84 73 02 00 00    	je     c0002870 <mount_volume+0x2e7>
c00025fd:	bb 0a 00 00 00       	mov    ebx,0xa
c0002602:	e9 69 02 00 00       	jmp    c0002870 <mount_volume+0x2e7>
c0002607:	83 ec 0c             	sub    esp,0xc
c000260a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000260d:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002610:	0f b6 c2             	movzx  eax,dl
c0002613:	bb 03 00 00 00       	mov    ebx,0x3
c0002618:	50                   	push   eax
c0002619:	e8 63 f8 ff ff       	call   c0001e81 <disk_initialize>
c000261e:	83 c4 10             	add    esp,0x10
c0002621:	a8 01                	test   al,0x1
c0002623:	0f 85 47 02 00 00    	jne    c0002870 <mount_volume+0x2e7>
c0002629:	81 e7 fe 00 00 00    	and    edi,0xfe
c000262f:	74 04                	je     c0002635 <mount_volume+0xac>
c0002631:	a8 04                	test   al,0x4
c0002633:	75 c8                	jne    c00025fd <mount_volume+0x74>
c0002635:	31 d2                	xor    edx,edx
c0002637:	89 f0                	mov    eax,esi
c0002639:	bb 01 00 00 00       	mov    ebx,0x1
c000263e:	e8 c3 fe ff ff       	call   c0002506 <find_volume>
c0002643:	83 f8 04             	cmp    eax,0x4
c0002646:	0f 84 24 02 00 00    	je     c0002870 <mount_volume+0x2e7>
c000264c:	83 f8 01             	cmp    eax,0x1
c000264f:	76 0a                	jbe    c000265b <mount_volume+0xd2>
c0002651:	bb 0d 00 00 00       	mov    ebx,0xd
c0002656:	e9 15 02 00 00       	jmp    c0002870 <mount_volume+0x2e7>
c000265b:	8d 46 3f             	lea    eax,[esi+0x3f]
c000265e:	e8 6c f8 ff ff       	call   c0001ecf <ld_word>
c0002663:	66 3d 00 02          	cmp    ax,0x200
c0002667:	75 e8                	jne    c0002651 <mount_volume+0xc8>
c0002669:	8d 46 4a             	lea    eax,[esi+0x4a]
c000266c:	e8 5e f8 ff ff       	call   c0001ecf <ld_word>
c0002671:	0f b7 c0             	movzx  eax,ax
c0002674:	89 04 24             	mov    DWORD PTR [esp],eax
c0002677:	85 c0                	test   eax,eax
c0002679:	75 0b                	jne    c0002686 <mount_volume+0xfd>
c000267b:	8d 46 58             	lea    eax,[esi+0x58]
c000267e:	e8 59 f8 ff ff       	call   c0001edc <ld_dword>
c0002683:	89 04 24             	mov    DWORD PTR [esp],eax
c0002686:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002689:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000268d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002690:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002693:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002696:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000269a:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000269d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026a1:	48                   	dec    eax
c00026a2:	3c 01                	cmp    al,0x1
c00026a4:	77 ab                	ja     c0002651 <mount_volume+0xc8>
c00026a6:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00026aa:	89 c3                	mov    ebx,eax
c00026ac:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00026b0:	66 85 c0             	test   ax,ax
c00026b3:	74 9c                	je     c0002651 <mount_volume+0xc8>
c00026b5:	8d 40 ff             	lea    eax,[eax-0x1]
c00026b8:	85 d8                	test   eax,ebx
c00026ba:	75 95                	jne    c0002651 <mount_volume+0xc8>
c00026bc:	8d 46 45             	lea    eax,[esi+0x45]
c00026bf:	e8 0b f8 ff ff       	call   c0001ecf <ld_word>
c00026c4:	89 c7                	mov    edi,eax
c00026c6:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00026ca:	a8 0f                	test   al,0xf
c00026cc:	75 83                	jne    c0002651 <mount_volume+0xc8>
c00026ce:	8d 46 47             	lea    eax,[esi+0x47]
c00026d1:	e8 f9 f7 ff ff       	call   c0001ecf <ld_word>
c00026d6:	0f b7 e8             	movzx  ebp,ax
c00026d9:	85 ed                	test   ebp,ebp
c00026db:	75 0a                	jne    c00026e7 <mount_volume+0x15e>
c00026dd:	8d 46 54             	lea    eax,[esi+0x54]
c00026e0:	e8 f7 f7 ff ff       	call   c0001edc <ld_dword>
c00026e5:	89 c5                	mov    ebp,eax
c00026e7:	8d 46 42             	lea    eax,[esi+0x42]
c00026ea:	e8 e0 f7 ff ff       	call   c0001ecf <ld_word>
c00026ef:	0f b7 c8             	movzx  ecx,ax
c00026f2:	85 c9                	test   ecx,ecx
c00026f4:	0f 84 57 ff ff ff    	je     c0002651 <mount_volume+0xc8>
c00026fa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00026ff:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c0002703:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002707:	0f b7 c7             	movzx  eax,di
c000270a:	c1 e8 04             	shr    eax,0x4
c000270d:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002711:	01 c8                	add    eax,ecx
c0002713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002717:	39 c5                	cmp    ebp,eax
c0002719:	0f 82 32 ff ff ff    	jb     c0002651 <mount_volume+0xc8>
c000271f:	29 c5                	sub    ebp,eax
c0002721:	31 d2                	xor    edx,edx
c0002723:	89 e8                	mov    eax,ebp
c0002725:	f7 f3                	div    ebx
c0002727:	39 dd                	cmp    ebp,ebx
c0002729:	0f 82 22 ff ff ff    	jb     c0002651 <mount_volume+0xc8>
c000272f:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002734:	0f 87 17 ff ff ff    	ja     c0002651 <mount_volume+0xc8>
c000273a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000273f:	0f 86 1c 01 00 00    	jbe    c0002861 <mount_volume+0x2d8>
c0002745:	bb 03 00 00 00       	mov    ebx,0x3
c000274a:	8d 68 02             	lea    ebp,[eax+0x2]
c000274d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002751:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002755:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002759:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000275c:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000275f:	01 c8                	add    eax,ecx
c0002761:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002764:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002767:	83 fb 03             	cmp    ebx,0x3
c000276a:	75 23                	jne    c000278f <mount_volume+0x206>
c000276c:	8d 46 5e             	lea    eax,[esi+0x5e]
c000276f:	e8 5b f7 ff ff       	call   c0001ecf <ld_word>
c0002774:	09 c7                	or     edi,eax
c0002776:	66 85 ff             	test   di,di
c0002779:	0f 85 d2 fe ff ff    	jne    c0002651 <mount_volume+0xc8>
c000277f:	8d 46 60             	lea    eax,[esi+0x60]
c0002782:	c1 e5 02             	shl    ebp,0x2
c0002785:	e8 52 f7 ff ff       	call   c0001edc <ld_dword>
c000278a:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000278d:	eb 24                	jmp    c00027b3 <mount_volume+0x22a>
c000278f:	66 85 ff             	test   di,di
c0002792:	0f 84 b9 fe ff ff    	je     c0002651 <mount_volume+0xc8>
c0002798:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000279c:	83 fb 02             	cmp    ebx,0x2
c000279f:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00027a2:	75 04                	jne    c00027a8 <mount_volume+0x21f>
c00027a4:	01 ed                	add    ebp,ebp
c00027a6:	eb 0b                	jmp    c00027b3 <mount_volume+0x22a>
c00027a8:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00027ac:	83 e5 01             	and    ebp,0x1
c00027af:	d1 e8                	shr    eax,1
c00027b1:	01 c5                	add    ebp,eax
c00027b3:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00027b9:	c1 ed 09             	shr    ebp,0x9
c00027bc:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00027bf:	0f 87 8c fe ff ff    	ja     c0002651 <mount_volume+0xc8>
c00027c5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00027cc:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00027d3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00027d7:	83 fb 03             	cmp    ebx,0x3
c00027da:	75 6e                	jne    c000284a <mount_volume+0x2c1>
c00027dc:	8d 46 64             	lea    eax,[esi+0x64]
c00027df:	e8 eb f6 ff ff       	call   c0001ecf <ld_word>
c00027e4:	66 48                	dec    ax
c00027e6:	75 62                	jne    c000284a <mount_volume+0x2c1>
c00027e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00027ec:	89 f0                	mov    eax,esi
c00027ee:	42                   	inc    edx
c00027ef:	e8 42 fc ff ff       	call   c0002436 <move_window>
c00027f4:	85 c0                	test   eax,eax
c00027f6:	75 52                	jne    c000284a <mount_volume+0x2c1>
c00027f8:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00027fc:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002802:	e8 c8 f6 ff ff       	call   c0001ecf <ld_word>
c0002807:	66 3d 55 aa          	cmp    ax,0xaa55
c000280b:	75 3d                	jne    c000284a <mount_volume+0x2c1>
c000280d:	8d 46 34             	lea    eax,[esi+0x34]
c0002810:	e8 c7 f6 ff ff       	call   c0001edc <ld_dword>
c0002815:	3d 52 52 61 41       	cmp    eax,0x41615252
c000281a:	75 2e                	jne    c000284a <mount_volume+0x2c1>
c000281c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002822:	e8 b5 f6 ff ff       	call   c0001edc <ld_dword>
c0002827:	3d 72 72 41 61       	cmp    eax,0x61417272
c000282c:	75 1c                	jne    c000284a <mount_volume+0x2c1>
c000282e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002834:	e8 a3 f6 ff ff       	call   c0001edc <ld_dword>
c0002839:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000283c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002842:	e8 95 f6 ff ff       	call   c0001edc <ld_dword>
c0002847:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000284a:	66 a1 60 6c 03 c0    	mov    ax,ds:0xc0036c60
c0002850:	88 1e                	mov    BYTE PTR [esi],bl
c0002852:	40                   	inc    eax
c0002853:	31 db                	xor    ebx,ebx
c0002855:	66 a3 60 6c 03 c0    	mov    ds:0xc0036c60,ax
c000285b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000285f:	eb 0f                	jmp    c0002870 <mount_volume+0x2e7>
c0002861:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002866:	19 db                	sbb    ebx,ebx
c0002868:	83 c3 02             	add    ebx,0x2
c000286b:	e9 da fe ff ff       	jmp    c000274a <mount_volume+0x1c1>
c0002870:	83 c4 1c             	add    esp,0x1c
c0002873:	89 d8                	mov    eax,ebx
c0002875:	5b                   	pop    ebx
c0002876:	5e                   	pop    esi
c0002877:	5f                   	pop    edi
c0002878:	5d                   	pop    ebp
c0002879:	c3                   	ret    

c000287a <put_fat>:
c000287a:	55                   	push   ebp
c000287b:	bd 02 00 00 00       	mov    ebp,0x2
c0002880:	57                   	push   edi
c0002881:	56                   	push   esi
c0002882:	53                   	push   ebx
c0002883:	83 ec 1c             	sub    esp,0x1c
c0002886:	83 fa 01             	cmp    edx,0x1
c0002889:	0f 86 38 01 00 00    	jbe    c00029c7 <put_fat+0x14d>
c000288f:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002892:	0f 86 2f 01 00 00    	jbe    c00029c7 <put_fat+0x14d>
c0002898:	89 c6                	mov    esi,eax
c000289a:	89 cf                	mov    edi,ecx
c000289c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000289f:	89 d3                	mov    ebx,edx
c00028a1:	83 f8 02             	cmp    eax,0x2
c00028a4:	0f 84 b1 00 00 00    	je     c000295b <put_fat+0xe1>
c00028aa:	83 f8 03             	cmp    eax,0x3
c00028ad:	0f 84 d5 00 00 00    	je     c0002988 <put_fat+0x10e>
c00028b3:	48                   	dec    eax
c00028b4:	0f 85 0d 01 00 00    	jne    c00029c7 <put_fat+0x14d>
c00028ba:	89 d1                	mov    ecx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	d1 e9                	shr    ecx,1
c00028c0:	01 d1                	add    ecx,edx
c00028c2:	89 ca                	mov    edx,ecx
c00028c4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00028c8:	c1 ea 09             	shr    edx,0x9
c00028cb:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00028ce:	e8 63 fb ff ff       	call   c0002436 <move_window>
c00028d3:	89 c5                	mov    ebp,eax
c00028d5:	85 c0                	test   eax,eax
c00028d7:	0f 85 ea 00 00 00    	jne    c00029c7 <put_fat+0x14d>
c00028dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028e1:	8d 46 34             	lea    eax,[esi+0x34]
c00028e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00028e8:	8d 41 01             	lea    eax,[ecx+0x1]
c00028eb:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00028f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00028f5:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028f9:	89 f8                	mov    eax,edi
c00028fb:	83 e3 01             	and    ebx,0x1
c00028fe:	74 11                	je     c0002911 <put_fat+0x97>
c0002900:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002902:	89 f8                	mov    eax,edi
c0002904:	83 e2 0f             	and    edx,0xf
c0002907:	c1 e0 04             	shl    eax,0x4
c000290a:	25 f0 0f 00 00       	and    eax,0xff0
c000290f:	09 d0                	or     eax,edx
c0002911:	88 01                	mov    BYTE PTR [ecx],al
c0002913:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002917:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000291b:	c1 ea 09             	shr    edx,0x9
c000291e:	89 f0                	mov    eax,esi
c0002920:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002923:	e8 0e fb ff ff       	call   c0002436 <move_window>
c0002928:	89 c5                	mov    ebp,eax
c000292a:	85 c0                	test   eax,eax
c000292c:	0f 85 95 00 00 00    	jne    c00029c7 <put_fat+0x14d>
c0002932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002936:	25 ff 01 00 00       	and    eax,0x1ff
c000293b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000293f:	85 db                	test   ebx,ebx
c0002941:	74 07                	je     c000294a <put_fat+0xd0>
c0002943:	c1 ef 04             	shr    edi,0x4
c0002946:	89 f9                	mov    ecx,edi
c0002948:	eb 0d                	jmp    c0002957 <put_fat+0xdd>
c000294a:	8a 08                	mov    cl,BYTE PTR [eax]
c000294c:	c1 ef 08             	shr    edi,0x8
c000294f:	83 e1 f0             	and    ecx,0xfffffff0
c0002952:	83 e7 0f             	and    edi,0xf
c0002955:	09 f9                	or     ecx,edi
c0002957:	88 08                	mov    BYTE PTR [eax],cl
c0002959:	eb 27                	jmp    c0002982 <put_fat+0x108>
c000295b:	c1 ea 08             	shr    edx,0x8
c000295e:	89 f0                	mov    eax,esi
c0002960:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002963:	e8 ce fa ff ff       	call   c0002436 <move_window>
c0002968:	89 c5                	mov    ebp,eax
c000296a:	85 c0                	test   eax,eax
c000296c:	75 59                	jne    c00029c7 <put_fat+0x14d>
c000296e:	01 db                	add    ebx,ebx
c0002970:	0f b7 d7             	movzx  edx,di
c0002973:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002979:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c000297d:	e8 72 f5 ff ff       	call   c0001ef4 <st_word>
c0002982:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002986:	eb 3f                	jmp    c00029c7 <put_fat+0x14d>
c0002988:	c1 ea 07             	shr    edx,0x7
c000298b:	89 f0                	mov    eax,esi
c000298d:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002990:	e8 a1 fa ff ff       	call   c0002436 <move_window>
c0002995:	89 c5                	mov    ebp,eax
c0002997:	85 c0                	test   eax,eax
c0002999:	75 2c                	jne    c00029c7 <put_fat+0x14d>
c000299b:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00029a1:	c1 e3 02             	shl    ebx,0x2
c00029a4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00029aa:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00029ae:	89 d8                	mov    eax,ebx
c00029b0:	e8 27 f5 ff ff       	call   c0001edc <ld_dword>
c00029b5:	25 00 00 00 f0       	and    eax,0xf0000000
c00029ba:	09 f8                	or     eax,edi
c00029bc:	89 c2                	mov    edx,eax
c00029be:	89 d8                	mov    eax,ebx
c00029c0:	e8 33 f5 ff ff       	call   c0001ef8 <st_dword>
c00029c5:	eb bb                	jmp    c0002982 <put_fat+0x108>
c00029c7:	83 c4 1c             	add    esp,0x1c
c00029ca:	89 e8                	mov    eax,ebp
c00029cc:	5b                   	pop    ebx
c00029cd:	5e                   	pop    esi
c00029ce:	5f                   	pop    edi
c00029cf:	5d                   	pop    ebp
c00029d0:	c3                   	ret    

c00029d1 <dir_clear>:
c00029d1:	55                   	push   ebp
c00029d2:	57                   	push   edi
c00029d3:	56                   	push   esi
c00029d4:	89 c6                	mov    esi,eax
c00029d6:	53                   	push   ebx
c00029d7:	83 ec 1c             	sub    esp,0x1c
c00029da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00029de:	e8 f0 f9 ff ff       	call   c00023d3 <sync_window>
c00029e3:	85 c0                	test   eax,eax
c00029e5:	0f 85 c0 00 00 00    	jne    c0002aab <dir_clear+0xda>
c00029eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029ef:	89 f0                	mov    eax,esi
c00029f1:	e8 30 f7 ff ff       	call   c0002126 <clst2sect>
c00029f6:	31 d2                	xor    edx,edx
c00029f8:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c00029fb:	89 c5                	mov    ebp,eax
c00029fd:	b9 00 02 00 00       	mov    ecx,0x200
c0002a02:	8d 46 34             	lea    eax,[esi+0x34]
c0002a05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002a09:	e8 02 f5 ff ff       	call   c0001f10 <mem_set>
c0002a0e:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002a12:	c1 e3 09             	shl    ebx,0x9
c0002a15:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002a1b:	76 1b                	jbe    c0002a38 <dir_clear+0x67>
c0002a1d:	bb 00 80 00 00       	mov    ebx,0x8000
c0002a22:	eb 14                	jmp    c0002a38 <dir_clear+0x67>
c0002a24:	83 ec 0c             	sub    esp,0xc
c0002a27:	53                   	push   ebx
c0002a28:	e8 eb 32 00 00       	call   c0005d18 <ff_memalloc>
c0002a2d:	83 c4 10             	add    esp,0x10
c0002a30:	89 c7                	mov    edi,eax
c0002a32:	85 c0                	test   eax,eax
c0002a34:	75 7c                	jne    c0002ab2 <dir_clear+0xe1>
c0002a36:	d1 eb                	shr    ebx,1
c0002a38:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002a3e:	77 e4                	ja     c0002a24 <dir_clear+0x53>
c0002a40:	31 db                	xor    ebx,ebx
c0002a42:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a46:	39 d8                	cmp    eax,ebx
c0002a48:	76 53                	jbe    c0002a9d <dir_clear+0xcc>
c0002a4a:	6a 01                	push   0x1
c0002a4c:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a4f:	50                   	push   eax
c0002a50:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002a58:	50                   	push   eax
c0002a59:	e8 3c f4 ff ff       	call   c0001e9a <disk_write>
c0002a5e:	83 c4 10             	add    esp,0x10
c0002a61:	85 c0                	test   eax,eax
c0002a63:	75 38                	jne    c0002a9d <dir_clear+0xcc>
c0002a65:	43                   	inc    ebx
c0002a66:	eb da                	jmp    c0002a42 <dir_clear+0x71>
c0002a68:	52                   	push   edx
c0002a69:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002a6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002a70:	50                   	push   eax
c0002a71:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002a75:	57                   	push   edi
c0002a76:	50                   	push   eax
c0002a77:	e8 1e f4 ff ff       	call   c0001e9a <disk_write>
c0002a7c:	83 c4 10             	add    esp,0x10
c0002a7f:	85 c0                	test   eax,eax
c0002a81:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a85:	75 0a                	jne    c0002a91 <dir_clear+0xc0>
c0002a87:	01 d3                	add    ebx,edx
c0002a89:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002a8d:	39 d8                	cmp    eax,ebx
c0002a8f:	77 d7                	ja     c0002a68 <dir_clear+0x97>
c0002a91:	83 ec 0c             	sub    esp,0xc
c0002a94:	57                   	push   edi
c0002a95:	e8 96 32 00 00       	call   c0005d30 <ff_memfree>
c0002a9a:	83 c4 10             	add    esp,0x10
c0002a9d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002aa1:	39 d8                	cmp    eax,ebx
c0002aa3:	0f 95 c0             	setne  al
c0002aa6:	0f b6 c0             	movzx  eax,al
c0002aa9:	eb 19                	jmp    c0002ac4 <dir_clear+0xf3>
c0002aab:	b8 01 00 00 00       	mov    eax,0x1
c0002ab0:	eb 12                	jmp    c0002ac4 <dir_clear+0xf3>
c0002ab2:	89 d9                	mov    ecx,ebx
c0002ab4:	31 d2                	xor    edx,edx
c0002ab6:	e8 55 f4 ff ff       	call   c0001f10 <mem_set>
c0002abb:	89 da                	mov    edx,ebx
c0002abd:	31 db                	xor    ebx,ebx
c0002abf:	c1 ea 09             	shr    edx,0x9
c0002ac2:	eb c5                	jmp    c0002a89 <dir_clear+0xb8>
c0002ac4:	83 c4 1c             	add    esp,0x1c
c0002ac7:	5b                   	pop    ebx
c0002ac8:	5e                   	pop    esi
c0002ac9:	5f                   	pop    edi
c0002aca:	5d                   	pop    ebp
c0002acb:	c3                   	ret    

c0002acc <create_name>:
c0002acc:	55                   	push   ebp
c0002acd:	57                   	push   edi
c0002ace:	89 d7                	mov    edi,edx
c0002ad0:	56                   	push   esi
c0002ad1:	31 f6                	xor    esi,esi
c0002ad3:	53                   	push   ebx
c0002ad4:	83 ec 3c             	sub    esp,0x3c
c0002ad7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002adb:	8b 02                	mov    eax,DWORD PTR [edx]
c0002add:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002ae1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae5:	8b 00                	mov    eax,DWORD PTR [eax]
c0002ae7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002aea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002aee:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002af2:	e8 5e f4 ff ff       	call   c0001f55 <tchar2uni>
c0002af7:	89 c3                	mov    ebx,eax
c0002af9:	83 f8 ff             	cmp    eax,0xffffffff
c0002afc:	75 0a                	jne    c0002b08 <create_name+0x3c>
c0002afe:	b8 06 00 00 00       	mov    eax,0x6
c0002b03:	e9 93 02 00 00       	jmp    c0002d9b <create_name+0x2cf>
c0002b08:	3d ff ff 00 00       	cmp    eax,0xffff
c0002b0d:	76 0c                	jbe    c0002b1b <create_name+0x4f>
c0002b0f:	c1 e8 10             	shr    eax,0x10
c0002b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b16:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002b1a:	46                   	inc    esi
c0002b1b:	0f b7 d3             	movzx  edx,bx
c0002b1e:	83 fa 1f             	cmp    edx,0x1f
c0002b21:	76 4a                	jbe    c0002b6d <create_name+0xa1>
c0002b23:	83 fa 5c             	cmp    edx,0x5c
c0002b26:	74 30                	je     c0002b58 <create_name+0x8c>
c0002b28:	83 fa 2f             	cmp    edx,0x2f
c0002b2b:	74 2b                	je     c0002b58 <create_name+0x8c>
c0002b2d:	83 fa 7f             	cmp    edx,0x7f
c0002b30:	77 0e                	ja     c0002b40 <create_name+0x74>
c0002b32:	b8 82 f3 02 c0       	mov    eax,0xc002f382
c0002b37:	e8 02 f4 ff ff       	call   c0001f3e <chk_chr>
c0002b3c:	85 c0                	test   eax,eax
c0002b3e:	75 be                	jne    c0002afe <create_name+0x32>
c0002b40:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002b46:	77 b6                	ja     c0002afe <create_name+0x32>
c0002b48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b4c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002b50:	46                   	inc    esi
c0002b51:	eb 9b                	jmp    c0002aee <create_name+0x22>
c0002b53:	40                   	inc    eax
c0002b54:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002b58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b5c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002b5f:	83 fa 2f             	cmp    edx,0x2f
c0002b62:	74 ef                	je     c0002b53 <create_name+0x87>
c0002b64:	83 fa 5c             	cmp    edx,0x5c
c0002b67:	74 ea                	je     c0002b53 <create_name+0x87>
c0002b69:	31 db                	xor    ebx,ebx
c0002b6b:	eb 02                	jmp    c0002b6f <create_name+0xa3>
c0002b6d:	b3 04                	mov    bl,0x4
c0002b6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002b73:	89 07                	mov    DWORD PTR [edi],eax
c0002b75:	85 f6                	test   esi,esi
c0002b77:	74 16                	je     c0002b8f <create_name+0xc3>
c0002b79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b7d:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002b82:	83 f8 20             	cmp    eax,0x20
c0002b85:	74 05                	je     c0002b8c <create_name+0xc0>
c0002b87:	83 f8 2e             	cmp    eax,0x2e
c0002b8a:	75 03                	jne    c0002b8f <create_name+0xc3>
c0002b8c:	4e                   	dec    esi
c0002b8d:	eb e6                	jmp    c0002b75 <create_name+0xa9>
c0002b8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b93:	31 ff                	xor    edi,edi
c0002b95:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002b9b:	85 f6                	test   esi,esi
c0002b9d:	0f 84 5b ff ff ff    	je     c0002afe <create_name+0x32>
c0002ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ba7:	8d 57 01             	lea    edx,[edi+0x1]
c0002baa:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002bae:	83 f8 20             	cmp    eax,0x20
c0002bb1:	75 04                	jne    c0002bb7 <create_name+0xeb>
c0002bb3:	89 d7                	mov    edi,edx
c0002bb5:	eb ec                	jmp    c0002ba3 <create_name+0xd7>
c0002bb7:	85 ff                	test   edi,edi
c0002bb9:	75 05                	jne    c0002bc0 <create_name+0xf4>
c0002bbb:	83 f8 2e             	cmp    eax,0x2e
c0002bbe:	75 08                	jne    c0002bc8 <create_name+0xfc>
c0002bc0:	83 cb 03             	or     ebx,0x3
c0002bc3:	eb 03                	jmp    c0002bc8 <create_name+0xfc>
c0002bc5:	4e                   	dec    esi
c0002bc6:	74 0c                	je     c0002bd4 <create_name+0x108>
c0002bc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002bcc:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002bd2:	75 f1                	jne    c0002bc5 <create_name+0xf9>
c0002bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd8:	b9 0b 00 00 00       	mov    ecx,0xb
c0002bdd:	83 c0 20             	add    eax,0x20
c0002be0:	ba 20 00 00 00       	mov    edx,0x20
c0002be5:	31 ed                	xor    ebp,ebp
c0002be7:	e8 24 f3 ff ff       	call   c0001f10 <mem_set>
c0002bec:	b9 08 00 00 00       	mov    ecx,0x8
c0002bf1:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002bf6:	8d 47 01             	lea    eax,[edi+0x1]
c0002bf9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002bfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c01:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c05:	89 c7                	mov    edi,eax
c0002c07:	85 c0                	test   eax,eax
c0002c09:	0f 84 25 01 00 00    	je     c0002d34 <create_name+0x268>
c0002c0f:	83 f8 20             	cmp    eax,0x20
c0002c12:	74 0f                	je     c0002c23 <create_name+0x157>
c0002c14:	83 f8 2e             	cmp    eax,0x2e
c0002c17:	75 13                	jne    c0002c2c <create_name+0x160>
c0002c19:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002c1d:	0f 84 6a 01 00 00    	je     c0002d8d <create_name+0x2c1>
c0002c23:	83 cb 03             	or     ebx,0x3
c0002c26:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002c2a:	eb ca                	jmp    c0002bf6 <create_name+0x12a>
c0002c2c:	39 cd                	cmp    ebp,ecx
c0002c2e:	73 0b                	jae    c0002c3b <create_name+0x16f>
c0002c30:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002c34:	75 3f                	jne    c0002c75 <create_name+0x1a9>
c0002c36:	e9 52 01 00 00       	jmp    c0002d8d <create_name+0x2c1>
c0002c3b:	83 f9 0b             	cmp    ecx,0xb
c0002c3e:	75 0d                	jne    c0002c4d <create_name+0x181>
c0002c40:	83 cb 03             	or     ebx,0x3
c0002c43:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c48:	e9 e7 00 00 00       	jmp    c0002d34 <create_name+0x268>
c0002c4d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002c51:	74 0d                	je     c0002c60 <create_name+0x194>
c0002c53:	83 cb 03             	or     ebx,0x3
c0002c56:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002c5a:	0f 87 d4 00 00 00    	ja     c0002d34 <create_name+0x268>
c0002c60:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c65:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002c69:	b9 0b 00 00 00       	mov    ecx,0xb
c0002c6e:	bd 08 00 00 00       	mov    ebp,0x8
c0002c73:	eb b1                	jmp    c0002c26 <create_name+0x15a>
c0002c75:	83 f8 7f             	cmp    eax,0x7f
c0002c78:	76 66                	jbe    c0002ce0 <create_name+0x214>
c0002c7a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002c7e:	89 d9                	mov    ecx,ebx
c0002c80:	83 c9 02             	or     ecx,0x2
c0002c83:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002c87:	52                   	push   edx
c0002c88:	52                   	push   edx
c0002c89:	68 b5 01 00 00       	push   0x1b5
c0002c8e:	50                   	push   eax
c0002c8f:	e8 b4 30 00 00       	call   c0005d48 <ff_uni2oem>
c0002c94:	83 c4 10             	add    esp,0x10
c0002c97:	89 c7                	mov    edi,eax
c0002c99:	a8 80                	test   al,0x80
c0002c9b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002c9f:	74 0c                	je     c0002cad <create_name+0x1e1>
c0002ca1:	83 e7 7f             	and    edi,0x7f
c0002ca4:	0f b6 bf 40 f4 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffd0bc0]
c0002cab:	eb 2a                	jmp    c0002cd7 <create_name+0x20b>
c0002cad:	0f b7 c0             	movzx  eax,ax
c0002cb0:	3d ff 00 00 00       	cmp    eax,0xff
c0002cb5:	76 20                	jbe    c0002cd7 <create_name+0x20b>
c0002cb7:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002cba:	39 ea                	cmp    edx,ebp
c0002cbc:	77 0a                	ja     c0002cc8 <create_name+0x1fc>
c0002cbe:	83 cb 03             	or     ebx,0x3
c0002cc1:	89 cd                	mov    ebp,ecx
c0002cc3:	e9 5e ff ff ff       	jmp    c0002c26 <create_name+0x15a>
c0002cc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002ccc:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002cd0:	45                   	inc    ebp
c0002cd1:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002cd5:	eb 4d                	jmp    c0002d24 <create_name+0x258>
c0002cd7:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002cdb:	66 85 ff             	test   di,di
c0002cde:	74 19                	je     c0002cf9 <create_name+0x22d>
c0002ce0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002ce4:	0f b7 d7             	movzx  edx,di
c0002ce7:	b8 8b f3 02 c0       	mov    eax,0xc002f38b
c0002cec:	e8 4d f2 ff ff       	call   c0001f3e <chk_chr>
c0002cf1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002cf5:	85 c0                	test   eax,eax
c0002cf7:	74 0a                	je     c0002d03 <create_name+0x237>
c0002cf9:	83 cb 03             	or     ebx,0x3
c0002cfc:	bf 5f 00 00 00       	mov    edi,0x5f
c0002d01:	eb 21                	jmp    c0002d24 <create_name+0x258>
c0002d03:	8d 47 bf             	lea    eax,[edi-0x41]
c0002d06:	66 83 f8 19          	cmp    ax,0x19
c0002d0a:	77 07                	ja     c0002d13 <create_name+0x247>
c0002d0c:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002d11:	eb 11                	jmp    c0002d24 <create_name+0x258>
c0002d13:	8d 47 9f             	lea    eax,[edi-0x61]
c0002d16:	66 83 f8 19          	cmp    ax,0x19
c0002d1a:	77 08                	ja     c0002d24 <create_name+0x258>
c0002d1c:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002d21:	83 ef 20             	sub    edi,0x20
c0002d24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002d28:	89 f8                	mov    eax,edi
c0002d2a:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002d2e:	45                   	inc    ebp
c0002d2f:	e9 f2 fe ff ff       	jmp    c0002c26 <create_name+0x15a>
c0002d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002d38:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002d3c:	75 04                	jne    c0002d42 <create_name+0x276>
c0002d3e:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002d42:	83 f9 08             	cmp    ecx,0x8
c0002d45:	75 05                	jne    c0002d4c <create_name+0x280>
c0002d47:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d50:	83 e0 0c             	and    eax,0xc
c0002d53:	83 f8 0c             	cmp    eax,0xc
c0002d56:	74 0c                	je     c0002d64 <create_name+0x298>
c0002d58:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5c:	83 e0 03             	and    eax,0x3
c0002d5f:	83 f8 03             	cmp    eax,0x3
c0002d62:	75 05                	jne    c0002d69 <create_name+0x29d>
c0002d64:	83 cb 02             	or     ebx,0x2
c0002d67:	eb 19                	jmp    c0002d82 <create_name+0x2b6>
c0002d69:	f6 c3 02             	test   bl,0x2
c0002d6c:	75 14                	jne    c0002d82 <create_name+0x2b6>
c0002d6e:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002d73:	74 03                	je     c0002d78 <create_name+0x2ac>
c0002d75:	83 cb 10             	or     ebx,0x10
c0002d78:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002d7d:	74 03                	je     c0002d82 <create_name+0x2b6>
c0002d7f:	83 cb 08             	or     ebx,0x8
c0002d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002d86:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002d89:	31 c0                	xor    eax,eax
c0002d8b:	eb 0e                	jmp    c0002d9b <create_name+0x2cf>
c0002d8d:	83 f9 0b             	cmp    ecx,0xb
c0002d90:	0f 85 ca fe ff ff    	jne    c0002c60 <create_name+0x194>
c0002d96:	e9 a5 fe ff ff       	jmp    c0002c40 <create_name+0x174>
c0002d9b:	83 c4 3c             	add    esp,0x3c
c0002d9e:	5b                   	pop    ebx
c0002d9f:	5e                   	pop    esi
c0002da0:	5f                   	pop    edi
c0002da1:	5d                   	pop    ebp
c0002da2:	c3                   	ret    

c0002da3 <cmp_lfn>:
c0002da3:	55                   	push   ebp
c0002da4:	57                   	push   edi
c0002da5:	89 d7                	mov    edi,edx
c0002da7:	56                   	push   esi
c0002da8:	53                   	push   ebx
c0002da9:	83 ec 1c             	sub    esp,0x1c
c0002dac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002db0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002db3:	e8 17 f1 ff ff       	call   c0001ecf <ld_word>
c0002db8:	66 85 c0             	test   ax,ax
c0002dbb:	74 07                	je     c0002dc4 <cmp_lfn+0x21>
c0002dbd:	31 c0                	xor    eax,eax
c0002dbf:	e9 a1 00 00 00       	jmp    c0002e65 <cmp_lfn+0xc2>
c0002dc4:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002dc6:	bd 01 00 00 00       	mov    ebp,0x1
c0002dcb:	83 e3 3f             	and    ebx,0x3f
c0002dce:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002dd6:	4b                   	dec    ebx
c0002dd7:	6b db 0d             	imul   ebx,ebx,0xd
c0002dda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dde:	0f b6 80 c0 f4 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd0b40]
c0002de5:	01 f8                	add    eax,edi
c0002de7:	e8 e3 f0 ff ff       	call   c0001ecf <ld_word>
c0002dec:	66 85 ed             	test   bp,bp
c0002def:	89 c6                	mov    esi,eax
c0002df1:	74 3c                	je     c0002e2f <cmp_lfn+0x8c>
c0002df3:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002df9:	77 c2                	ja     c0002dbd <cmp_lfn+0x1a>
c0002dfb:	83 ec 0c             	sub    esp,0xc
c0002dfe:	0f b7 c0             	movzx  eax,ax
c0002e01:	50                   	push   eax
c0002e02:	e8 59 30 00 00       	call   c0005e60 <ff_wtoupper>
c0002e07:	89 c5                	mov    ebp,eax
c0002e09:	8d 43 01             	lea    eax,[ebx+0x1]
c0002e0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002e10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002e14:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002e18:	89 04 24             	mov    DWORD PTR [esp],eax
c0002e1b:	e8 40 30 00 00       	call   c0005e60 <ff_wtoupper>
c0002e20:	83 c4 10             	add    esp,0x10
c0002e23:	39 c5                	cmp    ebp,eax
c0002e25:	75 96                	jne    c0002dbd <cmp_lfn+0x1a>
c0002e27:	89 f5                	mov    ebp,esi
c0002e29:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002e2d:	eb 0b                	jmp    c0002e3a <cmp_lfn+0x97>
c0002e2f:	0f b7 c8             	movzx  ecx,ax
c0002e32:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002e38:	75 83                	jne    c0002dbd <cmp_lfn+0x1a>
c0002e3a:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002e3e:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002e43:	75 95                	jne    c0002dda <cmp_lfn+0x37>
c0002e45:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002e48:	74 16                	je     c0002e60 <cmp_lfn+0xbd>
c0002e4a:	66 85 ed             	test   bp,bp
c0002e4d:	74 11                	je     c0002e60 <cmp_lfn+0xbd>
c0002e4f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e53:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002e58:	0f 94 c0             	sete   al
c0002e5b:	0f b6 c0             	movzx  eax,al
c0002e5e:	eb 05                	jmp    c0002e65 <cmp_lfn+0xc2>
c0002e60:	b8 01 00 00 00       	mov    eax,0x1
c0002e65:	83 c4 1c             	add    esp,0x1c
c0002e68:	5b                   	pop    ebx
c0002e69:	5e                   	pop    esi
c0002e6a:	5f                   	pop    edi
c0002e6b:	5d                   	pop    ebp
c0002e6c:	c3                   	ret    

c0002e6d <sync_fs>:
c0002e6d:	56                   	push   esi
c0002e6e:	53                   	push   ebx
c0002e6f:	53                   	push   ebx
c0002e70:	89 c3                	mov    ebx,eax
c0002e72:	e8 5c f5 ff ff       	call   c00023d3 <sync_window>
c0002e77:	85 c0                	test   eax,eax
c0002e79:	0f 85 9a 00 00 00    	jne    c0002f19 <sync_fs+0xac>
c0002e7f:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002e82:	75 7b                	jne    c0002eff <sync_fs+0x92>
c0002e84:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002e88:	75 75                	jne    c0002eff <sync_fs+0x92>
c0002e8a:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8f:	8d 73 34             	lea    esi,[ebx+0x34]
c0002e92:	31 d2                	xor    edx,edx
c0002e94:	89 f0                	mov    eax,esi
c0002e96:	e8 75 f0 ff ff       	call   c0001f10 <mem_set>
c0002e9b:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002ea1:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ea6:	e8 49 f0 ff ff       	call   c0001ef4 <st_word>
c0002eab:	ba 52 52 61 41       	mov    edx,0x41615252
c0002eb0:	89 f0                	mov    eax,esi
c0002eb2:	e8 41 f0 ff ff       	call   c0001ef8 <st_dword>
c0002eb7:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002ebd:	ba 72 72 41 61       	mov    edx,0x61417272
c0002ec2:	e8 31 f0 ff ff       	call   c0001ef8 <st_dword>
c0002ec7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002eca:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ed0:	e8 23 f0 ff ff       	call   c0001ef8 <st_dword>
c0002ed5:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ed8:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002ede:	e8 15 f0 ff ff       	call   c0001ef8 <st_dword>
c0002ee3:	6a 01                	push   0x1
c0002ee5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002ee8:	40                   	inc    eax
c0002ee9:	50                   	push   eax
c0002eea:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002eed:	56                   	push   esi
c0002eee:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ef2:	50                   	push   eax
c0002ef3:	e8 a2 ef ff ff       	call   c0001e9a <disk_write>
c0002ef8:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002efc:	83 c4 10             	add    esp,0x10
c0002eff:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002f03:	51                   	push   ecx
c0002f04:	6a 00                	push   0x0
c0002f06:	6a 00                	push   0x0
c0002f08:	50                   	push   eax
c0002f09:	e8 a2 ef ff ff       	call   c0001eb0 <disk_ioctl>
c0002f0e:	83 c4 10             	add    esp,0x10
c0002f11:	85 c0                	test   eax,eax
c0002f13:	0f 95 c0             	setne  al
c0002f16:	0f b6 c0             	movzx  eax,al
c0002f19:	5a                   	pop    edx
c0002f1a:	5b                   	pop    ebx
c0002f1b:	5e                   	pop    esi
c0002f1c:	c3                   	ret    

c0002f1d <create_partition>:
c0002f1d:	55                   	push   ebp
c0002f1e:	0f b6 c0             	movzx  eax,al
c0002f21:	57                   	push   edi
c0002f22:	56                   	push   esi
c0002f23:	53                   	push   ebx
c0002f24:	83 ec 40             	sub    esp,0x40
c0002f27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002f2b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002f2f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002f33:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002f37:	50                   	push   eax
c0002f38:	6a 01                	push   0x1
c0002f3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002f3e:	e8 6d ef ff ff       	call   c0001eb0 <disk_ioctl>
c0002f43:	83 c4 10             	add    esp,0x10
c0002f46:	85 c0                	test   eax,eax
c0002f48:	0f 85 6a 01 00 00    	jne    c00030b8 <create_partition+0x19b>
c0002f4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002f52:	b9 05 00 00 00       	mov    ecx,0x5
c0002f57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002f5b:	be 08 00 00 00       	mov    esi,0x8
c0002f60:	89 f0                	mov    eax,esi
c0002f62:	31 d2                	xor    edx,edx
c0002f64:	0f b6 d8             	movzx  ebx,al
c0002f67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f6b:	f7 f3                	div    ebx
c0002f6d:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002f72:	76 0a                	jbe    c0002f7e <create_partition+0x61>
c0002f74:	d1 e6                	shl    esi,1
c0002f76:	49                   	dec    ecx
c0002f77:	75 e7                	jne    c0002f60 <create_partition+0x43>
c0002f79:	be ff ff ff ff       	mov    esi,0xffffffff
c0002f7e:	b9 00 02 00 00       	mov    ecx,0x200
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002f89:	e8 82 ef ff ff       	call   c0001f10 <mem_set>
c0002f8e:	b9 64 00 00 00       	mov    ecx,0x64
c0002f93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002f97:	31 d2                	xor    edx,edx
c0002f99:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002fa1:	f7 f1                	div    ecx
c0002fa3:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002fa8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002fac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fb0:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002fb6:	89 f0                	mov    eax,esi
c0002fb8:	0f b6 c0             	movzx  eax,al
c0002fbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002fbf:	85 c9                	test   ecx,ecx
c0002fc1:	75 34                	jne    c0002ff7 <create_partition+0xda>
c0002fc3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002fc7:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002fcc:	05 fe 01 00 00       	add    eax,0x1fe
c0002fd1:	e8 1e ef ff ff       	call   c0001ef4 <st_word>
c0002fd6:	6a 01                	push   0x1
c0002fd8:	6a 00                	push   0x0
c0002fda:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002fde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002fe2:	e8 b3 ee ff ff       	call   c0001e9a <disk_write>
c0002fe7:	83 c4 10             	add    esp,0x10
c0002fea:	85 c0                	test   eax,eax
c0002fec:	0f 95 c0             	setne  al
c0002fef:	0f b6 c0             	movzx  eax,al
c0002ff2:	e9 c6 00 00 00       	jmp    c00030bd <create_partition+0x1a0>
c0002ff7:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002ffb:	76 c6                	jbe    c0002fc3 <create_partition+0xa6>
c0002ffd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003001:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0003005:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0003008:	83 fe 64             	cmp    esi,0x64
c000300b:	77 0d                	ja     c000301a <create_partition+0xfd>
c000300d:	74 07                	je     c0003016 <create_partition+0xf9>
c000300f:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003014:	eb 04                	jmp    c000301a <create_partition+0xfd>
c0003016:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000301a:	31 c0                	xor    eax,eax
c000301c:	89 f2                	mov    edx,esi
c000301e:	01 ca                	add    edx,ecx
c0003020:	0f 92 c0             	setb   al
c0003023:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003027:	77 04                	ja     c000302d <create_partition+0x110>
c0003029:	85 c0                	test   eax,eax
c000302b:	74 08                	je     c0003035 <create_partition+0x118>
c000302d:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003031:	29 ce                	sub    esi,ecx
c0003033:	eb 04                	jmp    c0003039 <create_partition+0x11c>
c0003035:	85 f6                	test   esi,esi
c0003037:	74 8a                	je     c0002fc3 <create_partition+0xa6>
c0003039:	89 ca                	mov    edx,ecx
c000303b:	89 d8                	mov    eax,ebx
c000303d:	bf 3f 00 00 00       	mov    edi,0x3f
c0003042:	e8 b1 ee ff ff       	call   c0001ef8 <st_dword>
c0003047:	8d 43 04             	lea    eax,[ebx+0x4]
c000304a:	89 f2                	mov    edx,esi
c000304c:	83 c3 10             	add    ebx,0x10
c000304f:	e8 a4 ee ff ff       	call   c0001ef8 <st_dword>
c0003054:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003058:	31 d2                	xor    edx,edx
c000305a:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000305d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003061:	89 c8                	mov    eax,ecx
c0003063:	01 f1                	add    ecx,esi
c0003065:	f7 f7                	div    edi
c0003067:	89 d5                	mov    ebp,edx
c0003069:	31 d2                	xor    edx,edx
c000306b:	45                   	inc    ebp
c000306c:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003070:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003073:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003076:	89 c2                	mov    edx,eax
c0003078:	8d 41 ff             	lea    eax,[ecx-0x1]
c000307b:	c1 ea 02             	shr    edx,0x2
c000307e:	83 e2 c0             	and    edx,0xffffffc0
c0003081:	09 ea                	or     edx,ebp
c0003083:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003086:	31 d2                	xor    edx,edx
c0003088:	f7 f7                	div    edi
c000308a:	89 d6                	mov    esi,edx
c000308c:	31 d2                	xor    edx,edx
c000308e:	46                   	inc    esi
c000308f:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003093:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003096:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0003099:	89 c7                	mov    edi,eax
c000309b:	c1 ef 02             	shr    edi,0x2
c000309e:	83 e7 c0             	and    edi,0xffffffc0
c00030a1:	09 fe                	or     esi,edi
c00030a3:	89 f2                	mov    edx,esi
c00030a5:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c00030a8:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c00030ad:	0f 85 0c ff ff ff    	jne    c0002fbf <create_partition+0xa2>
c00030b3:	e9 0b ff ff ff       	jmp    c0002fc3 <create_partition+0xa6>
c00030b8:	b8 01 00 00 00       	mov    eax,0x1
c00030bd:	83 c4 3c             	add    esp,0x3c
c00030c0:	5b                   	pop    ebx
c00030c1:	5e                   	pop    esi
c00030c2:	5f                   	pop    edi
c00030c3:	5d                   	pop    ebp
c00030c4:	c3                   	ret    

c00030c5 <get_fileinfo>:
c00030c5:	55                   	push   ebp
c00030c6:	57                   	push   edi
c00030c7:	56                   	push   esi
c00030c8:	53                   	push   ebx
c00030c9:	83 ec 1c             	sub    esp,0x1c
c00030cc:	8b 30                	mov    esi,DWORD PTR [eax]
c00030ce:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00030d2:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00030d6:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00030da:	0f 84 d3 01 00 00    	je     c00032b3 <get_fileinfo+0x1ee>
c00030e0:	89 d3                	mov    ebx,edx
c00030e2:	89 c6                	mov    esi,eax
c00030e4:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00030e8:	74 72                	je     c000315c <get_fileinfo+0x97>
c00030ea:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00030f2:	31 ed                	xor    ebp,ebp
c00030f4:	31 ff                	xor    edi,edi
c00030f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00030fa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00030fe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003101:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c0003105:	89 c2                	mov    edx,eax
c0003107:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000310b:	85 c0                	test   eax,eax
c000310d:	74 41                	je     c0003150 <get_fileinfo+0x8b>
c000310f:	0f b7 c5             	movzx  eax,bp
c0003112:	85 c0                	test   eax,eax
c0003114:	75 0d                	jne    c0003123 <get_fileinfo+0x5e>
c0003116:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000311c:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003121:	76 22                	jbe    c0003145 <get_fileinfo+0x80>
c0003123:	c1 e0 10             	shl    eax,0x10
c0003126:	b9 ff 00 00 00       	mov    ecx,0xff
c000312b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000312f:	29 f9                	sub    ecx,edi
c0003131:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003135:	e8 f3 ee ff ff       	call   c000202d <put_utf>
c000313a:	0f b6 c0             	movzx  eax,al
c000313d:	85 c0                	test   eax,eax
c000313f:	74 0d                	je     c000314e <get_fileinfo+0x89>
c0003141:	01 c7                	add    edi,eax
c0003143:	31 d2                	xor    edx,edx
c0003145:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000314a:	89 d5                	mov    ebp,edx
c000314c:	eb a8                	jmp    c00030f6 <get_fileinfo+0x31>
c000314e:	31 ff                	xor    edi,edi
c0003150:	66 85 ed             	test   bp,bp
c0003153:	74 02                	je     c0003157 <get_fileinfo+0x92>
c0003155:	31 ff                	xor    edi,edi
c0003157:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000315c:	31 ff                	xor    edi,edi
c000315e:	31 c9                	xor    ecx,ecx
c0003160:	83 f9 0a             	cmp    ecx,0xa
c0003163:	0f 87 ac 00 00 00    	ja     c0003215 <get_fileinfo+0x150>
c0003169:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000316c:	8d 69 01             	lea    ebp,[ecx+0x1]
c000316f:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003173:	89 c2                	mov    edx,eax
c0003175:	83 f8 20             	cmp    eax,0x20
c0003178:	0f 84 90 00 00 00    	je     c000320e <get_fileinfo+0x149>
c000317e:	83 f8 05             	cmp    eax,0x5
c0003181:	75 05                	jne    c0003188 <get_fileinfo+0xc3>
c0003183:	ba e5 00 00 00       	mov    edx,0xe5
c0003188:	83 ff 0b             	cmp    edi,0xb
c000318b:	77 0b                	ja     c0003198 <get_fileinfo+0xd3>
c000318d:	83 fd 09             	cmp    ebp,0x9
c0003190:	75 06                	jne    c0003198 <get_fileinfo+0xd3>
c0003192:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003197:	47                   	inc    edi
c0003198:	0f b7 c2             	movzx  eax,dx
c000319b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000319f:	e8 ab ed ff ff       	call   c0001f4f <dbc_1st>
c00031a4:	85 c0                	test   eax,eax
c00031a6:	74 2f                	je     c00031d7 <get_fileinfo+0x112>
c00031a8:	83 fd 08             	cmp    ebp,0x8
c00031ab:	74 2a                	je     c00031d7 <get_fileinfo+0x112>
c00031ad:	83 fd 0b             	cmp    ebp,0xb
c00031b0:	74 25                	je     c00031d7 <get_fileinfo+0x112>
c00031b2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031b5:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00031b9:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00031bd:	e8 90 ed ff ff       	call   c0001f52 <dbc_2nd>
c00031c2:	85 c0                	test   eax,eax
c00031c4:	74 11                	je     c00031d7 <get_fileinfo+0x112>
c00031c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00031ca:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00031cf:	c1 e0 08             	shl    eax,0x8
c00031d2:	8d 69 02             	lea    ebp,[ecx+0x2]
c00031d5:	09 c2                	or     edx,eax
c00031d7:	0f b7 d2             	movzx  edx,dx
c00031da:	50                   	push   eax
c00031db:	50                   	push   eax
c00031dc:	68 b5 01 00 00       	push   0x1b5
c00031e1:	52                   	push   edx
c00031e2:	e8 01 2c 00 00       	call   c0005de8 <ff_oem2uni>
c00031e7:	83 c4 10             	add    esp,0x10
c00031ea:	0f b7 c0             	movzx  eax,ax
c00031ed:	85 c0                	test   eax,eax
c00031ef:	75 04                	jne    c00031f5 <get_fileinfo+0x130>
c00031f1:	31 ff                	xor    edi,edi
c00031f3:	eb 20                	jmp    c0003215 <get_fileinfo+0x150>
c00031f5:	b9 0c 00 00 00       	mov    ecx,0xc
c00031fa:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00031fe:	29 f9                	sub    ecx,edi
c0003200:	e8 28 ee ff ff       	call   c000202d <put_utf>
c0003205:	0f b6 c0             	movzx  eax,al
c0003208:	85 c0                	test   eax,eax
c000320a:	74 e5                	je     c00031f1 <get_fileinfo+0x12c>
c000320c:	01 c7                	add    edi,eax
c000320e:	89 e9                	mov    ecx,ebp
c0003210:	e9 4b ff ff ff       	jmp    c0003160 <get_fileinfo+0x9b>
c0003215:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000321a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000321e:	75 5f                	jne    c000327f <get_fileinfo+0x1ba>
c0003220:	85 ff                	test   edi,edi
c0003222:	75 0b                	jne    c000322f <get_fileinfo+0x16a>
c0003224:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003228:	ba 01 00 00 00       	mov    edx,0x1
c000322d:	eb 3e                	jmp    c000326d <get_fileinfo+0x1a8>
c000322f:	bf 08 00 00 00       	mov    edi,0x8
c0003234:	31 d2                	xor    edx,edx
c0003236:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000323c:	84 c0                	test   al,al
c000323e:	74 2d                	je     c000326d <get_fileinfo+0x1a8>
c0003240:	66 83 f8 2e          	cmp    ax,0x2e
c0003244:	74 1b                	je     c0003261 <get_fileinfo+0x19c>
c0003246:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003249:	66 83 f9 19          	cmp    cx,0x19
c000324d:	77 17                	ja     c0003266 <get_fileinfo+0x1a1>
c000324f:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003252:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003255:	21 f9                	and    ecx,edi
c0003257:	80 e1 18             	and    cl,0x18
c000325a:	74 0a                	je     c0003266 <get_fileinfo+0x1a1>
c000325c:	83 c0 20             	add    eax,0x20
c000325f:	eb 05                	jmp    c0003266 <get_fileinfo+0x1a1>
c0003261:	bf 10 00 00 00       	mov    edi,0x10
c0003266:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000326a:	42                   	inc    edx
c000326b:	eb c9                	jmp    c0003236 <get_fileinfo+0x171>
c000326d:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003272:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003275:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003279:	75 04                	jne    c000327f <get_fileinfo+0x1ba>
c000327b:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c000327f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003282:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003285:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003288:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000328b:	83 c0 1c             	add    eax,0x1c
c000328e:	e8 49 ec ff ff       	call   c0001edc <ld_dword>
c0003293:	89 03                	mov    DWORD PTR [ebx],eax
c0003295:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003298:	83 c0 16             	add    eax,0x16
c000329b:	e8 2f ec ff ff       	call   c0001ecf <ld_word>
c00032a0:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00032a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a7:	83 c0 18             	add    eax,0x18
c00032aa:	e8 20 ec ff ff       	call   c0001ecf <ld_word>
c00032af:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00032b3:	83 c4 1c             	add    esp,0x1c
c00032b6:	5b                   	pop    ebx
c00032b7:	5e                   	pop    esi
c00032b8:	5f                   	pop    edi
c00032b9:	5d                   	pop    ebp
c00032ba:	c3                   	ret    

c00032bb <ld_clust.isra.0>:
c00032bb:	56                   	push   esi
c00032bc:	89 c6                	mov    esi,eax
c00032be:	53                   	push   ebx
c00032bf:	8d 42 1a             	lea    eax,[edx+0x1a]
c00032c2:	89 d3                	mov    ebx,edx
c00032c4:	e8 06 ec ff ff       	call   c0001ecf <ld_word>
c00032c9:	0f b7 c8             	movzx  ecx,ax
c00032cc:	89 f0                	mov    eax,esi
c00032ce:	3c 03                	cmp    al,0x3
c00032d0:	75 0d                	jne    c00032df <ld_clust.isra.0+0x24>
c00032d2:	8d 43 14             	lea    eax,[ebx+0x14]
c00032d5:	e8 f5 eb ff ff       	call   c0001ecf <ld_word>
c00032da:	c1 e0 10             	shl    eax,0x10
c00032dd:	09 c1                	or     ecx,eax
c00032df:	89 c8                	mov    eax,ecx
c00032e1:	5b                   	pop    ebx
c00032e2:	5e                   	pop    esi
c00032e3:	c3                   	ret    

c00032e4 <st_clust.isra.1>:
c00032e4:	56                   	push   esi
c00032e5:	89 c6                	mov    esi,eax
c00032e7:	53                   	push   ebx
c00032e8:	89 d3                	mov    ebx,edx
c00032ea:	0f b7 d1             	movzx  edx,cx
c00032ed:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00032f0:	e8 ff eb ff ff       	call   c0001ef4 <st_word>
c00032f5:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00032f8:	75 0f                	jne    c0003309 <st_clust.isra.1+0x25>
c00032fa:	c1 e9 10             	shr    ecx,0x10
c00032fd:	8d 43 14             	lea    eax,[ebx+0x14]
c0003300:	89 ca                	mov    edx,ecx
c0003302:	5b                   	pop    ebx
c0003303:	5e                   	pop    esi
c0003304:	e9 eb eb ff ff       	jmp    c0001ef4 <st_word>
c0003309:	5b                   	pop    ebx
c000330a:	5e                   	pop    esi
c000330b:	c3                   	ret    

c000330c <get_fat.isra.2>:
c000330c:	b9 01 00 00 00       	mov    ecx,0x1
c0003311:	83 fa 01             	cmp    edx,0x1
c0003314:	0f 86 f3 00 00 00    	jbe    c000340d <get_fat.isra.2+0x101>
c000331a:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000331d:	0f 83 ea 00 00 00    	jae    c000340d <get_fat.isra.2+0x101>
c0003323:	55                   	push   ebp
c0003324:	57                   	push   edi
c0003325:	89 c7                	mov    edi,eax
c0003327:	56                   	push   esi
c0003328:	89 d6                	mov    esi,edx
c000332a:	53                   	push   ebx
c000332b:	83 ec 0c             	sub    esp,0xc
c000332e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003331:	83 f8 02             	cmp    eax,0x2
c0003334:	74 78                	je     c00033ae <get_fat.isra.2+0xa2>
c0003336:	83 f8 03             	cmp    eax,0x3
c0003339:	0f 84 96 00 00 00    	je     c00033d5 <get_fat.isra.2+0xc9>
c000333f:	48                   	dec    eax
c0003340:	0f 85 bd 00 00 00    	jne    c0003403 <get_fat.isra.2+0xf7>
c0003346:	89 d3                	mov    ebx,edx
c0003348:	89 f8                	mov    eax,edi
c000334a:	d1 eb                	shr    ebx,1
c000334c:	01 d3                	add    ebx,edx
c000334e:	89 da                	mov    edx,ebx
c0003350:	c1 ea 09             	shr    edx,0x9
c0003353:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003356:	e8 db f0 ff ff       	call   c0002436 <move_window>
c000335b:	85 c0                	test   eax,eax
c000335d:	74 08                	je     c0003367 <get_fat.isra.2+0x5b>
c000335f:	83 c9 ff             	or     ecx,0xffffffff
c0003362:	e9 9c 00 00 00       	jmp    c0003403 <get_fat.isra.2+0xf7>
c0003367:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000336a:	89 f8                	mov    eax,edi
c000336c:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003372:	89 ea                	mov    edx,ebp
c0003374:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003378:	c1 ea 09             	shr    edx,0x9
c000337b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000337e:	e8 b3 f0 ff ff       	call   c0002436 <move_window>
c0003383:	85 c0                	test   eax,eax
c0003385:	75 d8                	jne    c000335f <get_fat.isra.2+0x53>
c0003387:	0f b6 c3             	movzx  eax,bl
c000338a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003390:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003395:	c1 e3 08             	shl    ebx,0x8
c0003398:	09 c3                	or     ebx,eax
c000339a:	89 d9                	mov    ecx,ebx
c000339c:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00033a2:	83 e6 01             	and    esi,0x1
c00033a5:	74 5c                	je     c0003403 <get_fat.isra.2+0xf7>
c00033a7:	89 d9                	mov    ecx,ebx
c00033a9:	c1 e9 04             	shr    ecx,0x4
c00033ac:	eb 55                	jmp    c0003403 <get_fat.isra.2+0xf7>
c00033ae:	c1 ea 08             	shr    edx,0x8
c00033b1:	89 f8                	mov    eax,edi
c00033b3:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00033b6:	e8 7b f0 ff ff       	call   c0002436 <move_window>
c00033bb:	85 c0                	test   eax,eax
c00033bd:	75 a0                	jne    c000335f <get_fat.isra.2+0x53>
c00033bf:	01 f6                	add    esi,esi
c00033c1:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00033c7:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00033cb:	e8 ff ea ff ff       	call   c0001ecf <ld_word>
c00033d0:	0f b7 c8             	movzx  ecx,ax
c00033d3:	eb 2e                	jmp    c0003403 <get_fat.isra.2+0xf7>
c00033d5:	c1 ea 07             	shr    edx,0x7
c00033d8:	89 f8                	mov    eax,edi
c00033da:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00033dd:	e8 54 f0 ff ff       	call   c0002436 <move_window>
c00033e2:	85 c0                	test   eax,eax
c00033e4:	0f 85 75 ff ff ff    	jne    c000335f <get_fat.isra.2+0x53>
c00033ea:	c1 e6 02             	shl    esi,0x2
c00033ed:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00033f3:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00033f7:	e8 e0 ea ff ff       	call   c0001edc <ld_dword>
c00033fc:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003401:	89 c1                	mov    ecx,eax
c0003403:	83 c4 0c             	add    esp,0xc
c0003406:	89 c8                	mov    eax,ecx
c0003408:	5b                   	pop    ebx
c0003409:	5e                   	pop    esi
c000340a:	5f                   	pop    edi
c000340b:	5d                   	pop    ebp
c000340c:	c3                   	ret    
c000340d:	89 c8                	mov    eax,ecx
c000340f:	c3                   	ret    

c0003410 <dir_sdi>:
c0003410:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003416:	0f 87 b6 00 00 00    	ja     c00034d2 <dir_sdi+0xc2>
c000341c:	55                   	push   ebp
c000341d:	57                   	push   edi
c000341e:	56                   	push   esi
c000341f:	53                   	push   ebx
c0003420:	89 d3                	mov    ebx,edx
c0003422:	83 ec 1c             	sub    esp,0x1c
c0003425:	f6 c2 1f             	test   dl,0x1f
c0003428:	74 0a                	je     c0003434 <dir_sdi+0x24>
c000342a:	b8 02 00 00 00       	mov    eax,0x2
c000342f:	e9 96 00 00 00       	jmp    c00034ca <dir_sdi+0xba>
c0003434:	89 c6                	mov    esi,eax
c0003436:	8b 38                	mov    edi,DWORD PTR [eax]
c0003438:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000343b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000343e:	85 c9                	test   ecx,ecx
c0003440:	75 23                	jne    c0003465 <dir_sdi+0x55>
c0003442:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003445:	76 07                	jbe    c000344e <dir_sdi+0x3e>
c0003447:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000344a:	85 c0                	test   eax,eax
c000344c:	75 15                	jne    c0003463 <dir_sdi+0x53>
c000344e:	89 da                	mov    edx,ebx
c0003450:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003454:	c1 ea 05             	shr    edx,0x5
c0003457:	39 c2                	cmp    edx,eax
c0003459:	73 cf                	jae    c000342a <dir_sdi+0x1a>
c000345b:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000345e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003461:	eb 3d                	jmp    c00034a0 <dir_sdi+0x90>
c0003463:	89 c1                	mov    ecx,eax
c0003465:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003469:	c1 e5 09             	shl    ebp,0x9
c000346c:	89 ca                	mov    edx,ecx
c000346e:	39 eb                	cmp    ebx,ebp
c0003470:	72 1c                	jb     c000348e <dir_sdi+0x7e>
c0003472:	8b 06                	mov    eax,DWORD PTR [esi]
c0003474:	e8 93 fe ff ff       	call   c000330c <get_fat.isra.2>
c0003479:	89 c1                	mov    ecx,eax
c000347b:	83 f8 ff             	cmp    eax,0xffffffff
c000347e:	74 45                	je     c00034c5 <dir_sdi+0xb5>
c0003480:	83 f8 01             	cmp    eax,0x1
c0003483:	76 a5                	jbe    c000342a <dir_sdi+0x1a>
c0003485:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003488:	76 a0                	jbe    c000342a <dir_sdi+0x1a>
c000348a:	29 eb                	sub    ebx,ebp
c000348c:	eb de                	jmp    c000346c <dir_sdi+0x5c>
c000348e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003492:	89 f8                	mov    eax,edi
c0003494:	e8 8d ec ff ff       	call   c0002126 <clst2sect>
c0003499:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000349d:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00034a0:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00034a3:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00034a6:	85 d2                	test   edx,edx
c00034a8:	74 80                	je     c000342a <dir_sdi+0x1a>
c00034aa:	89 d8                	mov    eax,ebx
c00034ac:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00034b2:	c1 e8 09             	shr    eax,0x9
c00034b5:	01 d0                	add    eax,edx
c00034b7:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00034ba:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00034be:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00034c1:	31 c0                	xor    eax,eax
c00034c3:	eb 05                	jmp    c00034ca <dir_sdi+0xba>
c00034c5:	b8 01 00 00 00       	mov    eax,0x1
c00034ca:	83 c4 1c             	add    esp,0x1c
c00034cd:	5b                   	pop    ebx
c00034ce:	5e                   	pop    esi
c00034cf:	5f                   	pop    edi
c00034d0:	5d                   	pop    ebp
c00034d1:	c3                   	ret    
c00034d2:	b8 02 00 00 00       	mov    eax,0x2
c00034d7:	c3                   	ret    

c00034d8 <create_chain>:
c00034d8:	55                   	push   ebp
c00034d9:	89 c5                	mov    ebp,eax
c00034db:	57                   	push   edi
c00034dc:	89 d7                	mov    edi,edx
c00034de:	56                   	push   esi
c00034df:	53                   	push   ebx
c00034e0:	83 ec 1c             	sub    esp,0x1c
c00034e3:	85 d2                	test   edx,edx
c00034e5:	8b 30                	mov    esi,DWORD PTR [eax]
c00034e7:	75 0e                	jne    c00034f7 <create_chain+0x1f>
c00034e9:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00034ec:	85 c9                	test   ecx,ecx
c00034ee:	74 34                	je     c0003524 <create_chain+0x4c>
c00034f0:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00034f3:	77 34                	ja     c0003529 <create_chain+0x51>
c00034f5:	eb 2d                	jmp    c0003524 <create_chain+0x4c>
c00034f7:	89 f0                	mov    eax,esi
c00034f9:	e8 0e fe ff ff       	call   c000330c <get_fat.isra.2>
c00034fe:	89 c3                	mov    ebx,eax
c0003500:	83 f8 01             	cmp    eax,0x1
c0003503:	77 0a                	ja     c000350f <create_chain+0x37>
c0003505:	bb 01 00 00 00       	mov    ebx,0x1
c000350a:	e9 fe 00 00 00       	jmp    c000360d <create_chain+0x135>
c000350f:	83 f8 ff             	cmp    eax,0xffffffff
c0003512:	0f 84 f2 00 00 00    	je     c000360a <create_chain+0x132>
c0003518:	89 f9                	mov    ecx,edi
c000351a:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000351d:	76 0a                	jbe    c0003529 <create_chain+0x51>
c000351f:	e9 e9 00 00 00       	jmp    c000360d <create_chain+0x135>
c0003524:	b9 01 00 00 00       	mov    ecx,0x1
c0003529:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000352d:	75 07                	jne    c0003536 <create_chain+0x5e>
c000352f:	31 db                	xor    ebx,ebx
c0003531:	e9 d7 00 00 00       	jmp    c000360d <create_chain+0x135>
c0003536:	39 f9                	cmp    ecx,edi
c0003538:	75 46                	jne    c0003580 <create_chain+0xa8>
c000353a:	8d 59 01             	lea    ebx,[ecx+0x1]
c000353d:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003540:	77 05                	ja     c0003547 <create_chain+0x6f>
c0003542:	bb 02 00 00 00       	mov    ebx,0x2
c0003547:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000354b:	89 da                	mov    edx,ebx
c000354d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003550:	e8 b7 fd ff ff       	call   c000330c <get_fat.isra.2>
c0003555:	83 f8 01             	cmp    eax,0x1
c0003558:	74 ab                	je     c0003505 <create_chain+0x2d>
c000355a:	83 f8 ff             	cmp    eax,0xffffffff
c000355d:	0f 84 a7 00 00 00    	je     c000360a <create_chain+0x132>
c0003563:	85 c0                	test   eax,eax
c0003565:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003569:	74 11                	je     c000357c <create_chain+0xa4>
c000356b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000356e:	83 f8 01             	cmp    eax,0x1
c0003571:	76 0d                	jbe    c0003580 <create_chain+0xa8>
c0003573:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003576:	73 08                	jae    c0003580 <create_chain+0xa8>
c0003578:	89 c1                	mov    ecx,eax
c000357a:	eb 04                	jmp    c0003580 <create_chain+0xa8>
c000357c:	85 db                	test   ebx,ebx
c000357e:	75 3d                	jne    c00035bd <create_chain+0xe5>
c0003580:	89 cb                	mov    ebx,ecx
c0003582:	43                   	inc    ebx
c0003583:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003586:	77 0a                	ja     c0003592 <create_chain+0xba>
c0003588:	83 f9 01             	cmp    ecx,0x1
c000358b:	76 a2                	jbe    c000352f <create_chain+0x57>
c000358d:	bb 02 00 00 00       	mov    ebx,0x2
c0003592:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003596:	89 da                	mov    edx,ebx
c0003598:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000359b:	e8 6c fd ff ff       	call   c000330c <get_fat.isra.2>
c00035a0:	85 c0                	test   eax,eax
c00035a2:	74 19                	je     c00035bd <create_chain+0xe5>
c00035a4:	83 f8 01             	cmp    eax,0x1
c00035a7:	0f 84 58 ff ff ff    	je     c0003505 <create_chain+0x2d>
c00035ad:	40                   	inc    eax
c00035ae:	74 5a                	je     c000360a <create_chain+0x132>
c00035b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00035b4:	39 cb                	cmp    ebx,ecx
c00035b6:	75 ca                	jne    c0003582 <create_chain+0xaa>
c00035b8:	e9 72 ff ff ff       	jmp    c000352f <create_chain+0x57>
c00035bd:	83 c9 ff             	or     ecx,0xffffffff
c00035c0:	89 da                	mov    edx,ebx
c00035c2:	89 f0                	mov    eax,esi
c00035c4:	e8 b1 f2 ff ff       	call   c000287a <put_fat>
c00035c9:	85 c0                	test   eax,eax
c00035cb:	75 36                	jne    c0003603 <create_chain+0x12b>
c00035cd:	85 ff                	test   edi,edi
c00035cf:	75 16                	jne    c00035e7 <create_chain+0x10f>
c00035d1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00035d4:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00035d7:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00035da:	8d 57 fe             	lea    edx,[edi-0x2]
c00035dd:	39 d0                	cmp    eax,edx
c00035df:	77 17                	ja     c00035f8 <create_chain+0x120>
c00035e1:	48                   	dec    eax
c00035e2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00035e5:	eb 11                	jmp    c00035f8 <create_chain+0x120>
c00035e7:	89 d9                	mov    ecx,ebx
c00035e9:	89 fa                	mov    edx,edi
c00035eb:	89 f0                	mov    eax,esi
c00035ed:	e8 88 f2 ff ff       	call   c000287a <put_fat>
c00035f2:	85 c0                	test   eax,eax
c00035f4:	74 db                	je     c00035d1 <create_chain+0xf9>
c00035f6:	eb 0b                	jmp    c0003603 <create_chain+0x12b>
c00035f8:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00035fb:	83 c8 01             	or     eax,0x1
c00035fe:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003601:	eb 0a                	jmp    c000360d <create_chain+0x135>
c0003603:	48                   	dec    eax
c0003604:	0f 85 fb fe ff ff    	jne    c0003505 <create_chain+0x2d>
c000360a:	83 cb ff             	or     ebx,0xffffffff
c000360d:	83 c4 1c             	add    esp,0x1c
c0003610:	89 d8                	mov    eax,ebx
c0003612:	5b                   	pop    ebx
c0003613:	5e                   	pop    esi
c0003614:	5f                   	pop    edi
c0003615:	5d                   	pop    ebp
c0003616:	c3                   	ret    

c0003617 <remove_chain>:
c0003617:	55                   	push   ebp
c0003618:	57                   	push   edi
c0003619:	56                   	push   esi
c000361a:	89 d6                	mov    esi,edx
c000361c:	53                   	push   ebx
c000361d:	83 ec 0c             	sub    esp,0xc
c0003620:	83 fa 01             	cmp    edx,0x1
c0003623:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003625:	76 6a                	jbe    c0003691 <remove_chain+0x7a>
c0003627:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000362a:	76 65                	jbe    c0003691 <remove_chain+0x7a>
c000362c:	89 c5                	mov    ebp,eax
c000362e:	89 ca                	mov    edx,ecx
c0003630:	85 c9                	test   ecx,ecx
c0003632:	74 0e                	je     c0003642 <remove_chain+0x2b>
c0003634:	83 c9 ff             	or     ecx,0xffffffff
c0003637:	89 d8                	mov    eax,ebx
c0003639:	e8 3c f2 ff ff       	call   c000287a <put_fat>
c000363e:	85 c0                	test   eax,eax
c0003640:	75 5b                	jne    c000369d <remove_chain+0x86>
c0003642:	89 f2                	mov    edx,esi
c0003644:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003647:	e8 c0 fc ff ff       	call   c000330c <get_fat.isra.2>
c000364c:	89 c7                	mov    edi,eax
c000364e:	85 c0                	test   eax,eax
c0003650:	75 04                	jne    c0003656 <remove_chain+0x3f>
c0003652:	31 c0                	xor    eax,eax
c0003654:	eb 47                	jmp    c000369d <remove_chain+0x86>
c0003656:	83 f8 01             	cmp    eax,0x1
c0003659:	74 36                	je     c0003691 <remove_chain+0x7a>
c000365b:	83 f8 ff             	cmp    eax,0xffffffff
c000365e:	74 38                	je     c0003698 <remove_chain+0x81>
c0003660:	31 c9                	xor    ecx,ecx
c0003662:	89 f2                	mov    edx,esi
c0003664:	89 d8                	mov    eax,ebx
c0003666:	e8 0f f2 ff ff       	call   c000287a <put_fat>
c000366b:	85 c0                	test   eax,eax
c000366d:	75 2e                	jne    c000369d <remove_chain+0x86>
c000366f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003672:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003675:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003678:	39 c8                	cmp    eax,ecx
c000367a:	73 0d                	jae    c0003689 <remove_chain+0x72>
c000367c:	40                   	inc    eax
c000367d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003680:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003683:	83 c8 01             	or     eax,0x1
c0003686:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003689:	89 fe                	mov    esi,edi
c000368b:	39 fa                	cmp    edx,edi
c000368d:	77 b3                	ja     c0003642 <remove_chain+0x2b>
c000368f:	eb c1                	jmp    c0003652 <remove_chain+0x3b>
c0003691:	b8 02 00 00 00       	mov    eax,0x2
c0003696:	eb 05                	jmp    c000369d <remove_chain+0x86>
c0003698:	b8 01 00 00 00       	mov    eax,0x1
c000369d:	83 c4 0c             	add    esp,0xc
c00036a0:	5b                   	pop    ebx
c00036a1:	5e                   	pop    esi
c00036a2:	5f                   	pop    edi
c00036a3:	5d                   	pop    ebp
c00036a4:	c3                   	ret    

c00036a5 <dir_next>:
c00036a5:	55                   	push   ebp
c00036a6:	57                   	push   edi
c00036a7:	56                   	push   esi
c00036a8:	53                   	push   ebx
c00036a9:	83 ec 1c             	sub    esp,0x1c
c00036ac:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00036af:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036b1:	83 c7 20             	add    edi,0x20
c00036b4:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00036ba:	76 07                	jbe    c00036c3 <dir_next+0x1e>
c00036bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00036c3:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00036c6:	b9 04 00 00 00       	mov    ecx,0x4
c00036cb:	85 f6                	test   esi,esi
c00036cd:	0f 84 cd 00 00 00    	je     c00037a0 <dir_next+0xfb>
c00036d3:	89 c3                	mov    ebx,eax
c00036d5:	89 d1                	mov    ecx,edx
c00036d7:	89 f8                	mov    eax,edi
c00036d9:	25 ff 01 00 00       	and    eax,0x1ff
c00036de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00036e2:	0f 85 a8 00 00 00    	jne    c0003790 <dir_next+0xeb>
c00036e8:	46                   	inc    esi
c00036e9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00036ec:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00036ef:	85 d2                	test   edx,edx
c00036f1:	75 22                	jne    c0003715 <dir_next+0x70>
c00036f3:	89 fa                	mov    edx,edi
c00036f5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00036f9:	c1 ea 05             	shr    edx,0x5
c00036fc:	39 c2                	cmp    edx,eax
c00036fe:	0f 82 8c 00 00 00    	jb     c0003790 <dir_next+0xeb>
c0003704:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000370b:	b9 04 00 00 00       	mov    ecx,0x4
c0003710:	e9 8b 00 00 00       	jmp    c00037a0 <dir_next+0xfb>
c0003715:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003719:	89 fe                	mov    esi,edi
c000371b:	48                   	dec    eax
c000371c:	c1 ee 09             	shr    esi,0x9
c000371f:	85 f0                	test   eax,esi
c0003721:	75 6d                	jne    c0003790 <dir_next+0xeb>
c0003723:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003727:	89 e8                	mov    eax,ebp
c0003729:	e8 de fb ff ff       	call   c000330c <get_fat.isra.2>
c000372e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003732:	89 c6                	mov    esi,eax
c0003734:	83 f8 01             	cmp    eax,0x1
c0003737:	77 07                	ja     c0003740 <dir_next+0x9b>
c0003739:	b9 02 00 00 00       	mov    ecx,0x2
c000373e:	eb 60                	jmp    c00037a0 <dir_next+0xfb>
c0003740:	83 f8 ff             	cmp    eax,0xffffffff
c0003743:	75 07                	jne    c000374c <dir_next+0xa7>
c0003745:	b9 01 00 00 00       	mov    ecx,0x1
c000374a:	eb 54                	jmp    c00037a0 <dir_next+0xfb>
c000374c:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c000374f:	77 30                	ja     c0003781 <dir_next+0xdc>
c0003751:	85 c9                	test   ecx,ecx
c0003753:	74 af                	je     c0003704 <dir_next+0x5f>
c0003755:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003758:	89 d8                	mov    eax,ebx
c000375a:	e8 79 fd ff ff       	call   c00034d8 <create_chain>
c000375f:	b9 07 00 00 00       	mov    ecx,0x7
c0003764:	89 c6                	mov    esi,eax
c0003766:	85 c0                	test   eax,eax
c0003768:	74 36                	je     c00037a0 <dir_next+0xfb>
c000376a:	83 f8 01             	cmp    eax,0x1
c000376d:	74 ca                	je     c0003739 <dir_next+0x94>
c000376f:	83 f8 ff             	cmp    eax,0xffffffff
c0003772:	74 d1                	je     c0003745 <dir_next+0xa0>
c0003774:	89 c2                	mov    edx,eax
c0003776:	89 e8                	mov    eax,ebp
c0003778:	e8 54 f2 ff ff       	call   c00029d1 <dir_clear>
c000377d:	85 c0                	test   eax,eax
c000377f:	75 c4                	jne    c0003745 <dir_next+0xa0>
c0003781:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003784:	89 f2                	mov    edx,esi
c0003786:	89 e8                	mov    eax,ebp
c0003788:	e8 99 e9 ff ff       	call   c0002126 <clst2sect>
c000378d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003790:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003794:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003797:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000379b:	31 c9                	xor    ecx,ecx
c000379d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00037a0:	83 c4 1c             	add    esp,0x1c
c00037a3:	89 c8                	mov    eax,ecx
c00037a5:	5b                   	pop    ebx
c00037a6:	5e                   	pop    esi
c00037a7:	5f                   	pop    edi
c00037a8:	5d                   	pop    ebp
c00037a9:	c3                   	ret    

c00037aa <dir_alloc>:
c00037aa:	55                   	push   ebp
c00037ab:	89 c5                	mov    ebp,eax
c00037ad:	57                   	push   edi
c00037ae:	89 d7                	mov    edi,edx
c00037b0:	56                   	push   esi
c00037b1:	31 d2                	xor    edx,edx
c00037b3:	53                   	push   ebx
c00037b4:	83 ec 0c             	sub    esp,0xc
c00037b7:	8b 30                	mov    esi,DWORD PTR [eax]
c00037b9:	e8 52 fc ff ff       	call   c0003410 <dir_sdi>
c00037be:	85 c0                	test   eax,eax
c00037c0:	75 3b                	jne    c00037fd <dir_alloc+0x53>
c00037c2:	31 db                	xor    ebx,ebx
c00037c4:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00037c7:	89 f0                	mov    eax,esi
c00037c9:	e8 68 ec ff ff       	call   c0002436 <move_window>
c00037ce:	85 c0                	test   eax,eax
c00037d0:	75 2b                	jne    c00037fd <dir_alloc+0x53>
c00037d2:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00037d5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00037d8:	85 d2                	test   edx,edx
c00037da:	74 08                	je     c00037e4 <dir_alloc+0x3a>
c00037dc:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00037e2:	75 07                	jne    c00037eb <dir_alloc+0x41>
c00037e4:	43                   	inc    ebx
c00037e5:	39 fb                	cmp    ebx,edi
c00037e7:	75 04                	jne    c00037ed <dir_alloc+0x43>
c00037e9:	eb 1c                	jmp    c0003807 <dir_alloc+0x5d>
c00037eb:	31 db                	xor    ebx,ebx
c00037ed:	ba 01 00 00 00       	mov    edx,0x1
c00037f2:	89 e8                	mov    eax,ebp
c00037f4:	e8 ac fe ff ff       	call   c00036a5 <dir_next>
c00037f9:	85 c0                	test   eax,eax
c00037fb:	74 c7                	je     c00037c4 <dir_alloc+0x1a>
c00037fd:	83 f8 04             	cmp    eax,0x4
c0003800:	75 05                	jne    c0003807 <dir_alloc+0x5d>
c0003802:	b8 07 00 00 00       	mov    eax,0x7
c0003807:	83 c4 0c             	add    esp,0xc
c000380a:	5b                   	pop    ebx
c000380b:	5e                   	pop    esi
c000380c:	5f                   	pop    edi
c000380d:	5d                   	pop    ebp
c000380e:	c3                   	ret    

c000380f <dir_read>:
c000380f:	55                   	push   ebp
c0003810:	57                   	push   edi
c0003811:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003816:	56                   	push   esi
c0003817:	be 04 00 00 00       	mov    esi,0x4
c000381c:	53                   	push   ebx
c000381d:	89 c3                	mov    ebx,eax
c000381f:	83 ec 1c             	sub    esp,0x1c
c0003822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003826:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003828:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000382d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003830:	85 d2                	test   edx,edx
c0003832:	0f 84 e3 00 00 00    	je     c000391b <dir_read+0x10c>
c0003838:	89 e8                	mov    eax,ebp
c000383a:	e8 f7 eb ff ff       	call   c0002436 <move_window>
c000383f:	89 c6                	mov    esi,eax
c0003841:	85 c0                	test   eax,eax
c0003843:	0f 85 dd 00 00 00    	jne    c0003926 <dir_read+0x117>
c0003849:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000384c:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000384f:	88 04 24             	mov    BYTE PTR [esp],al
c0003852:	85 c0                	test   eax,eax
c0003854:	0f 84 c7 00 00 00    	je     c0003921 <dir_read+0x112>
c000385a:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000385d:	83 e1 3f             	and    ecx,0x3f
c0003860:	83 f8 2e             	cmp    eax,0x2e
c0003863:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003866:	0f 84 95 00 00 00    	je     c0003901 <dir_read+0xf2>
c000386c:	3d e5 00 00 00       	cmp    eax,0xe5
c0003871:	0f 84 8a 00 00 00    	je     c0003901 <dir_read+0xf2>
c0003877:	0f b6 c9             	movzx  ecx,cl
c000387a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000387e:	83 e1 df             	and    ecx,0xffffffdf
c0003881:	83 f9 08             	cmp    ecx,0x8
c0003884:	0f 94 c1             	sete   cl
c0003887:	0f b6 c9             	movzx  ecx,cl
c000388a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000388e:	75 71                	jne    c0003901 <dir_read+0xf2>
c0003890:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003895:	75 4a                	jne    c00038e1 <dir_read+0xd2>
c0003897:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000389b:	74 16                	je     c00038b3 <dir_read+0xa4>
c000389d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00038a0:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00038a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00038ab:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038ae:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00038b1:	eb 0e                	jmp    c00038c1 <dir_read+0xb2>
c00038b3:	89 f9                	mov    ecx,edi
c00038b5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038ba:	0f b6 c9             	movzx  ecx,cl
c00038bd:	39 c1                	cmp    ecx,eax
c00038bf:	75 45                	jne    c0003906 <dir_read+0xf7>
c00038c1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038c5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038ca:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00038cd:	75 37                	jne    c0003906 <dir_read+0xf7>
c00038cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00038d2:	e8 6c e8 ff ff       	call   c0002143 <pick_lfn>
c00038d7:	85 c0                	test   eax,eax
c00038d9:	74 2b                	je     c0003906 <dir_read+0xf7>
c00038db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00038de:	4f                   	dec    edi
c00038df:	eb 25                	jmp    c0003906 <dir_read+0xf7>
c00038e1:	89 f8                	mov    eax,edi
c00038e3:	84 c0                	test   al,al
c00038e5:	75 11                	jne    c00038f8 <dir_read+0xe9>
c00038e7:	89 d0                	mov    eax,edx
c00038e9:	e8 32 ea ff ff       	call   c0002320 <sum_sfn>
c00038ee:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00038f2:	75 04                	jne    c00038f8 <dir_read+0xe9>
c00038f4:	31 f6                	xor    esi,esi
c00038f6:	eb 35                	jmp    c000392d <dir_read+0x11e>
c00038f8:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038ff:	eb 2c                	jmp    c000392d <dir_read+0x11e>
c0003901:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 d8                	mov    eax,ebx
c000390a:	e8 96 fd ff ff       	call   c00036a5 <dir_next>
c000390f:	89 c6                	mov    esi,eax
c0003911:	85 c0                	test   eax,eax
c0003913:	0f 84 14 ff ff ff    	je     c000382d <dir_read+0x1e>
c0003919:	eb 0b                	jmp    c0003926 <dir_read+0x117>
c000391b:	85 f6                	test   esi,esi
c000391d:	74 d5                	je     c00038f4 <dir_read+0xe5>
c000391f:	eb 05                	jmp    c0003926 <dir_read+0x117>
c0003921:	be 04 00 00 00       	mov    esi,0x4
c0003926:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000392d:	83 c4 1c             	add    esp,0x1c
c0003930:	89 f0                	mov    eax,esi
c0003932:	5b                   	pop    ebx
c0003933:	5e                   	pop    esi
c0003934:	5f                   	pop    edi
c0003935:	5d                   	pop    ebp
c0003936:	c3                   	ret    

c0003937 <dir_remove>:
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	53                   	push   ebx
c000393a:	89 c3                	mov    ebx,eax
c000393c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000393f:	8b 30                	mov    esi,DWORD PTR [eax]
c0003941:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003944:	83 fa ff             	cmp    edx,0xffffffff
c0003947:	74 09                	je     c0003952 <dir_remove+0x1b>
c0003949:	e8 c2 fa ff ff       	call   c0003410 <dir_sdi>
c000394e:	85 c0                	test   eax,eax
c0003950:	75 34                	jne    c0003986 <dir_remove+0x4f>
c0003952:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003955:	89 f0                	mov    eax,esi
c0003957:	e8 da ea ff ff       	call   c0002436 <move_window>
c000395c:	85 c0                	test   eax,eax
c000395e:	75 1c                	jne    c000397c <dir_remove+0x45>
c0003960:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003963:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003966:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000396a:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c000396d:	73 17                	jae    c0003986 <dir_remove+0x4f>
c000396f:	31 d2                	xor    edx,edx
c0003971:	89 d8                	mov    eax,ebx
c0003973:	e8 2d fd ff ff       	call   c00036a5 <dir_next>
c0003978:	85 c0                	test   eax,eax
c000397a:	74 d6                	je     c0003952 <dir_remove+0x1b>
c000397c:	83 f8 04             	cmp    eax,0x4
c000397f:	75 05                	jne    c0003986 <dir_remove+0x4f>
c0003981:	b8 02 00 00 00       	mov    eax,0x2
c0003986:	5b                   	pop    ebx
c0003987:	5e                   	pop    esi
c0003988:	5f                   	pop    edi
c0003989:	c3                   	ret    

c000398a <dir_find>:
c000398a:	55                   	push   ebp
c000398b:	31 d2                	xor    edx,edx
c000398d:	57                   	push   edi
c000398e:	56                   	push   esi
c000398f:	53                   	push   ebx
c0003990:	89 c3                	mov    ebx,eax
c0003992:	83 ec 1c             	sub    esp,0x1c
c0003995:	8b 00                	mov    eax,DWORD PTR [eax]
c0003997:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000399b:	89 d8                	mov    eax,ebx
c000399d:	e8 6e fa ff ff       	call   c0003410 <dir_sdi>
c00039a2:	89 c6                	mov    esi,eax
c00039a4:	85 c0                	test   eax,eax
c00039a6:	0f 85 1d 01 00 00    	jne    c0003ac9 <dir_find+0x13f>
c00039ac:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00039b8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bd:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00039c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039c4:	e8 6d ea ff ff       	call   c0002436 <move_window>
c00039c9:	89 c6                	mov    esi,eax
c00039cb:	85 c0                	test   eax,eax
c00039cd:	0f 85 f6 00 00 00    	jne    c0003ac9 <dir_find+0x13f>
c00039d3:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00039d6:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00039da:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00039de:	85 c9                	test   ecx,ecx
c00039e0:	0f 84 de 00 00 00    	je     c0003ac4 <dir_find+0x13a>
c00039e6:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00039e9:	89 d0                	mov    eax,edx
c00039eb:	83 e0 3f             	and    eax,0x3f
c00039ee:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00039f4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00039f7:	0f 84 a6 00 00 00    	je     c0003aa3 <dir_find+0x119>
c00039fd:	80 e2 08             	and    dl,0x8
c0003a00:	0f b6 c0             	movzx  eax,al
c0003a03:	74 0b                	je     c0003a10 <dir_find+0x86>
c0003a05:	83 f8 0f             	cmp    eax,0xf
c0003a08:	0f 85 95 00 00 00    	jne    c0003aa3 <dir_find+0x119>
c0003a0e:	eb 05                	jmp    c0003a15 <dir_find+0x8b>
c0003a10:	83 f8 0f             	cmp    eax,0xf
c0003a13:	75 62                	jne    c0003a77 <dir_find+0xed>
c0003a15:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003a19:	0f 85 90 00 00 00    	jne    c0003aaf <dir_find+0x125>
c0003a1f:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003a24:	74 17                	je     c0003a3d <dir_find+0xb3>
c0003a26:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003a29:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003a31:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003a35:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a38:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003a3b:	eb 13                	jmp    c0003a50 <dir_find+0xc6>
c0003a3d:	89 f8                	mov    eax,edi
c0003a3f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a44:	0f b6 d0             	movzx  edx,al
c0003a47:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003a4c:	39 c2                	cmp    edx,eax
c0003a4e:	75 5f                	jne    c0003aaf <dir_find+0x125>
c0003a50:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003a54:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003a59:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003a5c:	75 51                	jne    c0003aaf <dir_find+0x125>
c0003a5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a62:	89 ea                	mov    edx,ebp
c0003a64:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a67:	e8 37 f3 ff ff       	call   c0002da3 <cmp_lfn>
c0003a6c:	85 c0                	test   eax,eax
c0003a6e:	74 3f                	je     c0003aaf <dir_find+0x125>
c0003a70:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003a74:	4f                   	dec    edi
c0003a75:	eb 38                	jmp    c0003aaf <dir_find+0x125>
c0003a77:	89 f8                	mov    eax,edi
c0003a79:	84 c0                	test   al,al
c0003a7b:	75 0d                	jne    c0003a8a <dir_find+0x100>
c0003a7d:	89 e8                	mov    eax,ebp
c0003a7f:	e8 9c e8 ff ff       	call   c0002320 <sum_sfn>
c0003a84:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003a88:	74 3f                	je     c0003ac9 <dir_find+0x13f>
c0003a8a:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003a8e:	75 13                	jne    c0003aa3 <dir_find+0x119>
c0003a90:	8d 53 20             	lea    edx,[ebx+0x20]
c0003a93:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a98:	89 e8                	mov    eax,ebp
c0003a9a:	e8 7c e4 ff ff       	call   c0001f1b <mem_cmp>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 26                	je     c0003ac9 <dir_find+0x13f>
c0003aa3:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aaa:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aaf:	31 d2                	xor    edx,edx
c0003ab1:	89 d8                	mov    eax,ebx
c0003ab3:	e8 ed fb ff ff       	call   c00036a5 <dir_next>
c0003ab8:	89 c6                	mov    esi,eax
c0003aba:	85 c0                	test   eax,eax
c0003abc:	0f 84 fb fe ff ff    	je     c00039bd <dir_find+0x33>
c0003ac2:	eb 05                	jmp    c0003ac9 <dir_find+0x13f>
c0003ac4:	be 04 00 00 00       	mov    esi,0x4
c0003ac9:	83 c4 1c             	add    esp,0x1c
c0003acc:	89 f0                	mov    eax,esi
c0003ace:	5b                   	pop    ebx
c0003acf:	5e                   	pop    esi
c0003ad0:	5f                   	pop    edi
c0003ad1:	5d                   	pop    ebp
c0003ad2:	c3                   	ret    

c0003ad3 <follow_path>:
c0003ad3:	56                   	push   esi
c0003ad4:	53                   	push   ebx
c0003ad5:	89 c3                	mov    ebx,eax
c0003ad7:	83 ec 14             	sub    esp,0x14
c0003ada:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ade:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ae0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ae4:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003ae7:	83 fa 5c             	cmp    edx,0x5c
c0003aea:	75 07                	jne    c0003af3 <follow_path+0x20>
c0003aec:	40                   	inc    eax
c0003aed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003af1:	eb ed                	jmp    c0003ae0 <follow_path+0xd>
c0003af3:	83 fa 2f             	cmp    edx,0x2f
c0003af6:	74 f4                	je     c0003aec <follow_path+0x19>
c0003af8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003aff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003b02:	77 3e                	ja     c0003b42 <follow_path+0x6f>
c0003b04:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003b08:	31 d2                	xor    edx,edx
c0003b0a:	89 d8                	mov    eax,ebx
c0003b0c:	e8 ff f8 ff ff       	call   c0003410 <dir_sdi>
c0003b11:	eb 4f                	jmp    c0003b62 <follow_path+0x8f>
c0003b13:	89 d8                	mov    eax,ebx
c0003b15:	e8 70 fe ff ff       	call   c000398a <dir_find>
c0003b1a:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003b1d:	85 c0                	test   eax,eax
c0003b1f:	75 32                	jne    c0003b53 <follow_path+0x80>
c0003b21:	80 e2 04             	and    dl,0x4
c0003b24:	75 3c                	jne    c0003b62 <follow_path+0x8f>
c0003b26:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003b2a:	74 31                	je     c0003b5d <follow_path+0x8a>
c0003b2c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b2f:	25 ff 01 00 00       	and    eax,0x1ff
c0003b34:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003b38:	8a 06                	mov    al,BYTE PTR [esi]
c0003b3a:	e8 7c f7 ff ff       	call   c00032bb <ld_clust.isra.0>
c0003b3f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003b42:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003b46:	89 d8                	mov    eax,ebx
c0003b48:	e8 7f ef ff ff       	call   c0002acc <create_name>
c0003b4d:	85 c0                	test   eax,eax
c0003b4f:	74 c2                	je     c0003b13 <follow_path+0x40>
c0003b51:	eb 0f                	jmp    c0003b62 <follow_path+0x8f>
c0003b53:	83 f8 04             	cmp    eax,0x4
c0003b56:	75 0a                	jne    c0003b62 <follow_path+0x8f>
c0003b58:	80 e2 04             	and    dl,0x4
c0003b5b:	75 05                	jne    c0003b62 <follow_path+0x8f>
c0003b5d:	b8 05 00 00 00       	mov    eax,0x5
c0003b62:	83 c4 14             	add    esp,0x14
c0003b65:	5b                   	pop    ebx
c0003b66:	5e                   	pop    esi
c0003b67:	c3                   	ret    

c0003b68 <dir_register>:
c0003b68:	55                   	push   ebp
c0003b69:	57                   	push   edi
c0003b6a:	56                   	push   esi
c0003b6b:	be 06 00 00 00       	mov    esi,0x6
c0003b70:	53                   	push   ebx
c0003b71:	83 ec 2c             	sub    esp,0x2c
c0003b74:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003b77:	80 e2 a0             	and    dl,0xa0
c0003b7a:	0f 85 66 01 00 00    	jne    c0003ce6 <dir_register+0x17e>
c0003b80:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b82:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003b8a:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003b8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003b91:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003b96:	74 06                	je     c0003b9e <dir_register+0x36>
c0003b98:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003b9c:	eb ef                	jmp    c0003b8d <dir_register+0x25>
c0003b9e:	89 c3                	mov    ebx,eax
c0003ba0:	b9 0c 00 00 00       	mov    ecx,0xc
c0003ba5:	8d 40 20             	lea    eax,[eax+0x20]
c0003ba8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003bac:	89 c2                	mov    edx,eax
c0003bae:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003bb2:	e8 44 e3 ff ff       	call   c0001efb <mem_cpy>
c0003bb7:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003bbc:	74 48                	je     c0003c06 <dir_register+0x9e>
c0003bbe:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003bc2:	bd 01 00 00 00       	mov    ebp,0x1
c0003bc7:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003bca:	55                   	push   ebp
c0003bcb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003bcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd3:	e8 86 e6 ff ff       	call   c000225e <gen_numname>
c0003bd8:	58                   	pop    eax
c0003bd9:	89 d8                	mov    eax,ebx
c0003bdb:	e8 aa fd ff ff       	call   c000398a <dir_find>
c0003be0:	89 c6                	mov    esi,eax
c0003be2:	85 c0                	test   eax,eax
c0003be4:	75 10                	jne    c0003bf6 <dir_register+0x8e>
c0003be6:	45                   	inc    ebp
c0003be7:	83 fd 64             	cmp    ebp,0x64
c0003bea:	75 db                	jne    c0003bc7 <dir_register+0x5f>
c0003bec:	be 07 00 00 00       	mov    esi,0x7
c0003bf1:	e9 f0 00 00 00       	jmp    c0003ce6 <dir_register+0x17e>
c0003bf6:	83 f8 04             	cmp    eax,0x4
c0003bf9:	0f 85 e7 00 00 00    	jne    c0003ce6 <dir_register+0x17e>
c0003bff:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003c03:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003c06:	bd 01 00 00 00       	mov    ebp,0x1
c0003c0b:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003c10:	74 13                	je     c0003c25 <dir_register+0xbd>
c0003c12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003c16:	b9 0d 00 00 00       	mov    ecx,0xd
c0003c1b:	83 c0 0c             	add    eax,0xc
c0003c1e:	31 d2                	xor    edx,edx
c0003c20:	f7 f1                	div    ecx
c0003c22:	8d 68 01             	lea    ebp,[eax+0x1]
c0003c25:	89 ea                	mov    edx,ebp
c0003c27:	89 d8                	mov    eax,ebx
c0003c29:	e8 7c fb ff ff       	call   c00037aa <dir_alloc>
c0003c2e:	89 c6                	mov    esi,eax
c0003c30:	85 c0                	test   eax,eax
c0003c32:	0f 85 ae 00 00 00    	jne    c0003ce6 <dir_register+0x17e>
c0003c38:	4d                   	dec    ebp
c0003c39:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003c3d:	74 67                	je     c0003ca6 <dir_register+0x13e>
c0003c3f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003c42:	89 e8                	mov    eax,ebp
c0003c44:	c1 e0 05             	shl    eax,0x5
c0003c47:	29 c2                	sub    edx,eax
c0003c49:	89 d8                	mov    eax,ebx
c0003c4b:	e8 c0 f7 ff ff       	call   c0003410 <dir_sdi>
c0003c50:	89 c6                	mov    esi,eax
c0003c52:	85 c0                	test   eax,eax
c0003c54:	0f 85 8c 00 00 00    	jne    c0003ce6 <dir_register+0x17e>
c0003c5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c5e:	e8 bd e6 ff ff       	call   c0002320 <sum_sfn>
c0003c63:	0f b6 e8             	movzx  ebp,al
c0003c66:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003c69:	89 f8                	mov    eax,edi
c0003c6b:	e8 c6 e7 ff ff       	call   c0002436 <move_window>
c0003c70:	89 c6                	mov    esi,eax
c0003c72:	85 c0                	test   eax,eax
c0003c74:	75 70                	jne    c0003ce6 <dir_register+0x17e>
c0003c76:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003c7b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003c7e:	83 ec 0c             	sub    esp,0xc
c0003c81:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003c84:	55                   	push   ebp
c0003c85:	e8 39 e5 ff ff       	call   c00021c3 <put_lfn>
c0003c8a:	31 d2                	xor    edx,edx
c0003c8c:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003c90:	89 d8                	mov    eax,ebx
c0003c92:	e8 0e fa ff ff       	call   c00036a5 <dir_next>
c0003c97:	83 c4 10             	add    esp,0x10
c0003c9a:	89 c6                	mov    esi,eax
c0003c9c:	85 c0                	test   eax,eax
c0003c9e:	75 46                	jne    c0003ce6 <dir_register+0x17e>
c0003ca0:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003ca4:	75 c0                	jne    c0003c66 <dir_register+0xfe>
c0003ca6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ca9:	89 f8                	mov    eax,edi
c0003cab:	e8 86 e7 ff ff       	call   c0002436 <move_window>
c0003cb0:	89 c6                	mov    esi,eax
c0003cb2:	85 c0                	test   eax,eax
c0003cb4:	75 30                	jne    c0003ce6 <dir_register+0x17e>
c0003cb6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003cb9:	b9 20 00 00 00       	mov    ecx,0x20
c0003cbe:	31 d2                	xor    edx,edx
c0003cc0:	e8 4b e2 ff ff       	call   c0001f10 <mem_set>
c0003cc5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003cc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ccc:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cd1:	e8 25 e2 ff ff       	call   c0001efb <mem_cpy>
c0003cd6:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003cd9:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003cdc:	83 e0 18             	and    eax,0x18
c0003cdf:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003ce2:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ce6:	83 c4 2c             	add    esp,0x2c
c0003ce9:	89 f0                	mov    eax,esi
c0003ceb:	5b                   	pop    ebx
c0003cec:	5e                   	pop    esi
c0003ced:	5f                   	pop    edi
c0003cee:	5d                   	pop    ebp
c0003cef:	c3                   	ret    

c0003cf0 <f_mount>:
c0003cf0:	53                   	push   ebx
c0003cf1:	83 ec 18             	sub    esp,0x18
c0003cf4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003cf8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003cfc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d00:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003d04:	e8 37 e6 ff ff       	call   c0002340 <get_ldnumber>
c0003d09:	89 c2                	mov    edx,eax
c0003d0b:	b8 0b 00 00 00       	mov    eax,0xb
c0003d10:	85 d2                	test   edx,edx
c0003d12:	78 39                	js     c0003d4d <f_mount+0x5d>
c0003d14:	8b 04 95 80 6c 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc9380]
c0003d1b:	85 c0                	test   eax,eax
c0003d1d:	74 03                	je     c0003d22 <f_mount+0x32>
c0003d1f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003d22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003d26:	85 c0                	test   eax,eax
c0003d28:	74 03                	je     c0003d2d <f_mount+0x3d>
c0003d2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003d2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003d31:	89 04 95 80 6c 03 c0 	mov    DWORD PTR [edx*4-0x3ffc9380],eax
c0003d38:	31 c0                	xor    eax,eax
c0003d3a:	84 db                	test   bl,bl
c0003d3c:	74 0f                	je     c0003d4d <f_mount+0x5d>
c0003d3e:	31 c9                	xor    ecx,ecx
c0003d40:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003d44:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003d48:	e8 3c e8 ff ff       	call   c0002589 <mount_volume>
c0003d4d:	83 c4 18             	add    esp,0x18
c0003d50:	5b                   	pop    ebx
c0003d51:	c3                   	ret    

c0003d52 <f_open>:
c0003d52:	55                   	push   ebp
c0003d53:	b8 09 00 00 00       	mov    eax,0x9
c0003d58:	57                   	push   edi
c0003d59:	56                   	push   esi
c0003d5a:	53                   	push   ebx
c0003d5b:	83 ec 5c             	sub    esp,0x5c
c0003d5e:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003d62:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003d66:	85 db                	test   ebx,ebx
c0003d68:	0f 84 9f 02 00 00    	je     c000400d <f_open+0x2bb>
c0003d6e:	89 fd                	mov    ebp,edi
c0003d70:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003d74:	83 e5 3f             	and    ebp,0x3f
c0003d77:	89 e8                	mov    eax,ebp
c0003d79:	89 ee                	mov    esi,ebp
c0003d7b:	0f b6 c8             	movzx  ecx,al
c0003d7e:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003d82:	e8 02 e8 ff ff       	call   c0002589 <mount_volume>
c0003d87:	85 c0                	test   eax,eax
c0003d89:	0f 85 78 02 00 00    	jne    c0004007 <f_open+0x2b5>
c0003d8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d93:	83 ec 0c             	sub    esp,0xc
c0003d96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d9a:	68 00 02 00 00       	push   0x200
c0003d9f:	e8 74 1f 00 00       	call   c0005d18 <ff_memalloc>
c0003da4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003da8:	83 c4 10             	add    esp,0x10
c0003dab:	b8 11 00 00 00       	mov    eax,0x11
c0003db0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003db5:	0f 84 52 02 00 00    	je     c000400d <f_open+0x2bb>
c0003dbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003dc3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003dc7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003dca:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003dce:	e8 00 fd ff ff       	call   c0003ad3 <follow_path>
c0003dd3:	85 c0                	test   eax,eax
c0003dd5:	75 0c                	jne    c0003de3 <f_open+0x91>
c0003dd7:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ddc:	74 05                	je     c0003de3 <f_open+0x91>
c0003dde:	b8 06 00 00 00       	mov    eax,0x6
c0003de3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003de9:	0f 84 d5 00 00 00    	je     c0003ec4 <f_open+0x172>
c0003def:	85 c0                	test   eax,eax
c0003df1:	74 21                	je     c0003e14 <f_open+0xc2>
c0003df3:	83 f8 04             	cmp    eax,0x4
c0003df6:	0f 85 f0 01 00 00    	jne    c0003fec <f_open+0x29a>
c0003dfc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003e00:	e8 63 fd ff ff       	call   c0003b68 <dir_register>
c0003e05:	85 c0                	test   eax,eax
c0003e07:	0f 85 df 01 00 00    	jne    c0003fec <f_open+0x29a>
c0003e0d:	83 cd 08             	or     ebp,0x8
c0003e10:	89 ee                	mov    esi,ebp
c0003e12:	eb 2c                	jmp    c0003e40 <f_open+0xee>
c0003e14:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003e18:	b8 07 00 00 00       	mov    eax,0x7
c0003e1d:	80 e2 11             	and    dl,0x11
c0003e20:	0f 85 c6 01 00 00    	jne    c0003fec <f_open+0x29a>
c0003e26:	b8 08 00 00 00       	mov    eax,0x8
c0003e2b:	f7 c7 04 00 00 00    	test   edi,0x4
c0003e31:	0f 85 b5 01 00 00    	jne    c0003fec <f_open+0x29a>
c0003e37:	83 e7 08             	and    edi,0x8
c0003e3a:	0f 84 b1 00 00 00    	je     c0003ef1 <f_open+0x19f>
c0003e40:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003e44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e48:	89 ea                	mov    edx,ebp
c0003e4a:	8a 00                	mov    al,BYTE PTR [eax]
c0003e4c:	e8 6a f4 ff ff       	call   c00032bb <ld_clust.isra.0>
c0003e51:	ba 00 00 21 50       	mov    edx,0x50210000
c0003e56:	89 c7                	mov    edi,eax
c0003e58:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003e5b:	e8 98 e0 ff ff       	call   c0001ef8 <st_dword>
c0003e60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003e64:	31 c9                	xor    ecx,ecx
c0003e66:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003e6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003e72:	e8 6d f4 ff ff       	call   c00032e4 <st_clust.isra.1>
c0003e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003e7b:	31 d2                	xor    edx,edx
c0003e7d:	83 c0 1c             	add    eax,0x1c
c0003e80:	e8 73 e0 ff ff       	call   c0001ef8 <st_dword>
c0003e85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e89:	85 ff                	test   edi,edi
c0003e8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003e8f:	74 60                	je     c0003ef1 <f_open+0x19f>
c0003e91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e95:	31 c9                	xor    ecx,ecx
c0003e97:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003e9a:	89 fa                	mov    edx,edi
c0003e9c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ea0:	e8 72 f7 ff ff       	call   c0003617 <remove_chain>
c0003ea5:	85 c0                	test   eax,eax
c0003ea7:	0f 85 3f 01 00 00    	jne    c0003fec <f_open+0x29a>
c0003ead:	89 ea                	mov    edx,ebp
c0003eaf:	4f                   	dec    edi
c0003eb0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb4:	e8 7d e5 ff ff       	call   c0002436 <move_window>
c0003eb9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ebd:	85 c0                	test   eax,eax
c0003ebf:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003ec2:	eb 27                	jmp    c0003eeb <f_open+0x199>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	0f 85 20 01 00 00    	jne    c0003fec <f_open+0x29a>
c0003ecc:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003ed0:	b8 04 00 00 00       	mov    eax,0x4
c0003ed5:	f6 c2 10             	test   dl,0x10
c0003ed8:	0f 85 0e 01 00 00    	jne    c0003fec <f_open+0x29a>
c0003ede:	83 e7 02             	and    edi,0x2
c0003ee1:	74 0e                	je     c0003ef1 <f_open+0x19f>
c0003ee3:	b8 07 00 00 00       	mov    eax,0x7
c0003ee8:	80 e2 01             	and    dl,0x1
c0003eeb:	0f 85 fb 00 00 00    	jne    c0003fec <f_open+0x29a>
c0003ef1:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ef7:	74 03                	je     c0003efc <f_open+0x1aa>
c0003ef9:	83 ce 40             	or     esi,0x40
c0003efc:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003f00:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003f04:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003f07:	89 fa                	mov    edx,edi
c0003f09:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003f0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003f0f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003f12:	e8 a4 f3 ff ff       	call   c00032bb <ld_clust.isra.0>
c0003f17:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003f1a:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003f1d:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003f20:	e8 b7 df ff ff       	call   c0001edc <ld_dword>
c0003f25:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003f27:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003f2a:	31 d2                	xor    edx,edx
c0003f2c:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003f30:	b9 00 02 00 00       	mov    ecx,0x200
c0003f35:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003f39:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003f3d:	89 f0                	mov    eax,esi
c0003f3f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003f46:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003f49:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003f50:	89 f8                	mov    eax,edi
c0003f52:	e8 b9 df ff ff       	call   c0001f10 <mem_set>
c0003f57:	83 e6 20             	and    esi,0x20
c0003f5a:	75 07                	jne    c0003f63 <f_open+0x211>
c0003f5c:	31 c0                	xor    eax,eax
c0003f5e:	e9 89 00 00 00       	jmp    c0003fec <f_open+0x29a>
c0003f63:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003f66:	85 ed                	test   ebp,ebp
c0003f68:	74 f2                	je     c0003f5c <f_open+0x20a>
c0003f6a:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003f6d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f71:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003f74:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003f78:	c1 e6 09             	shl    esi,0x9
c0003f7b:	39 ee                	cmp    esi,ebp
c0003f7d:	73 1c                	jae    c0003f9b <f_open+0x249>
c0003f7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f81:	29 f5                	sub    ebp,esi
c0003f83:	e8 84 f3 ff ff       	call   c000330c <get_fat.isra.2>
c0003f88:	89 c2                	mov    edx,eax
c0003f8a:	83 f8 01             	cmp    eax,0x1
c0003f8d:	76 10                	jbe    c0003f9f <f_open+0x24d>
c0003f8f:	83 f8 ff             	cmp    eax,0xffffffff
c0003f92:	75 e7                	jne    c0003f7b <f_open+0x229>
c0003f94:	b8 01 00 00 00       	mov    eax,0x1
c0003f99:	eb 09                	jmp    c0003fa4 <f_open+0x252>
c0003f9b:	31 c0                	xor    eax,eax
c0003f9d:	eb 05                	jmp    c0003fa4 <f_open+0x252>
c0003f9f:	b8 02 00 00 00       	mov    eax,0x2
c0003fa4:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003fa7:	85 c0                	test   eax,eax
c0003fa9:	75 41                	jne    c0003fec <f_open+0x29a>
c0003fab:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003fb1:	74 a9                	je     c0003f5c <f_open+0x20a>
c0003fb3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003fb7:	89 f0                	mov    eax,esi
c0003fb9:	e8 68 e1 ff ff       	call   c0002126 <clst2sect>
c0003fbe:	89 c2                	mov    edx,eax
c0003fc0:	b8 02 00 00 00       	mov    eax,0x2
c0003fc5:	85 d2                	test   edx,edx
c0003fc7:	74 23                	je     c0003fec <f_open+0x29a>
c0003fc9:	c1 ed 09             	shr    ebp,0x9
c0003fcc:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003fd0:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fd3:	6a 01                	push   0x1
c0003fd5:	50                   	push   eax
c0003fd6:	57                   	push   edi
c0003fd7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003fdb:	50                   	push   eax
c0003fdc:	e8 a3 de ff ff       	call   c0001e84 <disk_read>
c0003fe1:	83 c4 10             	add    esp,0x10
c0003fe4:	85 c0                	test   eax,eax
c0003fe6:	0f 95 c0             	setne  al
c0003fe9:	0f b6 c0             	movzx  eax,al
c0003fec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ff0:	83 ec 0c             	sub    esp,0xc
c0003ff3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003ff7:	e8 34 1d 00 00       	call   c0005d30 <ff_memfree>
c0003ffc:	83 c4 10             	add    esp,0x10
c0003fff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004003:	85 c0                	test   eax,eax
c0004005:	74 06                	je     c000400d <f_open+0x2bb>
c0004007:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000400d:	83 c4 5c             	add    esp,0x5c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <f_read>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	53                   	push   ebx
c0004019:	83 ec 2c             	sub    esp,0x2c
c000401c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004020:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004024:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000402a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000402e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004032:	89 d8                	mov    eax,ebx
c0004034:	e8 54 e3 ff ff       	call   c000238d <validate>
c0004039:	89 c5                	mov    ebp,eax
c000403b:	85 c0                	test   eax,eax
c000403d:	0f 85 c7 01 00 00    	jne    c000420a <f_read+0x1f5>
c0004043:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004047:	85 ed                	test   ebp,ebp
c0004049:	0f 85 bb 01 00 00    	jne    c000420a <f_read+0x1f5>
c000404f:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004053:	0f 84 ac 01 00 00    	je     c0004205 <f_read+0x1f0>
c0004059:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000405c:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c000405f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004063:	39 f0                	cmp    eax,esi
c0004065:	0f 86 b0 00 00 00    	jbe    c000411b <f_read+0x106>
c000406b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000406f:	e9 a7 00 00 00       	jmp    c000411b <f_read+0x106>
c0004074:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004077:	a9 ff 01 00 00       	test   eax,0x1ff
c000407c:	0f 85 56 01 00 00    	jne    c00041d8 <f_read+0x1c3>
c0004082:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004086:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000408a:	89 c2                	mov    edx,eax
c000408c:	4f                   	dec    edi
c000408d:	c1 ea 09             	shr    edx,0x9
c0004090:	21 d7                	and    edi,edx
c0004092:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004096:	0f 84 8f 00 00 00    	je     c000412b <f_read+0x116>
c000409c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00040a0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00040a3:	89 c8                	mov    eax,ecx
c00040a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a9:	e8 78 e0 ff ff       	call   c0002126 <clst2sect>
c00040ae:	85 c0                	test   eax,eax
c00040b0:	0f 84 8d 00 00 00    	je     c0004143 <f_read+0x12e>
c00040b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00040ba:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00040c2:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00040c5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040c9:	0f 86 bf 00 00 00    	jbe    c000418e <f_read+0x179>
c00040cf:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040d3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040d7:	c1 ee 09             	shr    esi,0x9
c00040da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040de:	01 f2                	add    edx,esi
c00040e0:	39 c2                	cmp    edx,eax
c00040e2:	76 06                	jbe    c00040ea <f_read+0xd5>
c00040e4:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040e8:	89 c6                	mov    esi,eax
c00040ea:	56                   	push   esi
c00040eb:	57                   	push   edi
c00040ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040f0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040f4:	50                   	push   eax
c00040f5:	e8 8a dd ff ff       	call   c0001e84 <disk_read>
c00040fa:	83 c4 10             	add    esp,0x10
c00040fd:	85 c0                	test   eax,eax
c00040ff:	75 55                	jne    c0004156 <f_read+0x141>
c0004101:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c0004105:	75 65                	jne    c000416c <f_read+0x157>
c0004107:	c1 e6 09             	shl    esi,0x9
c000410a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000410e:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004112:	01 30                	add    DWORD PTR [eax],esi
c0004114:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004118:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000411b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004120:	0f 85 4e ff ff ff    	jne    c0004074 <f_read+0x5f>
c0004126:	e9 df 00 00 00       	jmp    c000420a <f_read+0x1f5>
c000412b:	85 c0                	test   eax,eax
c000412d:	75 05                	jne    c0004134 <f_read+0x11f>
c000412f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004132:	eb 0a                	jmp    c000413e <f_read+0x129>
c0004134:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004137:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004139:	e8 ce f1 ff ff       	call   c000330c <get_fat.isra.2>
c000413e:	83 f8 01             	cmp    eax,0x1
c0004141:	77 0e                	ja     c0004151 <f_read+0x13c>
c0004143:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004147:	bd 02 00 00 00       	mov    ebp,0x2
c000414c:	e9 b9 00 00 00       	jmp    c000420a <f_read+0x1f5>
c0004151:	83 f8 ff             	cmp    eax,0xffffffff
c0004154:	75 0e                	jne    c0004164 <f_read+0x14f>
c0004156:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000415a:	bd 01 00 00 00       	mov    ebp,0x1
c000415f:	e9 a6 00 00 00       	jmp    c000420a <f_read+0x1f5>
c0004164:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004167:	e9 30 ff ff ff       	jmp    c000409c <f_read+0x87>
c000416c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000416f:	29 f8                	sub    eax,edi
c0004171:	39 f0                	cmp    eax,esi
c0004173:	73 92                	jae    c0004107 <f_read+0xf2>
c0004175:	c1 e0 09             	shl    eax,0x9
c0004178:	8d 53 28             	lea    edx,[ebx+0x28]
c000417b:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000417f:	b9 00 02 00 00       	mov    ecx,0x200
c0004184:	e8 72 dd ff ff       	call   c0001efb <mem_cpy>
c0004189:	e9 79 ff ff ff       	jmp    c0004107 <f_read+0xf2>
c000418e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004191:	39 f8                	cmp    eax,edi
c0004193:	74 40                	je     c00041d5 <f_read+0x1c0>
c0004195:	8d 73 28             	lea    esi,[ebx+0x28]
c0004198:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000419c:	74 1e                	je     c00041bc <f_read+0x1a7>
c000419e:	6a 01                	push   0x1
c00041a0:	50                   	push   eax
c00041a1:	56                   	push   esi
c00041a2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041a6:	50                   	push   eax
c00041a7:	e8 ee dc ff ff       	call   c0001e9a <disk_write>
c00041ac:	83 c4 10             	add    esp,0x10
c00041af:	85 c0                	test   eax,eax
c00041b1:	75 a3                	jne    c0004156 <f_read+0x141>
c00041b3:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00041b6:	83 e0 7f             	and    eax,0x7f
c00041b9:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00041bc:	6a 01                	push   0x1
c00041be:	57                   	push   edi
c00041bf:	56                   	push   esi
c00041c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041c8:	50                   	push   eax
c00041c9:	e8 b6 dc ff ff       	call   c0001e84 <disk_read>
c00041ce:	83 c4 10             	add    esp,0x10
c00041d1:	85 c0                	test   eax,eax
c00041d3:	75 81                	jne    c0004156 <f_read+0x141>
c00041d5:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	ba 00 02 00 00       	mov    edx,0x200
c00041e0:	25 ff 01 00 00       	and    eax,0x1ff
c00041e5:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041e9:	29 c2                	sub    edx,eax
c00041eb:	39 d6                	cmp    esi,edx
c00041ed:	76 02                	jbe    c00041f1 <f_read+0x1dc>
c00041ef:	89 d6                	mov    esi,edx
c00041f1:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00041f5:	89 f1                	mov    ecx,esi
c00041f7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00041fb:	e8 fb dc ff ff       	call   c0001efb <mem_cpy>
c0004200:	e9 05 ff ff ff       	jmp    c000410a <f_read+0xf5>
c0004205:	bd 07 00 00 00       	mov    ebp,0x7
c000420a:	83 c4 2c             	add    esp,0x2c
c000420d:	89 e8                	mov    eax,ebp
c000420f:	5b                   	pop    ebx
c0004210:	5e                   	pop    esi
c0004211:	5f                   	pop    edi
c0004212:	5d                   	pop    ebp
c0004213:	c3                   	ret    

c0004214 <f_write>:
c0004214:	55                   	push   ebp
c0004215:	57                   	push   edi
c0004216:	56                   	push   esi
c0004217:	53                   	push   ebx
c0004218:	83 ec 2c             	sub    esp,0x2c
c000421b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000421f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004223:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004229:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000422d:	89 d8                	mov    eax,ebx
c000422f:	e8 59 e1 ff ff       	call   c000238d <validate>
c0004234:	89 c5                	mov    ebp,eax
c0004236:	85 c0                	test   eax,eax
c0004238:	0f 85 14 02 00 00    	jne    c0004452 <f_write+0x23e>
c000423e:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004242:	85 ed                	test   ebp,ebp
c0004244:	0f 85 08 02 00 00    	jne    c0004452 <f_write+0x23e>
c000424a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000424e:	0f 84 f9 01 00 00    	je     c000444d <f_write+0x239>
c0004254:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004257:	89 c7                	mov    edi,eax
c0004259:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000425d:	0f 83 ef 00 00 00    	jae    c0004352 <f_write+0x13e>
c0004263:	f7 d0                	not    eax
c0004265:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004269:	e9 e4 00 00 00       	jmp    c0004352 <f_write+0x13e>
c000426e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004271:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004277:	0f 85 9a 01 00 00    	jne    c0004417 <f_write+0x203>
c000427d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004281:	89 d1                	mov    ecx,edx
c0004283:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004287:	c1 e9 09             	shr    ecx,0x9
c000428a:	48                   	dec    eax
c000428b:	21 c8                	and    eax,ecx
c000428d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004291:	0f 84 c8 00 00 00    	je     c000435f <f_write+0x14b>
c0004297:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000429b:	0f 85 22 01 00 00    	jne    c00043c3 <f_write+0x1af>
c00042a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00042a5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042a8:	89 c8                	mov    eax,ecx
c00042aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00042ae:	e8 73 de ff ff       	call   c0002126 <clst2sect>
c00042b3:	85 c0                	test   eax,eax
c00042b5:	0f 84 d2 00 00 00    	je     c000438d <f_write+0x179>
c00042bb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00042bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00042c3:	01 c7                	add    edi,eax
c00042c5:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00042cd:	0f 86 1c 01 00 00    	jbe    c00043ef <f_write+0x1db>
c00042d3:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00042d7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00042db:	c1 ee 09             	shr    esi,0x9
c00042de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042e2:	01 f2                	add    edx,esi
c00042e4:	39 c2                	cmp    edx,eax
c00042e6:	76 06                	jbe    c00042ee <f_write+0xda>
c00042e8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00042ec:	89 c6                	mov    esi,eax
c00042ee:	56                   	push   esi
c00042ef:	57                   	push   edi
c00042f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00042f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00042f8:	50                   	push   eax
c00042f9:	e8 9c db ff ff       	call   c0001e9a <disk_write>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	0f 85 97 00 00 00    	jne    c00043a0 <f_write+0x18c>
c0004309:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000430c:	29 fa                	sub    edx,edi
c000430e:	39 f2                	cmp    edx,esi
c0004310:	73 1d                	jae    c000432f <f_write+0x11b>
c0004312:	8d 43 28             	lea    eax,[ebx+0x28]
c0004315:	c1 e2 09             	shl    edx,0x9
c0004318:	b9 00 02 00 00       	mov    ecx,0x200
c000431d:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004321:	e8 d5 db ff ff       	call   c0001efb <mem_cpy>
c0004326:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004329:	83 e0 7f             	and    eax,0x7f
c000432c:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000432f:	c1 e6 09             	shl    esi,0x9
c0004332:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004336:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000433a:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000433e:	01 30                	add    DWORD PTR [eax],esi
c0004340:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004343:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004346:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004349:	39 f0                	cmp    eax,esi
c000434b:	73 02                	jae    c000434f <f_write+0x13b>
c000434d:	89 f0                	mov    eax,esi
c000434f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004352:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004357:	0f 85 11 ff ff ff    	jne    c000426e <f_write+0x5a>
c000435d:	eb 1b                	jmp    c000437a <f_write+0x166>
c000435f:	85 d2                	test   edx,edx
c0004361:	75 09                	jne    c000436c <f_write+0x158>
c0004363:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004366:	85 c0                	test   eax,eax
c0004368:	75 1e                	jne    c0004388 <f_write+0x174>
c000436a:	eb 03                	jmp    c000436f <f_write+0x15b>
c000436c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000436f:	89 d8                	mov    eax,ebx
c0004371:	e8 62 f1 ff ff       	call   c00034d8 <create_chain>
c0004376:	85 c0                	test   eax,eax
c0004378:	75 0e                	jne    c0004388 <f_write+0x174>
c000437a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000437d:	83 c8 40             	or     eax,0x40
c0004380:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004383:	e9 ca 00 00 00       	jmp    c0004452 <f_write+0x23e>
c0004388:	83 f8 01             	cmp    eax,0x1
c000438b:	75 0e                	jne    c000439b <f_write+0x187>
c000438d:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004391:	bd 02 00 00 00       	mov    ebp,0x2
c0004396:	e9 b7 00 00 00       	jmp    c0004452 <f_write+0x23e>
c000439b:	83 f8 ff             	cmp    eax,0xffffffff
c000439e:	75 0e                	jne    c00043ae <f_write+0x19a>
c00043a0:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043a4:	bd 01 00 00 00       	mov    ebp,0x1
c00043a9:	e9 a4 00 00 00       	jmp    c0004452 <f_write+0x23e>
c00043ae:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043b1:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043b5:	0f 85 dc fe ff ff    	jne    c0004297 <f_write+0x83>
c00043bb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043be:	e9 d4 fe ff ff       	jmp    c0004297 <f_write+0x83>
c00043c3:	6a 01                	push   0x1
c00043c5:	8d 43 28             	lea    eax,[ebx+0x28]
c00043c8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00043cb:	50                   	push   eax
c00043cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00043d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043d4:	50                   	push   eax
c00043d5:	e8 c0 da ff ff       	call   c0001e9a <disk_write>
c00043da:	83 c4 10             	add    esp,0x10
c00043dd:	85 c0                	test   eax,eax
c00043df:	75 bf                	jne    c00043a0 <f_write+0x18c>
c00043e1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043e4:	83 e0 7f             	and    eax,0x7f
c00043e7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043ea:	e9 b2 fe ff ff       	jmp    c00042a1 <f_write+0x8d>
c00043ef:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00043f2:	74 20                	je     c0004414 <f_write+0x200>
c00043f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00043f7:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00043fa:	76 18                	jbe    c0004414 <f_write+0x200>
c00043fc:	6a 01                	push   0x1
c00043fe:	8d 43 28             	lea    eax,[ebx+0x28]
c0004401:	57                   	push   edi
c0004402:	50                   	push   eax
c0004403:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004407:	50                   	push   eax
c0004408:	e8 77 da ff ff       	call   c0001e84 <disk_read>
c000440d:	83 c4 10             	add    esp,0x10
c0004410:	85 c0                	test   eax,eax
c0004412:	75 8c                	jne    c00043a0 <f_write+0x18c>
c0004414:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004417:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000441a:	ba 00 02 00 00       	mov    edx,0x200
c000441f:	25 ff 01 00 00       	and    eax,0x1ff
c0004424:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004428:	29 c2                	sub    edx,eax
c000442a:	39 d6                	cmp    esi,edx
c000442c:	76 02                	jbe    c0004430 <f_write+0x21c>
c000442e:	89 d6                	mov    esi,edx
c0004430:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004434:	89 f1                	mov    ecx,esi
c0004436:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000443a:	e8 bc da ff ff       	call   c0001efb <mem_cpy>
c000443f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004442:	83 c8 80             	or     eax,0xffffff80
c0004445:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004448:	e9 e5 fe ff ff       	jmp    c0004332 <f_write+0x11e>
c000444d:	bd 07 00 00 00       	mov    ebp,0x7
c0004452:	83 c4 2c             	add    esp,0x2c
c0004455:	89 e8                	mov    eax,ebp
c0004457:	5b                   	pop    ebx
c0004458:	5e                   	pop    esi
c0004459:	5f                   	pop    edi
c000445a:	5d                   	pop    ebp
c000445b:	c3                   	ret    

c000445c <f_sync>:
c000445c:	56                   	push   esi
c000445d:	53                   	push   ebx
c000445e:	83 ec 14             	sub    esp,0x14
c0004461:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004465:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004469:	89 d8                	mov    eax,ebx
c000446b:	e8 1d df ff ff       	call   c000238d <validate>
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 a3 00 00 00    	jne    c000451b <f_sync+0xbf>
c0004478:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000447b:	f6 c2 40             	test   dl,0x40
c000447e:	0f 84 97 00 00 00    	je     c000451b <f_sync+0xbf>
c0004484:	80 e2 80             	and    dl,0x80
c0004487:	74 2e                	je     c00044b7 <f_sync+0x5b>
c0004489:	6a 01                	push   0x1
c000448b:	8d 43 28             	lea    eax,[ebx+0x28]
c000448e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004491:	50                   	push   eax
c0004492:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004496:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000449a:	50                   	push   eax
c000449b:	e8 fa d9 ff ff       	call   c0001e9a <disk_write>
c00044a0:	83 c4 10             	add    esp,0x10
c00044a3:	89 c2                	mov    edx,eax
c00044a5:	b8 01 00 00 00       	mov    eax,0x1
c00044aa:	85 d2                	test   edx,edx
c00044ac:	75 6d                	jne    c000451b <f_sync+0xbf>
c00044ae:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044b1:	83 e0 7f             	and    eax,0x7f
c00044b4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044b7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00044ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00044be:	e8 73 df ff ff       	call   c0002436 <move_window>
c00044c3:	85 c0                	test   eax,eax
c00044c5:	75 54                	jne    c000451b <f_sync+0xbf>
c00044c7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00044ca:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00044cd:	89 f2                	mov    edx,esi
c00044cf:	83 c8 20             	or     eax,0x20
c00044d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00044d5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00044d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00044da:	e8 05 ee ff ff       	call   c00032e4 <st_clust.isra.1>
c00044df:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00044e2:	8d 46 1c             	lea    eax,[esi+0x1c]
c00044e5:	e8 0e da ff ff       	call   c0001ef8 <st_dword>
c00044ea:	8d 46 16             	lea    eax,[esi+0x16]
c00044ed:	ba 00 00 21 50       	mov    edx,0x50210000
c00044f2:	e8 01 da ff ff       	call   c0001ef8 <st_dword>
c00044f7:	31 d2                	xor    edx,edx
c00044f9:	8d 46 12             	lea    eax,[esi+0x12]
c00044fc:	e8 f3 d9 ff ff       	call   c0001ef4 <st_word>
c0004501:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004505:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004509:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000450d:	e8 5b e9 ff ff       	call   c0002e6d <sync_fs>
c0004512:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004515:	83 e2 bf             	and    edx,0xffffffbf
c0004518:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000451b:	83 c4 14             	add    esp,0x14
c000451e:	5b                   	pop    ebx
c000451f:	5e                   	pop    esi
c0004520:	c3                   	ret    

c0004521 <f_close>:
c0004521:	53                   	push   ebx
c0004522:	83 ec 24             	sub    esp,0x24
c0004525:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004529:	53                   	push   ebx
c000452a:	e8 2d ff ff ff       	call   c000445c <f_sync>
c000452f:	83 c4 10             	add    esp,0x10
c0004532:	85 c0                	test   eax,eax
c0004534:	75 15                	jne    c000454b <f_close+0x2a>
c0004536:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 4c de ff ff       	call   c000238d <validate>
c0004541:	85 c0                	test   eax,eax
c0004543:	75 06                	jne    c000454b <f_close+0x2a>
c0004545:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000454b:	83 c4 18             	add    esp,0x18
c000454e:	5b                   	pop    ebx
c000454f:	c3                   	ret    

c0004550 <f_lseek>:
c0004550:	55                   	push   ebp
c0004551:	57                   	push   edi
c0004552:	56                   	push   esi
c0004553:	53                   	push   ebx
c0004554:	83 ec 2c             	sub    esp,0x2c
c0004557:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000455b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000455f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004563:	89 d8                	mov    eax,ebx
c0004565:	e8 23 de ff ff       	call   c000238d <validate>
c000456a:	89 c5                	mov    ebp,eax
c000456c:	85 c0                	test   eax,eax
c000456e:	0f 85 83 01 00 00    	jne    c00046f7 <f_lseek+0x1a7>
c0004574:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004578:	85 ed                	test   ebp,ebp
c000457a:	0f 85 77 01 00 00    	jne    c00046f7 <f_lseek+0x1a7>
c0004580:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004583:	39 f0                	cmp    eax,esi
c0004585:	73 08                	jae    c000458f <f_lseek+0x3f>
c0004587:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000458b:	75 02                	jne    c000458f <f_lseek+0x3f>
c000458d:	89 c6                	mov    esi,eax
c000458f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004592:	85 f6                	test   esi,esi
c0004594:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000459b:	75 07                	jne    c00045a4 <f_lseek+0x54>
c000459d:	31 f6                	xor    esi,esi
c000459f:	e9 e2 00 00 00       	jmp    c0004686 <f_lseek+0x136>
c00045a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045a8:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00045ac:	c1 e7 09             	shl    edi,0x9
c00045af:	85 c9                	test   ecx,ecx
c00045b1:	74 28                	je     c00045db <f_lseek+0x8b>
c00045b3:	49                   	dec    ecx
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	8d 46 ff             	lea    eax,[esi-0x1]
c00045b9:	f7 f7                	div    edi
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00045c1:	89 c8                	mov    eax,ecx
c00045c3:	f7 f7                	div    edi
c00045c5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00045c9:	72 10                	jb     c00045db <f_lseek+0x8b>
c00045cb:	89 f8                	mov    eax,edi
c00045cd:	f7 d8                	neg    eax
c00045cf:	21 c1                	and    ecx,eax
c00045d1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00045d4:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00045d7:	29 ce                	sub    esi,ecx
c00045d9:	eb 3c                	jmp    c0004617 <f_lseek+0xc7>
c00045db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00045de:	85 c0                	test   eax,eax
c00045e0:	75 32                	jne    c0004614 <f_lseek+0xc4>
c00045e2:	31 d2                	xor    edx,edx
c00045e4:	89 d8                	mov    eax,ebx
c00045e6:	e8 ed ee ff ff       	call   c00034d8 <create_chain>
c00045eb:	83 f8 01             	cmp    eax,0x1
c00045ee:	75 0e                	jne    c00045fe <f_lseek+0xae>
c00045f0:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00045f4:	bd 02 00 00 00       	mov    ebp,0x2
c00045f9:	e9 f9 00 00 00       	jmp    c00046f7 <f_lseek+0x1a7>
c00045fe:	83 f8 ff             	cmp    eax,0xffffffff
c0004601:	75 0e                	jne    c0004611 <f_lseek+0xc1>
c0004603:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004607:	bd 01 00 00 00       	mov    ebp,0x1
c000460c:	e9 e6 00 00 00       	jmp    c00046f7 <f_lseek+0x1a7>
c0004611:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004614:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004617:	85 c0                	test   eax,eax
c0004619:	74 82                	je     c000459d <f_lseek+0x4d>
c000461b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000461e:	39 fe                	cmp    esi,edi
c0004620:	76 3d                	jbe    c000465f <f_lseek+0x10f>
c0004622:	01 fa                	add    edx,edi
c0004624:	29 fe                	sub    esi,edi
c0004626:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004629:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000462d:	89 c2                	mov    edx,eax
c000462f:	74 0d                	je     c000463e <f_lseek+0xee>
c0004631:	89 d8                	mov    eax,ebx
c0004633:	e8 a0 ee ff ff       	call   c00034d8 <create_chain>
c0004638:	85 c0                	test   eax,eax
c000463a:	75 09                	jne    c0004645 <f_lseek+0xf5>
c000463c:	eb 1f                	jmp    c000465d <f_lseek+0x10d>
c000463e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004640:	e8 c7 ec ff ff       	call   c000330c <get_fat.isra.2>
c0004645:	83 f8 ff             	cmp    eax,0xffffffff
c0004648:	74 b9                	je     c0004603 <f_lseek+0xb3>
c000464a:	83 f8 01             	cmp    eax,0x1
c000464d:	76 a1                	jbe    c00045f0 <f_lseek+0xa0>
c000464f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004653:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004656:	76 98                	jbe    c00045f0 <f_lseek+0xa0>
c0004658:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000465b:	eb be                	jmp    c000461b <f_lseek+0xcb>
c000465d:	31 f6                	xor    esi,esi
c000465f:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004662:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004668:	0f 84 2f ff ff ff    	je     c000459d <f_lseek+0x4d>
c000466e:	89 c2                	mov    edx,eax
c0004670:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004674:	e8 ad da ff ff       	call   c0002126 <clst2sect>
c0004679:	85 c0                	test   eax,eax
c000467b:	0f 84 6f ff ff ff    	je     c00045f0 <f_lseek+0xa0>
c0004681:	c1 ee 09             	shr    esi,0x9
c0004684:	01 c6                	add    esi,eax
c0004686:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004689:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000468c:	76 0c                	jbe    c000469a <f_lseek+0x14a>
c000468e:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004691:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004694:	83 ca 40             	or     edx,0x40
c0004697:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000469a:	a9 ff 01 00 00       	test   eax,0x1ff
c000469f:	74 56                	je     c00046f7 <f_lseek+0x1a7>
c00046a1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00046a4:	39 f0                	cmp    eax,esi
c00046a6:	74 4f                	je     c00046f7 <f_lseek+0x1a7>
c00046a8:	8d 7b 28             	lea    edi,[ebx+0x28]
c00046ab:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00046af:	74 26                	je     c00046d7 <f_lseek+0x187>
c00046b1:	6a 01                	push   0x1
c00046b3:	50                   	push   eax
c00046b4:	57                   	push   edi
c00046b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00046b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046bd:	50                   	push   eax
c00046be:	e8 d7 d7 ff ff       	call   c0001e9a <disk_write>
c00046c3:	83 c4 10             	add    esp,0x10
c00046c6:	85 c0                	test   eax,eax
c00046c8:	0f 85 35 ff ff ff    	jne    c0004603 <f_lseek+0xb3>
c00046ce:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00046d1:	83 e0 7f             	and    eax,0x7f
c00046d4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00046d7:	6a 01                	push   0x1
c00046d9:	56                   	push   esi
c00046da:	57                   	push   edi
c00046db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00046df:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00046e3:	50                   	push   eax
c00046e4:	e8 9b d7 ff ff       	call   c0001e84 <disk_read>
c00046e9:	83 c4 10             	add    esp,0x10
c00046ec:	85 c0                	test   eax,eax
c00046ee:	0f 85 0f ff ff ff    	jne    c0004603 <f_lseek+0xb3>
c00046f4:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00046f7:	83 c4 2c             	add    esp,0x2c
c00046fa:	89 e8                	mov    eax,ebp
c00046fc:	5b                   	pop    ebx
c00046fd:	5e                   	pop    esi
c00046fe:	5f                   	pop    edi
c00046ff:	5d                   	pop    ebp
c0004700:	c3                   	ret    

c0004701 <f_opendir>:
c0004701:	56                   	push   esi
c0004702:	b8 09 00 00 00       	mov    eax,0x9
c0004707:	53                   	push   ebx
c0004708:	83 ec 24             	sub    esp,0x24
c000470b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000470f:	85 db                	test   ebx,ebx
c0004711:	0f 84 af 00 00 00    	je     c00047c6 <f_opendir+0xc5>
c0004717:	31 c9                	xor    ecx,ecx
c0004719:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000471d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004721:	e8 63 de ff ff       	call   c0002589 <mount_volume>
c0004726:	85 c0                	test   eax,eax
c0004728:	0f 85 92 00 00 00    	jne    c00047c0 <f_opendir+0xbf>
c000472e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004732:	83 ec 0c             	sub    esp,0xc
c0004735:	89 03                	mov    DWORD PTR [ebx],eax
c0004737:	68 00 02 00 00       	push   0x200
c000473c:	e8 d7 15 00 00       	call   c0005d18 <ff_memalloc>
c0004741:	83 c4 10             	add    esp,0x10
c0004744:	89 c6                	mov    esi,eax
c0004746:	b8 11 00 00 00       	mov    eax,0x11
c000474b:	85 f6                	test   esi,esi
c000474d:	74 77                	je     c00047c6 <f_opendir+0xc5>
c000474f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004753:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004757:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000475a:	89 d8                	mov    eax,ebx
c000475c:	e8 72 f3 ff ff       	call   c0003ad3 <follow_path>
c0004761:	85 c0                	test   eax,eax
c0004763:	75 37                	jne    c000479c <f_opendir+0x9b>
c0004765:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004769:	75 1c                	jne    c0004787 <f_opendir+0x86>
c000476b:	b8 05 00 00 00       	mov    eax,0x5
c0004770:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004774:	74 26                	je     c000479c <f_opendir+0x9b>
c0004776:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004779:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000477d:	8a 00                	mov    al,BYTE PTR [eax]
c000477f:	e8 37 eb ff ff       	call   c00032bb <ld_clust.isra.0>
c0004784:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004787:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000478b:	31 d2                	xor    edx,edx
c000478d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004791:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004795:	89 d8                	mov    eax,ebx
c0004797:	e8 74 ec ff ff       	call   c0003410 <dir_sdi>
c000479c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00047a0:	83 ec 0c             	sub    esp,0xc
c00047a3:	56                   	push   esi
c00047a4:	e8 87 15 00 00       	call   c0005d30 <ff_memfree>
c00047a9:	83 c4 10             	add    esp,0x10
c00047ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00047b0:	83 f8 04             	cmp    eax,0x4
c00047b3:	74 06                	je     c00047bb <f_opendir+0xba>
c00047b5:	85 c0                	test   eax,eax
c00047b7:	74 0d                	je     c00047c6 <f_opendir+0xc5>
c00047b9:	eb 05                	jmp    c00047c0 <f_opendir+0xbf>
c00047bb:	b8 05 00 00 00       	mov    eax,0x5
c00047c0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047c6:	83 c4 24             	add    esp,0x24
c00047c9:	5b                   	pop    ebx
c00047ca:	5e                   	pop    esi
c00047cb:	c3                   	ret    

c00047cc <f_closedir>:
c00047cc:	53                   	push   ebx
c00047cd:	83 ec 18             	sub    esp,0x18
c00047d0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047d4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d8:	89 d8                	mov    eax,ebx
c00047da:	e8 ae db ff ff       	call   c000238d <validate>
c00047df:	85 c0                	test   eax,eax
c00047e1:	75 06                	jne    c00047e9 <f_closedir+0x1d>
c00047e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00047e9:	83 c4 18             	add    esp,0x18
c00047ec:	5b                   	pop    ebx
c00047ed:	c3                   	ret    

c00047ee <f_readdir>:
c00047ee:	57                   	push   edi
c00047ef:	56                   	push   esi
c00047f0:	53                   	push   ebx
c00047f1:	83 ec 20             	sub    esp,0x20
c00047f4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00047f8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00047fc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004800:	89 d8                	mov    eax,ebx
c0004802:	e8 86 db ff ff       	call   c000238d <validate>
c0004807:	85 c0                	test   eax,eax
c0004809:	75 6e                	jne    c0004879 <f_readdir+0x8b>
c000480b:	85 ff                	test   edi,edi
c000480d:	75 0b                	jne    c000481a <f_readdir+0x2c>
c000480f:	31 d2                	xor    edx,edx
c0004811:	89 d8                	mov    eax,ebx
c0004813:	e8 f8 eb ff ff       	call   c0003410 <dir_sdi>
c0004818:	eb 5f                	jmp    c0004879 <f_readdir+0x8b>
c000481a:	83 ec 0c             	sub    esp,0xc
c000481d:	68 00 02 00 00       	push   0x200
c0004822:	e8 f1 14 00 00       	call   c0005d18 <ff_memalloc>
c0004827:	83 c4 10             	add    esp,0x10
c000482a:	89 c6                	mov    esi,eax
c000482c:	b8 11 00 00 00       	mov    eax,0x11
c0004831:	85 f6                	test   esi,esi
c0004833:	74 44                	je     c0004879 <f_readdir+0x8b>
c0004835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004839:	31 d2                	xor    edx,edx
c000483b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000483e:	89 d8                	mov    eax,ebx
c0004840:	e8 ca ef ff ff       	call   c000380f <dir_read>
c0004845:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000484a:	75 19                	jne    c0004865 <f_readdir+0x77>
c000484c:	89 fa                	mov    edx,edi
c000484e:	89 d8                	mov    eax,ebx
c0004850:	e8 70 e8 ff ff       	call   c00030c5 <get_fileinfo>
c0004855:	31 d2                	xor    edx,edx
c0004857:	89 d8                	mov    eax,ebx
c0004859:	e8 47 ee ff ff       	call   c00036a5 <dir_next>
c000485e:	83 f8 04             	cmp    eax,0x4
c0004861:	75 02                	jne    c0004865 <f_readdir+0x77>
c0004863:	31 c0                	xor    eax,eax
c0004865:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	56                   	push   esi
c000486d:	e8 be 14 00 00       	call   c0005d30 <ff_memfree>
c0004872:	83 c4 10             	add    esp,0x10
c0004875:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004879:	83 c4 20             	add    esp,0x20
c000487c:	5b                   	pop    ebx
c000487d:	5e                   	pop    esi
c000487e:	5f                   	pop    edi
c000487f:	c3                   	ret    

c0004880 <f_stat>:
c0004880:	57                   	push   edi
c0004881:	31 c9                	xor    ecx,ecx
c0004883:	56                   	push   esi
c0004884:	53                   	push   ebx
c0004885:	83 ec 30             	sub    esp,0x30
c0004888:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000488c:	89 e2                	mov    edx,esp
c000488e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004892:	e8 f2 dc ff ff       	call   c0002589 <mount_volume>
c0004897:	89 c3                	mov    ebx,eax
c0004899:	85 c0                	test   eax,eax
c000489b:	75 59                	jne    c00048f6 <f_stat+0x76>
c000489d:	83 ec 0c             	sub    esp,0xc
c00048a0:	bb 11 00 00 00       	mov    ebx,0x11
c00048a5:	68 00 02 00 00       	push   0x200
c00048aa:	e8 69 14 00 00       	call   c0005d18 <ff_memalloc>
c00048af:	83 c4 10             	add    esp,0x10
c00048b2:	89 c6                	mov    esi,eax
c00048b4:	85 c0                	test   eax,eax
c00048b6:	74 3e                	je     c00048f6 <f_stat+0x76>
c00048b8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048bb:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00048bf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00048c2:	89 e0                	mov    eax,esp
c00048c4:	e8 0a f2 ff ff       	call   c0003ad3 <follow_path>
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	85 c0                	test   eax,eax
c00048cd:	75 1b                	jne    c00048ea <f_stat+0x6a>
c00048cf:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00048d4:	75 0f                	jne    c00048e5 <f_stat+0x65>
c00048d6:	85 ff                	test   edi,edi
c00048d8:	74 10                	je     c00048ea <f_stat+0x6a>
c00048da:	89 fa                	mov    edx,edi
c00048dc:	89 e0                	mov    eax,esp
c00048de:	e8 e2 e7 ff ff       	call   c00030c5 <get_fileinfo>
c00048e3:	eb 05                	jmp    c00048ea <f_stat+0x6a>
c00048e5:	bb 06 00 00 00       	mov    ebx,0x6
c00048ea:	83 ec 0c             	sub    esp,0xc
c00048ed:	56                   	push   esi
c00048ee:	e8 3d 14 00 00       	call   c0005d30 <ff_memfree>
c00048f3:	83 c4 10             	add    esp,0x10
c00048f6:	83 c4 30             	add    esp,0x30
c00048f9:	89 d8                	mov    eax,ebx
c00048fb:	5b                   	pop    ebx
c00048fc:	5e                   	pop    esi
c00048fd:	5f                   	pop    edi
c00048fe:	c3                   	ret    

c00048ff <f_getfree>:
c00048ff:	55                   	push   ebp
c0004900:	31 c9                	xor    ecx,ecx
c0004902:	57                   	push   edi
c0004903:	56                   	push   esi
c0004904:	53                   	push   ebx
c0004905:	83 ec 2c             	sub    esp,0x2c
c0004908:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000490c:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004910:	e8 74 dc ff ff       	call   c0002589 <mount_volume>
c0004915:	89 c7                	mov    edi,eax
c0004917:	85 c0                	test   eax,eax
c0004919:	0f 85 df 00 00 00    	jne    c00049fe <f_getfree+0xff>
c000491f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004923:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004927:	89 30                	mov    DWORD PTR [eax],esi
c0004929:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000492c:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c000492f:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004932:	39 d0                	cmp    eax,edx
c0004934:	77 0b                	ja     c0004941 <f_getfree+0x42>
c0004936:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000493a:	89 01                	mov    DWORD PTR [ecx],eax
c000493c:	e9 bd 00 00 00       	jmp    c00049fe <f_getfree+0xff>
c0004941:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004944:	75 29                	jne    c000496f <f_getfree+0x70>
c0004946:	bd 02 00 00 00       	mov    ebp,0x2
c000494b:	31 db                	xor    ebx,ebx
c000494d:	89 ea                	mov    edx,ebp
c000494f:	89 f0                	mov    eax,esi
c0004951:	e8 b6 e9 ff ff       	call   c000330c <get_fat.isra.2>
c0004956:	83 f8 ff             	cmp    eax,0xffffffff
c0004959:	74 7d                	je     c00049d8 <f_getfree+0xd9>
c000495b:	83 f8 01             	cmp    eax,0x1
c000495e:	74 7f                	je     c00049df <f_getfree+0xe0>
c0004960:	83 d3 00             	adc    ebx,0x0
c0004963:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004967:	45                   	inc    ebp
c0004968:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c000496b:	77 e0                	ja     c000494d <f_getfree+0x4e>
c000496d:	eb 79                	jmp    c00049e8 <f_getfree+0xe9>
c000496f:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004972:	31 db                	xor    ebx,ebx
c0004974:	31 f6                	xor    esi,esi
c0004976:	85 f6                	test   esi,esi
c0004978:	75 18                	jne    c0004992 <f_getfree+0x93>
c000497a:	8d 42 01             	lea    eax,[edx+0x1]
c000497d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004985:	e8 ac da ff ff       	call   c0002436 <move_window>
c000498a:	85 c0                	test   eax,eax
c000498c:	75 58                	jne    c00049e6 <f_getfree+0xe7>
c000498e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004992:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004996:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000499a:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c000499e:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00049a1:	75 13                	jne    c00049b6 <f_getfree+0xb7>
c00049a3:	e8 27 d5 ff ff       	call   c0001ecf <ld_word>
c00049a8:	0f b7 c0             	movzx  eax,ax
c00049ab:	83 f8 01             	cmp    eax,0x1
c00049ae:	83 d3 00             	adc    ebx,0x0
c00049b1:	83 c6 02             	add    esi,0x2
c00049b4:	eb 13                	jmp    c00049c9 <f_getfree+0xca>
c00049b6:	e8 21 d5 ff ff       	call   c0001edc <ld_dword>
c00049bb:	25 ff ff ff 0f       	and    eax,0xfffffff
c00049c0:	83 f8 01             	cmp    eax,0x1
c00049c3:	83 d3 00             	adc    ebx,0x0
c00049c6:	83 c6 04             	add    esi,0x4
c00049c9:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00049cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00049d3:	4d                   	dec    ebp
c00049d4:	75 a0                	jne    c0004976 <f_getfree+0x77>
c00049d6:	eb 10                	jmp    c00049e8 <f_getfree+0xe9>
c00049d8:	bf 01 00 00 00       	mov    edi,0x1
c00049dd:	eb 09                	jmp    c00049e8 <f_getfree+0xe9>
c00049df:	bf 02 00 00 00       	mov    edi,0x2
c00049e4:	eb 02                	jmp    c00049e8 <f_getfree+0xe9>
c00049e6:	89 c7                	mov    edi,eax
c00049e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00049ec:	89 18                	mov    DWORD PTR [eax],ebx
c00049ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00049f2:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00049f5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00049f8:	83 ca 01             	or     edx,0x1
c00049fb:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c00049fe:	83 c4 2c             	add    esp,0x2c
c0004a01:	89 f8                	mov    eax,edi
c0004a03:	5b                   	pop    ebx
c0004a04:	5e                   	pop    esi
c0004a05:	5f                   	pop    edi
c0004a06:	5d                   	pop    ebp
c0004a07:	c3                   	ret    

c0004a08 <f_truncate>:
c0004a08:	56                   	push   esi
c0004a09:	53                   	push   ebx
c0004a0a:	83 ec 14             	sub    esp,0x14
c0004a0d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004a11:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004a15:	89 d8                	mov    eax,ebx
c0004a17:	e8 71 d9 ff ff       	call   c000238d <validate>
c0004a1c:	89 c6                	mov    esi,eax
c0004a1e:	85 c0                	test   eax,eax
c0004a20:	0f 85 c4 00 00 00    	jne    c0004aea <f_truncate+0xe2>
c0004a26:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004a2a:	85 f6                	test   esi,esi
c0004a2c:	0f 85 b8 00 00 00    	jne    c0004aea <f_truncate+0xe2>
c0004a32:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004a36:	0f 84 a9 00 00 00    	je     c0004ae5 <f_truncate+0xdd>
c0004a3c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004a3f:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004a42:	0f 83 a2 00 00 00    	jae    c0004aea <f_truncate+0xe2>
c0004a48:	85 c0                	test   eax,eax
c0004a4a:	75 15                	jne    c0004a61 <f_truncate+0x59>
c0004a4c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004a4f:	31 c9                	xor    ecx,ecx
c0004a51:	89 d8                	mov    eax,ebx
c0004a53:	e8 bf eb ff ff       	call   c0003617 <remove_chain>
c0004a58:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004a5f:	eb 35                	jmp    c0004a96 <f_truncate+0x8e>
c0004a61:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004a64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004a66:	e8 a1 e8 ff ff       	call   c000330c <get_fat.isra.2>
c0004a6b:	89 c2                	mov    edx,eax
c0004a6d:	b8 01 00 00 00       	mov    eax,0x1
c0004a72:	83 fa ff             	cmp    edx,0xffffffff
c0004a75:	74 1f                	je     c0004a96 <f_truncate+0x8e>
c0004a77:	b8 02 00 00 00       	mov    eax,0x2
c0004a7c:	83 fa 01             	cmp    edx,0x1
c0004a7f:	74 15                	je     c0004a96 <f_truncate+0x8e>
c0004a81:	31 c0                	xor    eax,eax
c0004a83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004a87:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004a8a:	76 0a                	jbe    c0004a96 <f_truncate+0x8e>
c0004a8c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004a8f:	89 d8                	mov    eax,ebx
c0004a91:	e8 81 eb ff ff       	call   c0003617 <remove_chain>
c0004a96:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004a99:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004a9c:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004a9f:	83 ca 40             	or     edx,0x40
c0004aa2:	85 c0                	test   eax,eax
c0004aa4:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004aa7:	75 35                	jne    c0004ade <f_truncate+0xd6>
c0004aa9:	80 e2 80             	and    dl,0x80
c0004aac:	74 3c                	je     c0004aea <f_truncate+0xe2>
c0004aae:	6a 01                	push   0x1
c0004ab0:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ab3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ab6:	50                   	push   eax
c0004ab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004abb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004abf:	50                   	push   eax
c0004ac0:	e8 d5 d3 ff ff       	call   c0001e9a <disk_write>
c0004ac5:	83 c4 10             	add    esp,0x10
c0004ac8:	85 c0                	test   eax,eax
c0004aca:	75 0d                	jne    c0004ad9 <f_truncate+0xd1>
c0004acc:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004acf:	31 f6                	xor    esi,esi
c0004ad1:	83 e0 7f             	and    eax,0x7f
c0004ad4:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004ad7:	eb 11                	jmp    c0004aea <f_truncate+0xe2>
c0004ad9:	b8 01 00 00 00       	mov    eax,0x1
c0004ade:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004ae1:	89 c6                	mov    esi,eax
c0004ae3:	eb 05                	jmp    c0004aea <f_truncate+0xe2>
c0004ae5:	be 07 00 00 00       	mov    esi,0x7
c0004aea:	89 f0                	mov    eax,esi
c0004aec:	83 c4 14             	add    esp,0x14
c0004aef:	5b                   	pop    ebx
c0004af0:	5e                   	pop    esi
c0004af1:	c3                   	ret    

c0004af2 <f_unlink>:
c0004af2:	55                   	push   ebp
c0004af3:	b9 02 00 00 00       	mov    ecx,0x2
c0004af8:	57                   	push   edi
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b05:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004b0c:	e8 78 da ff ff       	call   c0002589 <mount_volume>
c0004b11:	85 c0                	test   eax,eax
c0004b13:	0f 85 f0 00 00 00    	jne    c0004c09 <f_unlink+0x117>
c0004b19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b1d:	83 ec 0c             	sub    esp,0xc
c0004b20:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004b24:	68 00 02 00 00       	push   0x200
c0004b29:	e8 ea 11 00 00       	call   c0005d18 <ff_memalloc>
c0004b2e:	83 c4 10             	add    esp,0x10
c0004b31:	89 c3                	mov    ebx,eax
c0004b33:	b8 11 00 00 00       	mov    eax,0x11
c0004b38:	85 db                	test   ebx,ebx
c0004b3a:	0f 84 c9 00 00 00    	je     c0004c09 <f_unlink+0x117>
c0004b40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b44:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004b4b:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004b4e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b52:	e8 7c ef ff ff       	call   c0003ad3 <follow_path>
c0004b57:	85 c0                	test   eax,eax
c0004b59:	0f 85 96 00 00 00    	jne    c0004bf5 <f_unlink+0x103>
c0004b5f:	b8 06 00 00 00       	mov    eax,0x6
c0004b64:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004b69:	0f 85 86 00 00 00    	jne    c0004bf5 <f_unlink+0x103>
c0004b6f:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004b74:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004b7a:	74 07                	je     c0004b83 <f_unlink+0x91>
c0004b7c:	b8 07 00 00 00       	mov    eax,0x7
c0004b81:	eb 72                	jmp    c0004bf5 <f_unlink+0x103>
c0004b83:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004b87:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b8b:	8a 07                	mov    al,BYTE PTR [edi]
c0004b8d:	e8 29 e7 ff ff       	call   c00032bb <ld_clust.isra.0>
c0004b92:	83 e5 10             	and    ebp,0x10
c0004b95:	89 c6                	mov    esi,eax
c0004b97:	75 0f                	jne    c0004ba8 <f_unlink+0xb6>
c0004b99:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b9d:	e8 95 ed ff ff       	call   c0003937 <dir_remove>
c0004ba2:	85 c0                	test   eax,eax
c0004ba4:	74 2f                	je     c0004bd5 <f_unlink+0xe3>
c0004ba6:	eb 4d                	jmp    c0004bf5 <f_unlink+0x103>
c0004ba8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004bac:	31 d2                	xor    edx,edx
c0004bae:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004bb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004bb6:	e8 55 e8 ff ff       	call   c0003410 <dir_sdi>
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	75 36                	jne    c0004bf5 <f_unlink+0x103>
c0004bbf:	31 d2                	xor    edx,edx
c0004bc1:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004bc5:	e8 45 ec ff ff       	call   c000380f <dir_read>
c0004bca:	85 c0                	test   eax,eax
c0004bcc:	74 ae                	je     c0004b7c <f_unlink+0x8a>
c0004bce:	83 f8 04             	cmp    eax,0x4
c0004bd1:	75 22                	jne    c0004bf5 <f_unlink+0x103>
c0004bd3:	eb c4                	jmp    c0004b99 <f_unlink+0xa7>
c0004bd5:	85 f6                	test   esi,esi
c0004bd7:	75 0b                	jne    c0004be4 <f_unlink+0xf2>
c0004bd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bdd:	e8 8b e2 ff ff       	call   c0002e6d <sync_fs>
c0004be2:	eb 11                	jmp    c0004bf5 <f_unlink+0x103>
c0004be4:	31 c9                	xor    ecx,ecx
c0004be6:	89 f2                	mov    edx,esi
c0004be8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bec:	e8 26 ea ff ff       	call   c0003617 <remove_chain>
c0004bf1:	85 c0                	test   eax,eax
c0004bf3:	74 e4                	je     c0004bd9 <f_unlink+0xe7>
c0004bf5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bf9:	83 ec 0c             	sub    esp,0xc
c0004bfc:	53                   	push   ebx
c0004bfd:	e8 2e 11 00 00       	call   c0005d30 <ff_memfree>
c0004c02:	83 c4 10             	add    esp,0x10
c0004c05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c09:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004c0f:	5b                   	pop    ebx
c0004c10:	5e                   	pop    esi
c0004c11:	5f                   	pop    edi
c0004c12:	5d                   	pop    ebp
c0004c13:	c3                   	ret    

c0004c14 <f_mkdir>:
c0004c14:	57                   	push   edi
c0004c15:	b9 02 00 00 00       	mov    ecx,0x2
c0004c1a:	56                   	push   esi
c0004c1b:	53                   	push   ebx
c0004c1c:	83 ec 50             	sub    esp,0x50
c0004c1f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c23:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004c27:	e8 5d d9 ff ff       	call   c0002589 <mount_volume>
c0004c2c:	89 c3                	mov    ebx,eax
c0004c2e:	85 c0                	test   eax,eax
c0004c30:	0f 85 70 01 00 00    	jne    c0004da6 <f_mkdir+0x192>
c0004c36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c3a:	bb 11 00 00 00       	mov    ebx,0x11
c0004c3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004c43:	83 ec 0c             	sub    esp,0xc
c0004c46:	68 00 02 00 00       	push   0x200
c0004c4b:	e8 c8 10 00 00       	call   c0005d18 <ff_memalloc>
c0004c50:	83 c4 10             	add    esp,0x10
c0004c53:	89 c7                	mov    edi,eax
c0004c55:	85 c0                	test   eax,eax
c0004c57:	0f 84 49 01 00 00    	je     c0004da6 <f_mkdir+0x192>
c0004c5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c61:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004c65:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004c68:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c6c:	e8 62 ee ff ff       	call   c0003ad3 <follow_path>
c0004c71:	89 c3                	mov    ebx,eax
c0004c73:	85 c0                	test   eax,eax
c0004c75:	74 3e                	je     c0004cb5 <f_mkdir+0xa1>
c0004c77:	83 f8 04             	cmp    eax,0x4
c0004c7a:	75 3e                	jne    c0004cba <f_mkdir+0xa6>
c0004c7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c80:	31 d2                	xor    edx,edx
c0004c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004c86:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004c8a:	e8 49 e8 ff ff       	call   c00034d8 <create_chain>
c0004c8f:	89 c6                	mov    esi,eax
c0004c91:	85 c0                	test   eax,eax
c0004c93:	74 0c                	je     c0004ca1 <f_mkdir+0x8d>
c0004c95:	bb 02 00 00 00       	mov    ebx,0x2
c0004c9a:	83 f8 01             	cmp    eax,0x1
c0004c9d:	74 07                	je     c0004ca6 <f_mkdir+0x92>
c0004c9f:	eb 2a                	jmp    c0004ccb <f_mkdir+0xb7>
c0004ca1:	bb 07 00 00 00       	mov    ebx,0x7
c0004ca6:	31 c9                	xor    ecx,ecx
c0004ca8:	89 f2                	mov    edx,esi
c0004caa:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004cae:	e8 64 e9 ff ff       	call   c0003617 <remove_chain>
c0004cb3:	eb 05                	jmp    c0004cba <f_mkdir+0xa6>
c0004cb5:	bb 08 00 00 00       	mov    ebx,0x8
c0004cba:	83 ec 0c             	sub    esp,0xc
c0004cbd:	57                   	push   edi
c0004cbe:	e8 6d 10 00 00       	call   c0005d30 <ff_memfree>
c0004cc3:	83 c4 10             	add    esp,0x10
c0004cc6:	e9 db 00 00 00       	jmp    c0004da6 <f_mkdir+0x192>
c0004ccb:	bb 01 00 00 00       	mov    ebx,0x1
c0004cd0:	83 f8 ff             	cmp    eax,0xffffffff
c0004cd3:	74 d1                	je     c0004ca6 <f_mkdir+0x92>
c0004cd5:	89 f2                	mov    edx,esi
c0004cd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cdb:	e8 f1 dc ff ff       	call   c00029d1 <dir_clear>
c0004ce0:	89 c3                	mov    ebx,eax
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	75 c0                	jne    c0004ca6 <f_mkdir+0x92>
c0004ce6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cef:	ba 20 00 00 00       	mov    edx,0x20
c0004cf4:	83 c0 34             	add    eax,0x34
c0004cf7:	e8 14 d2 ff ff       	call   c0001f10 <mem_set>
c0004cfc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d00:	ba 00 00 21 50       	mov    edx,0x50210000
c0004d05:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004d09:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004d0d:	83 c0 4a             	add    eax,0x4a
c0004d10:	e8 e3 d1 ff ff       	call   c0001ef8 <st_dword>
c0004d15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d19:	89 f1                	mov    ecx,esi
c0004d1b:	8d 50 34             	lea    edx,[eax+0x34]
c0004d1e:	e8 c1 e5 ff ff       	call   c00032e4 <st_clust.isra.1>
c0004d23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d27:	b9 20 00 00 00       	mov    ecx,0x20
c0004d2c:	8d 50 34             	lea    edx,[eax+0x34]
c0004d2f:	83 c0 54             	add    eax,0x54
c0004d32:	e8 c4 d1 ff ff       	call   c0001efb <mem_cpy>
c0004d37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d3b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004d3f:	8d 50 54             	lea    edx,[eax+0x54]
c0004d42:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004d46:	e8 99 e5 ff ff       	call   c00032e4 <st_clust.isra.1>
c0004d4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d4f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d53:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d57:	e8 0c ee ff ff       	call   c0003b68 <dir_register>
c0004d5c:	89 c3                	mov    ebx,eax
c0004d5e:	85 c0                	test   eax,eax
c0004d60:	0f 85 40 ff ff ff    	jne    c0004ca6 <f_mkdir+0x92>
c0004d66:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6a:	ba 00 00 21 50       	mov    edx,0x50210000
c0004d6f:	83 c0 16             	add    eax,0x16
c0004d72:	e8 81 d1 ff ff       	call   c0001ef8 <st_dword>
c0004d77:	89 f1                	mov    ecx,esi
c0004d79:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004d7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d81:	e8 5e e5 ff ff       	call   c00032e4 <st_clust.isra.1>
c0004d86:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004d8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9a:	e8 ce e0 ff ff       	call   c0002e6d <sync_fs>
c0004d9f:	89 c3                	mov    ebx,eax
c0004da1:	e9 14 ff ff ff       	jmp    c0004cba <f_mkdir+0xa6>
c0004da6:	83 c4 50             	add    esp,0x50
c0004da9:	89 d8                	mov    eax,ebx
c0004dab:	5b                   	pop    ebx
c0004dac:	5e                   	pop    esi
c0004dad:	5f                   	pop    edi
c0004dae:	c3                   	ret    

c0004daf <f_rename>:
c0004daf:	57                   	push   edi
c0004db0:	56                   	push   esi
c0004db1:	53                   	push   ebx
c0004db2:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004db8:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004dbf:	e8 7c d5 ff ff       	call   c0002340 <get_ldnumber>
c0004dc4:	b9 02 00 00 00       	mov    ecx,0x2
c0004dc9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dcd:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004dd4:	e8 b0 d7 ff ff       	call   c0002589 <mount_volume>
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	0f 85 7c 01 00 00    	jne    c0004f5d <f_rename+0x1ae>
c0004de1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004de5:	83 ec 0c             	sub    esp,0xc
c0004de8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004dec:	68 00 02 00 00       	push   0x200
c0004df1:	e8 22 0f 00 00       	call   c0005d18 <ff_memalloc>
c0004df6:	83 c4 10             	add    esp,0x10
c0004df9:	89 c6                	mov    esi,eax
c0004dfb:	b8 11 00 00 00       	mov    eax,0x11
c0004e00:	85 f6                	test   esi,esi
c0004e02:	0f 84 55 01 00 00    	je     c0004f5d <f_rename+0x1ae>
c0004e08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e0c:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004e13:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004e16:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e1a:	e8 b4 ec ff ff       	call   c0003ad3 <follow_path>
c0004e1f:	85 c0                	test   eax,eax
c0004e21:	0f 85 22 01 00 00    	jne    c0004f49 <f_rename+0x19a>
c0004e27:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004e2b:	b8 06 00 00 00       	mov    eax,0x6
c0004e30:	80 e2 a0             	and    dl,0xa0
c0004e33:	0f 85 10 01 00 00    	jne    c0004f49 <f_rename+0x19a>
c0004e39:	b9 20 00 00 00       	mov    ecx,0x20
c0004e3e:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e42:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e46:	e8 b0 d0 ff ff       	call   c0001efb <mem_cpy>
c0004e4b:	b9 30 00 00 00       	mov    ecx,0x30
c0004e50:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004e54:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e58:	e8 9e d0 ff ff       	call   c0001efb <mem_cpy>
c0004e5d:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004e64:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e68:	e8 66 ec ff ff       	call   c0003ad3 <follow_path>
c0004e6d:	85 c0                	test   eax,eax
c0004e6f:	75 20                	jne    c0004e91 <f_rename+0xe2>
c0004e71:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004e75:	b8 08 00 00 00       	mov    eax,0x8
c0004e7a:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004e7e:	0f 85 c5 00 00 00    	jne    c0004f49 <f_rename+0x19a>
c0004e84:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004e88:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004e8f:	eb 03                	jmp    c0004e94 <f_rename+0xe5>
c0004e91:	83 f8 04             	cmp    eax,0x4
c0004e94:	0f 85 af 00 00 00    	jne    c0004f49 <f_rename+0x19a>
c0004e9a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e9e:	e8 c5 ec ff ff       	call   c0003b68 <dir_register>
c0004ea3:	85 c0                	test   eax,eax
c0004ea5:	0f 85 9e 00 00 00    	jne    c0004f49 <f_rename+0x19a>
c0004eab:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004eb2:	b9 13 00 00 00       	mov    ecx,0x13
c0004eb7:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004eba:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004ebe:	e8 38 d0 ff ff       	call   c0001efb <mem_cpy>
c0004ec3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004ec7:	a8 10                	test   al,0x10
c0004ec9:	75 03                	jne    c0004ece <f_rename+0x11f>
c0004ecb:	83 c8 20             	or     eax,0x20
c0004ece:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004ed1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ed9:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004edd:	74 54                	je     c0004f33 <f_rename+0x184>
c0004edf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004ee3:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004ee7:	74 4a                	je     c0004f33 <f_rename+0x184>
c0004ee9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004eed:	89 da                	mov    edx,ebx
c0004eef:	8a 07                	mov    al,BYTE PTR [edi]
c0004ef1:	e8 c5 e3 ff ff       	call   c00032bb <ld_clust.isra.0>
c0004ef6:	89 c2                	mov    edx,eax
c0004ef8:	89 f8                	mov    eax,edi
c0004efa:	e8 27 d2 ff ff       	call   c0002126 <clst2sect>
c0004eff:	89 c2                	mov    edx,eax
c0004f01:	b8 02 00 00 00       	mov    eax,0x2
c0004f06:	85 d2                	test   edx,edx
c0004f08:	74 3f                	je     c0004f49 <f_rename+0x19a>
c0004f0a:	89 f8                	mov    eax,edi
c0004f0c:	e8 25 d5 ff ff       	call   c0002436 <move_window>
c0004f11:	85 c0                	test   eax,eax
c0004f13:	75 34                	jne    c0004f49 <f_rename+0x19a>
c0004f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f19:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004f1d:	75 14                	jne    c0004f33 <f_rename+0x184>
c0004f1f:	8d 50 54             	lea    edx,[eax+0x54]
c0004f22:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004f26:	e8 b9 e3 ff ff       	call   c00032e4 <st_clust.isra.1>
c0004f2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f2f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f33:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f37:	e8 fb e9 ff ff       	call   c0003937 <dir_remove>
c0004f3c:	85 c0                	test   eax,eax
c0004f3e:	75 09                	jne    c0004f49 <f_rename+0x19a>
c0004f40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f44:	e8 24 df ff ff       	call   c0002e6d <sync_fs>
c0004f49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f4d:	83 ec 0c             	sub    esp,0xc
c0004f50:	56                   	push   esi
c0004f51:	e8 da 0d 00 00       	call   c0005d30 <ff_memfree>
c0004f56:	83 c4 10             	add    esp,0x10
c0004f59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f5d:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004f63:	5b                   	pop    ebx
c0004f64:	5e                   	pop    esi
c0004f65:	5f                   	pop    edi
c0004f66:	c3                   	ret    

c0004f67 <f_chmod>:
c0004f67:	57                   	push   edi
c0004f68:	b9 02 00 00 00       	mov    ecx,0x2
c0004f6d:	56                   	push   esi
c0004f6e:	53                   	push   ebx
c0004f6f:	83 ec 50             	sub    esp,0x50
c0004f72:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004f76:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004f7a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f7e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f82:	e8 02 d6 ff ff       	call   c0002589 <mount_volume>
c0004f87:	85 c0                	test   eax,eax
c0004f89:	0f 85 81 00 00 00    	jne    c0005010 <f_chmod+0xa9>
c0004f8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f93:	83 ec 0c             	sub    esp,0xc
c0004f96:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f9a:	68 00 02 00 00       	push   0x200
c0004f9f:	e8 74 0d 00 00       	call   c0005d18 <ff_memalloc>
c0004fa4:	83 c4 10             	add    esp,0x10
c0004fa7:	89 c6                	mov    esi,eax
c0004fa9:	b8 11 00 00 00       	mov    eax,0x11
c0004fae:	85 f6                	test   esi,esi
c0004fb0:	74 5e                	je     c0005010 <f_chmod+0xa9>
c0004fb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004fba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004fbd:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004fc1:	e8 0d eb ff ff       	call   c0003ad3 <follow_path>
c0004fc6:	85 c0                	test   eax,eax
c0004fc8:	75 32                	jne    c0004ffc <f_chmod+0x95>
c0004fca:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004fce:	b8 06 00 00 00       	mov    eax,0x6
c0004fd3:	80 e2 a0             	and    dl,0xa0
c0004fd6:	75 24                	jne    c0004ffc <f_chmod+0x95>
c0004fd8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004fdc:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004fdf:	31 d7                	xor    edi,edx
c0004fe1:	21 fb                	and    ebx,edi
c0004fe3:	83 e3 27             	and    ebx,0x27
c0004fe6:	31 d3                	xor    ebx,edx
c0004fe8:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004feb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fef:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ff3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ff7:	e8 71 de ff ff       	call   c0002e6d <sync_fs>
c0004ffc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005000:	83 ec 0c             	sub    esp,0xc
c0005003:	56                   	push   esi
c0005004:	e8 27 0d 00 00       	call   c0005d30 <ff_memfree>
c0005009:	83 c4 10             	add    esp,0x10
c000500c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005010:	83 c4 50             	add    esp,0x50
c0005013:	5b                   	pop    ebx
c0005014:	5e                   	pop    esi
c0005015:	5f                   	pop    edi
c0005016:	c3                   	ret    

c0005017 <f_utime>:
c0005017:	56                   	push   esi
c0005018:	b9 02 00 00 00       	mov    ecx,0x2
c000501d:	53                   	push   ebx
c000501e:	83 ec 54             	sub    esp,0x54
c0005021:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005025:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005029:	8d 44 24 60          	lea    eax,[esp+0x60]
c000502d:	e8 57 d5 ff ff       	call   c0002589 <mount_volume>
c0005032:	85 c0                	test   eax,eax
c0005034:	0f 85 87 00 00 00    	jne    c00050c1 <f_utime+0xaa>
c000503a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005045:	68 00 02 00 00       	push   0x200
c000504a:	e8 c9 0c 00 00       	call   c0005d18 <ff_memalloc>
c000504f:	83 c4 10             	add    esp,0x10
c0005052:	89 c3                	mov    ebx,eax
c0005054:	b8 11 00 00 00       	mov    eax,0x11
c0005059:	85 db                	test   ebx,ebx
c000505b:	74 64                	je     c00050c1 <f_utime+0xaa>
c000505d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005061:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005065:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005068:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506c:	e8 62 ea ff ff       	call   c0003ad3 <follow_path>
c0005071:	85 c0                	test   eax,eax
c0005073:	75 38                	jne    c00050ad <f_utime+0x96>
c0005075:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0005079:	b8 06 00 00 00       	mov    eax,0x6
c000507e:	80 e2 a0             	and    dl,0xa0
c0005081:	75 2a                	jne    c00050ad <f_utime+0x96>
c0005083:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005087:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000508b:	c1 e2 10             	shl    edx,0x10
c000508e:	09 c2                	or     edx,eax
c0005090:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005094:	83 c0 16             	add    eax,0x16
c0005097:	e8 5c ce ff ff       	call   c0001ef8 <st_dword>
c000509c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a8:	e8 c0 dd ff ff       	call   c0002e6d <sync_fs>
c00050ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050b1:	83 ec 0c             	sub    esp,0xc
c00050b4:	53                   	push   ebx
c00050b5:	e8 76 0c 00 00       	call   c0005d30 <ff_memfree>
c00050ba:	83 c4 10             	add    esp,0x10
c00050bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050c1:	83 c4 54             	add    esp,0x54
c00050c4:	5b                   	pop    ebx
c00050c5:	5e                   	pop    esi
c00050c6:	c3                   	ret    

c00050c7 <f_getlabel>:
c00050c7:	55                   	push   ebp
c00050c8:	31 c9                	xor    ecx,ecx
c00050ca:	57                   	push   edi
c00050cb:	56                   	push   esi
c00050cc:	53                   	push   ebx
c00050cd:	83 ec 5c             	sub    esp,0x5c
c00050d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050d4:	8d 44 24 70          	lea    eax,[esp+0x70]
c00050d8:	e8 ac d4 ff ff       	call   c0002589 <mount_volume>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	0f 85 27 01 00 00    	jne    c000520e <f_getlabel+0x147>
c00050e7:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00050ec:	0f 84 d0 00 00 00    	je     c00051c2 <f_getlabel+0xfb>
c00050f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050f6:	31 d2                	xor    edx,edx
c00050f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00050fc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0005104:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005108:	e8 03 e3 ff ff       	call   c0003410 <dir_sdi>
c000510d:	85 c0                	test   eax,eax
c000510f:	0f 85 a1 00 00 00    	jne    c00051b6 <f_getlabel+0xef>
c0005115:	ba 01 00 00 00       	mov    edx,0x1
c000511a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000511e:	e8 ec e6 ff ff       	call   c000380f <dir_read>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 8b 00 00 00    	jne    c00051b6 <f_getlabel+0xef>
c000512b:	31 db                	xor    ebx,ebx
c000512d:	31 c9                	xor    ecx,ecx
c000512f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005133:	8d 79 01             	lea    edi,[ecx+0x1]
c0005136:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000513b:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005140:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005144:	e8 06 ce ff ff       	call   c0001f4f <dbc_1st>
c0005149:	85 c0                	test   eax,eax
c000514b:	74 16                	je     c0005163 <f_getlabel+0x9c>
c000514d:	83 ff 0b             	cmp    edi,0xb
c0005150:	74 11                	je     c0005163 <f_getlabel+0x9c>
c0005152:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005157:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000515b:	8d 79 02             	lea    edi,[ecx+0x2]
c000515e:	c1 e0 08             	shl    eax,0x8
c0005161:	09 c2                	or     edx,eax
c0005163:	0f b7 d2             	movzx  edx,dx
c0005166:	50                   	push   eax
c0005167:	50                   	push   eax
c0005168:	68 b5 01 00 00       	push   0x1b5
c000516d:	52                   	push   edx
c000516e:	e8 75 0c 00 00       	call   c0005de8 <ff_oem2uni>
c0005173:	83 c4 10             	add    esp,0x10
c0005176:	0f b7 c0             	movzx  eax,ax
c0005179:	85 c0                	test   eax,eax
c000517b:	74 22                	je     c000519f <f_getlabel+0xd8>
c000517d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005181:	b9 04 00 00 00       	mov    ecx,0x4
c0005186:	01 da                	add    edx,ebx
c0005188:	e8 a0 ce ff ff       	call   c000202d <put_utf>
c000518d:	0f b6 c0             	movzx  eax,al
c0005190:	85 c0                	test   eax,eax
c0005192:	74 0b                	je     c000519f <f_getlabel+0xd8>
c0005194:	01 c3                	add    ebx,eax
c0005196:	83 ff 0b             	cmp    edi,0xb
c0005199:	74 06                	je     c00051a1 <f_getlabel+0xda>
c000519b:	89 f9                	mov    ecx,edi
c000519d:	eb 90                	jmp    c000512f <f_getlabel+0x68>
c000519f:	31 db                	xor    ebx,ebx
c00051a1:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00051a5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00051a8:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00051ac:	74 14                	je     c00051c2 <f_getlabel+0xfb>
c00051ae:	4b                   	dec    ebx
c00051af:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00051b2:	74 f1                	je     c00051a5 <f_getlabel+0xde>
c00051b4:	eb 0c                	jmp    c00051c2 <f_getlabel+0xfb>
c00051b6:	83 f8 04             	cmp    eax,0x4
c00051b9:	75 51                	jne    c000520c <f_getlabel+0x145>
c00051bb:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00051bf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00051c2:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00051c7:	74 45                	je     c000520e <f_getlabel+0x147>
c00051c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051cd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00051d0:	e8 61 d2 ff ff       	call   c0002436 <move_window>
c00051d5:	89 c6                	mov    esi,eax
c00051d7:	85 c0                	test   eax,eax
c00051d9:	75 33                	jne    c000520e <f_getlabel+0x147>
c00051db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051df:	b8 43 00 00 00       	mov    eax,0x43
c00051e4:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00051e7:	83 f9 03             	cmp    ecx,0x3
c00051ea:	74 0f                	je     c00051fb <f_getlabel+0x134>
c00051ec:	31 c0                	xor    eax,eax
c00051ee:	83 f9 04             	cmp    ecx,0x4
c00051f1:	0f 94 c0             	sete   al
c00051f4:	48                   	dec    eax
c00051f5:	83 e0 c3             	and    eax,0xffffffc3
c00051f8:	83 c0 64             	add    eax,0x64
c00051fb:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00051ff:	e8 d8 cc ff ff       	call   c0001edc <ld_dword>
c0005204:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005208:	89 07                	mov    DWORD PTR [edi],eax
c000520a:	eb 02                	jmp    c000520e <f_getlabel+0x147>
c000520c:	89 c6                	mov    esi,eax
c000520e:	83 c4 5c             	add    esp,0x5c
c0005211:	89 f0                	mov    eax,esi
c0005213:	5b                   	pop    ebx
c0005214:	5e                   	pop    esi
c0005215:	5f                   	pop    edi
c0005216:	5d                   	pop    ebp
c0005217:	c3                   	ret    

c0005218 <f_setlabel>:
c0005218:	57                   	push   edi
c0005219:	b9 02 00 00 00       	mov    ecx,0x2
c000521e:	56                   	push   esi
c000521f:	53                   	push   ebx
c0005220:	83 ec 50             	sub    esp,0x50
c0005223:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005227:	8d 44 24 60          	lea    eax,[esp+0x60]
c000522b:	e8 59 d3 ff ff       	call   c0002589 <mount_volume>
c0005230:	89 c6                	mov    esi,eax
c0005232:	85 c0                	test   eax,eax
c0005234:	0f 85 65 01 00 00    	jne    c000539f <f_setlabel+0x187>
c000523a:	b9 0b 00 00 00       	mov    ecx,0xb
c000523f:	ba 20 00 00 00       	mov    edx,0x20
c0005244:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005248:	31 db                	xor    ebx,ebx
c000524a:	e8 c1 cc ff ff       	call   c0001f10 <mem_set>
c000524f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005253:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005256:	76 5d                	jbe    c00052b5 <f_setlabel+0x9d>
c0005258:	8d 44 24 60          	lea    eax,[esp+0x60]
c000525c:	e8 f4 cc ff ff       	call   c0001f55 <tchar2uni>
c0005261:	3d ff ff 00 00       	cmp    eax,0xffff
c0005266:	76 0a                	jbe    c0005272 <f_setlabel+0x5a>
c0005268:	be 06 00 00 00       	mov    esi,0x6
c000526d:	e9 2d 01 00 00       	jmp    c000539f <f_setlabel+0x187>
c0005272:	83 ec 0c             	sub    esp,0xc
c0005275:	50                   	push   eax
c0005276:	e8 e5 0b 00 00       	call   c0005e60 <ff_wtoupper>
c000527b:	5a                   	pop    edx
c000527c:	59                   	pop    ecx
c000527d:	68 b5 01 00 00       	push   0x1b5
c0005282:	50                   	push   eax
c0005283:	e8 c0 0a 00 00       	call   c0005d48 <ff_uni2oem>
c0005288:	83 c4 10             	add    esp,0x10
c000528b:	0f b7 f0             	movzx  esi,ax
c000528e:	89 f7                	mov    edi,esi
c0005290:	85 f6                	test   esi,esi
c0005292:	74 d4                	je     c0005268 <f_setlabel+0x50>
c0005294:	89 f2                	mov    edx,esi
c0005296:	b8 10 f4 02 c0       	mov    eax,0xc002f410
c000529b:	e8 9e cc ff ff       	call   c0001f3e <chk_chr>
c00052a0:	85 c0                	test   eax,eax
c00052a2:	75 c4                	jne    c0005268 <f_setlabel+0x50>
c00052a4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00052aa:	0f 87 c9 00 00 00    	ja     c0005379 <f_setlabel+0x161>
c00052b0:	e9 e0 00 00 00       	jmp    c0005395 <f_setlabel+0x17d>
c00052b5:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00052ba:	74 ac                	je     c0005268 <f_setlabel+0x50>
c00052bc:	85 db                	test   ebx,ebx
c00052be:	74 0e                	je     c00052ce <f_setlabel+0xb6>
c00052c0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00052c3:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00052c8:	75 04                	jne    c00052ce <f_setlabel+0xb6>
c00052ca:	89 c3                	mov    ebx,eax
c00052cc:	eb ee                	jmp    c00052bc <f_setlabel+0xa4>
c00052ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00052d2:	31 d2                	xor    edx,edx
c00052d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00052d8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00052e0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052e4:	e8 27 e1 ff ff       	call   c0003410 <dir_sdi>
c00052e9:	89 c6                	mov    esi,eax
c00052eb:	85 c0                	test   eax,eax
c00052ed:	0f 85 ac 00 00 00    	jne    c000539f <f_setlabel+0x187>
c00052f3:	ba 01 00 00 00       	mov    edx,0x1
c00052f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00052fc:	e8 0e e5 ff ff       	call   c000380f <dir_read>
c0005301:	85 c0                	test   eax,eax
c0005303:	75 18                	jne    c000531d <f_setlabel+0x105>
c0005305:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005309:	85 db                	test   ebx,ebx
c000530b:	74 0b                	je     c0005318 <f_setlabel+0x100>
c000530d:	b9 0b 00 00 00       	mov    ecx,0xb
c0005312:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005316:	eb 47                	jmp    c000535f <f_setlabel+0x147>
c0005318:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000531b:	eb 47                	jmp    c0005364 <f_setlabel+0x14c>
c000531d:	83 f8 04             	cmp    eax,0x4
c0005320:	75 53                	jne    c0005375 <f_setlabel+0x15d>
c0005322:	85 db                	test   ebx,ebx
c0005324:	74 79                	je     c000539f <f_setlabel+0x187>
c0005326:	ba 01 00 00 00       	mov    edx,0x1
c000532b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000532f:	e8 76 e4 ff ff       	call   c00037aa <dir_alloc>
c0005334:	89 c6                	mov    esi,eax
c0005336:	85 c0                	test   eax,eax
c0005338:	75 65                	jne    c000539f <f_setlabel+0x187>
c000533a:	b9 20 00 00 00       	mov    ecx,0x20
c000533f:	31 d2                	xor    edx,edx
c0005341:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005345:	e8 c6 cb ff ff       	call   c0001f10 <mem_set>
c000534a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000534e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005353:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005357:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000535b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000535f:	e8 97 cb ff ff       	call   c0001efb <mem_cpy>
c0005364:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005368:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000536c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005370:	e8 f8 da ff ff       	call   c0002e6d <sync_fs>
c0005375:	89 c6                	mov    esi,eax
c0005377:	eb 26                	jmp    c000539f <f_setlabel+0x187>
c0005379:	83 fb 09             	cmp    ebx,0x9
c000537c:	0f 87 e6 fe ff ff    	ja     c0005268 <f_setlabel+0x50>
c0005382:	89 f0                	mov    eax,esi
c0005384:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005388:	43                   	inc    ebx
c0005389:	89 f8                	mov    eax,edi
c000538b:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000538f:	43                   	inc    ebx
c0005390:	e9 ba fe ff ff       	jmp    c000524f <f_setlabel+0x37>
c0005395:	83 fb 0a             	cmp    ebx,0xa
c0005398:	76 ef                	jbe    c0005389 <f_setlabel+0x171>
c000539a:	e9 c9 fe ff ff       	jmp    c0005268 <f_setlabel+0x50>
c000539f:	83 c4 50             	add    esp,0x50
c00053a2:	89 f0                	mov    eax,esi
c00053a4:	5b                   	pop    ebx
c00053a5:	5e                   	pop    esi
c00053a6:	5f                   	pop    edi
c00053a7:	c3                   	ret    

c00053a8 <f_expand>:
c00053a8:	55                   	push   ebp
c00053a9:	57                   	push   edi
c00053aa:	56                   	push   esi
c00053ab:	53                   	push   ebx
c00053ac:	83 ec 2c             	sub    esp,0x2c
c00053af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00053b3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00053bb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053bf:	89 d8                	mov    eax,ebx
c00053c1:	e8 c7 cf ff ff       	call   c000238d <validate>
c00053c6:	89 c6                	mov    esi,eax
c00053c8:	85 c0                	test   eax,eax
c00053ca:	0f 85 3b 01 00 00    	jne    c000550b <f_expand+0x163>
c00053d0:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00053d4:	85 f6                	test   esi,esi
c00053d6:	0f 85 2f 01 00 00    	jne    c000550b <f_expand+0x163>
c00053dc:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00053e1:	75 0a                	jne    c00053ed <f_expand+0x45>
c00053e3:	be 07 00 00 00       	mov    esi,0x7
c00053e8:	e9 1e 01 00 00       	jmp    c000550b <f_expand+0x163>
c00053ed:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00053f1:	75 f0                	jne    c00053e3 <f_expand+0x3b>
c00053f3:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00053f7:	74 ea                	je     c00053e3 <f_expand+0x3b>
c00053f9:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00053fd:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005401:	c1 e1 09             	shl    ecx,0x9
c0005404:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005407:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c000540b:	0f 95 c0             	setne  al
c000540e:	31 d2                	xor    edx,edx
c0005410:	0f b6 c0             	movzx  eax,al
c0005413:	89 c7                	mov    edi,eax
c0005415:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005419:	f7 f1                	div    ecx
c000541b:	01 f8                	add    eax,edi
c000541d:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005420:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005424:	83 ff 01             	cmp    edi,0x1
c0005427:	76 05                	jbe    c000542e <f_expand+0x86>
c0005429:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000542c:	77 05                	ja     c0005433 <f_expand+0x8b>
c000542e:	bf 02 00 00 00       	mov    edi,0x2
c0005433:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005436:	89 fd                	mov    ebp,edi
c0005438:	31 c9                	xor    ecx,ecx
c000543a:	89 ea                	mov    edx,ebp
c000543c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005440:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005442:	45                   	inc    ebp
c0005443:	e8 c4 de ff ff       	call   c000330c <get_fat.isra.2>
c0005448:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000544c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005450:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005453:	77 05                	ja     c000545a <f_expand+0xb2>
c0005455:	bd 02 00 00 00       	mov    ebp,0x2
c000545a:	83 f8 01             	cmp    eax,0x1
c000545d:	74 20                	je     c000547f <f_expand+0xd7>
c000545f:	83 f8 ff             	cmp    eax,0xffffffff
c0005462:	74 25                	je     c0005489 <f_expand+0xe1>
c0005464:	85 c0                	test   eax,eax
c0005466:	75 09                	jne    c0005471 <f_expand+0xc9>
c0005468:	41                   	inc    ecx
c0005469:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000546d:	75 07                	jne    c0005476 <f_expand+0xce>
c000546f:	eb 1f                	jmp    c0005490 <f_expand+0xe8>
c0005471:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005474:	31 c9                	xor    ecx,ecx
c0005476:	39 fd                	cmp    ebp,edi
c0005478:	75 c0                	jne    c000543a <f_expand+0x92>
c000547a:	e9 64 ff ff ff       	jmp    c00053e3 <f_expand+0x3b>
c000547f:	be 02 00 00 00       	mov    esi,0x2
c0005484:	e9 82 00 00 00       	jmp    c000550b <f_expand+0x163>
c0005489:	be 01 00 00 00       	mov    esi,0x1
c000548e:	eb 7b                	jmp    c000550b <f_expand+0x163>
c0005490:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005495:	74 2b                	je     c00054c2 <f_expand+0x11a>
c0005497:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000549a:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000549e:	85 ed                	test   ebp,ebp
c00054a0:	74 24                	je     c00054c6 <f_expand+0x11e>
c00054a2:	83 c9 ff             	or     ecx,0xffffffff
c00054a5:	83 fd 01             	cmp    ebp,0x1
c00054a8:	74 03                	je     c00054ad <f_expand+0x105>
c00054aa:	8d 4f 01             	lea    ecx,[edi+0x1]
c00054ad:	89 fa                	mov    edx,edi
c00054af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00054b3:	e8 c2 d3 ff ff       	call   c000287a <put_fat>
c00054b8:	85 c0                	test   eax,eax
c00054ba:	75 4d                	jne    c0005509 <f_expand+0x161>
c00054bc:	89 f8                	mov    eax,edi
c00054be:	4d                   	dec    ebp
c00054bf:	47                   	inc    edi
c00054c0:	eb dc                	jmp    c000549e <f_expand+0xf6>
c00054c2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00054c5:	48                   	dec    eax
c00054c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00054ca:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00054cf:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00054d2:	74 37                	je     c000550b <f_expand+0x163>
c00054d4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00054d7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00054da:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00054de:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00054e1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00054e4:	83 c8 40             	or     eax,0x40
c00054e7:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00054ea:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00054ed:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00054f0:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00054f3:	39 c8                	cmp    eax,ecx
c00054f5:	77 14                	ja     c000550b <f_expand+0x163>
c00054f7:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00054fb:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00054fe:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005501:	83 c8 01             	or     eax,0x1
c0005504:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0005507:	eb 02                	jmp    c000550b <f_expand+0x163>
c0005509:	89 c6                	mov    esi,eax
c000550b:	83 c4 2c             	add    esp,0x2c
c000550e:	89 f0                	mov    eax,esi
c0005510:	5b                   	pop    ebx
c0005511:	5e                   	pop    esi
c0005512:	5f                   	pop    edi
c0005513:	5d                   	pop    ebp
c0005514:	c3                   	ret    

c0005515 <f_mkfs>:
c0005515:	55                   	push   ebp
c0005516:	57                   	push   edi
c0005517:	56                   	push   esi
c0005518:	be 0b 00 00 00       	mov    esi,0xb
c000551d:	53                   	push   ebx
c000551e:	83 ec 5c             	sub    esp,0x5c
c0005521:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005525:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005529:	8d 44 24 70          	lea    eax,[esp+0x70]
c000552d:	e8 0e ce ff ff       	call   c0002340 <get_ldnumber>
c0005532:	85 c0                	test   eax,eax
c0005534:	0f 88 d1 07 00 00    	js     c0005d0b <f_mkfs+0x7f6>
c000553a:	8b 14 85 80 6c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9380]
c0005541:	85 d2                	test   edx,edx
c0005543:	74 03                	je     c0005548 <f_mkfs+0x33>
c0005545:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005548:	85 db                	test   ebx,ebx
c000554a:	75 05                	jne    c0005551 <f_mkfs+0x3c>
c000554c:	bb 00 f4 02 c0       	mov    ebx,0xc002f400
c0005551:	83 ec 0c             	sub    esp,0xc
c0005554:	0f b6 c0             	movzx  eax,al
c0005557:	be 03 00 00 00       	mov    esi,0x3
c000555c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005560:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005564:	e8 18 c9 ff ff       	call   c0001e81 <disk_initialize>
c0005569:	83 c4 10             	add    esp,0x10
c000556c:	a8 01                	test   al,0x1
c000556e:	0f 85 97 07 00 00    	jne    c0005d0b <f_mkfs+0x7f6>
c0005574:	be 0a 00 00 00       	mov    esi,0xa
c0005579:	a8 04                	test   al,0x4
c000557b:	0f 85 8a 07 00 00    	jne    c0005d0b <f_mkfs+0x7f6>
c0005581:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005584:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005588:	85 c0                	test   eax,eax
c000558a:	75 20                	jne    c00055ac <f_mkfs+0x97>
c000558c:	51                   	push   ecx
c000558d:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005591:	50                   	push   eax
c0005592:	6a 03                	push   0x3
c0005594:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005598:	e8 13 c9 ff ff       	call   c0001eb0 <disk_ioctl>
c000559d:	83 c4 10             	add    esp,0x10
c00055a0:	85 c0                	test   eax,eax
c00055a2:	74 08                	je     c00055ac <f_mkfs+0x97>
c00055a4:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00055ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00055b0:	8d 42 ff             	lea    eax,[edx-0x1]
c00055b3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00055b8:	77 04                	ja     c00055be <f_mkfs+0xa9>
c00055ba:	85 c2                	test   edx,eax
c00055bc:	74 08                	je     c00055c6 <f_mkfs+0xb1>
c00055be:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00055c6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00055c9:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00055cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00055d1:	48                   	dec    eax
c00055d2:	3c 01                	cmp    al,0x1
c00055d4:	76 05                	jbe    c00055db <f_mkfs+0xc6>
c00055d6:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00055db:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00055e2:	48                   	dec    eax
c00055e3:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00055e8:	77 07                	ja     c00055f1 <f_mkfs+0xdc>
c00055ea:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00055ef:	74 08                	je     c00055f9 <f_mkfs+0xe4>
c00055f1:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00055f9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00055fc:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c0005602:	77 07                	ja     c000560b <f_mkfs+0xf6>
c0005604:	8d 47 ff             	lea    eax,[edi-0x1]
c0005607:	85 f8                	test   eax,edi
c0005609:	74 02                	je     c000560d <f_mkfs+0xf8>
c000560b:	31 ff                	xor    edi,edi
c000560d:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005615:	77 0a                	ja     c0005621 <f_mkfs+0x10c>
c0005617:	be 11 00 00 00       	mov    esi,0x11
c000561c:	e9 ea 06 00 00       	jmp    c0005d0b <f_mkfs+0x7f6>
c0005621:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005623:	85 ed                	test   ebp,ebp
c0005625:	89 eb                	mov    ebx,ebp
c0005627:	75 1e                	jne    c0005647 <f_mkfs+0x132>
c0005629:	83 ec 0c             	sub    esp,0xc
c000562c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005633:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005638:	50                   	push   eax
c0005639:	e8 da 06 00 00       	call   c0005d18 <ff_memalloc>
c000563e:	83 c4 10             	add    esp,0x10
c0005641:	89 c3                	mov    ebx,eax
c0005643:	85 c0                	test   eax,eax
c0005645:	74 d0                	je     c0005617 <f_mkfs+0x102>
c0005647:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000564f:	52                   	push   edx
c0005650:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005654:	50                   	push   eax
c0005655:	6a 01                	push   0x1
c0005657:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000565b:	e8 50 c8 ff ff       	call   c0001eb0 <disk_ioctl>
c0005660:	83 c4 10             	add    esp,0x10
c0005663:	85 c0                	test   eax,eax
c0005665:	0f 85 49 06 00 00    	jne    c0005cb4 <f_mkfs+0x79f>
c000566b:	89 f0                	mov    eax,esi
c000566d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005675:	83 e0 08             	and    eax,0x8
c0005678:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000567c:	75 18                	jne    c0005696 <f_mkfs+0x181>
c000567e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005682:	83 f8 3f             	cmp    eax,0x3f
c0005685:	76 0f                	jbe    c0005696 <f_mkfs+0x181>
c0005687:	83 e8 3f             	sub    eax,0x3f
c000568a:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005692:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005696:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000569a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000569e:	83 f8 7f             	cmp    eax,0x7f
c00056a1:	0f 86 5b 02 00 00    	jbe    c0005902 <f_mkfs+0x3ed>
c00056a7:	b9 80 00 00 00       	mov    ecx,0x80
c00056ac:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00056b2:	77 05                	ja     c00056b9 <f_mkfs+0x1a4>
c00056b4:	c1 ef 09             	shr    edi,0x9
c00056b7:	89 f9                	mov    ecx,edi
c00056b9:	89 f0                	mov    eax,esi
c00056bb:	89 f7                	mov    edi,esi
c00056bd:	83 e0 01             	and    eax,0x1
c00056c0:	83 e7 02             	and    edi,0x2
c00056c3:	0f b6 c0             	movzx  eax,al
c00056c6:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00056ca:	74 0a                	je     c00056d6 <f_mkfs+0x1c1>
c00056cc:	85 c0                	test   eax,eax
c00056ce:	0f 84 4f 01 00 00    	je     c0005823 <f_mkfs+0x30e>
c00056d4:	eb 37                	jmp    c000570d <f_mkfs+0x1f8>
c00056d6:	be 13 00 00 00       	mov    esi,0x13
c00056db:	85 c0                	test   eax,eax
c00056dd:	75 2e                	jne    c000570d <f_mkfs+0x1f8>
c00056df:	e9 e7 05 00 00       	jmp    c0005ccb <f_mkfs+0x7b6>
c00056e4:	83 f8 02             	cmp    eax,0x2
c00056e7:	0f 85 0d 02 00 00    	jne    c00058fa <f_mkfs+0x3e5>
c00056ed:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00056f3:	0f 86 e4 01 00 00    	jbe    c00058dd <f_mkfs+0x3c8>
c00056f9:	85 c9                	test   ecx,ecx
c00056fb:	0f 85 dc 05 00 00    	jne    c0005cdd <f_mkfs+0x7c8>
c0005701:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005704:	83 f9 40             	cmp    ecx,0x40
c0005707:	0f 87 e0 05 00 00    	ja     c0005ced <f_mkfs+0x7d8>
c000570d:	89 cf                	mov    edi,ecx
c000570f:	85 c9                	test   ecx,ecx
c0005711:	75 1c                	jne    c000572f <f_mkfs+0x21a>
c0005713:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005717:	b8 e0 f3 02 c0       	mov    eax,0xc002f3e0
c000571c:	c1 ee 0c             	shr    esi,0xc
c000571f:	bf 01 00 00 00       	mov    edi,0x1
c0005724:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005727:	85 d2                	test   edx,edx
c0005729:	0f 85 63 01 00 00    	jne    c0005892 <f_mkfs+0x37d>
c000572f:	31 d2                	xor    edx,edx
c0005731:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005735:	f7 f7                	div    edi
c0005737:	3d f5 0f 00 00       	cmp    eax,0xff5
c000573c:	0f 86 62 01 00 00    	jbe    c00058a4 <f_mkfs+0x38f>
c0005742:	83 c0 02             	add    eax,0x2
c0005745:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000574a:	01 c0                	add    eax,eax
c000574c:	05 ff 01 00 00       	add    eax,0x1ff
c0005751:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005759:	c1 e8 09             	shr    eax,0x9
c000575c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005760:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005764:	c1 e0 05             	shl    eax,0x5
c0005767:	c1 e8 09             	shr    eax,0x9
c000576a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000576e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005773:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577b:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c000577f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005783:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005787:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000578c:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005790:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005794:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005798:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000579c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00057a0:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00057a4:	f7 d8                	neg    eax
c00057a6:	21 c6                	and    esi,eax
c00057a8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00057ad:	29 d6                	sub    esi,edx
c00057af:	83 f8 03             	cmp    eax,0x3
c00057b2:	0f 85 ff 00 00 00    	jne    c00058b7 <f_mkfs+0x3a2>
c00057b8:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00057bc:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00057c0:	89 f8                	mov    eax,edi
c00057c2:	c1 e0 04             	shl    eax,0x4
c00057c5:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00057c9:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00057cd:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00057d1:	0f 82 2b 01 00 00    	jb     c0005902 <f_mkfs+0x3ed>
c00057d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00057db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00057df:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00057e3:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00057e8:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00057ec:	29 d0                	sub    eax,edx
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	f7 f7                	div    edi
c00057f2:	89 c6                	mov    esi,eax
c00057f4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00057f9:	83 f8 03             	cmp    eax,0x3
c00057fc:	0f 85 e2 fe ff ff    	jne    c00056e4 <f_mkfs+0x1cf>
c0005802:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005808:	0f 87 03 01 00 00    	ja     c0005911 <f_mkfs+0x3fc>
c000580e:	85 c9                	test   ecx,ecx
c0005810:	0f 85 ec 00 00 00    	jne    c0005902 <f_mkfs+0x3ed>
c0005816:	83 ff 01             	cmp    edi,0x1
c0005819:	0f 86 e3 00 00 00    	jbe    c0005902 <f_mkfs+0x3ed>
c000581f:	d1 ef                	shr    edi,1
c0005821:	89 f9                	mov    ecx,edi
c0005823:	89 ce                	mov    esi,ecx
c0005825:	85 c9                	test   ecx,ecx
c0005827:	75 25                	jne    c000584e <f_mkfs+0x339>
c0005829:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000582d:	b8 f0 f3 02 c0       	mov    eax,0xc002f3f0
c0005832:	c1 ee 11             	shr    esi,0x11
c0005835:	b9 01 00 00 00       	mov    ecx,0x1
c000583a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000583d:	85 d2                	test   edx,edx
c000583f:	74 0b                	je     c000584c <f_mkfs+0x337>
c0005841:	83 c0 02             	add    eax,0x2
c0005844:	39 f2                	cmp    edx,esi
c0005846:	77 04                	ja     c000584c <f_mkfs+0x337>
c0005848:	01 c9                	add    ecx,ecx
c000584a:	eb ee                	jmp    c000583a <f_mkfs+0x325>
c000584c:	31 f6                	xor    esi,esi
c000584e:	31 d2                	xor    edx,edx
c0005850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005854:	f7 f1                	div    ecx
c0005856:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000585d:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005862:	c1 ea 09             	shr    edx,0x9
c0005865:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000586a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000586e:	0f 87 8e 00 00 00    	ja     c0005902 <f_mkfs+0x3ed>
c0005874:	89 cf                	mov    edi,ecx
c0005876:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000587e:	89 f1                	mov    ecx,esi
c0005880:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005888:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000588d:	e9 dc fe ff ff       	jmp    c000576e <f_mkfs+0x259>
c0005892:	83 c0 02             	add    eax,0x2
c0005895:	39 f2                	cmp    edx,esi
c0005897:	0f 87 92 fe ff ff    	ja     c000572f <f_mkfs+0x21a>
c000589d:	01 ff                	add    edi,edi
c000589f:	e9 80 fe ff ff       	jmp    c0005724 <f_mkfs+0x20f>
c00058a4:	8d 04 40             	lea    eax,[eax+eax*2]
c00058a7:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00058ac:	40                   	inc    eax
c00058ad:	d1 e8                	shr    eax,1
c00058af:	83 c0 03             	add    eax,0x3
c00058b2:	e9 95 fe ff ff       	jmp    c000574c <f_mkfs+0x237>
c00058b7:	31 d2                	xor    edx,edx
c00058b9:	89 f0                	mov    eax,esi
c00058bb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00058bf:	85 d2                	test   edx,edx
c00058c1:	74 09                	je     c00058cc <f_mkfs+0x3b7>
c00058c3:	4e                   	dec    esi
c00058c4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00058c8:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00058cc:	89 f0                	mov    eax,esi
c00058ce:	31 d2                	xor    edx,edx
c00058d0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00058d4:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00058d8:	e9 e3 fe ff ff       	jmp    c00057c0 <f_mkfs+0x2ab>
c00058dd:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00058e3:	77 2c                	ja     c0005911 <f_mkfs+0x3fc>
c00058e5:	85 c9                	test   ecx,ecx
c00058e7:	75 19                	jne    c0005902 <f_mkfs+0x3ed>
c00058e9:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00058ec:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00058f2:	0f 86 15 fe ff ff    	jbe    c000570d <f_mkfs+0x1f8>
c00058f8:	eb 08                	jmp    c0005902 <f_mkfs+0x3ed>
c00058fa:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005900:	76 0a                	jbe    c000590c <f_mkfs+0x3f7>
c0005902:	be 0e 00 00 00       	mov    esi,0xe
c0005907:	e9 bf 03 00 00       	jmp    c0005ccb <f_mkfs+0x7b6>
c000590c:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005911:	31 d2                	xor    edx,edx
c0005913:	b9 00 02 00 00       	mov    ecx,0x200
c0005918:	89 d8                	mov    eax,ebx
c000591a:	e8 f1 c5 ff ff       	call   c0001f10 <mem_set>
c000591f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005924:	ba 92 f3 02 c0       	mov    edx,0xc002f392
c0005929:	89 d8                	mov    eax,ebx
c000592b:	e8 cb c5 ff ff       	call   c0001efb <mem_cpy>
c0005930:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005933:	ba 00 02 00 00       	mov    edx,0x200
c0005938:	e8 b7 c5 ff ff       	call   c0001ef4 <st_word>
c000593d:	89 f8                	mov    eax,edi
c000593f:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005944:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005947:	8d 43 0e             	lea    eax,[ebx+0xe]
c000594a:	e8 a5 c5 ff ff       	call   c0001ef4 <st_word>
c000594f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005953:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005956:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000595b:	83 f8 03             	cmp    eax,0x3
c000595e:	75 08                	jne    c0005968 <f_mkfs+0x453>
c0005960:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005968:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000596c:	8d 43 11             	lea    eax,[ebx+0x11]
c000596f:	e8 80 c5 ff ff       	call   c0001ef4 <st_word>
c0005974:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005978:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000597e:	77 0a                	ja     c000598a <f_mkfs+0x475>
c0005980:	8d 43 13             	lea    eax,[ebx+0x13]
c0005983:	e8 6c c5 ff ff       	call   c0001ef4 <st_word>
c0005988:	eb 08                	jmp    c0005992 <f_mkfs+0x47d>
c000598a:	8d 43 20             	lea    eax,[ebx+0x20]
c000598d:	e8 66 c5 ff ff       	call   c0001ef8 <st_dword>
c0005992:	8d 43 18             	lea    eax,[ebx+0x18]
c0005995:	ba 3f 00 00 00       	mov    edx,0x3f
c000599a:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c000599e:	e8 51 c5 ff ff       	call   c0001ef4 <st_word>
c00059a3:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00059a6:	ba ff 00 00 00       	mov    edx,0xff
c00059ab:	e8 44 c5 ff ff       	call   c0001ef4 <st_word>
c00059b0:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00059b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00059b7:	e8 3c c5 ff ff       	call   c0001ef8 <st_dword>
c00059bc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00059c1:	83 f8 03             	cmp    eax,0x3
c00059c4:	75 57                	jne    c0005a1d <f_mkfs+0x508>
c00059c6:	8d 43 43             	lea    eax,[ebx+0x43]
c00059c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00059ce:	e8 25 c5 ff ff       	call   c0001ef8 <st_dword>
c00059d3:	8d 43 24             	lea    eax,[ebx+0x24]
c00059d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00059da:	e8 19 c5 ff ff       	call   c0001ef8 <st_dword>
c00059df:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00059e2:	ba 02 00 00 00       	mov    edx,0x2
c00059e7:	e8 0c c5 ff ff       	call   c0001ef8 <st_dword>
c00059ec:	8d 43 30             	lea    eax,[ebx+0x30]
c00059ef:	ba 01 00 00 00       	mov    edx,0x1
c00059f4:	e8 fb c4 ff ff       	call   c0001ef4 <st_word>
c00059f9:	8d 43 32             	lea    eax,[ebx+0x32]
c00059fc:	ba 06 00 00 00       	mov    edx,0x6
c0005a01:	e8 ee c4 ff ff       	call   c0001ef4 <st_word>
c0005a06:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005a0a:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005a0e:	8d 43 47             	lea    eax,[ebx+0x47]
c0005a11:	b9 13 00 00 00       	mov    ecx,0x13
c0005a16:	ba 9e f3 02 c0       	mov    edx,0xc002f39e
c0005a1b:	eb 2f                	jmp    c0005a4c <f_mkfs+0x537>
c0005a1d:	8d 43 27             	lea    eax,[ebx+0x27]
c0005a20:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a25:	e8 ce c4 ff ff       	call   c0001ef8 <st_dword>
c0005a2a:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005a2f:	8d 43 16             	lea    eax,[ebx+0x16]
c0005a32:	e8 bd c4 ff ff       	call   c0001ef4 <st_word>
c0005a37:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005a3b:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005a3f:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005a42:	b9 13 00 00 00       	mov    ecx,0x13
c0005a47:	ba b2 f3 02 c0       	mov    edx,0xc002f3b2
c0005a4c:	e8 aa c4 ff ff       	call   c0001efb <mem_cpy>
c0005a51:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005a57:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005a5c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005a60:	e8 8f c4 ff ff       	call   c0001ef4 <st_word>
c0005a65:	6a 01                	push   0x1
c0005a67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005a6b:	53                   	push   ebx
c0005a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a70:	e8 25 c4 ff ff       	call   c0001e9a <disk_write>
c0005a75:	83 c4 10             	add    esp,0x10
c0005a78:	85 c0                	test   eax,eax
c0005a7a:	0f 85 34 02 00 00    	jne    c0005cb4 <f_mkfs+0x79f>
c0005a80:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a85:	83 f8 03             	cmp    eax,0x3
c0005a88:	0f 85 98 00 00 00    	jne    c0005b26 <f_mkfs+0x611>
c0005a8e:	6a 01                	push   0x1
c0005a90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a94:	83 c0 06             	add    eax,0x6
c0005a97:	50                   	push   eax
c0005a98:	53                   	push   ebx
c0005a99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a9d:	e8 f8 c3 ff ff       	call   c0001e9a <disk_write>
c0005aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0005aa7:	31 d2                	xor    edx,edx
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 60 c4 ff ff       	call   c0001f10 <mem_set>
c0005ab0:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ab5:	89 d8                	mov    eax,ebx
c0005ab7:	e8 3c c4 ff ff       	call   c0001ef8 <st_dword>
c0005abc:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005ac2:	ba 72 72 41 61       	mov    edx,0x61417272
c0005ac7:	e8 2c c4 ff ff       	call   c0001ef8 <st_dword>
c0005acc:	8d 56 ff             	lea    edx,[esi-0x1]
c0005acf:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005ad5:	e8 1e c4 ff ff       	call   c0001ef8 <st_dword>
c0005ada:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005ae0:	ba 02 00 00 00       	mov    edx,0x2
c0005ae5:	e8 0e c4 ff ff       	call   c0001ef8 <st_dword>
c0005aea:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005aef:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005af5:	e8 fa c3 ff ff       	call   c0001ef4 <st_word>
c0005afa:	6a 01                	push   0x1
c0005afc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005b00:	83 c0 07             	add    eax,0x7
c0005b03:	50                   	push   eax
c0005b04:	53                   	push   ebx
c0005b05:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005b09:	e8 8c c3 ff ff       	call   c0001e9a <disk_write>
c0005b0e:	83 c4 20             	add    esp,0x20
c0005b11:	6a 01                	push   0x1
c0005b13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b17:	40                   	inc    eax
c0005b18:	50                   	push   eax
c0005b19:	53                   	push   ebx
c0005b1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b1e:	e8 77 c3 ff ff       	call   c0001e9a <disk_write>
c0005b23:	83 c4 10             	add    esp,0x10
c0005b26:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005b2a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005b2e:	c1 e8 09             	shr    eax,0x9
c0005b31:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005b37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b3b:	31 d2                	xor    edx,edx
c0005b3d:	89 d8                	mov    eax,ebx
c0005b3f:	e8 cc c3 ff ff       	call   c0001f10 <mem_set>
c0005b44:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b49:	31 c9                	xor    ecx,ecx
c0005b4b:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005b53:	83 f8 01             	cmp    eax,0x1
c0005b56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005b5a:	0f 94 c1             	sete   cl
c0005b5d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005b61:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005b65:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005b6d:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005b75:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005b7a:	75 21                	jne    c0005b9d <f_mkfs+0x688>
c0005b7c:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005b81:	89 d8                	mov    eax,ebx
c0005b83:	e8 70 c3 ff ff       	call   c0001ef8 <st_dword>
c0005b88:	8d 43 04             	lea    eax,[ebx+0x4]
c0005b8b:	83 ca ff             	or     edx,0xffffffff
c0005b8e:	e8 65 c3 ff ff       	call   c0001ef8 <st_dword>
c0005b93:	8d 43 08             	lea    eax,[ebx+0x8]
c0005b96:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005b9b:	eb 06                	jmp    c0005ba3 <f_mkfs+0x68e>
c0005b9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ba1:	89 d8                	mov    eax,ebx
c0005ba3:	e8 50 c3 ff ff       	call   c0001ef8 <st_dword>
c0005ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005bac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005bb0:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005bb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bb8:	39 ce                	cmp    esi,ecx
c0005bba:	76 02                	jbe    c0005bbe <f_mkfs+0x6a9>
c0005bbc:	89 ce                	mov    esi,ecx
c0005bbe:	56                   	push   esi
c0005bbf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005bc3:	53                   	push   ebx
c0005bc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bc8:	e8 cd c2 ff ff       	call   c0001e9a <disk_write>
c0005bcd:	83 c4 10             	add    esp,0x10
c0005bd0:	85 c0                	test   eax,eax
c0005bd2:	0f 85 dc 00 00 00    	jne    c0005cb4 <f_mkfs+0x79f>
c0005bd8:	31 d2                	xor    edx,edx
c0005bda:	b9 00 02 00 00       	mov    ecx,0x200
c0005bdf:	89 d8                	mov    eax,ebx
c0005be1:	e8 2a c3 ff ff       	call   c0001f10 <mem_set>
c0005be6:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005bea:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005bee:	75 c0                	jne    c0005bb0 <f_mkfs+0x69b>
c0005bf0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf4:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005bfc:	40                   	inc    eax
c0005bfd:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005c01:	0f 87 6e ff ff ff    	ja     c0005b75 <f_mkfs+0x660>
c0005c07:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c0c:	83 f8 03             	cmp    eax,0x3
c0005c0f:	74 04                	je     c0005c15 <f_mkfs+0x700>
c0005c11:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005c15:	89 fe                	mov    esi,edi
c0005c17:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005c1b:	76 04                	jbe    c0005c21 <f_mkfs+0x70c>
c0005c1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c21:	56                   	push   esi
c0005c22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005c26:	53                   	push   ebx
c0005c27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c2b:	e8 6a c2 ff ff       	call   c0001e9a <disk_write>
c0005c30:	83 c4 10             	add    esp,0x10
c0005c33:	85 c0                	test   eax,eax
c0005c35:	75 7d                	jne    c0005cb4 <f_mkfs+0x79f>
c0005c37:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005c3b:	29 f7                	sub    edi,esi
c0005c3d:	75 d6                	jne    c0005c15 <f_mkfs+0x700>
c0005c3f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c44:	b9 0c 00 00 00       	mov    ecx,0xc
c0005c49:	83 f8 03             	cmp    eax,0x3
c0005c4c:	74 1e                	je     c0005c6c <f_mkfs+0x757>
c0005c4e:	b9 06 00 00 00       	mov    ecx,0x6
c0005c53:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005c5b:	77 0f                	ja     c0005c6c <f_mkfs+0x757>
c0005c5d:	b9 04 00 00 00       	mov    ecx,0x4
c0005c62:	83 f8 02             	cmp    eax,0x2
c0005c65:	74 05                	je     c0005c6c <f_mkfs+0x757>
c0005c67:	b9 01 00 00 00       	mov    ecx,0x1
c0005c6c:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005c71:	75 2a                	jne    c0005c9d <f_mkfs+0x788>
c0005c73:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005c77:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005c7f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005c83:	83 ec 0c             	sub    esp,0xc
c0005c86:	53                   	push   ebx
c0005c87:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005c8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c8f:	e8 89 d2 ff ff       	call   c0002f1d <create_partition>
c0005c94:	83 c4 10             	add    esp,0x10
c0005c97:	89 c6                	mov    esi,eax
c0005c99:	85 c0                	test   eax,eax
c0005c9b:	75 2e                	jne    c0005ccb <f_mkfs+0x7b6>
c0005c9d:	31 f6                	xor    esi,esi
c0005c9f:	50                   	push   eax
c0005ca0:	6a 00                	push   0x0
c0005ca2:	6a 00                	push   0x0
c0005ca4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ca8:	e8 03 c2 ff ff       	call   c0001eb0 <disk_ioctl>
c0005cad:	83 c4 10             	add    esp,0x10
c0005cb0:	85 c0                	test   eax,eax
c0005cb2:	74 17                	je     c0005ccb <f_mkfs+0x7b6>
c0005cb4:	85 ed                	test   ebp,ebp
c0005cb6:	75 0c                	jne    c0005cc4 <f_mkfs+0x7af>
c0005cb8:	83 ec 0c             	sub    esp,0xc
c0005cbb:	53                   	push   ebx
c0005cbc:	e8 6f 00 00 00       	call   c0005d30 <ff_memfree>
c0005cc1:	83 c4 10             	add    esp,0x10
c0005cc4:	be 01 00 00 00       	mov    esi,0x1
c0005cc9:	eb 40                	jmp    c0005d0b <f_mkfs+0x7f6>
c0005ccb:	85 ed                	test   ebp,ebp
c0005ccd:	75 3c                	jne    c0005d0b <f_mkfs+0x7f6>
c0005ccf:	83 ec 0c             	sub    esp,0xc
c0005cd2:	53                   	push   ebx
c0005cd3:	e8 58 00 00 00       	call   c0005d30 <ff_memfree>
c0005cd8:	83 c4 10             	add    esp,0x10
c0005cdb:	eb 2e                	jmp    c0005d0b <f_mkfs+0x7f6>
c0005cdd:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005ce2:	0f 85 3b fb ff ff    	jne    c0005823 <f_mkfs+0x30e>
c0005ce8:	e9 15 fc ff ff       	jmp    c0005902 <f_mkfs+0x3ed>
c0005ced:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005cf2:	0f 85 31 fb ff ff    	jne    c0005829 <f_mkfs+0x314>
c0005cf8:	89 cf                	mov    edi,ecx
c0005cfa:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005d00:	0f 86 29 fa ff ff    	jbe    c000572f <f_mkfs+0x21a>
c0005d06:	e9 f7 fb ff ff       	jmp    c0005902 <f_mkfs+0x3ed>
c0005d0b:	83 c4 5c             	add    esp,0x5c
c0005d0e:	89 f0                	mov    eax,esi
c0005d10:	5b                   	pop    ebx
c0005d11:	5e                   	pop    esi
c0005d12:	5f                   	pop    edi
c0005d13:	5d                   	pop    ebp
c0005d14:	c3                   	ret    
c0005d15:	66 90                	xchg   ax,ax
c0005d17:	90                   	nop

c0005d18 <ff_memalloc>:
c0005d18:	83 ec 0c             	sub    esp,0xc
c0005d1b:	83 ec 0c             	sub    esp,0xc
c0005d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d22:	e8 d7 05 01 00       	call   c00162fe <malloc>
c0005d27:	83 c4 10             	add    esp,0x10
c0005d2a:	83 c4 0c             	add    esp,0xc
c0005d2d:	c3                   	ret    
c0005d2e:	66 90                	xchg   ax,ax

c0005d30 <ff_memfree>:
c0005d30:	83 ec 0c             	sub    esp,0xc
c0005d33:	83 ec 0c             	sub    esp,0xc
c0005d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005d3a:	e8 cf 05 01 00       	call   c001630e <free>
c0005d3f:	83 c4 10             	add    esp,0x10
c0005d42:	90                   	nop
c0005d43:	83 c4 0c             	add    esp,0xc
c0005d46:	c3                   	ret    
c0005d47:	90                   	nop

c0005d48 <ff_uni2oem>:
c0005d48:	83 ec 14             	sub    esp,0x14
c0005d4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d53:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005d5a:	c7 44 24 0c e0 f7 02 c0 	mov    DWORD PTR [esp+0xc],0xc002f7e0
c0005d62:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005d67:	77 0b                	ja     c0005d74 <ff_uni2oem+0x2c>
c0005d69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d6d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005d72:	eb 68                	jmp    c0005ddc <ff_uni2oem+0x94>
c0005d74:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005d7c:	77 5e                	ja     c0005ddc <ff_uni2oem+0x94>
c0005d7e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d82:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d87:	75 53                	jne    c0005ddc <ff_uni2oem+0x94>
c0005d89:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005d90:	eb 12                	jmp    c0005da4 <ff_uni2oem+0x5c>
c0005d92:	66 90                	xchg   ax,ax
c0005d94:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005d99:	83 c0 01             	add    eax,0x1
c0005d9c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005da1:	8d 76 00             	lea    esi,[esi+0x0]
c0005da4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005da9:	83 f8 7f             	cmp    eax,0x7f
c0005dac:	77 1e                	ja     c0005dcc <ff_uni2oem+0x84>
c0005dae:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005db3:	01 c0                	add    eax,eax
c0005db5:	89 c2                	mov    edx,eax
c0005db7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dbb:	01 d0                	add    eax,edx
c0005dbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005dc0:	0f b7 c0             	movzx  eax,ax
c0005dc3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005dc7:	75 cb                	jne    c0005d94 <ff_uni2oem+0x4c>
c0005dc9:	8d 76 00             	lea    esi,[esi+0x0]
c0005dcc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005dd1:	83 e8 80             	sub    eax,0xffffff80
c0005dd4:	0f b6 c0             	movzx  eax,al
c0005dd7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ddc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005de1:	83 c4 14             	add    esp,0x14
c0005de4:	c3                   	ret    
c0005de5:	8d 76 00             	lea    esi,[esi+0x0]

c0005de8 <ff_oem2uni>:
c0005de8:	83 ec 18             	sub    esp,0x18
c0005deb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005def:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005df3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005df8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005dfc:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005e03:	c7 44 24 10 e0 f7 02 c0 	mov    DWORD PTR [esp+0x10],0xc002f7e0
c0005e0b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e10:	83 f8 7f             	cmp    eax,0x7f
c0005e13:	77 0b                	ja     c0005e20 <ff_oem2uni+0x38>
c0005e15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005e19:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e1e:	eb 34                	jmp    c0005e54 <ff_oem2uni+0x6c>
c0005e20:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e24:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e29:	75 29                	jne    c0005e54 <ff_oem2uni+0x6c>
c0005e2b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e30:	3d ff 00 00 00       	cmp    eax,0xff
c0005e35:	77 1d                	ja     c0005e54 <ff_oem2uni+0x6c>
c0005e37:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e3c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005e41:	01 c0                	add    eax,eax
c0005e43:	89 c2                	mov    edx,eax
c0005e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005e49:	01 d0                	add    eax,edx
c0005e4b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005e53:	90                   	nop
c0005e54:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005e59:	83 c4 18             	add    esp,0x18
c0005e5c:	c3                   	ret    
c0005e5d:	8d 76 00             	lea    esi,[esi+0x0]

c0005e60 <ff_wtoupper>:
c0005e60:	83 ec 10             	sub    esp,0x10
c0005e63:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005e6b:	0f 87 ab 01 00 00    	ja     c000601c <ff_wtoupper+0x1bc>
c0005e71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005e75:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e7f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005e84:	77 0a                	ja     c0005e90 <ff_wtoupper+0x30>
c0005e86:	b8 e0 f5 02 c0       	mov    eax,0xc002f5e0
c0005e8b:	eb 0b                	jmp    c0005e98 <ff_wtoupper+0x38>
c0005e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0005e90:	b8 20 f5 02 c0       	mov    eax,0xc002f520
c0005e95:	8d 76 00             	lea    esi,[esi+0x0]
c0005e98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ea0:	8d 50 02             	lea    edx,[eax+0x2]
c0005ea3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ea7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eaa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005eaf:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005eb4:	85 c0                	test   eax,eax
c0005eb6:	0f 84 54 01 00 00    	je     c0006010 <ff_wtoupper+0x1b0>
c0005ebc:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005ec1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005ec6:	39 c2                	cmp    edx,eax
c0005ec8:	0f 82 42 01 00 00    	jb     c0006010 <ff_wtoupper+0x1b0>
c0005ece:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ed2:	8d 50 02             	lea    edx,[eax+0x2]
c0005ed5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005ed9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005edc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005ee1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ee6:	c1 e8 08             	shr    eax,0x8
c0005ee9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005eee:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005ef3:	0f b6 c0             	movzx  eax,al
c0005ef6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005efb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f00:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005f05:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005f0a:	01 ca                	add    edx,ecx
c0005f0c:	39 d0                	cmp    eax,edx
c0005f0e:	0f 8d d8 00 00 00    	jge    c0005fec <ff_wtoupper+0x18c>
c0005f14:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f19:	83 f8 08             	cmp    eax,0x8
c0005f1c:	0f 87 ea 00 00 00    	ja     c000600c <ff_wtoupper+0x1ac>
c0005f22:	8b 04 85 e0 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0b20]
c0005f29:	ff e0                	jmp    eax
c0005f2b:	90                   	nop
c0005f2c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005f31:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005f36:	29 c2                	sub    edx,eax
c0005f38:	89 d0                	mov    eax,edx
c0005f3a:	01 c0                	add    eax,eax
c0005f3c:	89 c2                	mov    edx,eax
c0005f3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f42:	01 d0                	add    eax,edx
c0005f44:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f47:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f4c:	e9 97 00 00 00       	jmp    c0005fe8 <ff_wtoupper+0x188>
c0005f51:	8d 76 00             	lea    esi,[esi+0x0]
c0005f54:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005f59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005f5d:	89 d1                	mov    ecx,edx
c0005f5f:	29 c1                	sub    ecx,eax
c0005f61:	89 c8                	mov    eax,ecx
c0005f63:	83 e0 01             	and    eax,0x1
c0005f66:	89 c2                	mov    edx,eax
c0005f68:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f6d:	29 d0                	sub    eax,edx
c0005f6f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f74:	eb 72                	jmp    c0005fe8 <ff_wtoupper+0x188>
c0005f76:	66 90                	xchg   ax,ax
c0005f78:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f7d:	83 e8 10             	sub    eax,0x10
c0005f80:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f85:	eb 61                	jmp    c0005fe8 <ff_wtoupper+0x188>
c0005f87:	90                   	nop
c0005f88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f8d:	83 e8 20             	sub    eax,0x20
c0005f90:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f95:	eb 51                	jmp    c0005fe8 <ff_wtoupper+0x188>
c0005f97:	90                   	nop
c0005f98:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005f9d:	83 e8 30             	sub    eax,0x30
c0005fa0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fa5:	eb 41                	jmp    c0005fe8 <ff_wtoupper+0x188>
c0005fa7:	90                   	nop
c0005fa8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fad:	83 e8 1a             	sub    eax,0x1a
c0005fb0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fb5:	eb 31                	jmp    c0005fe8 <ff_wtoupper+0x188>
c0005fb7:	90                   	nop
c0005fb8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fbd:	83 c0 08             	add    eax,0x8
c0005fc0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fc5:	eb 21                	jmp    c0005fe8 <ff_wtoupper+0x188>
c0005fc7:	90                   	nop
c0005fc8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fcd:	83 e8 50             	sub    eax,0x50
c0005fd0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fd5:	eb 11                	jmp    c0005fe8 <ff_wtoupper+0x188>
c0005fd7:	90                   	nop
c0005fd8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005fdd:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005fe2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005fe7:	90                   	nop
c0005fe8:	eb 22                	jmp    c000600c <ff_wtoupper+0x1ac>
c0005fea:	66 90                	xchg   ax,ax
c0005fec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ff1:	85 c0                	test   eax,eax
c0005ff3:	0f 85 a3 fe ff ff    	jne    c0005e9c <ff_wtoupper+0x3c>
c0005ff9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005ffe:	01 c0                	add    eax,eax
c0006000:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006004:	e9 93 fe ff ff       	jmp    c0005e9c <ff_wtoupper+0x3c>
c0006009:	8d 76 00             	lea    esi,[esi+0x0]
c000600c:	90                   	nop
c000600d:	8d 76 00             	lea    esi,[esi+0x0]
c0006010:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006015:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006019:	8d 76 00             	lea    esi,[esi+0x0]
c000601c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	c3                   	ret    

c0006024 <utf2ucs>:
c0006024:	57                   	push   edi
c0006025:	31 c9                	xor    ecx,ecx
c0006027:	56                   	push   esi
c0006028:	89 d7                	mov    edi,edx
c000602a:	53                   	push   ebx
c000602b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000602f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006033:	89 de                	mov    esi,ebx
c0006035:	c1 fe 08             	sar    esi,0x8
c0006038:	89 f2                	mov    edx,esi
c000603a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000603d:	41                   	inc    ecx
c000603e:	85 db                	test   ebx,ebx
c0006040:	75 e9                	jne    c000602b <utf2ucs+0x7>
c0006042:	5b                   	pop    ebx
c0006043:	5e                   	pop    esi
c0006044:	5f                   	pop    edi
c0006045:	c3                   	ret    

c0006046 <ucs2utfn>:
c0006046:	83 e1 fe             	and    ecx,0xfffffffe
c0006049:	01 d1                	add    ecx,edx
c000604b:	39 d1                	cmp    ecx,edx
c000604d:	75 04                	jne    c0006053 <ucs2utfn+0xd>
c000604f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006052:	c3                   	ret    
c0006053:	57                   	push   edi
c0006054:	56                   	push   esi
c0006055:	53                   	push   ebx
c0006056:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006059:	83 c2 02             	add    edx,0x2
c000605c:	89 de                	mov    esi,ebx
c000605e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006062:	c1 e6 08             	shl    esi,0x8
c0006065:	09 f3                	or     ebx,esi
c0006067:	83 fb 3b             	cmp    ebx,0x3b
c000606a:	74 50                	je     c00060bc <ucs2utfn+0x76>
c000606c:	83 fb 7f             	cmp    ebx,0x7f
c000606f:	7f 05                	jg     c0006076 <ucs2utfn+0x30>
c0006071:	88 18                	mov    BYTE PTR [eax],bl
c0006073:	40                   	inc    eax
c0006074:	eb 42                	jmp    c00060b8 <ucs2utfn+0x72>
c0006076:	89 de                	mov    esi,ebx
c0006078:	89 df                	mov    edi,ebx
c000607a:	c1 fe 06             	sar    esi,0x6
c000607d:	83 e7 3f             	and    edi,0x3f
c0006080:	83 cf 80             	or     edi,0xffffff80
c0006083:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006089:	7f 12                	jg     c000609d <ucs2utfn+0x57>
c000608b:	83 ce c0             	or     esi,0xffffffc0
c000608e:	83 c0 02             	add    eax,0x2
c0006091:	89 f3                	mov    ebx,esi
c0006093:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006096:	89 fb                	mov    ebx,edi
c0006098:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000609b:	eb 1b                	jmp    c00060b8 <ucs2utfn+0x72>
c000609d:	c1 fb 0c             	sar    ebx,0xc
c00060a0:	83 e6 3f             	and    esi,0x3f
c00060a3:	83 cb e0             	or     ebx,0xffffffe0
c00060a6:	83 ce 80             	or     esi,0xffffff80
c00060a9:	88 18                	mov    BYTE PTR [eax],bl
c00060ab:	89 f3                	mov    ebx,esi
c00060ad:	83 c0 03             	add    eax,0x3
c00060b0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00060b3:	89 fb                	mov    ebx,edi
c00060b5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00060b8:	39 d1                	cmp    ecx,edx
c00060ba:	75 9a                	jne    c0006056 <ucs2utfn+0x10>
c00060bc:	5b                   	pop    ebx
c00060bd:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00060c0:	5e                   	pop    esi
c00060c1:	5f                   	pop    edi
c00060c2:	c3                   	ret    

c00060c3 <isjoliet>:
c00060c3:	31 d2                	xor    edx,edx
c00060c5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00060c8:	75 26                	jne    c00060f0 <isjoliet+0x2d>
c00060ca:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00060ce:	75 20                	jne    c00060f0 <isjoliet+0x2d>
c00060d0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00060d4:	ba 02 00 00 00       	mov    edx,0x2
c00060d9:	83 f8 43             	cmp    eax,0x43
c00060dc:	74 12                	je     c00060f0 <isjoliet+0x2d>
c00060de:	ba 03 00 00 00       	mov    edx,0x3
c00060e3:	83 f8 45             	cmp    eax,0x45
c00060e6:	74 08                	je     c00060f0 <isjoliet+0x2d>
c00060e8:	31 d2                	xor    edx,edx
c00060ea:	83 f8 40             	cmp    eax,0x40
c00060ed:	0f 94 c2             	sete   dl
c00060f0:	89 d0                	mov    eax,edx
c00060f2:	c3                   	ret    

c00060f3 <htohl_32>:
c00060f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00060f5:	c3                   	ret    

c00060f6 <iso_733>:
c00060f6:	eb fb                	jmp    c00060f3 <htohl_32>

c00060f8 <bgrad_cache>:
c00060f8:	83 fa 0e             	cmp    edx,0xe
c00060fb:	77 16                	ja     c0006113 <bgrad_cache+0x1b>
c00060fd:	53                   	push   ebx
c00060fe:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006101:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0006105:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006108:	42                   	inc    edx
c0006109:	83 fa 0f             	cmp    edx,0xf
c000610c:	75 f3                	jne    c0006101 <bgrad_cache+0x9>
c000610e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006111:	5b                   	pop    ebx
c0006112:	c3                   	ret    
c0006113:	c3                   	ret    

c0006114 <ucscompare>:
c0006114:	55                   	push   ebp
c0006115:	57                   	push   edi
c0006116:	89 c7                	mov    edi,eax
c0006118:	56                   	push   esi
c0006119:	89 d6                	mov    esi,edx
c000611b:	53                   	push   ebx
c000611c:	31 d2                	xor    edx,edx
c000611e:	83 ec 1c             	sub    esp,0x1c
c0006121:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006125:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000612a:	c1 e3 08             	shl    ebx,0x8
c000612d:	09 c3                	or     ebx,eax
c000612f:	39 ca                	cmp    edx,ecx
c0006131:	7d 42                	jge    c0006175 <ucscompare+0x61>
c0006133:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006137:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000613c:	c1 e0 08             	shl    eax,0x8
c000613f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006143:	09 e8                	or     eax,ebp
c0006145:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006149:	83 f8 3b             	cmp    eax,0x3b
c000614c:	74 27                	je     c0006175 <ucscompare+0x61>
c000614e:	83 ec 0c             	sub    esp,0xc
c0006151:	50                   	push   eax
c0006152:	e8 f9 a7 ff ff       	call   c0000950 <tolower>
c0006157:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000615a:	89 c5                	mov    ebp,eax
c000615c:	e8 ef a7 ff ff       	call   c0000950 <tolower>
c0006161:	83 c4 10             	add    esp,0x10
c0006164:	39 c5                	cmp    ebp,eax
c0006166:	75 20                	jne    c0006188 <ucscompare+0x74>
c0006168:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000616c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006170:	83 c2 02             	add    edx,0x2
c0006173:	eb ac                	jmp    c0006121 <ucscompare+0xd>
c0006175:	85 db                	test   ebx,ebx
c0006177:	0f 95 c2             	setne  dl
c000617a:	31 c0                	xor    eax,eax
c000617c:	83 fb 2f             	cmp    ebx,0x2f
c000617f:	0f 95 c0             	setne  al
c0006182:	21 d0                	and    eax,edx
c0006184:	f7 d8                	neg    eax
c0006186:	eb 03                	jmp    c000618b <ucscompare+0x77>
c0006188:	83 c8 ff             	or     eax,0xffffffff
c000618b:	83 c4 1c             	add    esp,0x1c
c000618e:	5b                   	pop    ebx
c000618f:	5e                   	pop    esi
c0006190:	5f                   	pop    edi
c0006191:	5d                   	pop    ebp
c0006192:	c3                   	ret    

c0006193 <fncompare>:
c0006193:	55                   	push   ebp
c0006194:	57                   	push   edi
c0006195:	89 c7                	mov    edi,eax
c0006197:	56                   	push   esi
c0006198:	89 ce                	mov    esi,ecx
c000619a:	53                   	push   ebx
c000619b:	31 db                	xor    ebx,ebx
c000619d:	83 ec 1c             	sub    esp,0x1c
c00061a0:	39 d3                	cmp    ebx,edx
c00061a2:	7d 45                	jge    c00061e9 <fncompare+0x56>
c00061a4:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00061a8:	83 f8 3b             	cmp    eax,0x3b
c00061ab:	74 3c                	je     c00061e9 <fncompare+0x56>
c00061ad:	83 f8 2e             	cmp    eax,0x2e
c00061b0:	75 0e                	jne    c00061c0 <fncompare+0x2d>
c00061b2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00061b5:	39 d9                	cmp    ecx,ebx
c00061b7:	74 30                	je     c00061e9 <fncompare+0x56>
c00061b9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00061be:	74 29                	je     c00061e9 <fncompare+0x56>
c00061c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00061c4:	83 ec 0c             	sub    esp,0xc
c00061c7:	50                   	push   eax
c00061c8:	e8 83 a7 ff ff       	call   c0000950 <tolower>
c00061cd:	89 c5                	mov    ebp,eax
c00061cf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00061d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00061d6:	e8 75 a7 ff ff       	call   c0000950 <tolower>
c00061db:	83 c4 10             	add    esp,0x10
c00061de:	39 c5                	cmp    ebp,eax
c00061e0:	75 1e                	jne    c0006200 <fncompare+0x6d>
c00061e2:	43                   	inc    ebx
c00061e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00061e7:	eb b7                	jmp    c00061a0 <fncompare+0xd>
c00061e9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00061ed:	85 d2                	test   edx,edx
c00061ef:	0f 95 c1             	setne  cl
c00061f2:	31 c0                	xor    eax,eax
c00061f4:	83 fa 2f             	cmp    edx,0x2f
c00061f7:	0f 95 c0             	setne  al
c00061fa:	21 c8                	and    eax,ecx
c00061fc:	f7 d8                	neg    eax
c00061fe:	eb 03                	jmp    c0006203 <fncompare+0x70>
c0006200:	83 c8 ff             	or     eax,0xffffffff
c0006203:	83 c4 1c             	add    esp,0x1c
c0006206:	5b                   	pop    ebx
c0006207:	5e                   	pop    esi
c0006208:	5f                   	pop    edi
c0006209:	5d                   	pop    ebp
c000620a:	c3                   	ret    

c000620b <bclear_cache>:
c000620b:	83 ec 18             	sub    esp,0x18
c000620e:	68 e0 f8 02 c0       	push   0xc002f8e0
c0006213:	e8 2c 30 02 00       	call   c0029244 <iso_kprintf>
c0006218:	83 c4 10             	add    esp,0x10
c000621b:	31 c0                	xor    eax,eax
c000621d:	8b 14 85 20 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006224:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000622a:	8b 14 85 80 60 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc9f80]
c0006231:	40                   	inc    eax
c0006232:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006238:	83 f8 10             	cmp    eax,0x10
c000623b:	75 e0                	jne    c000621d <bclear_cache+0x12>
c000623d:	83 c4 0c             	add    esp,0xc
c0006240:	c3                   	ret    

c0006241 <bclear>:
c0006241:	eb c8                	jmp    c000620b <bclear_cache>

c0006243 <iso_break_all>:
c0006243:	83 ec 18             	sub    esp,0x18
c0006246:	68 ee f8 02 c0       	push   0xc002f8ee
c000624b:	e8 f4 2f 02 00       	call   c0029244 <iso_kprintf>
c0006250:	83 c4 10             	add    esp,0x10
c0006253:	31 c0                	xor    eax,eax
c0006255:	c7 80 b0 6d 03 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffc9250],0x1
c000625f:	05 94 00 00 00       	add    eax,0x94
c0006264:	3d 40 09 00 00       	cmp    eax,0x940
c0006269:	75 ea                	jne    c0006255 <iso_break_all+0x12>
c000626b:	83 c4 0c             	add    esp,0xc
c000626e:	c3                   	ret    

c000626f <isoReadDiscSector>:
c000626f:	83 ec 0c             	sub    esp,0xc
c0006272:	0f be 05 60 60 03 c0 	movsx  eax,BYTE PTR ds:0xc0036060
c0006279:	50                   	push   eax
c000627a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000627e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006286:	e8 5d 2f 02 00       	call   c00291e8 <isoReadDiscSectorHelper>
c000628b:	83 c4 1c             	add    esp,0x1c
c000628e:	c3                   	ret    

c000628f <bread_cache>:
c000628f:	55                   	push   ebp
c0006290:	57                   	push   edi
c0006291:	89 d7                	mov    edi,edx
c0006293:	56                   	push   esi
c0006294:	ba 0f 00 00 00       	mov    edx,0xf
c0006299:	53                   	push   ebx
c000629a:	89 c6                	mov    esi,eax
c000629c:	83 ec 0c             	sub    esp,0xc
c000629f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00062a2:	39 38                	cmp    DWORD PTR [eax],edi
c00062a4:	74 3c                	je     c00062e2 <bread_cache+0x53>
c00062a6:	4a                   	dec    edx
c00062a7:	83 fa ff             	cmp    edx,0xffffffff
c00062aa:	75 f3                	jne    c000629f <bread_cache+0x10>
c00062ac:	31 db                	xor    ebx,ebx
c00062ae:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00062b1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00062b4:	74 08                	je     c00062be <bread_cache+0x2f>
c00062b6:	43                   	inc    ebx
c00062b7:	83 fb 10             	cmp    ebx,0x10
c00062ba:	75 f2                	jne    c00062ae <bread_cache+0x1f>
c00062bc:	31 db                	xor    ebx,ebx
c00062be:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00062c1:	50                   	push   eax
c00062c2:	6a 01                	push   0x1
c00062c4:	57                   	push   edi
c00062c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00062c8:	83 c0 04             	add    eax,0x4
c00062cb:	50                   	push   eax
c00062cc:	e8 9e ff ff ff       	call   c000626f <isoReadDiscSector>
c00062d1:	83 c4 10             	add    esp,0x10
c00062d4:	83 c9 ff             	or     ecx,0xffffffff
c00062d7:	85 c0                	test   eax,eax
c00062d9:	78 13                	js     c00062ee <bread_cache+0x5f>
c00062db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00062de:	89 da                	mov    edx,ebx
c00062e0:	89 38                	mov    DWORD PTR [eax],edi
c00062e2:	89 f0                	mov    eax,esi
c00062e4:	e8 0f fe ff ff       	call   c00060f8 <bgrad_cache>
c00062e9:	b9 0f 00 00 00       	mov    ecx,0xf
c00062ee:	83 c4 0c             	add    esp,0xc
c00062f1:	89 c8                	mov    eax,ecx
c00062f3:	5b                   	pop    ebx
c00062f4:	5e                   	pop    esi
c00062f5:	5f                   	pop    edi
c00062f6:	5d                   	pop    ebp
c00062f7:	c3                   	ret    

c00062f8 <biread>:
c00062f8:	89 c2                	mov    edx,eax
c00062fa:	b8 80 60 03 c0       	mov    eax,0xc0036080
c00062ff:	eb 8e                	jmp    c000628f <bread_cache>

c0006301 <bdread>:
c0006301:	89 c2                	mov    edx,eax
c0006303:	b8 20 60 03 c0       	mov    eax,0xc0036020
c0006308:	eb 85                	jmp    c000628f <bread_cache>

c000630a <strnicmp>:
c000630a:	55                   	push   ebp
c000630b:	57                   	push   edi
c000630c:	31 ff                	xor    edi,edi
c000630e:	56                   	push   esi
c000630f:	53                   	push   ebx
c0006310:	83 ec 0c             	sub    esp,0xc
c0006313:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006317:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000631b:	74 43                	je     c0006360 <strnicmp+0x56>
c000631d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006321:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006325:	85 c0                	test   eax,eax
c0006327:	74 37                	je     c0006360 <strnicmp+0x56>
c0006329:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000632d:	85 d2                	test   edx,edx
c000632f:	74 2f                	je     c0006360 <strnicmp+0x56>
c0006331:	39 d0                	cmp    eax,edx
c0006333:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006336:	75 04                	jne    c000633c <strnicmp+0x32>
c0006338:	89 ef                	mov    edi,ebp
c000633a:	eb db                	jmp    c0006317 <strnicmp+0xd>
c000633c:	83 ec 0c             	sub    esp,0xc
c000633f:	50                   	push   eax
c0006340:	e8 0b a6 ff ff       	call   c0000950 <tolower>
c0006345:	89 c3                	mov    ebx,eax
c0006347:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000634b:	89 ef                	mov    edi,ebp
c000634d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006350:	e8 fb a5 ff ff       	call   c0000950 <tolower>
c0006355:	83 c4 10             	add    esp,0x10
c0006358:	29 c3                	sub    ebx,eax
c000635a:	89 d8                	mov    eax,ebx
c000635c:	74 b9                	je     c0006317 <strnicmp+0xd>
c000635e:	eb 02                	jmp    c0006362 <strnicmp+0x58>
c0006360:	31 c0                	xor    eax,eax
c0006362:	83 c4 0c             	add    esp,0xc
c0006365:	5b                   	pop    ebx
c0006366:	5e                   	pop    esi
c0006367:	5f                   	pop    edi
c0006368:	5d                   	pop    ebp
c0006369:	c3                   	ret    

c000636a <find_object>:
c000636a:	55                   	push   ebp
c000636b:	57                   	push   edi
c000636c:	89 c7                	mov    edi,eax
c000636e:	56                   	push   esi
c000636f:	53                   	push   ebx
c0006370:	89 d3                	mov    ebx,edx
c0006372:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006378:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000637f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006387:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c000638e:	74 0b                	je     c000639b <find_object+0x31>
c0006390:	89 fa                	mov    edx,edi
c0006392:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006396:	e8 89 fc ff ff       	call   c0006024 <utf2ucs>
c000639b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000639e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00063a2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00063a7:	7e 11                	jle    c00063ba <find_object+0x50>
c00063a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00063ad:	e8 46 ff ff ff       	call   c00062f8 <biread>
c00063b2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00063b6:	85 c0                	test   eax,eax
c00063b8:	79 07                	jns    c00063c1 <find_object+0x57>
c00063ba:	31 db                	xor    ebx,ebx
c00063bc:	e9 56 01 00 00       	jmp    c0006517 <find_object+0x1ad>
c00063c1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00063c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00063cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00063d1:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c00063d8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00063dc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00063df:	85 f6                	test   esi,esi
c00063e1:	75 0e                	jne    c00063f1 <find_object+0x87>
c00063e3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00063e7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00063ef:	eb b1                	jmp    c00063a2 <find_object+0x38>
c00063f1:	8b 2d 94 76 03 c0    	mov    ebp,DWORD PTR ds:0xc0037694
c00063f7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00063fb:	85 ed                	test   ebp,ebp
c00063fd:	89 c8                	mov    eax,ecx
c00063ff:	74 2b                	je     c000642c <find_object+0xc2>
c0006401:	8d 43 21             	lea    eax,[ebx+0x21]
c0006404:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006408:	e8 07 fd ff ff       	call   c0006114 <ucscompare>
c000640d:	85 c0                	test   eax,eax
c000640f:	0f 84 bf 00 00 00    	je     c00064d4 <find_object+0x16a>
c0006415:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006418:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000641c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006424:	0f 8e da 00 00 00    	jle    c0006504 <find_object+0x19a>
c000642a:	eb b7                	jmp    c00063e3 <find_object+0x79>
c000642c:	29 ce                	sub    esi,ecx
c000642e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006432:	a8 01                	test   al,0x1
c0006434:	74 05                	je     c000643b <find_object+0xd1>
c0006436:	83 ee 21             	sub    esi,0x21
c0006439:	eb 5a                	jmp    c0006495 <find_object+0x12b>
c000643b:	42                   	inc    edx
c000643c:	83 ee 22             	sub    esi,0x22
c000643f:	eb 54                	jmp    c0006495 <find_object+0x12b>
c0006441:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006444:	48                   	dec    eax
c0006445:	3c 01                	cmp    al,0x1
c0006447:	77 51                	ja     c000649a <find_object+0x130>
c0006449:	50                   	push   eax
c000644a:	6a 02                	push   0x2
c000644c:	68 fd f8 02 c0       	push   0xc002f8fd
c0006451:	52                   	push   edx
c0006452:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006456:	e8 85 a3 ff ff       	call   c00007e0 <strncmp>
c000645b:	83 c4 10             	add    esp,0x10
c000645e:	85 c0                	test   eax,eax
c0006460:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006464:	75 27                	jne    c000648d <find_object+0x123>
c0006466:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000646a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000646d:	50                   	push   eax
c000646e:	8d 42 05             	lea    eax,[edx+0x5]
c0006471:	55                   	push   ebp
c0006472:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006476:	50                   	push   eax
c0006477:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000647b:	50                   	push   eax
c000647c:	e8 ff a1 ff ff       	call   c0000680 <strncpy>
c0006481:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006486:	83 c4 10             	add    esp,0x10
c0006489:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000648d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006491:	29 c6                	sub    esi,eax
c0006493:	01 c2                	add    edx,eax
c0006495:	83 fe 03             	cmp    esi,0x3
c0006498:	7f a7                	jg     c0006441 <find_object+0xd7>
c000649a:	85 ed                	test   ebp,ebp
c000649c:	7e 40                	jle    c00064de <find_object+0x174>
c000649e:	51                   	push   ecx
c000649f:	51                   	push   ecx
c00064a0:	6a 2f                	push   0x2f
c00064a2:	57                   	push   edi
c00064a3:	e8 f8 a2 ff ff       	call   c00007a0 <strchr>
c00064a8:	83 c4 10             	add    esp,0x10
c00064ab:	85 c0                	test   eax,eax
c00064ad:	74 04                	je     c00064b3 <find_object+0x149>
c00064af:	29 f8                	sub    eax,edi
c00064b1:	eb 0c                	jmp    c00064bf <find_object+0x155>
c00064b3:	83 ec 0c             	sub    esp,0xc
c00064b6:	57                   	push   edi
c00064b7:	e8 b4 a0 ff ff       	call   c0000570 <strlen>
c00064bc:	83 c4 10             	add    esp,0x10
c00064bf:	52                   	push   edx
c00064c0:	50                   	push   eax
c00064c1:	57                   	push   edi
c00064c2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00064c6:	50                   	push   eax
c00064c7:	e8 3e fe ff ff       	call   c000630a <strnicmp>
c00064cc:	83 c4 10             	add    esp,0x10
c00064cf:	e9 39 ff ff ff       	jmp    c000640d <find_object+0xa3>
c00064d4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00064d8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00064dc:	eb 1e                	jmp    c00064fc <find_object+0x192>
c00064de:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00064e2:	8d 43 21             	lea    eax,[ebx+0x21]
c00064e5:	89 f9                	mov    ecx,edi
c00064e7:	e8 a7 fc ff ff       	call   c0006193 <fncompare>
c00064ec:	85 c0                	test   eax,eax
c00064ee:	0f 85 21 ff ff ff    	jne    c0006415 <find_object+0xab>
c00064f4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00064f8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00064fc:	0f 85 13 ff ff ff    	jne    c0006415 <find_object+0xab>
c0006502:	eb 13                	jmp    c0006517 <find_object+0x1ad>
c0006504:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006508:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000650c:	0f 8f b7 fe ff ff    	jg     c00063c9 <find_object+0x5f>
c0006512:	e9 cc fe ff ff       	jmp    c00063e3 <find_object+0x79>
c0006517:	81 c4 2c 01 00 00    	add    esp,0x12c
c000651d:	89 d8                	mov    eax,ebx
c000651f:	5b                   	pop    ebx
c0006520:	5e                   	pop    esi
c0006521:	5f                   	pop    edi
c0006522:	5d                   	pop    ebp
c0006523:	c3                   	ret    

c0006524 <find_object_path>:
c0006524:	55                   	push   ebp
c0006525:	57                   	push   edi
c0006526:	89 d7                	mov    edi,edx
c0006528:	56                   	push   esi
c0006529:	89 c6                	mov    esi,eax
c000652b:	53                   	push   ebx
c000652c:	89 cb                	mov    ebx,ecx
c000652e:	83 ec 0c             	sub    esp,0xc
c0006531:	50                   	push   eax
c0006532:	50                   	push   eax
c0006533:	6a 2f                	push   0x2f
c0006535:	56                   	push   esi
c0006536:	e8 65 a2 ff ff       	call   c00007a0 <strchr>
c000653b:	83 c4 10             	add    esp,0x10
c000653e:	89 c5                	mov    ebp,eax
c0006540:	85 c0                	test   eax,eax
c0006542:	74 3a                	je     c000657e <find_object_path+0x5a>
c0006544:	39 ee                	cmp    esi,ebp
c0006546:	74 31                	je     c0006579 <find_object_path+0x55>
c0006548:	8d 43 0a             	lea    eax,[ebx+0xa]
c000654b:	e8 a6 fb ff ff       	call   c00060f6 <iso_733>
c0006550:	89 c2                	mov    edx,eax
c0006552:	8d 43 02             	lea    eax,[ebx+0x2]
c0006555:	e8 9c fb ff ff       	call   c00060f6 <iso_733>
c000655a:	83 ec 0c             	sub    esp,0xc
c000655d:	89 c1                	mov    ecx,eax
c000655f:	52                   	push   edx
c0006560:	89 f0                	mov    eax,esi
c0006562:	ba 01 00 00 00       	mov    edx,0x1
c0006567:	e8 fe fd ff ff       	call   c000636a <find_object>
c000656c:	83 c4 10             	add    esp,0x10
c000656f:	89 c3                	mov    ebx,eax
c0006571:	85 c0                	test   eax,eax
c0006573:	75 04                	jne    c0006579 <find_object_path+0x55>
c0006575:	31 db                	xor    ebx,ebx
c0006577:	eb 36                	jmp    c00065af <find_object_path+0x8b>
c0006579:	8d 75 01             	lea    esi,[ebp+0x1]
c000657c:	eb b3                	jmp    c0006531 <find_object_path+0xd>
c000657e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006581:	74 28                	je     c00065ab <find_object_path+0x87>
c0006583:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006586:	e8 6b fb ff ff       	call   c00060f6 <iso_733>
c000658b:	89 c2                	mov    edx,eax
c000658d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006590:	e8 61 fb ff ff       	call   c00060f6 <iso_733>
c0006595:	83 ec 0c             	sub    esp,0xc
c0006598:	89 c1                	mov    ecx,eax
c000659a:	52                   	push   edx
c000659b:	89 f0                	mov    eax,esi
c000659d:	89 fa                	mov    edx,edi
c000659f:	e8 c6 fd ff ff       	call   c000636a <find_object>
c00065a4:	83 c4 10             	add    esp,0x10
c00065a7:	89 c3                	mov    ebx,eax
c00065a9:	eb 04                	jmp    c00065af <find_object_path+0x8b>
c00065ab:	85 ff                	test   edi,edi
c00065ad:	74 c6                	je     c0006575 <find_object_path+0x51>
c00065af:	83 c4 0c             	add    esp,0xc
c00065b2:	89 d8                	mov    eax,ebx
c00065b4:	5b                   	pop    ebx
c00065b5:	5e                   	pop    esi
c00065b6:	5f                   	pop    edi
c00065b7:	5d                   	pop    ebp
c00065b8:	c3                   	ret    

c00065b9 <stricmp>:
c00065b9:	57                   	push   edi
c00065ba:	56                   	push   esi
c00065bb:	31 f6                	xor    esi,esi
c00065bd:	53                   	push   ebx
c00065be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065c2:	83 ec 0c             	sub    esp,0xc
c00065c5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00065c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065cd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00065d1:	50                   	push   eax
c00065d2:	e8 59 a3 ff ff       	call   c0000930 <toupper>
c00065d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00065da:	e8 71 a3 ff ff       	call   c0000950 <tolower>
c00065df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00065e2:	89 c3                	mov    ebx,eax
c00065e4:	e8 47 a3 ff ff       	call   c0000930 <toupper>
c00065e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00065ec:	e8 5f a3 ff ff       	call   c0000950 <tolower>
c00065f1:	83 c4 10             	add    esp,0x10
c00065f4:	39 c3                	cmp    ebx,eax
c00065f6:	75 05                	jne    c00065fd <stricmp+0x44>
c00065f8:	46                   	inc    esi
c00065f9:	85 db                	test   ebx,ebx
c00065fb:	75 c1                	jne    c00065be <stricmp+0x5>
c00065fd:	29 c3                	sub    ebx,eax
c00065ff:	89 d8                	mov    eax,ebx
c0006601:	5b                   	pop    ebx
c0006602:	5e                   	pop    esi
c0006603:	5f                   	pop    edi
c0006604:	c3                   	ret    

c0006605 <iso_open>:
c0006605:	57                   	push   edi
c0006606:	31 c0                	xor    eax,eax
c0006608:	56                   	push   esi
c0006609:	b9 60 76 03 c0       	mov    ecx,0xc0037660
c000660e:	53                   	push   ebx
c000660f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006614:	0f 95 c0             	setne  al
c0006617:	89 c2                	mov    edx,eax
c0006619:	89 c6                	mov    esi,eax
c000661b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000661f:	e8 00 ff ff ff       	call   c0006524 <find_object_path>
c0006624:	83 ca ff             	or     edx,0xffffffff
c0006627:	85 c0                	test   eax,eax
c0006629:	74 5e                	je     c0006689 <iso_open+0x84>
c000662b:	89 c1                	mov    ecx,eax
c000662d:	31 d2                	xor    edx,edx
c000662f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006635:	83 bf 20 6d 03 c0 00 	cmp    DWORD PTR [edi-0x3ffc92e0],0x0
c000663c:	75 42                	jne    c0006680 <iso_open+0x7b>
c000663e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006641:	c7 87 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffc92e0],0xffffffff
c000664b:	e8 a6 fa ff ff       	call   c00060f6 <iso_733>
c0006650:	89 b7 24 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92dc],esi
c0006656:	89 87 20 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92e0],eax
c000665c:	c7 87 28 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc92d8],0x0
c0006666:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006669:	e8 88 fa ff ff       	call   c00060f6 <iso_733>
c000666e:	c7 87 b0 6d 03 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffc9250],0x0
c0006678:	89 87 2c 6d 03 c0    	mov    DWORD PTR [edi-0x3ffc92d4],eax
c000667e:	eb 09                	jmp    c0006689 <iso_open+0x84>
c0006680:	42                   	inc    edx
c0006681:	83 fa 10             	cmp    edx,0x10
c0006684:	75 a9                	jne    c000662f <iso_open+0x2a>
c0006686:	83 ca ff             	or     edx,0xffffffff
c0006689:	5b                   	pop    ebx
c000668a:	89 d0                	mov    eax,edx
c000668c:	5e                   	pop    esi
c000668d:	5f                   	pop    edi
c000668e:	c3                   	ret    

c000668f <iso_close>:
c000668f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006693:	83 f8 0f             	cmp    eax,0xf
c0006696:	7f 10                	jg     c00066a8 <iso_close+0x19>
c0006698:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000669e:	c7 80 20 6d 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc92e0],0x0
c00066a8:	e9 5e fb ff ff       	jmp    c000620b <bclear_cache>

c00066ad <iso_read>:
c00066ad:	55                   	push   ebp
c00066ae:	57                   	push   edi
c00066af:	56                   	push   esi
c00066b0:	53                   	push   ebx
c00066b1:	83 ec 1c             	sub    esp,0x1c
c00066b4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00066b8:	83 fd 0f             	cmp    ebp,0xf
c00066bb:	7e 0a                	jle    c00066c7 <iso_read+0x1a>
c00066bd:	83 c8 ff             	or     eax,0xffffffff
c00066c0:	89 c2                	mov    edx,eax
c00066c2:	e9 f4 00 00 00       	jmp    c00067bb <iso_read+0x10e>
c00066c7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00066cd:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00066d4:	74 e7                	je     c00066bd <iso_read+0x10>
c00066d6:	8b 95 b0 6d 03 c0    	mov    edx,DWORD PTR [ebp-0x3ffc9250]
c00066dc:	85 d2                	test   edx,edx
c00066de:	75 dd                	jne    c00066bd <iso_read+0x10>
c00066e0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00066e5:	0f 84 cd 00 00 00    	je     c00067b8 <iso_read+0x10b>
c00066eb:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c00066f1:	8b 8d 2c 6d 03 c0    	mov    ecx,DWORD PTR [ebp-0x3ffc92d4]
c00066f7:	29 c1                	sub    ecx,eax
c00066f9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00066fd:	76 04                	jbe    c0006703 <iso_read+0x56>
c00066ff:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006703:	85 c9                	test   ecx,ecx
c0006705:	0f 84 ad 00 00 00    	je     c00067b8 <iso_read+0x10b>
c000670b:	89 c6                	mov    esi,eax
c000670d:	bb 00 08 00 00       	mov    ebx,0x800
c0006712:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006718:	c1 e8 0b             	shr    eax,0xb
c000671b:	29 f3                	sub    ebx,esi
c000671d:	03 85 20 6d 03 c0    	add    eax,DWORD PTR [ebp-0x3ffc92e0]
c0006723:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006729:	7e 3f                	jle    c000676a <iso_read+0xbd>
c000672b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006731:	75 37                	jne    c000676a <iso_read+0xbd>
c0006733:	be 20 00 00 00       	mov    esi,0x20
c0006738:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000673e:	7f 05                	jg     c0006745 <iso_read+0x98>
c0006740:	89 ce                	mov    esi,ecx
c0006742:	c1 fe 0b             	sar    esi,0xb
c0006745:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006749:	89 f3                	mov    ebx,esi
c000674b:	c1 e3 0b             	shl    ebx,0xb
c000674e:	52                   	push   edx
c000674f:	56                   	push   esi
c0006750:	50                   	push   eax
c0006751:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006755:	e8 15 fb ff ff       	call   c000626f <isoReadDiscSector>
c000675a:	83 c4 10             	add    esp,0x10
c000675d:	85 c0                	test   eax,eax
c000675f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006763:	7f 3e                	jg     c00067a3 <iso_read+0xf6>
c0006765:	e9 53 ff ff ff       	jmp    c00066bd <iso_read+0x10>
c000676a:	39 cb                	cmp    ebx,ecx
c000676c:	7e 02                	jle    c0006770 <iso_read+0xc3>
c000676e:	89 cb                	mov    ebx,ecx
c0006770:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006774:	e8 88 fb ff ff       	call   c0006301 <bdread>
c0006779:	85 c0                	test   eax,eax
c000677b:	0f 88 3c ff ff ff    	js     c00066bd <iso_read+0x10>
c0006781:	8b 0c 85 20 60 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc9fe0]
c0006788:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000678c:	8b 85 28 6d 03 c0    	mov    eax,DWORD PTR [ebp-0x3ffc92d8]
c0006792:	25 ff 07 00 00       	and    eax,0x7ff
c0006797:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000679b:	89 d9                	mov    ecx,ebx
c000679d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000679f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00067a3:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00067a7:	01 9d 28 6d 03 c0    	add    DWORD PTR [ebp-0x3ffc92d8],ebx
c00067ad:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00067b1:	01 da                	add    edx,ebx
c00067b3:	e9 28 ff ff ff       	jmp    c00066e0 <iso_read+0x33>
c00067b8:	89 d0                	mov    eax,edx
c00067ba:	99                   	cdq    
c00067bb:	83 c4 1c             	add    esp,0x1c
c00067be:	5b                   	pop    ebx
c00067bf:	5e                   	pop    esi
c00067c0:	5f                   	pop    edi
c00067c1:	5d                   	pop    ebp
c00067c2:	c3                   	ret    

c00067c3 <iso_seek>:
c00067c3:	55                   	push   ebp
c00067c4:	83 c8 ff             	or     eax,0xffffffff
c00067c7:	57                   	push   edi
c00067c8:	89 c2                	mov    edx,eax
c00067ca:	56                   	push   esi
c00067cb:	53                   	push   ebx
c00067cc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00067d0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00067d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00067d8:	83 fe 0f             	cmp    esi,0xf
c00067db:	7f 65                	jg     c0006842 <iso_seek+0x7f>
c00067dd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00067e3:	8d 8d 20 6d 03 c0    	lea    ecx,[ebp-0x3ffc92e0]
c00067e9:	83 bd 20 6d 03 c0 00 	cmp    DWORD PTR [ebp-0x3ffc92e0],0x0
c00067f0:	74 50                	je     c0006842 <iso_seek+0x7f>
c00067f2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00067f9:	75 47                	jne    c0006842 <iso_seek+0x7f>
c00067fb:	83 fb 01             	cmp    ebx,0x1
c00067fe:	74 0e                	je     c000680e <iso_seek+0x4b>
c0006800:	83 fb 02             	cmp    ebx,0x2
c0006803:	74 0e                	je     c0006813 <iso_seek+0x50>
c0006805:	85 db                	test   ebx,ebx
c0006807:	75 39                	jne    c0006842 <iso_seek+0x7f>
c0006809:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c000680c:	eb 0d                	jmp    c000681b <iso_seek+0x58>
c000680e:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006811:	eb 08                	jmp    c000681b <iso_seek+0x58>
c0006813:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006816:	01 f8                	add    eax,edi
c0006818:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000681b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006821:	8b 88 2c 6d 03 c0    	mov    ecx,DWORD PTR [eax-0x3ffc92d4]
c0006827:	05 20 6d 03 c0       	add    eax,0xc0036d20
c000682c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000682f:	76 03                	jbe    c0006834 <iso_seek+0x71>
c0006831:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006834:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000683a:	8b 82 28 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d8]
c0006840:	31 d2                	xor    edx,edx
c0006842:	5b                   	pop    ebx
c0006843:	5e                   	pop    esi
c0006844:	5f                   	pop    edi
c0006845:	5d                   	pop    ebp
c0006846:	c3                   	ret    

c0006847 <iso_tell>:
c0006847:	83 c8 ff             	or     eax,0xffffffff
c000684a:	53                   	push   ebx
c000684b:	89 c2                	mov    edx,eax
c000684d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006851:	83 f9 0f             	cmp    ecx,0xf
c0006854:	7f 20                	jg     c0006876 <iso_tell+0x2f>
c0006856:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000685c:	83 bb 20 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc92e0],0x0
c0006863:	74 11                	je     c0006876 <iso_tell+0x2f>
c0006865:	83 bb b0 6d 03 c0 00 	cmp    DWORD PTR [ebx-0x3ffc9250],0x0
c000686c:	75 08                	jne    c0006876 <iso_tell+0x2f>
c000686e:	8b 83 28 6d 03 c0    	mov    eax,DWORD PTR [ebx-0x3ffc92d8]
c0006874:	31 d2                	xor    edx,edx
c0006876:	5b                   	pop    ebx
c0006877:	c3                   	ret    

c0006878 <iso_total>:
c0006878:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000687c:	83 c8 ff             	or     eax,0xffffffff
c000687f:	83 fa 0f             	cmp    edx,0xf
c0006882:	7f 1e                	jg     c00068a2 <iso_total+0x2a>
c0006884:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000688a:	83 ba 20 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc92e0],0x0
c0006891:	74 0f                	je     c00068a2 <iso_total+0x2a>
c0006893:	83 ba b0 6d 03 c0 00 	cmp    DWORD PTR [edx-0x3ffc9250],0x0
c000689a:	75 06                	jne    c00068a2 <iso_total+0x2a>
c000689c:	8b 82 2c 6d 03 c0    	mov    eax,DWORD PTR [edx-0x3ffc92d4]
c00068a2:	c3                   	ret    

c00068a3 <fn_postprocess>:
c00068a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00068a7:	89 d0                	mov    eax,edx
c00068a9:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00068ac:	83 f9 3b             	cmp    ecx,0x3b
c00068af:	74 07                	je     c00068b8 <fn_postprocess+0x15>
c00068b1:	85 c9                	test   ecx,ecx
c00068b3:	74 03                	je     c00068b8 <fn_postprocess+0x15>
c00068b5:	40                   	inc    eax
c00068b6:	eb f1                	jmp    c00068a9 <fn_postprocess+0x6>
c00068b8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00068bb:	39 d0                	cmp    eax,edx
c00068bd:	76 0a                	jbe    c00068c9 <fn_postprocess+0x26>
c00068bf:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00068c3:	75 04                	jne    c00068c9 <fn_postprocess+0x26>
c00068c5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00068c9:	c3                   	ret    

c00068ca <iso_readdir>:
c00068ca:	55                   	push   ebp
c00068cb:	57                   	push   edi
c00068cc:	56                   	push   esi
c00068cd:	53                   	push   ebx
c00068ce:	83 ec 1c             	sub    esp,0x1c
c00068d1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00068d5:	83 fb 0f             	cmp    ebx,0xf
c00068d8:	7f 28                	jg     c0006902 <iso_readdir+0x38>
c00068da:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00068e0:	8d b8 20 6d 03 c0    	lea    edi,[eax-0x3ffc92e0]
c00068e6:	83 b8 20 6d 03 c0 00 	cmp    DWORD PTR [eax-0x3ffc92e0],0x0
c00068ed:	74 13                	je     c0006902 <iso_readdir+0x38>
c00068ef:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00068f3:	74 0d                	je     c0006902 <iso_readdir+0x38>
c00068f5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00068fc:	0f 84 b1 00 00 00    	je     c00069b3 <iso_readdir+0xe9>
c0006902:	83 ec 0c             	sub    esp,0xc
c0006905:	68 00 f9 02 c0       	push   0xc002f900
c000690a:	e8 35 29 02 00       	call   c0029244 <iso_kprintf>
c000690f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006912:	e8 49 29 02 00       	call   c0029260 <iso_kprintfd>
c0006917:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c000691d:	c7 04 24 05 f9 02 c0 	mov    DWORD PTR [esp],0xc002f905
c0006924:	e8 1b 29 02 00       	call   c0029244 <iso_kprintf>
c0006929:	5d                   	pop    ebp
c000692a:	ff b3 20 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92e0]
c0006930:	e8 2b 29 02 00       	call   c0029260 <iso_kprintfd>
c0006935:	c7 04 24 0b f9 02 c0 	mov    DWORD PTR [esp],0xc002f90b
c000693c:	e8 03 29 02 00       	call   c0029244 <iso_kprintf>
c0006941:	58                   	pop    eax
c0006942:	ff b3 24 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc92dc]
c0006948:	e8 13 29 02 00       	call   c0029260 <iso_kprintfd>
c000694d:	c7 04 24 11 f9 02 c0 	mov    DWORD PTR [esp],0xc002f911
c0006954:	e8 eb 28 02 00       	call   c0029244 <iso_kprintf>
c0006959:	58                   	pop    eax
c000695a:	ff b3 b0 6d 03 c0    	push   DWORD PTR [ebx-0x3ffc9250]
c0006960:	e8 fb 28 02 00       	call   c0029260 <iso_kprintfd>
c0006965:	83 c4 10             	add    esp,0x10
c0006968:	eb 42                	jmp    c00069ac <iso_readdir+0xe2>
c000696a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000696d:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c0006974:	89 d1                	mov    ecx,edx
c0006976:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000697c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006980:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006983:	75 35                	jne    c00069ba <iso_readdir+0xf0>
c0006985:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000698b:	81 c2 00 08 00 00    	add    edx,0x800
c0006991:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006994:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006997:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c000699a:	73 1e                	jae    c00069ba <iso_readdir+0xf0>
c000699c:	c1 ea 0b             	shr    edx,0xb
c000699f:	8b 07                	mov    eax,DWORD PTR [edi]
c00069a1:	01 d0                	add    eax,edx
c00069a3:	e8 50 f9 ff ff       	call   c00062f8 <biread>
c00069a8:	85 c0                	test   eax,eax
c00069aa:	79 be                	jns    c000696a <iso_readdir+0xa0>
c00069ac:	31 c0                	xor    eax,eax
c00069ae:	e9 66 01 00 00       	jmp    c0006b19 <iso_readdir+0x24f>
c00069b3:	31 f6                	xor    esi,esi
c00069b5:	83 c8 ff             	or     eax,0xffffffff
c00069b8:	eb da                	jmp    c0006994 <iso_readdir+0xca>
c00069ba:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00069c0:	8b ba 28 6d 03 c0    	mov    edi,DWORD PTR [edx-0x3ffc92d8]
c00069c6:	81 c2 20 6d 03 c0    	add    edx,0xc0036d20
c00069cc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00069cf:	73 db                	jae    c00069ac <iso_readdir+0xe2>
c00069d1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00069d5:	75 34                	jne    c0006a0b <iso_readdir+0x141>
c00069d7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00069db:	75 2e                	jne    c0006a0b <iso_readdir+0x141>
c00069dd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00069e0:	8b 34 85 80 60 03 c0 	mov    esi,DWORD PTR [eax*4-0x3ffc9f80]
c00069e7:	01 f9                	add    ecx,edi
c00069e9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00069ec:	89 c8                	mov    eax,ecx
c00069ee:	25 ff 07 00 00       	and    eax,0x7ff
c00069f3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c00069f8:	01 c8                	add    eax,ecx
c00069fa:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00069fd:	25 ff 07 00 00       	and    eax,0x7ff
c0006a02:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006a06:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a09:	74 a1                	je     c00069ac <iso_readdir+0xe2>
c0006a0b:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006a11:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006a15:	8d 56 21             	lea    edx,[esi+0x21]
c0006a18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006a1c:	8d a8 38 6d 03 c0    	lea    ebp,[eax-0x3ffc92c8]
c0006a22:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006a29:	74 0c                	je     c0006a37 <iso_readdir+0x16d>
c0006a2b:	89 e8                	mov    eax,ebp
c0006a2d:	e8 14 f6 ff ff       	call   c0006046 <ucs2utfn>
c0006a32:	e9 a6 00 00 00       	jmp    c0006add <iso_readdir+0x213>
c0006a37:	57                   	push   edi
c0006a38:	51                   	push   ecx
c0006a39:	52                   	push   edx
c0006a3a:	55                   	push   ebp
c0006a3b:	e8 40 9c ff ff       	call   c0000680 <strncpy>
c0006a40:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006a44:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006a4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006a4d:	c6 84 01 38 6d 03 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffc92c8],0x0
c0006a55:	e8 49 fe ff ff       	call   c00068a3 <fn_postprocess>
c0006a5a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006a5e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a61:	83 c4 10             	add    esp,0x10
c0006a64:	29 d0                	sub    eax,edx
c0006a66:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006a6a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006a6e:	74 05                	je     c0006a75 <iso_readdir+0x1ab>
c0006a70:	83 e8 21             	sub    eax,0x21
c0006a73:	eb 04                	jmp    c0006a79 <iso_readdir+0x1af>
c0006a75:	47                   	inc    edi
c0006a76:	83 e8 22             	sub    eax,0x22
c0006a79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006a7d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006a83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a87:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006a8c:	7e 4f                	jle    c0006add <iso_readdir+0x213>
c0006a8e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006a91:	48                   	dec    eax
c0006a92:	3c 01                	cmp    al,0x1
c0006a94:	77 47                	ja     c0006add <iso_readdir+0x213>
c0006a96:	52                   	push   edx
c0006a97:	6a 02                	push   0x2
c0006a99:	68 fd f8 02 c0       	push   0xc002f8fd
c0006a9e:	57                   	push   edi
c0006a9f:	e8 3c 9d ff ff       	call   c00007e0 <strncmp>
c0006aa4:	83 c4 10             	add    esp,0x10
c0006aa7:	85 c0                	test   eax,eax
c0006aa9:	75 26                	jne    c0006ad1 <iso_readdir+0x207>
c0006aab:	50                   	push   eax
c0006aac:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ab0:	83 e8 05             	sub    eax,0x5
c0006ab3:	50                   	push   eax
c0006ab4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ab7:	50                   	push   eax
c0006ab8:	55                   	push   ebp
c0006ab9:	e8 c2 9b ff ff       	call   c0000680 <strncpy>
c0006abe:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006ac2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ac6:	83 c4 10             	add    esp,0x10
c0006ac9:	c6 84 08 33 6d 03 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffc92cd],0x0
c0006ad1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ad5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006ad9:	01 c7                	add    edi,eax
c0006adb:	eb aa                	jmp    c0006a87 <iso_readdir+0x1bd>
c0006add:	83 c8 ff             	or     eax,0xffffffff
c0006ae0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006ae4:	89 c2                	mov    edx,eax
c0006ae6:	75 0a                	jne    c0006af2 <iso_readdir+0x228>
c0006ae8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006aeb:	e8 06 f6 ff ff       	call   c00060f6 <iso_733>
c0006af0:	31 d2                	xor    edx,edx
c0006af2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006af8:	89 83 30 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92d0],eax
c0006afe:	89 93 34 6d 03 c0    	mov    DWORD PTR [ebx-0x3ffc92cc],edx
c0006b04:	81 c3 20 6d 03 c0    	add    ebx,0xc0036d20
c0006b0a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b0d:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006b10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006b14:	05 30 6d 03 c0       	add    eax,0xc0036d30
c0006b19:	83 c4 1c             	add    esp,0x1c
c0006b1c:	5b                   	pop    ebx
c0006b1d:	5e                   	pop    esi
c0006b1e:	5f                   	pop    edi
c0006b1f:	5d                   	pop    ebp
c0006b20:	c3                   	ret    

c0006b21 <iso_reset>:
c0006b21:	83 ec 18             	sub    esp,0x18
c0006b24:	68 1a f9 02 c0       	push   0xc002f91a
c0006b29:	e8 16 27 02 00       	call   c0029244 <iso_kprintf>
c0006b2e:	e8 10 f7 ff ff       	call   c0006243 <iso_break_all>
c0006b33:	e8 09 f7 ff ff       	call   c0006241 <bclear>
c0006b38:	31 c0                	xor    eax,eax
c0006b3a:	83 c4 1c             	add    esp,0x1c
c0006b3d:	c3                   	ret    

c0006b3e <init_percd>:
c0006b3e:	57                   	push   edi
c0006b3f:	56                   	push   esi
c0006b40:	53                   	push   ebx
c0006b41:	bb 01 00 00 00       	mov    ebx,0x1
c0006b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b4a:	a2 60 60 03 c0       	mov    ds:0xc0036060,al
c0006b4f:	e8 cd ff ff ff       	call   c0006b21 <iso_reset>
c0006b54:	c7 05 94 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037694,0x0
c0006b5e:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006b63:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006b67:	e8 8c f7 ff ff       	call   c00062f8 <biread>
c0006b6c:	89 c6                	mov    esi,eax
c0006b6e:	85 c0                	test   eax,eax
c0006b70:	0f 88 ba 00 00 00    	js     c0006c30 <init_percd+0xf2>
c0006b76:	8b 04 85 80 60 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc9f80]
c0006b7d:	83 c0 04             	add    eax,0x4
c0006b80:	52                   	push   edx
c0006b81:	6a 06                	push   0x6
c0006b83:	68 25 f9 02 c0       	push   0xc002f925
c0006b88:	50                   	push   eax
c0006b89:	e8 f2 97 ff ff       	call   c0000380 <memcmp>
c0006b8e:	83 c4 10             	add    esp,0x10
c0006b91:	85 c0                	test   eax,eax
c0006b93:	74 08                	je     c0006b9d <init_percd+0x5f>
c0006b95:	43                   	inc    ebx
c0006b96:	83 fb 04             	cmp    ebx,0x4
c0006b99:	75 c3                	jne    c0006b5e <init_percd+0x20>
c0006b9b:	eb 1a                	jmp    c0006bb7 <init_percd+0x79>
c0006b9d:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006ba4:	83 c0 5c             	add    eax,0x5c
c0006ba7:	e8 17 f5 ff ff       	call   c00060c3 <isjoliet>
c0006bac:	a3 94 76 03 c0       	mov    ds:0xc0037694,eax
c0006bb1:	85 c0                	test   eax,eax
c0006bb3:	74 e0                	je     c0006b95 <init_percd+0x57>
c0006bb5:	eb 3e                	jmp    c0006bf5 <init_percd+0xb7>
c0006bb7:	83 3d 94 76 03 c0 00 	cmp    DWORD PTR ds:0xc0037694,0x0
c0006bbe:	75 35                	jne    c0006bf5 <init_percd+0xb7>
c0006bc0:	a1 8c 76 03 c0       	mov    eax,ds:0xc003768c
c0006bc5:	83 c0 10             	add    eax,0x10
c0006bc8:	e8 2b f7 ff ff       	call   c00062f8 <biread>
c0006bcd:	89 c6                	mov    esi,eax
c0006bcf:	85 c0                	test   eax,eax
c0006bd1:	78 5f                	js     c0006c32 <init_percd+0xf4>
c0006bd3:	83 cb ff             	or     ebx,0xffffffff
c0006bd6:	50                   	push   eax
c0006bd7:	8b 04 b5 80 60 03 c0 	mov    eax,DWORD PTR [esi*4-0x3ffc9f80]
c0006bde:	6a 06                	push   0x6
c0006be0:	83 c0 04             	add    eax,0x4
c0006be3:	68 2c f9 02 c0       	push   0xc002f92c
c0006be8:	50                   	push   eax
c0006be9:	e8 92 97 ff ff       	call   c0000380 <memcmp>
c0006bee:	83 c4 10             	add    esp,0x10
c0006bf1:	85 c0                	test   eax,eax
c0006bf3:	75 3d                	jne    c0006c32 <init_percd+0xf4>
c0006bf5:	8b 34 b5 80 60 03 c0 	mov    esi,DWORD PTR [esi*4-0x3ffc9f80]
c0006bfc:	bf 60 76 03 c0       	mov    edi,0xc0037660
c0006c01:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006c07:	b9 22 00 00 00       	mov    ecx,0x22
c0006c0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006c0e:	b8 62 76 03 c0       	mov    eax,0xc0037662
c0006c13:	31 db                	xor    ebx,ebx
c0006c15:	e8 dc f4 ff ff       	call   c00060f6 <iso_733>
c0006c1a:	a3 88 76 03 c0       	mov    ds:0xc0037688,eax
c0006c1f:	b8 6a 76 03 c0       	mov    eax,0xc003766a
c0006c24:	e8 cd f4 ff ff       	call   c00060f6 <iso_733>
c0006c29:	a3 84 76 03 c0       	mov    ds:0xc0037684,eax
c0006c2e:	eb 02                	jmp    c0006c32 <init_percd+0xf4>
c0006c30:	89 c3                	mov    ebx,eax
c0006c32:	89 d8                	mov    eax,ebx
c0006c34:	5b                   	pop    ebx
c0006c35:	5e                   	pop    esi
c0006c36:	5f                   	pop    edi
c0006c37:	c3                   	ret    

c0006c38 <iso_ioctl>:
c0006c38:	83 ec 18             	sub    esp,0x18
c0006c3b:	68 33 f9 02 c0       	push   0xc002f933
c0006c40:	e8 ff 25 02 00       	call   c0029244 <iso_kprintf>
c0006c45:	e8 d7 fe ff ff       	call   c0006b21 <iso_reset>
c0006c4a:	31 c0                	xor    eax,eax
c0006c4c:	83 c4 1c             	add    esp,0x1c
c0006c4f:	c3                   	ret    

c0006c50 <fs_iso9660_init>:
c0006c50:	53                   	push   ebx
c0006c51:	31 db                	xor    ebx,ebx
c0006c53:	83 ec 14             	sub    esp,0x14
c0006c56:	68 3e f9 02 c0       	push   0xc002f93e
c0006c5b:	e8 e4 25 02 00       	call   c0029244 <iso_kprintf>
c0006c60:	83 c4 0c             	add    esp,0xc
c0006c63:	68 40 09 00 00       	push   0x940
c0006c68:	6a 00                	push   0x0
c0006c6a:	68 20 6d 03 c0       	push   0xc0036d20
c0006c6f:	e8 7c 98 ff ff       	call   c00004f0 <memset>
c0006c74:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006c7b:	c7 05 20 6d 03 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0036d20,0xffffffff
c0006c85:	e8 74 f6 00 00       	call   c00162fe <malloc>
c0006c8a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006c91:	a3 90 76 03 c0       	mov    ds:0xc0037690,eax
c0006c96:	e8 63 f6 00 00       	call   c00162fe <malloc>
c0006c9b:	83 c4 10             	add    esp,0x10
c0006c9e:	a3 00 6d 03 c0       	mov    ds:0xc0036d00,eax
c0006ca3:	83 ec 0c             	sub    esp,0xc
c0006ca6:	68 04 08 00 00       	push   0x804
c0006cab:	e8 4e f6 00 00       	call   c00162fe <malloc>
c0006cb0:	89 04 9d 80 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9f80],eax
c0006cb7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006cbd:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006cc4:	e8 35 f6 00 00       	call   c00162fe <malloc>
c0006cc9:	83 c4 10             	add    esp,0x10
c0006ccc:	89 04 9d 20 60 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc9fe0],eax
c0006cd3:	43                   	inc    ebx
c0006cd4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006cda:	83 fb 10             	cmp    ebx,0x10
c0006cdd:	75 c4                	jne    c0006ca3 <fs_iso9660_init+0x53>
c0006cdf:	31 c0                	xor    eax,eax
c0006ce1:	83 c4 08             	add    esp,0x8
c0006ce4:	5b                   	pop    ebx
c0006ce5:	c3                   	ret    

c0006ce6 <fs_iso9660_shutdown>:
c0006ce6:	53                   	push   ebx
c0006ce7:	31 db                	xor    ebx,ebx
c0006ce9:	83 ec 08             	sub    esp,0x8
c0006cec:	83 ec 0c             	sub    esp,0xc
c0006cef:	ff 34 9d 80 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9f80]
c0006cf6:	e8 13 f6 00 00       	call   c001630e <free>
c0006cfb:	58                   	pop    eax
c0006cfc:	ff 34 9d 20 60 03 c0 	push   DWORD PTR [ebx*4-0x3ffc9fe0]
c0006d03:	43                   	inc    ebx
c0006d04:	e8 05 f6 00 00       	call   c001630e <free>
c0006d09:	83 c4 10             	add    esp,0x10
c0006d0c:	83 fb 10             	cmp    ebx,0x10
c0006d0f:	75 db                	jne    c0006cec <fs_iso9660_shutdown+0x6>
c0006d11:	a1 90 76 03 c0       	mov    eax,ds:0xc0037690
c0006d16:	85 c0                	test   eax,eax
c0006d18:	74 0c                	je     c0006d26 <fs_iso9660_shutdown+0x40>
c0006d1a:	83 ec 0c             	sub    esp,0xc
c0006d1d:	50                   	push   eax
c0006d1e:	e8 eb f5 00 00       	call   c001630e <free>
c0006d23:	83 c4 10             	add    esp,0x10
c0006d26:	a1 00 6d 03 c0       	mov    eax,ds:0xc0036d00
c0006d2b:	85 c0                	test   eax,eax
c0006d2d:	74 0c                	je     c0006d3b <fs_iso9660_shutdown+0x55>
c0006d2f:	83 ec 0c             	sub    esp,0xc
c0006d32:	50                   	push   eax
c0006d33:	e8 d6 f5 00 00       	call   c001630e <free>
c0006d38:	83 c4 10             	add    esp,0x10
c0006d3b:	c7 05 00 6d 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036d00,0x0
c0006d45:	c7 05 90 76 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0037690,0x0
c0006d4f:	31 c0                	xor    eax,eax
c0006d51:	83 c4 08             	add    esp,0x8
c0006d54:	5b                   	pop    ebx
c0006d55:	c3                   	ret    
c0006d56:	66 90                	xchg   ax,ax

c0006d58 <lwip_init>:
c0006d58:	83 ec 0c             	sub    esp,0xc
c0006d5b:	e8 48 2c 00 00       	call   c00099a8 <stats_init>
c0006d60:	e8 7b 9f ff ff       	call   c0000ce0 <sys_init>
c0006d65:	e8 ae 01 00 00       	call   c0006f18 <mem_init>
c0006d6a:	e8 05 0a 00 00       	call   c0007774 <memp_init>
c0006d6f:	e8 e8 0c 00 00       	call   c0007a5c <netif_init>
c0006d74:	e8 c3 9e ff ff       	call   c0000c3c <lwip_socket_init>
c0006d79:	e8 76 9d 00 00       	call   c0010af4 <sys_timeouts_init>
c0006d7e:	90                   	nop
c0006d7f:	83 c4 0c             	add    esp,0xc
c0006d82:	c3                   	ret    
c0006d83:	90                   	nop

c0006d84 <plug_holes>:
c0006d84:	83 ec 1c             	sub    esp,0x1c
c0006d87:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006d8c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006d90:	73 16                	jae    c0006da8 <plug_holes+0x24>
c0006d92:	83 ec 08             	sub    esp,0x8
c0006d95:	68 4f f9 02 c0       	push   0xc002f94f
c0006d9a:	68 66 f9 02 c0       	push   0xc002f966
c0006d9f:	e8 30 8d 01 00       	call   c001fad4 <CPrintf>
c0006da4:	83 c4 10             	add    esp,0x10
c0006da7:	90                   	nop
c0006da8:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006dad:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006db1:	72 15                	jb     c0006dc8 <plug_holes+0x44>
c0006db3:	83 ec 08             	sub    esp,0x8
c0006db6:	68 73 f9 02 c0       	push   0xc002f973
c0006dbb:	68 66 f9 02 c0       	push   0xc002f966
c0006dc0:	e8 0f 8d 01 00       	call   c001fad4 <CPrintf>
c0006dc5:	83 c4 10             	add    esp,0x10
c0006dc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006dcc:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006dcf:	0f b6 c0             	movzx  eax,al
c0006dd2:	85 c0                	test   eax,eax
c0006dd4:	74 16                	je     c0006dec <plug_holes+0x68>
c0006dd6:	83 ec 08             	sub    esp,0x8
c0006dd9:	68 8d f9 02 c0       	push   0xc002f98d
c0006dde:	68 66 f9 02 c0       	push   0xc002f966
c0006de3:	e8 ec 8c 01 00       	call   c001fad4 <CPrintf>
c0006de8:	83 c4 10             	add    esp,0x10
c0006deb:	90                   	nop
c0006dec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006df0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006df3:	0f b7 c0             	movzx  eax,ax
c0006df6:	3d 40 06 00 00       	cmp    eax,0x640
c0006dfb:	76 17                	jbe    c0006e14 <plug_holes+0x90>
c0006dfd:	83 ec 08             	sub    esp,0x8
c0006e00:	68 20 fa 02 c0       	push   0xc002fa20
c0006e05:	68 66 f9 02 c0       	push   0xc002f966
c0006e0a:	e8 c5 8c 01 00       	call   c001fad4 <CPrintf>
c0006e0f:	83 c4 10             	add    esp,0x10
c0006e12:	66 90                	xchg   ax,ax
c0006e14:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006e1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e1e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e21:	0f b7 c0             	movzx  eax,ax
c0006e24:	01 d0                	add    eax,edx
c0006e26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e2e:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0006e32:	74 64                	je     c0006e98 <plug_holes+0x114>
c0006e34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e38:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006e3b:	0f b6 c0             	movzx  eax,al
c0006e3e:	85 c0                	test   eax,eax
c0006e40:	75 56                	jne    c0006e98 <plug_holes+0x114>
c0006e42:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006e47:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e4b:	74 4b                	je     c0006e98 <plug_holes+0x114>
c0006e4d:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006e52:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0006e56:	75 0c                	jne    c0006e64 <plug_holes+0xe0>
c0006e58:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006e5c:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006e61:	8d 76 00             	lea    esi,[esi+0x0]
c0006e64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e68:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e6f:	66 89 02             	mov    WORD PTR [edx],ax
c0006e72:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006e77:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0006e7b:	29 c2                	sub    edx,eax
c0006e7d:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006e83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e87:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006e8a:	0f b7 c0             	movzx  eax,ax
c0006e8d:	01 c1                	add    ecx,eax
c0006e8f:	89 d0                	mov    eax,edx
c0006e91:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006e95:	8d 76 00             	lea    esi,[esi+0x0]
c0006e98:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0006e9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006ea2:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0006ea6:	0f b7 c0             	movzx  eax,ax
c0006ea9:	01 d0                	add    eax,edx
c0006eab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006eaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0006eb7:	74 57                	je     c0006f10 <plug_holes+0x18c>
c0006eb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ebd:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0006ec0:	0f b6 c0             	movzx  eax,al
c0006ec3:	85 c0                	test   eax,eax
c0006ec5:	75 49                	jne    c0006f10 <plug_holes+0x18c>
c0006ec7:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0006ecc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006ed0:	75 0a                	jne    c0006edc <plug_holes+0x158>
c0006ed2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ed6:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006edb:	90                   	nop
c0006edc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006ee0:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006ee3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ee7:	66 89 02             	mov    WORD PTR [edx],ax
c0006eea:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006eef:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ef3:	29 c2                	sub    edx,eax
c0006ef5:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c0006efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006eff:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006f02:	0f b7 c0             	movzx  eax,ax
c0006f05:	01 c1                	add    ecx,eax
c0006f07:	89 d0                	mov    eax,edx
c0006f09:	66 89 41 02          	mov    WORD PTR [ecx+0x2],ax
c0006f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0006f10:	90                   	nop
c0006f11:	83 c4 1c             	add    esp,0x1c
c0006f14:	c3                   	ret    
c0006f15:	8d 76 00             	lea    esi,[esi+0x0]

c0006f18 <mem_init>:
c0006f18:	83 ec 1c             	sub    esp,0x1c
c0006f1b:	c7 05 a4 76 03 c0 c0 60 03 c0 	mov    DWORD PTR ds:0xc00376a4,0xc00360c0
c0006f25:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006f2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f32:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f3b:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0006f41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006f45:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0006f49:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f4e:	05 40 06 00 00       	add    eax,0x640
c0006f53:	a3 a0 76 03 c0       	mov    ds:0xc00376a0,eax
c0006f58:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f5d:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0006f61:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f66:	66 c7 00 40 06       	mov    WORD PTR [eax],0x640
c0006f6b:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006f70:	66 c7 40 02 40 06    	mov    WORD PTR [eax+0x2],0x640
c0006f76:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006f7b:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0006f80:	66 c7 05 c8 67 03 c0 40 06 	mov    WORD PTR ds:0xc00367c8,0x640
c0006f89:	83 ec 08             	sub    esp,0x8
c0006f8c:	6a 01                	push   0x1
c0006f8e:	68 98 76 03 c0       	push   0xc0037698
c0006f93:	e8 ac 9c ff ff       	call   c0000c44 <sys_sem_new>
c0006f98:	83 c4 10             	add    esp,0x10
c0006f9b:	0f be c0             	movsx  eax,al
c0006f9e:	85 c0                	test   eax,eax
c0006fa0:	74 16                	je     c0006fb8 <mem_init+0xa0>
c0006fa2:	83 ec 08             	sub    esp,0x8
c0006fa5:	68 a8 f9 02 c0       	push   0xc002f9a8
c0006faa:	68 66 f9 02 c0       	push   0xc002f966
c0006faf:	e8 20 8b 01 00       	call   c001fad4 <CPrintf>
c0006fb4:	83 c4 10             	add    esp,0x10
c0006fb7:	90                   	nop
c0006fb8:	90                   	nop
c0006fb9:	83 c4 1c             	add    esp,0x1c
c0006fbc:	c3                   	ret    
c0006fbd:	8d 76 00             	lea    esi,[esi+0x0]

c0006fc0 <mem_free>:
c0006fc0:	83 ec 1c             	sub    esp,0x1c
c0006fc3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0006fc8:	0f 84 0e 01 00 00    	je     c00070dc <mem_free+0x11c>
c0006fce:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0006fd3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fd7:	72 0b                	jb     c0006fe4 <mem_free+0x24>
c0006fd9:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c0006fde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0006fe2:	72 18                	jb     c0006ffc <mem_free+0x3c>
c0006fe4:	83 ec 08             	sub    esp,0x8
c0006fe7:	68 c3 f9 02 c0       	push   0xc002f9c3
c0006fec:	68 66 f9 02 c0       	push   0xc002f966
c0006ff1:	e8 de 8a 01 00       	call   c001fad4 <CPrintf>
c0006ff6:	83 c4 10             	add    esp,0x10
c0006ff9:	8d 76 00             	lea    esi,[esi+0x0]
c0006ffc:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007001:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007005:	72 0d                	jb     c0007014 <mem_free+0x54>
c0007007:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000700c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007010:	72 22                	jb     c0007034 <mem_free+0x74>
c0007012:	66 90                	xchg   ax,ax
c0007014:	e8 ab 8a 01 00       	call   c001fac4 <CLockScheduler>
c0007019:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000701f:	83 c0 01             	add    eax,0x1
c0007022:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007028:	e8 7b 8a 01 00       	call   c001faa8 <CUnlockScheduler>
c000702d:	e9 ae 00 00 00       	jmp    c00070e0 <mem_free+0x120>
c0007032:	66 90                	xchg   ax,ax
c0007034:	83 ec 08             	sub    esp,0x8
c0007037:	6a 00                	push   0x0
c0007039:	68 98 76 03 c0       	push   0xc0037698
c000703e:	e8 59 9c ff ff       	call   c0000c9c <sys_arch_sem_wait>
c0007043:	83 c4 10             	add    esp,0x10
c0007046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000704a:	83 e8 06             	sub    eax,0x6
c000704d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007051:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007055:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007058:	0f b6 c0             	movzx  eax,al
c000705b:	85 c0                	test   eax,eax
c000705d:	75 15                	jne    c0007074 <mem_free+0xb4>
c000705f:	83 ec 08             	sub    esp,0x8
c0007062:	68 da f9 02 c0       	push   0xc002f9da
c0007067:	68 66 f9 02 c0       	push   0xc002f966
c000706c:	e8 63 8a 01 00       	call   c001fad4 <CPrintf>
c0007071:	83 c4 10             	add    esp,0x10
c0007074:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007078:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000707c:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007081:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0007085:	73 09                	jae    c0007090 <mem_free+0xd0>
c0007087:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000708b:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007090:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007096:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000709c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00070a0:	29 d1                	sub    ecx,edx
c00070a2:	89 ca                	mov    edx,ecx
c00070a4:	89 d1                	mov    ecx,edx
c00070a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00070aa:	66 8b 12             	mov    dx,WORD PTR [edx]
c00070ad:	29 d1                	sub    ecx,edx
c00070af:	89 ca                	mov    edx,ecx
c00070b1:	01 d0                	add    eax,edx
c00070b3:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00070b9:	83 ec 0c             	sub    esp,0xc
c00070bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070c0:	e8 bf fc ff ff       	call   c0006d84 <plug_holes>
c00070c5:	83 c4 10             	add    esp,0x10
c00070c8:	83 ec 0c             	sub    esp,0xc
c00070cb:	68 98 76 03 c0       	push   0xc0037698
c00070d0:	e8 af 9b ff ff       	call   c0000c84 <sys_sem_signal>
c00070d5:	83 c4 10             	add    esp,0x10
c00070d8:	eb 06                	jmp    c00070e0 <mem_free+0x120>
c00070da:	66 90                	xchg   ax,ax
c00070dc:	90                   	nop
c00070dd:	8d 76 00             	lea    esi,[esi+0x0]
c00070e0:	83 c4 1c             	add    esp,0x1c
c00070e3:	c3                   	ret    

c00070e4 <mem_trim>:
c00070e4:	83 ec 2c             	sub    esp,0x2c
c00070e7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00070eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00070f0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00070f5:	83 f8 0b             	cmp    eax,0xb
c00070f8:	77 0a                	ja     c0007104 <mem_trim+0x20>
c00070fa:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007101:	8d 76 00             	lea    esi,[esi+0x0]
c0007104:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007109:	3d 40 06 00 00       	cmp    eax,0x640
c000710e:	76 0c                	jbe    c000711c <mem_trim+0x38>
c0007110:	b8 00 00 00 00       	mov    eax,0x0
c0007115:	e9 d6 02 00 00       	jmp    c00073f0 <mem_trim+0x30c>
c000711a:	66 90                	xchg   ax,ax
c000711c:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007121:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007125:	72 0d                	jb     c0007134 <mem_trim+0x50>
c0007127:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000712c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007130:	72 1a                	jb     c000714c <mem_trim+0x68>
c0007132:	66 90                	xchg   ax,ax
c0007134:	83 ec 08             	sub    esp,0x8
c0007137:	68 ee f9 02 c0       	push   0xc002f9ee
c000713c:	68 66 f9 02 c0       	push   0xc002f966
c0007141:	e8 8e 89 01 00       	call   c001fad4 <CPrintf>
c0007146:	83 c4 10             	add    esp,0x10
c0007149:	8d 76 00             	lea    esi,[esi+0x0]
c000714c:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007151:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007155:	72 0d                	jb     c0007164 <mem_trim+0x80>
c0007157:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000715c:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0007160:	72 26                	jb     c0007188 <mem_trim+0xa4>
c0007162:	66 90                	xchg   ax,ax
c0007164:	e8 5b 89 01 00       	call   c001fac4 <CLockScheduler>
c0007169:	66 a1 d0 67 03 c0    	mov    ax,ds:0xc00367d0
c000716f:	83 c0 01             	add    eax,0x1
c0007172:	66 a3 d0 67 03 c0    	mov    ds:0xc00367d0,ax
c0007178:	e8 2b 89 01 00       	call   c001faa8 <CUnlockScheduler>
c000717d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007181:	e9 6a 02 00 00       	jmp    c00073f0 <mem_trim+0x30c>
c0007186:	66 90                	xchg   ax,ax
c0007188:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000718c:	83 e8 06             	sub    eax,0x6
c000718f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007193:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c0007198:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000719c:	29 c2                	sub    edx,eax
c000719e:	89 d0                	mov    eax,edx
c00071a0:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00071a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00071a9:	66 8b 10             	mov    dx,WORD PTR [eax]
c00071ac:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00071b1:	89 d1                	mov    ecx,edx
c00071b3:	29 c1                	sub    ecx,eax
c00071b5:	89 c8                	mov    eax,ecx
c00071b7:	83 e8 06             	sub    eax,0x6
c00071ba:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00071bf:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071c4:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071c9:	39 c2                	cmp    edx,eax
c00071cb:	76 17                	jbe    c00071e4 <mem_trim+0x100>
c00071cd:	83 ec 08             	sub    esp,0x8
c00071d0:	68 4c fa 02 c0       	push   0xc002fa4c
c00071d5:	68 66 f9 02 c0       	push   0xc002f966
c00071da:	e8 f5 88 01 00       	call   c001fad4 <CPrintf>
c00071df:	83 c4 10             	add    esp,0x10
c00071e2:	66 90                	xchg   ax,ax
c00071e4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00071e9:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c00071ee:	39 c2                	cmp    edx,eax
c00071f0:	76 0a                	jbe    c00071fc <mem_trim+0x118>
c00071f2:	b8 00 00 00 00       	mov    eax,0x0
c00071f7:	e9 f4 01 00 00       	jmp    c00073f0 <mem_trim+0x30c>
c00071fc:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0007201:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007206:	39 c2                	cmp    edx,eax
c0007208:	75 0a                	jne    c0007214 <mem_trim+0x130>
c000720a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000720e:	e9 dd 01 00 00       	jmp    c00073f0 <mem_trim+0x30c>
c0007213:	90                   	nop
c0007214:	83 ec 08             	sub    esp,0x8
c0007217:	6a 00                	push   0x0
c0007219:	68 98 76 03 c0       	push   0xc0037698
c000721e:	e8 79 9a ff ff       	call   c0000c9c <sys_arch_sem_wait>
c0007223:	83 c4 10             	add    esp,0x10
c0007226:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000722c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007230:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007233:	0f b7 c0             	movzx  eax,ax
c0007236:	01 d0                	add    eax,edx
c0007238:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000723c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007240:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007243:	0f b6 c0             	movzx  eax,al
c0007246:	85 c0                	test   eax,eax
c0007248:	0f 85 c6 00 00 00    	jne    c0007314 <mem_trim+0x230>
c000724e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007252:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007255:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000725a:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000725f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007263:	01 d0                	add    eax,edx
c0007265:	83 c0 06             	add    eax,0x6
c0007268:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000726d:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007272:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007276:	75 14                	jne    c000728c <mem_trim+0x1a8>
c0007278:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000727e:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007283:	01 d0                	add    eax,edx
c0007285:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c000728a:	66 90                	xchg   ax,ax
c000728c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007292:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007297:	01 d0                	add    eax,edx
c0007299:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000729d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072a1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c00072a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072a9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00072ae:	66 89 02             	mov    WORD PTR [edx],ax
c00072b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072b5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00072ba:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00072be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00072c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072c6:	66 89 02             	mov    WORD PTR [edx],ax
c00072c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072cd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072d0:	0f b7 c0             	movzx  eax,ax
c00072d3:	3d 40 06 00 00       	cmp    eax,0x640
c00072d8:	74 1a                	je     c00072f4 <mem_trim+0x210>
c00072da:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00072e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00072e4:	66 8b 00             	mov    ax,WORD PTR [eax]
c00072e7:	0f b7 c0             	movzx  eax,ax
c00072ea:	01 c2                	add    edx,eax
c00072ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072f0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00072f4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00072fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007302:	29 d1                	sub    ecx,edx
c0007304:	89 ca                	mov    edx,ecx
c0007306:	01 d0                	add    eax,edx
c0007308:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c000730e:	e9 c9 00 00 00       	jmp    c00073dc <mem_trim+0x2f8>
c0007313:	90                   	nop
c0007314:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007319:	8d 50 12             	lea    edx,[eax+0x12]
c000731c:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0007321:	39 c2                	cmp    edx,eax
c0007323:	0f 87 b3 00 00 00    	ja     c00073dc <mem_trim+0x2f8>
c0007329:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000732e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007332:	01 d0                	add    eax,edx
c0007334:	83 c0 06             	add    eax,0x6
c0007337:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000733c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007342:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0007347:	01 d0                	add    eax,edx
c0007349:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000734d:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007352:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007356:	73 0c                	jae    c0007364 <mem_trim+0x280>
c0007358:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000735c:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007361:	8d 76 00             	lea    esi,[esi+0x0]
c0007364:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007368:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000736c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007370:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007373:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007377:	66 89 02             	mov    WORD PTR [edx],ax
c000737a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000737e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0007383:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007387:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000738b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738f:	66 89 02             	mov    WORD PTR [edx],ax
c0007392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007396:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007399:	0f b7 c0             	movzx  eax,ax
c000739c:	3d 40 06 00 00       	cmp    eax,0x640
c00073a1:	74 1d                	je     c00073c0 <mem_trim+0x2dc>
c00073a3:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00073a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00073ad:	66 8b 00             	mov    ax,WORD PTR [eax]
c00073b0:	0f b7 c0             	movzx  eax,ax
c00073b3:	01 c2                	add    edx,eax
c00073b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073b9:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00073bd:	8d 76 00             	lea    esi,[esi+0x0]
c00073c0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00073c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00073ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00073ce:	29 d1                	sub    ecx,edx
c00073d0:	89 ca                	mov    edx,ecx
c00073d2:	01 d0                	add    eax,edx
c00073d4:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00073da:	66 90                	xchg   ax,ax
c00073dc:	83 ec 0c             	sub    esp,0xc
c00073df:	68 98 76 03 c0       	push   0xc0037698
c00073e4:	e8 9b 98 ff ff       	call   c0000c84 <sys_sem_signal>
c00073e9:	83 c4 10             	add    esp,0x10
c00073ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073f0:	83 c4 2c             	add    esp,0x2c
c00073f3:	c3                   	ret    

c00073f4 <mem_malloc>:
c00073f4:	53                   	push   ebx
c00073f5:	83 ec 28             	sub    esp,0x28
c00073f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00073fc:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0007401:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007406:	85 c0                	test   eax,eax
c0007408:	75 0a                	jne    c0007414 <mem_malloc+0x20>
c000740a:	b8 00 00 00 00       	mov    eax,0x0
c000740f:	e9 f4 02 00 00       	jmp    c0007708 <mem_malloc+0x314>
c0007414:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0007419:	83 f8 0b             	cmp    eax,0xb
c000741c:	77 0a                	ja     c0007428 <mem_malloc+0x34>
c000741e:	66 c7 44 24 0c 0c 00 	mov    WORD PTR [esp+0xc],0xc
c0007425:	8d 76 00             	lea    esi,[esi+0x0]
c0007428:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000742d:	3d 40 06 00 00       	cmp    eax,0x640
c0007432:	76 0c                	jbe    c0007440 <mem_malloc+0x4c>
c0007434:	b8 00 00 00 00       	mov    eax,0x0
c0007439:	e9 ca 02 00 00       	jmp    c0007708 <mem_malloc+0x314>
c000743e:	66 90                	xchg   ax,ax
c0007440:	83 ec 08             	sub    esp,0x8
c0007443:	6a 00                	push   0x0
c0007445:	68 98 76 03 c0       	push   0xc0037698
c000744a:	e8 4d 98 ff ff       	call   c0000c9c <sys_arch_sem_wait>
c000744f:	83 c4 10             	add    esp,0x10
c0007452:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007458:	a1 a4 76 03 c0       	mov    eax,ds:0xc00376a4
c000745d:	29 c2                	sub    edx,eax
c000745f:	89 d0                	mov    eax,edx
c0007461:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0007466:	e9 5d 02 00 00       	jmp    c00076c8 <mem_malloc+0x2d4>
c000746b:	90                   	nop
c000746c:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007472:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0007477:	01 d0                	add    eax,edx
c0007479:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000747d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007481:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0007484:	0f b6 c0             	movzx  eax,al
c0007487:	85 c0                	test   eax,eax
c0007489:	0f 85 21 02 00 00    	jne    c00076b0 <mem_malloc+0x2bc>
c000748f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007493:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007496:	0f b7 d0             	movzx  edx,ax
c0007499:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000749e:	29 c2                	sub    edx,eax
c00074a0:	89 d0                	mov    eax,edx
c00074a2:	8d 50 fa             	lea    edx,[eax-0x6]
c00074a5:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074aa:	39 c2                	cmp    edx,eax
c00074ac:	0f 82 fe 01 00 00    	jb     c00076b0 <mem_malloc+0x2bc>
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00074b9:	0f b7 d0             	movzx  edx,ax
c00074bc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00074c1:	29 c2                	sub    edx,eax
c00074c3:	89 d0                	mov    eax,edx
c00074c5:	8d 50 fa             	lea    edx,[eax-0x6]
c00074c8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00074cd:	83 c0 12             	add    eax,0x12
c00074d0:	39 c2                	cmp    edx,eax
c00074d2:	0f 82 c4 00 00 00    	jb     c000759c <mem_malloc+0x1a8>
c00074d8:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c00074dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00074e1:	01 d0                	add    eax,edx
c00074e3:	83 c0 06             	add    eax,0x6
c00074e6:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00074eb:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00074f1:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00074f6:	01 d0                	add    eax,edx
c00074f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00074fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007500:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007504:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007508:	66 8b 00             	mov    ax,WORD PTR [eax]
c000750b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000750f:	66 89 02             	mov    WORD PTR [edx],ax
c0007512:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007516:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000751b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000751f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007523:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0007528:	66 89 02             	mov    WORD PTR [edx],ax
c000752b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000752f:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c0007533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007537:	66 8b 00             	mov    ax,WORD PTR [eax]
c000753a:	0f b7 c0             	movzx  eax,ax
c000753d:	3d 40 06 00 00       	cmp    eax,0x640
c0007542:	74 1c                	je     c0007560 <mem_malloc+0x16c>
c0007544:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c000754a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000754e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007551:	0f b7 c0             	movzx  eax,ax
c0007554:	01 c2                	add    edx,eax
c0007556:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000755b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000755f:	90                   	nop
c0007560:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007566:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000756a:	01 d0                	add    eax,edx
c000756c:	83 c0 06             	add    eax,0x6
c000756f:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c0007575:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c000757c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007582:	0f b7 d2             	movzx  edx,dx
c0007585:	0f b7 c0             	movzx  eax,ax
c0007588:	39 c2                	cmp    edx,eax
c000758a:	73 60                	jae    c00075ec <mem_malloc+0x1f8>
c000758c:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c0007592:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c0007598:	eb 52                	jmp    c00075ec <mem_malloc+0x1f8>
c000759a:	66 90                	xchg   ax,ax
c000759c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075a0:	c6 40 04 01          	mov    BYTE PTR [eax+0x4],0x1
c00075a4:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00075ae:	66 8b 12             	mov    dx,WORD PTR [edx]
c00075b1:	8b 0d a4 76 03 c0    	mov    ecx,DWORD PTR ds:0xc00376a4
c00075b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00075bb:	29 cb                	sub    ebx,ecx
c00075bd:	89 d9                	mov    ecx,ebx
c00075bf:	29 ca                	sub    edx,ecx
c00075c1:	01 d0                	add    eax,edx
c00075c3:	66 a3 ca 67 03 c0    	mov    ds:0xc00367ca,ax
c00075c9:	66 8b 15 cc 67 03 c0 	mov    dx,WORD PTR ds:0xc00367cc
c00075d0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075d6:	0f b7 d2             	movzx  edx,dx
c00075d9:	0f b7 c0             	movzx  eax,ax
c00075dc:	39 c2                	cmp    edx,eax
c00075de:	73 0c                	jae    c00075ec <mem_malloc+0x1f8>
c00075e0:	66 a1 ca 67 03 c0    	mov    ax,ds:0xc00367ca
c00075e6:	66 a3 cc 67 03 c0    	mov    ds:0xc00367cc,ax
c00075ec:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c00075f1:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00075f5:	75 71                	jne    c0007668 <mem_malloc+0x274>
c00075f7:	eb 1b                	jmp    c0007614 <mem_malloc+0x220>
c00075f9:	8d 76 00             	lea    esi,[esi+0x0]
c00075fc:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c0007602:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007607:	66 8b 00             	mov    ax,WORD PTR [eax]
c000760a:	0f b7 c0             	movzx  eax,ax
c000760d:	01 d0                	add    eax,edx
c000760f:	a3 9c 76 03 c0       	mov    ds:0xc003769c,eax
c0007614:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007619:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000761c:	0f b6 c0             	movzx  eax,al
c000761f:	85 c0                	test   eax,eax
c0007621:	74 11                	je     c0007634 <mem_malloc+0x240>
c0007623:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c0007629:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000762e:	39 c2                	cmp    edx,eax
c0007630:	75 ca                	jne    c00075fc <mem_malloc+0x208>
c0007632:	66 90                	xchg   ax,ax
c0007634:	8b 15 9c 76 03 c0    	mov    edx,DWORD PTR ds:0xc003769c
c000763a:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000763f:	39 c2                	cmp    edx,eax
c0007641:	74 25                	je     c0007668 <mem_malloc+0x274>
c0007643:	a1 9c 76 03 c0       	mov    eax,ds:0xc003769c
c0007648:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000764b:	0f b6 c0             	movzx  eax,al
c000764e:	85 c0                	test   eax,eax
c0007650:	74 16                	je     c0007668 <mem_malloc+0x274>
c0007652:	83 ec 08             	sub    esp,0x8
c0007655:	68 05 fa 02 c0       	push   0xc002fa05
c000765a:	68 66 f9 02 c0       	push   0xc002f966
c000765f:	e8 70 84 01 00       	call   c001fad4 <CPrintf>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	90                   	nop
c0007668:	83 ec 0c             	sub    esp,0xc
c000766b:	68 98 76 03 c0       	push   0xc0037698
c0007670:	e8 0f 96 ff ff       	call   c0000c84 <sys_sem_signal>
c0007675:	83 c4 10             	add    esp,0x10
c0007678:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000767d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007681:	01 d0                	add    eax,edx
c0007683:	8d 50 06             	lea    edx,[eax+0x6]
c0007686:	a1 a0 76 03 c0       	mov    eax,ds:0xc00376a0
c000768b:	39 c2                	cmp    edx,eax
c000768d:	76 15                	jbe    c00076a4 <mem_malloc+0x2b0>
c000768f:	83 ec 08             	sub    esp,0x8
c0007692:	68 6c fa 02 c0       	push   0xc002fa6c
c0007697:	68 66 f9 02 c0       	push   0xc002f966
c000769c:	e8 33 84 01 00       	call   c001fad4 <CPrintf>
c00076a1:	83 c4 10             	add    esp,0x10
c00076a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a8:	83 c0 06             	add    eax,0x6
c00076ab:	eb 5b                	jmp    c0007708 <mem_malloc+0x314>
c00076ad:	8d 76 00             	lea    esi,[esi+0x0]
c00076b0:	8b 15 a4 76 03 c0    	mov    edx,DWORD PTR ds:0xc00376a4
c00076b6:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076bb:	01 d0                	add    eax,edx
c00076bd:	66 8b 00             	mov    ax,WORD PTR [eax]
c00076c0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00076c5:	8d 76 00             	lea    esi,[esi+0x0]
c00076c8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00076cd:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00076d2:	b9 40 06 00 00       	mov    ecx,0x640
c00076d7:	29 d1                	sub    ecx,edx
c00076d9:	89 ca                	mov    edx,ecx
c00076db:	39 d0                	cmp    eax,edx
c00076dd:	0f 8c 89 fd ff ff    	jl     c000746c <mem_malloc+0x78>
c00076e3:	66 a1 ce 67 03 c0    	mov    ax,ds:0xc00367ce
c00076e9:	83 c0 01             	add    eax,0x1
c00076ec:	66 a3 ce 67 03 c0    	mov    ds:0xc00367ce,ax
c00076f2:	83 ec 0c             	sub    esp,0xc
c00076f5:	68 98 76 03 c0       	push   0xc0037698
c00076fa:	e8 85 95 ff ff       	call   c0000c84 <sys_sem_signal>
c00076ff:	83 c4 10             	add    esp,0x10
c0007702:	b8 00 00 00 00       	mov    eax,0x0
c0007707:	90                   	nop
c0007708:	83 c4 28             	add    esp,0x28
c000770b:	5b                   	pop    ebx
c000770c:	c3                   	ret    
c000770d:	8d 76 00             	lea    esi,[esi+0x0]

c0007710 <mem_calloc>:
c0007710:	83 ec 2c             	sub    esp,0x2c
c0007713:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007717:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000771b:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007720:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007725:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000772d:	0f af c2             	imul   eax,edx
c0007730:	0f b7 c0             	movzx  eax,ax
c0007733:	83 ec 0c             	sub    esp,0xc
c0007736:	50                   	push   eax
c0007737:	e8 b8 fc ff ff       	call   c00073f4 <mem_malloc>
c000773c:	83 c4 10             	add    esp,0x10
c000773f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007743:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0007748:	74 22                	je     c000776c <mem_calloc+0x5c>
c000774a:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000774f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0007754:	0f af c2             	imul   eax,edx
c0007757:	83 ec 04             	sub    esp,0x4
c000775a:	50                   	push   eax
c000775b:	6a 00                	push   0x0
c000775d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007761:	e8 8a 8d ff ff       	call   c00004f0 <memset>
c0007766:	83 c4 10             	add    esp,0x10
c0007769:	8d 76 00             	lea    esi,[esi+0x0]
c000776c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007770:	83 c4 2c             	add    esp,0x2c
c0007773:	c3                   	ret    

c0007774 <memp_init>:
c0007774:	83 ec 10             	sub    esp,0x10
c0007777:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c000777e:	eb 78                	jmp    c00077f8 <memp_init+0x84>
c0007780:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0007785:	89 d0                	mov    eax,edx
c0007787:	c1 e0 02             	shl    eax,0x2
c000778a:	01 d0                	add    eax,edx
c000778c:	01 c0                	add    eax,eax
c000778e:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007793:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c0007798:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000779d:	89 d0                	mov    eax,edx
c000779f:	c1 e0 02             	shl    eax,0x2
c00077a2:	01 d0                	add    eax,edx
c00077a4:	01 c0                	add    eax,eax
c00077a6:	05 d6 67 03 c0       	add    eax,0xc00367d6
c00077ab:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077b0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00077b5:	89 d0                	mov    eax,edx
c00077b7:	c1 e0 02             	shl    eax,0x2
c00077ba:	01 d0                	add    eax,edx
c00077bc:	01 c0                	add    eax,eax
c00077be:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00077c3:	66 c7 00 00 00       	mov    WORD PTR [eax],0x0
c00077c8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077cd:	0f b7 4c 24 0a       	movzx  ecx,WORD PTR [esp+0xa]
c00077d2:	66 8b 94 00 bc fa 02 c0 	mov    dx,WORD PTR [eax+eax*1-0x3ffd0544]
c00077da:	89 c8                	mov    eax,ecx
c00077dc:	c1 e0 02             	shl    eax,0x2
c00077df:	01 c8                	add    eax,ecx
c00077e1:	01 c0                	add    eax,eax
c00077e3:	05 d2 67 03 c0       	add    eax,0xc00367d2
c00077e8:	66 89 10             	mov    WORD PTR [eax],dx
c00077eb:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00077f0:	83 c0 01             	add    eax,0x1
c00077f3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00077f8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00077fd:	83 f8 0d             	cmp    eax,0xd
c0007800:	0f 86 7a ff ff ff    	jbe    c0007780 <memp_init+0xc>
c0007806:	c7 44 24 0c c0 76 03 c0 	mov    DWORD PTR [esp+0xc],0xc00376c0
c000780e:	66 c7 44 24 0a 00 00 	mov    WORD PTR [esp+0xa],0x0
c0007815:	e9 8a 00 00 00       	jmp    c00078a4 <memp_init+0x130>
c000781a:	66 90                	xchg   ax,ax
c000781c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007821:	c7 04 85 60 a8 03 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffc57a0],0x0
c000782c:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0007833:	eb 47                	jmp    c000787c <memp_init+0x108>
c0007835:	8d 76 00             	lea    esi,[esi+0x0]
c0007838:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000783d:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007848:	89 10                	mov    DWORD PTR [eax],edx
c000784a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000784f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007853:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c000785a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000785f:	66 8b 84 00 d8 fa 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0528]
c0007867:	0f b7 c0             	movzx  eax,ax
c000786a:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000786e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007872:	83 c0 01             	add    eax,0x1
c0007875:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000787a:	66 90                	xchg   ax,ax
c000787c:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0007881:	66 8b 84 00 bc fa 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd0544]
c0007889:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000788e:	0f b7 c0             	movzx  eax,ax
c0007891:	39 c2                	cmp    edx,eax
c0007893:	72 a3                	jb     c0007838 <memp_init+0xc4>
c0007895:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000789a:	83 c0 01             	add    eax,0x1
c000789d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00078a2:	66 90                	xchg   ax,ax
c00078a4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00078a9:	83 f8 0d             	cmp    eax,0xd
c00078ac:	0f 86 6a ff ff ff    	jbe    c000781c <memp_init+0xa8>
c00078b2:	90                   	nop
c00078b3:	83 c4 10             	add    esp,0x10
c00078b6:	c3                   	ret    
c00078b7:	90                   	nop

c00078b8 <memp_malloc>:
c00078b8:	83 ec 1c             	sub    esp,0x1c
c00078bb:	83 7c 24 20 0d       	cmp    DWORD PTR [esp+0x20],0xd
c00078c0:	76 22                	jbe    c00078e4 <memp_malloc+0x2c>
c00078c2:	83 ec 08             	sub    esp,0x8
c00078c5:	68 9c fa 02 c0       	push   0xc002fa9c
c00078ca:	68 66 f9 02 c0       	push   0xc002f966
c00078cf:	e8 00 82 01 00       	call   c001fad4 <CPrintf>
c00078d4:	83 c4 10             	add    esp,0x10
c00078d7:	b8 00 00 00 00       	mov    eax,0x0
c00078dc:	e9 ff 00 00 00       	jmp    c00079e0 <memp_malloc+0x128>
c00078e1:	8d 76 00             	lea    esi,[esi+0x0]
c00078e4:	e8 db 81 01 00       	call   c001fac4 <CLockScheduler>
c00078e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00078ed:	8b 04 85 60 a8 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc57a0]
c00078f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00078f8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00078fd:	0f 84 a1 00 00 00    	je     c00079a4 <memp_malloc+0xec>
c0007903:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007907:	8b 10                	mov    edx,DWORD PTR [eax]
c0007909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000790d:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007914:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007918:	89 d0                	mov    eax,edx
c000791a:	c1 e0 02             	shl    eax,0x2
c000791d:	01 d0                	add    eax,edx
c000791f:	01 c0                	add    eax,eax
c0007921:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007926:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007929:	83 c0 01             	add    eax,0x1
c000792c:	89 c2                	mov    edx,eax
c000792e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007932:	89 c8                	mov    eax,ecx
c0007934:	c1 e0 02             	shl    eax,0x2
c0007937:	01 c8                	add    eax,ecx
c0007939:	01 c0                	add    eax,eax
c000793b:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007940:	66 89 10             	mov    WORD PTR [eax],dx
c0007943:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007947:	89 d0                	mov    eax,edx
c0007949:	c1 e0 02             	shl    eax,0x2
c000794c:	01 d0                	add    eax,edx
c000794e:	01 c0                	add    eax,eax
c0007950:	05 d6 67 03 c0       	add    eax,0xc00367d6
c0007955:	66 8b 10             	mov    dx,WORD PTR [eax]
c0007958:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000795c:	89 c8                	mov    eax,ecx
c000795e:	c1 e0 02             	shl    eax,0x2
c0007961:	01 c8                	add    eax,ecx
c0007963:	01 c0                	add    eax,eax
c0007965:	05 d4 67 03 c0       	add    eax,0xc00367d4
c000796a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000796d:	0f b7 d2             	movzx  edx,dx
c0007970:	0f b7 c0             	movzx  eax,ax
c0007973:	39 c2                	cmp    edx,eax
c0007975:	73 5d                	jae    c00079d4 <memp_malloc+0x11c>
c0007977:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000797b:	89 d0                	mov    eax,edx
c000797d:	c1 e0 02             	shl    eax,0x2
c0007980:	01 d0                	add    eax,edx
c0007982:	01 c0                	add    eax,eax
c0007984:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007989:	66 8b 10             	mov    dx,WORD PTR [eax]
c000798c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007990:	89 c8                	mov    eax,ecx
c0007992:	c1 e0 02             	shl    eax,0x2
c0007995:	01 c8                	add    eax,ecx
c0007997:	01 c0                	add    eax,eax
c0007999:	05 d6 67 03 c0       	add    eax,0xc00367d6
c000799e:	66 89 10             	mov    WORD PTR [eax],dx
c00079a1:	eb 31                	jmp    c00079d4 <memp_malloc+0x11c>
c00079a3:	90                   	nop
c00079a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079a8:	89 d0                	mov    eax,edx
c00079aa:	c1 e0 02             	shl    eax,0x2
c00079ad:	01 d0                	add    eax,edx
c00079af:	01 c0                	add    eax,eax
c00079b1:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00079b6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00079b9:	83 c0 01             	add    eax,0x1
c00079bc:	89 c2                	mov    edx,eax
c00079be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079c2:	89 c8                	mov    eax,ecx
c00079c4:	c1 e0 02             	shl    eax,0x2
c00079c7:	01 c8                	add    eax,ecx
c00079c9:	01 c0                	add    eax,eax
c00079cb:	05 d8 67 03 c0       	add    eax,0xc00367d8
c00079d0:	66 89 10             	mov    WORD PTR [eax],dx
c00079d3:	90                   	nop
c00079d4:	e8 cf 80 01 00       	call   c001faa8 <CUnlockScheduler>
c00079d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079dd:	8d 76 00             	lea    esi,[esi+0x0]
c00079e0:	83 c4 1c             	add    esp,0x1c
c00079e3:	c3                   	ret    

c00079e4 <memp_free>:
c00079e4:	83 ec 1c             	sub    esp,0x1c
c00079e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00079ec:	74 66                	je     c0007a54 <memp_free+0x70>
c00079ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00079f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00079f6:	e8 c9 80 01 00       	call   c001fac4 <CLockScheduler>
c00079fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00079ff:	89 d0                	mov    eax,edx
c0007a01:	c1 e0 02             	shl    eax,0x2
c0007a04:	01 d0                	add    eax,edx
c0007a06:	01 c0                	add    eax,eax
c0007a08:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a0d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0007a10:	83 e8 01             	sub    eax,0x1
c0007a13:	89 c2                	mov    edx,eax
c0007a15:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a19:	89 c8                	mov    eax,ecx
c0007a1b:	c1 e0 02             	shl    eax,0x2
c0007a1e:	01 c8                	add    eax,ecx
c0007a20:	01 c0                	add    eax,eax
c0007a22:	05 d4 67 03 c0       	add    eax,0xc00367d4
c0007a27:	66 89 10             	mov    WORD PTR [eax],dx
c0007a2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a2e:	8b 14 85 60 a8 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc57a0]
c0007a35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a39:	89 10                	mov    DWORD PTR [eax],edx
c0007a3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007a43:	89 14 85 60 a8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc57a0],edx
c0007a4a:	e8 59 80 01 00       	call   c001faa8 <CUnlockScheduler>
c0007a4f:	eb 07                	jmp    c0007a58 <memp_free+0x74>
c0007a51:	8d 76 00             	lea    esi,[esi+0x0]
c0007a54:	90                   	nop
c0007a55:	8d 76 00             	lea    esi,[esi+0x0]
c0007a58:	83 c4 1c             	add    esp,0x1c
c0007a5b:	c3                   	ret    

c0007a5c <netif_init>:
c0007a5c:	90                   	nop
c0007a5d:	c3                   	ret    
c0007a5e:	66 90                	xchg   ax,ax

c0007a60 <netif_find>:
c0007a60:	83 ec 10             	sub    esp,0x10
c0007a63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007a68:	75 0a                	jne    c0007a74 <netif_find+0x14>
c0007a6a:	b8 00 00 00 00       	mov    eax,0x0
c0007a6f:	e9 80 00 00 00       	jmp    c0007af4 <netif_find+0x94>
c0007a74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007a78:	83 c0 02             	add    eax,0x2
c0007a7b:	8a 00                	mov    al,BYTE PTR [eax]
c0007a7d:	83 e8 30             	sub    eax,0x30
c0007a80:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0007a84:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007a89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007a8d:	eb 59                	jmp    c0007ae8 <netif_find+0x88>
c0007a8f:	90                   	nop
c0007a90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007a94:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0007a97:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0007a9c:	0f b6 c0             	movzx  eax,al
c0007a9f:	39 c2                	cmp    edx,eax
c0007aa1:	75 39                	jne    c0007adc <netif_find+0x7c>
c0007aa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007aa7:	8a 10                	mov    dl,BYTE PTR [eax]
c0007aa9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007aad:	8a 40 2a             	mov    al,BYTE PTR [eax+0x2a]
c0007ab0:	0f be d2             	movsx  edx,dl
c0007ab3:	0f be c0             	movsx  eax,al
c0007ab6:	39 c2                	cmp    edx,eax
c0007ab8:	75 22                	jne    c0007adc <netif_find+0x7c>
c0007aba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007abe:	83 c0 01             	add    eax,0x1
c0007ac1:	8a 10                	mov    dl,BYTE PTR [eax]
c0007ac3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ac7:	8a 40 2b             	mov    al,BYTE PTR [eax+0x2b]
c0007aca:	0f be d2             	movsx  edx,dl
c0007acd:	0f be c0             	movsx  eax,al
c0007ad0:	39 c2                	cmp    edx,eax
c0007ad2:	75 08                	jne    c0007adc <netif_find+0x7c>
c0007ad4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ad8:	eb 1a                	jmp    c0007af4 <netif_find+0x94>
c0007ada:	66 90                	xchg   ax,ax
c0007adc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0007ae2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ae6:	66 90                	xchg   ax,ax
c0007ae8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007aed:	75 a1                	jne    c0007a90 <netif_find+0x30>
c0007aef:	b8 00 00 00 00       	mov    eax,0x0
c0007af4:	83 c4 10             	add    esp,0x10
c0007af7:	c3                   	ret    

c0007af8 <netif_set_ipaddr>:
c0007af8:	83 ec 1c             	sub    esp,0x1c
c0007afb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007aff:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b08:	39 c2                	cmp    edx,eax
c0007b0a:	0f 84 bc 00 00 00    	je     c0007bcc <netif_set_ipaddr+0xd4>
c0007b10:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007b15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b19:	eb 45                	jmp    c0007b60 <netif_set_ipaddr+0x68>
c0007b1b:	90                   	nop
c0007b1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b20:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b29:	39 c2                	cmp    edx,eax
c0007b2b:	75 27                	jne    c0007b54 <netif_set_ipaddr+0x5c>
c0007b2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b31:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007b38:	83 ec 0c             	sub    esp,0xc
c0007b3b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007b3f:	e8 7c 36 00 00       	call   c000b1c0 <tcp_abort>
c0007b44:	83 c4 10             	add    esp,0x10
c0007b47:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007b4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b4f:	eb 0f                	jmp    c0007b60 <netif_set_ipaddr+0x68>
c0007b51:	8d 76 00             	lea    esi,[esi+0x0]
c0007b54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007b5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007b5f:	90                   	nop
c0007b60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007b65:	75 b5                	jne    c0007b1c <netif_set_ipaddr+0x24>
c0007b67:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c0007b6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b70:	eb 52                	jmp    c0007bc4 <netif_set_ipaddr+0xcc>
c0007b72:	66 90                	xchg   ax,ax
c0007b74:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b78:	85 c0                	test   eax,eax
c0007b7a:	74 3c                	je     c0007bb8 <netif_set_ipaddr+0xc0>
c0007b7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b80:	8b 00                	mov    eax,DWORD PTR [eax]
c0007b82:	85 c0                	test   eax,eax
c0007b84:	74 32                	je     c0007bb8 <netif_set_ipaddr+0xc0>
c0007b86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0007b8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007b90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0007b93:	39 c2                	cmp    edx,eax
c0007b95:	75 21                	jne    c0007bb8 <netif_set_ipaddr+0xc0>
c0007b97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007b9c:	74 0a                	je     c0007ba8 <netif_set_ipaddr+0xb0>
c0007b9e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007ba2:	8b 00                	mov    eax,DWORD PTR [eax]
c0007ba4:	eb 0a                	jmp    c0007bb0 <netif_set_ipaddr+0xb8>
c0007ba6:	66 90                	xchg   ax,ax
c0007ba8:	b8 00 00 00 00       	mov    eax,0x0
c0007bad:	8d 76 00             	lea    esi,[esi+0x0]
c0007bb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007bb4:	89 02                	mov    DWORD PTR [edx],eax
c0007bb6:	66 90                	xchg   ax,ax
c0007bb8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bbc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007bbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc3:	90                   	nop
c0007bc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bc9:	75 a9                	jne    c0007b74 <netif_set_ipaddr+0x7c>
c0007bcb:	90                   	nop
c0007bcc:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007bd1:	74 09                	je     c0007bdc <netif_set_ipaddr+0xe4>
c0007bd3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007bd7:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bd9:	eb 09                	jmp    c0007be4 <netif_set_ipaddr+0xec>
c0007bdb:	90                   	nop
c0007bdc:	b8 00 00 00 00       	mov    eax,0x0
c0007be1:	8d 76 00             	lea    esi,[esi+0x0]
c0007be4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007be8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0007beb:	90                   	nop
c0007bec:	83 c4 1c             	add    esp,0x1c
c0007bef:	c3                   	ret    

c0007bf0 <netif_set_gw>:
c0007bf0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007bf5:	74 09                	je     c0007c00 <netif_set_gw+0x10>
c0007bf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0007bfd:	eb 09                	jmp    c0007c08 <netif_set_gw+0x18>
c0007bff:	90                   	nop
c0007c00:	b8 00 00 00 00       	mov    eax,0x0
c0007c05:	8d 76 00             	lea    esi,[esi+0x0]
c0007c08:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007c0c:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0007c0f:	90                   	nop
c0007c10:	c3                   	ret    
c0007c11:	8d 76 00             	lea    esi,[esi+0x0]

c0007c14 <netif_set_netmask>:
c0007c14:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c19:	74 09                	je     c0007c24 <netif_set_netmask+0x10>
c0007c1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0007c21:	eb 09                	jmp    c0007c2c <netif_set_netmask+0x18>
c0007c23:	90                   	nop
c0007c24:	b8 00 00 00 00       	mov    eax,0x0
c0007c29:	8d 76 00             	lea    esi,[esi+0x0]
c0007c2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007c30:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0007c33:	90                   	nop
c0007c34:	c3                   	ret    
c0007c35:	8d 76 00             	lea    esi,[esi+0x0]

c0007c38 <netif_set_addr>:
c0007c38:	83 ec 0c             	sub    esp,0xc
c0007c3b:	83 ec 08             	sub    esp,0x8
c0007c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c46:	e8 ad fe ff ff       	call   c0007af8 <netif_set_ipaddr>
c0007c4b:	83 c4 10             	add    esp,0x10
c0007c4e:	83 ec 08             	sub    esp,0x8
c0007c51:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007c55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c59:	e8 b6 ff ff ff       	call   c0007c14 <netif_set_netmask>
c0007c5e:	83 c4 10             	add    esp,0x10
c0007c61:	83 ec 08             	sub    esp,0x8
c0007c64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007c6c:	e8 7f ff ff ff       	call   c0007bf0 <netif_set_gw>
c0007c71:	83 c4 10             	add    esp,0x10
c0007c74:	90                   	nop
c0007c75:	83 c4 0c             	add    esp,0xc
c0007c78:	c3                   	ret    
c0007c79:	8d 76 00             	lea    esi,[esi+0x0]

c0007c7c <netif_add>:
c0007c7c:	83 ec 0c             	sub    esp,0xc
c0007c7f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0007c84:	75 16                	jne    c0007c9c <netif_add+0x20>
c0007c86:	83 ec 08             	sub    esp,0x8
c0007c89:	68 f4 fa 02 c0       	push   0xc002faf4
c0007c8e:	68 66 f9 02 c0       	push   0xc002f966
c0007c93:	e8 3c 7e 01 00       	call   c001fad4 <CPrintf>
c0007c98:	83 c4 10             	add    esp,0x10
c0007c9b:	90                   	nop
c0007c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ca0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0007ca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cab:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0007cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cb6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0007cbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc1:	c6 40 29 00          	mov    BYTE PTR [eax+0x29],0x0
c0007cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007cc9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0007ccd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0007cd0:	a0 98 a8 03 c0       	mov    al,ds:0xc003a898
c0007cd5:	8d 50 01             	lea    edx,[eax+0x1]
c0007cd8:	88 15 98 a8 03 c0    	mov    BYTE PTR ds:0xc003a898,dl
c0007cde:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ce2:	88 42 2c             	mov    BYTE PTR [edx+0x2c],al
c0007ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007ced:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0007cf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cf4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d00:	e8 33 ff ff ff       	call   c0007c38 <netif_set_addr>
c0007d05:	83 c4 10             	add    esp,0x10
c0007d08:	83 ec 0c             	sub    esp,0xc
c0007d0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007d13:	ff d0                	call   eax
c0007d15:	83 c4 10             	add    esp,0x10
c0007d18:	0f be c0             	movsx  eax,al
c0007d1b:	85 c0                	test   eax,eax
c0007d1d:	74 09                	je     c0007d28 <netif_add+0xac>
c0007d1f:	b8 00 00 00 00       	mov    eax,0x0
c0007d24:	eb 1e                	jmp    c0007d44 <netif_add+0xc8>
c0007d26:	66 90                	xchg   ax,ax
c0007d28:	8b 15 10 67 03 c0    	mov    edx,DWORD PTR ds:0xc0036710
c0007d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d32:	89 10                	mov    DWORD PTR [eax],edx
c0007d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d38:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d41:	8d 76 00             	lea    esi,[esi+0x0]
c0007d44:	83 c4 0c             	add    esp,0xc
c0007d47:	c3                   	ret    

c0007d48 <netif_set_default>:
c0007d48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d4c:	a3 14 67 03 c0       	mov    ds:0xc0036714,eax
c0007d51:	90                   	nop
c0007d52:	c3                   	ret    
c0007d53:	90                   	nop

c0007d54 <netif_set_up>:
c0007d54:	83 ec 0c             	sub    esp,0xc
c0007d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5b:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d5e:	0f b6 c0             	movzx  eax,al
c0007d61:	83 e0 01             	and    eax,0x1
c0007d64:	75 4a                	jne    c0007db0 <netif_set_up+0x5c>
c0007d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d6a:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d6d:	83 c8 01             	or     eax,0x1
c0007d70:	88 c2                	mov    dl,al
c0007d72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d76:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007d79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d7d:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d80:	0f b6 c0             	movzx  eax,al
c0007d83:	83 e0 10             	and    eax,0x10
c0007d86:	74 28                	je     c0007db0 <netif_set_up+0x5c>
c0007d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d8c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007d8f:	0f b6 c0             	movzx  eax,al
c0007d92:	83 e0 20             	and    eax,0x20
c0007d95:	74 19                	je     c0007db0 <netif_set_up+0x5c>
c0007d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d9b:	83 c0 04             	add    eax,0x4
c0007d9e:	83 ec 08             	sub    esp,0x8
c0007da1:	50                   	push   eax
c0007da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007da6:	e8 bd a5 00 00       	call   c0012368 <etharp_request>
c0007dab:	83 c4 10             	add    esp,0x10
c0007dae:	66 90                	xchg   ax,ax
c0007db0:	90                   	nop
c0007db1:	83 c4 0c             	add    esp,0xc
c0007db4:	c3                   	ret    
c0007db5:	8d 76 00             	lea    esi,[esi+0x0]

c0007db8 <netif_set_down>:
c0007db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dbc:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007dbf:	0f b6 c0             	movzx  eax,al
c0007dc2:	83 e0 01             	and    eax,0x1
c0007dc5:	74 15                	je     c0007ddc <netif_set_down+0x24>
c0007dc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dcb:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007dce:	83 e0 fe             	and    eax,0xfffffffe
c0007dd1:	88 c2                	mov    dl,al
c0007dd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007dd7:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007dda:	66 90                	xchg   ax,ax
c0007ddc:	90                   	nop
c0007ddd:	c3                   	ret    
c0007dde:	66 90                	xchg   ax,ax

c0007de0 <netif_remove>:
c0007de0:	83 ec 10             	sub    esp,0x10
c0007de3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007de8:	0f 84 92 00 00 00    	je     c0007e80 <netif_remove+0xa0>
c0007dee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007df2:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007df5:	83 e0 01             	and    eax,0x1
c0007df8:	0f b6 c0             	movzx  eax,al
c0007dfb:	85 c0                	test   eax,eax
c0007dfd:	74 0d                	je     c0007e0c <netif_remove+0x2c>
c0007dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e03:	e8 b0 ff ff ff       	call   c0007db8 <netif_set_down>
c0007e08:	83 c4 04             	add    esp,0x4
c0007e0b:	90                   	nop
c0007e0c:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007e11:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e15:	75 0d                	jne    c0007e24 <netif_remove+0x44>
c0007e17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e1d:	a3 10 67 03 c0       	mov    ds:0xc0036710,eax
c0007e22:	eb 44                	jmp    c0007e68 <netif_remove+0x88>
c0007e24:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0007e29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e2d:	eb 29                	jmp    c0007e58 <netif_remove+0x78>
c0007e2f:	90                   	nop
c0007e30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e36:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e3a:	75 10                	jne    c0007e4c <netif_remove+0x6c>
c0007e3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007e40:	8b 10                	mov    edx,DWORD PTR [eax]
c0007e42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e46:	89 10                	mov    DWORD PTR [eax],edx
c0007e48:	eb 16                	jmp    c0007e60 <netif_remove+0x80>
c0007e4a:	66 90                	xchg   ax,ax
c0007e4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e50:	8b 00                	mov    eax,DWORD PTR [eax]
c0007e52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007e56:	66 90                	xchg   ax,ax
c0007e58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e5d:	75 d1                	jne    c0007e30 <netif_remove+0x50>
c0007e5f:	90                   	nop
c0007e60:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007e65:	74 1d                	je     c0007e84 <netif_remove+0xa4>
c0007e67:	90                   	nop
c0007e68:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c0007e6d:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0007e71:	75 15                	jne    c0007e88 <netif_remove+0xa8>
c0007e73:	6a 00                	push   0x0
c0007e75:	e8 ce fe ff ff       	call   c0007d48 <netif_set_default>
c0007e7a:	83 c4 04             	add    esp,0x4
c0007e7d:	eb 09                	jmp    c0007e88 <netif_remove+0xa8>
c0007e7f:	90                   	nop
c0007e80:	90                   	nop
c0007e81:	eb 05                	jmp    c0007e88 <netif_remove+0xa8>
c0007e83:	90                   	nop
c0007e84:	90                   	nop
c0007e85:	8d 76 00             	lea    esi,[esi+0x0]
c0007e88:	83 c4 10             	add    esp,0x10
c0007e8b:	c3                   	ret    

c0007e8c <netif_set_link_up>:
c0007e8c:	83 ec 0c             	sub    esp,0xc
c0007e8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007e93:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007e96:	0f b6 c0             	movzx  eax,al
c0007e99:	83 e0 10             	and    eax,0x10
c0007e9c:	75 4a                	jne    c0007ee8 <netif_set_link_up+0x5c>
c0007e9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ea2:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ea5:	83 c8 10             	or     eax,0x10
c0007ea8:	88 c2                	mov    dl,al
c0007eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eae:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007eb5:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007eb8:	0f b6 c0             	movzx  eax,al
c0007ebb:	83 e0 01             	and    eax,0x1
c0007ebe:	74 28                	je     c0007ee8 <netif_set_link_up+0x5c>
c0007ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ec7:	0f b6 c0             	movzx  eax,al
c0007eca:	83 e0 20             	and    eax,0x20
c0007ecd:	74 19                	je     c0007ee8 <netif_set_link_up+0x5c>
c0007ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ed3:	83 c0 04             	add    eax,0x4
c0007ed6:	83 ec 08             	sub    esp,0x8
c0007ed9:	50                   	push   eax
c0007eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ede:	e8 85 a4 00 00       	call   c0012368 <etharp_request>
c0007ee3:	83 c4 10             	add    esp,0x10
c0007ee6:	66 90                	xchg   ax,ax
c0007ee8:	90                   	nop
c0007ee9:	83 c4 0c             	add    esp,0xc
c0007eec:	c3                   	ret    
c0007eed:	8d 76 00             	lea    esi,[esi+0x0]

c0007ef0 <netif_set_link_down>:
c0007ef0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007ef4:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007ef7:	0f b6 c0             	movzx  eax,al
c0007efa:	83 e0 10             	and    eax,0x10
c0007efd:	74 15                	je     c0007f14 <netif_set_link_down+0x24>
c0007eff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f03:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0007f06:	83 e0 ef             	and    eax,0xffffffef
c0007f09:	88 c2                	mov    dl,al
c0007f0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f0f:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
c0007f12:	66 90                	xchg   ax,ax
c0007f14:	90                   	nop
c0007f15:	c3                   	ret    
c0007f16:	66 90                	xchg   ax,ax

c0007f18 <pbuf_free_ooseq>:
c0007f18:	83 ec 1c             	sub    esp,0x1c
c0007f1b:	e8 a4 7b 01 00       	call   c001fac4 <CLockScheduler>
c0007f20:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007f27:	e8 7c 7b 01 00       	call   c001faa8 <CUnlockScheduler>
c0007f2c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0007f31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f35:	eb 41                	jmp    c0007f78 <pbuf_free_ooseq+0x60>
c0007f37:	90                   	nop
c0007f38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f3c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f42:	85 c0                	test   eax,eax
c0007f44:	74 26                	je     c0007f6c <pbuf_free_ooseq+0x54>
c0007f46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f4a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c0007f50:	83 ec 0c             	sub    esp,0xc
c0007f53:	50                   	push   eax
c0007f54:	e8 03 20 00 00       	call   c0009f5c <tcp_segs_free>
c0007f59:	83 c4 10             	add    esp,0x10
c0007f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f60:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c0007f6a:	eb 14                	jmp    c0007f80 <pbuf_free_ooseq+0x68>
c0007f6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f70:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0007f73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f77:	90                   	nop
c0007f78:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007f7d:	75 b9                	jne    c0007f38 <pbuf_free_ooseq+0x20>
c0007f7f:	90                   	nop
c0007f80:	83 c4 1c             	add    esp,0x1c
c0007f83:	c3                   	ret    

c0007f84 <pbuf_pool_is_empty>:
c0007f84:	83 ec 1c             	sub    esp,0x1c
c0007f87:	e8 38 7b 01 00       	call   c001fac4 <CLockScheduler>
c0007f8c:	a0 99 a8 03 c0       	mov    al,ds:0xc003a899
c0007f91:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0007f95:	c6 05 99 a8 03 c0 01 	mov    BYTE PTR ds:0xc003a899,0x1
c0007f9c:	e8 07 7b 01 00       	call   c001faa8 <CUnlockScheduler>
c0007fa1:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0007fa6:	85 c0                	test   eax,eax
c0007fa8:	75 2e                	jne    c0007fd8 <pbuf_pool_is_empty+0x54>
c0007faa:	83 ec 04             	sub    esp,0x4
c0007fad:	6a 00                	push   0x0
c0007faf:	6a 00                	push   0x0
c0007fb1:	68 18 7f 00 c0       	push   0xc0007f18
c0007fb6:	e8 85 8c ff ff       	call   c0000c40 <tcpip_callback_with_block>
c0007fbb:	83 c4 10             	add    esp,0x10
c0007fbe:	0f be c0             	movsx  eax,al
c0007fc1:	85 c0                	test   eax,eax
c0007fc3:	74 13                	je     c0007fd8 <pbuf_pool_is_empty+0x54>
c0007fc5:	e8 fa 7a 01 00       	call   c001fac4 <CLockScheduler>
c0007fca:	c6 05 99 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a899,0x0
c0007fd1:	e8 d2 7a 01 00       	call   c001faa8 <CUnlockScheduler>
c0007fd6:	66 90                	xchg   ax,ax
c0007fd8:	90                   	nop
c0007fd9:	83 c4 1c             	add    esp,0x1c
c0007fdc:	c3                   	ret    
c0007fdd:	8d 76 00             	lea    esi,[esi+0x0]

c0007fe0 <pbuf_alloced_custom>:
c0007fe0:	83 ec 2c             	sub    esp,0x2c
c0007fe3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0007fe7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0007feb:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0007ff0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0007ff5:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c0007ffc:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0008001:	74 29                	je     c000802c <pbuf_alloced_custom+0x4c>
c0008003:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008008:	74 12                	je     c000801c <pbuf_alloced_custom+0x3c>
c000800a:	83 7c 24 30 02       	cmp    DWORD PTR [esp+0x30],0x2
c000800f:	74 2b                	je     c000803c <pbuf_alloced_custom+0x5c>
c0008011:	83 7c 24 30 03       	cmp    DWORD PTR [esp+0x30],0x3
c0008016:	74 54                	je     c000806c <pbuf_alloced_custom+0x8c>
c0008018:	eb 32                	jmp    c000804c <pbuf_alloced_custom+0x6c>
c000801a:	66 90                	xchg   ax,ax
c000801c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008021:	83 c0 14             	add    eax,0x14
c0008024:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008029:	8d 76 00             	lea    esi,[esi+0x0]
c000802c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008031:	83 c0 14             	add    eax,0x14
c0008034:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008039:	8d 76 00             	lea    esi,[esi+0x0]
c000803c:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0008041:	83 c0 0e             	add    eax,0xe
c0008044:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008049:	eb 25                	jmp    c0008070 <pbuf_alloced_custom+0x90>
c000804b:	90                   	nop
c000804c:	83 ec 08             	sub    esp,0x8
c000804f:	68 0c fb 02 c0       	push   0xc002fb0c
c0008054:	68 66 f9 02 c0       	push   0xc002f966
c0008059:	e8 76 7a 01 00       	call   c001fad4 <CPrintf>
c000805e:	83 c4 10             	add    esp,0x10
c0008061:	b8 00 00 00 00       	mov    eax,0x0
c0008066:	e9 95 00 00 00       	jmp    c0008100 <pbuf_alloced_custom+0x120>
c000806b:	90                   	nop
c000806c:	90                   	nop
c000806d:	8d 76 00             	lea    esi,[esi+0x0]
c0008070:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008075:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000807a:	01 c2                	add    edx,eax
c000807c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008081:	39 c2                	cmp    edx,eax
c0008083:	7d 07                	jge    c000808c <pbuf_alloced_custom+0xac>
c0008085:	b8 00 00 00 00       	mov    eax,0x0
c000808a:	eb 74                	jmp    c0008100 <pbuf_alloced_custom+0x120>
c000808c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008090:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008096:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000809b:	74 17                	je     c00080b4 <pbuf_alloced_custom+0xd4>
c000809d:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00080a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080a6:	01 c2                	add    edx,eax
c00080a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080ac:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00080af:	eb 0f                	jmp    c00080c0 <pbuf_alloced_custom+0xe0>
c00080b1:	8d 76 00             	lea    esi,[esi+0x0]
c00080b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00080bf:	90                   	nop
c00080c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080c4:	c6 40 0d 02          	mov    BYTE PTR [eax+0xd],0x2
c00080c8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00080cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00080d0:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00080d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00080db:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00080df:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00080e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00080e7:	88 c2                	mov    dl,al
c00080e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080ed:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00080f0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080f4:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c00080fa:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00080fe:	66 90                	xchg   ax,ax
c0008100:	83 c4 2c             	add    esp,0x2c
c0008103:	c3                   	ret    

c0008104 <pbuf_header>:
c0008104:	83 ec 2c             	sub    esp,0x2c
c0008107:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000810b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008110:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008115:	75 15                	jne    c000812c <pbuf_header+0x28>
c0008117:	83 ec 08             	sub    esp,0x8
c000811a:	68 96 fd 02 c0       	push   0xc002fd96
c000811f:	68 66 f9 02 c0       	push   0xc002f966
c0008124:	e8 ab 79 01 00       	call   c001fad4 <CPrintf>
c0008129:	83 c4 10             	add    esp,0x10
c000812c:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008131:	85 c0                	test   eax,eax
c0008133:	74 07                	je     c000813c <pbuf_header+0x38>
c0008135:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000813a:	75 08                	jne    c0008144 <pbuf_header+0x40>
c000813c:	b0 00                	mov    al,0x0
c000813e:	e9 59 01 00 00       	jmp    c000829c <pbuf_header+0x198>
c0008143:	90                   	nop
c0008144:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008149:	85 c0                	test   eax,eax
c000814b:	79 3b                	jns    c0008188 <pbuf_header+0x84>
c000814d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008151:	f7 d8                	neg    eax
c0008153:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008158:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000815c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008160:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0008165:	0f b7 c0             	movzx  eax,ax
c0008168:	39 c2                	cmp    edx,eax
c000816a:	76 28                	jbe    c0008194 <pbuf_header+0x90>
c000816c:	83 ec 08             	sub    esp,0x8
c000816f:	68 e7 fc 02 c0       	push   0xc002fce7
c0008174:	68 66 f9 02 c0       	push   0xc002f966
c0008179:	e8 56 79 01 00       	call   c001fad4 <CPrintf>
c000817e:	83 c4 10             	add    esp,0x10
c0008181:	b0 01                	mov    al,0x1
c0008183:	e9 14 01 00 00       	jmp    c000829c <pbuf_header+0x198>
c0008188:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000818c:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0008191:	8d 76 00             	lea    esi,[esi+0x0]
c0008194:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008198:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000819b:	0f b6 c0             	movzx  eax,al
c000819e:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c00081a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00081ae:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081b3:	85 c0                	test   eax,eax
c00081b5:	74 0d                	je     c00081c4 <pbuf_header+0xc0>
c00081b7:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00081bc:	83 f8 03             	cmp    eax,0x3
c00081bf:	75 3f                	jne    c0008200 <pbuf_header+0xfc>
c00081c1:	8d 76 00             	lea    esi,[esi+0x0]
c00081c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081cb:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c00081d0:	f7 da                	neg    edx
c00081d2:	01 c2                	add    edx,eax
c00081d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00081db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00081e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00081e6:	83 c2 10             	add    edx,0x10
c00081e9:	39 d0                	cmp    eax,edx
c00081eb:	73 7f                	jae    c000826c <pbuf_header+0x168>
c00081ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00081f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00081f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00081f8:	b0 01                	mov    al,0x1
c00081fa:	e9 9d 00 00 00       	jmp    c000829c <pbuf_header+0x198>
c00081ff:	90                   	nop
c0008200:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0008205:	83 f8 02             	cmp    eax,0x2
c0008208:	74 0a                	je     c0008214 <pbuf_header+0x110>
c000820a:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000820f:	83 f8 01             	cmp    eax,0x1
c0008212:	75 3c                	jne    c0008250 <pbuf_header+0x14c>
c0008214:	0f bf 44 24 0c       	movsx  eax,WORD PTR [esp+0xc]
c0008219:	85 c0                	test   eax,eax
c000821b:	79 2f                	jns    c000824c <pbuf_header+0x148>
c000821d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008221:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008225:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000822a:	0f b7 c0             	movzx  eax,ax
c000822d:	39 c2                	cmp    edx,eax
c000822f:	77 1b                	ja     c000824c <pbuf_header+0x148>
c0008231:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008235:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008238:	0f bf 54 24 0c       	movsx  edx,WORD PTR [esp+0xc]
c000823d:	f7 da                	neg    edx
c000823f:	01 c2                	add    edx,eax
c0008241:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008245:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008248:	eb 22                	jmp    c000826c <pbuf_header+0x168>
c000824a:	66 90                	xchg   ax,ax
c000824c:	b0 01                	mov    al,0x1
c000824e:	eb 4c                	jmp    c000829c <pbuf_header+0x198>
c0008250:	83 ec 08             	sub    esp,0x8
c0008253:	68 05 fd 02 c0       	push   0xc002fd05
c0008258:	68 66 f9 02 c0       	push   0xc002f966
c000825d:	e8 72 78 01 00       	call   c001fad4 <CPrintf>
c0008262:	83 c4 10             	add    esp,0x10
c0008265:	b0 01                	mov    al,0x1
c0008267:	eb 33                	jmp    c000829c <pbuf_header+0x198>
c0008269:	8d 76 00             	lea    esi,[esi+0x0]
c000826c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008270:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008274:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008278:	01 d0                	add    eax,edx
c000827a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000827e:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008282:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008286:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008289:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000828d:	01 d0                	add    eax,edx
c000828f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008293:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008297:	b0 00                	mov    al,0x0
c0008299:	8d 76 00             	lea    esi,[esi+0x0]
c000829c:	83 c4 2c             	add    esp,0x2c
c000829f:	c3                   	ret    

c00082a0 <pbuf_free>:
c00082a0:	83 ec 1c             	sub    esp,0x1c
c00082a3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00082a8:	75 26                	jne    c00082d0 <pbuf_free+0x30>
c00082aa:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00082af:	75 17                	jne    c00082c8 <pbuf_free+0x28>
c00082b1:	83 ec 08             	sub    esp,0x8
c00082b4:	68 96 fd 02 c0       	push   0xc002fd96
c00082b9:	68 66 f9 02 c0       	push   0xc002f966
c00082be:	e8 11 78 01 00       	call   c001fad4 <CPrintf>
c00082c3:	83 c4 10             	add    esp,0x10
c00082c6:	66 90                	xchg   ax,ax
c00082c8:	b0 00                	mov    al,0x0
c00082ca:	e9 a5 01 00 00       	jmp    c0008474 <pbuf_free+0x1d4>
c00082cf:	90                   	nop
c00082d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082d4:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082d7:	0f b6 c0             	movzx  eax,al
c00082da:	85 c0                	test   eax,eax
c00082dc:	74 42                	je     c0008320 <pbuf_free+0x80>
c00082de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082e2:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082e5:	0f b6 c0             	movzx  eax,al
c00082e8:	83 f8 01             	cmp    eax,0x1
c00082eb:	74 33                	je     c0008320 <pbuf_free+0x80>
c00082ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082f1:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00082f4:	0f b6 c0             	movzx  eax,al
c00082f7:	83 f8 02             	cmp    eax,0x2
c00082fa:	74 24                	je     c0008320 <pbuf_free+0x80>
c00082fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008300:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c0008303:	0f b6 c0             	movzx  eax,al
c0008306:	83 f8 03             	cmp    eax,0x3
c0008309:	74 15                	je     c0008320 <pbuf_free+0x80>
c000830b:	83 ec 08             	sub    esp,0x8
c000830e:	68 13 fd 02 c0       	push   0xc002fd13
c0008313:	68 66 f9 02 c0       	push   0xc002f966
c0008318:	e8 b7 77 01 00       	call   c001fad4 <CPrintf>
c000831d:	83 c4 10             	add    esp,0x10
c0008320:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008325:	e9 3a 01 00 00       	jmp    c0008464 <pbuf_free+0x1c4>
c000832a:	66 90                	xchg   ax,ax
c000832c:	e8 93 77 01 00       	call   c001fac4 <CLockScheduler>
c0008331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008335:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008339:	0f b7 c0             	movzx  eax,ax
c000833c:	85 c0                	test   eax,eax
c000833e:	75 18                	jne    c0008358 <pbuf_free+0xb8>
c0008340:	83 ec 08             	sub    esp,0x8
c0008343:	68 28 fd 02 c0       	push   0xc002fd28
c0008348:	68 66 f9 02 c0       	push   0xc002f966
c000834d:	e8 82 77 01 00       	call   c001fad4 <CPrintf>
c0008352:	83 c4 10             	add    esp,0x10
c0008355:	8d 76 00             	lea    esi,[esi+0x0]
c0008358:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000835c:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008360:	83 e8 01             	sub    eax,0x1
c0008363:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008367:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000836b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000836f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008373:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008378:	e8 2b 77 01 00       	call   c001faa8 <CUnlockScheduler>
c000837d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008382:	85 c0                	test   eax,eax
c0008384:	0f 85 d2 00 00 00    	jne    c000845c <pbuf_free+0x1bc>
c000838a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000838e:	8b 00                	mov    eax,DWORD PTR [eax]
c0008390:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008394:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008398:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000839b:	0f b6 c0             	movzx  eax,al
c000839e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083a7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00083aa:	0f b6 c0             	movzx  eax,al
c00083ad:	83 e0 02             	and    eax,0x2
c00083b0:	74 3a                	je     c00083ec <pbuf_free+0x14c>
c00083b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00083b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00083b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00083bf:	85 c0                	test   eax,eax
c00083c1:	75 15                	jne    c00083d8 <pbuf_free+0x138>
c00083c3:	83 ec 08             	sub    esp,0x8
c00083c6:	68 30 fb 02 c0       	push   0xc002fb30
c00083cb:	68 66 f9 02 c0       	push   0xc002f966
c00083d0:	e8 ff 76 01 00       	call   c001fad4 <CPrintf>
c00083d5:	83 c4 10             	add    esp,0x10
c00083d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00083de:	83 ec 0c             	sub    esp,0xc
c00083e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00083e5:	ff d0                	call   eax
c00083e7:	83 c4 10             	add    esp,0x10
c00083ea:	eb 58                	jmp    c0008444 <pbuf_free+0x1a4>
c00083ec:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00083f1:	83 f8 03             	cmp    eax,0x3
c00083f4:	75 16                	jne    c000840c <pbuf_free+0x16c>
c00083f6:	83 ec 08             	sub    esp,0x8
c00083f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083fd:	6a 0d                	push   0xd
c00083ff:	e8 e0 f5 ff ff       	call   c00079e4 <memp_free>
c0008404:	83 c4 10             	add    esp,0x10
c0008407:	eb 3b                	jmp    c0008444 <pbuf_free+0x1a4>
c0008409:	8d 76 00             	lea    esi,[esi+0x0]
c000840c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008411:	83 f8 01             	cmp    eax,0x1
c0008414:	74 0a                	je     c0008420 <pbuf_free+0x180>
c0008416:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000841b:	83 f8 02             	cmp    eax,0x2
c000841e:	75 14                	jne    c0008434 <pbuf_free+0x194>
c0008420:	83 ec 08             	sub    esp,0x8
c0008423:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008427:	6a 0c                	push   0xc
c0008429:	e8 b6 f5 ff ff       	call   c00079e4 <memp_free>
c000842e:	83 c4 10             	add    esp,0x10
c0008431:	eb 11                	jmp    c0008444 <pbuf_free+0x1a4>
c0008433:	90                   	nop
c0008434:	83 ec 0c             	sub    esp,0xc
c0008437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000843b:	e8 80 eb ff ff       	call   c0006fc0 <mem_free>
c0008440:	83 c4 10             	add    esp,0x10
c0008443:	90                   	nop
c0008444:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008448:	83 c0 01             	add    eax,0x1
c000844b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000844f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008453:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008457:	eb 0b                	jmp    c0008464 <pbuf_free+0x1c4>
c0008459:	8d 76 00             	lea    esi,[esi+0x0]
c000845c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008464:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008469:	0f 85 bd fe ff ff    	jne    c000832c <pbuf_free+0x8c>
c000846f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008473:	90                   	nop
c0008474:	83 c4 1c             	add    esp,0x1c
c0008477:	c3                   	ret    

c0008478 <pbuf_alloc>:
c0008478:	83 ec 3c             	sub    esp,0x3c
c000847b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000847f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008484:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c000848b:	83 7c 24 40 01       	cmp    DWORD PTR [esp+0x40],0x1
c0008490:	74 2a                	je     c00084bc <pbuf_alloc+0x44>
c0008492:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008497:	74 13                	je     c00084ac <pbuf_alloc+0x34>
c0008499:	83 7c 24 40 02       	cmp    DWORD PTR [esp+0x40],0x2
c000849e:	74 2c                	je     c00084cc <pbuf_alloc+0x54>
c00084a0:	83 7c 24 40 03       	cmp    DWORD PTR [esp+0x40],0x3
c00084a5:	74 55                	je     c00084fc <pbuf_alloc+0x84>
c00084a7:	eb 33                	jmp    c00084dc <pbuf_alloc+0x64>
c00084a9:	8d 76 00             	lea    esi,[esi+0x0]
c00084ac:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084b1:	83 c0 14             	add    eax,0x14
c00084b4:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084b9:	8d 76 00             	lea    esi,[esi+0x0]
c00084bc:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084c1:	83 c0 14             	add    eax,0x14
c00084c4:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084c9:	8d 76 00             	lea    esi,[esi+0x0]
c00084cc:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00084d1:	83 c0 0e             	add    eax,0xe
c00084d4:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00084d9:	eb 25                	jmp    c0008500 <pbuf_alloc+0x88>
c00084db:	90                   	nop
c00084dc:	83 ec 08             	sub    esp,0x8
c00084df:	68 3e fd 02 c0       	push   0xc002fd3e
c00084e4:	68 66 f9 02 c0       	push   0xc002f966
c00084e9:	e8 e6 75 01 00       	call   c001fad4 <CPrintf>
c00084ee:	83 c4 10             	add    esp,0x10
c00084f1:	b8 00 00 00 00       	mov    eax,0x0
c00084f6:	e9 71 03 00 00       	jmp    c000886c <pbuf_alloc+0x3f4>
c00084fb:	90                   	nop
c00084fc:	90                   	nop
c00084fd:	8d 76 00             	lea    esi,[esi+0x0]
c0008500:	83 7c 24 48 02       	cmp    DWORD PTR [esp+0x48],0x2
c0008505:	77 11                	ja     c0008518 <pbuf_alloc+0xa0>
c0008507:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000850c:	0f 85 c6 02 00 00    	jne    c00087d8 <pbuf_alloc+0x360>
c0008512:	e9 41 02 00 00       	jmp    c0008758 <pbuf_alloc+0x2e0>
c0008517:	90                   	nop
c0008518:	83 7c 24 48 03       	cmp    DWORD PTR [esp+0x48],0x3
c000851d:	0f 85 15 03 00 00    	jne    c0008838 <pbuf_alloc+0x3c0>
c0008523:	83 ec 0c             	sub    esp,0xc
c0008526:	6a 0d                	push   0xd
c0008528:	e8 8b f3 ff ff       	call   c00078b8 <memp_malloc>
c000852d:	83 c4 10             	add    esp,0x10
c0008530:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008534:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0008539:	75 11                	jne    c000854c <pbuf_alloc+0xd4>
c000853b:	e8 44 fa ff ff       	call   c0007f84 <pbuf_pool_is_empty>
c0008540:	b8 00 00 00 00       	mov    eax,0x0
c0008545:	e9 22 03 00 00       	jmp    c000886c <pbuf_alloc+0x3f4>
c000854a:	66 90                	xchg   ax,ax
c000854c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008550:	88 c2                	mov    dl,al
c0008552:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008556:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008559:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000855d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008563:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008568:	8d 50 10             	lea    edx,[eax+0x10]
c000856b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000856f:	01 c2                	add    edx,eax
c0008571:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008575:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008578:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000857c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008580:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008584:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008589:	ba 4e 02 00 00       	mov    edx,0x24e
c000858e:	29 c2                	sub    edx,eax
c0008590:	89 d0                	mov    eax,edx
c0008592:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008597:	39 d0                	cmp    eax,edx
c0008599:	7e 05                	jle    c00085a0 <pbuf_alloc+0x128>
c000859b:	89 d0                	mov    eax,edx
c000859d:	8d 76 00             	lea    esi,[esi+0x0]
c00085a0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00085a4:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00085a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00085af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085b3:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00085b7:	0f b7 c0             	movzx  eax,ax
c00085ba:	01 c2                	add    edx,eax
c00085bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00085c0:	05 5e 02 00 00       	add    eax,0x25e
c00085c5:	39 c2                	cmp    edx,eax
c00085c7:	76 17                	jbe    c00085e0 <pbuf_alloc+0x168>
c00085c9:	83 ec 08             	sub    esp,0x8
c00085cc:	68 54 fb 02 c0       	push   0xc002fb54
c00085d1:	68 66 f9 02 c0       	push   0xc002f966
c00085d6:	e8 f9 74 01 00       	call   c001fad4 <CPrintf>
c00085db:	83 c4 10             	add    esp,0x10
c00085de:	66 90                	xchg   ax,ax
c00085e0:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00085e5:	ba 4e 02 00 00       	mov    edx,0x24e
c00085ea:	29 c2                	sub    edx,eax
c00085ec:	89 d0                	mov    eax,edx
c00085ee:	85 c0                	test   eax,eax
c00085f0:	7f 16                	jg     c0008608 <pbuf_alloc+0x190>
c00085f2:	83 ec 08             	sub    esp,0x8
c00085f5:	68 88 fb 02 c0       	push   0xc002fb88
c00085fa:	68 66 f9 02 c0       	push   0xc002f966
c00085ff:	e8 d0 74 01 00       	call   c001fad4 <CPrintf>
c0008604:	83 c4 10             	add    esp,0x10
c0008607:	90                   	nop
c0008608:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000860c:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c0008612:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008616:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000861a:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000861f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008623:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008627:	0f b7 c0             	movzx  eax,ax
c000862a:	29 c2                	sub    edx,eax
c000862c:	89 d0                	mov    eax,edx
c000862e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008632:	e9 11 01 00 00       	jmp    c0008748 <pbuf_alloc+0x2d0>
c0008637:	90                   	nop
c0008638:	83 ec 0c             	sub    esp,0xc
c000863b:	6a 0d                	push   0xd
c000863d:	e8 76 f2 ff ff       	call   c00078b8 <memp_malloc>
c0008642:	83 c4 10             	add    esp,0x10
c0008645:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008649:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000864e:	75 20                	jne    c0008670 <pbuf_alloc+0x1f8>
c0008650:	e8 2f f9 ff ff       	call   c0007f84 <pbuf_pool_is_empty>
c0008655:	83 ec 0c             	sub    esp,0xc
c0008658:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000865c:	e8 3f fc ff ff       	call   c00082a0 <pbuf_free>
c0008661:	83 c4 10             	add    esp,0x10
c0008664:	b8 00 00 00 00       	mov    eax,0x0
c0008669:	e9 fe 01 00 00       	jmp    c000886c <pbuf_alloc+0x3f4>
c000866e:	66 90                	xchg   ax,ax
c0008670:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0008674:	88 c2                	mov    dl,al
c0008676:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000867a:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c000867d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008681:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008685:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008689:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000868f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008693:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008697:	89 10                	mov    DWORD PTR [eax],edx
c0008699:	81 7c 24 20 fe ff 00 00 	cmp    DWORD PTR [esp+0x20],0xfffe
c00086a1:	7e 15                	jle    c00086b8 <pbuf_alloc+0x240>
c00086a3:	83 ec 08             	sub    esp,0x8
c00086a6:	68 59 fd 02 c0       	push   0xc002fd59
c00086ab:	68 66 f9 02 c0       	push   0xc002f966
c00086b0:	e8 1f 74 01 00       	call   c001fad4 <CPrintf>
c00086b5:	83 c4 10             	add    esp,0x10
c00086b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086c0:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00086c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00086c8:	0f b7 d0             	movzx  edx,ax
c00086cb:	81 fa 4e 02 00 00    	cmp    edx,0x24e
c00086d1:	76 05                	jbe    c00086d8 <pbuf_alloc+0x260>
c00086d3:	b8 4e 02 00 00       	mov    eax,0x24e
c00086d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00086dc:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00086e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086e4:	8d 50 10             	lea    edx,[eax+0x10]
c00086e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00086eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00086ee:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086f2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00086f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00086f9:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00086fd:	0f b7 c0             	movzx  eax,ax
c0008700:	01 c2                	add    edx,eax
c0008702:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008706:	05 5e 02 00 00       	add    eax,0x25e
c000870b:	39 c2                	cmp    edx,eax
c000870d:	76 15                	jbe    c0008724 <pbuf_alloc+0x2ac>
c000870f:	83 ec 08             	sub    esp,0x8
c0008712:	68 54 fb 02 c0       	push   0xc002fb54
c0008717:	68 66 f9 02 c0       	push   0xc002f966
c000871c:	e8 b3 73 01 00       	call   c001fad4 <CPrintf>
c0008721:	83 c4 10             	add    esp,0x10
c0008724:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008728:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000872e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008732:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008736:	0f b7 c0             	movzx  eax,ax
c0008739:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000873d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008741:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0008745:	8d 76 00             	lea    esi,[esi+0x0]
c0008748:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000874d:	0f 8f e5 fe ff ff    	jg     c0008638 <pbuf_alloc+0x1c0>
c0008753:	e9 fc 00 00 00       	jmp    c0008854 <pbuf_alloc+0x3dc>
c0008758:	66 8b 54 24 26       	mov    dx,WORD PTR [esp+0x26]
c000875d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008761:	01 d0                	add    eax,edx
c0008763:	83 c0 10             	add    eax,0x10
c0008766:	0f b7 c0             	movzx  eax,ax
c0008769:	83 ec 0c             	sub    esp,0xc
c000876c:	50                   	push   eax
c000876d:	e8 82 ec ff ff       	call   c00073f4 <mem_malloc>
c0008772:	83 c4 10             	add    esp,0x10
c0008775:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0008779:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000877e:	75 0c                	jne    c000878c <pbuf_alloc+0x314>
c0008780:	b8 00 00 00 00       	mov    eax,0x0
c0008785:	e9 e2 00 00 00       	jmp    c000886c <pbuf_alloc+0x3f4>
c000878a:	66 90                	xchg   ax,ax
c000878c:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0008791:	8d 50 10             	lea    edx,[eax+0x10]
c0008794:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008798:	01 c2                	add    edx,eax
c000879a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000879e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00087a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087a9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c00087ad:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087b1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00087b4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00087b8:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c00087bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087c0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00087c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00087ca:	88 c2                	mov    dl,al
c00087cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087d0:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c00087d3:	eb 7f                	jmp    c0008854 <pbuf_alloc+0x3dc>
c00087d5:	8d 76 00             	lea    esi,[esi+0x0]
c00087d8:	83 ec 0c             	sub    esp,0xc
c00087db:	6a 0c                	push   0xc
c00087dd:	e8 d6 f0 ff ff       	call   c00078b8 <memp_malloc>
c00087e2:	83 c4 10             	add    esp,0x10
c00087e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00087e9:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c00087ee:	75 08                	jne    c00087f8 <pbuf_alloc+0x380>
c00087f0:	b8 00 00 00 00       	mov    eax,0x0
c00087f5:	eb 75                	jmp    c000886c <pbuf_alloc+0x3f4>
c00087f7:	90                   	nop
c00087f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00087fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008803:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008807:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000880b:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000880f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008813:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008816:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000881a:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000881e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008822:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008828:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000882c:	88 c2                	mov    dl,al
c000882e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008832:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
c0008835:	eb 1d                	jmp    c0008854 <pbuf_alloc+0x3dc>
c0008837:	90                   	nop
c0008838:	83 ec 08             	sub    esp,0x8
c000883b:	68 6d fd 02 c0       	push   0xc002fd6d
c0008840:	68 66 f9 02 c0       	push   0xc002f966
c0008845:	e8 8a 72 01 00       	call   c001fad4 <CPrintf>
c000884a:	83 c4 10             	add    esp,0x10
c000884d:	b8 00 00 00 00       	mov    eax,0x0
c0008852:	eb 18                	jmp    c000886c <pbuf_alloc+0x3f4>
c0008854:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008858:	66 c7 40 0e 01 00    	mov    WORD PTR [eax+0xe],0x1
c000885e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008862:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
c0008866:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000886a:	66 90                	xchg   ax,ax
c000886c:	83 c4 3c             	add    esp,0x3c
c000886f:	c3                   	ret    

c0008870 <pbuf_realloc>:
c0008870:	83 ec 2c             	sub    esp,0x2c
c0008873:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008877:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000887c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008881:	75 15                	jne    c0008898 <pbuf_realloc+0x28>
c0008883:	83 ec 08             	sub    esp,0x8
c0008886:	68 88 fd 02 c0       	push   0xc002fd88
c000888b:	68 66 f9 02 c0       	push   0xc002f966
c0008890:	e8 3f 72 01 00       	call   c001fad4 <CPrintf>
c0008895:	83 c4 10             	add    esp,0x10
c0008898:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000889c:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c000889f:	0f b6 c0             	movzx  eax,al
c00088a2:	83 f8 03             	cmp    eax,0x3
c00088a5:	74 41                	je     c00088e8 <pbuf_realloc+0x78>
c00088a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088ab:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088ae:	0f b6 c0             	movzx  eax,al
c00088b1:	83 f8 01             	cmp    eax,0x1
c00088b4:	74 32                	je     c00088e8 <pbuf_realloc+0x78>
c00088b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088ba:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088bd:	0f b6 c0             	movzx  eax,al
c00088c0:	85 c0                	test   eax,eax
c00088c2:	74 24                	je     c00088e8 <pbuf_realloc+0x78>
c00088c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088c8:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00088cb:	0f b6 c0             	movzx  eax,al
c00088ce:	83 f8 02             	cmp    eax,0x2
c00088d1:	74 15                	je     c00088e8 <pbuf_realloc+0x78>
c00088d3:	83 ec 08             	sub    esp,0x8
c00088d6:	68 a0 fd 02 c0       	push   0xc002fda0
c00088db:	68 66 f9 02 c0       	push   0xc002f966
c00088e0:	e8 ef 71 01 00       	call   c001fad4 <CPrintf>
c00088e5:	83 c4 10             	add    esp,0x10
c00088e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00088ec:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00088ef:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00088f4:	0f b7 c0             	movzx  eax,ax
c00088f7:	39 c2                	cmp    edx,eax
c00088f9:	0f 83 6d 01 00 00    	jae    c0008a6c <pbuf_realloc+0x1fc>
c00088ff:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008904:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008908:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000890b:	0f b7 c0             	movzx  eax,ax
c000890e:	29 c2                	sub    edx,eax
c0008910:	89 d0                	mov    eax,edx
c0008912:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008916:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000891a:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000891f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008923:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008927:	eb 77                	jmp    c00089a0 <pbuf_realloc+0x130>
c0008929:	8d 76 00             	lea    esi,[esi+0x0]
c000892c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008930:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008934:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c0008939:	89 d1                	mov    ecx,edx
c000893b:	29 c1                	sub    ecx,eax
c000893d:	89 c8                	mov    eax,ecx
c000893f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0008944:	81 7c 24 14 fe ff 00 00 	cmp    DWORD PTR [esp+0x14],0xfffe
c000894c:	7e 16                	jle    c0008964 <pbuf_realloc+0xf4>
c000894e:	83 ec 08             	sub    esp,0x8
c0008951:	68 bb fd 02 c0       	push   0xc002fdbb
c0008956:	68 66 f9 02 c0       	push   0xc002f966
c000895b:	e8 74 71 01 00       	call   c001fad4 <CPrintf>
c0008960:	83 c4 10             	add    esp,0x10
c0008963:	90                   	nop
c0008964:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008968:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000896b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000896f:	01 d0                	add    eax,edx
c0008971:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008975:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008979:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000897d:	8b 00                	mov    eax,DWORD PTR [eax]
c000897f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008983:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008988:	75 16                	jne    c00089a0 <pbuf_realloc+0x130>
c000898a:	83 ec 08             	sub    esp,0x8
c000898d:	68 cc fd 02 c0       	push   0xc002fdcc
c0008992:	68 66 f9 02 c0       	push   0xc002f966
c0008997:	e8 38 71 01 00       	call   c001fad4 <CPrintf>
c000899c:	83 c4 10             	add    esp,0x10
c000899f:	90                   	nop
c00089a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089a4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089a8:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00089ad:	0f b7 c0             	movzx  eax,ax
c00089b0:	39 c2                	cmp    edx,eax
c00089b2:	0f 87 74 ff ff ff    	ja     c000892c <pbuf_realloc+0xbc>
c00089b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089bc:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00089bf:	0f b6 c0             	movzx  eax,al
c00089c2:	85 c0                	test   eax,eax
c00089c4:	75 5e                	jne    c0008a24 <pbuf_realloc+0x1b4>
c00089c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089ca:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00089ce:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00089d3:	0f b7 c0             	movzx  eax,ax
c00089d6:	39 c2                	cmp    edx,eax
c00089d8:	74 4a                	je     c0008a24 <pbuf_realloc+0x1b4>
c00089da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00089e1:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c00089e5:	89 c2                	mov    edx,eax
c00089e7:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00089ec:	01 d0                	add    eax,edx
c00089ee:	0f b7 c0             	movzx  eax,ax
c00089f1:	83 ec 08             	sub    esp,0x8
c00089f4:	50                   	push   eax
c00089f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00089f9:	e8 e6 e6 ff ff       	call   c00070e4 <mem_trim>
c00089fe:	83 c4 10             	add    esp,0x10
c0008a01:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a05:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0008a0a:	75 18                	jne    c0008a24 <pbuf_realloc+0x1b4>
c0008a0c:	83 ec 08             	sub    esp,0x8
c0008a0f:	68 e4 fd 02 c0       	push   0xc002fde4
c0008a14:	68 66 f9 02 c0       	push   0xc002f966
c0008a19:	e8 b6 70 01 00       	call   c001fad4 <CPrintf>
c0008a1e:	83 c4 10             	add    esp,0x10
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008a28:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0008a2d:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0008a31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a35:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008a39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008a3d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008a41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a47:	85 c0                	test   eax,eax
c0008a49:	74 15                	je     c0008a60 <pbuf_realloc+0x1f0>
c0008a4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a51:	83 ec 0c             	sub    esp,0xc
c0008a54:	50                   	push   eax
c0008a55:	e8 46 f8 ff ff       	call   c00082a0 <pbuf_free>
c0008a5a:	83 c4 10             	add    esp,0x10
c0008a5d:	8d 76 00             	lea    esi,[esi+0x0]
c0008a60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a64:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a6a:	eb 04                	jmp    c0008a70 <pbuf_realloc+0x200>
c0008a6c:	90                   	nop
c0008a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0008a70:	83 c4 2c             	add    esp,0x2c
c0008a73:	c3                   	ret    

c0008a74 <pbuf_clen>:
c0008a74:	83 ec 10             	sub    esp,0x10
c0008a77:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008a7c:	eb 1a                	jmp    c0008a98 <pbuf_clen+0x24>
c0008a7e:	66 90                	xchg   ax,ax
c0008a80:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008a84:	83 c0 01             	add    eax,0x1
c0008a87:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008a8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008a8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0008a91:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a95:	8d 76 00             	lea    esi,[esi+0x0]
c0008a98:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a9d:	75 e1                	jne    c0008a80 <pbuf_clen+0xc>
c0008a9f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0008aa3:	83 c4 10             	add    esp,0x10
c0008aa6:	c3                   	ret    
c0008aa7:	90                   	nop

c0008aa8 <pbuf_ref>:
c0008aa8:	83 ec 0c             	sub    esp,0xc
c0008aab:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0008ab0:	74 1e                	je     c0008ad0 <pbuf_ref+0x28>
c0008ab2:	e8 0d 70 01 00       	call   c001fac4 <CLockScheduler>
c0008ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008abb:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0008abf:	83 c0 01             	add    eax,0x1
c0008ac2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ac6:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c0008aca:	e8 d9 6f 01 00       	call   c001faa8 <CUnlockScheduler>
c0008acf:	90                   	nop
c0008ad0:	90                   	nop
c0008ad1:	83 c4 0c             	add    esp,0xc
c0008ad4:	c3                   	ret    
c0008ad5:	8d 76 00             	lea    esi,[esi+0x0]

c0008ad8 <pbuf_cat>:
c0008ad8:	83 ec 1c             	sub    esp,0x1c
c0008adb:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008ae0:	74 0a                	je     c0008aec <pbuf_cat+0x14>
c0008ae2:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008ae7:	75 1f                	jne    c0008b08 <pbuf_cat+0x30>
c0008ae9:	8d 76 00             	lea    esi,[esi+0x0]
c0008aec:	83 ec 08             	sub    esp,0x8
c0008aef:	68 bc fb 02 c0       	push   0xc002fbbc
c0008af4:	68 66 f9 02 c0       	push   0xc002f966
c0008af9:	e8 d6 6f 01 00       	call   c001fad4 <CPrintf>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	e9 ae 00 00 00       	jmp    c0008bb4 <pbuf_cat+0xdc>
c0008b06:	66 90                	xchg   ax,ax
c0008b08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b10:	eb 26                	jmp    c0008b38 <pbuf_cat+0x60>
c0008b12:	66 90                	xchg   ax,ax
c0008b14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b18:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b1b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008b1f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b22:	01 d0                	add    eax,edx
c0008b24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008b28:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008b2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b30:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b36:	66 90                	xchg   ax,ax
c0008b38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b3e:	85 c0                	test   eax,eax
c0008b40:	75 d2                	jne    c0008b14 <pbuf_cat+0x3c>
c0008b42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b46:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4d:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008b51:	0f b7 d2             	movzx  edx,dx
c0008b54:	0f b7 c0             	movzx  eax,ax
c0008b57:	39 c2                	cmp    edx,eax
c0008b59:	74 15                	je     c0008b70 <pbuf_cat+0x98>
c0008b5b:	83 ec 08             	sub    esp,0x8
c0008b5e:	68 f4 fb 02 c0       	push   0xc002fbf4
c0008b63:	68 66 f9 02 c0       	push   0xc002f966
c0008b68:	e8 67 6f 01 00       	call   c001fad4 <CPrintf>
c0008b6d:	83 c4 10             	add    esp,0x10
c0008b70:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b76:	85 c0                	test   eax,eax
c0008b78:	74 16                	je     c0008b90 <pbuf_cat+0xb8>
c0008b7a:	83 ec 08             	sub    esp,0x8
c0008b7d:	68 00 fe 02 c0       	push   0xc002fe00
c0008b82:	68 66 f9 02 c0       	push   0xc002f966
c0008b87:	e8 48 6f 01 00       	call   c001fad4 <CPrintf>
c0008b8c:	83 c4 10             	add    esp,0x10
c0008b8f:	90                   	nop
c0008b90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b94:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008b97:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008b9b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008b9e:	01 d0                	add    eax,edx
c0008ba0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008ba4:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008ba8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008bac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bb0:	89 10                	mov    DWORD PTR [eax],edx
c0008bb2:	66 90                	xchg   ax,ax
c0008bb4:	83 c4 1c             	add    esp,0x1c
c0008bb7:	c3                   	ret    

c0008bb8 <pbuf_chain>:
c0008bb8:	83 ec 0c             	sub    esp,0xc
c0008bbb:	83 ec 08             	sub    esp,0x8
c0008bbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008bc6:	e8 0d ff ff ff       	call   c0008ad8 <pbuf_cat>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	83 ec 0c             	sub    esp,0xc
c0008bd1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008bd5:	e8 ce fe ff ff       	call   c0008aa8 <pbuf_ref>
c0008bda:	83 c4 10             	add    esp,0x10
c0008bdd:	90                   	nop
c0008bde:	83 c4 0c             	add    esp,0xc
c0008be1:	c3                   	ret    
c0008be2:	66 90                	xchg   ax,ax

c0008be4 <pbuf_dechain>:
c0008be4:	83 ec 1c             	sub    esp,0x1c
c0008be7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0008bec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008bf0:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008bf6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008bfb:	0f 84 8b 00 00 00    	je     c0008c8c <pbuf_dechain+0xa8>
c0008c01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008c05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c08:	0f b7 d0             	movzx  edx,ax
c0008c0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c0f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008c12:	0f b7 c8             	movzx  ecx,ax
c0008c15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c19:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c1d:	0f b7 c0             	movzx  eax,ax
c0008c20:	29 c1                	sub    ecx,eax
c0008c22:	89 c8                	mov    eax,ecx
c0008c24:	39 c2                	cmp    edx,eax
c0008c26:	74 18                	je     c0008c40 <pbuf_dechain+0x5c>
c0008c28:	83 ec 08             	sub    esp,0x8
c0008c2b:	68 24 fc 02 c0       	push   0xc002fc24
c0008c30:	68 66 f9 02 c0       	push   0xc002f966
c0008c35:	e8 9a 6e 01 00       	call   c001fad4 <CPrintf>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8d 76 00             	lea    esi,[esi+0x0]
c0008c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c44:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c4b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c4f:	89 d1                	mov    ecx,edx
c0008c51:	29 c1                	sub    ecx,eax
c0008c53:	89 c8                	mov    eax,ecx
c0008c55:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008c59:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c61:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c6b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c73:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c0008c77:	83 ec 0c             	sub    esp,0xc
c0008c7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c7e:	e8 1d f6 ff ff       	call   c00082a0 <pbuf_free>
c0008c83:	83 c4 10             	add    esp,0x10
c0008c86:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0008c8a:	66 90                	xchg   ax,ax
c0008c8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c90:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008c93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008c97:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008c9b:	0f b7 d2             	movzx  edx,dx
c0008c9e:	0f b7 c0             	movzx  eax,ax
c0008ca1:	39 c2                	cmp    edx,eax
c0008ca3:	74 17                	je     c0008cbc <pbuf_dechain+0xd8>
c0008ca5:	83 ec 08             	sub    esp,0x8
c0008ca8:	68 10 fe 02 c0       	push   0xc002fe10
c0008cad:	68 66 f9 02 c0       	push   0xc002f966
c0008cb2:	e8 1d 6e 01 00       	call   c001fad4 <CPrintf>
c0008cb7:	83 c4 10             	add    esp,0x10
c0008cba:	66 90                	xchg   ax,ax
c0008cbc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0008cc1:	85 c0                	test   eax,eax
c0008cc3:	75 07                	jne    c0008ccc <pbuf_dechain+0xe8>
c0008cc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008cc9:	eb 09                	jmp    c0008cd4 <pbuf_dechain+0xf0>
c0008ccb:	90                   	nop
c0008ccc:	b8 00 00 00 00       	mov    eax,0x0
c0008cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0008cd4:	83 c4 1c             	add    esp,0x1c
c0008cd7:	c3                   	ret    

c0008cd8 <pbuf_copy>:
c0008cd8:	53                   	push   ebx
c0008cd9:	83 ec 18             	sub    esp,0x18
c0008cdc:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008ce3:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008cea:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008cef:	74 1f                	je     c0008d10 <pbuf_copy+0x38>
c0008cf1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008cf6:	74 18                	je     c0008d10 <pbuf_copy+0x38>
c0008cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cfc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0008cff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d03:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008d06:	0f b7 d2             	movzx  edx,dx
c0008d09:	0f b7 c0             	movzx  eax,ax
c0008d0c:	39 c2                	cmp    edx,eax
c0008d0e:	73 1c                	jae    c0008d2c <pbuf_copy+0x54>
c0008d10:	83 ec 08             	sub    esp,0x8
c0008d13:	68 48 fc 02 c0       	push   0xc002fc48
c0008d18:	68 66 f9 02 c0       	push   0xc002f966
c0008d1d:	e8 b2 6d 01 00       	call   c001fad4 <CPrintf>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	b0 f2                	mov    al,0xf2
c0008d27:	e9 0c 02 00 00       	jmp    c0008f38 <pbuf_copy+0x260>
c0008d2c:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008d31:	75 15                	jne    c0008d48 <pbuf_copy+0x70>
c0008d33:	83 ec 08             	sub    esp,0x8
c0008d36:	68 25 fe 02 c0       	push   0xc002fe25
c0008d3b:	68 66 f9 02 c0       	push   0xc002f966
c0008d40:	e8 8f 6d 01 00       	call   c001fad4 <CPrintf>
c0008d45:	83 c4 10             	add    esp,0x10
c0008d48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d4c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d50:	0f b7 d0             	movzx  edx,ax
c0008d53:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0008d58:	89 d1                	mov    ecx,edx
c0008d5a:	29 c1                	sub    ecx,eax
c0008d5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d60:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008d64:	0f b7 d0             	movzx  edx,ax
c0008d67:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0008d6c:	29 c2                	sub    edx,eax
c0008d6e:	89 d0                	mov    eax,edx
c0008d70:	39 c1                	cmp    ecx,eax
c0008d72:	7c 1c                	jl     c0008d90 <pbuf_copy+0xb8>
c0008d74:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008d78:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008d7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d80:	89 d3                	mov    ebx,edx
c0008d82:	29 c3                	sub    ebx,eax
c0008d84:	89 d8                	mov    eax,ebx
c0008d86:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008d8b:	eb 1b                	jmp    c0008da8 <pbuf_copy+0xd0>
c0008d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0008d90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d94:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008d98:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0008d9d:	89 d3                	mov    ebx,edx
c0008d9f:	29 c3                	sub    ebx,eax
c0008da1:	89 d8                	mov    eax,ebx
c0008da3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008da8:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008dad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008db1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0008db4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008db9:	01 d1                	add    ecx,edx
c0008dbb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008dbf:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0008dc2:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008dc7:	01 da                	add    edx,ebx
c0008dc9:	83 ec 04             	sub    esp,0x4
c0008dcc:	50                   	push   eax
c0008dcd:	51                   	push   ecx
c0008dce:	52                   	push   edx
c0008dcf:	e8 a6 75 ff ff       	call   c000037a <memcpy>
c0008dd4:	83 c4 10             	add    esp,0x10
c0008dd7:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0008ddc:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008de1:	01 d0                	add    eax,edx
c0008de3:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0008de8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008dec:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008df1:	01 d0                	add    eax,edx
c0008df3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0008df8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dfc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e00:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e05:	0f b7 c0             	movzx  eax,ax
c0008e08:	39 c2                	cmp    edx,eax
c0008e0a:	76 18                	jbe    c0008e24 <pbuf_copy+0x14c>
c0008e0c:	83 ec 08             	sub    esp,0x8
c0008e0f:	68 32 fe 02 c0       	push   0xc002fe32
c0008e14:	68 66 f9 02 c0       	push   0xc002f966
c0008e19:	e8 b6 6c 01 00       	call   c001fad4 <CPrintf>
c0008e1e:	83 c4 10             	add    esp,0x10
c0008e21:	8d 76 00             	lea    esi,[esi+0x0]
c0008e24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e28:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e2c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0008e31:	0f b7 c0             	movzx  eax,ax
c0008e34:	39 c2                	cmp    edx,eax
c0008e36:	75 14                	jne    c0008e4c <pbuf_copy+0x174>
c0008e38:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0008e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008e43:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008e49:	8d 76 00             	lea    esi,[esi+0x0]
c0008e4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e50:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e54:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e59:	0f b7 c0             	movzx  eax,ax
c0008e5c:	39 c2                	cmp    edx,eax
c0008e5e:	76 18                	jbe    c0008e78 <pbuf_copy+0x1a0>
c0008e60:	83 ec 08             	sub    esp,0x8
c0008e63:	68 49 fe 02 c0       	push   0xc002fe49
c0008e68:	68 66 f9 02 c0       	push   0xc002f966
c0008e6d:	e8 62 6c 01 00       	call   c001fad4 <CPrintf>
c0008e72:	83 c4 10             	add    esp,0x10
c0008e75:	8d 76 00             	lea    esi,[esi+0x0]
c0008e78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e7c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008e80:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0008e85:	0f b7 c0             	movzx  eax,ax
c0008e88:	39 c2                	cmp    edx,eax
c0008e8a:	72 14                	jb     c0008ea0 <pbuf_copy+0x1c8>
c0008e8c:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c0008e93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008e97:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e99:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0008ea0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008ea5:	74 3d                	je     c0008ee4 <pbuf_copy+0x20c>
c0008ea7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008eab:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008eaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008eb3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008eb6:	0f b7 d2             	movzx  edx,dx
c0008eb9:	0f b7 c0             	movzx  eax,ax
c0008ebc:	39 c2                	cmp    edx,eax
c0008ebe:	75 24                	jne    c0008ee4 <pbuf_copy+0x20c>
c0008ec0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0008ec4:	8b 00                	mov    eax,DWORD PTR [eax]
c0008ec6:	85 c0                	test   eax,eax
c0008ec8:	74 1a                	je     c0008ee4 <pbuf_copy+0x20c>
c0008eca:	83 ec 08             	sub    esp,0x8
c0008ecd:	68 78 fc 02 c0       	push   0xc002fc78
c0008ed2:	68 66 f9 02 c0       	push   0xc002f966
c0008ed7:	e8 f8 6b 01 00       	call   c001fad4 <CPrintf>
c0008edc:	83 c4 10             	add    esp,0x10
c0008edf:	b0 fa                	mov    al,0xfa
c0008ee1:	eb 55                	jmp    c0008f38 <pbuf_copy+0x260>
c0008ee3:	90                   	nop
c0008ee4:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0008ee9:	74 3d                	je     c0008f28 <pbuf_copy+0x250>
c0008eeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008eef:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0008ef3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ef7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008efa:	0f b7 d2             	movzx  edx,dx
c0008efd:	0f b7 c0             	movzx  eax,ax
c0008f00:	39 c2                	cmp    edx,eax
c0008f02:	75 24                	jne    c0008f28 <pbuf_copy+0x250>
c0008f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008f08:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f0a:	85 c0                	test   eax,eax
c0008f0c:	74 1a                	je     c0008f28 <pbuf_copy+0x250>
c0008f0e:	83 ec 08             	sub    esp,0x8
c0008f11:	68 78 fc 02 c0       	push   0xc002fc78
c0008f16:	68 66 f9 02 c0       	push   0xc002f966
c0008f1b:	e8 b4 6b 01 00       	call   c001fad4 <CPrintf>
c0008f20:	83 c4 10             	add    esp,0x10
c0008f23:	b0 fa                	mov    al,0xfa
c0008f25:	eb 11                	jmp    c0008f38 <pbuf_copy+0x260>
c0008f27:	90                   	nop
c0008f28:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008f2d:	0f 85 f9 fd ff ff    	jne    c0008d2c <pbuf_copy+0x54>
c0008f33:	b0 00                	mov    al,0x0
c0008f35:	8d 76 00             	lea    esi,[esi+0x0]
c0008f38:	83 c4 18             	add    esp,0x18
c0008f3b:	5b                   	pop    ebx
c0008f3c:	c3                   	ret    
c0008f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0008f40 <pbuf_copy_partial>:
c0008f40:	53                   	push   ebx
c0008f41:	83 ec 28             	sub    esp,0x28
c0008f44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008f48:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0008f4c:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c0008f51:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008f56:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008f5d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008f62:	75 20                	jne    c0008f84 <pbuf_copy_partial+0x44>
c0008f64:	83 ec 08             	sub    esp,0x8
c0008f67:	68 a4 fc 02 c0       	push   0xc002fca4
c0008f6c:	68 66 f9 02 c0       	push   0xc002f966
c0008f71:	e8 5e 6b 01 00       	call   c001fad4 <CPrintf>
c0008f76:	83 c4 10             	add    esp,0x10
c0008f79:	b8 00 00 00 00       	mov    eax,0x0
c0008f7e:	e9 59 01 00 00       	jmp    c00090dc <pbuf_copy_partial+0x19c>
c0008f83:	90                   	nop
c0008f84:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008f89:	75 21                	jne    c0008fac <pbuf_copy_partial+0x6c>
c0008f8b:	83 ec 08             	sub    esp,0x8
c0008f8e:	68 c4 fc 02 c0       	push   0xc002fcc4
c0008f93:	68 66 f9 02 c0       	push   0xc002f966
c0008f98:	e8 37 6b 01 00       	call   c001fad4 <CPrintf>
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	b8 00 00 00 00       	mov    eax,0x0
c0008fa5:	e9 32 01 00 00       	jmp    c00090dc <pbuf_copy_partial+0x19c>
c0008faa:	66 90                	xchg   ax,ax
c0008fac:	66 c7 44 24 1a 00 00 	mov    WORD PTR [esp+0x1a],0x0
c0008fb3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0008fb8:	74 0a                	je     c0008fc4 <pbuf_copy_partial+0x84>
c0008fba:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0008fbf:	75 0f                	jne    c0008fd0 <pbuf_copy_partial+0x90>
c0008fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0008fc4:	b8 00 00 00 00       	mov    eax,0x0
c0008fc9:	e9 0e 01 00 00       	jmp    c00090dc <pbuf_copy_partial+0x19c>
c0008fce:	66 90                	xchg   ax,ax
c0008fd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008fd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fd8:	e9 e3 00 00 00       	jmp    c00090c0 <pbuf_copy_partial+0x180>
c0008fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0008fe0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008fe5:	85 c0                	test   eax,eax
c0008fe7:	74 33                	je     c000901c <pbuf_copy_partial+0xdc>
c0008fe9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fed:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0008ff1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0008ff6:	0f b7 c0             	movzx  eax,ax
c0008ff9:	39 c2                	cmp    edx,eax
c0008ffb:	72 1f                	jb     c000901c <pbuf_copy_partial+0xdc>
c0008ffd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009001:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009005:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009009:	89 d3                	mov    ebx,edx
c000900b:	29 c3                	sub    ebx,eax
c000900d:	89 d8                	mov    eax,ebx
c000900f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0009014:	e9 9b 00 00 00       	jmp    c00090b4 <pbuf_copy_partial+0x174>
c0009019:	8d 76 00             	lea    esi,[esi+0x0]
c000901c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009020:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0009024:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009028:	89 d1                	mov    ecx,edx
c000902a:	29 c1                	sub    ecx,eax
c000902c:	89 c8                	mov    eax,ecx
c000902e:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009033:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0009038:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000903d:	39 c2                	cmp    edx,eax
c000903f:	76 0b                	jbe    c000904c <pbuf_copy_partial+0x10c>
c0009041:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009045:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c000904a:	66 90                	xchg   ax,ax
c000904c:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009051:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009055:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0009058:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000905d:	01 d1                	add    ecx,edx
c000905f:	0f b7 5c 24 1a       	movzx  ebx,WORD PTR [esp+0x1a]
c0009064:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009068:	01 da                	add    edx,ebx
c000906a:	83 ec 04             	sub    esp,0x4
c000906d:	50                   	push   eax
c000906e:	51                   	push   ecx
c000906f:	52                   	push   edx
c0009070:	e8 05 73 ff ff       	call   c000037a <memcpy>
c0009075:	83 c4 10             	add    esp,0x10
c0009078:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000907d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009081:	01 d0                	add    eax,edx
c0009083:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009088:	66 8b 54 24 1a       	mov    dx,WORD PTR [esp+0x1a]
c000908d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009091:	01 d0                	add    eax,edx
c0009093:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0009098:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000909c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00090a0:	89 d3                	mov    ebx,edx
c00090a2:	29 c3                	sub    ebx,eax
c00090a4:	89 d8                	mov    eax,ebx
c00090a6:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00090ab:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00090b2:	66 90                	xchg   ax,ax
c00090b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00090b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00090be:	66 90                	xchg   ax,ax
c00090c0:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00090c5:	85 c0                	test   eax,eax
c00090c7:	74 0b                	je     c00090d4 <pbuf_copy_partial+0x194>
c00090c9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00090ce:	0f 85 0c ff ff ff    	jne    c0008fe0 <pbuf_copy_partial+0xa0>
c00090d4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00090d9:	8d 76 00             	lea    esi,[esi+0x0]
c00090dc:	83 c4 28             	add    esp,0x28
c00090df:	5b                   	pop    ebx
c00090e0:	c3                   	ret    
c00090e1:	8d 76 00             	lea    esi,[esi+0x0]

c00090e4 <pbuf_take>:
c00090e4:	83 ec 2c             	sub    esp,0x2c
c00090e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00090eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00090f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00090f4:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c00090f9:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0009100:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0009105:	75 1d                	jne    c0009124 <pbuf_take+0x40>
c0009107:	83 ec 08             	sub    esp,0x8
c000910a:	68 64 fe 02 c0       	push   0xc002fe64
c000910f:	68 66 f9 02 c0       	push   0xc002f966
c0009114:	e8 bb 69 01 00       	call   c001fad4 <CPrintf>
c0009119:	83 c4 10             	add    esp,0x10
c000911c:	b0 00                	mov    al,0x0
c000911e:	e9 3d 01 00 00       	jmp    c0009260 <pbuf_take+0x17c>
c0009123:	90                   	nop
c0009124:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009129:	75 1d                	jne    c0009148 <pbuf_take+0x64>
c000912b:	83 ec 08             	sub    esp,0x8
c000912e:	68 7b fe 02 c0       	push   0xc002fe7b
c0009133:	68 66 f9 02 c0       	push   0xc002f966
c0009138:	e8 97 69 01 00       	call   c001fad4 <CPrintf>
c000913d:	83 c4 10             	add    esp,0x10
c0009140:	b0 00                	mov    al,0x0
c0009142:	e9 19 01 00 00       	jmp    c0009260 <pbuf_take+0x17c>
c0009147:	90                   	nop
c0009148:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000914d:	74 1d                	je     c000916c <pbuf_take+0x88>
c000914f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009154:	74 16                	je     c000916c <pbuf_take+0x88>
c0009156:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000915a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000915d:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009162:	0f b7 c0             	movzx  eax,ax
c0009165:	39 c2                	cmp    edx,eax
c0009167:	76 0b                	jbe    c0009174 <pbuf_take+0x90>
c0009169:	8d 76 00             	lea    esi,[esi+0x0]
c000916c:	b0 f2                	mov    al,0xf2
c000916e:	e9 ed 00 00 00       	jmp    c0009260 <pbuf_take+0x17c>
c0009173:	90                   	nop
c0009174:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009178:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000917c:	e9 9f 00 00 00       	jmp    c0009220 <pbuf_take+0x13c>
c0009181:	8d 76 00             	lea    esi,[esi+0x0]
c0009184:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009189:	75 15                	jne    c00091a0 <pbuf_take+0xbc>
c000918b:	83 ec 08             	sub    esp,0x8
c000918e:	68 96 fe 02 c0       	push   0xc002fe96
c0009193:	68 66 f9 02 c0       	push   0xc002f966
c0009198:	e8 37 69 01 00       	call   c001fad4 <CPrintf>
c000919d:	83 c4 10             	add    esp,0x10
c00091a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00091a4:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00091a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091ad:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00091b1:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00091b6:	0f b7 c0             	movzx  eax,ax
c00091b9:	39 c2                	cmp    edx,eax
c00091bb:	76 0f                	jbe    c00091cc <pbuf_take+0xe8>
c00091bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091c1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00091c5:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00091ca:	66 90                	xchg   ax,ax
c00091cc:	0f b7 54 24 1a       	movzx  edx,WORD PTR [esp+0x1a]
c00091d1:	0f b7 4c 24 16       	movzx  ecx,WORD PTR [esp+0x16]
c00091d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00091da:	01 c1                	add    ecx,eax
c00091dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091e3:	83 ec 04             	sub    esp,0x4
c00091e6:	52                   	push   edx
c00091e7:	51                   	push   ecx
c00091e8:	50                   	push   eax
c00091e9:	e8 8c 71 ff ff       	call   c000037a <memcpy>
c00091ee:	83 c4 10             	add    esp,0x10
c00091f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00091f5:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00091fa:	89 d1                	mov    ecx,edx
c00091fc:	29 c1                	sub    ecx,eax
c00091fe:	89 c8                	mov    eax,ecx
c0009200:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0009205:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000920a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000920f:	01 d0                	add    eax,edx
c0009211:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009216:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000921a:	8b 00                	mov    eax,DWORD PTR [eax]
c000921c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009220:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009225:	85 c0                	test   eax,eax
c0009227:	0f 85 57 ff ff ff    	jne    c0009184 <pbuf_take+0xa0>
c000922d:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0009232:	85 c0                	test   eax,eax
c0009234:	75 0e                	jne    c0009244 <pbuf_take+0x160>
c0009236:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c000923b:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009240:	39 c2                	cmp    edx,eax
c0009242:	74 18                	je     c000925c <pbuf_take+0x178>
c0009244:	83 ec 08             	sub    esp,0x8
c0009247:	68 ae fe 02 c0       	push   0xc002feae
c000924c:	68 66 f9 02 c0       	push   0xc002f966
c0009251:	e8 7e 68 01 00       	call   c001fad4 <CPrintf>
c0009256:	83 c4 10             	add    esp,0x10
c0009259:	8d 76 00             	lea    esi,[esi+0x0]
c000925c:	b0 00                	mov    al,0x0
c000925e:	66 90                	xchg   ax,ax
c0009260:	83 c4 2c             	add    esp,0x2c
c0009263:	c3                   	ret    

c0009264 <pbuf_coalesce>:
c0009264:	83 ec 1c             	sub    esp,0x1c
c0009267:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000926b:	8b 00                	mov    eax,DWORD PTR [eax]
c000926d:	85 c0                	test   eax,eax
c000926f:	75 07                	jne    c0009278 <pbuf_coalesce+0x14>
c0009271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009275:	eb 7d                	jmp    c00092f4 <pbuf_coalesce+0x90>
c0009277:	90                   	nop
c0009278:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000927f:	0f b7 c0             	movzx  eax,ax
c0009282:	83 ec 04             	sub    esp,0x4
c0009285:	6a 00                	push   0x0
c0009287:	50                   	push   eax
c0009288:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000928c:	e8 e7 f1 ff ff       	call   c0008478 <pbuf_alloc>
c0009291:	83 c4 10             	add    esp,0x10
c0009294:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009298:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000929d:	75 09                	jne    c00092a8 <pbuf_coalesce+0x44>
c000929f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092a3:	eb 4f                	jmp    c00092f4 <pbuf_coalesce+0x90>
c00092a5:	8d 76 00             	lea    esi,[esi+0x0]
c00092a8:	83 ec 08             	sub    esp,0x8
c00092ab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00092af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00092b3:	e8 20 fa ff ff       	call   c0008cd8 <pbuf_copy>
c00092b8:	83 c4 10             	add    esp,0x10
c00092bb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00092bf:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c00092c4:	85 c0                	test   eax,eax
c00092c6:	74 18                	je     c00092e0 <pbuf_coalesce+0x7c>
c00092c8:	83 ec 08             	sub    esp,0x8
c00092cb:	68 c4 fe 02 c0       	push   0xc002fec4
c00092d0:	68 66 f9 02 c0       	push   0xc002f966
c00092d5:	e8 fa 67 01 00       	call   c001fad4 <CPrintf>
c00092da:	83 c4 10             	add    esp,0x10
c00092dd:	8d 76 00             	lea    esi,[esi+0x0]
c00092e0:	83 ec 0c             	sub    esp,0xc
c00092e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00092e7:	e8 b4 ef ff ff       	call   c00082a0 <pbuf_free>
c00092ec:	83 c4 10             	add    esp,0x10
c00092ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092f3:	90                   	nop
c00092f4:	83 c4 1c             	add    esp,0x1c
c00092f7:	c3                   	ret    

c00092f8 <pbuf_get_at>:
c00092f8:	83 ec 14             	sub    esp,0x14
c00092fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00092ff:	66 89 04 24          	mov    WORD PTR [esp],ax
c0009303:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009306:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000930b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000930f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009313:	eb 27                	jmp    c000933c <pbuf_get_at+0x44>
c0009315:	8d 76 00             	lea    esi,[esi+0x0]
c0009318:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000931c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009320:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0009325:	89 d1                	mov    ecx,edx
c0009327:	29 c1                	sub    ecx,eax
c0009329:	89 c8                	mov    eax,ecx
c000932b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0009330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009334:	8b 00                	mov    eax,DWORD PTR [eax]
c0009336:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000933a:	66 90                	xchg   ax,ax
c000933c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009341:	74 15                	je     c0009358 <pbuf_get_at+0x60>
c0009343:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009347:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000934b:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c0009350:	0f b7 c0             	movzx  eax,ax
c0009353:	39 c2                	cmp    edx,eax
c0009355:	73 c1                	jae    c0009318 <pbuf_get_at+0x20>
c0009357:	90                   	nop
c0009358:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000935d:	74 29                	je     c0009388 <pbuf_get_at+0x90>
c000935f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009363:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0009367:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000936c:	0f b7 c0             	movzx  eax,ax
c000936f:	39 c2                	cmp    edx,eax
c0009371:	73 15                	jae    c0009388 <pbuf_get_at+0x90>
c0009373:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009377:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000937a:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000937f:	01 d0                	add    eax,edx
c0009381:	8a 00                	mov    al,BYTE PTR [eax]
c0009383:	eb 07                	jmp    c000938c <pbuf_get_at+0x94>
c0009385:	8d 76 00             	lea    esi,[esi+0x0]
c0009388:	b0 00                	mov    al,0x0
c000938a:	66 90                	xchg   ax,ax
c000938c:	83 c4 14             	add    esp,0x14
c000938f:	c3                   	ret    

c0009390 <pbuf_memcmp>:
c0009390:	83 ec 18             	sub    esp,0x18
c0009393:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009397:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000939b:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00093a0:	66 89 04 24          	mov    WORD PTR [esp],ax
c00093a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093a8:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00093ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00093b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093b5:	eb 25                	jmp    c00093dc <pbuf_memcmp+0x4c>
c00093b7:	90                   	nop
c00093b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093bc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093c0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00093c5:	89 d1                	mov    ecx,edx
c00093c7:	29 c1                	sub    ecx,eax
c00093c9:	89 c8                	mov    eax,ecx
c00093cb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00093d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00093d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093da:	66 90                	xchg   ax,ax
c00093dc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00093e1:	74 15                	je     c00093f8 <pbuf_memcmp+0x68>
c00093e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00093eb:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c00093f0:	0f b7 c0             	movzx  eax,ax
c00093f3:	39 c2                	cmp    edx,eax
c00093f5:	73 c1                	jae    c00093b8 <pbuf_memcmp+0x28>
c00093f7:	90                   	nop
c00093f8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00093fd:	0f 84 8d 00 00 00    	je     c0009490 <pbuf_memcmp+0x100>
c0009403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009407:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000940b:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009410:	0f b7 c0             	movzx  eax,ax
c0009413:	39 c2                	cmp    edx,eax
c0009415:	73 79                	jae    c0009490 <pbuf_memcmp+0x100>
c0009417:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000941e:	eb 5c                	jmp    c000947c <pbuf_memcmp+0xec>
c0009420:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009425:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000942a:	01 d0                	add    eax,edx
c000942c:	0f b7 c0             	movzx  eax,ax
c000942f:	50                   	push   eax
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	e8 bf fe ff ff       	call   c00092f8 <pbuf_get_at>
c0009439:	83 c4 08             	add    esp,0x8
c000943c:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0009440:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009445:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009449:	01 d0                	add    eax,edx
c000944b:	8a 00                	mov    al,BYTE PTR [eax]
c000944d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009451:	0f b6 54 24 0d       	movzx  edx,BYTE PTR [esp+0xd]
c0009456:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000945b:	39 c2                	cmp    edx,eax
c000945d:	74 0d                	je     c000946c <pbuf_memcmp+0xdc>
c000945f:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009464:	83 c0 01             	add    eax,0x1
c0009467:	eb 2f                	jmp    c0009498 <pbuf_memcmp+0x108>
c0009469:	8d 76 00             	lea    esi,[esi+0x0]
c000946c:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0009471:	83 c0 01             	add    eax,0x1
c0009474:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0009479:	8d 76 00             	lea    esi,[esi+0x0]
c000947c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c0009481:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0009485:	39 c2                	cmp    edx,eax
c0009487:	72 97                	jb     c0009420 <pbuf_memcmp+0x90>
c0009489:	b8 00 00 00 00       	mov    eax,0x0
c000948e:	eb 08                	jmp    c0009498 <pbuf_memcmp+0x108>
c0009490:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009495:	8d 76 00             	lea    esi,[esi+0x0]
c0009498:	83 c4 18             	add    esp,0x18
c000949b:	c3                   	ret    

c000949c <pbuf_memfind>:
c000949c:	83 ec 18             	sub    esp,0x18
c000949f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00094a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00094a7:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00094ac:	66 89 04 24          	mov    WORD PTR [esp],ax
c00094b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00094b4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00094b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094bb:	89 d1                	mov    ecx,edx
c00094bd:	29 c1                	sub    ecx,eax
c00094bf:	89 c8                	mov    eax,ecx
c00094c1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00094c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00094ca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00094cd:	0f b7 c0             	movzx  eax,ax
c00094d0:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c00094d5:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c00094d9:	01 ca                	add    edx,ecx
c00094db:	39 d0                	cmp    eax,edx
c00094dd:	7c 65                	jl     c0009544 <pbuf_memfind+0xa8>
c00094df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00094e2:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00094e7:	eb 4b                	jmp    c0009534 <pbuf_memfind+0x98>
c00094e9:	8d 76 00             	lea    esi,[esi+0x0]
c00094ec:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c00094f1:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00094f6:	52                   	push   edx
c00094f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094fb:	50                   	push   eax
c00094fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009500:	e8 8b fe ff ff       	call   c0009390 <pbuf_memcmp>
c0009505:	83 c4 10             	add    esp,0x10
c0009508:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000950d:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0009512:	85 c0                	test   eax,eax
c0009514:	75 0a                	jne    c0009520 <pbuf_memfind+0x84>
c0009516:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000951b:	eb 2f                	jmp    c000954c <pbuf_memfind+0xb0>
c000951d:	8d 76 00             	lea    esi,[esi+0x0]
c0009520:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0009525:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000952a:	01 d0                	add    eax,edx
c000952c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0009531:	8d 76 00             	lea    esi,[esi+0x0]
c0009534:	0f b7 54 24 16       	movzx  edx,WORD PTR [esp+0x16]
c0009539:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c000953e:	39 c2                	cmp    edx,eax
c0009540:	76 aa                	jbe    c00094ec <pbuf_memfind+0x50>
c0009542:	66 90                	xchg   ax,ax
c0009544:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009549:	8d 76 00             	lea    esi,[esi+0x0]
c000954c:	83 c4 18             	add    esp,0x18
c000954f:	c3                   	ret    

c0009550 <pbuf_strstr>:
c0009550:	83 ec 1c             	sub    esp,0x1c
c0009553:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0009558:	74 1e                	je     c0009578 <pbuf_strstr+0x28>
c000955a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000955e:	8a 00                	mov    al,BYTE PTR [eax]
c0009560:	0f be c0             	movsx  eax,al
c0009563:	85 c0                	test   eax,eax
c0009565:	74 11                	je     c0009578 <pbuf_strstr+0x28>
c0009567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000956b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000956e:	0f b7 c0             	movzx  eax,ax
c0009571:	3d ff ff 00 00       	cmp    eax,0xffff
c0009576:	75 08                	jne    c0009580 <pbuf_strstr+0x30>
c0009578:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000957d:	eb 41                	jmp    c00095c0 <pbuf_strstr+0x70>
c000957f:	90                   	nop
c0009580:	83 ec 0c             	sub    esp,0xc
c0009583:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009587:	e8 e4 6f ff ff       	call   c0000570 <strlen>
c000958c:	83 c4 10             	add    esp,0x10
c000958f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009593:	81 7c 24 0c fe ff 00 00 	cmp    DWORD PTR [esp+0xc],0xfffe
c000959b:	76 07                	jbe    c00095a4 <pbuf_strstr+0x54>
c000959d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00095a2:	eb 1c                	jmp    c00095c0 <pbuf_strstr+0x70>
c00095a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00095a8:	0f b7 c0             	movzx  eax,ax
c00095ab:	6a 00                	push   0x0
c00095ad:	50                   	push   eax
c00095ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00095b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00095b6:	e8 e1 fe ff ff       	call   c000949c <pbuf_memfind>
c00095bb:	83 c4 10             	add    esp,0x10
c00095be:	66 90                	xchg   ax,ax
c00095c0:	83 c4 1c             	add    esp,0x1c
c00095c3:	c3                   	ret    

c00095c4 <raw_input>:
c00095c4:	83 ec 2c             	sub    esp,0x2c
c00095c7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00095cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00095d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00095d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095db:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c00095de:	0f b6 c0             	movzx  eax,al
c00095e1:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00095e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00095ee:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00095f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00095f7:	e9 b8 00 00 00       	jmp    c00096b4 <raw_input+0xf0>
c00095fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009600:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0009603:	0f b6 d0             	movzx  edx,al
c0009606:	0f bf 44 24 0e       	movsx  eax,WORD PTR [esp+0xe]
c000960b:	39 c2                	cmp    edx,eax
c000960d:	0f 85 8d 00 00 00    	jne    c00096a0 <raw_input+0xdc>
c0009613:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009617:	85 c0                	test   eax,eax
c0009619:	74 19                	je     c0009634 <raw_input+0x70>
c000961b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000961f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009621:	85 c0                	test   eax,eax
c0009623:	74 0f                	je     c0009634 <raw_input+0x70>
c0009625:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009629:	8b 10                	mov    edx,DWORD PTR [eax]
c000962b:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0009630:	39 c2                	cmp    edx,eax
c0009632:	75 6c                	jne    c00096a0 <raw_input+0xdc>
c0009634:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009638:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000963b:	85 c0                	test   eax,eax
c000963d:	74 61                	je     c00096a0 <raw_input+0xdc>
c000963f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009643:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0009646:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000964a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000964d:	68 90 68 03 c0       	push   0xc0036890
c0009652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	52                   	push   edx
c000965b:	ff d0                	call   eax
c000965d:	83 c4 10             	add    esp,0x10
c0009660:	0f b6 c0             	movzx  eax,al
c0009663:	85 c0                	test   eax,eax
c0009665:	74 39                	je     c00096a0 <raw_input+0xdc>
c0009667:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000966f:	c6 44 24 17 01       	mov    BYTE PTR [esp+0x17],0x1
c0009674:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009679:	74 25                	je     c00096a0 <raw_input+0xdc>
c000967b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000967f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0009682:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009686:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009689:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c000968f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009693:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009696:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000969a:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000969f:	90                   	nop
c00096a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00096a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00096ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00096af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00096b3:	90                   	nop
c00096b4:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00096b9:	85 c0                	test   eax,eax
c00096bb:	75 0b                	jne    c00096c8 <raw_input+0x104>
c00096bd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00096c2:	0f 85 34 ff ff ff    	jne    c00095fc <raw_input+0x38>
c00096c8:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00096cc:	83 c4 2c             	add    esp,0x2c
c00096cf:	c3                   	ret    

c00096d0 <raw_bind>:
c00096d0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00096d5:	74 09                	je     c00096e0 <raw_bind+0x10>
c00096d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096db:	8b 00                	mov    eax,DWORD PTR [eax]
c00096dd:	eb 09                	jmp    c00096e8 <raw_bind+0x18>
c00096df:	90                   	nop
c00096e0:	b8 00 00 00 00       	mov    eax,0x0
c00096e5:	8d 76 00             	lea    esi,[esi+0x0]
c00096e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00096ec:	89 02                	mov    DWORD PTR [edx],eax
c00096ee:	b0 00                	mov    al,0x0
c00096f0:	c3                   	ret    
c00096f1:	8d 76 00             	lea    esi,[esi+0x0]

c00096f4 <raw_connect>:
c00096f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00096f9:	74 09                	je     c0009704 <raw_connect+0x10>
c00096fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0009701:	eb 09                	jmp    c000970c <raw_connect+0x18>
c0009703:	90                   	nop
c0009704:	b8 00 00 00 00       	mov    eax,0x0
c0009709:	8d 76 00             	lea    esi,[esi+0x0]
c000970c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009710:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009713:	b0 00                	mov    al,0x0
c0009715:	c3                   	ret    
c0009716:	66 90                	xchg   ax,ax

c0009718 <raw_recv>:
c0009718:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000971c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009720:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0009723:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009727:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000972b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000972e:	90                   	nop
c000972f:	c3                   	ret    

c0009730 <raw_sendto>:
c0009730:	83 ec 1c             	sub    esp,0x1c
c0009733:	83 ec 08             	sub    esp,0x8
c0009736:	6a 14                	push   0x14
c0009738:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000973c:	e8 c3 e9 ff ff       	call   c0008104 <pbuf_header>
c0009741:	83 c4 10             	add    esp,0x10
c0009744:	0f b6 c0             	movzx  eax,al
c0009747:	85 c0                	test   eax,eax
c0009749:	74 49                	je     c0009794 <raw_sendto+0x64>
c000974b:	83 ec 04             	sub    esp,0x4
c000974e:	6a 00                	push   0x0
c0009750:	6a 00                	push   0x0
c0009752:	6a 01                	push   0x1
c0009754:	e8 1f ed ff ff       	call   c0008478 <pbuf_alloc>
c0009759:	83 c4 10             	add    esp,0x10
c000975c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009760:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009765:	75 09                	jne    c0009770 <raw_sendto+0x40>
c0009767:	b0 ff                	mov    al,0xff
c0009769:	e9 2a 01 00 00       	jmp    c0009898 <raw_sendto+0x168>
c000976e:	66 90                	xchg   ax,ax
c0009770:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009774:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009777:	0f b7 c0             	movzx  eax,ax
c000977a:	85 c0                	test   eax,eax
c000977c:	74 52                	je     c00097d0 <raw_sendto+0xa0>
c000977e:	83 ec 08             	sub    esp,0x8
c0009781:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009789:	e8 2a f4 ff ff       	call   c0008bb8 <pbuf_chain>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	eb 3d                	jmp    c00097d0 <raw_sendto+0xa0>
c0009793:	90                   	nop
c0009794:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009798:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000979c:	83 ec 08             	sub    esp,0x8
c000979f:	6a ec                	push   0xffffffec
c00097a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097a5:	e8 5a e9 ff ff       	call   c0008104 <pbuf_header>
c00097aa:	83 c4 10             	add    esp,0x10
c00097ad:	0f b6 c0             	movzx  eax,al
c00097b0:	85 c0                	test   eax,eax
c00097b2:	74 1c                	je     c00097d0 <raw_sendto+0xa0>
c00097b4:	83 ec 08             	sub    esp,0x8
c00097b7:	68 d8 fe 02 c0       	push   0xc002fed8
c00097bc:	68 66 f9 02 c0       	push   0xc002f966
c00097c1:	e8 0e 63 01 00       	call   c001fad4 <CPrintf>
c00097c6:	83 c4 10             	add    esp,0x10
c00097c9:	b0 ff                	mov    al,0xff
c00097cb:	e9 c8 00 00 00       	jmp    c0009898 <raw_sendto+0x168>
c00097d0:	83 ec 0c             	sub    esp,0xc
c00097d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097d7:	e8 6c 9d 00 00       	call   c0013548 <ip_route>
c00097dc:	83 c4 10             	add    esp,0x10
c00097df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00097e3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00097e8:	75 22                	jne    c000980c <raw_sendto+0xdc>
c00097ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00097ee:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c00097f2:	74 10                	je     c0009804 <raw_sendto+0xd4>
c00097f4:	83 ec 0c             	sub    esp,0xc
c00097f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097fb:	e8 a0 ea ff ff       	call   c00082a0 <pbuf_free>
c0009800:	83 c4 10             	add    esp,0x10
c0009803:	90                   	nop
c0009804:	b0 fc                	mov    al,0xfc
c0009806:	e9 8d 00 00 00       	jmp    c0009898 <raw_sendto+0x168>
c000980b:	90                   	nop
c000980c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009810:	85 c0                	test   eax,eax
c0009812:	74 0c                	je     c0009820 <raw_sendto+0xf0>
c0009814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009818:	8b 00                	mov    eax,DWORD PTR [eax]
c000981a:	85 c0                	test   eax,eax
c000981c:	75 12                	jne    c0009830 <raw_sendto+0x100>
c000981e:	66 90                	xchg   ax,ax
c0009820:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009824:	83 c0 04             	add    eax,0x4
c0009827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000982b:	eb 0b                	jmp    c0009838 <raw_sendto+0x108>
c000982d:	8d 76 00             	lea    esi,[esi+0x0]
c0009830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000983c:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c000983f:	0f b6 c8             	movzx  ecx,al
c0009842:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009846:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0009849:	0f b6 d0             	movzx  edx,al
c000984c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009850:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0009853:	0f b6 c0             	movzx  eax,al
c0009856:	83 ec 04             	sub    esp,0x4
c0009859:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000985d:	51                   	push   ecx
c000985e:	52                   	push   edx
c000985f:	50                   	push   eax
c0009860:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009864:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009868:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000986c:	e8 af a1 00 00       	call   c0013a20 <ip_output_if>
c0009871:	83 c4 20             	add    esp,0x20
c0009874:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0009878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000987c:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c0009880:	74 12                	je     c0009894 <raw_sendto+0x164>
c0009882:	83 ec 0c             	sub    esp,0xc
c0009885:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009889:	e8 12 ea ff ff       	call   c00082a0 <pbuf_free>
c000988e:	83 c4 10             	add    esp,0x10
c0009891:	8d 76 00             	lea    esi,[esi+0x0]
c0009894:	8a 44 24 03          	mov    al,BYTE PTR [esp+0x3]
c0009898:	83 c4 1c             	add    esp,0x1c
c000989b:	c3                   	ret    

c000989c <raw_send>:
c000989c:	83 ec 0c             	sub    esp,0xc
c000989f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098a3:	83 c0 04             	add    eax,0x4
c00098a6:	83 ec 04             	sub    esp,0x4
c00098a9:	50                   	push   eax
c00098aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098b2:	e8 79 fe ff ff       	call   c0009730 <raw_sendto>
c00098b7:	83 c4 10             	add    esp,0x10
c00098ba:	83 c4 0c             	add    esp,0xc
c00098bd:	c3                   	ret    
c00098be:	66 90                	xchg   ax,ax

c00098c0 <raw_remove>:
c00098c0:	83 ec 1c             	sub    esp,0x1c
c00098c3:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00098c8:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00098cc:	75 12                	jne    c00098e0 <raw_remove+0x20>
c00098ce:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00098d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098d6:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c00098db:	eb 4b                	jmp    c0009928 <raw_remove+0x68>
c00098dd:	8d 76 00             	lea    esi,[esi+0x0]
c00098e0:	a1 9c a8 03 c0       	mov    eax,ds:0xc003a89c
c00098e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098e9:	eb 35                	jmp    c0009920 <raw_remove+0x60>
c00098eb:	90                   	nop
c00098ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098f3:	85 c0                	test   eax,eax
c00098f5:	74 1d                	je     c0009914 <raw_remove+0x54>
c00098f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098fe:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0009902:	75 10                	jne    c0009914 <raw_remove+0x54>
c0009904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009908:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000990b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000990f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009912:	66 90                	xchg   ax,ax
c0009914:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009918:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000991b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000991f:	90                   	nop
c0009920:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009925:	75 c5                	jne    c00098ec <raw_remove+0x2c>
c0009927:	90                   	nop
c0009928:	83 ec 08             	sub    esp,0x8
c000992b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000992f:	6a 00                	push   0x0
c0009931:	e8 ae e0 ff ff       	call   c00079e4 <memp_free>
c0009936:	83 c4 10             	add    esp,0x10
c0009939:	90                   	nop
c000993a:	83 c4 1c             	add    esp,0x1c
c000993d:	c3                   	ret    
c000993e:	66 90                	xchg   ax,ax

c0009940 <raw_new>:
c0009940:	83 ec 2c             	sub    esp,0x2c
c0009943:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009947:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000994b:	83 ec 0c             	sub    esp,0xc
c000994e:	6a 00                	push   0x0
c0009950:	e8 63 df ff ff       	call   c00078b8 <memp_malloc>
c0009955:	83 c4 10             	add    esp,0x10
c0009958:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000995c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009961:	74 3d                	je     c00099a0 <raw_new+0x60>
c0009963:	83 ec 04             	sub    esp,0x4
c0009966:	6a 1c                	push   0x1c
c0009968:	6a 00                	push   0x0
c000996a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000996e:	e8 7d 6b ff ff       	call   c00004f0 <memset>
c0009973:	83 c4 10             	add    esp,0x10
c0009976:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000997a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000997e:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0009981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009985:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c0009989:	8b 15 9c a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a89c
c000998f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009993:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009996:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000999a:	a3 9c a8 03 c0       	mov    ds:0xc003a89c,eax
c000999f:	90                   	nop
c00099a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00099a4:	83 c4 2c             	add    esp,0x2c
c00099a7:	c3                   	ret    

c00099a8 <stats_init>:
c00099a8:	90                   	nop
c00099a9:	c3                   	ret    
c00099aa:	66 90                	xchg   ax,ax

c00099ac <sys_msleep>:
c00099ac:	83 ec 1c             	sub    esp,0x1c
c00099af:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00099b4:	74 46                	je     c00099fc <sys_msleep+0x50>
c00099b6:	83 ec 08             	sub    esp,0x8
c00099b9:	6a 00                	push   0x0
c00099bb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099bf:	50                   	push   eax
c00099c0:	e8 7f 72 ff ff       	call   c0000c44 <sys_sem_new>
c00099c5:	83 c4 10             	add    esp,0x10
c00099c8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00099cc:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00099d1:	85 c0                	test   eax,eax
c00099d3:	75 27                	jne    c00099fc <sys_msleep+0x50>
c00099d5:	83 ec 08             	sub    esp,0x8
c00099d8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00099dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099e0:	50                   	push   eax
c00099e1:	e8 b6 72 ff ff       	call   c0000c9c <sys_arch_sem_wait>
c00099e6:	83 c4 10             	add    esp,0x10
c00099e9:	83 ec 0c             	sub    esp,0xc
c00099ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00099f0:	50                   	push   eax
c00099f1:	e8 76 72 ff ff       	call   c0000c6c <sys_sem_free>
c00099f6:	83 c4 10             	add    esp,0x10
c00099f9:	8d 76 00             	lea    esi,[esi+0x0]
c00099fc:	90                   	nop
c00099fd:	83 c4 1c             	add    esp,0x1c
c0009a00:	c3                   	ret    
c0009a01:	66 90                	xchg   ax,ax
c0009a03:	90                   	nop

c0009a04 <tcp_accept_null>:
c0009a04:	83 ec 04             	sub    esp,0x4
c0009a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a0b:	88 04 24             	mov    BYTE PTR [esp],al
c0009a0e:	b0 f6                	mov    al,0xf6
c0009a10:	83 c4 04             	add    esp,0x4
c0009a13:	c3                   	ret    

c0009a14 <tcp_listen_with_backlog>:
c0009a14:	83 ec 2c             	sub    esp,0x2c
c0009a17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a1b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009a1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a23:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a26:	85 c0                	test   eax,eax
c0009a28:	74 22                	je     c0009a4c <tcp_listen_with_backlog+0x38>
c0009a2a:	83 ec 08             	sub    esp,0x8
c0009a2d:	68 00 ff 02 c0       	push   0xc002ff00
c0009a32:	68 66 f9 02 c0       	push   0xc002f966
c0009a37:	e8 98 60 01 00       	call   c001fad4 <CPrintf>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	b8 00 00 00 00       	mov    eax,0x0
c0009a44:	e9 77 01 00 00       	jmp    c0009bc0 <tcp_listen_with_backlog+0x1ac>
c0009a49:	8d 76 00             	lea    esi,[esi+0x0]
c0009a4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009a53:	83 f8 01             	cmp    eax,0x1
c0009a56:	75 0c                	jne    c0009a64 <tcp_listen_with_backlog+0x50>
c0009a58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a5c:	e9 5f 01 00 00       	jmp    c0009bc0 <tcp_listen_with_backlog+0x1ac>
c0009a61:	8d 76 00             	lea    esi,[esi+0x0]
c0009a64:	83 ec 0c             	sub    esp,0xc
c0009a67:	6a 03                	push   0x3
c0009a69:	e8 4a de ff ff       	call   c00078b8 <memp_malloc>
c0009a6e:	83 c4 10             	add    esp,0x10
c0009a71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a75:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0009a7a:	75 0c                	jne    c0009a88 <tcp_listen_with_backlog+0x74>
c0009a7c:	b8 00 00 00 00       	mov    eax,0x0
c0009a81:	e9 3a 01 00 00       	jmp    c0009bc0 <tcp_listen_with_backlog+0x1ac>
c0009a86:	66 90                	xchg   ax,ax
c0009a88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a8c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0009a8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009a93:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0009a96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a9a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009a9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009aa1:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009aa5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009aa9:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
c0009ab0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ab4:	8a 50 14             	mov    dl,BYTE PTR [eax+0x14]
c0009ab7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009abb:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009abe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ac2:	8a 50 08             	mov    dl,BYTE PTR [eax+0x8]
c0009ac5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ac9:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009acc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ad0:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c0009ad3:	83 c8 02             	or     eax,0x2
c0009ad6:	88 c2                	mov    dl,al
c0009ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009adc:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0009adf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ae3:	8a 50 0a             	mov    dl,BYTE PTR [eax+0xa]
c0009ae6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009aea:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c0009aed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009af1:	8a 50 09             	mov    dl,BYTE PTR [eax+0x9]
c0009af4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009af8:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0009afb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aff:	8b 10                	mov    edx,DWORD PTR [eax]
c0009b01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b05:	89 10                	mov    DWORD PTR [eax],edx
c0009b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b0b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009b0e:	0f b7 c0             	movzx  eax,ax
c0009b11:	85 c0                	test   eax,eax
c0009b13:	74 6f                	je     c0009b84 <tcp_listen_with_backlog+0x170>
c0009b15:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b1a:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009b1e:	75 10                	jne    c0009b30 <tcp_listen_with_backlog+0x11c>
c0009b20:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b25:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b28:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009b2d:	eb 49                	jmp    c0009b78 <tcp_listen_with_backlog+0x164>
c0009b2f:	90                   	nop
c0009b30:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c0009b35:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009b3a:	eb 30                	jmp    c0009b6c <tcp_listen_with_backlog+0x158>
c0009b3c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b44:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c0009b48:	75 12                	jne    c0009b5c <tcp_listen_with_backlog+0x148>
c0009b4a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b4f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009b53:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009b56:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009b59:	eb 1d                	jmp    c0009b78 <tcp_listen_with_backlog+0x164>
c0009b5b:	90                   	nop
c0009b5c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b61:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b64:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c0009b69:	8d 76 00             	lea    esi,[esi+0x0]
c0009b6c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c0009b71:	85 c0                	test   eax,eax
c0009b73:	75 c7                	jne    c0009b3c <tcp_listen_with_backlog+0x128>
c0009b75:	8d 76 00             	lea    esi,[esi+0x0]
c0009b78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b7c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0009b83:	90                   	nop
c0009b84:	83 ec 08             	sub    esp,0x8
c0009b87:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0009b8b:	6a 02                	push   0x2
c0009b8d:	e8 52 de ff ff       	call   c00079e4 <memp_free>
c0009b92:	83 c4 10             	add    esp,0x10
c0009b95:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009b99:	c7 40 1c 04 9a 00 c0 	mov    DWORD PTR [eax+0x1c],0xc0009a04
c0009ba0:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c0009ba6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009baa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009bad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bb1:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c0009bb6:	e8 a5 6e 00 00       	call   c0010a60 <tcp_timer_needed>
c0009bbb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009bbf:	90                   	nop
c0009bc0:	83 c4 2c             	add    esp,0x2c
c0009bc3:	c3                   	ret    

c0009bc4 <tcp_update_rcv_ann_wnd>:
c0009bc4:	83 ec 1c             	sub    esp,0x1c
c0009bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bcb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009bce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bd2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009bd5:	0f b7 c0             	movzx  eax,ax
c0009bd8:	01 d0                	add    eax,edx
c0009bda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009bde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be2:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009be5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bec:	0f b7 c8             	movzx  ecx,ax
c0009bef:	81 f9 30 04 00 00    	cmp    ecx,0x430
c0009bf5:	76 05                	jbe    c0009bfc <tcp_update_rcv_ann_wnd+0x38>
c0009bf7:	b8 30 04 00 00       	mov    eax,0x430
c0009bfc:	0f b7 c0             	movzx  eax,ax
c0009bff:	01 c2                	add    edx,eax
c0009c01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009c05:	29 d0                	sub    eax,edx
c0009c07:	78 23                	js     c0009c2c <tcp_update_rcv_ann_wnd+0x68>
c0009c09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c0d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009c10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c14:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009c18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009c1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c23:	29 c2                	sub    edx,eax
c0009c25:	89 d0                	mov    eax,edx
c0009c27:	eb 73                	jmp    c0009c9c <tcp_update_rcv_ann_wnd+0xd8>
c0009c29:	8d 76 00             	lea    esi,[esi+0x0]
c0009c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c30:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0009c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c37:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0009c3a:	29 c2                	sub    edx,eax
c0009c3c:	89 d0                	mov    eax,edx
c0009c3e:	85 c0                	test   eax,eax
c0009c40:	7e 0e                	jle    c0009c50 <tcp_update_rcv_ann_wnd+0x8c>
c0009c42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c46:	66 c7 40 2e 00 00    	mov    WORD PTR [eax+0x2e],0x0
c0009c4c:	eb 46                	jmp    c0009c94 <tcp_update_rcv_ann_wnd+0xd0>
c0009c4e:	66 90                	xchg   ax,ax
c0009c50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c54:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0009c57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c5b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0009c5e:	29 c2                	sub    edx,eax
c0009c60:	89 d0                	mov    eax,edx
c0009c62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c66:	81 7c 24 08 ff ff 00 00 	cmp    DWORD PTR [esp+0x8],0xffff
c0009c6e:	76 18                	jbe    c0009c88 <tcp_update_rcv_ann_wnd+0xc4>
c0009c70:	83 ec 08             	sub    esp,0x8
c0009c73:	68 34 01 03 c0       	push   0xc0030134
c0009c78:	68 66 f9 02 c0       	push   0xc002f966
c0009c7d:	e8 52 5e 01 00       	call   c001fad4 <CPrintf>
c0009c82:	83 c4 10             	add    esp,0x10
c0009c85:	8d 76 00             	lea    esi,[esi+0x0]
c0009c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009c90:	66 89 42 2e          	mov    WORD PTR [edx+0x2e],ax
c0009c94:	b8 00 00 00 00       	mov    eax,0x0
c0009c99:	8d 76 00             	lea    esi,[esi+0x0]
c0009c9c:	83 c4 1c             	add    esp,0x1c
c0009c9f:	c3                   	ret    

c0009ca0 <tcp_recved>:
c0009ca0:	83 ec 2c             	sub    esp,0x2c
c0009ca3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ca7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009cac:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009cb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cb5:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cb8:	0f b7 c0             	movzx  eax,ax
c0009cbb:	b9 ff ff 00 00       	mov    ecx,0xffff
c0009cc0:	29 c1                	sub    ecx,eax
c0009cc2:	89 c8                	mov    eax,ecx
c0009cc4:	39 c2                	cmp    edx,eax
c0009cc6:	7e 18                	jle    c0009ce0 <tcp_recved+0x40>
c0009cc8:	83 ec 08             	sub    esp,0x8
c0009ccb:	68 24 ff 02 c0       	push   0xc002ff24
c0009cd0:	68 66 f9 02 c0       	push   0xc002f966
c0009cd5:	e8 fa 5d 01 00       	call   c001fad4 <CPrintf>
c0009cda:	83 c4 10             	add    esp,0x10
c0009cdd:	8d 76 00             	lea    esi,[esi+0x0]
c0009ce0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ce4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009ce7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ceb:	01 d0                	add    eax,edx
c0009ced:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009cf1:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c0009cf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cf9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0009cfc:	0f b7 c0             	movzx  eax,ax
c0009cff:	3d 60 08 00 00       	cmp    eax,0x860
c0009d04:	76 0a                	jbe    c0009d10 <tcp_recved+0x70>
c0009d06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d0a:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c0009d10:	83 ec 0c             	sub    esp,0xc
c0009d13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009d17:	e8 a8 fe ff ff       	call   c0009bc4 <tcp_update_rcv_ann_wnd>
c0009d1c:	83 c4 10             	add    esp,0x10
c0009d1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009d23:	81 7c 24 1c 17 02 00 00 	cmp    DWORD PTR [esp+0x1c],0x217
c0009d2b:	7e 23                	jle    c0009d50 <tcp_recved+0xb0>
c0009d2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d31:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0009d34:	83 c8 02             	or     eax,0x2
c0009d37:	88 c2                	mov    dl,al
c0009d39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d3d:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0009d40:	83 ec 0c             	sub    esp,0xc
c0009d43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009d47:	e8 84 60 00 00       	call   c000fdd0 <tcp_output>
c0009d4c:	83 c4 10             	add    esp,0x10
c0009d4f:	90                   	nop
c0009d50:	90                   	nop
c0009d51:	83 c4 2c             	add    esp,0x2c
c0009d54:	c3                   	ret    
c0009d55:	8d 76 00             	lea    esi,[esi+0x0]

c0009d58 <tcp_new_port>:
c0009d58:	83 ec 10             	sub    esp,0x10
c0009d5b:	90                   	nop
c0009d5c:	66 a1 20 3a 03 c0    	mov    ax,ds:0xc0033a20
c0009d62:	8d 50 01             	lea    edx,[eax+0x1]
c0009d65:	66 89 15 20 3a 03 c0 	mov    WORD PTR ds:0xc0033a20,dx
c0009d6c:	0f b7 c0             	movzx  eax,ax
c0009d6f:	3d ff ff 00 00       	cmp    eax,0xffff
c0009d74:	75 0a                	jne    c0009d80 <tcp_new_port+0x28>
c0009d76:	66 c7 05 20 3a 03 c0 00 c0 	mov    WORD PTR ds:0xc0033a20,0xc000
c0009d7f:	90                   	nop
c0009d80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009d88:	eb 4a                	jmp    c0009dd4 <tcp_new_port+0x7c>
c0009d8a:	66 90                	xchg   ax,ax
c0009d8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d90:	8b 04 85 40 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfdc0]
c0009d97:	8b 00                	mov    eax,DWORD PTR [eax]
c0009d99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d9d:	eb 29                	jmp    c0009dc8 <tcp_new_port+0x70>
c0009d9f:	90                   	nop
c0009da0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009da4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0009da7:	66 a1 20 3a 03 c0    	mov    ax,ds:0xc0033a20
c0009dad:	0f b7 d2             	movzx  edx,dx
c0009db0:	0f b7 c0             	movzx  eax,ax
c0009db3:	39 c2                	cmp    edx,eax
c0009db5:	75 05                	jne    c0009dbc <tcp_new_port+0x64>
c0009db7:	eb a3                	jmp    c0009d5c <tcp_new_port+0x4>
c0009db9:	8d 76 00             	lea    esi,[esi+0x0]
c0009dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009dc0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009dc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009dc7:	90                   	nop
c0009dc8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0009dcd:	75 d1                	jne    c0009da0 <tcp_new_port+0x48>
c0009dcf:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0009dd4:	83 7c 24 0c 03       	cmp    DWORD PTR [esp+0xc],0x3
c0009dd9:	7e b1                	jle    c0009d8c <tcp_new_port+0x34>
c0009ddb:	66 a1 20 3a 03 c0    	mov    ax,ds:0xc0033a20
c0009de1:	83 c4 10             	add    esp,0x10
c0009de4:	c3                   	ret    
c0009de5:	8d 76 00             	lea    esi,[esi+0x0]

c0009de8 <tcp_bind>:
c0009de8:	83 ec 2c             	sub    esp,0x2c
c0009deb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009def:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009df4:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0009dfc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e03:	85 c0                	test   eax,eax
c0009e05:	74 1d                	je     c0009e24 <tcp_bind+0x3c>
c0009e07:	83 ec 08             	sub    esp,0x8
c0009e0a:	68 48 ff 02 c0       	push   0xc002ff48
c0009e0f:	68 66 f9 02 c0       	push   0xc002f966
c0009e14:	e8 bb 5c 01 00       	call   c001fad4 <CPrintf>
c0009e19:	83 c4 10             	add    esp,0x10
c0009e1c:	b0 fa                	mov    al,0xfa
c0009e1e:	e9 f1 00 00 00       	jmp    c0009f14 <tcp_bind+0x12c>
c0009e23:	90                   	nop
c0009e24:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0009e29:	85 c0                	test   eax,eax
c0009e2b:	75 0b                	jne    c0009e38 <tcp_bind+0x50>
c0009e2d:	e8 26 ff ff ff       	call   c0009d58 <tcp_new_port>
c0009e32:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0009e37:	90                   	nop
c0009e38:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e40:	eb 7a                	jmp    c0009ebc <tcp_bind+0xd4>
c0009e42:	66 90                	xchg   ax,ax
c0009e44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e48:	8b 04 85 40 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfdc0]
c0009e4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e51:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e55:	eb 59                	jmp    c0009eb0 <tcp_bind+0xc8>
c0009e57:	90                   	nop
c0009e58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e5c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009e5f:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c0009e64:	0f b7 c0             	movzx  eax,ax
c0009e67:	39 c2                	cmp    edx,eax
c0009e69:	75 39                	jne    c0009ea4 <tcp_bind+0xbc>
c0009e6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e6f:	85 c0                	test   eax,eax
c0009e71:	74 2d                	je     c0009ea0 <tcp_bind+0xb8>
c0009e73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e77:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e79:	85 c0                	test   eax,eax
c0009e7b:	74 23                	je     c0009ea0 <tcp_bind+0xb8>
c0009e7d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009e82:	74 1c                	je     c0009ea0 <tcp_bind+0xb8>
c0009e84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e88:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e8a:	85 c0                	test   eax,eax
c0009e8c:	74 12                	je     c0009ea0 <tcp_bind+0xb8>
c0009e8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e92:	8b 10                	mov    edx,DWORD PTR [eax]
c0009e94:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009e98:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e9a:	39 c2                	cmp    edx,eax
c0009e9c:	75 06                	jne    c0009ea4 <tcp_bind+0xbc>
c0009e9e:	66 90                	xchg   ax,ax
c0009ea0:	b0 f8                	mov    al,0xf8
c0009ea2:	eb 70                	jmp    c0009f14 <tcp_bind+0x12c>
c0009ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ea8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009eab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009eaf:	90                   	nop
c0009eb0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0009eb5:	75 a1                	jne    c0009e58 <tcp_bind+0x70>
c0009eb7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ebc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009ec0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c0009ec4:	0f 8c 7a ff ff ff    	jl     c0009e44 <tcp_bind+0x5c>
c0009eca:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0009ecf:	74 17                	je     c0009ee8 <tcp_bind+0x100>
c0009ed1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ed5:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ed7:	85 c0                	test   eax,eax
c0009ed9:	74 0d                	je     c0009ee8 <tcp_bind+0x100>
c0009edb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009edf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009ee3:	8b 12                	mov    edx,DWORD PTR [edx]
c0009ee5:	89 10                	mov    DWORD PTR [eax],edx
c0009ee7:	90                   	nop
c0009ee8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009eec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ef0:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c0009ef4:	8b 15 80 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036880
c0009efa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009efe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009f01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f05:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c0009f0a:	e8 51 6b 00 00       	call   c0010a60 <tcp_timer_needed>
c0009f0f:	b0 00                	mov    al,0x0
c0009f11:	8d 76 00             	lea    esi,[esi+0x0]
c0009f14:	83 c4 2c             	add    esp,0x2c
c0009f17:	c3                   	ret    

c0009f18 <tcp_seg_free>:
c0009f18:	83 ec 0c             	sub    esp,0xc
c0009f1b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0009f20:	74 32                	je     c0009f54 <tcp_seg_free+0x3c>
c0009f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009f29:	85 c0                	test   eax,eax
c0009f2b:	74 13                	je     c0009f40 <tcp_seg_free+0x28>
c0009f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009f31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009f34:	83 ec 0c             	sub    esp,0xc
c0009f37:	50                   	push   eax
c0009f38:	e8 63 e3 ff ff       	call   c00082a0 <pbuf_free>
c0009f3d:	83 c4 10             	add    esp,0x10
c0009f40:	83 ec 08             	sub    esp,0x8
c0009f43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009f47:	6a 04                	push   0x4
c0009f49:	e8 96 da ff ff       	call   c00079e4 <memp_free>
c0009f4e:	83 c4 10             	add    esp,0x10
c0009f51:	8d 76 00             	lea    esi,[esi+0x0]
c0009f54:	90                   	nop
c0009f55:	83 c4 0c             	add    esp,0xc
c0009f58:	c3                   	ret    
c0009f59:	8d 76 00             	lea    esi,[esi+0x0]

c0009f5c <tcp_segs_free>:
c0009f5c:	83 ec 1c             	sub    esp,0x1c
c0009f5f:	eb 27                	jmp    c0009f88 <tcp_segs_free+0x2c>
c0009f61:	8d 76 00             	lea    esi,[esi+0x0]
c0009f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f68:	8b 00                	mov    eax,DWORD PTR [eax]
c0009f6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009f6e:	83 ec 0c             	sub    esp,0xc
c0009f71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f75:	e8 9e ff ff ff       	call   c0009f18 <tcp_seg_free>
c0009f7a:	83 c4 10             	add    esp,0x10
c0009f7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009f85:	8d 76 00             	lea    esi,[esi+0x0]
c0009f88:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0009f8d:	75 d5                	jne    c0009f64 <tcp_segs_free+0x8>
c0009f8f:	90                   	nop
c0009f90:	83 c4 1c             	add    esp,0x1c
c0009f93:	c3                   	ret    

c0009f94 <tcp_setprio>:
c0009f94:	83 ec 04             	sub    esp,0x4
c0009f97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f9b:	88 04 24             	mov    BYTE PTR [esp],al
c0009f9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009fa2:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0009fa5:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c0009fa8:	90                   	nop
c0009fa9:	83 c4 04             	add    esp,0x4
c0009fac:	c3                   	ret    
c0009fad:	8d 76 00             	lea    esi,[esi+0x0]

c0009fb0 <tcp_seg_copy>:
c0009fb0:	83 ec 1c             	sub    esp,0x1c
c0009fb3:	83 ec 0c             	sub    esp,0xc
c0009fb6:	6a 04                	push   0x4
c0009fb8:	e8 fb d8 ff ff       	call   c00078b8 <memp_malloc>
c0009fbd:	83 c4 10             	add    esp,0x10
c0009fc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009fc4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fc9:	75 09                	jne    c0009fd4 <tcp_seg_copy+0x24>
c0009fcb:	b8 00 00 00 00       	mov    eax,0x0
c0009fd0:	eb 2e                	jmp    c000a000 <tcp_seg_copy+0x50>
c0009fd2:	66 90                	xchg   ax,ax
c0009fd4:	83 ec 04             	sub    esp,0x4
c0009fd7:	6a 10                	push   0x10
c0009fd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009fdd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fe1:	e8 94 63 ff ff       	call   c000037a <memcpy>
c0009fe6:	83 c4 10             	add    esp,0x10
c0009fe9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009fed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009ff0:	83 ec 0c             	sub    esp,0xc
c0009ff3:	50                   	push   eax
c0009ff4:	e8 af ea ff ff       	call   c0008aa8 <pbuf_ref>
c0009ff9:	83 c4 10             	add    esp,0x10
c0009ffc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a000:	83 c4 1c             	add    esp,0x1c
c000a003:	c3                   	ret    

c000a004 <tcp_arg>:
c000a004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a008:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a00c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a00f:	90                   	nop
c000a010:	c3                   	ret    
c000a011:	8d 76 00             	lea    esi,[esi+0x0]

c000a014 <tcp_recv>:
c000a014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a018:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a01c:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
c000a022:	90                   	nop
c000a023:	c3                   	ret    

c000a024 <tcp_sent>:
c000a024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a028:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a02c:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
c000a032:	90                   	nop
c000a033:	c3                   	ret    

c000a034 <tcp_err>:
c000a034:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a038:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a03c:	89 90 98 00 00 00    	mov    DWORD PTR [eax+0x98],edx
c000a042:	90                   	nop
c000a043:	c3                   	ret    

c000a044 <tcp_accept>:
c000a044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a04c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000a04f:	90                   	nop
c000a050:	c3                   	ret    
c000a051:	8d 76 00             	lea    esi,[esi+0x0]

c000a054 <tcp_poll>:
c000a054:	83 ec 04             	sub    esp,0x4
c000a057:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a05b:	88 04 24             	mov    BYTE PTR [esp],al
c000a05e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a062:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a066:	89 90 94 00 00 00    	mov    DWORD PTR [eax+0x94],edx
c000a06c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a070:	8a 14 24             	mov    dl,BYTE PTR [esp]
c000a073:	88 50 39             	mov    BYTE PTR [eax+0x39],dl
c000a076:	90                   	nop
c000a077:	83 c4 04             	add    esp,0x4
c000a07a:	c3                   	ret    
c000a07b:	90                   	nop

c000a07c <tcp_pcb_purge>:
c000a07c:	83 ec 0c             	sub    esp,0xc
c000a07f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a083:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a086:	85 c0                	test   eax,eax
c000a088:	0f 84 ca 00 00 00    	je     c000a158 <tcp_pcb_purge+0xdc>
c000a08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a092:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a095:	83 f8 0a             	cmp    eax,0xa
c000a098:	0f 84 ba 00 00 00    	je     c000a158 <tcp_pcb_purge+0xdc>
c000a09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0a2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0a5:	83 f8 01             	cmp    eax,0x1
c000a0a8:	0f 84 aa 00 00 00    	je     c000a158 <tcp_pcb_purge+0xdc>
c000a0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0b2:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a0b8:	85 c0                	test   eax,eax
c000a0ba:	74 24                	je     c000a0e0 <tcp_pcb_purge+0x64>
c000a0bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0c0:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000a0c6:	83 ec 0c             	sub    esp,0xc
c000a0c9:	50                   	push   eax
c000a0ca:	e8 d1 e1 ff ff       	call   c00082a0 <pbuf_free>
c000a0cf:	83 c4 10             	add    esp,0x10
c000a0d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0d6:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000a0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0e4:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a0ea:	83 ec 0c             	sub    esp,0xc
c000a0ed:	50                   	push   eax
c000a0ee:	e8 69 fe ff ff       	call   c0009f5c <tcp_segs_free>
c000a0f3:	83 c4 10             	add    esp,0x10
c000a0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a0fa:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a108:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000a10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a112:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a115:	83 ec 0c             	sub    esp,0xc
c000a118:	50                   	push   eax
c000a119:	e8 3e fe ff ff       	call   c0009f5c <tcp_segs_free>
c000a11e:	83 c4 10             	add    esp,0x10
c000a121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a125:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a128:	83 ec 0c             	sub    esp,0xc
c000a12b:	50                   	push   eax
c000a12c:	e8 2b fe ff ff       	call   c0009f5c <tcp_segs_free>
c000a131:	83 c4 10             	add    esp,0x10
c000a134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a138:	c7 40 78 00 00 00 00 	mov    DWORD PTR [eax+0x78],0x0
c000a13f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a143:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c000a146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a14a:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000a14d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a151:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000a157:	90                   	nop
c000a158:	90                   	nop
c000a159:	83 c4 0c             	add    esp,0xc
c000a15c:	c3                   	ret    
c000a15d:	8d 76 00             	lea    esi,[esi+0x0]

c000a160 <tcp_slowtmr>:
c000a160:	57                   	push   edi
c000a161:	56                   	push   esi
c000a162:	53                   	push   ebx
c000a163:	83 ec 20             	sub    esp,0x20
c000a166:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a16b:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000a170:	83 c0 01             	add    eax,0x1
c000a173:	a3 74 68 03 c0       	mov    ds:0xc0036874,eax
c000a178:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a180:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a185:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a189:	e9 16 06 00 00       	jmp    c000a7a4 <tcp_slowtmr+0x644>
c000a18e:	66 90                	xchg   ax,ax
c000a190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a194:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a197:	85 c0                	test   eax,eax
c000a199:	75 15                	jne    c000a1b0 <tcp_slowtmr+0x50>
c000a19b:	83 ec 08             	sub    esp,0x8
c000a19e:	68 70 ff 02 c0       	push   0xc002ff70
c000a1a3:	68 66 f9 02 c0       	push   0xc002f966
c000a1a8:	e8 27 59 01 00       	call   c001fad4 <CPrintf>
c000a1ad:	83 c4 10             	add    esp,0x10
c000a1b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1b7:	83 f8 01             	cmp    eax,0x1
c000a1ba:	75 18                	jne    c000a1d4 <tcp_slowtmr+0x74>
c000a1bc:	83 ec 08             	sub    esp,0x8
c000a1bf:	68 9c ff 02 c0       	push   0xc002ff9c
c000a1c4:	68 66 f9 02 c0       	push   0xc002f966
c000a1c9:	e8 06 59 01 00       	call   c001fad4 <CPrintf>
c000a1ce:	83 c4 10             	add    esp,0x10
c000a1d1:	8d 76 00             	lea    esi,[esi+0x0]
c000a1d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a1d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a1db:	83 f8 0a             	cmp    eax,0xa
c000a1de:	75 18                	jne    c000a1f8 <tcp_slowtmr+0x98>
c000a1e0:	83 ec 08             	sub    esp,0x8
c000a1e3:	68 c8 ff 02 c0       	push   0xc002ffc8
c000a1e8:	68 66 f9 02 c0       	push   0xc002f966
c000a1ed:	e8 e2 58 01 00       	call   c001fad4 <CPrintf>
c000a1f2:	83 c4 10             	add    esp,0x10
c000a1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000a1f8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a1fd:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000a202:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a206:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a209:	83 f8 02             	cmp    eax,0x2
c000a20c:	75 22                	jne    c000a230 <tcp_slowtmr+0xd0>
c000a20e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a212:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a215:	0f b6 c0             	movzx  eax,al
c000a218:	83 f8 06             	cmp    eax,0x6
c000a21b:	75 13                	jne    c000a230 <tcp_slowtmr+0xd0>
c000a21d:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a221:	83 c0 01             	add    eax,0x1
c000a224:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a228:	e9 df 01 00 00       	jmp    c000a40c <tcp_slowtmr+0x2ac>
c000a22d:	8d 76 00             	lea    esi,[esi+0x0]
c000a230:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a234:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a237:	0f b6 c0             	movzx  eax,al
c000a23a:	83 f8 0c             	cmp    eax,0xc
c000a23d:	75 11                	jne    c000a250 <tcp_slowtmr+0xf0>
c000a23f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a243:	83 c0 01             	add    eax,0x1
c000a246:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a24a:	e9 bd 01 00 00       	jmp    c000a40c <tcp_slowtmr+0x2ac>
c000a24f:	90                   	nop
c000a250:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a254:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a25a:	0f b6 c0             	movzx  eax,al
c000a25d:	85 c0                	test   eax,eax
c000a25f:	0f 84 8f 00 00 00    	je     c000a2f4 <tcp_slowtmr+0x194>
c000a265:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a269:	8b 80 a0 00 00 00    	mov    eax,DWORD PTR [eax+0xa0]
c000a26f:	8d 50 01             	lea    edx,[eax+0x1]
c000a272:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a276:	89 90 a0 00 00 00    	mov    DWORD PTR [eax+0xa0],edx
c000a27c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a280:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
c000a286:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a28a:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a290:	0f b6 c0             	movzx  eax,al
c000a293:	83 e8 01             	sub    eax,0x1
c000a296:	8a 80 50 02 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfdb0]
c000a29c:	0f b6 c0             	movzx  eax,al
c000a29f:	39 c2                	cmp    edx,eax
c000a2a1:	0f 82 65 01 00 00    	jb     c000a40c <tcp_slowtmr+0x2ac>
c000a2a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2ab:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c000a2b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2b9:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a2bf:	0f b6 c0             	movzx  eax,al
c000a2c2:	83 f8 06             	cmp    eax,0x6
c000a2c5:	77 19                	ja     c000a2e0 <tcp_slowtmr+0x180>
c000a2c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2cb:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000a2d1:	83 c0 01             	add    eax,0x1
c000a2d4:	88 c2                	mov    dl,al
c000a2d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2da:	88 90 a4 00 00 00    	mov    BYTE PTR [eax+0xa4],dl
c000a2e0:	83 ec 0c             	sub    esp,0xc
c000a2e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a2e7:	e8 e8 63 00 00       	call   c00106d4 <tcp_zero_window_probe>
c000a2ec:	83 c4 10             	add    esp,0x10
c000a2ef:	e9 18 01 00 00       	jmp    c000a40c <tcp_slowtmr+0x2ac>
c000a2f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a2f8:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a2fc:	98                   	cwde   
c000a2fd:	85 c0                	test   eax,eax
c000a2ff:	78 13                	js     c000a314 <tcp_slowtmr+0x1b4>
c000a301:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a305:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000a309:	83 c0 01             	add    eax,0x1
c000a30c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a310:	66 89 42 3a          	mov    WORD PTR [edx+0x3a],ax
c000a314:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a318:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a31b:	85 c0                	test   eax,eax
c000a31d:	0f 84 e9 00 00 00    	je     c000a40c <tcp_slowtmr+0x2ac>
c000a323:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a327:	66 8b 50 3a          	mov    dx,WORD PTR [eax+0x3a]
c000a32b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a32f:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a332:	0f bf d2             	movsx  edx,dx
c000a335:	98                   	cwde   
c000a336:	39 c2                	cmp    edx,eax
c000a338:	0f 8c ce 00 00 00    	jl     c000a40c <tcp_slowtmr+0x2ac>
c000a33e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a342:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a345:	83 f8 02             	cmp    eax,0x2
c000a348:	74 3a                	je     c000a384 <tcp_slowtmr+0x224>
c000a34a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a34e:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000a351:	98                   	cwde   
c000a352:	c1 f8 03             	sar    eax,0x3
c000a355:	0f bf d0             	movsx  edx,ax
c000a358:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a35c:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000a360:	98                   	cwde   
c000a361:	01 c2                	add    edx,eax
c000a363:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a367:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c000a36a:	0f b6 c0             	movzx  eax,al
c000a36d:	8a 80 58 02 03 c0    	mov    al,BYTE PTR [eax-0x3ffcfda8]
c000a373:	0f b6 c0             	movzx  eax,al
c000a376:	88 c1                	mov    cl,al
c000a378:	d3 e2                	shl    edx,cl
c000a37a:	89 d0                	mov    eax,edx
c000a37c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a380:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000a384:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a388:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000a38e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a392:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000a395:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a399:	66 8b 52 56          	mov    dx,WORD PTR [edx+0x56]
c000a39d:	0f b7 d8             	movzx  ebx,ax
c000a3a0:	0f b7 ca             	movzx  ecx,dx
c000a3a3:	39 cb                	cmp    ebx,ecx
c000a3a5:	76 05                	jbe    c000a3ac <tcp_slowtmr+0x24c>
c000a3a7:	89 d0                	mov    eax,edx
c000a3a9:	8d 76 00             	lea    esi,[esi+0x0]
c000a3ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000a3b1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000a3b6:	d1 e8                	shr    eax,1
c000a3b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3bc:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a3c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3c4:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000a3c7:	0f b7 d0             	movzx  edx,ax
c000a3ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3d1:	0f b7 c0             	movzx  eax,ax
c000a3d4:	01 c0                	add    eax,eax
c000a3d6:	39 c2                	cmp    edx,eax
c000a3d8:	7d 12                	jge    c000a3ec <tcp_slowtmr+0x28c>
c000a3da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3de:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3e1:	d1 e0                	shl    eax,1
c000a3e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3e7:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000a3eb:	90                   	nop
c000a3ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a3f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a3f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a3f7:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000a3fb:	83 ec 0c             	sub    esp,0xc
c000a3fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a402:	e8 c9 5f 00 00       	call   c00103d0 <tcp_rexmit_rto>
c000a407:	83 c4 10             	add    esp,0x10
c000a40a:	66 90                	xchg   ax,ax
c000a40c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a410:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a413:	83 f8 06             	cmp    eax,0x6
c000a416:	75 24                	jne    c000a43c <tcp_slowtmr+0x2dc>
c000a418:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a41e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a422:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a425:	29 c2                	sub    edx,eax
c000a427:	89 d0                	mov    eax,edx
c000a429:	83 f8 28             	cmp    eax,0x28
c000a42c:	76 0e                	jbe    c000a43c <tcp_slowtmr+0x2dc>
c000a42e:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a432:	83 c0 01             	add    eax,0x1
c000a435:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a439:	8d 76 00             	lea    esi,[esi+0x0]
c000a43c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a440:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000a443:	0f b6 c0             	movzx  eax,al
c000a446:	83 e0 08             	and    eax,0x8
c000a449:	0f 84 e1 00 00 00    	je     c000a530 <tcp_slowtmr+0x3d0>
c000a44f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a453:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a456:	83 f8 04             	cmp    eax,0x4
c000a459:	74 11                	je     c000a46c <tcp_slowtmr+0x30c>
c000a45b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a45f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a462:	83 f8 07             	cmp    eax,0x7
c000a465:	0f 85 c5 00 00 00    	jne    c000a530 <tcp_slowtmr+0x3d0>
c000a46b:	90                   	nop
c000a46c:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a472:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a476:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a479:	89 d1                	mov    ecx,edx
c000a47b:	29 c1                	sub    ecx,eax
c000a47d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a481:	8b 80 9c 00 00 00    	mov    eax,DWORD PTR [eax+0x9c]
c000a487:	05 b8 4c 0a 00       	add    eax,0xa4cb8
c000a48c:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a491:	f7 e2                	mul    edx
c000a493:	89 d0                	mov    eax,edx
c000a495:	c1 e8 05             	shr    eax,0x5
c000a498:	39 c1                	cmp    ecx,eax
c000a49a:	76 18                	jbe    c000a4b4 <tcp_slowtmr+0x354>
c000a49c:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a4a0:	83 c0 01             	add    eax,0x1
c000a4a3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a4a7:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c000a4ab:	83 c0 01             	add    eax,0x1
c000a4ae:	88 44 24 16          	mov    BYTE PTR [esp+0x16],al
c000a4b2:	eb 7c                	jmp    c000a530 <tcp_slowtmr+0x3d0>
c000a4b4:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a4ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4be:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a4c1:	89 d3                	mov    ebx,edx
c000a4c3:	29 c3                	sub    ebx,eax
c000a4c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4c9:	8b 88 9c 00 00 00    	mov    ecx,DWORD PTR [eax+0x9c]
c000a4cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4d3:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a4d9:	0f b6 d0             	movzx  edx,al
c000a4dc:	89 d0                	mov    eax,edx
c000a4de:	c1 e0 03             	shl    eax,0x3
c000a4e1:	01 d0                	add    eax,edx
c000a4e3:	c1 e0 03             	shl    eax,0x3
c000a4e6:	01 d0                	add    eax,edx
c000a4e8:	c1 e0 02             	shl    eax,0x2
c000a4eb:	01 d0                	add    eax,edx
c000a4ed:	c1 e0 05             	shl    eax,0x5
c000a4f0:	29 d0                	sub    eax,edx
c000a4f2:	c1 e0 03             	shl    eax,0x3
c000a4f5:	01 c8                	add    eax,ecx
c000a4f7:	ba d3 4d 62 10       	mov    edx,0x10624dd3
c000a4fc:	f7 e2                	mul    edx
c000a4fe:	89 d0                	mov    eax,edx
c000a500:	c1 e8 05             	shr    eax,0x5
c000a503:	39 c3                	cmp    ebx,eax
c000a505:	76 29                	jbe    c000a530 <tcp_slowtmr+0x3d0>
c000a507:	83 ec 0c             	sub    esp,0xc
c000a50a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a50e:	e8 f9 60 00 00       	call   c001060c <tcp_keepalive>
c000a513:	83 c4 10             	add    esp,0x10
c000a516:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a51a:	8a 80 a5 00 00 00    	mov    al,BYTE PTR [eax+0xa5]
c000a520:	83 c0 01             	add    eax,0x1
c000a523:	88 c2                	mov    dl,al
c000a525:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a529:	88 90 a5 00 00 00    	mov    BYTE PTR [eax+0xa5],dl
c000a52f:	90                   	nop
c000a530:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a534:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a53a:	85 c0                	test   eax,eax
c000a53c:	74 4e                	je     c000a58c <tcp_slowtmr+0x42c>
c000a53e:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a544:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a548:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a54b:	89 d1                	mov    ecx,edx
c000a54d:	29 c1                	sub    ecx,eax
c000a54f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a553:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000a556:	0f bf d0             	movsx  edx,ax
c000a559:	89 d0                	mov    eax,edx
c000a55b:	01 c0                	add    eax,eax
c000a55d:	01 d0                	add    eax,edx
c000a55f:	01 c0                	add    eax,eax
c000a561:	39 c1                	cmp    ecx,eax
c000a563:	72 27                	jb     c000a58c <tcp_slowtmr+0x42c>
c000a565:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a569:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000a56f:	83 ec 0c             	sub    esp,0xc
c000a572:	50                   	push   eax
c000a573:	e8 e4 f9 ff ff       	call   c0009f5c <tcp_segs_free>
c000a578:	83 c4 10             	add    esp,0x10
c000a57b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a57f:	c7 80 80 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x80],0x0
c000a589:	8d 76 00             	lea    esi,[esi+0x0]
c000a58c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a590:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a593:	83 f8 03             	cmp    eax,0x3
c000a596:	75 24                	jne    c000a5bc <tcp_slowtmr+0x45c>
c000a598:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a59e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5a2:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a5a5:	29 c2                	sub    edx,eax
c000a5a7:	89 d0                	mov    eax,edx
c000a5a9:	83 f8 28             	cmp    eax,0x28
c000a5ac:	76 0e                	jbe    c000a5bc <tcp_slowtmr+0x45c>
c000a5ae:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a5b2:	83 c0 01             	add    eax,0x1
c000a5b5:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a5b9:	8d 76 00             	lea    esi,[esi+0x0]
c000a5bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a5c3:	83 f8 09             	cmp    eax,0x9
c000a5c6:	75 24                	jne    c000a5ec <tcp_slowtmr+0x48c>
c000a5c8:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a5ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5d2:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a5d5:	29 c2                	sub    edx,eax
c000a5d7:	89 d0                	mov    eax,edx
c000a5d9:	3d f0 00 00 00       	cmp    eax,0xf0
c000a5de:	76 0c                	jbe    c000a5ec <tcp_slowtmr+0x48c>
c000a5e0:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a5e4:	83 c0 01             	add    eax,0x1
c000a5e7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a5eb:	90                   	nop
c000a5ec:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a5f1:	85 c0                	test   eax,eax
c000a5f3:	0f 84 13 01 00 00    	je     c000a70c <tcp_slowtmr+0x5ac>
c000a5f9:	83 ec 0c             	sub    esp,0xc
c000a5fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a600:	e8 77 fa ff ff       	call   c000a07c <tcp_pcb_purge>
c000a605:	83 c4 10             	add    esp,0x10
c000a608:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a60d:	74 31                	je     c000a640 <tcp_slowtmr+0x4e0>
c000a60f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a614:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a618:	75 16                	jne    c000a630 <tcp_slowtmr+0x4d0>
c000a61a:	83 ec 08             	sub    esp,0x8
c000a61d:	68 f8 ff 02 c0       	push   0xc002fff8
c000a622:	68 66 f9 02 c0       	push   0xc002f966
c000a627:	e8 a8 54 01 00       	call   c001fad4 <CPrintf>
c000a62c:	83 c4 10             	add    esp,0x10
c000a62f:	90                   	nop
c000a630:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a634:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a637:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a63b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a63e:	eb 2c                	jmp    c000a66c <tcp_slowtmr+0x50c>
c000a640:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000a645:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a649:	74 15                	je     c000a660 <tcp_slowtmr+0x500>
c000a64b:	83 ec 08             	sub    esp,0x8
c000a64e:	68 24 00 03 c0       	push   0xc0030024
c000a653:	68 66 f9 02 c0       	push   0xc002f966
c000a658:	e8 77 54 01 00       	call   c001fad4 <CPrintf>
c000a65d:	83 c4 10             	add    esp,0x10
c000a660:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a664:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a667:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000a66c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a670:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a676:	85 c0                	test   eax,eax
c000a678:	74 1e                	je     c000a698 <tcp_slowtmr+0x538>
c000a67a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a67e:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000a684:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a688:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a68b:	83 ec 08             	sub    esp,0x8
c000a68e:	6a f6                	push   0xfffffff6
c000a690:	52                   	push   edx
c000a691:	ff d0                	call   eax
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	66 90                	xchg   ax,ax
c000a698:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000a69d:	85 c0                	test   eax,eax
c000a69f:	74 3f                	je     c000a6e0 <tcp_slowtmr+0x580>
c000a6a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6a5:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000a6a9:	0f b7 f0             	movzx  esi,ax
c000a6ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6b0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a6b3:	0f b7 d8             	movzx  ebx,ax
c000a6b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6ba:	8d 78 04             	lea    edi,[eax+0x4]
c000a6bd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a6c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6c5:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a6c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6cc:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000a6cf:	83 ec 08             	sub    esp,0x8
c000a6d2:	56                   	push   esi
c000a6d3:	53                   	push   ebx
c000a6d4:	57                   	push   edi
c000a6d5:	51                   	push   ecx
c000a6d6:	52                   	push   edx
c000a6d7:	50                   	push   eax
c000a6d8:	e8 7f 5b 00 00       	call   c001025c <tcp_rst>
c000a6dd:	83 c4 20             	add    esp,0x20
c000a6e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a6e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a6ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6f3:	83 ec 08             	sub    esp,0x8
c000a6f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fa:	6a 02                	push   0x2
c000a6fc:	e8 e3 d2 ff ff       	call   c00079e4 <memp_free>
c000a701:	83 c4 10             	add    esp,0x10
c000a704:	e9 9b 00 00 00       	jmp    c000a7a4 <tcp_slowtmr+0x644>
c000a709:	8d 76 00             	lea    esi,[esi+0x0]
c000a70c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a710:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a714:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a718:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a71b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a71f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a723:	8a 40 38             	mov    al,BYTE PTR [eax+0x38]
c000a726:	83 c0 01             	add    eax,0x1
c000a729:	88 c2                	mov    dl,al
c000a72b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a72f:	88 50 38             	mov    BYTE PTR [eax+0x38],dl
c000a732:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a736:	8a 50 38             	mov    dl,BYTE PTR [eax+0x38]
c000a739:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a73d:	8a 40 39             	mov    al,BYTE PTR [eax+0x39]
c000a740:	0f b6 d2             	movzx  edx,dl
c000a743:	0f b6 c0             	movzx  eax,al
c000a746:	39 c2                	cmp    edx,eax
c000a748:	72 5a                	jb     c000a7a4 <tcp_slowtmr+0x644>
c000a74a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a74e:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000a752:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a756:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a75c:	85 c0                	test   eax,eax
c000a75e:	74 24                	je     c000a784 <tcp_slowtmr+0x624>
c000a760:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a764:	8b 80 94 00 00 00    	mov    eax,DWORD PTR [eax+0x94]
c000a76a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a76e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000a771:	83 ec 08             	sub    esp,0x8
c000a774:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a778:	52                   	push   edx
c000a779:	ff d0                	call   eax
c000a77b:	83 c4 10             	add    esp,0x10
c000a77e:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000a782:	eb 08                	jmp    c000a78c <tcp_slowtmr+0x62c>
c000a784:	c6 44 24 15 00       	mov    BYTE PTR [esp+0x15],0x0
c000a789:	8d 76 00             	lea    esi,[esi+0x0]
c000a78c:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c000a791:	85 c0                	test   eax,eax
c000a793:	75 0f                	jne    c000a7a4 <tcp_slowtmr+0x644>
c000a795:	83 ec 0c             	sub    esp,0xc
c000a798:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a79c:	e8 2f 56 00 00       	call   c000fdd0 <tcp_output>
c000a7a1:	83 c4 10             	add    esp,0x10
c000a7a4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a7a9:	0f 85 e1 f9 ff ff    	jne    c000a190 <tcp_slowtmr+0x30>
c000a7af:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000a7b7:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a7bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a7c0:	e9 0b 01 00 00       	jmp    c000a8d0 <tcp_slowtmr+0x770>
c000a7c5:	8d 76 00             	lea    esi,[esi+0x0]
c000a7c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a7cf:	83 f8 0a             	cmp    eax,0xa
c000a7d2:	74 18                	je     c000a7ec <tcp_slowtmr+0x68c>
c000a7d4:	83 ec 08             	sub    esp,0x8
c000a7d7:	68 50 00 03 c0       	push   0xc0030050
c000a7dc:	68 66 f9 02 c0       	push   0xc002f966
c000a7e1:	e8 ee 52 01 00       	call   c001fad4 <CPrintf>
c000a7e6:	83 c4 10             	add    esp,0x10
c000a7e9:	8d 76 00             	lea    esi,[esi+0x0]
c000a7ec:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000a7f1:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000a7f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a7fb:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000a7fe:	29 c2                	sub    edx,eax
c000a800:	89 d0                	mov    eax,edx
c000a802:	3d f0 00 00 00       	cmp    eax,0xf0
c000a807:	76 0b                	jbe    c000a814 <tcp_slowtmr+0x6b4>
c000a809:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c000a80d:	83 c0 01             	add    eax,0x1
c000a810:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000a814:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000a819:	85 c0                	test   eax,eax
c000a81b:	0f 84 9b 00 00 00    	je     c000a8bc <tcp_slowtmr+0x75c>
c000a821:	83 ec 0c             	sub    esp,0xc
c000a824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a828:	e8 4f f8 ff ff       	call   c000a07c <tcp_pcb_purge>
c000a82d:	83 c4 10             	add    esp,0x10
c000a830:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000a835:	74 31                	je     c000a868 <tcp_slowtmr+0x708>
c000a837:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a83c:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a840:	75 16                	jne    c000a858 <tcp_slowtmr+0x6f8>
c000a842:	83 ec 08             	sub    esp,0x8
c000a845:	68 80 00 03 c0       	push   0xc0030080
c000a84a:	68 66 f9 02 c0       	push   0xc002f966
c000a84f:	e8 80 52 01 00       	call   c001fad4 <CPrintf>
c000a854:	83 c4 10             	add    esp,0x10
c000a857:	90                   	nop
c000a858:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a85c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a85f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a863:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a866:	eb 2c                	jmp    c000a894 <tcp_slowtmr+0x734>
c000a868:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000a86d:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c000a871:	74 15                	je     c000a888 <tcp_slowtmr+0x728>
c000a873:	83 ec 08             	sub    esp,0x8
c000a876:	68 a8 00 03 c0       	push   0xc00300a8
c000a87b:	68 66 f9 02 c0       	push   0xc002f966
c000a880:	e8 4f 52 01 00       	call   c001fad4 <CPrintf>
c000a885:	83 c4 10             	add    esp,0x10
c000a888:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a88c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a88f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000a894:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a898:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a89c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8a3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8a7:	83 ec 08             	sub    esp,0x8
c000a8aa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a8ae:	6a 02                	push   0x2
c000a8b0:	e8 2f d1 ff ff       	call   c00079e4 <memp_free>
c000a8b5:	83 c4 10             	add    esp,0x10
c000a8b8:	eb 16                	jmp    c000a8d0 <tcp_slowtmr+0x770>
c000a8ba:	66 90                	xchg   ax,ax
c000a8bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a8c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a8c8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a8cb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8cf:	90                   	nop
c000a8d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000a8d5:	0f 85 ed fe ff ff    	jne    c000a7c8 <tcp_slowtmr+0x668>
c000a8db:	90                   	nop
c000a8dc:	83 c4 20             	add    esp,0x20
c000a8df:	5b                   	pop    ebx
c000a8e0:	5e                   	pop    esi
c000a8e1:	5f                   	pop    edi
c000a8e2:	c3                   	ret    
c000a8e3:	90                   	nop

c000a8e4 <tcp_pcb_remove>:
c000a8e4:	83 ec 0c             	sub    esp,0xc
c000a8e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8eb:	8b 00                	mov    eax,DWORD PTR [eax]
c000a8ed:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a8f1:	75 11                	jne    c000a904 <tcp_pcb_remove+0x20>
c000a8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000a8f9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a900:	89 10                	mov    DWORD PTR [eax],edx
c000a902:	eb 4c                	jmp    c000a950 <tcp_pcb_remove+0x6c>
c000a904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a908:	8b 00                	mov    eax,DWORD PTR [eax]
c000a90a:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a90f:	eb 33                	jmp    c000a944 <tcp_pcb_remove+0x60>
c000a911:	8d 76 00             	lea    esi,[esi+0x0]
c000a914:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a919:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a91c:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000a920:	75 12                	jne    c000a934 <tcp_pcb_remove+0x50>
c000a922:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a927:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a92b:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a92e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a931:	eb 1d                	jmp    c000a950 <tcp_pcb_remove+0x6c>
c000a933:	90                   	nop
c000a934:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a939:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a93c:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000a941:	8d 76 00             	lea    esi,[esi+0x0]
c000a944:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000a949:	85 c0                	test   eax,eax
c000a94b:	75 c7                	jne    c000a914 <tcp_pcb_remove+0x30>
c000a94d:	8d 76 00             	lea    esi,[esi+0x0]
c000a950:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a954:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000a95b:	83 ec 0c             	sub    esp,0xc
c000a95e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a962:	e8 15 f7 ff ff       	call   c000a07c <tcp_pcb_purge>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a96e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a971:	83 f8 0a             	cmp    eax,0xa
c000a974:	74 3e                	je     c000a9b4 <tcp_pcb_remove+0xd0>
c000a976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a97a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a97d:	83 f8 01             	cmp    eax,0x1
c000a980:	74 32                	je     c000a9b4 <tcp_pcb_remove+0xd0>
c000a982:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a986:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 e0 01             	and    eax,0x1
c000a98f:	74 23                	je     c000a9b4 <tcp_pcb_remove+0xd0>
c000a991:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a995:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000a998:	83 c8 02             	or     eax,0x2
c000a99b:	88 c2                	mov    dl,al
c000a99d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9a1:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000a9a4:	83 ec 0c             	sub    esp,0xc
c000a9a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000a9ab:	e8 20 54 00 00       	call   c000fdd0 <tcp_output>
c000a9b0:	83 c4 10             	add    esp,0x10
c000a9b3:	90                   	nop
c000a9b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a9bb:	83 f8 01             	cmp    eax,0x1
c000a9be:	74 64                	je     c000aa24 <tcp_pcb_remove+0x140>
c000a9c0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9c4:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000a9c7:	85 c0                	test   eax,eax
c000a9c9:	74 15                	je     c000a9e0 <tcp_pcb_remove+0xfc>
c000a9cb:	83 ec 08             	sub    esp,0x8
c000a9ce:	68 4e 01 03 c0       	push   0xc003014e
c000a9d3:	68 66 f9 02 c0       	push   0xc002f966
c000a9d8:	e8 f7 50 01 00       	call   c001fad4 <CPrintf>
c000a9dd:	83 c4 10             	add    esp,0x10
c000a9e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a9e4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000a9e7:	85 c0                	test   eax,eax
c000a9e9:	74 15                	je     c000aa00 <tcp_pcb_remove+0x11c>
c000a9eb:	83 ec 08             	sub    esp,0x8
c000a9ee:	68 66 01 03 c0       	push   0xc0030166
c000a9f3:	68 66 f9 02 c0       	push   0xc002f966
c000a9f8:	e8 d7 50 01 00       	call   c001fad4 <CPrintf>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa04:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000aa0a:	85 c0                	test   eax,eax
c000aa0c:	74 16                	je     c000aa24 <tcp_pcb_remove+0x140>
c000aa0e:	83 ec 08             	sub    esp,0x8
c000aa11:	68 7f 01 03 c0       	push   0xc003017f
c000aa16:	68 66 f9 02 c0       	push   0xc002f966
c000aa1b:	e8 b4 50 01 00       	call   c001fad4 <CPrintf>
c000aa20:	83 c4 10             	add    esp,0x10
c000aa23:	90                   	nop
c000aa24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa28:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000aa2f:	90                   	nop
c000aa30:	83 c4 0c             	add    esp,0xc
c000aa33:	c3                   	ret    

c000aa34 <tcp_close_shutdown>:
c000aa34:	57                   	push   edi
c000aa35:	56                   	push   esi
c000aa36:	53                   	push   ebx
c000aa37:	83 ec 20             	sub    esp,0x20
c000aa3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa3e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000aa42:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000aa47:	85 c0                	test   eax,eax
c000aa49:	0f 84 41 01 00 00    	je     c000ab90 <tcp_close_shutdown+0x15c>
c000aa4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa53:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aa56:	83 f8 01             	cmp    eax,0x1
c000aa59:	0f 84 31 01 00 00    	je     c000ab90 <tcp_close_shutdown+0x15c>
c000aa5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa63:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aa69:	85 c0                	test   eax,eax
c000aa6b:	75 17                	jne    c000aa84 <tcp_close_shutdown+0x50>
c000aa6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa71:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000aa74:	0f b7 c0             	movzx  eax,ax
c000aa77:	3d 60 08 00 00       	cmp    eax,0x860
c000aa7c:	0f 84 0e 01 00 00    	je     c000ab90 <tcp_close_shutdown+0x15c>
c000aa82:	66 90                	xchg   ax,ax
c000aa84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa88:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aa8b:	0f b6 c0             	movzx  eax,al
c000aa8e:	83 e0 10             	and    eax,0x10
c000aa91:	75 15                	jne    c000aaa8 <tcp_close_shutdown+0x74>
c000aa93:	83 ec 08             	sub    esp,0x8
c000aa96:	68 96 01 03 c0       	push   0xc0030196
c000aa9b:	68 66 f9 02 c0       	push   0xc002f966
c000aaa0:	e8 2f 50 01 00       	call   c001fad4 <CPrintf>
c000aaa5:	83 c4 10             	add    esp,0x10
c000aaa8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aaac:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000aab0:	0f b7 f0             	movzx  esi,ax
c000aab3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aab7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000aaba:	0f b7 d8             	movzx  ebx,ax
c000aabd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aac1:	8d 78 04             	lea    edi,[eax+0x4]
c000aac4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000aac8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aacc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000aacf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aad3:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000aad6:	83 ec 08             	sub    esp,0x8
c000aad9:	56                   	push   esi
c000aada:	53                   	push   ebx
c000aadb:	57                   	push   edi
c000aadc:	51                   	push   ecx
c000aadd:	52                   	push   edx
c000aade:	50                   	push   eax
c000aadf:	e8 78 57 00 00       	call   c001025c <tcp_rst>
c000aae4:	83 c4 20             	add    esp,0x20
c000aae7:	83 ec 0c             	sub    esp,0xc
c000aaea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000aaee:	e8 89 f5 ff ff       	call   c000a07c <tcp_pcb_purge>
c000aaf3:	83 c4 10             	add    esp,0x10
c000aaf6:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000aafb:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000aaff:	75 0f                	jne    c000ab10 <tcp_close_shutdown+0xdc>
c000ab01:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab06:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab09:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000ab0e:	eb 48                	jmp    c000ab58 <tcp_close_shutdown+0x124>
c000ab10:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ab15:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab1a:	eb 30                	jmp    c000ab4c <tcp_close_shutdown+0x118>
c000ab1c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab21:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab24:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000ab28:	75 12                	jne    c000ab3c <tcp_close_shutdown+0x108>
c000ab2a:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab2f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ab33:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ab36:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab39:	eb 1d                	jmp    c000ab58 <tcp_close_shutdown+0x124>
c000ab3b:	90                   	nop
c000ab3c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab41:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab44:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ab49:	8d 76 00             	lea    esi,[esi+0x0]
c000ab4c:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ab51:	85 c0                	test   eax,eax
c000ab53:	75 c7                	jne    c000ab1c <tcp_close_shutdown+0xe8>
c000ab55:	8d 76 00             	lea    esi,[esi+0x0]
c000ab58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab5c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ab63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab67:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ab6e:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ab74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab78:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ab7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab7f:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000ab84:	e8 d7 5e 00 00       	call   c0010a60 <tcp_timer_needed>
c000ab89:	b0 00                	mov    al,0x0
c000ab8b:	e9 f4 01 00 00       	jmp    c000ad84 <tcp_close_shutdown+0x350>
c000ab90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ab94:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab97:	83 f8 07             	cmp    eax,0x7
c000ab9a:	0f 87 a4 01 00 00    	ja     c000ad44 <tcp_close_shutdown+0x310>
c000aba0:	8b 04 85 20 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfde0]
c000aba7:	ff e0                	jmp    eax
c000aba9:	8d 76 00             	lea    esi,[esi+0x0]
c000abac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000abb1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000abb5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000abb8:	0f b7 c0             	movzx  eax,ax
c000abbb:	85 c0                	test   eax,eax
c000abbd:	74 71                	je     c000ac30 <tcp_close_shutdown+0x1fc>
c000abbf:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000abc4:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abc8:	75 12                	jne    c000abdc <tcp_close_shutdown+0x1a8>
c000abca:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000abcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abd2:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000abd7:	eb 4b                	jmp    c000ac24 <tcp_close_shutdown+0x1f0>
c000abd9:	8d 76 00             	lea    esi,[esi+0x0]
c000abdc:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000abe1:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000abe6:	eb 30                	jmp    c000ac18 <tcp_close_shutdown+0x1e4>
c000abe8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000abf0:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000abf4:	75 12                	jne    c000ac08 <tcp_close_shutdown+0x1d4>
c000abf6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000abfb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000abff:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000ac02:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ac05:	eb 1d                	jmp    c000ac24 <tcp_close_shutdown+0x1f0>
c000ac07:	90                   	nop
c000ac08:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ac10:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000ac15:	8d 76 00             	lea    esi,[esi+0x0]
c000ac18:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ac1d:	85 c0                	test   eax,eax
c000ac1f:	75 c7                	jne    c000abe8 <tcp_close_shutdown+0x1b4>
c000ac21:	8d 76 00             	lea    esi,[esi+0x0]
c000ac24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ac28:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ac2f:	90                   	nop
c000ac30:	83 ec 08             	sub    esp,0x8
c000ac33:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac37:	6a 02                	push   0x2
c000ac39:	e8 a6 cd ff ff       	call   c00079e4 <memp_free>
c000ac3e:	83 c4 10             	add    esp,0x10
c000ac41:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ac49:	e9 12 01 00 00       	jmp    c000ad60 <tcp_close_shutdown+0x32c>
c000ac4e:	66 90                	xchg   ax,ax
c000ac50:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac55:	83 ec 08             	sub    esp,0x8
c000ac58:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac5c:	68 78 68 03 c0       	push   0xc0036878
c000ac61:	e8 7e fc ff ff       	call   c000a8e4 <tcp_pcb_remove>
c000ac66:	83 c4 10             	add    esp,0x10
c000ac69:	83 ec 08             	sub    esp,0x8
c000ac6c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac70:	6a 03                	push   0x3
c000ac72:	e8 6d cd ff ff       	call   c00079e4 <memp_free>
c000ac77:	83 c4 10             	add    esp,0x10
c000ac7a:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ac82:	e9 d9 00 00 00       	jmp    c000ad60 <tcp_close_shutdown+0x32c>
c000ac87:	90                   	nop
c000ac88:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ac8d:	83 ec 08             	sub    esp,0x8
c000ac90:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ac94:	68 70 68 03 c0       	push   0xc0036870
c000ac99:	e8 46 fc ff ff       	call   c000a8e4 <tcp_pcb_remove>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	83 ec 08             	sub    esp,0x8
c000aca4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000aca8:	6a 02                	push   0x2
c000acaa:	e8 35 cd ff ff       	call   c00079e4 <memp_free>
c000acaf:	83 c4 10             	add    esp,0x10
c000acb2:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000acba:	e9 a1 00 00 00       	jmp    c000ad60 <tcp_close_shutdown+0x32c>
c000acbf:	90                   	nop
c000acc0:	83 ec 0c             	sub    esp,0xc
c000acc3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000acc7:	e8 54 4d 00 00       	call   c000fa20 <tcp_send_fin>
c000accc:	83 c4 10             	add    esp,0x10
c000accf:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000acd3:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000acd8:	85 c0                	test   eax,eax
c000acda:	75 78                	jne    c000ad54 <tcp_close_shutdown+0x320>
c000acdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ace0:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ace7:	eb 6b                	jmp    c000ad54 <tcp_close_shutdown+0x320>
c000ace9:	8d 76 00             	lea    esi,[esi+0x0]
c000acec:	83 ec 0c             	sub    esp,0xc
c000acef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000acf3:	e8 28 4d 00 00       	call   c000fa20 <tcp_send_fin>
c000acf8:	83 c4 10             	add    esp,0x10
c000acfb:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000acff:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad04:	85 c0                	test   eax,eax
c000ad06:	75 50                	jne    c000ad58 <tcp_close_shutdown+0x324>
c000ad08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad0c:	c7 40 10 05 00 00 00 	mov    DWORD PTR [eax+0x10],0x5
c000ad13:	eb 43                	jmp    c000ad58 <tcp_close_shutdown+0x324>
c000ad15:	8d 76 00             	lea    esi,[esi+0x0]
c000ad18:	83 ec 0c             	sub    esp,0xc
c000ad1b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad1f:	e8 fc 4c 00 00       	call   c000fa20 <tcp_send_fin>
c000ad24:	83 c4 10             	add    esp,0x10
c000ad27:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000ad2b:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad30:	85 c0                	test   eax,eax
c000ad32:	75 28                	jne    c000ad5c <tcp_close_shutdown+0x328>
c000ad34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ad38:	c7 40 10 09 00 00 00 	mov    DWORD PTR [eax+0x10],0x9
c000ad3f:	eb 1b                	jmp    c000ad5c <tcp_close_shutdown+0x328>
c000ad41:	8d 76 00             	lea    esi,[esi+0x0]
c000ad44:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000ad49:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ad51:	eb 0d                	jmp    c000ad60 <tcp_close_shutdown+0x32c>
c000ad53:	90                   	nop
c000ad54:	90                   	nop
c000ad55:	eb 09                	jmp    c000ad60 <tcp_close_shutdown+0x32c>
c000ad57:	90                   	nop
c000ad58:	90                   	nop
c000ad59:	eb 05                	jmp    c000ad60 <tcp_close_shutdown+0x32c>
c000ad5b:	90                   	nop
c000ad5c:	90                   	nop
c000ad5d:	8d 76 00             	lea    esi,[esi+0x0]
c000ad60:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000ad65:	74 19                	je     c000ad80 <tcp_close_shutdown+0x34c>
c000ad67:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c000ad6c:	85 c0                	test   eax,eax
c000ad6e:	75 10                	jne    c000ad80 <tcp_close_shutdown+0x34c>
c000ad70:	83 ec 0c             	sub    esp,0xc
c000ad73:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad77:	e8 54 50 00 00       	call   c000fdd0 <tcp_output>
c000ad7c:	83 c4 10             	add    esp,0x10
c000ad7f:	90                   	nop
c000ad80:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ad84:	83 c4 20             	add    esp,0x20
c000ad87:	5b                   	pop    ebx
c000ad88:	5e                   	pop    esi
c000ad89:	5f                   	pop    edi
c000ad8a:	c3                   	ret    
c000ad8b:	90                   	nop

c000ad8c <tcp_close>:
c000ad8c:	83 ec 0c             	sub    esp,0xc
c000ad8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ad96:	83 f8 01             	cmp    eax,0x1
c000ad99:	74 15                	je     c000adb0 <tcp_close+0x24>
c000ad9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ada2:	83 c8 10             	or     eax,0x10
c000ada5:	88 c2                	mov    dl,al
c000ada7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adab:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000adae:	66 90                	xchg   ax,ax
c000adb0:	83 ec 08             	sub    esp,0x8
c000adb3:	6a 01                	push   0x1
c000adb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adb9:	e8 76 fc ff ff       	call   c000aa34 <tcp_close_shutdown>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	83 c4 0c             	add    esp,0xc
c000adc4:	c3                   	ret    
c000adc5:	8d 76 00             	lea    esi,[esi+0x0]

c000adc8 <tcp_recv_null>:
c000adc8:	83 ec 1c             	sub    esp,0x1c
c000adcb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000adcf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000add3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000add8:	74 2e                	je     c000ae08 <tcp_recv_null+0x40>
c000adda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000adde:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ade1:	0f b7 c0             	movzx  eax,ax
c000ade4:	83 ec 08             	sub    esp,0x8
c000ade7:	50                   	push   eax
c000ade8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000adec:	e8 af ee ff ff       	call   c0009ca0 <tcp_recved>
c000adf1:	83 c4 10             	add    esp,0x10
c000adf4:	83 ec 0c             	sub    esp,0xc
c000adf7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adfb:	e8 a0 d4 ff ff       	call   c00082a0 <pbuf_free>
c000ae00:	83 c4 10             	add    esp,0x10
c000ae03:	eb 1f                	jmp    c000ae24 <tcp_recv_null+0x5c>
c000ae05:	8d 76 00             	lea    esi,[esi+0x0]
c000ae08:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c000ae0d:	85 c0                	test   eax,eax
c000ae0f:	75 13                	jne    c000ae24 <tcp_recv_null+0x5c>
c000ae11:	83 ec 0c             	sub    esp,0xc
c000ae14:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ae18:	e8 6f ff ff ff       	call   c000ad8c <tcp_close>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	eb 06                	jmp    c000ae28 <tcp_recv_null+0x60>
c000ae22:	66 90                	xchg   ax,ax
c000ae24:	b0 00                	mov    al,0x0
c000ae26:	66 90                	xchg   ax,ax
c000ae28:	83 c4 1c             	add    esp,0x1c
c000ae2b:	c3                   	ret    

c000ae2c <tcp_fasttmr>:
c000ae2c:	83 ec 1c             	sub    esp,0x1c
c000ae2f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000ae34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae38:	e9 03 01 00 00       	jmp    c000af40 <tcp_fasttmr+0x114>
c000ae3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae44:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae4f:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000ae55:	85 c0                	test   eax,eax
c000ae57:	0f 84 8f 00 00 00    	je     c000aeec <tcp_fasttmr+0xc0>
c000ae5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae61:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ae67:	85 c0                	test   eax,eax
c000ae69:	74 31                	je     c000ae9c <tcp_fasttmr+0x70>
c000ae6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae6f:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000ae75:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae79:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000ae7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ae83:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000ae86:	6a 00                	push   0x0
c000ae88:	51                   	push   ecx
c000ae89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae8d:	52                   	push   edx
c000ae8e:	ff d0                	call   eax
c000ae90:	83 c4 10             	add    esp,0x10
c000ae93:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ae97:	eb 23                	jmp    c000aebc <tcp_fasttmr+0x90>
c000ae99:	8d 76 00             	lea    esi,[esi+0x0]
c000ae9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aea0:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000aea6:	6a 00                	push   0x0
c000aea8:	50                   	push   eax
c000aea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aead:	6a 00                	push   0x0
c000aeaf:	e8 14 ff ff ff       	call   c000adc8 <tcp_recv_null>
c000aeb4:	83 c4 10             	add    esp,0x10
c000aeb7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000aebb:	90                   	nop
c000aebc:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000aec1:	85 c0                	test   eax,eax
c000aec3:	75 13                	jne    c000aed8 <tcp_fasttmr+0xac>
c000aec5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aec9:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000aed3:	eb 17                	jmp    c000aeec <tcp_fasttmr+0xc0>
c000aed5:	8d 76 00             	lea    esi,[esi+0x0]
c000aed8:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000aedd:	83 f8 f6             	cmp    eax,0xfffffff6
c000aee0:	75 0a                	jne    c000aeec <tcp_fasttmr+0xc0>
c000aee2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aeea:	66 90                	xchg   ax,ax
c000aeec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aef1:	74 45                	je     c000af38 <tcp_fasttmr+0x10c>
c000aef3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aef7:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000aefa:	0f b6 c0             	movzx  eax,al
c000aefd:	83 e0 01             	and    eax,0x1
c000af00:	74 36                	je     c000af38 <tcp_fasttmr+0x10c>
c000af02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af06:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af09:	83 c8 02             	or     eax,0x2
c000af0c:	88 c2                	mov    dl,al
c000af0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af12:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af15:	83 ec 0c             	sub    esp,0xc
c000af18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af1c:	e8 af 4e 00 00       	call   c000fdd0 <tcp_output>
c000af21:	83 c4 10             	add    esp,0x10
c000af24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af28:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000af2b:	83 e0 fc             	and    eax,0xfffffffc
c000af2e:	88 c2                	mov    dl,al
c000af30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af34:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000af37:	90                   	nop
c000af38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af40:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000af45:	0f 85 f5 fe ff ff    	jne    c000ae40 <tcp_fasttmr+0x14>
c000af4b:	90                   	nop
c000af4c:	83 c4 1c             	add    esp,0x1c
c000af4f:	c3                   	ret    

c000af50 <tcp_tmr>:
c000af50:	83 ec 0c             	sub    esp,0xc
c000af53:	e8 d4 fe ff ff       	call   c000ae2c <tcp_fasttmr>
c000af58:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000af5d:	83 c0 01             	add    eax,0x1
c000af60:	a2 a0 a8 03 c0       	mov    ds:0xc003a8a0,al
c000af65:	a0 a0 a8 03 c0       	mov    al,ds:0xc003a8a0
c000af6a:	0f b6 c0             	movzx  eax,al
c000af6d:	83 e0 01             	and    eax,0x1
c000af70:	74 06                	je     c000af78 <tcp_tmr+0x28>
c000af72:	e8 e9 f1 ff ff       	call   c000a160 <tcp_slowtmr>
c000af77:	90                   	nop
c000af78:	90                   	nop
c000af79:	83 c4 0c             	add    esp,0xc
c000af7c:	c3                   	ret    
c000af7d:	8d 76 00             	lea    esi,[esi+0x0]

c000af80 <tcp_shutdown>:
c000af80:	83 ec 0c             	sub    esp,0xc
c000af83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af87:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000af8a:	83 f8 01             	cmp    eax,0x1
c000af8d:	75 09                	jne    c000af98 <tcp_shutdown+0x18>
c000af8f:	b0 f3                	mov    al,0xf3
c000af91:	e9 92 00 00 00       	jmp    c000b028 <tcp_shutdown+0xa8>
c000af96:	66 90                	xchg   ax,ax
c000af98:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000af9d:	74 49                	je     c000afe8 <tcp_shutdown+0x68>
c000af9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa3:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000afa9:	85 c0                	test   eax,eax
c000afab:	74 27                	je     c000afd4 <tcp_shutdown+0x54>
c000afad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afb1:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000afb7:	83 ec 0c             	sub    esp,0xc
c000afba:	50                   	push   eax
c000afbb:	e8 e0 d2 ff ff       	call   c00082a0 <pbuf_free>
c000afc0:	83 c4 10             	add    esp,0x10
c000afc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc7:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000afd1:	8d 76 00             	lea    esi,[esi+0x0]
c000afd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000afdb:	83 c8 10             	or     eax,0x10
c000afde:	88 c2                	mov    dl,al
c000afe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000afe7:	90                   	nop
c000afe8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000afed:	74 2d                	je     c000b01c <tcp_shutdown+0x9c>
c000afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aff3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000aff6:	83 f8 03             	cmp    eax,0x3
c000aff9:	72 25                	jb     c000b020 <tcp_shutdown+0xa0>
c000affb:	83 f8 04             	cmp    eax,0x4
c000affe:	76 08                	jbe    c000b008 <tcp_shutdown+0x88>
c000b000:	83 f8 07             	cmp    eax,0x7
c000b003:	75 1b                	jne    c000b020 <tcp_shutdown+0xa0>
c000b005:	8d 76 00             	lea    esi,[esi+0x0]
c000b008:	83 ec 08             	sub    esp,0x8
c000b00b:	6a 00                	push   0x0
c000b00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b011:	e8 1e fa ff ff       	call   c000aa34 <tcp_close_shutdown>
c000b016:	83 c4 10             	add    esp,0x10
c000b019:	eb 0d                	jmp    c000b028 <tcp_shutdown+0xa8>
c000b01b:	90                   	nop
c000b01c:	90                   	nop
c000b01d:	eb 05                	jmp    c000b024 <tcp_shutdown+0xa4>
c000b01f:	90                   	nop
c000b020:	90                   	nop
c000b021:	8d 76 00             	lea    esi,[esi+0x0]
c000b024:	b0 00                	mov    al,0x0
c000b026:	66 90                	xchg   ax,ax
c000b028:	83 c4 0c             	add    esp,0xc
c000b02b:	c3                   	ret    

c000b02c <tcp_abandon>:
c000b02c:	83 ec 2c             	sub    esp,0x2c
c000b02f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b033:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b036:	83 f8 01             	cmp    eax,0x1
c000b039:	75 15                	jne    c000b050 <tcp_abandon+0x24>
c000b03b:	83 ec 08             	sub    esp,0x8
c000b03e:	68 d0 00 03 c0       	push   0xc00300d0
c000b043:	68 66 f9 02 c0       	push   0xc002f966
c000b048:	e8 87 4a 01 00       	call   c001fad4 <CPrintf>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b054:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b057:	83 f8 0a             	cmp    eax,0xa
c000b05a:	75 2c                	jne    c000b088 <tcp_abandon+0x5c>
c000b05c:	83 ec 08             	sub    esp,0x8
c000b05f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b063:	68 84 68 03 c0       	push   0xc0036884
c000b068:	e8 77 f8 ff ff       	call   c000a8e4 <tcp_pcb_remove>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	83 ec 08             	sub    esp,0x8
c000b073:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b077:	6a 02                	push   0x2
c000b079:	e8 66 c9 ff ff       	call   c00079e4 <memp_free>
c000b07e:	83 c4 10             	add    esp,0x10
c000b081:	e9 32 01 00 00       	jmp    c000b1b8 <tcp_abandon+0x18c>
c000b086:	66 90                	xchg   ax,ax
c000b088:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b08c:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000b08f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b093:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b097:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b09a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b09e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000b0a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b0a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b0b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b0ba:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000b0bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0c3:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000b0c7:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c000b0cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0d0:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000b0d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b0da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0de:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000b0e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b0e5:	83 ec 08             	sub    esp,0x8
c000b0e8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b0ec:	68 70 68 03 c0       	push   0xc0036870
c000b0f1:	e8 ee f7 ff ff       	call   c000a8e4 <tcp_pcb_remove>
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b0fd:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b100:	85 c0                	test   eax,eax
c000b102:	74 14                	je     c000b118 <tcp_abandon+0xec>
c000b104:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b108:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000b10b:	83 ec 0c             	sub    esp,0xc
c000b10e:	50                   	push   eax
c000b10f:	e8 48 ee ff ff       	call   c0009f5c <tcp_segs_free>
c000b114:	83 c4 10             	add    esp,0x10
c000b117:	90                   	nop
c000b118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b11c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b11f:	85 c0                	test   eax,eax
c000b121:	74 15                	je     c000b138 <tcp_abandon+0x10c>
c000b123:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b127:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000b12a:	83 ec 0c             	sub    esp,0xc
c000b12d:	50                   	push   eax
c000b12e:	e8 29 ee ff ff       	call   c0009f5c <tcp_segs_free>
c000b133:	83 c4 10             	add    esp,0x10
c000b136:	66 90                	xchg   ax,ax
c000b138:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b13c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b142:	85 c0                	test   eax,eax
c000b144:	74 16                	je     c000b15c <tcp_abandon+0x130>
c000b146:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b14a:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	50                   	push   eax
c000b154:	e8 03 ee ff ff       	call   c0009f5c <tcp_segs_free>
c000b159:	83 c4 10             	add    esp,0x10
c000b15c:	83 ec 08             	sub    esp,0x8
c000b15f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b163:	6a 02                	push   0x2
c000b165:	e8 7a c8 ff ff       	call   c00079e4 <memp_free>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b172:	74 14                	je     c000b188 <tcp_abandon+0x15c>
c000b174:	83 ec 08             	sub    esp,0x8
c000b177:	6a f6                	push   0xfffffff6
c000b179:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b17d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b181:	ff d0                	call   eax
c000b183:	83 c4 10             	add    esp,0x10
c000b186:	66 90                	xchg   ax,ax
c000b188:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b18d:	74 29                	je     c000b1b8 <tcp_abandon+0x18c>
c000b18f:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c000b194:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c000b199:	83 ec 08             	sub    esp,0x8
c000b19c:	52                   	push   edx
c000b19d:	50                   	push   eax
c000b19e:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1a2:	50                   	push   eax
c000b1a3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1a7:	50                   	push   eax
c000b1a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b1ac:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b1b0:	e8 a7 50 00 00       	call   c001025c <tcp_rst>
c000b1b5:	83 c4 20             	add    esp,0x20
c000b1b8:	90                   	nop
c000b1b9:	83 c4 2c             	add    esp,0x2c
c000b1bc:	c3                   	ret    
c000b1bd:	8d 76 00             	lea    esi,[esi+0x0]

c000b1c0 <tcp_abort>:
c000b1c0:	83 ec 0c             	sub    esp,0xc
c000b1c3:	83 ec 08             	sub    esp,0x8
c000b1c6:	6a 01                	push   0x1
c000b1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b1cc:	e8 5b fe ff ff       	call   c000b02c <tcp_abandon>
c000b1d1:	83 c4 10             	add    esp,0x10
c000b1d4:	90                   	nop
c000b1d5:	83 c4 0c             	add    esp,0xc
c000b1d8:	c3                   	ret    
c000b1d9:	8d 76 00             	lea    esi,[esi+0x0]

c000b1dc <tcp_kill_prio>:
c000b1dc:	83 ec 2c             	sub    esp,0x2c
c000b1df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b1e3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b1e7:	c6 44 24 13 7f       	mov    BYTE PTR [esp+0x13],0x7f
c000b1ec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b1f4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1fc:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000b201:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b205:	eb 75                	jmp    c000b27c <tcp_kill_prio+0xa0>
c000b207:	90                   	nop
c000b208:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b20c:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b20f:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c000b214:	0f b6 c0             	movzx  eax,al
c000b217:	39 c2                	cmp    edx,eax
c000b219:	72 55                	jb     c000b270 <tcp_kill_prio+0x94>
c000b21b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b21f:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b222:	0f b6 54 24 13       	movzx  edx,BYTE PTR [esp+0x13]
c000b227:	0f b6 c0             	movzx  eax,al
c000b22a:	39 c2                	cmp    edx,eax
c000b22c:	72 42                	jb     c000b270 <tcp_kill_prio+0x94>
c000b22e:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b234:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b238:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b23b:	29 c2                	sub    edx,eax
c000b23d:	89 d0                	mov    eax,edx
c000b23f:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000b243:	77 2b                	ja     c000b270 <tcp_kill_prio+0x94>
c000b245:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b24b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b24f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b252:	29 c2                	sub    edx,eax
c000b254:	89 d0                	mov    eax,edx
c000b256:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b25a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b25e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b262:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b266:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000b269:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b26d:	8d 76 00             	lea    esi,[esi+0x0]
c000b270:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b274:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b277:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b27b:	90                   	nop
c000b27c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b281:	75 85                	jne    c000b208 <tcp_kill_prio+0x2c>
c000b283:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b288:	74 12                	je     c000b29c <tcp_kill_prio+0xc0>
c000b28a:	83 ec 0c             	sub    esp,0xc
c000b28d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b291:	e8 2a ff ff ff       	call   c000b1c0 <tcp_abort>
c000b296:	83 c4 10             	add    esp,0x10
c000b299:	8d 76 00             	lea    esi,[esi+0x0]
c000b29c:	90                   	nop
c000b29d:	83 c4 2c             	add    esp,0x2c
c000b2a0:	c3                   	ret    
c000b2a1:	8d 76 00             	lea    esi,[esi+0x0]

c000b2a4 <tcp_kill_timewait>:
c000b2a4:	83 ec 1c             	sub    esp,0x1c
c000b2a7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b2af:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000b2b7:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000b2bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b2c0:	eb 42                	jmp    c000b304 <tcp_kill_timewait+0x60>
c000b2c2:	66 90                	xchg   ax,ax
c000b2c4:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b2ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2ce:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b2d1:	29 c2                	sub    edx,eax
c000b2d3:	89 d0                	mov    eax,edx
c000b2d5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b2d9:	77 1d                	ja     c000b2f8 <tcp_kill_timewait+0x54>
c000b2db:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b2e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2e5:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000b2e8:	29 c2                	sub    edx,eax
c000b2ea:	89 d0                	mov    eax,edx
c000b2ec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b2f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b2ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b303:	90                   	nop
c000b304:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000b309:	75 b9                	jne    c000b2c4 <tcp_kill_timewait+0x20>
c000b30b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b310:	74 12                	je     c000b324 <tcp_kill_timewait+0x80>
c000b312:	83 ec 0c             	sub    esp,0xc
c000b315:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b319:	e8 a2 fe ff ff       	call   c000b1c0 <tcp_abort>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	8d 76 00             	lea    esi,[esi+0x0]
c000b324:	90                   	nop
c000b325:	83 c4 1c             	add    esp,0x1c
c000b328:	c3                   	ret    
c000b329:	8d 76 00             	lea    esi,[esi+0x0]

c000b32c <tcp_next_iss>:
c000b32c:	8b 15 1c 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a1c
c000b332:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000b337:	01 d0                	add    eax,edx
c000b339:	a3 1c 3a 03 c0       	mov    ds:0xc0033a1c,eax
c000b33e:	a1 1c 3a 03 c0       	mov    eax,ds:0xc0033a1c
c000b343:	c3                   	ret    

c000b344 <tcp_alloc>:
c000b344:	83 ec 2c             	sub    esp,0x2c
c000b347:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b34b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000b34f:	83 ec 0c             	sub    esp,0xc
c000b352:	6a 02                	push   0x2
c000b354:	e8 5f c5 ff ff       	call   c00078b8 <memp_malloc>
c000b359:	83 c4 10             	add    esp,0x10
c000b35c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b360:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b365:	75 6d                	jne    c000b3d4 <tcp_alloc+0x90>
c000b367:	e8 38 ff ff ff       	call   c000b2a4 <tcp_kill_timewait>
c000b36c:	83 ec 0c             	sub    esp,0xc
c000b36f:	6a 02                	push   0x2
c000b371:	e8 42 c5 ff ff       	call   c00078b8 <memp_malloc>
c000b376:	83 c4 10             	add    esp,0x10
c000b379:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b37d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b382:	75 38                	jne    c000b3bc <tcp_alloc+0x78>
c000b384:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000b389:	83 ec 0c             	sub    esp,0xc
c000b38c:	50                   	push   eax
c000b38d:	e8 4a fe ff ff       	call   c000b1dc <tcp_kill_prio>
c000b392:	83 c4 10             	add    esp,0x10
c000b395:	83 ec 0c             	sub    esp,0xc
c000b398:	6a 02                	push   0x2
c000b39a:	e8 19 c5 ff ff       	call   c00078b8 <memp_malloc>
c000b39f:	83 c4 10             	add    esp,0x10
c000b3a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b3a6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3ab:	74 0f                	je     c000b3bc <tcp_alloc+0x78>
c000b3ad:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b3b3:	83 e8 01             	sub    eax,0x1
c000b3b6:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b3bc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3c1:	74 11                	je     c000b3d4 <tcp_alloc+0x90>
c000b3c3:	66 a1 ec 67 03 c0    	mov    ax,ds:0xc00367ec
c000b3c9:	83 e8 01             	sub    eax,0x1
c000b3cc:	66 a3 ec 67 03 c0    	mov    ds:0xc00367ec,ax
c000b3d2:	66 90                	xchg   ax,ax
c000b3d4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b3d9:	0f 84 09 01 00 00    	je     c000b4e8 <tcp_alloc+0x1a4>
c000b3df:	83 ec 04             	sub    esp,0x4
c000b3e2:	68 a8 00 00 00       	push   0xa8
c000b3e7:	6a 00                	push   0x0
c000b3e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b3ed:	e8 fe 50 ff ff       	call   c00004f0 <memset>
c000b3f2:	83 c4 10             	add    esp,0x10
c000b3f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3f9:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000b3fd:	88 50 14             	mov    BYTE PTR [eax+0x14],dl
c000b400:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b404:	66 c7 40 72 00 01    	mov    WORD PTR [eax+0x72],0x100
c000b40a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b40e:	66 c7 40 74 00 00    	mov    WORD PTR [eax+0x74],0x0
c000b414:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b418:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b41e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b422:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b428:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b42c:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
c000b430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b434:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c000b438:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b43c:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b442:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b446:	66 c7 40 4c 06 00    	mov    WORD PTR [eax+0x4c],0x6
c000b44c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b450:	66 c7 40 48 00 00    	mov    WORD PTR [eax+0x48],0x0
c000b456:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b45a:	66 c7 40 4a 06 00    	mov    WORD PTR [eax+0x4a],0x6
c000b460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b464:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000b46a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b46e:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b474:	e8 b3 fe ff ff       	call   c000b32c <tcp_next_iss>
c000b479:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b47d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b481:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b485:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000b488:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b48c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b490:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b493:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b497:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b49b:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b49e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4a2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000b4a6:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b4a9:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b4af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4b3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b4b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ba:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000b4be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4c2:	c7 80 8c 00 00 00 c8 ad 00 c0 	mov    DWORD PTR [eax+0x8c],0xc000adc8
c000b4cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4d0:	c7 80 9c 00 00 00 00 dd 6d 00 	mov    DWORD PTR [eax+0x9c],0x6ddd00
c000b4da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4de:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000b4e5:	8d 76 00             	lea    esi,[esi+0x0]
c000b4e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b4ec:	83 c4 2c             	add    esp,0x2c
c000b4ef:	c3                   	ret    

c000b4f0 <tcp_new>:
c000b4f0:	83 ec 0c             	sub    esp,0xc
c000b4f3:	83 ec 0c             	sub    esp,0xc
c000b4f6:	6a 40                	push   0x40
c000b4f8:	e8 47 fe ff ff       	call   c000b344 <tcp_alloc>
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	83 c4 0c             	add    esp,0xc
c000b503:	c3                   	ret    

c000b504 <tcp_eff_send_mss>:
c000b504:	53                   	push   ebx
c000b505:	83 ec 28             	sub    esp,0x28
c000b508:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b50c:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b511:	83 ec 0c             	sub    esp,0xc
c000b514:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b518:	e8 2b 80 00 00       	call   c0013548 <ip_route>
c000b51d:	83 c4 10             	add    esp,0x10
c000b520:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b524:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b529:	74 3d                	je     c000b568 <tcp_eff_send_mss+0x64>
c000b52b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b52f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b532:	0f b7 c0             	movzx  eax,ax
c000b535:	85 c0                	test   eax,eax
c000b537:	74 2f                	je     c000b568 <tcp_eff_send_mss+0x64>
c000b539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b53d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b540:	83 e8 28             	sub    eax,0x28
c000b543:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b548:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b54c:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000b551:	0f b7 d8             	movzx  ebx,ax
c000b554:	0f b7 ca             	movzx  ecx,dx
c000b557:	39 cb                	cmp    ebx,ecx
c000b559:	76 05                	jbe    c000b560 <tcp_eff_send_mss+0x5c>
c000b55b:	89 d0                	mov    eax,edx
c000b55d:	8d 76 00             	lea    esi,[esi+0x0]
c000b560:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b565:	8d 76 00             	lea    esi,[esi+0x0]
c000b568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b56c:	83 c4 28             	add    esp,0x28
c000b56f:	5b                   	pop    ebx
c000b570:	c3                   	ret    
c000b571:	8d 76 00             	lea    esi,[esi+0x0]

c000b574 <tcp_connect>:
c000b574:	83 ec 2c             	sub    esp,0x2c
c000b577:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b57b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000b580:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b584:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000b587:	85 c0                	test   eax,eax
c000b589:	74 1d                	je     c000b5a8 <tcp_connect+0x34>
c000b58b:	83 ec 08             	sub    esp,0x8
c000b58e:	68 04 01 03 c0       	push   0xc0030104
c000b593:	68 66 f9 02 c0       	push   0xc002f966
c000b598:	e8 37 45 01 00       	call   c001fad4 <CPrintf>
c000b59d:	83 c4 10             	add    esp,0x10
c000b5a0:	b0 f7                	mov    al,0xf7
c000b5a2:	e9 39 02 00 00       	jmp    c000b7e0 <tcp_connect+0x26c>
c000b5a7:	90                   	nop
c000b5a8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c000b5ad:	74 25                	je     c000b5d4 <tcp_connect+0x60>
c000b5af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5b3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b5b7:	8b 12                	mov    edx,DWORD PTR [edx]
c000b5b9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b5bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b5c4:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000b5c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5cc:	85 c0                	test   eax,eax
c000b5ce:	74 18                	je     c000b5e8 <tcp_connect+0x74>
c000b5d0:	eb 0a                	jmp    c000b5dc <tcp_connect+0x68>
c000b5d2:	66 90                	xchg   ax,ax
c000b5d4:	b0 fa                	mov    al,0xfa
c000b5d6:	e9 05 02 00 00       	jmp    c000b7e0 <tcp_connect+0x26c>
c000b5db:	90                   	nop
c000b5dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000b5e2:	85 c0                	test   eax,eax
c000b5e4:	75 3a                	jne    c000b620 <tcp_connect+0xac>
c000b5e6:	66 90                	xchg   ax,ax
c000b5e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5ec:	83 c0 04             	add    eax,0x4
c000b5ef:	83 ec 0c             	sub    esp,0xc
c000b5f2:	50                   	push   eax
c000b5f3:	e8 50 7f 00 00       	call   c0013548 <ip_route>
c000b5f8:	83 c4 10             	add    esp,0x10
c000b5fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5ff:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000b604:	75 0a                	jne    c000b610 <tcp_connect+0x9c>
c000b606:	b0 fc                	mov    al,0xfc
c000b608:	e9 d3 01 00 00       	jmp    c000b7e0 <tcp_connect+0x26c>
c000b60d:	8d 76 00             	lea    esi,[esi+0x0]
c000b610:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b614:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b617:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b61b:	89 10                	mov    DWORD PTR [eax],edx
c000b61d:	8d 76 00             	lea    esi,[esi+0x0]
c000b620:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b624:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b627:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000b62c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b630:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000b633:	0f b7 c0             	movzx  eax,ax
c000b636:	85 c0                	test   eax,eax
c000b638:	75 0e                	jne    c000b648 <tcp_connect+0xd4>
c000b63a:	e8 19 e7 ff ff       	call   c0009d58 <tcp_new_port>
c000b63f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b643:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000b647:	90                   	nop
c000b648:	e8 df fc ff ff       	call   c000b32c <tcp_next_iss>
c000b64d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b651:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b655:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c000b65c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b660:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b664:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c000b667:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b66b:	8d 50 ff             	lea    edx,[eax-0x1]
c000b66e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b672:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000b675:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b679:	8d 50 ff             	lea    edx,[eax-0x1]
c000b67c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b680:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000b683:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b687:	66 c7 40 2c 60 08    	mov    WORD PTR [eax+0x2c],0x860
c000b68d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b691:	66 c7 40 2e 60 08    	mov    WORD PTR [eax+0x2e],0x860
c000b697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b69b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000b69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6a2:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000b6a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6a9:	66 c7 40 60 60 08    	mov    WORD PTR [eax+0x60],0x860
c000b6af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6b3:	66 c7 40 3c 18 02    	mov    WORD PTR [eax+0x3c],0x218
c000b6b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6bd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b6c0:	0f b7 c0             	movzx  eax,ax
c000b6c3:	83 ec 08             	sub    esp,0x8
c000b6c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b6ca:	50                   	push   eax
c000b6cb:	e8 34 fe ff ff       	call   c000b504 <tcp_eff_send_mss>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b6d7:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000b6db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6df:	66 c7 40 56 01 00    	mov    WORD PTR [eax+0x56],0x1
c000b6e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b6ec:	89 c2                	mov    edx,eax
c000b6ee:	c1 e2 02             	shl    edx,0x2
c000b6f1:	01 d0                	add    eax,edx
c000b6f3:	d1 e0                	shl    eax,1
c000b6f5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b6f9:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000b6fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b701:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b705:	89 90 90 00 00 00    	mov    DWORD PTR [eax+0x90],edx
c000b70b:	83 ec 08             	sub    esp,0x8
c000b70e:	6a 02                	push   0x2
c000b710:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b714:	e8 1b 40 00 00       	call   c000f734 <tcp_enqueue_flags>
c000b719:	83 c4 10             	add    esp,0x10
c000b71c:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c000b720:	0f be 44 24 13       	movsx  eax,BYTE PTR [esp+0x13]
c000b725:	85 c0                	test   eax,eax
c000b727:	0f 85 af 00 00 00    	jne    c000b7dc <tcp_connect+0x268>
c000b72d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b731:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b738:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c000b73d:	85 c0                	test   eax,eax
c000b73f:	74 6f                	je     c000b7b0 <tcp_connect+0x23c>
c000b741:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b746:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b74a:	75 10                	jne    c000b75c <tcp_connect+0x1e8>
c000b74c:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b751:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b754:	a3 80 68 03 c0       	mov    ds:0xc0036880,eax
c000b759:	eb 49                	jmp    c000b7a4 <tcp_connect+0x230>
c000b75b:	90                   	nop
c000b75c:	a1 80 68 03 c0       	mov    eax,ds:0xc0036880
c000b761:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b766:	eb 30                	jmp    c000b798 <tcp_connect+0x224>
c000b768:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b76d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b770:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000b774:	75 12                	jne    c000b788 <tcp_connect+0x214>
c000b776:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b77b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b77f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000b782:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b785:	eb 1d                	jmp    c000b7a4 <tcp_connect+0x230>
c000b787:	90                   	nop
c000b788:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b78d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b790:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000b795:	8d 76 00             	lea    esi,[esi+0x0]
c000b798:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000b79d:	85 c0                	test   eax,eax
c000b79f:	75 c7                	jne    c000b768 <tcp_connect+0x1f4>
c000b7a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b7a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7a8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000b7af:	90                   	nop
c000b7b0:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000b7b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7ba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b7bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b7c1:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000b7c6:	e8 95 52 00 00       	call   c0010a60 <tcp_timer_needed>
c000b7cb:	83 ec 0c             	sub    esp,0xc
c000b7ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b7d2:	e8 f9 45 00 00       	call   c000fdd0 <tcp_output>
c000b7d7:	83 c4 10             	add    esp,0x10
c000b7da:	66 90                	xchg   ax,ax
c000b7dc:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c000b7e0:	83 c4 2c             	add    esp,0x2c
c000b7e3:	c3                   	ret    

c000b7e4 <tcp_debug_state_str>:
c000b7e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e8:	8b 04 85 80 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfd80]
c000b7ef:	c3                   	ret    

c000b7f0 <tcp_timewait_input>:
c000b7f0:	53                   	push   ebx
c000b7f1:	83 ec 08             	sub    esp,0x8
c000b7f4:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b7f9:	0f b6 c0             	movzx  eax,al
c000b7fc:	83 e0 04             	and    eax,0x4
c000b7ff:	74 07                	je     c000b808 <tcp_timewait_input+0x18>
c000b801:	b0 00                	mov    al,0x0
c000b803:	e9 e8 00 00 00       	jmp    c000b8f0 <tcp_timewait_input+0x100>
c000b808:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b80d:	0f b6 c0             	movzx  eax,al
c000b810:	83 e0 02             	and    eax,0x2
c000b813:	0f 84 83 00 00 00    	je     c000b89c <tcp_timewait_input+0xac>
c000b819:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b823:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b826:	29 c2                	sub    edx,eax
c000b828:	89 d0                	mov    eax,edx
c000b82a:	0f 88 88 00 00 00    	js     c000b8b8 <tcp_timewait_input+0xc8>
c000b830:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000b836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b83a:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000b83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b841:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000b844:	0f b7 c0             	movzx  eax,ax
c000b847:	01 c8                	add    eax,ecx
c000b849:	29 c2                	sub    edx,eax
c000b84b:	89 d0                	mov    eax,edx
c000b84d:	85 c0                	test   eax,eax
c000b84f:	7f 67                	jg     c000b8b8 <tcp_timewait_input+0xc8>
c000b851:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b856:	66 8b 00             	mov    ax,WORD PTR [eax]
c000b859:	0f b7 c8             	movzx  ecx,ax
c000b85c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000b861:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000b865:	0f b7 d0             	movzx  edx,ax
c000b868:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b86e:	0f b7 d8             	movzx  ebx,ax
c000b871:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b876:	01 c3                	add    ebx,eax
c000b878:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000b87d:	83 ec 08             	sub    esp,0x8
c000b880:	51                   	push   ecx
c000b881:	52                   	push   edx
c000b882:	68 90 68 03 c0       	push   0xc0036890
c000b887:	68 98 68 03 c0       	push   0xc0036898
c000b88c:	53                   	push   ebx
c000b88d:	50                   	push   eax
c000b88e:	e8 c9 49 00 00       	call   c001025c <tcp_rst>
c000b893:	83 c4 20             	add    esp,0x20
c000b896:	b0 00                	mov    al,0x0
c000b898:	eb 56                	jmp    c000b8f0 <tcp_timewait_input+0x100>
c000b89a:	66 90                	xchg   ax,ax
c000b89c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000b8a1:	0f b6 c0             	movzx  eax,al
c000b8a4:	83 e0 01             	and    eax,0x1
c000b8a7:	74 0f                	je     c000b8b8 <tcp_timewait_input+0xc8>
c000b8a9:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000b8af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8b3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000b8b6:	66 90                	xchg   ax,ax
c000b8b8:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000b8be:	0f b7 c0             	movzx  eax,ax
c000b8c1:	85 c0                	test   eax,eax
c000b8c3:	74 27                	je     c000b8ec <tcp_timewait_input+0xfc>
c000b8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8c9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000b8cc:	83 c8 02             	or     eax,0x2
c000b8cf:	88 c2                	mov    dl,al
c000b8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b8d5:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000b8d8:	83 ec 0c             	sub    esp,0xc
c000b8db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8df:	e8 ec 44 00 00       	call   c000fdd0 <tcp_output>
c000b8e4:	83 c4 10             	add    esp,0x10
c000b8e7:	eb 07                	jmp    c000b8f0 <tcp_timewait_input+0x100>
c000b8e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b8ec:	b0 00                	mov    al,0x0
c000b8ee:	66 90                	xchg   ax,ax
c000b8f0:	83 c4 08             	add    esp,0x8
c000b8f3:	5b                   	pop    ebx
c000b8f4:	c3                   	ret    
c000b8f5:	8d 76 00             	lea    esi,[esi+0x0]

c000b8f8 <tcp_oos_insert_segment>:
c000b8f8:	53                   	push   ebx
c000b8f9:	83 ec 18             	sub    esp,0x18
c000b8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b900:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b903:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b907:	0f b7 c0             	movzx  eax,ax
c000b90a:	83 ec 0c             	sub    esp,0xc
c000b90d:	50                   	push   eax
c000b90e:	e8 d5 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b913:	83 c4 10             	add    esp,0x10
c000b916:	0f b7 c0             	movzx  eax,ax
c000b919:	83 e0 01             	and    eax,0x1
c000b91c:	0f 84 8e 00 00 00    	je     c000b9b0 <tcp_oos_insert_segment+0xb8>
c000b922:	83 ec 0c             	sub    esp,0xc
c000b925:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b929:	e8 2e e6 ff ff       	call   c0009f5c <tcp_segs_free>
c000b92e:	83 c4 10             	add    esp,0x10
c000b931:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000b939:	e9 16 01 00 00       	jmp    c000ba54 <tcp_oos_insert_segment+0x15c>
c000b93e:	66 90                	xchg   ax,ax
c000b940:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b944:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b947:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000b94b:	0f b7 c0             	movzx  eax,ax
c000b94e:	83 ec 0c             	sub    esp,0xc
c000b951:	50                   	push   eax
c000b952:	e8 91 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b957:	83 c4 10             	add    esp,0x10
c000b95a:	0f b7 c0             	movzx  eax,ax
c000b95d:	83 e0 01             	and    eax,0x1
c000b960:	74 2a                	je     c000b98c <tcp_oos_insert_segment+0x94>
c000b962:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b966:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b969:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000b96d:	83 ec 0c             	sub    esp,0xc
c000b970:	6a 01                	push   0x1
c000b972:	e8 71 52 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000b977:	83 c4 10             	add    esp,0x10
c000b97a:	89 c1                	mov    ecx,eax
c000b97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b980:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000b983:	89 d8                	mov    eax,ebx
c000b985:	09 c8                	or     eax,ecx
c000b987:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000b98b:	90                   	nop
c000b98c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b990:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b994:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b998:	8b 00                	mov    eax,DWORD PTR [eax]
c000b99a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b99e:	83 ec 0c             	sub    esp,0xc
c000b9a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9a5:	e8 6e e5 ff ff       	call   c0009f18 <tcp_seg_free>
c000b9aa:	83 c4 10             	add    esp,0x10
c000b9ad:	8d 76 00             	lea    esi,[esi+0x0]
c000b9b0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b9b5:	74 35                	je     c000b9ec <tcp_oos_insert_segment+0xf4>
c000b9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9be:	0f b7 d0             	movzx  edx,ax
c000b9c1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000b9c6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b9c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b9d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b9d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b9d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9da:	0f b7 c0             	movzx  eax,ax
c000b9dd:	01 d0                	add    eax,edx
c000b9df:	29 c1                	sub    ecx,eax
c000b9e1:	89 c8                	mov    eax,ecx
c000b9e3:	0f 89 57 ff ff ff    	jns    c000b940 <tcp_oos_insert_segment+0x48>
c000b9e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b9ec:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b9f1:	74 61                	je     c000ba54 <tcp_oos_insert_segment+0x15c>
c000b9f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b9f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b9fa:	0f b7 d0             	movzx  edx,ax
c000b9fd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba02:	01 c2                	add    edx,eax
c000ba04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba0b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba0e:	29 c2                	sub    edx,eax
c000ba10:	89 d0                	mov    eax,edx
c000ba12:	85 c0                	test   eax,eax
c000ba14:	7e 3e                	jle    c000ba54 <tcp_oos_insert_segment+0x15c>
c000ba16:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ba1a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ba1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba20:	89 c2                	mov    edx,eax
c000ba22:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ba27:	89 d3                	mov    ebx,edx
c000ba29:	29 c3                	sub    ebx,eax
c000ba2b:	89 d8                	mov    eax,ebx
c000ba2d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ba31:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ba35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba39:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ba3c:	0f b7 d0             	movzx  edx,ax
c000ba3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba46:	83 ec 08             	sub    esp,0x8
c000ba49:	52                   	push   edx
c000ba4a:	50                   	push   eax
c000ba4b:	e8 20 ce ff ff       	call   c0008870 <pbuf_realloc>
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	90                   	nop
c000ba54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba58:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ba5c:	89 10                	mov    DWORD PTR [eax],edx
c000ba5e:	90                   	nop
c000ba5f:	83 c4 18             	add    esp,0x18
c000ba62:	5b                   	pop    ebx
c000ba63:	c3                   	ret    

c000ba64 <tcp_receive>:
c000ba64:	57                   	push   edi
c000ba65:	56                   	push   esi
c000ba66:	53                   	push   ebx
c000ba67:	83 ec 30             	sub    esp,0x30
c000ba6a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ba72:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ba77:	0f b6 c0             	movzx  eax,al
c000ba7a:	83 e0 10             	and    eax,0x10
c000ba7d:	0f 84 e5 07 00 00    	je     c000c268 <tcp_receive+0x804>
c000ba83:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba87:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000ba8a:	0f b7 d0             	movzx  edx,ax
c000ba8d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba91:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ba94:	01 d0                	add    eax,edx
c000ba96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba9a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ba9e:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000baa1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000baa6:	29 c2                	sub    edx,eax
c000baa8:	89 d0                	mov    eax,edx
c000baaa:	78 50                	js     c000bafc <tcp_receive+0x98>
c000baac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bab0:	8b 50 64             	mov    edx,DWORD PTR [eax+0x64]
c000bab3:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000bab8:	39 c2                	cmp    edx,eax
c000baba:	75 14                	jne    c000bad0 <tcp_receive+0x6c>
c000babc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bac0:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bac3:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bac8:	29 c2                	sub    edx,eax
c000baca:	89 d0                	mov    eax,edx
c000bacc:	78 2e                	js     c000bafc <tcp_receive+0x98>
c000bace:	66 90                	xchg   ax,ax
c000bad0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bad4:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bad7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000badc:	39 c2                	cmp    edx,eax
c000bade:	75 74                	jne    c000bb54 <tcp_receive+0xf0>
c000bae0:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bae5:	66 8b 50 0e          	mov    dx,WORD PTR [eax+0xe]
c000bae9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000baed:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000baf0:	0f b7 d2             	movzx  edx,dx
c000baf3:	0f b7 c0             	movzx  eax,ax
c000baf6:	39 c2                	cmp    edx,eax
c000baf8:	76 5a                	jbe    c000bb54 <tcp_receive+0xf0>
c000bafa:	66 90                	xchg   ax,ax
c000bafc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000bb01:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000bb05:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bb09:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000bb0d:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000bb13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb17:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000bb1a:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bb20:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb24:	89 50 68             	mov    DWORD PTR [eax+0x68],edx
c000bb27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb2b:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb2e:	0f b7 c0             	movzx  eax,ax
c000bb31:	85 c0                	test   eax,eax
c000bb33:	74 1f                	je     c000bb54 <tcp_receive+0xf0>
c000bb35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb39:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c000bb3f:	0f b6 c0             	movzx  eax,al
c000bb42:	85 c0                	test   eax,eax
c000bb44:	74 0e                	je     c000bb54 <tcp_receive+0xf0>
c000bb46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb4a:	c6 80 a4 00 00 00 00 	mov    BYTE PTR [eax+0xa4],0x0
c000bb51:	8d 76 00             	lea    esi,[esi+0x0]
c000bb54:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bb5a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb5e:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bb61:	29 c2                	sub    edx,eax
c000bb63:	89 d0                	mov    eax,edx
c000bb65:	85 c0                	test   eax,eax
c000bb67:	0f 8f ff 00 00 00    	jg     c000bc6c <tcp_receive+0x208>
c000bb6d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb71:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bb77:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000bb7d:	0f b7 c0             	movzx  eax,ax
c000bb80:	85 c0                	test   eax,eax
c000bb82:	0f 85 cc 00 00 00    	jne    c000bc54 <tcp_receive+0x1f0>
c000bb88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb8c:	8b 50 68             	mov    edx,DWORD PTR [eax+0x68]
c000bb8f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bb93:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000bb96:	0f b7 c0             	movzx  eax,ax
c000bb99:	01 d0                	add    eax,edx
c000bb9b:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c000bb9f:	0f 85 af 00 00 00    	jne    c000bc54 <tcp_receive+0x1f0>
c000bba5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bba9:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000bbad:	98                   	cwde   
c000bbae:	85 c0                	test   eax,eax
c000bbb0:	0f 88 9e 00 00 00    	js     c000bc54 <tcp_receive+0x1f0>
c000bbb6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbba:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000bbbd:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bbc2:	39 c2                	cmp    edx,eax
c000bbc4:	0f 85 8a 00 00 00    	jne    c000bc54 <tcp_receive+0x1f0>
c000bbca:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000bbd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbd6:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bbd9:	83 c0 01             	add    eax,0x1
c000bbdc:	88 c2                	mov    dl,al
c000bbde:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbe2:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
c000bbe5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbe9:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bbec:	0f b6 c0             	movzx  eax,al
c000bbef:	83 f8 03             	cmp    eax,0x3
c000bbf2:	76 40                	jbe    c000bc34 <tcp_receive+0x1d0>
c000bbf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bbf8:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bbfc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc03:	01 d0                	add    eax,edx
c000bc05:	89 c2                	mov    edx,eax
c000bc07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc0b:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bc0f:	0f b7 d2             	movzx  edx,dx
c000bc12:	0f b7 c0             	movzx  eax,ax
c000bc15:	39 c2                	cmp    edx,eax
c000bc17:	76 3b                	jbe    c000bc54 <tcp_receive+0x1f0>
c000bc19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc1d:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bc21:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc28:	01 d0                	add    eax,edx
c000bc2a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bc2e:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bc32:	eb 20                	jmp    c000bc54 <tcp_receive+0x1f0>
c000bc34:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc38:	8a 40 54             	mov    al,BYTE PTR [eax+0x54]
c000bc3b:	0f b6 c0             	movzx  eax,al
c000bc3e:	83 f8 03             	cmp    eax,0x3
c000bc41:	75 11                	jne    c000bc54 <tcp_receive+0x1f0>
c000bc43:	83 ec 0c             	sub    esp,0xc
c000bc46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bc4a:	e8 d9 48 00 00       	call   c0010528 <tcp_rexmit_fast>
c000bc4f:	83 c4 10             	add    esp,0x10
c000bc52:	66 90                	xchg   ax,ax
c000bc54:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc59:	0f 85 99 04 00 00    	jne    c000c0f8 <tcp_receive+0x694>
c000bc5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc63:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bc67:	e9 8c 04 00 00       	jmp    c000c0f8 <tcp_receive+0x694>
c000bc6c:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc76:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bc79:	29 c2                	sub    edx,eax
c000bc7b:	89 d0                	mov    eax,edx
c000bc7d:	83 e8 01             	sub    eax,0x1
c000bc80:	0f 88 4a 03 00 00    	js     c000bfd0 <tcp_receive+0x56c>
c000bc86:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bc8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bc90:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000bc93:	29 c2                	sub    edx,eax
c000bc95:	89 d0                	mov    eax,edx
c000bc97:	85 c0                	test   eax,eax
c000bc99:	0f 8f 31 03 00 00    	jg     c000bfd0 <tcp_receive+0x56c>
c000bc9f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bca3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bca6:	0f b6 c0             	movzx  eax,al
c000bca9:	83 e0 04             	and    eax,0x4
c000bcac:	74 22                	je     c000bcd0 <tcp_receive+0x26c>
c000bcae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcb2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000bcb5:	83 e0 fb             	and    eax,0xfffffffb
c000bcb8:	88 c2                	mov    dl,al
c000bcba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcbe:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000bcc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcc5:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bcc8:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bccc:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bcd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcd4:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000bcd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bcdc:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000bcdf:	98                   	cwde   
c000bce0:	c1 f8 03             	sar    eax,0x3
c000bce3:	89 c2                	mov    edx,eax
c000bce5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bce9:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000bced:	01 d0                	add    eax,edx
c000bcef:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcf3:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000bcf7:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bcfc:	89 c2                	mov    edx,eax
c000bcfe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd02:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000bd05:	89 d7                	mov    edi,edx
c000bd07:	29 c7                	sub    edi,eax
c000bd09:	89 f8                	mov    eax,edi
c000bd0b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd0f:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000bd13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd17:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000bd1b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd1f:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bd22:	01 d0                	add    eax,edx
c000bd24:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bd28:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000bd2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd30:	c6 40 54 00          	mov    BYTE PTR [eax+0x54],0x0
c000bd34:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000bd3a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd3e:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000bd41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd45:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd48:	83 f8 03             	cmp    eax,0x3
c000bd4b:	0f 86 db 01 00 00    	jbe    c000bf2c <tcp_receive+0x4c8>
c000bd51:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd55:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd59:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd5d:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c000bd60:	0f b7 d2             	movzx  edx,dx
c000bd63:	0f b7 c0             	movzx  eax,ax
c000bd66:	39 c2                	cmp    edx,eax
c000bd68:	73 4a                	jae    c000bdb4 <tcp_receive+0x350>
c000bd6a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd6e:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd76:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bd79:	01 d0                	add    eax,edx
c000bd7b:	89 c2                	mov    edx,eax
c000bd7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd81:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bd85:	0f b7 d2             	movzx  edx,dx
c000bd88:	0f b7 c0             	movzx  eax,ax
c000bd8b:	39 c2                	cmp    edx,eax
c000bd8d:	0f 86 99 01 00 00    	jbe    c000bf2c <tcp_receive+0x4c8>
c000bd93:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd97:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c000bd9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bd9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bda2:	01 d0                	add    eax,edx
c000bda4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bda8:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000bdac:	e9 7b 01 00 00       	jmp    c000bf2c <tcp_receive+0x4c8>
c000bdb1:	8d 76 00             	lea    esi,[esi+0x0]
c000bdb4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdb8:	66 8b 48 56          	mov    cx,WORD PTR [eax+0x56]
c000bdbc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdc3:	0f b7 d0             	movzx  edx,ax
c000bdc6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bdcd:	0f b7 c0             	movzx  eax,ax
c000bdd0:	0f af d0             	imul   edx,eax
c000bdd3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdd7:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bddb:	0f b7 d8             	movzx  ebx,ax
c000bdde:	89 d0                	mov    eax,edx
c000bde0:	89 c2                	mov    edx,eax
c000bde2:	c1 fa 1f             	sar    edx,0x1f
c000bde5:	f7 fb                	idiv   ebx
c000bde7:	01 c8                	add    eax,ecx
c000bde9:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000bdee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bdf2:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000bdf6:	0f b7 54 24 12       	movzx  edx,WORD PTR [esp+0x12]
c000bdfb:	0f b7 c0             	movzx  eax,ax
c000bdfe:	39 c2                	cmp    edx,eax
c000be00:	0f 86 26 01 00 00    	jbe    c000bf2c <tcp_receive+0x4c8>
c000be06:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be0a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000be0f:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000be13:	e9 14 01 00 00       	jmp    c000bf2c <tcp_receive+0x4c8>
c000be18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be1c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000be1f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be23:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be27:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000be2a:	8b 10                	mov    edx,DWORD PTR [eax]
c000be2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be30:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000be33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be37:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000be3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000be41:	83 ec 0c             	sub    esp,0xc
c000be44:	50                   	push   eax
c000be45:	e8 2a cc ff ff       	call   c0008a74 <pbuf_clen>
c000be4a:	83 c4 10             	add    esp,0x10
c000be4d:	0f b6 c0             	movzx  eax,al
c000be50:	0f b7 d3             	movzx  edx,bx
c000be53:	0f b7 c0             	movzx  eax,ax
c000be56:	39 c2                	cmp    edx,eax
c000be58:	73 16                	jae    c000be70 <tcp_receive+0x40c>
c000be5a:	83 ec 08             	sub    esp,0x8
c000be5d:	68 ac 02 03 c0       	push   0xc00302ac
c000be62:	68 66 f9 02 c0       	push   0xc002f966
c000be67:	e8 68 3c 01 00       	call   c001fad4 <CPrintf>
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	90                   	nop
c000be70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000be74:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000be77:	0f b7 c0             	movzx  eax,ax
c000be7a:	85 c0                	test   eax,eax
c000be7c:	74 36                	je     c000beb4 <tcp_receive+0x450>
c000be7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000be82:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000be85:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000be89:	0f b7 c0             	movzx  eax,ax
c000be8c:	83 ec 0c             	sub    esp,0xc
c000be8f:	50                   	push   eax
c000be90:	e8 53 4d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000be95:	83 c4 10             	add    esp,0x10
c000be98:	0f b7 c0             	movzx  eax,ax
c000be9b:	83 e0 01             	and    eax,0x1
c000be9e:	74 14                	je     c000beb4 <tcp_receive+0x450>
c000bea0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bea4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000bea7:	83 e8 01             	sub    eax,0x1
c000beaa:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000beae:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000beb2:	66 90                	xchg   ax,ax
c000beb4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000beb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bebb:	83 ec 0c             	sub    esp,0xc
c000bebe:	50                   	push   eax
c000bebf:	e8 b0 cb ff ff       	call   c0008a74 <pbuf_clen>
c000bec4:	83 c4 10             	add    esp,0x10
c000bec7:	88 c1                	mov    cl,al
c000bec9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000becd:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000bed0:	0f b6 c1             	movzx  eax,cl
c000bed3:	89 d7                	mov    edi,edx
c000bed5:	29 c7                	sub    edi,eax
c000bed7:	89 f8                	mov    eax,edi
c000bed9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bedd:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000bee1:	83 ec 0c             	sub    esp,0xc
c000bee4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000bee8:	e8 2b e0 ff ff       	call   c0009f18 <tcp_seg_free>
c000beed:	83 c4 10             	add    esp,0x10
c000bef0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bef4:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000bef7:	0f b7 c0             	movzx  eax,ax
c000befa:	85 c0                	test   eax,eax
c000befc:	74 2e                	je     c000bf2c <tcp_receive+0x4c8>
c000befe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf02:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf05:	85 c0                	test   eax,eax
c000bf07:	75 23                	jne    c000bf2c <tcp_receive+0x4c8>
c000bf09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf0d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bf10:	85 c0                	test   eax,eax
c000bf12:	75 18                	jne    c000bf2c <tcp_receive+0x4c8>
c000bf14:	83 ec 08             	sub    esp,0x8
c000bf17:	68 d4 02 03 c0       	push   0xc00302d4
c000bf1c:	68 66 f9 02 c0       	push   0xc002f966
c000bf21:	e8 ae 3b 01 00       	call   c001fad4 <CPrintf>
c000bf26:	83 c4 10             	add    esp,0x10
c000bf29:	8d 76 00             	lea    esi,[esi+0x0]
c000bf2c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf30:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf33:	85 c0                	test   eax,eax
c000bf35:	74 69                	je     c000bfa0 <tcp_receive+0x53c>
c000bf37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf3b:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf3e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf44:	83 ec 0c             	sub    esp,0xc
c000bf47:	50                   	push   eax
c000bf48:	e8 bf 4c ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000bf4d:	83 c4 10             	add    esp,0x10
c000bf50:	89 c3                	mov    ebx,eax
c000bf52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf56:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000bf5c:	0f b7 f0             	movzx  esi,ax
c000bf5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bf63:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bf66:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf69:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000bf6d:	0f b7 c0             	movzx  eax,ax
c000bf70:	83 ec 0c             	sub    esp,0xc
c000bf73:	50                   	push   eax
c000bf74:	e8 6f 4c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000bf79:	83 c4 10             	add    esp,0x10
c000bf7c:	0f b7 c0             	movzx  eax,ax
c000bf7f:	83 e0 03             	and    eax,0x3
c000bf82:	0f 95 c0             	setne  al
c000bf85:	0f b6 c0             	movzx  eax,al
c000bf88:	01 f0                	add    eax,esi
c000bf8a:	8d 14 03             	lea    edx,[ebx+eax*1]
c000bf8d:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000bf92:	29 c2                	sub    edx,eax
c000bf94:	89 d0                	mov    eax,edx
c000bf96:	85 c0                	test   eax,eax
c000bf98:	0f 8e 7a fe ff ff    	jle    c000be18 <tcp_receive+0x3b4>
c000bf9e:	66 90                	xchg   ax,ax
c000bfa0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfa4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000bfa7:	85 c0                	test   eax,eax
c000bfa9:	75 0d                	jne    c000bfb8 <tcp_receive+0x554>
c000bfab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfaf:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000bfb5:	eb 0d                	jmp    c000bfc4 <tcp_receive+0x560>
c000bfb7:	90                   	nop
c000bfb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfbc:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000bfc2:	66 90                	xchg   ax,ax
c000bfc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfc8:	c6 40 38 00          	mov    BYTE PTR [eax+0x38],0x0
c000bfcc:	eb 0e                	jmp    c000bfdc <tcp_receive+0x578>
c000bfce:	66 90                	xchg   ax,ax
c000bfd0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfd4:	66 c7 40 70 00 00    	mov    WORD PTR [eax+0x70],0x0
c000bfda:	66 90                	xchg   ax,ax
c000bfdc:	e9 17 01 00 00       	jmp    c000c0f8 <tcp_receive+0x694>
c000bfe1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfe4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfe8:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bfeb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bfef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bff3:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000bff6:	8b 10                	mov    edx,DWORD PTR [eax]
c000bff8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bffc:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000bfff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c003:	8b 58 74             	mov    ebx,DWORD PTR [eax+0x74]
c000c006:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c00a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c00d:	83 ec 0c             	sub    esp,0xc
c000c010:	50                   	push   eax
c000c011:	e8 5e ca ff ff       	call   c0008a74 <pbuf_clen>
c000c016:	83 c4 10             	add    esp,0x10
c000c019:	0f b6 c0             	movzx  eax,al
c000c01c:	0f b7 d3             	movzx  edx,bx
c000c01f:	0f b7 c0             	movzx  eax,ax
c000c022:	39 c2                	cmp    edx,eax
c000c024:	73 16                	jae    c000c03c <tcp_receive+0x5d8>
c000c026:	83 ec 08             	sub    esp,0x8
c000c029:	68 ac 02 03 c0       	push   0xc00302ac
c000c02e:	68 66 f9 02 c0       	push   0xc002f966
c000c033:	e8 9c 3a 01 00       	call   c001fad4 <CPrintf>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	90                   	nop
c000c03c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c040:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c043:	0f b7 c0             	movzx  eax,ax
c000c046:	85 c0                	test   eax,eax
c000c048:	74 36                	je     c000c080 <tcp_receive+0x61c>
c000c04a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c04e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c051:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c055:	0f b7 c0             	movzx  eax,ax
c000c058:	83 ec 0c             	sub    esp,0xc
c000c05b:	50                   	push   eax
c000c05c:	e8 87 4b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c061:	83 c4 10             	add    esp,0x10
c000c064:	0f b7 c0             	movzx  eax,ax
c000c067:	83 e0 01             	and    eax,0x1
c000c06a:	74 14                	je     c000c080 <tcp_receive+0x61c>
c000c06c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c070:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000c073:	83 e8 01             	sub    eax,0x1
c000c076:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c07a:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000c07e:	66 90                	xchg   ax,ax
c000c080:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c084:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c087:	83 ec 0c             	sub    esp,0xc
c000c08a:	50                   	push   eax
c000c08b:	e8 e4 c9 ff ff       	call   c0008a74 <pbuf_clen>
c000c090:	83 c4 10             	add    esp,0x10
c000c093:	88 c1                	mov    cl,al
c000c095:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c099:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000c09c:	0f b6 c1             	movzx  eax,cl
c000c09f:	89 d6                	mov    esi,edx
c000c0a1:	29 c6                	sub    esi,eax
c000c0a3:	89 f0                	mov    eax,esi
c000c0a5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c0a9:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000c0ad:	83 ec 0c             	sub    esp,0xc
c000c0b0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c0b4:	e8 5f de ff ff       	call   c0009f18 <tcp_seg_free>
c000c0b9:	83 c4 10             	add    esp,0x10
c000c0bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0c0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000c0c3:	0f b7 c0             	movzx  eax,ax
c000c0c6:	85 c0                	test   eax,eax
c000c0c8:	74 2e                	je     c000c0f8 <tcp_receive+0x694>
c000c0ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0ce:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000c0d1:	85 c0                	test   eax,eax
c000c0d3:	75 23                	jne    c000c0f8 <tcp_receive+0x694>
c000c0d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0d9:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0dc:	85 c0                	test   eax,eax
c000c0de:	75 18                	jne    c000c0f8 <tcp_receive+0x694>
c000c0e0:	83 ec 08             	sub    esp,0x8
c000c0e3:	68 d4 02 03 c0       	push   0xc00302d4
c000c0e8:	68 66 f9 02 c0       	push   0xc002f966
c000c0ed:	e8 e2 39 01 00       	call   c001fad4 <CPrintf>
c000c0f2:	83 c4 10             	add    esp,0x10
c000c0f5:	8d 76 00             	lea    esi,[esi+0x0]
c000c0f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c0fc:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c0ff:	85 c0                	test   eax,eax
c000c101:	74 7d                	je     c000c180 <tcp_receive+0x71c>
c000c103:	8b 1d b0 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8b0
c000c109:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c10d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c110:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c113:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c116:	83 ec 0c             	sub    esp,0xc
c000c119:	50                   	push   eax
c000c11a:	e8 ed 4a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000c11f:	83 c4 10             	add    esp,0x10
c000c122:	89 c6                	mov    esi,eax
c000c124:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c128:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c12b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c12e:	0f b7 f8             	movzx  edi,ax
c000c131:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c135:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000c138:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c13b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c13f:	0f b7 c0             	movzx  eax,ax
c000c142:	83 ec 0c             	sub    esp,0xc
c000c145:	50                   	push   eax
c000c146:	e8 9d 4a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c14b:	83 c4 10             	add    esp,0x10
c000c14e:	0f b7 c0             	movzx  eax,ax
c000c151:	83 e0 03             	and    eax,0x3
c000c154:	0f 95 c0             	setne  al
c000c157:	0f b6 c0             	movzx  eax,al
c000c15a:	01 f8                	add    eax,edi
c000c15c:	01 f0                	add    eax,esi
c000c15e:	29 c3                	sub    ebx,eax
c000c160:	89 d8                	mov    eax,ebx
c000c162:	78 1c                	js     c000c180 <tcp_receive+0x71c>
c000c164:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000c16a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c16e:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000c171:	29 c2                	sub    edx,eax
c000c173:	89 d0                	mov    eax,edx
c000c175:	85 c0                	test   eax,eax
c000c177:	0f 8e 67 fe ff ff    	jle    c000bfe4 <tcp_receive+0x580>
c000c17d:	8d 76 00             	lea    esi,[esi+0x0]
c000c180:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c184:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c187:	85 c0                	test   eax,eax
c000c189:	0f 84 d9 00 00 00    	je     c000c268 <tcp_receive+0x804>
c000c18f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c193:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
c000c196:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000c19b:	29 c2                	sub    edx,eax
c000c19d:	89 d0                	mov    eax,edx
c000c19f:	0f 89 c3 00 00 00    	jns    c000c268 <tcp_receive+0x804>
c000c1a5:	a1 74 68 03 c0       	mov    eax,ds:0xc0036874
c000c1aa:	89 c2                	mov    edx,eax
c000c1ac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000c1b3:	89 d7                	mov    edi,edx
c000c1b5:	29 c7                	sub    edi,eax
c000c1b7:	89 f8                	mov    eax,edi
c000c1b9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c1be:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c1c3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1c7:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c1ca:	98                   	cwde   
c000c1cb:	c1 f8 03             	sar    eax,0x3
c000c1ce:	89 d6                	mov    esi,edx
c000c1d0:	29 c6                	sub    esi,eax
c000c1d2:	89 f0                	mov    eax,esi
c000c1d4:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c1d9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c1dd:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c1e0:	89 c2                	mov    edx,eax
c000c1e2:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c1e7:	01 d0                	add    eax,edx
c000c1e9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c1ed:	66 89 42 48          	mov    WORD PTR [edx+0x48],ax
c000c1f1:	0f bf 44 24 1e       	movsx  eax,WORD PTR [esp+0x1e]
c000c1f6:	85 c0                	test   eax,eax
c000c1f8:	79 0e                	jns    c000c208 <tcp_receive+0x7a4>
c000c1fa:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c1ff:	f7 d8                	neg    eax
c000c201:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c206:	66 90                	xchg   ax,ax
c000c208:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000c20d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c211:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c215:	98                   	cwde   
c000c216:	c1 f8 02             	sar    eax,0x2
c000c219:	89 d7                	mov    edi,edx
c000c21b:	29 c7                	sub    edi,eax
c000c21d:	89 f8                	mov    eax,edi
c000c21f:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000c224:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c228:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c22c:	89 c2                	mov    edx,eax
c000c22e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000c233:	01 d0                	add    eax,edx
c000c235:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c239:	66 89 42 4a          	mov    WORD PTR [edx+0x4a],ax
c000c23d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c241:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
c000c244:	98                   	cwde   
c000c245:	c1 f8 03             	sar    eax,0x3
c000c248:	89 c2                	mov    edx,eax
c000c24a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c24e:	66 8b 40 4a          	mov    ax,WORD PTR [eax+0x4a]
c000c252:	01 d0                	add    eax,edx
c000c254:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c258:	66 89 42 4c          	mov    WORD PTR [edx+0x4c],ax
c000c25c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c260:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c000c267:	90                   	nop
c000c268:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c26e:	0f b7 c0             	movzx  eax,ax
c000c271:	85 c0                	test   eax,eax
c000c273:	0f 84 2f 0e 00 00    	je     c000d0a8 <tcp_receive+0x1644>
c000c279:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c27d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c280:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c285:	29 c2                	sub    edx,eax
c000c287:	89 d0                	mov    eax,edx
c000c289:	83 e8 01             	sub    eax,0x1
c000c28c:	0f 88 c6 01 00 00    	js     c000c458 <tcp_receive+0x9f4>
c000c292:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c296:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c299:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c29f:	0f b7 c8             	movzx  ecx,ax
c000c2a2:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c2a7:	01 c8                	add    eax,ecx
c000c2a9:	29 c2                	sub    edx,eax
c000c2ab:	89 d0                	mov    eax,edx
c000c2ad:	83 c0 01             	add    eax,0x1
c000c2b0:	85 c0                	test   eax,eax
c000c2b2:	0f 8f a0 01 00 00    	jg     c000c458 <tcp_receive+0x9f4>
c000c2b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c2bc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c2bf:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c2c4:	29 c2                	sub    edx,eax
c000c2c6:	89 d0                	mov    eax,edx
c000c2c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c2cc:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c2d1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c2d5:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c2da:	85 c0                	test   eax,eax
c000c2dc:	75 16                	jne    c000c2f4 <tcp_receive+0x890>
c000c2de:	83 ec 08             	sub    esp,0x8
c000c2e1:	68 d1 04 03 c0       	push   0xc00304d1
c000c2e6:	68 66 f9 02 c0       	push   0xc002f966
c000c2eb:	e8 e4 37 01 00       	call   c001fad4 <CPrintf>
c000c2f0:	83 c4 10             	add    esp,0x10
c000c2f3:	90                   	nop
c000c2f4:	81 7c 24 20 fe 7f 00 00 	cmp    DWORD PTR [esp+0x20],0x7ffe
c000c2fc:	7e 16                	jle    c000c314 <tcp_receive+0x8b0>
c000c2fe:	83 ec 08             	sub    esp,0x8
c000c301:	68 e1 04 03 c0       	push   0xc00304e1
c000c306:	68 66 f9 02 c0       	push   0xc002f966
c000c30b:	e8 c4 37 01 00       	call   c001fad4 <CPrintf>
c000c310:	83 c4 10             	add    esp,0x10
c000c313:	90                   	nop
c000c314:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c319:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c31d:	0f b7 c0             	movzx  eax,ax
c000c320:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c324:	0f 8e b6 00 00 00    	jle    c000c3e0 <tcp_receive+0x97c>
c000c32a:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c32f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c332:	0f b7 c0             	movzx  eax,ax
c000c335:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c339:	7e 15                	jle    c000c350 <tcp_receive+0x8ec>
c000c33b:	83 ec 08             	sub    esp,0x8
c000c33e:	68 f0 04 03 c0       	push   0xc00304f0
c000c343:	68 66 f9 02 c0       	push   0xc002f966
c000c348:	e8 87 37 01 00       	call   c001fad4 <CPrintf>
c000c34d:	83 c4 10             	add    esp,0x10
c000c350:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c355:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c358:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c35c:	29 d0                	sub    eax,edx
c000c35e:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c000c363:	eb 33                	jmp    c000c398 <tcp_receive+0x934>
c000c365:	8d 76 00             	lea    esi,[esi+0x0]
c000c368:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c36c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c370:	0f b7 c0             	movzx  eax,ax
c000c373:	29 44 24 20          	sub    DWORD PTR [esp+0x20],eax
c000c377:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c37f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000c383:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c387:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c000c38d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c391:	8b 00                	mov    eax,DWORD PTR [eax]
c000c393:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c397:	90                   	nop
c000c398:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c39c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000c3a0:	0f b7 c0             	movzx  eax,ax
c000c3a3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000c3a7:	7f bf                	jg     c000c368 <tcp_receive+0x904>
c000c3a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3ad:	f7 d8                	neg    eax
c000c3af:	98                   	cwde   
c000c3b0:	83 ec 08             	sub    esp,0x8
c000c3b3:	50                   	push   eax
c000c3b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c3b8:	e8 47 bd ff ff       	call   c0008104 <pbuf_header>
c000c3bd:	83 c4 10             	add    esp,0x10
c000c3c0:	0f b6 c0             	movzx  eax,al
c000c3c3:	85 c0                	test   eax,eax
c000c3c5:	74 51                	je     c000c418 <tcp_receive+0x9b4>
c000c3c7:	83 ec 08             	sub    esp,0x8
c000c3ca:	68 00 05 03 c0       	push   0xc0030500
c000c3cf:	68 66 f9 02 c0       	push   0xc002f966
c000c3d4:	e8 fb 36 01 00       	call   c001fad4 <CPrintf>
c000c3d9:	83 c4 10             	add    esp,0x10
c000c3dc:	eb 3a                	jmp    c000c418 <tcp_receive+0x9b4>
c000c3de:	66 90                	xchg   ax,ax
c000c3e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3e4:	f7 d8                	neg    eax
c000c3e6:	0f bf d0             	movsx  edx,ax
c000c3e9:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c3ee:	83 ec 08             	sub    esp,0x8
c000c3f1:	52                   	push   edx
c000c3f2:	50                   	push   eax
c000c3f3:	e8 0c bd ff ff       	call   c0008104 <pbuf_header>
c000c3f8:	83 c4 10             	add    esp,0x10
c000c3fb:	0f b6 c0             	movzx  eax,al
c000c3fe:	85 c0                	test   eax,eax
c000c400:	74 16                	je     c000c418 <tcp_receive+0x9b4>
c000c402:	83 ec 08             	sub    esp,0x8
c000c405:	68 00 05 03 c0       	push   0xc0030500
c000c40a:	68 66 f9 02 c0       	push   0xc002f966
c000c40f:	e8 c0 36 01 00       	call   c001fad4 <CPrintf>
c000c414:	83 c4 10             	add    esp,0x10
c000c417:	90                   	nop
c000c418:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c41d:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c423:	89 d1                	mov    ecx,edx
c000c425:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c429:	8b 52 28             	mov    edx,DWORD PTR [edx+0x28]
c000c42c:	89 ce                	mov    esi,ecx
c000c42e:	29 d6                	sub    esi,edx
c000c430:	89 f2                	mov    edx,esi
c000c432:	01 d0                	add    eax,edx
c000c434:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c43a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c43e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c441:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c446:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c44b:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c451:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000c454:	eb 2a                	jmp    c000c480 <tcp_receive+0xa1c>
c000c456:	66 90                	xchg   ax,ax
c000c458:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c45e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c462:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c465:	29 c2                	sub    edx,eax
c000c467:	89 d0                	mov    eax,edx
c000c469:	79 15                	jns    c000c480 <tcp_receive+0xa1c>
c000c46b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c46f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000c472:	83 c8 02             	or     eax,0x2
c000c475:	88 c2                	mov    dl,al
c000c477:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c47b:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000c47e:	66 90                	xchg   ax,ax
c000c480:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c48a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000c48d:	29 c2                	sub    edx,eax
c000c48f:	89 d0                	mov    eax,edx
c000c491:	0f 88 fd 0b 00 00    	js     c000d094 <tcp_receive+0x1630>
c000c497:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000c49d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a1:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000c4a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4a8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c4ab:	0f b7 c0             	movzx  eax,ax
c000c4ae:	01 c8                	add    eax,ecx
c000c4b0:	29 c2                	sub    edx,eax
c000c4b2:	89 d0                	mov    eax,edx
c000c4b4:	83 c0 01             	add    eax,0x1
c000c4b7:	85 c0                	test   eax,eax
c000c4b9:	0f 8f d5 0b 00 00    	jg     c000d094 <tcp_receive+0x1630>
c000c4bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c4c3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c4c6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c4cb:	39 c2                	cmp    edx,eax
c000c4cd:	0f 85 1d 07 00 00    	jne    c000cbf0 <tcp_receive+0x118c>
c000c4d3:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c4d9:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c4de:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c4e2:	0f b7 c0             	movzx  eax,ax
c000c4e5:	83 ec 0c             	sub    esp,0xc
c000c4e8:	50                   	push   eax
c000c4e9:	e8 fa 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c4ee:	83 c4 10             	add    esp,0x10
c000c4f1:	0f b7 c0             	movzx  eax,ax
c000c4f4:	83 e0 03             	and    eax,0x3
c000c4f7:	0f 95 c0             	setne  al
c000c4fa:	0f b6 c0             	movzx  eax,al
c000c4fd:	01 d8                	add    eax,ebx
c000c4ff:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c505:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c509:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c50c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c512:	0f b7 d2             	movzx  edx,dx
c000c515:	0f b7 c0             	movzx  eax,ax
c000c518:	39 c2                	cmp    edx,eax
c000c51a:	0f 83 2c 01 00 00    	jae    c000c64c <tcp_receive+0xbe8>
c000c520:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c525:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c529:	0f b7 c0             	movzx  eax,ax
c000c52c:	83 ec 0c             	sub    esp,0xc
c000c52f:	50                   	push   eax
c000c530:	e8 b3 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c535:	83 c4 10             	add    esp,0x10
c000c538:	0f b7 c0             	movzx  eax,ax
c000c53b:	83 e0 01             	and    eax,0x1
c000c53e:	74 44                	je     c000c584 <tcp_receive+0xb20>
c000c540:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c545:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c549:	80 e4 c0             	and    ah,0xc0
c000c54c:	89 c3                	mov    ebx,eax
c000c54e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c553:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c557:	0f b7 c0             	movzx  eax,ax
c000c55a:	83 ec 0c             	sub    esp,0xc
c000c55d:	50                   	push   eax
c000c55e:	e8 85 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c563:	83 c4 10             	add    esp,0x10
c000c566:	0f b7 c0             	movzx  eax,ax
c000c569:	83 e0 3e             	and    eax,0x3e
c000c56c:	83 ec 0c             	sub    esp,0xc
c000c56f:	50                   	push   eax
c000c570:	e8 73 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	09 d8                	or     eax,ebx
c000c57a:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c580:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c584:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c588:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c58b:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c591:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c596:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c59a:	0f b7 c0             	movzx  eax,ax
c000c59d:	83 ec 0c             	sub    esp,0xc
c000c5a0:	50                   	push   eax
c000c5a1:	e8 42 46 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5a6:	83 c4 10             	add    esp,0x10
c000c5a9:	0f b7 c0             	movzx  eax,ax
c000c5ac:	83 e0 02             	and    eax,0x2
c000c5af:	74 0f                	je     c000c5c0 <tcp_receive+0xb5c>
c000c5b1:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c5b6:	83 e8 01             	sub    eax,0x1
c000c5b9:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c5bf:	90                   	nop
c000c5c0:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c5c5:	0f b7 d0             	movzx  edx,ax
c000c5c8:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c5cd:	83 ec 08             	sub    esp,0x8
c000c5d0:	52                   	push   edx
c000c5d1:	50                   	push   eax
c000c5d2:	e8 99 c2 ff ff       	call   c0008870 <pbuf_realloc>
c000c5d7:	83 c4 10             	add    esp,0x10
c000c5da:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c5e0:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c5e5:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c5e9:	0f b7 c0             	movzx  eax,ax
c000c5ec:	83 ec 0c             	sub    esp,0xc
c000c5ef:	50                   	push   eax
c000c5f0:	e8 f3 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c5f5:	83 c4 10             	add    esp,0x10
c000c5f8:	0f b7 c0             	movzx  eax,ax
c000c5fb:	83 e0 03             	and    eax,0x3
c000c5fe:	0f 95 c0             	setne  al
c000c601:	0f b6 c0             	movzx  eax,al
c000c604:	01 d8                	add    eax,ebx
c000c606:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c60c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c612:	0f b7 d0             	movzx  edx,ax
c000c615:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c61a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c61d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c621:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000c624:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c628:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000c62b:	0f b7 c0             	movzx  eax,ax
c000c62e:	01 d0                	add    eax,edx
c000c630:	39 c1                	cmp    ecx,eax
c000c632:	74 18                	je     c000c64c <tcp_receive+0xbe8>
c000c634:	83 ec 08             	sub    esp,0x8
c000c637:	68 f4 02 03 c0       	push   0xc00302f4
c000c63c:	68 66 f9 02 c0       	push   0xc002f966
c000c641:	e8 8e 34 01 00       	call   c001fad4 <CPrintf>
c000c646:	83 c4 10             	add    esp,0x10
c000c649:	8d 76 00             	lea    esi,[esi+0x0]
c000c64c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c650:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c656:	85 c0                	test   eax,eax
c000c658:	0f 84 7e 02 00 00    	je     c000c8dc <tcp_receive+0xe78>
c000c65e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c663:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c667:	0f b7 c0             	movzx  eax,ax
c000c66a:	83 ec 0c             	sub    esp,0xc
c000c66d:	50                   	push   eax
c000c66e:	e8 75 45 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c673:	83 c4 10             	add    esp,0x10
c000c676:	0f b7 c0             	movzx  eax,ax
c000c679:	83 e0 01             	and    eax,0x1
c000c67c:	74 4a                	je     c000c6c8 <tcp_receive+0xc64>
c000c67e:	eb 34                	jmp    c000c6b4 <tcp_receive+0xc50>
c000c680:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c684:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c68a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c68e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c692:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c698:	8b 10                	mov    edx,DWORD PTR [eax]
c000c69a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c69e:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c6a4:	83 ec 0c             	sub    esp,0xc
c000c6a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6ab:	e8 68 d8 ff ff       	call   c0009f18 <tcp_seg_free>
c000c6b0:	83 c4 10             	add    esp,0x10
c000c6b3:	90                   	nop
c000c6b4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6b8:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6be:	85 c0                	test   eax,eax
c000c6c0:	75 be                	jne    c000c680 <tcp_receive+0xc1c>
c000c6c2:	e9 15 02 00 00       	jmp    c000c8dc <tcp_receive+0xe78>
c000c6c7:	90                   	nop
c000c6c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c6cc:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c6d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c6d6:	e9 bd 00 00 00       	jmp    c000c798 <tcp_receive+0xd34>
c000c6db:	90                   	nop
c000c6dc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6e3:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c6e7:	0f b7 c0             	movzx  eax,ax
c000c6ea:	83 ec 0c             	sub    esp,0xc
c000c6ed:	50                   	push   eax
c000c6ee:	e8 f5 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c6f3:	83 c4 10             	add    esp,0x10
c000c6f6:	0f b7 c0             	movzx  eax,ax
c000c6f9:	83 e0 01             	and    eax,0x1
c000c6fc:	74 76                	je     c000c774 <tcp_receive+0xd10>
c000c6fe:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c703:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c707:	0f b7 c0             	movzx  eax,ax
c000c70a:	83 ec 0c             	sub    esp,0xc
c000c70d:	50                   	push   eax
c000c70e:	e8 d5 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c713:	83 c4 10             	add    esp,0x10
c000c716:	0f b7 c0             	movzx  eax,ax
c000c719:	83 e0 02             	and    eax,0x2
c000c71c:	75 56                	jne    c000c774 <tcp_receive+0xd10>
c000c71e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c723:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000c727:	83 ec 0c             	sub    esp,0xc
c000c72a:	6a 01                	push   0x1
c000c72c:	e8 b7 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c731:	83 c4 10             	add    esp,0x10
c000c734:	8b 15 cc a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8cc
c000c73a:	09 d8                	or     eax,ebx
c000c73c:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000c740:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c746:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c74b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c74f:	0f b7 c0             	movzx  eax,ax
c000c752:	83 ec 0c             	sub    esp,0xc
c000c755:	50                   	push   eax
c000c756:	e8 8d 44 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c75b:	83 c4 10             	add    esp,0x10
c000c75e:	0f b7 c0             	movzx  eax,ax
c000c761:	83 e0 03             	and    eax,0x3
c000c764:	0f 95 c0             	setne  al
c000c767:	0f b6 c0             	movzx  eax,al
c000c76a:	01 d8                	add    eax,ebx
c000c76c:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c772:	66 90                	xchg   ax,ax
c000c774:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c778:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c77c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c780:	8b 00                	mov    eax,DWORD PTR [eax]
c000c782:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c786:	83 ec 0c             	sub    esp,0xc
c000c789:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c78d:	e8 86 d7 ff ff       	call   c0009f18 <tcp_seg_free>
c000c792:	83 c4 10             	add    esp,0x10
c000c795:	8d 76 00             	lea    esi,[esi+0x0]
c000c798:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c79d:	74 31                	je     c000c7d0 <tcp_receive+0xd6c>
c000c79f:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c7a5:	0f b7 d0             	movzx  edx,ax
c000c7a8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c7ad:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000c7b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c7b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000c7ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c7c1:	0f b7 c0             	movzx  eax,ax
c000c7c4:	01 d0                	add    eax,edx
c000c7c6:	29 c1                	sub    ecx,eax
c000c7c8:	89 c8                	mov    eax,ecx
c000c7ca:	0f 89 0c ff ff ff    	jns    c000c6dc <tcp_receive+0xc78>
c000c7d0:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000c7d5:	0f 84 f1 00 00 00    	je     c000c8cc <tcp_receive+0xe68>
c000c7db:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c7e1:	0f b7 d0             	movzx  edx,ax
c000c7e4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c7e9:	01 c2                	add    edx,eax
c000c7eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c7ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c7f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c7f5:	29 c2                	sub    edx,eax
c000c7f7:	89 d0                	mov    eax,edx
c000c7f9:	85 c0                	test   eax,eax
c000c7fb:	0f 8e cb 00 00 00    	jle    c000c8cc <tcp_receive+0xe68>
c000c801:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c805:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c808:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c80b:	89 c2                	mov    edx,eax
c000c80d:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c812:	89 d7                	mov    edi,edx
c000c814:	29 c7                	sub    edi,eax
c000c816:	89 f8                	mov    eax,edi
c000c818:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c81e:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c823:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c827:	0f b7 c0             	movzx  eax,ax
c000c82a:	83 ec 0c             	sub    esp,0xc
c000c82d:	50                   	push   eax
c000c82e:	e8 b5 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c833:	83 c4 10             	add    esp,0x10
c000c836:	0f b7 c0             	movzx  eax,ax
c000c839:	83 e0 02             	and    eax,0x2
c000c83c:	74 0e                	je     c000c84c <tcp_receive+0xde8>
c000c83e:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c843:	83 e8 01             	sub    eax,0x1
c000c846:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000c84c:	a1 c8 a8 03 c0       	mov    eax,ds:0xc003a8c8
c000c851:	0f b7 d0             	movzx  edx,ax
c000c854:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c859:	83 ec 08             	sub    esp,0x8
c000c85c:	52                   	push   edx
c000c85d:	50                   	push   eax
c000c85e:	e8 0d c0 ff ff       	call   c0008870 <pbuf_realloc>
c000c863:	83 c4 10             	add    esp,0x10
c000c866:	8b 1d c8 a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8c8
c000c86c:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c871:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c875:	0f b7 c0             	movzx  eax,ax
c000c878:	83 ec 0c             	sub    esp,0xc
c000c87b:	50                   	push   eax
c000c87c:	e8 67 43 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	0f b7 c0             	movzx  eax,ax
c000c887:	83 e0 03             	and    eax,0x3
c000c88a:	0f 95 c0             	setne  al
c000c88d:	0f b6 c0             	movzx  eax,al
c000c890:	01 d8                	add    eax,ebx
c000c892:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000c898:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c89e:	0f b7 d0             	movzx  edx,ax
c000c8a1:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8a6:	01 c2                	add    edx,eax
c000c8a8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c8ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c8af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c8b2:	39 c2                	cmp    edx,eax
c000c8b4:	74 16                	je     c000c8cc <tcp_receive+0xe68>
c000c8b6:	83 ec 08             	sub    esp,0x8
c000c8b9:	68 2c 03 03 c0       	push   0xc003032c
c000c8be:	68 66 f9 02 c0       	push   0xc002f966
c000c8c3:	e8 0c 32 01 00       	call   c001fad4 <CPrintf>
c000c8c8:	83 c4 10             	add    esp,0x10
c000c8cb:	90                   	nop
c000c8cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8d0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8d4:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000c8da:	66 90                	xchg   ax,ax
c000c8dc:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c8e2:	0f b7 d0             	movzx  edx,ax
c000c8e5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000c8ea:	01 c2                	add    edx,eax
c000c8ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000c8f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c8f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c8fa:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c900:	0f b7 d2             	movzx  edx,dx
c000c903:	0f b7 c0             	movzx  eax,ax
c000c906:	39 c2                	cmp    edx,eax
c000c908:	73 16                	jae    c000c920 <tcp_receive+0xebc>
c000c90a:	83 ec 08             	sub    esp,0x8
c000c90d:	68 68 03 03 c0       	push   0xc0030368
c000c912:	68 66 f9 02 c0       	push   0xc002f966
c000c917:	e8 b8 31 01 00       	call   c001fad4 <CPrintf>
c000c91c:	83 c4 10             	add    esp,0x10
c000c91f:	90                   	nop
c000c920:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c924:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000c927:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000c92d:	89 d6                	mov    esi,edx
c000c92f:	29 c6                	sub    esi,eax
c000c931:	89 f0                	mov    eax,esi
c000c933:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c937:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000c93b:	83 ec 0c             	sub    esp,0xc
c000c93e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c942:	e8 7d d2 ff ff       	call   c0009bc4 <tcp_update_rcv_ann_wnd>
c000c947:	83 c4 10             	add    esp,0x10
c000c94a:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c94f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c952:	0f b7 c0             	movzx  eax,ax
c000c955:	85 c0                	test   eax,eax
c000c957:	74 17                	je     c000c970 <tcp_receive+0xf0c>
c000c959:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000c95e:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000c963:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000c96d:	8d 76 00             	lea    esi,[esi+0x0]
c000c970:	a1 cc a8 03 c0       	mov    eax,ds:0xc003a8cc
c000c975:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c979:	0f b7 c0             	movzx  eax,ax
c000c97c:	83 ec 0c             	sub    esp,0xc
c000c97f:	50                   	push   eax
c000c980:	e8 63 42 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c985:	83 c4 10             	add    esp,0x10
c000c988:	0f b7 c0             	movzx  eax,ax
c000c98b:	83 e0 01             	and    eax,0x1
c000c98e:	0f 84 d8 01 00 00    	je     c000cb6c <tcp_receive+0x1108>
c000c994:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000c999:	83 c8 20             	or     eax,0x20
c000c99c:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000c9a1:	e9 c6 01 00 00       	jmp    c000cb6c <tcp_receive+0x1108>
c000c9a6:	66 90                	xchg   ax,ax
c000c9a8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9ac:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c9b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9b6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c9ba:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000c9c0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9c3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c9c6:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000c9cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c9d2:	0f b7 d8             	movzx  ebx,ax
c000c9d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9d9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c9dc:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000c9e0:	0f b7 c0             	movzx  eax,ax
c000c9e3:	83 ec 0c             	sub    esp,0xc
c000c9e6:	50                   	push   eax
c000c9e7:	e8 fc 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000c9ec:	83 c4 10             	add    esp,0x10
c000c9ef:	0f b7 c0             	movzx  eax,ax
c000c9f2:	83 e0 03             	and    eax,0x3
c000c9f5:	0f 95 c0             	setne  al
c000c9f8:	0f b6 c0             	movzx  eax,al
c000c9fb:	8d 14 03             	lea    edx,[ebx+eax*1]
c000c9fe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca02:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000ca05:	01 c2                	add    edx,eax
c000ca07:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca0b:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000ca0e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca12:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ca15:	0f b7 d8             	movzx  ebx,ax
c000ca18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca1f:	0f b7 f0             	movzx  esi,ax
c000ca22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca26:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca29:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca2d:	0f b7 c0             	movzx  eax,ax
c000ca30:	83 ec 0c             	sub    esp,0xc
c000ca33:	50                   	push   eax
c000ca34:	e8 af 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca39:	83 c4 10             	add    esp,0x10
c000ca3c:	0f b7 c0             	movzx  eax,ax
c000ca3f:	83 e0 03             	and    eax,0x3
c000ca42:	0f 95 c0             	setne  al
c000ca45:	0f b6 c0             	movzx  eax,al
c000ca48:	01 f0                	add    eax,esi
c000ca4a:	39 c3                	cmp    ebx,eax
c000ca4c:	7d 16                	jge    c000ca64 <tcp_receive+0x1000>
c000ca4e:	83 ec 08             	sub    esp,0x8
c000ca51:	68 88 03 03 c0       	push   0xc0030388
c000ca56:	68 66 f9 02 c0       	push   0xc002f966
c000ca5b:	e8 74 30 01 00       	call   c001fad4 <CPrintf>
c000ca60:	83 c4 10             	add    esp,0x10
c000ca63:	90                   	nop
c000ca64:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca68:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ca6b:	0f b7 d8             	movzx  ebx,ax
c000ca6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca72:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ca75:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ca79:	0f b7 c0             	movzx  eax,ax
c000ca7c:	83 ec 0c             	sub    esp,0xc
c000ca7f:	50                   	push   eax
c000ca80:	e8 63 41 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ca85:	83 c4 10             	add    esp,0x10
c000ca88:	0f b7 c0             	movzx  eax,ax
c000ca8b:	83 e0 03             	and    eax,0x3
c000ca8e:	0f 95 c0             	setne  al
c000ca91:	0f b6 c0             	movzx  eax,al
c000ca94:	8d 14 03             	lea    edx,[ebx+eax*1]
c000ca97:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca9b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000ca9e:	29 d0                	sub    eax,edx
c000caa0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000caa4:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000caa8:	83 ec 0c             	sub    esp,0xc
c000caab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000caaf:	e8 10 d1 ff ff       	call   c0009bc4 <tcp_update_rcv_ann_wnd>
c000cab4:	83 c4 10             	add    esp,0x10
c000cab7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cabb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cabe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cac1:	0f b7 c0             	movzx  eax,ax
c000cac4:	85 c0                	test   eax,eax
c000cac6:	74 3c                	je     c000cb04 <tcp_receive+0x10a0>
c000cac8:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cacd:	85 c0                	test   eax,eax
c000cacf:	74 1b                	je     c000caec <tcp_receive+0x1088>
c000cad1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cad8:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000cadd:	83 ec 08             	sub    esp,0x8
c000cae0:	52                   	push   edx
c000cae1:	50                   	push   eax
c000cae2:	e8 f1 bf ff ff       	call   c0008ad8 <pbuf_cat>
c000cae7:	83 c4 10             	add    esp,0x10
c000caea:	eb 0c                	jmp    c000caf8 <tcp_receive+0x1094>
c000caec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caf0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000caf3:	a3 a4 a8 03 c0       	mov    ds:0xc003a8a4,eax
c000caf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cafc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cb03:	90                   	nop
c000cb04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb08:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb0b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cb0f:	0f b7 c0             	movzx  eax,ax
c000cb12:	83 ec 0c             	sub    esp,0xc
c000cb15:	50                   	push   eax
c000cb16:	e8 cd 40 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cb1b:	83 c4 10             	add    esp,0x10
c000cb1e:	0f b7 c0             	movzx  eax,ax
c000cb21:	83 e0 01             	and    eax,0x1
c000cb24:	74 26                	je     c000cb4c <tcp_receive+0x10e8>
c000cb26:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000cb2b:	83 c8 20             	or     eax,0x20
c000cb2e:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000cb33:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb37:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000cb3a:	83 f8 04             	cmp    eax,0x4
c000cb3d:	75 0d                	jne    c000cb4c <tcp_receive+0x10e8>
c000cb3f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb43:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000cb4a:	66 90                	xchg   ax,ax
c000cb4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb50:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb56:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cb5c:	83 ec 0c             	sub    esp,0xc
c000cb5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cb63:	e8 b0 d3 ff ff       	call   c0009f18 <tcp_seg_free>
c000cb68:	83 c4 10             	add    esp,0x10
c000cb6b:	90                   	nop
c000cb6c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb70:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cb76:	85 c0                	test   eax,eax
c000cb78:	74 22                	je     c000cb9c <tcp_receive+0x1138>
c000cb7a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb7e:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cb84:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cb87:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cb8a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb8e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cb91:	39 c2                	cmp    edx,eax
c000cb93:	0f 84 0f fe ff ff    	je     c000c9a8 <tcp_receive+0xf44>
c000cb99:	8d 76 00             	lea    esi,[esi+0x0]
c000cb9c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cba0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cba3:	0f b6 c0             	movzx  eax,al
c000cba6:	83 e0 01             	and    eax,0x1
c000cba9:	74 2d                	je     c000cbd8 <tcp_receive+0x1174>
c000cbab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbaf:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbb2:	83 e0 fe             	and    eax,0xfffffffe
c000cbb5:	88 c2                	mov    dl,al
c000cbb7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbbb:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cbbe:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbc2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbc5:	83 c8 02             	or     eax,0x2
c000cbc8:	88 c2                	mov    dl,al
c000cbca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbce:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cbd1:	e9 22 05 00 00       	jmp    c000d0f8 <tcp_receive+0x1694>
c000cbd6:	66 90                	xchg   ax,ax
c000cbd8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbdc:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000cbdf:	83 c8 01             	or     eax,0x1
c000cbe2:	88 c2                	mov    dl,al
c000cbe4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cbe8:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000cbeb:	e9 08 05 00 00       	jmp    c000d0f8 <tcp_receive+0x1694>
c000cbf0:	83 ec 0c             	sub    esp,0xc
c000cbf3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbf7:	e8 c4 2e 00 00       	call   c000fac0 <tcp_send_empty_ack>
c000cbfc:	83 c4 10             	add    esp,0x10
c000cbff:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc03:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc09:	85 c0                	test   eax,eax
c000cc0b:	75 23                	jne    c000cc30 <tcp_receive+0x11cc>
c000cc0d:	83 ec 0c             	sub    esp,0xc
c000cc10:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cc15:	e8 96 d3 ff ff       	call   c0009fb0 <tcp_seg_copy>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	89 c2                	mov    edx,eax
c000cc1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc23:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cc29:	e9 ca 04 00 00       	jmp    c000d0f8 <tcp_receive+0x1694>
c000cc2e:	66 90                	xchg   ax,ax
c000cc30:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000cc38:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cc3c:	8b 80 80 00 00 00    	mov    eax,DWORD PTR [eax+0x80]
c000cc42:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc46:	e9 21 04 00 00       	jmp    c000d06c <tcp_receive+0x1608>
c000cc4b:	90                   	nop
c000cc4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cc53:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cc56:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cc5b:	39 c2                	cmp    edx,eax
c000cc5d:	75 75                	jne    c000ccd4 <tcp_receive+0x1270>
c000cc5f:	8b 15 c8 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8c8
c000cc65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cc69:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cc6c:	0f b7 d2             	movzx  edx,dx
c000cc6f:	0f b7 c0             	movzx  eax,ax
c000cc72:	39 c2                	cmp    edx,eax
c000cc74:	0f 86 02 04 00 00    	jbe    c000d07c <tcp_receive+0x1618>
c000cc7a:	83 ec 0c             	sub    esp,0xc
c000cc7d:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cc82:	e8 29 d3 ff ff       	call   c0009fb0 <tcp_seg_copy>
c000cc87:	83 c4 10             	add    esp,0x10
c000cc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc8e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cc93:	0f 84 e7 03 00 00    	je     c000d080 <tcp_receive+0x161c>
c000cc99:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000cc9e:	74 0c                	je     c000ccac <tcp_receive+0x1248>
c000cca0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cca4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cca8:	89 10                	mov    DWORD PTR [eax],edx
c000ccaa:	eb 10                	jmp    c000ccbc <tcp_receive+0x1258>
c000ccac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ccb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccb4:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000ccba:	66 90                	xchg   ax,ax
c000ccbc:	83 ec 08             	sub    esp,0x8
c000ccbf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccc7:	e8 2c ec ff ff       	call   c000b8f8 <tcp_oos_insert_segment>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	e9 ac 03 00 00       	jmp    c000d080 <tcp_receive+0x161c>
c000ccd4:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ccd9:	75 61                	jne    c000cd3c <tcp_receive+0x12d8>
c000ccdb:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cce1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cce5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cce8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cceb:	29 c2                	sub    edx,eax
c000cced:	89 d0                	mov    eax,edx
c000ccef:	0f 89 27 01 00 00    	jns    c000ce1c <tcp_receive+0x13b8>
c000ccf5:	83 ec 0c             	sub    esp,0xc
c000ccf8:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ccfd:	e8 ae d2 ff ff       	call   c0009fb0 <tcp_seg_copy>
c000cd02:	83 c4 10             	add    esp,0x10
c000cd05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd09:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd0e:	0f 84 70 03 00 00    	je     c000d084 <tcp_receive+0x1620>
c000cd14:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cd18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd1c:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
c000cd22:	83 ec 08             	sub    esp,0x8
c000cd25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2d:	e8 c6 eb ff ff       	call   c000b8f8 <tcp_oos_insert_segment>
c000cd32:	83 c4 10             	add    esp,0x10
c000cd35:	e9 4a 03 00 00       	jmp    c000d084 <tcp_receive+0x1620>
c000cd3a:	66 90                	xchg   ax,ax
c000cd3c:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd46:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd49:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd4c:	29 c2                	sub    edx,eax
c000cd4e:	89 d0                	mov    eax,edx
c000cd50:	83 e8 01             	sub    eax,0x1
c000cd53:	0f 88 c3 00 00 00    	js     c000ce1c <tcp_receive+0x13b8>
c000cd59:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000cd5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cd63:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cd69:	29 c2                	sub    edx,eax
c000cd6b:	89 d0                	mov    eax,edx
c000cd6d:	83 c0 01             	add    eax,0x1
c000cd70:	85 c0                	test   eax,eax
c000cd72:	0f 8f a4 00 00 00    	jg     c000ce1c <tcp_receive+0x13b8>
c000cd78:	83 ec 0c             	sub    esp,0xc
c000cd7b:	68 c0 a8 03 c0       	push   0xc003a8c0
c000cd80:	e8 2b d2 ff ff       	call   c0009fb0 <tcp_seg_copy>
c000cd85:	83 c4 10             	add    esp,0x10
c000cd88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd8c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000cd91:	0f 84 f1 02 00 00    	je     c000d088 <tcp_receive+0x1624>
c000cd97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cd9b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cd9e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000cda1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cda5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cda8:	0f b7 c0             	movzx  eax,ax
c000cdab:	01 c2                	add    edx,eax
c000cdad:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cdb2:	29 c2                	sub    edx,eax
c000cdb4:	89 d0                	mov    eax,edx
c000cdb6:	85 c0                	test   eax,eax
c000cdb8:	7e 3e                	jle    c000cdf8 <tcp_receive+0x1394>
c000cdba:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cdbf:	89 c2                	mov    edx,eax
c000cdc1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdc5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cdc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdcb:	89 d7                	mov    edi,edx
c000cdcd:	29 c7                	sub    edi,eax
c000cdcf:	89 f8                	mov    eax,edi
c000cdd1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cdd5:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000cdd9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cddd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cde0:	0f b7 d0             	movzx  edx,ax
c000cde3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cde7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cdea:	83 ec 08             	sub    esp,0x8
c000cded:	52                   	push   edx
c000cdee:	50                   	push   eax
c000cdef:	e8 7c ba ff ff       	call   c0008870 <pbuf_realloc>
c000cdf4:	83 c4 10             	add    esp,0x10
c000cdf7:	90                   	nop
c000cdf8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cdfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce00:	89 10                	mov    DWORD PTR [eax],edx
c000ce02:	83 ec 08             	sub    esp,0x8
c000ce05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce0d:	e8 e6 ea ff ff       	call   c000b8f8 <tcp_oos_insert_segment>
c000ce12:	83 c4 10             	add    esp,0x10
c000ce15:	e9 6e 02 00 00       	jmp    c000d088 <tcp_receive+0x1624>
c000ce1a:	66 90                	xchg   ax,ax
c000ce1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce20:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce22:	85 c0                	test   eax,eax
c000ce24:	0f 85 2e 02 00 00    	jne    c000d058 <tcp_receive+0x15f4>
c000ce2a:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000ce30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ce3a:	29 c2                	sub    edx,eax
c000ce3c:	89 d0                	mov    eax,edx
c000ce3e:	85 c0                	test   eax,eax
c000ce40:	0f 8e 12 02 00 00    	jle    c000d058 <tcp_receive+0x15f4>
c000ce46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce4a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce4d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000ce51:	0f b7 c0             	movzx  eax,ax
c000ce54:	83 ec 0c             	sub    esp,0xc
c000ce57:	50                   	push   eax
c000ce58:	e8 8b 3d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	0f b7 c0             	movzx  eax,ax
c000ce63:	83 e0 01             	and    eax,0x1
c000ce66:	0f 85 20 02 00 00    	jne    c000d08c <tcp_receive+0x1628>
c000ce6c:	83 ec 0c             	sub    esp,0xc
c000ce6f:	68 c0 a8 03 c0       	push   0xc003a8c0
c000ce74:	e8 37 d1 ff ff       	call   c0009fb0 <tcp_seg_copy>
c000ce79:	83 c4 10             	add    esp,0x10
c000ce7c:	89 c2                	mov    edx,eax
c000ce7e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce82:	89 10                	mov    DWORD PTR [eax],edx
c000ce84:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce88:	8b 00                	mov    eax,DWORD PTR [eax]
c000ce8a:	85 c0                	test   eax,eax
c000ce8c:	0f 84 fe 01 00 00    	je     c000d090 <tcp_receive+0x162c>
c000ce92:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ce96:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ce99:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ce9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cea0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cea3:	0f b7 c0             	movzx  eax,ax
c000cea6:	01 c2                	add    edx,eax
c000cea8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cead:	29 c2                	sub    edx,eax
c000ceaf:	89 d0                	mov    eax,edx
c000ceb1:	85 c0                	test   eax,eax
c000ceb3:	7e 3f                	jle    c000cef4 <tcp_receive+0x1490>
c000ceb5:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000ceba:	89 c2                	mov    edx,eax
c000cebc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cec0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cec3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cec6:	89 d6                	mov    esi,edx
c000cec8:	29 c6                	sub    esi,eax
c000ceca:	89 f0                	mov    eax,esi
c000cecc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ced0:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ced4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ced8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cedb:	0f b7 d0             	movzx  edx,ax
c000cede:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cee2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cee5:	83 ec 08             	sub    esp,0x8
c000cee8:	52                   	push   edx
c000cee9:	50                   	push   eax
c000ceea:	e8 81 b9 ff ff       	call   c0008870 <pbuf_realloc>
c000ceef:	83 c4 10             	add    esp,0x10
c000cef2:	66 90                	xchg   ax,ax
c000cef4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000cefa:	0f b7 d0             	movzx  edx,ax
c000cefd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cf02:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000cf05:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf09:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000cf0c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf10:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cf13:	0f b7 c0             	movzx  eax,ax
c000cf16:	01 d0                	add    eax,edx
c000cf18:	39 c1                	cmp    ecx,eax
c000cf1a:	0f 86 70 01 00 00    	jbe    c000d090 <tcp_receive+0x162c>
c000cf20:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf24:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf26:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf29:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf2d:	0f b7 c0             	movzx  eax,ax
c000cf30:	83 ec 0c             	sub    esp,0xc
c000cf33:	50                   	push   eax
c000cf34:	e8 af 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf39:	83 c4 10             	add    esp,0x10
c000cf3c:	0f b7 c0             	movzx  eax,ax
c000cf3f:	83 e0 01             	and    eax,0x1
c000cf42:	74 50                	je     c000cf94 <tcp_receive+0x1530>
c000cf44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf48:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf4a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf4d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf51:	80 e4 c0             	and    ah,0xc0
c000cf54:	89 c3                	mov    ebx,eax
c000cf56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cf5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000cf5c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cf5f:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cf63:	0f b7 c0             	movzx  eax,ax
c000cf66:	83 ec 0c             	sub    esp,0xc
c000cf69:	50                   	push   eax
c000cf6a:	e8 79 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf6f:	83 c4 10             	add    esp,0x10
c000cf72:	0f b7 c0             	movzx  eax,ax
c000cf75:	83 e0 3e             	and    eax,0x3e
c000cf78:	83 ec 0c             	sub    esp,0xc
c000cf7b:	50                   	push   eax
c000cf7c:	e8 67 3c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000cf81:	83 c4 10             	add    esp,0x10
c000cf84:	09 d8                	or     eax,ebx
c000cf86:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000cf8a:	8b 12                	mov    edx,DWORD PTR [edx]
c000cf8c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000cf8f:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000cf93:	90                   	nop
c000cf94:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cf98:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000cf9b:	89 c2                	mov    edx,eax
c000cf9d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cfa1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000cfa4:	01 d0                	add    eax,edx
c000cfa6:	89 c3                	mov    ebx,eax
c000cfa8:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000cfad:	89 c1                	mov    ecx,eax
c000cfaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfb3:	8b 10                	mov    edx,DWORD PTR [eax]
c000cfb5:	89 d8                	mov    eax,ebx
c000cfb7:	29 c8                	sub    eax,ecx
c000cfb9:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000cfbd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfc1:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfc3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000cfc6:	0f b7 d0             	movzx  edx,ax
c000cfc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfcd:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfcf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000cfd2:	83 ec 08             	sub    esp,0x8
c000cfd5:	52                   	push   edx
c000cfd6:	50                   	push   eax
c000cfd7:	e8 94 b8 ff ff       	call   c0008870 <pbuf_realloc>
c000cfdc:	83 c4 10             	add    esp,0x10
c000cfdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfe3:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfe5:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
c000cfe8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cfec:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfee:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000cff1:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000cff5:	0f b7 c0             	movzx  eax,ax
c000cff8:	83 ec 0c             	sub    esp,0xc
c000cffb:	50                   	push   eax
c000cffc:	e8 e7 3b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d001:	83 c4 10             	add    esp,0x10
c000d004:	0f b7 c0             	movzx  eax,ax
c000d007:	83 e0 03             	and    eax,0x3
c000d00a:	0f 95 c0             	setne  al
c000d00d:	0f b6 c0             	movzx  eax,al
c000d010:	01 d8                	add    eax,ebx
c000d012:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000d018:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d01e:	0f b7 d0             	movzx  edx,ax
c000d021:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d026:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d029:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d02d:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d030:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d034:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d037:	0f b7 c0             	movzx  eax,ax
c000d03a:	01 d0                	add    eax,edx
c000d03c:	39 c1                	cmp    ecx,eax
c000d03e:	74 50                	je     c000d090 <tcp_receive+0x162c>
c000d040:	83 ec 08             	sub    esp,0x8
c000d043:	68 f4 02 03 c0       	push   0xc00302f4
c000d048:	68 66 f9 02 c0       	push   0xc002f966
c000d04d:	e8 82 2a 01 00       	call   c001fad4 <CPrintf>
c000d052:	83 c4 10             	add    esp,0x10
c000d055:	eb 39                	jmp    c000d090 <tcp_receive+0x162c>
c000d057:	90                   	nop
c000d058:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d05c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d060:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d064:	8b 00                	mov    eax,DWORD PTR [eax]
c000d066:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d06a:	66 90                	xchg   ax,ax
c000d06c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000d071:	0f 85 d5 fb ff ff    	jne    c000cc4c <tcp_receive+0x11e8>
c000d077:	eb 7f                	jmp    c000d0f8 <tcp_receive+0x1694>
c000d079:	8d 76 00             	lea    esi,[esi+0x0]
c000d07c:	90                   	nop
c000d07d:	eb 79                	jmp    c000d0f8 <tcp_receive+0x1694>
c000d07f:	90                   	nop
c000d080:	90                   	nop
c000d081:	eb 75                	jmp    c000d0f8 <tcp_receive+0x1694>
c000d083:	90                   	nop
c000d084:	90                   	nop
c000d085:	eb 71                	jmp    c000d0f8 <tcp_receive+0x1694>
c000d087:	90                   	nop
c000d088:	90                   	nop
c000d089:	eb 6d                	jmp    c000d0f8 <tcp_receive+0x1694>
c000d08b:	90                   	nop
c000d08c:	90                   	nop
c000d08d:	eb 69                	jmp    c000d0f8 <tcp_receive+0x1694>
c000d08f:	90                   	nop
c000d090:	90                   	nop
c000d091:	eb 65                	jmp    c000d0f8 <tcp_receive+0x1694>
c000d093:	90                   	nop
c000d094:	83 ec 0c             	sub    esp,0xc
c000d097:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d09b:	e8 20 2a 00 00       	call   c000fac0 <tcp_send_empty_ack>
c000d0a0:	83 c4 10             	add    esp,0x10
c000d0a3:	eb 53                	jmp    c000d0f8 <tcp_receive+0x1694>
c000d0a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d0a8:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d0ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0b2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d0b5:	29 c2                	sub    edx,eax
c000d0b7:	89 d0                	mov    eax,edx
c000d0b9:	78 25                	js     c000d0e0 <tcp_receive+0x167c>
c000d0bb:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d0c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0c5:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d0c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0cc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d0cf:	0f b7 c0             	movzx  eax,ax
c000d0d2:	01 c8                	add    eax,ecx
c000d0d4:	29 c2                	sub    edx,eax
c000d0d6:	89 d0                	mov    eax,edx
c000d0d8:	83 c0 01             	add    eax,0x1
c000d0db:	85 c0                	test   eax,eax
c000d0dd:	7e 19                	jle    c000d0f8 <tcp_receive+0x1694>
c000d0df:	90                   	nop
c000d0e0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0e4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d0e7:	83 c8 02             	or     eax,0x2
c000d0ea:	88 c2                	mov    dl,al
c000d0ec:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d0f0:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d0f3:	eb 03                	jmp    c000d0f8 <tcp_receive+0x1694>
c000d0f5:	8d 76 00             	lea    esi,[esi+0x0]
c000d0f8:	90                   	nop
c000d0f9:	83 c4 30             	add    esp,0x30
c000d0fc:	5b                   	pop    ebx
c000d0fd:	5e                   	pop    esi
c000d0fe:	5f                   	pop    edi
c000d0ff:	c3                   	ret    

c000d100 <tcp_parseopt>:
c000d100:	83 ec 1c             	sub    esp,0x1c
c000d103:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d108:	83 c0 14             	add    eax,0x14
c000d10b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d10f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d114:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d118:	0f b7 c0             	movzx  eax,ax
c000d11b:	83 ec 0c             	sub    esp,0xc
c000d11e:	50                   	push   eax
c000d11f:	e8 c4 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d124:	83 c4 10             	add    esp,0x10
c000d127:	0f b7 c0             	movzx  eax,ax
c000d12a:	c1 e8 0c             	shr    eax,0xc
c000d12d:	0f b7 c0             	movzx  eax,ax
c000d130:	83 f8 05             	cmp    eax,0x5
c000d133:	0f 86 6f 01 00 00    	jbe    c000d2a8 <tcp_parseopt+0x1a8>
c000d139:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d13e:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000d142:	0f b7 c0             	movzx  eax,ax
c000d145:	83 ec 0c             	sub    esp,0xc
c000d148:	50                   	push   eax
c000d149:	e8 9a 3a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000d14e:	83 c4 10             	add    esp,0x10
c000d151:	0f b7 c0             	movzx  eax,ax
c000d154:	c1 e8 0c             	shr    eax,0xc
c000d157:	83 e8 05             	sub    eax,0x5
c000d15a:	c1 e0 02             	shl    eax,0x2
c000d15d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d162:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c000d169:	e9 1e 01 00 00       	jmp    c000d28c <tcp_parseopt+0x18c>
c000d16e:	66 90                	xchg   ax,ax
c000d170:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d175:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d179:	01 d0                	add    eax,edx
c000d17b:	8a 00                	mov    al,BYTE PTR [eax]
c000d17d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000d181:	0f b6 44 24 05       	movzx  eax,BYTE PTR [esp+0x5]
c000d186:	83 f8 01             	cmp    eax,0x1
c000d189:	74 15                	je     c000d1a0 <tcp_parseopt+0xa0>
c000d18b:	83 f8 02             	cmp    eax,0x2
c000d18e:	74 24                	je     c000d1b4 <tcp_parseopt+0xb4>
c000d190:	85 c0                	test   eax,eax
c000d192:	0f 85 bc 00 00 00    	jne    c000d254 <tcp_parseopt+0x154>
c000d198:	e9 0b 01 00 00       	jmp    c000d2a8 <tcp_parseopt+0x1a8>
c000d19d:	8d 76 00             	lea    esi,[esi+0x0]
c000d1a0:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d1a5:	83 c0 01             	add    eax,0x1
c000d1a8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d1ad:	e9 da 00 00 00       	jmp    c000d28c <tcp_parseopt+0x18c>
c000d1b2:	66 90                	xchg   ax,ax
c000d1b4:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d1b9:	8d 50 01             	lea    edx,[eax+0x1]
c000d1bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1c0:	01 d0                	add    eax,edx
c000d1c2:	8a 00                	mov    al,BYTE PTR [eax]
c000d1c4:	0f b6 c0             	movzx  eax,al
c000d1c7:	83 f8 04             	cmp    eax,0x4
c000d1ca:	0f 85 d0 00 00 00    	jne    c000d2a0 <tcp_parseopt+0x1a0>
c000d1d0:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d1d5:	8d 50 03             	lea    edx,[eax+0x3]
c000d1d8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d1dd:	39 c2                	cmp    edx,eax
c000d1df:	0f 8d bb 00 00 00    	jge    c000d2a0 <tcp_parseopt+0x1a0>
c000d1e5:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d1ea:	8d 50 02             	lea    edx,[eax+0x2]
c000d1ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1f1:	01 d0                	add    eax,edx
c000d1f3:	8a 00                	mov    al,BYTE PTR [eax]
c000d1f5:	0f b6 c0             	movzx  eax,al
c000d1f8:	c1 e0 08             	shl    eax,0x8
c000d1fb:	89 c2                	mov    edx,eax
c000d1fd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d202:	8d 48 03             	lea    ecx,[eax+0x3]
c000d205:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d209:	01 c8                	add    eax,ecx
c000d20b:	8a 00                	mov    al,BYTE PTR [eax]
c000d20d:	0f b6 c0             	movzx  eax,al
c000d210:	09 d0                	or     eax,edx
c000d212:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c000d217:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d21c:	3d 18 02 00 00       	cmp    eax,0x218
c000d221:	77 11                	ja     c000d234 <tcp_parseopt+0x134>
c000d223:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c000d228:	85 c0                	test   eax,eax
c000d22a:	74 08                	je     c000d234 <tcp_parseopt+0x134>
c000d22c:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c000d231:	eb 09                	jmp    c000d23c <tcp_parseopt+0x13c>
c000d233:	90                   	nop
c000d234:	b8 18 02 00 00       	mov    eax,0x218
c000d239:	8d 76 00             	lea    esi,[esi+0x0]
c000d23c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d240:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d244:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c000d249:	83 c0 04             	add    eax,0x4
c000d24c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d251:	eb 39                	jmp    c000d28c <tcp_parseopt+0x18c>
c000d253:	90                   	nop
c000d254:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d259:	8d 50 01             	lea    edx,[eax+0x1]
c000d25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d260:	01 d0                	add    eax,edx
c000d262:	8a 00                	mov    al,BYTE PTR [eax]
c000d264:	0f b6 c0             	movzx  eax,al
c000d267:	85 c0                	test   eax,eax
c000d269:	74 39                	je     c000d2a4 <tcp_parseopt+0x1a4>
c000d26b:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c000d270:	8d 50 01             	lea    edx,[eax+0x1]
c000d273:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d277:	01 d0                	add    eax,edx
c000d279:	8a 00                	mov    al,BYTE PTR [eax]
c000d27b:	0f b6 c0             	movzx  eax,al
c000d27e:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c000d283:	01 d0                	add    eax,edx
c000d285:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c000d28a:	66 90                	xchg   ax,ax
c000d28c:	0f b7 54 24 0e       	movzx  edx,WORD PTR [esp+0xe]
c000d291:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d296:	39 c2                	cmp    edx,eax
c000d298:	0f 82 d2 fe ff ff    	jb     c000d170 <tcp_parseopt+0x70>
c000d29e:	eb 08                	jmp    c000d2a8 <tcp_parseopt+0x1a8>
c000d2a0:	90                   	nop
c000d2a1:	eb 05                	jmp    c000d2a8 <tcp_parseopt+0x1a8>
c000d2a3:	90                   	nop
c000d2a4:	90                   	nop
c000d2a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d2a8:	83 c4 1c             	add    esp,0x1c
c000d2ab:	c3                   	ret    

c000d2ac <tcp_listen_input>:
c000d2ac:	53                   	push   ebx
c000d2ad:	83 ec 18             	sub    esp,0x18
c000d2b0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d2b5:	0f b6 c0             	movzx  eax,al
c000d2b8:	83 e0 10             	and    eax,0x10
c000d2bb:	74 4f                	je     c000d30c <tcp_listen_input+0x60>
c000d2bd:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d2c2:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d2c5:	0f b7 c8             	movzx  ecx,ax
c000d2c8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d2cd:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d2d1:	0f b7 d0             	movzx  edx,ax
c000d2d4:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d2da:	0f b7 d8             	movzx  ebx,ax
c000d2dd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d2e2:	01 c3                	add    ebx,eax
c000d2e4:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d2e9:	83 c0 01             	add    eax,0x1
c000d2ec:	83 ec 08             	sub    esp,0x8
c000d2ef:	51                   	push   ecx
c000d2f0:	52                   	push   edx
c000d2f1:	68 90 68 03 c0       	push   0xc0036890
c000d2f6:	68 98 68 03 c0       	push   0xc0036898
c000d2fb:	53                   	push   ebx
c000d2fc:	50                   	push   eax
c000d2fd:	e8 5a 2f 00 00       	call   c001025c <tcp_rst>
c000d302:	83 c4 20             	add    esp,0x20
c000d305:	e9 a2 01 00 00       	jmp    c000d4ac <tcp_listen_input+0x200>
c000d30a:	66 90                	xchg   ax,ax
c000d30c:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d311:	0f b6 c0             	movzx  eax,al
c000d314:	83 e0 02             	and    eax,0x2
c000d317:	0f 84 8f 01 00 00    	je     c000d4ac <tcp_listen_input+0x200>
c000d31d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d321:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000d324:	0f b6 c0             	movzx  eax,al
c000d327:	83 ec 0c             	sub    esp,0xc
c000d32a:	50                   	push   eax
c000d32b:	e8 14 e0 ff ff       	call   c000b344 <tcp_alloc>
c000d330:	83 c4 10             	add    esp,0x10
c000d333:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d337:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d33c:	75 16                	jne    c000d354 <tcp_listen_input+0xa8>
c000d33e:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000d344:	83 c0 01             	add    eax,0x1
c000d347:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000d34d:	b0 ff                	mov    al,0xff
c000d34f:	e9 5c 01 00 00       	jmp    c000d4b0 <tcp_listen_input+0x204>
c000d354:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c000d35a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d35e:	89 10                	mov    DWORD PTR [eax],edx
c000d360:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d364:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d367:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d36b:	66 89 42 20          	mov    WORD PTR [edx+0x20],ax
c000d36f:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c000d375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d379:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d37c:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d381:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d384:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d388:	66 89 42 22          	mov    WORD PTR [edx+0x22],ax
c000d38c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d390:	c7 40 10 03 00 00 00 	mov    DWORD PTR [eax+0x10],0x3
c000d397:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d39c:	8d 50 01             	lea    edx,[eax+0x1]
c000d39f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3a3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d3a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3aa:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d3ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3b1:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d3b4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d3b9:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d3bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3c1:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d3c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3c9:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c000d3cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d3d0:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d3d4:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d3d9:	8d 50 ff             	lea    edx,[eax-0x1]
c000d3dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3e0:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d3e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3e7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000d3ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3ee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000d3f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3f5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
c000d3f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d3fc:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000d3ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d403:	8a 40 08             	mov    al,BYTE PTR [eax+0x8]
c000d406:	83 e0 8c             	and    eax,0xffffff8c
c000d409:	88 c2                	mov    dl,al
c000d40b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d40f:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c000d412:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000d418:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d41c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d41f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d423:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000d428:	e8 33 36 00 00       	call   c0010a60 <tcp_timer_needed>
c000d42d:	83 ec 0c             	sub    esp,0xc
c000d430:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d434:	e8 c7 fc ff ff       	call   c000d100 <tcp_parseopt>
c000d439:	83 c4 10             	add    esp,0x10
c000d43c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d440:	8d 50 04             	lea    edx,[eax+0x4]
c000d443:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d447:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d44a:	0f b7 c0             	movzx  eax,ax
c000d44d:	83 ec 08             	sub    esp,0x8
c000d450:	52                   	push   edx
c000d451:	50                   	push   eax
c000d452:	e8 ad e0 ff ff       	call   c000b504 <tcp_eff_send_mss>
c000d457:	83 c4 10             	add    esp,0x10
c000d45a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d45e:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d462:	83 ec 08             	sub    esp,0x8
c000d465:	6a 12                	push   0x12
c000d467:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d46b:	e8 c4 22 00 00       	call   c000f734 <tcp_enqueue_flags>
c000d470:	83 c4 10             	add    esp,0x10
c000d473:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000d477:	0f be 44 24 0b       	movsx  eax,BYTE PTR [esp+0xb]
c000d47c:	85 c0                	test   eax,eax
c000d47e:	74 18                	je     c000d498 <tcp_listen_input+0x1ec>
c000d480:	83 ec 08             	sub    esp,0x8
c000d483:	6a 00                	push   0x0
c000d485:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d489:	e8 9e db ff ff       	call   c000b02c <tcp_abandon>
c000d48e:	83 c4 10             	add    esp,0x10
c000d491:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000d495:	eb 19                	jmp    c000d4b0 <tcp_listen_input+0x204>
c000d497:	90                   	nop
c000d498:	83 ec 0c             	sub    esp,0xc
c000d49b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d49f:	e8 2c 29 00 00       	call   c000fdd0 <tcp_output>
c000d4a4:	83 c4 10             	add    esp,0x10
c000d4a7:	eb 07                	jmp    c000d4b0 <tcp_listen_input+0x204>
c000d4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4ac:	b0 00                	mov    al,0x0
c000d4ae:	66 90                	xchg   ax,ax
c000d4b0:	83 c4 18             	add    esp,0x18
c000d4b3:	5b                   	pop    ebx
c000d4b4:	c3                   	ret    
c000d4b5:	8d 76 00             	lea    esi,[esi+0x0]

c000d4b8 <tcp_process>:
c000d4b8:	53                   	push   ebx
c000d4b9:	83 ec 18             	sub    esp,0x18
c000d4bc:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000d4c1:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d4c6:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d4cb:	0f b6 c0             	movzx  eax,al
c000d4ce:	83 e0 04             	and    eax,0x4
c000d4d1:	0f 84 bd 00 00 00    	je     c000d594 <tcp_process+0xdc>
c000d4d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d4de:	83 f8 02             	cmp    eax,0x2
c000d4e1:	75 19                	jne    c000d4fc <tcp_process+0x44>
c000d4e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e7:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000d4ea:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d4ef:	39 c2                	cmp    edx,eax
c000d4f1:	75 45                	jne    c000d538 <tcp_process+0x80>
c000d4f3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d4f8:	eb 3e                	jmp    c000d538 <tcp_process+0x80>
c000d4fa:	66 90                	xchg   ax,ax
c000d4fc:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d506:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d509:	29 c2                	sub    edx,eax
c000d50b:	89 d0                	mov    eax,edx
c000d50d:	78 29                	js     c000d538 <tcp_process+0x80>
c000d50f:	8b 15 b4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b4
c000d515:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d519:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000d51c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d520:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000d523:	0f b7 c0             	movzx  eax,ax
c000d526:	01 c8                	add    eax,ecx
c000d528:	29 c2                	sub    edx,eax
c000d52a:	89 d0                	mov    eax,edx
c000d52c:	85 c0                	test   eax,eax
c000d52e:	7f 08                	jg     c000d538 <tcp_process+0x80>
c000d530:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000d535:	8d 76 00             	lea    esi,[esi+0x0]
c000d538:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000d53d:	85 c0                	test   eax,eax
c000d53f:	74 4b                	je     c000d58c <tcp_process+0xd4>
c000d541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d545:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d548:	85 c0                	test   eax,eax
c000d54a:	75 18                	jne    c000d564 <tcp_process+0xac>
c000d54c:	83 ec 08             	sub    esp,0x8
c000d54f:	68 b0 03 03 c0       	push   0xc00303b0
c000d554:	68 66 f9 02 c0       	push   0xc002f966
c000d559:	e8 76 25 01 00       	call   c001fad4 <CPrintf>
c000d55e:	83 c4 10             	add    esp,0x10
c000d561:	8d 76 00             	lea    esi,[esi+0x0]
c000d564:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d569:	83 c8 08             	or     eax,0x8
c000d56c:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000d571:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d575:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d578:	83 e0 fe             	and    eax,0xfffffffe
c000d57b:	88 c2                	mov    dl,al
c000d57d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d581:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d584:	b0 f5                	mov    al,0xf5
c000d586:	e9 bd 08 00 00       	jmp    c000de48 <tcp_process+0x990>
c000d58b:	90                   	nop
c000d58c:	b0 00                	mov    al,0x0
c000d58e:	e9 b5 08 00 00       	jmp    c000de48 <tcp_process+0x990>
c000d593:	90                   	nop
c000d594:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d599:	0f b6 c0             	movzx  eax,al
c000d59c:	83 e0 02             	and    eax,0x2
c000d59f:	74 33                	je     c000d5d4 <tcp_process+0x11c>
c000d5a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d5a8:	83 f8 02             	cmp    eax,0x2
c000d5ab:	74 27                	je     c000d5d4 <tcp_process+0x11c>
c000d5ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d5b4:	83 f8 03             	cmp    eax,0x3
c000d5b7:	74 1b                	je     c000d5d4 <tcp_process+0x11c>
c000d5b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5bd:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d5c0:	83 c8 02             	or     eax,0x2
c000d5c3:	88 c2                	mov    dl,al
c000d5c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d5cc:	b0 00                	mov    al,0x0
c000d5ce:	e9 75 08 00 00       	jmp    c000de48 <tcp_process+0x990>
c000d5d3:	90                   	nop
c000d5d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d5db:	0f b6 c0             	movzx  eax,al
c000d5de:	83 e0 10             	and    eax,0x10
c000d5e1:	75 0d                	jne    c000d5f0 <tcp_process+0x138>
c000d5e3:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000d5e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ed:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000d5f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5f4:	c6 80 a5 00 00 00 00 	mov    BYTE PTR [eax+0xa5],0x0
c000d5fb:	83 ec 0c             	sub    esp,0xc
c000d5fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d602:	e8 f9 fa ff ff       	call   c000d100 <tcp_parseopt>
c000d607:	83 c4 10             	add    esp,0x10
c000d60a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d60e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000d611:	83 f8 09             	cmp    eax,0x9
c000d614:	0f 87 0a 08 00 00    	ja     c000de24 <tcp_process+0x96c>
c000d61a:	8b 04 85 58 05 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfaa8]
c000d621:	ff e0                	jmp    eax
c000d623:	90                   	nop
c000d624:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d629:	0f b6 c0             	movzx  eax,al
c000d62c:	83 e0 10             	and    eax,0x10
c000d62f:	0f 84 ff 01 00 00    	je     c000d834 <tcp_process+0x37c>
c000d635:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d63a:	0f b6 c0             	movzx  eax,al
c000d63d:	83 e0 02             	and    eax,0x2
c000d640:	0f 84 ee 01 00 00    	je     c000d834 <tcp_process+0x37c>
c000d646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d64a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d64d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000d650:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000d653:	83 ec 0c             	sub    esp,0xc
c000d656:	50                   	push   eax
c000d657:	e8 b0 35 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000d65c:	83 c4 10             	add    esp,0x10
c000d65f:	8d 50 01             	lea    edx,[eax+0x1]
c000d662:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d667:	39 c2                	cmp    edx,eax
c000d669:	0f 85 c5 01 00 00    	jne    c000d834 <tcp_process+0x37c>
c000d66f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d673:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000d677:	83 c0 01             	add    eax,0x1
c000d67a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d67e:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000d682:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d687:	8d 50 01             	lea    edx,[eax+0x1]
c000d68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d68e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d695:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000d698:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d69c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000d69f:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d6a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a9:	89 50 50             	mov    DWORD PTR [eax+0x50],edx
c000d6ac:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d6b1:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000d6b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d6b9:	66 89 42 60          	mov    WORD PTR [edx+0x60],ax
c000d6bd:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d6c2:	8d 50 ff             	lea    edx,[eax-0x1]
c000d6c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6c9:	89 50 64             	mov    DWORD PTR [eax+0x64],edx
c000d6cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6d0:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d6d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6db:	8d 50 04             	lea    edx,[eax+0x4]
c000d6de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d6e5:	0f b7 c0             	movzx  eax,ax
c000d6e8:	83 ec 08             	sub    esp,0x8
c000d6eb:	52                   	push   edx
c000d6ec:	50                   	push   eax
c000d6ed:	e8 12 de ff ff       	call   c000b504 <tcp_eff_send_mss>
c000d6f2:	83 c4 10             	add    esp,0x10
c000d6f5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d6f9:	66 89 42 3c          	mov    WORD PTR [edx+0x3c],ax
c000d6fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d701:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d704:	89 c2                	mov    edx,eax
c000d706:	c1 e2 02             	shl    edx,0x2
c000d709:	01 d0                	add    eax,edx
c000d70b:	d1 e0                	shl    eax,1
c000d70d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d711:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c000d715:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d719:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d71d:	0f b7 c0             	movzx  eax,ax
c000d720:	83 f8 01             	cmp    eax,0x1
c000d723:	75 0b                	jne    c000d730 <tcp_process+0x278>
c000d725:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d729:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d72c:	d1 e0                	shl    eax,1
c000d72e:	eb 08                	jmp    c000d738 <tcp_process+0x280>
c000d730:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d734:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d737:	90                   	nop
c000d738:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d73c:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d740:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d744:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d747:	0f b7 c0             	movzx  eax,ax
c000d74a:	85 c0                	test   eax,eax
c000d74c:	75 16                	jne    c000d764 <tcp_process+0x2ac>
c000d74e:	83 ec 08             	sub    esp,0x8
c000d751:	68 13 05 03 c0       	push   0xc0030513
c000d756:	68 66 f9 02 c0       	push   0xc002f966
c000d75b:	e8 74 23 01 00       	call   c001fad4 <CPrintf>
c000d760:	83 c4 10             	add    esp,0x10
c000d763:	90                   	nop
c000d764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d768:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000d76b:	83 e8 01             	sub    eax,0x1
c000d76e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d772:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000d776:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d77a:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d77d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d781:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d785:	8b 10                	mov    edx,DWORD PTR [eax]
c000d787:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d78b:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c000d78e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d792:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000d795:	85 c0                	test   eax,eax
c000d797:	75 0f                	jne    c000d7a8 <tcp_process+0x2f0>
c000d799:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d79d:	66 c7 40 3a ff ff    	mov    WORD PTR [eax+0x3a],0xffff
c000d7a3:	eb 17                	jmp    c000d7bc <tcp_process+0x304>
c000d7a5:	8d 76 00             	lea    esi,[esi+0x0]
c000d7a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ac:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000d7b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7b6:	c6 40 4e 00          	mov    BYTE PTR [eax+0x4e],0x0
c000d7ba:	66 90                	xchg   ax,ax
c000d7bc:	83 ec 0c             	sub    esp,0xc
c000d7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7c3:	e8 50 c7 ff ff       	call   c0009f18 <tcp_seg_free>
c000d7c8:	83 c4 10             	add    esp,0x10
c000d7cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7cf:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d7d5:	85 c0                	test   eax,eax
c000d7d7:	74 27                	je     c000d800 <tcp_process+0x348>
c000d7d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7dd:	8b 80 90 00 00 00    	mov    eax,DWORD PTR [eax+0x90]
c000d7e3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d7e7:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d7ea:	83 ec 04             	sub    esp,0x4
c000d7ed:	6a 00                	push   0x0
c000d7ef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d7f3:	52                   	push   edx
c000d7f4:	ff d0                	call   eax
c000d7f6:	83 c4 10             	add    esp,0x10
c000d7f9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d7fd:	eb 09                	jmp    c000d808 <tcp_process+0x350>
c000d7ff:	90                   	nop
c000d800:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c000d805:	8d 76 00             	lea    esi,[esi+0x0]
c000d808:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d80d:	83 f8 f6             	cmp    eax,0xfffffff6
c000d810:	75 0a                	jne    c000d81c <tcp_process+0x364>
c000d812:	b0 f6                	mov    al,0xf6
c000d814:	e9 2f 06 00 00       	jmp    c000de48 <tcp_process+0x990>
c000d819:	8d 76 00             	lea    esi,[esi+0x0]
c000d81c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d820:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d823:	83 c8 02             	or     eax,0x2
c000d826:	88 c2                	mov    dl,al
c000d828:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d82f:	e9 f4 05 00 00       	jmp    c000de28 <tcp_process+0x970>
c000d834:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d839:	0f b6 c0             	movzx  eax,al
c000d83c:	83 e0 10             	and    eax,0x10
c000d83f:	0f 84 e3 05 00 00    	je     c000de28 <tcp_process+0x970>
c000d845:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d84a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000d84d:	0f b7 c8             	movzx  ecx,ax
c000d850:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000d855:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000d859:	0f b7 d0             	movzx  edx,ax
c000d85c:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000d862:	0f b7 d8             	movzx  ebx,ax
c000d865:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000d86a:	01 c3                	add    ebx,eax
c000d86c:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000d871:	83 ec 08             	sub    esp,0x8
c000d874:	51                   	push   ecx
c000d875:	52                   	push   edx
c000d876:	68 90 68 03 c0       	push   0xc0036890
c000d87b:	68 98 68 03 c0       	push   0xc0036898
c000d880:	53                   	push   ebx
c000d881:	50                   	push   eax
c000d882:	e8 d5 29 00 00       	call   c001025c <tcp_rst>
c000d887:	83 c4 20             	add    esp,0x20
c000d88a:	e9 99 05 00 00       	jmp    c000de28 <tcp_process+0x970>
c000d88f:	90                   	nop
c000d890:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000d895:	0f b6 c0             	movzx  eax,al
c000d898:	83 e0 10             	and    eax,0x10
c000d89b:	0f 84 a7 01 00 00    	je     c000da48 <tcp_process+0x590>
c000d8a1:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d8a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8ab:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000d8ae:	29 c2                	sub    edx,eax
c000d8b0:	89 d0                	mov    eax,edx
c000d8b2:	83 e8 01             	sub    eax,0x1
c000d8b5:	0f 88 41 01 00 00    	js     c000d9fc <tcp_process+0x544>
c000d8bb:	8b 15 b0 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8b0
c000d8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c5:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000d8c8:	29 c2                	sub    edx,eax
c000d8ca:	89 d0                	mov    eax,edx
c000d8cc:	85 c0                	test   eax,eax
c000d8ce:	0f 8f 28 01 00 00    	jg     c000d9fc <tcp_process+0x544>
c000d8d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8d8:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d8df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8e3:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d8e6:	85 c0                	test   eax,eax
c000d8e8:	75 16                	jne    c000d900 <tcp_process+0x448>
c000d8ea:	83 ec 08             	sub    esp,0x8
c000d8ed:	68 29 05 03 c0       	push   0xc0030529
c000d8f2:	68 66 f9 02 c0       	push   0xc002f966
c000d8f7:	e8 d8 21 01 00       	call   c001fad4 <CPrintf>
c000d8fc:	83 c4 10             	add    esp,0x10
c000d8ff:	90                   	nop
c000d900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d904:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d907:	85 c0                	test   eax,eax
c000d909:	74 25                	je     c000d930 <tcp_process+0x478>
c000d90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d90f:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000d912:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d916:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000d919:	83 ec 04             	sub    esp,0x4
c000d91c:	6a 00                	push   0x0
c000d91e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d922:	52                   	push   edx
c000d923:	ff d0                	call   eax
c000d925:	83 c4 10             	add    esp,0x10
c000d928:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d92c:	eb 0a                	jmp    c000d938 <tcp_process+0x480>
c000d92e:	66 90                	xchg   ax,ax
c000d930:	c6 44 24 0e f2       	mov    BYTE PTR [esp+0xe],0xf2
c000d935:	8d 76 00             	lea    esi,[esi+0x0]
c000d938:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d93d:	85 c0                	test   eax,eax
c000d93f:	74 23                	je     c000d964 <tcp_process+0x4ac>
c000d941:	0f be 44 24 0e       	movsx  eax,BYTE PTR [esp+0xe]
c000d946:	83 f8 f6             	cmp    eax,0xfffffff6
c000d949:	74 11                	je     c000d95c <tcp_process+0x4a4>
c000d94b:	83 ec 0c             	sub    esp,0xc
c000d94e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d952:	e8 69 d8 ff ff       	call   c000b1c0 <tcp_abort>
c000d957:	83 c4 10             	add    esp,0x10
c000d95a:	66 90                	xchg   ax,ax
c000d95c:	b0 f6                	mov    al,0xf6
c000d95e:	e9 e5 04 00 00       	jmp    c000de48 <tcp_process+0x990>
c000d963:	90                   	nop
c000d964:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d968:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000d96c:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000d971:	83 ec 0c             	sub    esp,0xc
c000d974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d978:	e8 e7 e0 ff ff       	call   c000ba64 <tcp_receive>
c000d97d:	83 c4 10             	add    esp,0x10
c000d980:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d984:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000d987:	0f b7 c0             	movzx  eax,ax
c000d98a:	85 c0                	test   eax,eax
c000d98c:	74 12                	je     c000d9a0 <tcp_process+0x4e8>
c000d98e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d992:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000d995:	83 e8 01             	sub    eax,0x1
c000d998:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d99c:	66 89 42 70          	mov    WORD PTR [edx+0x70],ax
c000d9a0:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000d9a5:	83 f8 01             	cmp    eax,0x1
c000d9a8:	75 0e                	jne    c000d9b8 <tcp_process+0x500>
c000d9aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9ae:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9b1:	d1 e0                	shl    eax,1
c000d9b3:	eb 0b                	jmp    c000d9c0 <tcp_process+0x508>
c000d9b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d9b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d9bf:	90                   	nop
c000d9c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000d9c4:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c000d9c8:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000d9cd:	0f b6 c0             	movzx  eax,al
c000d9d0:	83 e0 20             	and    eax,0x20
c000d9d3:	0f 84 ab 00 00 00    	je     c000da84 <tcp_process+0x5cc>
c000d9d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9dd:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000d9e0:	83 c8 02             	or     eax,0x2
c000d9e3:	88 c2                	mov    dl,al
c000d9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9e9:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000d9ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d9f0:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000d9f7:	e9 88 00 00 00       	jmp    c000da84 <tcp_process+0x5cc>
c000d9fc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da01:	66 8b 00             	mov    ax,WORD PTR [eax]
c000da04:	0f b7 c8             	movzx  ecx,ax
c000da07:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000da0c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000da10:	0f b7 d0             	movzx  edx,ax
c000da13:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000da19:	0f b7 d8             	movzx  ebx,ax
c000da1c:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000da21:	01 c3                	add    ebx,eax
c000da23:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000da28:	83 ec 08             	sub    esp,0x8
c000da2b:	51                   	push   ecx
c000da2c:	52                   	push   edx
c000da2d:	68 90 68 03 c0       	push   0xc0036890
c000da32:	68 98 68 03 c0       	push   0xc0036898
c000da37:	53                   	push   ebx
c000da38:	50                   	push   eax
c000da39:	e8 1e 28 00 00       	call   c001025c <tcp_rst>
c000da3e:	83 c4 20             	add    esp,0x20
c000da41:	e9 e6 03 00 00       	jmp    c000de2c <tcp_process+0x974>
c000da46:	66 90                	xchg   ax,ax
c000da48:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000da4d:	0f b6 c0             	movzx  eax,al
c000da50:	83 e0 02             	and    eax,0x2
c000da53:	0f 84 d3 03 00 00    	je     c000de2c <tcp_process+0x974>
c000da59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000da5d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000da60:	8d 50 ff             	lea    edx,[eax-0x1]
c000da63:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000da68:	39 c2                	cmp    edx,eax
c000da6a:	0f 85 bc 03 00 00    	jne    c000de2c <tcp_process+0x974>
c000da70:	83 ec 0c             	sub    esp,0xc
c000da73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da77:	e8 e4 29 00 00       	call   c0010460 <tcp_rexmit>
c000da7c:	83 c4 10             	add    esp,0x10
c000da7f:	e9 a8 03 00 00       	jmp    c000de2c <tcp_process+0x974>
c000da84:	90                   	nop
c000da85:	e9 a2 03 00 00       	jmp    c000de2c <tcp_process+0x974>
c000da8a:	66 90                	xchg   ax,ax
c000da8c:	83 ec 0c             	sub    esp,0xc
c000da8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da93:	e8 cc df ff ff       	call   c000ba64 <tcp_receive>
c000da98:	83 c4 10             	add    esp,0x10
c000da9b:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000daa0:	0f b6 c0             	movzx  eax,al
c000daa3:	83 e0 20             	and    eax,0x20
c000daa6:	0f 84 84 03 00 00    	je     c000de30 <tcp_process+0x978>
c000daac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dab0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dab3:	83 c8 02             	or     eax,0x2
c000dab6:	88 c2                	mov    dl,al
c000dab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dabc:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dabf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dac3:	c7 40 10 07 00 00 00 	mov    DWORD PTR [eax+0x10],0x7
c000daca:	e9 61 03 00 00       	jmp    c000de30 <tcp_process+0x978>
c000dacf:	90                   	nop
c000dad0:	83 ec 0c             	sub    esp,0xc
c000dad3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dad7:	e8 88 df ff ff       	call   c000ba64 <tcp_receive>
c000dadc:	83 c4 10             	add    esp,0x10
c000dadf:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dae4:	0f b6 c0             	movzx  eax,al
c000dae7:	83 e0 20             	and    eax,0x20
c000daea:	0f 84 08 01 00 00    	je     c000dbf8 <tcp_process+0x740>
c000daf0:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000daf5:	0f b6 c0             	movzx  eax,al
c000daf8:	83 e0 10             	and    eax,0x10
c000dafb:	0f 84 d3 00 00 00    	je     c000dbd4 <tcp_process+0x71c>
c000db01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db05:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000db08:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000db0d:	39 c2                	cmp    edx,eax
c000db0f:	0f 85 bf 00 00 00    	jne    c000dbd4 <tcp_process+0x71c>
c000db15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db19:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000db1c:	83 c8 02             	or     eax,0x2
c000db1f:	88 c2                	mov    dl,al
c000db21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db25:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000db28:	83 ec 0c             	sub    esp,0xc
c000db2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000db2f:	e8 48 c5 ff ff       	call   c000a07c <tcp_pcb_purge>
c000db34:	83 c4 10             	add    esp,0x10
c000db37:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000db3c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000db40:	75 12                	jne    c000db54 <tcp_process+0x69c>
c000db42:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000db47:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000db4a:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000db4f:	eb 4b                	jmp    c000db9c <tcp_process+0x6e4>
c000db51:	8d 76 00             	lea    esi,[esi+0x0]
c000db54:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000db59:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000db5e:	eb 30                	jmp    c000db90 <tcp_process+0x6d8>
c000db60:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db65:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000db68:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000db6c:	75 12                	jne    c000db80 <tcp_process+0x6c8>
c000db6e:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db73:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000db77:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000db7a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000db7d:	eb 1d                	jmp    c000db9c <tcp_process+0x6e4>
c000db7f:	90                   	nop
c000db80:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db85:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000db88:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000db8d:	8d 76 00             	lea    esi,[esi+0x0]
c000db90:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000db95:	85 c0                	test   eax,eax
c000db97:	75 c7                	jne    c000db60 <tcp_process+0x6a8>
c000db99:	8d 76 00             	lea    esi,[esi+0x0]
c000db9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba0:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbab:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dbb2:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dbb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc3:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dbc8:	e8 93 2e 00 00       	call   c0010a60 <tcp_timer_needed>
c000dbcd:	e9 62 02 00 00       	jmp    c000de34 <tcp_process+0x97c>
c000dbd2:	66 90                	xchg   ax,ax
c000dbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd8:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dbdb:	83 c8 02             	or     eax,0x2
c000dbde:	88 c2                	mov    dl,al
c000dbe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbe4:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dbe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbeb:	c7 40 10 08 00 00 00 	mov    DWORD PTR [eax+0x10],0x8
c000dbf2:	e9 3d 02 00 00       	jmp    c000de34 <tcp_process+0x97c>
c000dbf7:	90                   	nop
c000dbf8:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dbfd:	0f b6 c0             	movzx  eax,al
c000dc00:	83 e0 10             	and    eax,0x10
c000dc03:	0f 84 2b 02 00 00    	je     c000de34 <tcp_process+0x97c>
c000dc09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc0d:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dc10:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dc15:	39 c2                	cmp    edx,eax
c000dc17:	0f 85 17 02 00 00    	jne    c000de34 <tcp_process+0x97c>
c000dc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc21:	c7 40 10 06 00 00 00 	mov    DWORD PTR [eax+0x10],0x6
c000dc28:	e9 07 02 00 00       	jmp    c000de34 <tcp_process+0x97c>
c000dc2d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc30:	83 ec 0c             	sub    esp,0xc
c000dc33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc37:	e8 28 de ff ff       	call   c000ba64 <tcp_receive>
c000dc3c:	83 c4 10             	add    esp,0x10
c000dc3f:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000dc44:	0f b6 c0             	movzx  eax,al
c000dc47:	83 e0 20             	and    eax,0x20
c000dc4a:	0f 84 e8 01 00 00    	je     c000de38 <tcp_process+0x980>
c000dc50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc54:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000dc57:	83 c8 02             	or     eax,0x2
c000dc5a:	88 c2                	mov    dl,al
c000dc5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc60:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000dc63:	83 ec 0c             	sub    esp,0xc
c000dc66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dc6a:	e8 0d c4 ff ff       	call   c000a07c <tcp_pcb_purge>
c000dc6f:	83 c4 10             	add    esp,0x10
c000dc72:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc77:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dc7b:	75 0f                	jne    c000dc8c <tcp_process+0x7d4>
c000dc7d:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc82:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dc85:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dc8a:	eb 48                	jmp    c000dcd4 <tcp_process+0x81c>
c000dc8c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dc91:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dc96:	eb 30                	jmp    c000dcc8 <tcp_process+0x810>
c000dc98:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dc9d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dca0:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dca4:	75 12                	jne    c000dcb8 <tcp_process+0x800>
c000dca6:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dcaf:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dcb2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcb5:	eb 1d                	jmp    c000dcd4 <tcp_process+0x81c>
c000dcb7:	90                   	nop
c000dcb8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dcbd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dcc0:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dcc5:	8d 76 00             	lea    esi,[esi+0x0]
c000dcc8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dccd:	85 c0                	test   eax,eax
c000dccf:	75 c7                	jne    c000dc98 <tcp_process+0x7e0>
c000dcd1:	8d 76 00             	lea    esi,[esi+0x0]
c000dcd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcd8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000dcdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dce3:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000dcea:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000dcf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcf4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dcf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dcfb:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dd00:	e8 5b 2d 00 00       	call   c0010a60 <tcp_timer_needed>
c000dd05:	e9 2e 01 00 00       	jmp    c000de38 <tcp_process+0x980>
c000dd0a:	66 90                	xchg   ax,ax
c000dd0c:	83 ec 0c             	sub    esp,0xc
c000dd0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd13:	e8 4c dd ff ff       	call   c000ba64 <tcp_receive>
c000dd18:	83 c4 10             	add    esp,0x10
c000dd1b:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000dd20:	0f b6 c0             	movzx  eax,al
c000dd23:	83 e0 10             	and    eax,0x10
c000dd26:	0f 84 10 01 00 00    	je     c000de3c <tcp_process+0x984>
c000dd2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd30:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000dd33:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000dd38:	39 c2                	cmp    edx,eax
c000dd3a:	0f 85 fc 00 00 00    	jne    c000de3c <tcp_process+0x984>
c000dd40:	83 ec 0c             	sub    esp,0xc
c000dd43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dd47:	e8 30 c3 ff ff       	call   c000a07c <tcp_pcb_purge>
c000dd4c:	83 c4 10             	add    esp,0x10
c000dd4f:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd54:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd58:	75 12                	jne    c000dd6c <tcp_process+0x8b4>
c000dd5a:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd62:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000dd67:	eb 4b                	jmp    c000ddb4 <tcp_process+0x8fc>
c000dd69:	8d 76 00             	lea    esi,[esi+0x0]
c000dd6c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000dd71:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dd76:	eb 30                	jmp    c000dda8 <tcp_process+0x8f0>
c000dd78:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd7d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dd80:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000dd84:	75 12                	jne    c000dd98 <tcp_process+0x8e0>
c000dd86:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd8f:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000dd92:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dd95:	eb 1d                	jmp    c000ddb4 <tcp_process+0x8fc>
c000dd97:	90                   	nop
c000dd98:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000dd9d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000dda0:	a3 7c 68 03 c0       	mov    ds:0xc003687c,eax
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	a1 7c 68 03 c0       	mov    eax,ds:0xc003687c
c000ddad:	85 c0                	test   eax,eax
c000ddaf:	75 c7                	jne    c000dd78 <tcp_process+0x8c0>
c000ddb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ddb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddb8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000ddbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddc3:	c7 40 10 0a 00 00 00 	mov    DWORD PTR [eax+0x10],0xa
c000ddca:	8b 15 84 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036884
c000ddd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddd4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ddd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dddb:	a3 84 68 03 c0       	mov    ds:0xc0036884,eax
c000dde0:	e8 7b 2c 00 00       	call   c0010a60 <tcp_timer_needed>
c000dde5:	eb 55                	jmp    c000de3c <tcp_process+0x984>
c000dde7:	90                   	nop
c000dde8:	83 ec 0c             	sub    esp,0xc
c000ddeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddef:	e8 70 dc ff ff       	call   c000ba64 <tcp_receive>
c000ddf4:	83 c4 10             	add    esp,0x10
c000ddf7:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000ddfc:	0f b6 c0             	movzx  eax,al
c000ddff:	83 e0 10             	and    eax,0x10
c000de02:	74 3c                	je     c000de40 <tcp_process+0x988>
c000de04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de08:	8b 50 5c             	mov    edx,DWORD PTR [eax+0x5c]
c000de0b:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000de10:	39 c2                	cmp    edx,eax
c000de12:	75 2c                	jne    c000de40 <tcp_process+0x988>
c000de14:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000de19:	83 c8 10             	or     eax,0x10
c000de1c:	a2 a8 a8 03 c0       	mov    ds:0xc003a8a8,al
c000de21:	eb 1d                	jmp    c000de40 <tcp_process+0x988>
c000de23:	90                   	nop
c000de24:	90                   	nop
c000de25:	eb 1d                	jmp    c000de44 <tcp_process+0x98c>
c000de27:	90                   	nop
c000de28:	90                   	nop
c000de29:	eb 19                	jmp    c000de44 <tcp_process+0x98c>
c000de2b:	90                   	nop
c000de2c:	90                   	nop
c000de2d:	eb 15                	jmp    c000de44 <tcp_process+0x98c>
c000de2f:	90                   	nop
c000de30:	90                   	nop
c000de31:	eb 11                	jmp    c000de44 <tcp_process+0x98c>
c000de33:	90                   	nop
c000de34:	90                   	nop
c000de35:	eb 0d                	jmp    c000de44 <tcp_process+0x98c>
c000de37:	90                   	nop
c000de38:	90                   	nop
c000de39:	eb 09                	jmp    c000de44 <tcp_process+0x98c>
c000de3b:	90                   	nop
c000de3c:	90                   	nop
c000de3d:	eb 05                	jmp    c000de44 <tcp_process+0x98c>
c000de3f:	90                   	nop
c000de40:	90                   	nop
c000de41:	8d 76 00             	lea    esi,[esi+0x0]
c000de44:	b0 00                	mov    al,0x0
c000de46:	66 90                	xchg   ax,ax
c000de48:	83 c4 18             	add    esp,0x18
c000de4b:	5b                   	pop    ebx
c000de4c:	c3                   	ret    
c000de4d:	8d 76 00             	lea    esi,[esi+0x0]

c000de50 <tcp_input>:
c000de50:	53                   	push   ebx
c000de51:	83 ec 18             	sub    esp,0x18
c000de54:	66 a1 b2 67 03 c0    	mov    ax,ds:0xc00367b2
c000de5a:	83 c0 01             	add    eax,0x1
c000de5d:	66 a3 b2 67 03 c0    	mov    ds:0xc00367b2,ax
c000de63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de6a:	a3 b8 a8 03 c0       	mov    ds:0xc003a8b8,eax
c000de6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000de73:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000de76:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000de7b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000de7e:	0f b7 c0             	movzx  eax,ax
c000de81:	83 ec 0c             	sub    esp,0xc
c000de84:	50                   	push   eax
c000de85:	e8 5e 2d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	0f b7 c0             	movzx  eax,ax
c000de90:	c1 e8 08             	shr    eax,0x8
c000de93:	0f b7 c0             	movzx  eax,ax
c000de96:	83 e0 0f             	and    eax,0xf
c000de99:	c1 e0 02             	shl    eax,0x2
c000de9c:	01 d8                	add    eax,ebx
c000de9e:	a3 bc a8 03 c0       	mov    ds:0xc003a8bc,eax
c000dea3:	a1 b8 a8 03 c0       	mov    eax,ds:0xc003a8b8
c000dea8:	66 8b 00             	mov    ax,WORD PTR [eax]
c000deab:	0f b7 c0             	movzx  eax,ax
c000deae:	83 ec 0c             	sub    esp,0xc
c000deb1:	50                   	push   eax
c000deb2:	e8 31 2d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000deb7:	83 c4 10             	add    esp,0x10
c000deba:	0f b7 c0             	movzx  eax,ax
c000debd:	c1 e8 08             	shr    eax,0x8
c000dec0:	83 e0 0f             	and    eax,0xf
c000dec3:	c1 e0 02             	shl    eax,0x2
c000dec6:	f7 d8                	neg    eax
c000dec8:	98                   	cwde   
c000dec9:	83 ec 08             	sub    esp,0x8
c000decc:	50                   	push   eax
c000decd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ded1:	e8 2e a2 ff ff       	call   c0008104 <pbuf_header>
c000ded6:	83 c4 10             	add    esp,0x10
c000ded9:	0f b6 c0             	movzx  eax,al
c000dedc:	85 c0                	test   eax,eax
c000dede:	75 10                	jne    c000def0 <tcp_input+0xa0>
c000dee0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dee4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dee7:	0f b7 c0             	movzx  eax,ax
c000deea:	83 f8 13             	cmp    eax,0x13
c000deed:	77 35                	ja     c000df24 <tcp_input+0xd4>
c000deef:	90                   	nop
c000def0:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000def6:	83 c0 01             	add    eax,0x1
c000def9:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000deff:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000df05:	83 c0 01             	add    eax,0x1
c000df08:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000df0e:	83 ec 0c             	sub    esp,0xc
c000df11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df15:	e8 86 a3 ff ff       	call   c00082a0 <pbuf_free>
c000df1a:	83 c4 10             	add    esp,0x10
c000df1d:	e9 fa 09 00 00       	jmp    c000e91c <tcp_input+0xacc>
c000df22:	66 90                	xchg   ax,ax
c000df24:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000df29:	83 ec 08             	sub    esp,0x8
c000df2c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df30:	50                   	push   eax
c000df31:	e8 5e 5e 00 00       	call   c0013d94 <ip4_addr_isbroadcast>
c000df36:	83 c4 10             	add    esp,0x10
c000df39:	0f b6 c0             	movzx  eax,al
c000df3c:	85 c0                	test   eax,eax
c000df3e:	75 14                	jne    c000df54 <tcp_input+0x104>
c000df40:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000df45:	25 f0 00 00 00       	and    eax,0xf0
c000df4a:	3d e0 00 00 00       	cmp    eax,0xe0
c000df4f:	75 37                	jne    c000df88 <tcp_input+0x138>
c000df51:	8d 76 00             	lea    esi,[esi+0x0]
c000df54:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000df5a:	83 c0 01             	add    eax,0x1
c000df5d:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000df63:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000df69:	83 c0 01             	add    eax,0x1
c000df6c:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000df72:	83 ec 0c             	sub    esp,0xc
c000df75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000df79:	e8 22 a3 ff ff       	call   c00082a0 <pbuf_free>
c000df7e:	83 c4 10             	add    esp,0x10
c000df81:	e9 96 09 00 00       	jmp    c000e91c <tcp_input+0xacc>
c000df86:	66 90                	xchg   ax,ax
c000df88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df8c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000df8f:	0f b7 c0             	movzx  eax,ax
c000df92:	83 ec 0c             	sub    esp,0xc
c000df95:	50                   	push   eax
c000df96:	6a 06                	push   0x6
c000df98:	68 98 68 03 c0       	push   0xc0036898
c000df9d:	68 90 68 03 c0       	push   0xc0036890
c000dfa2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dfa6:	e8 11 51 00 00       	call   c00130bc <inet_chksum_pseudo>
c000dfab:	83 c4 20             	add    esp,0x20
c000dfae:	0f b7 c0             	movzx  eax,ax
c000dfb1:	85 c0                	test   eax,eax
c000dfb3:	74 33                	je     c000dfe8 <tcp_input+0x198>
c000dfb5:	66 a1 b8 67 03 c0    	mov    ax,ds:0xc00367b8
c000dfbb:	83 c0 01             	add    eax,0x1
c000dfbe:	66 a3 b8 67 03 c0    	mov    ds:0xc00367b8,ax
c000dfc4:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000dfca:	83 c0 01             	add    eax,0x1
c000dfcd:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000dfd3:	83 ec 0c             	sub    esp,0xc
c000dfd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dfda:	e8 c1 a2 ff ff       	call   c00082a0 <pbuf_free>
c000dfdf:	83 c4 10             	add    esp,0x10
c000dfe2:	e9 35 09 00 00       	jmp    c000e91c <tcp_input+0xacc>
c000dfe7:	90                   	nop
c000dfe8:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000dfed:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000dff1:	0f b7 c0             	movzx  eax,ax
c000dff4:	83 ec 0c             	sub    esp,0xc
c000dff7:	50                   	push   eax
c000dff8:	e8 eb 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000dffd:	83 c4 10             	add    esp,0x10
c000e000:	0f b7 c0             	movzx  eax,ax
c000e003:	c1 e8 0c             	shr    eax,0xc
c000e006:	88 44 24 02          	mov    BYTE PTR [esp+0x2],al
c000e00a:	0f b6 44 24 02       	movzx  eax,BYTE PTR [esp+0x2]
c000e00f:	ba 00 00 00 00       	mov    edx,0x0
c000e014:	89 d1                	mov    ecx,edx
c000e016:	29 c1                	sub    ecx,eax
c000e018:	89 c8                	mov    eax,ecx
c000e01a:	c1 e0 02             	shl    eax,0x2
c000e01d:	98                   	cwde   
c000e01e:	83 ec 08             	sub    esp,0x8
c000e021:	50                   	push   eax
c000e022:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e026:	e8 d9 a0 ff ff       	call   c0008104 <pbuf_header>
c000e02b:	83 c4 10             	add    esp,0x10
c000e02e:	0f b6 c0             	movzx  eax,al
c000e031:	85 c0                	test   eax,eax
c000e033:	74 33                	je     c000e068 <tcp_input+0x218>
c000e035:	66 a1 ba 67 03 c0    	mov    ax,ds:0xc00367ba
c000e03b:	83 c0 01             	add    eax,0x1
c000e03e:	66 a3 ba 67 03 c0    	mov    ds:0xc00367ba,ax
c000e044:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e04a:	83 c0 01             	add    eax,0x1
c000e04d:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e053:	83 ec 0c             	sub    esp,0xc
c000e056:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e05a:	e8 41 a2 ff ff       	call   c00082a0 <pbuf_free>
c000e05f:	83 c4 10             	add    esp,0x10
c000e062:	e9 b5 08 00 00       	jmp    c000e91c <tcp_input+0xacc>
c000e067:	90                   	nop
c000e068:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e06d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e070:	0f b7 c0             	movzx  eax,ax
c000e073:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e079:	83 ec 0c             	sub    esp,0xc
c000e07c:	50                   	push   eax
c000e07d:	e8 66 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e082:	83 c4 10             	add    esp,0x10
c000e085:	66 89 03             	mov    WORD PTR [ebx],ax
c000e088:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e08d:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e091:	0f b7 c0             	movzx  eax,ax
c000e094:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e09a:	83 ec 0c             	sub    esp,0xc
c000e09d:	50                   	push   eax
c000e09e:	e8 45 2b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e0a3:	83 c4 10             	add    esp,0x10
c000e0a6:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000e0aa:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e0b2:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0b8:	83 ec 0c             	sub    esp,0xc
c000e0bb:	50                   	push   eax
c000e0bc:	e8 4b 2b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e0c1:	83 c4 10             	add    esp,0x10
c000e0c4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e0c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e0ca:	a3 b4 a8 03 c0       	mov    ds:0xc003a8b4,eax
c000e0cf:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e0d7:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e0dd:	83 ec 0c             	sub    esp,0xc
c000e0e0:	50                   	push   eax
c000e0e1:	e8 26 2b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e0e6:	83 c4 10             	add    esp,0x10
c000e0e9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000e0ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e0ef:	a3 b0 a8 03 c0       	mov    ds:0xc003a8b0,eax
c000e0f4:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e0f9:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c000e0fd:	0f b7 c0             	movzx  eax,ax
c000e100:	8b 1d bc a8 03 c0    	mov    ebx,DWORD PTR ds:0xc003a8bc
c000e106:	83 ec 0c             	sub    esp,0xc
c000e109:	50                   	push   eax
c000e10a:	e8 d9 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e10f:	83 c4 10             	add    esp,0x10
c000e112:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000e116:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e11b:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e11f:	0f b7 c0             	movzx  eax,ax
c000e122:	83 ec 0c             	sub    esp,0xc
c000e125:	50                   	push   eax
c000e126:	e8 bd 2a ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e12b:	83 c4 10             	add    esp,0x10
c000e12e:	83 e0 3f             	and    eax,0x3f
c000e131:	a2 ac a8 03 c0       	mov    ds:0xc003a8ac,al
c000e136:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e13a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000e13d:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e142:	0f b6 c0             	movzx  eax,al
c000e145:	83 e0 03             	and    eax,0x3
c000e148:	0f 95 c0             	setne  al
c000e14b:	0f b6 c0             	movzx  eax,al
c000e14e:	01 d0                	add    eax,edx
c000e150:	66 a3 aa a8 03 c0    	mov    ds:0xc003a8aa,ax
c000e156:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e15e:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c000e163:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e167:	e9 50 01 00 00       	jmp    c000e2bc <tcp_input+0x46c>
c000e16c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e170:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e173:	85 c0                	test   eax,eax
c000e175:	75 15                	jne    c000e18c <tcp_input+0x33c>
c000e177:	83 ec 08             	sub    esp,0x8
c000e17a:	68 d0 03 03 c0       	push   0xc00303d0
c000e17f:	68 66 f9 02 c0       	push   0xc002f966
c000e184:	e8 4b 19 01 00       	call   c001fad4 <CPrintf>
c000e189:	83 c4 10             	add    esp,0x10
c000e18c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e190:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e193:	83 f8 0a             	cmp    eax,0xa
c000e196:	75 18                	jne    c000e1b0 <tcp_input+0x360>
c000e198:	83 ec 08             	sub    esp,0x8
c000e19b:	68 f8 03 03 c0       	push   0xc00303f8
c000e1a0:	68 66 f9 02 c0       	push   0xc002f966
c000e1a5:	e8 2a 19 01 00       	call   c001fad4 <CPrintf>
c000e1aa:	83 c4 10             	add    esp,0x10
c000e1ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e1b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1b4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e1b7:	83 f8 01             	cmp    eax,0x1
c000e1ba:	75 18                	jne    c000e1d4 <tcp_input+0x384>
c000e1bc:	83 ec 08             	sub    esp,0x8
c000e1bf:	68 24 04 03 c0       	push   0xc0030424
c000e1c4:	68 66 f9 02 c0       	push   0xc002f966
c000e1c9:	e8 06 19 01 00       	call   c001fad4 <CPrintf>
c000e1ce:	83 c4 10             	add    esp,0x10
c000e1d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1d8:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e1dc:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1e1:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e1e4:	0f b7 d2             	movzx  edx,dx
c000e1e7:	0f b7 c0             	movzx  eax,ax
c000e1ea:	39 c2                	cmp    edx,eax
c000e1ec:	0f 85 b6 00 00 00    	jne    c000e2a8 <tcp_input+0x458>
c000e1f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1f6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e1f9:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e1fe:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e202:	0f b7 d2             	movzx  edx,dx
c000e205:	0f b7 c0             	movzx  eax,ax
c000e208:	39 c2                	cmp    edx,eax
c000e20a:	0f 85 98 00 00 00    	jne    c000e2a8 <tcp_input+0x458>
c000e210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e217:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e21c:	39 c2                	cmp    edx,eax
c000e21e:	0f 85 84 00 00 00    	jne    c000e2a8 <tcp_input+0x458>
c000e224:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e228:	8b 10                	mov    edx,DWORD PTR [eax]
c000e22a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e22f:	39 c2                	cmp    edx,eax
c000e231:	75 75                	jne    c000e2a8 <tcp_input+0x458>
c000e233:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e237:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e23a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e23e:	75 18                	jne    c000e258 <tcp_input+0x408>
c000e240:	83 ec 08             	sub    esp,0x8
c000e243:	68 4c 04 03 c0       	push   0xc003044c
c000e248:	68 66 f9 02 c0       	push   0xc002f966
c000e24d:	e8 82 18 01 00       	call   c001fad4 <CPrintf>
c000e252:	83 c4 10             	add    esp,0x10
c000e255:	8d 76 00             	lea    esi,[esi+0x0]
c000e258:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e25d:	74 25                	je     c000e284 <tcp_input+0x434>
c000e25f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e263:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e266:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e26a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e26d:	8b 15 70 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036870
c000e273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e277:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e27a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e27e:	a3 70 68 03 c0       	mov    ds:0xc0036870,eax
c000e283:	90                   	nop
c000e284:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e288:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e28b:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e28f:	75 3b                	jne    c000e2cc <tcp_input+0x47c>
c000e291:	83 ec 08             	sub    esp,0x8
c000e294:	68 78 04 03 c0       	push   0xc0030478
c000e299:	68 66 f9 02 c0       	push   0xc002f966
c000e29e:	e8 31 18 01 00       	call   c001fad4 <CPrintf>
c000e2a3:	83 c4 10             	add    esp,0x10
c000e2a6:	eb 24                	jmp    c000e2cc <tcp_input+0x47c>
c000e2a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e2b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e2b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2bb:	90                   	nop
c000e2bc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e2c1:	0f 85 a5 fe ff ff    	jne    c000e16c <tcp_input+0x31c>
c000e2c7:	eb 07                	jmp    c000e2d0 <tcp_input+0x480>
c000e2c9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2cc:	90                   	nop
c000e2cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e2d0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e2d5:	0f 85 89 01 00 00    	jne    c000e464 <tcp_input+0x614>
c000e2db:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c000e2e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e2e4:	e9 ab 00 00 00       	jmp    c000e394 <tcp_input+0x544>
c000e2e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e2ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000e2f3:	83 f8 0a             	cmp    eax,0xa
c000e2f6:	74 18                	je     c000e310 <tcp_input+0x4c0>
c000e2f8:	83 ec 08             	sub    esp,0x8
c000e2fb:	68 a4 04 03 c0       	push   0xc00304a4
c000e300:	68 66 f9 02 c0       	push   0xc002f966
c000e305:	e8 ca 17 01 00       	call   c001fad4 <CPrintf>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	8d 76 00             	lea    esi,[esi+0x0]
c000e310:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e314:	66 8b 50 22          	mov    dx,WORD PTR [eax+0x22]
c000e318:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e31d:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e320:	0f b7 d2             	movzx  edx,dx
c000e323:	0f b7 c0             	movzx  eax,ax
c000e326:	39 c2                	cmp    edx,eax
c000e328:	75 5e                	jne    c000e388 <tcp_input+0x538>
c000e32a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e32e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e331:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e336:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e33a:	0f b7 d2             	movzx  edx,dx
c000e33d:	0f b7 c0             	movzx  eax,ax
c000e340:	39 c2                	cmp    edx,eax
c000e342:	75 44                	jne    c000e388 <tcp_input+0x538>
c000e344:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e348:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e34b:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c000e350:	39 c2                	cmp    edx,eax
c000e352:	75 34                	jne    c000e388 <tcp_input+0x538>
c000e354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e358:	8b 10                	mov    edx,DWORD PTR [eax]
c000e35a:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e35f:	39 c2                	cmp    edx,eax
c000e361:	75 25                	jne    c000e388 <tcp_input+0x538>
c000e363:	83 ec 0c             	sub    esp,0xc
c000e366:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e36a:	e8 81 d4 ff ff       	call   c000b7f0 <tcp_timewait_input>
c000e36f:	83 c4 10             	add    esp,0x10
c000e372:	83 ec 0c             	sub    esp,0xc
c000e375:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e379:	e8 22 9f ff ff       	call   c00082a0 <pbuf_free>
c000e37e:	83 c4 10             	add    esp,0x10
c000e381:	e9 96 05 00 00       	jmp    c000e91c <tcp_input+0xacc>
c000e386:	66 90                	xchg   ax,ax
c000e388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e38c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e38f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e393:	90                   	nop
c000e394:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e399:	0f 85 4d ff ff ff    	jne    c000e2ec <tcp_input+0x49c>
c000e39f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e3a7:	a1 78 68 03 c0       	mov    eax,ds:0xc0036878
c000e3ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e3b0:	eb 52                	jmp    c000e404 <tcp_input+0x5b4>
c000e3b2:	66 90                	xchg   ax,ax
c000e3b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3b8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000e3bb:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e3c0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e3c4:	0f b7 d2             	movzx  edx,dx
c000e3c7:	0f b7 c0             	movzx  eax,ax
c000e3ca:	39 c2                	cmp    edx,eax
c000e3cc:	75 22                	jne    c000e3f0 <tcp_input+0x5a0>
c000e3ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3d2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3d4:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c000e3d9:	39 c2                	cmp    edx,eax
c000e3db:	74 2f                	je     c000e40c <tcp_input+0x5bc>
c000e3dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e1:	85 c0                	test   eax,eax
c000e3e3:	74 27                	je     c000e40c <tcp_input+0x5bc>
c000e3e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3eb:	85 c0                	test   eax,eax
c000e3ed:	74 1d                	je     c000e40c <tcp_input+0x5bc>
c000e3ef:	90                   	nop
c000e3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e3f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e3ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e403:	90                   	nop
c000e404:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e409:	75 a9                	jne    c000e3b4 <tcp_input+0x564>
c000e40b:	90                   	nop
c000e40c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000e411:	74 51                	je     c000e464 <tcp_input+0x614>
c000e413:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e418:	74 26                	je     c000e440 <tcp_input+0x5f0>
c000e41a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e41e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e425:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e428:	8b 15 78 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036878
c000e42e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e432:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e435:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e439:	a3 78 68 03 c0       	mov    ds:0xc0036878,eax
c000e43e:	66 90                	xchg   ax,ax
c000e440:	83 ec 0c             	sub    esp,0xc
c000e443:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e447:	e8 60 ee ff ff       	call   c000d2ac <tcp_listen_input>
c000e44c:	83 c4 10             	add    esp,0x10
c000e44f:	83 ec 0c             	sub    esp,0xc
c000e452:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e456:	e8 45 9e ff ff       	call   c00082a0 <pbuf_free>
c000e45b:	83 c4 10             	add    esp,0x10
c000e45e:	e9 b9 04 00 00       	jmp    c000e91c <tcp_input+0xacc>
c000e463:	90                   	nop
c000e464:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000e469:	0f 84 19 04 00 00    	je     c000e888 <tcp_input+0xa38>
c000e46f:	c7 05 c0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c0,0x0
c000e479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e480:	66 a3 c8 a8 03 c0    	mov    ds:0xc003a8c8,ax
c000e486:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e48a:	a3 c4 a8 03 c0       	mov    ds:0xc003a8c4,eax
c000e48f:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e494:	a3 cc a8 03 c0       	mov    ds:0xc003a8cc,eax
c000e499:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e4a3:	c6 05 a8 a8 03 c0 00 	mov    BYTE PTR ds:0xc003a8a8,0x0
c000e4aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4ae:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e4b4:	85 c0                	test   eax,eax
c000e4b6:	0f 84 b4 00 00 00    	je     c000e570 <tcp_input+0x720>
c000e4bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4c0:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e4c6:	85 c0                	test   eax,eax
c000e4c8:	74 2e                	je     c000e4f8 <tcp_input+0x6a8>
c000e4ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4ce:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e4d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e4d8:	8b 8a 84 00 00 00    	mov    ecx,DWORD PTR [edx+0x84]
c000e4de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e4e2:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e4e5:	6a 00                	push   0x0
c000e4e7:	51                   	push   ecx
c000e4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e4ec:	52                   	push   edx
c000e4ed:	ff d0                	call   eax
c000e4ef:	83 c4 10             	add    esp,0x10
c000e4f2:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e4f6:	eb 20                	jmp    c000e518 <tcp_input+0x6c8>
c000e4f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fc:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e502:	6a 00                	push   0x0
c000e504:	50                   	push   eax
c000e505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e509:	6a 00                	push   0x0
c000e50b:	e8 b8 c8 ff ff       	call   c000adc8 <tcp_recv_null>
c000e510:	83 c4 10             	add    esp,0x10
c000e513:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e517:	90                   	nop
c000e518:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e51d:	85 c0                	test   eax,eax
c000e51f:	75 13                	jne    c000e534 <tcp_input+0x6e4>
c000e521:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e525:	c7 80 84 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x84],0x0
c000e52f:	eb 3f                	jmp    c000e570 <tcp_input+0x720>
c000e531:	8d 76 00             	lea    esi,[esi+0x0]
c000e534:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e539:	83 f8 f6             	cmp    eax,0xfffffff6
c000e53c:	74 0e                	je     c000e54c <tcp_input+0x6fc>
c000e53e:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e544:	0f b7 c0             	movzx  eax,ax
c000e547:	85 c0                	test   eax,eax
c000e549:	74 25                	je     c000e570 <tcp_input+0x720>
c000e54b:	90                   	nop
c000e54c:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e552:	83 c0 01             	add    eax,0x1
c000e555:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e562:	e8 39 9d ff ff       	call   c00082a0 <pbuf_free>
c000e567:	83 c4 10             	add    esp,0x10
c000e56a:	e9 ad 03 00 00       	jmp    c000e91c <tcp_input+0xacc>
c000e56f:	90                   	nop
c000e570:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e574:	a3 88 68 03 c0       	mov    ds:0xc0036888,eax
c000e579:	83 ec 0c             	sub    esp,0xc
c000e57c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e580:	e8 33 ef ff ff       	call   c000d4b8 <tcp_process>
c000e585:	83 c4 10             	add    esp,0x10
c000e588:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e58c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e591:	83 f8 f6             	cmp    eax,0xfffffff6
c000e594:	0f 84 9a 02 00 00    	je     c000e834 <tcp_input+0x9e4>
c000e59a:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e59f:	0f b6 c0             	movzx  eax,al
c000e5a2:	83 e0 08             	and    eax,0x8
c000e5a5:	74 59                	je     c000e600 <tcp_input+0x7b0>
c000e5a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5ab:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e5b1:	85 c0                	test   eax,eax
c000e5b3:	74 1f                	je     c000e5d4 <tcp_input+0x784>
c000e5b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b9:	8b 80 98 00 00 00    	mov    eax,DWORD PTR [eax+0x98]
c000e5bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e5c3:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e5c6:	83 ec 08             	sub    esp,0x8
c000e5c9:	6a f5                	push   0xfffffff5
c000e5cb:	52                   	push   edx
c000e5cc:	ff d0                	call   eax
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5d4:	83 ec 08             	sub    esp,0x8
c000e5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5db:	68 70 68 03 c0       	push   0xc0036870
c000e5e0:	e8 ff c2 ff ff       	call   c000a8e4 <tcp_pcb_remove>
c000e5e5:	83 c4 10             	add    esp,0x10
c000e5e8:	83 ec 08             	sub    esp,0x8
c000e5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e5ef:	6a 02                	push   0x2
c000e5f1:	e8 ee 93 ff ff       	call   c00079e4 <memp_free>
c000e5f6:	83 c4 10             	add    esp,0x10
c000e5f9:	e9 46 02 00 00       	jmp    c000e844 <tcp_input+0x9f4>
c000e5fe:	66 90                	xchg   ax,ax
c000e600:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e605:	0f b6 c0             	movzx  eax,al
c000e608:	83 e0 10             	and    eax,0x10
c000e60b:	74 2b                	je     c000e638 <tcp_input+0x7e8>
c000e60d:	83 ec 08             	sub    esp,0x8
c000e610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e614:	68 70 68 03 c0       	push   0xc0036870
c000e619:	e8 c6 c2 ff ff       	call   c000a8e4 <tcp_pcb_remove>
c000e61e:	83 c4 10             	add    esp,0x10
c000e621:	83 ec 08             	sub    esp,0x8
c000e624:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e628:	6a 02                	push   0x2
c000e62a:	e8 b5 93 ff ff       	call   c00079e4 <memp_free>
c000e62f:	83 c4 10             	add    esp,0x10
c000e632:	e9 0d 02 00 00       	jmp    c000e844 <tcp_input+0x9f4>
c000e637:	90                   	nop
c000e638:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e63d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e641:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e644:	0f b7 c0             	movzx  eax,ax
c000e647:	85 c0                	test   eax,eax
c000e649:	74 55                	je     c000e6a0 <tcp_input+0x850>
c000e64b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e64f:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
c000e655:	85 c0                	test   eax,eax
c000e657:	74 2f                	je     c000e688 <tcp_input+0x838>
c000e659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e65d:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
c000e663:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e667:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000e66a:	0f b7 c8             	movzx  ecx,ax
c000e66d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e671:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e674:	83 ec 04             	sub    esp,0x4
c000e677:	51                   	push   ecx
c000e678:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e67c:	50                   	push   eax
c000e67d:	ff d2                	call   edx
c000e67f:	83 c4 10             	add    esp,0x10
c000e682:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e686:	eb 08                	jmp    c000e690 <tcp_input+0x840>
c000e688:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e68d:	8d 76 00             	lea    esi,[esi+0x0]
c000e690:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e695:	83 f8 f6             	cmp    eax,0xfffffff6
c000e698:	0f 84 9a 01 00 00    	je     c000e838 <tcp_input+0x9e8>
c000e69e:	66 90                	xchg   ax,ax
c000e6a0:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e6a5:	85 c0                	test   eax,eax
c000e6a7:	0f 84 f3 00 00 00    	je     c000e7a0 <tcp_input+0x950>
c000e6ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6b1:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
c000e6b7:	85 c0                	test   eax,eax
c000e6b9:	74 15                	je     c000e6d0 <tcp_input+0x880>
c000e6bb:	83 ec 08             	sub    esp,0x8
c000e6be:	68 3d 05 03 c0       	push   0xc003053d
c000e6c3:	68 66 f9 02 c0       	push   0xc002f966
c000e6c8:	e8 07 14 01 00       	call   c001fad4 <CPrintf>
c000e6cd:	83 c4 10             	add    esp,0x10
c000e6d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6d4:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000e6d7:	0f b6 c0             	movzx  eax,al
c000e6da:	83 e0 10             	and    eax,0x10
c000e6dd:	74 25                	je     c000e704 <tcp_input+0x8b4>
c000e6df:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e6e4:	83 ec 0c             	sub    esp,0xc
c000e6e7:	50                   	push   eax
c000e6e8:	e8 b3 9b ff ff       	call   c00082a0 <pbuf_free>
c000e6ed:	83 c4 10             	add    esp,0x10
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e6f7:	e8 c4 ca ff ff       	call   c000b1c0 <tcp_abort>
c000e6fc:	83 c4 10             	add    esp,0x10
c000e6ff:	e9 40 01 00 00       	jmp    c000e844 <tcp_input+0x9f4>
c000e704:	a0 ac a8 03 c0       	mov    al,ds:0xc003a8ac
c000e709:	0f b6 c0             	movzx  eax,al
c000e70c:	83 e0 08             	and    eax,0x8
c000e70f:	74 13                	je     c000e724 <tcp_input+0x8d4>
c000e711:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e716:	8a 50 0d             	mov    dl,BYTE PTR [eax+0xd]
c000e719:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e71e:	83 ca 01             	or     edx,0x1
c000e721:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
c000e724:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e728:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e72e:	85 c0                	test   eax,eax
c000e730:	74 2a                	je     c000e75c <tcp_input+0x90c>
c000e732:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e736:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e73c:	8b 0d a4 a8 03 c0    	mov    ecx,DWORD PTR ds:0xc003a8a4
c000e742:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e746:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e749:	6a 00                	push   0x0
c000e74b:	51                   	push   ecx
c000e74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e750:	52                   	push   edx
c000e751:	ff d0                	call   eax
c000e753:	83 c4 10             	add    esp,0x10
c000e756:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e75a:	eb 1c                	jmp    c000e778 <tcp_input+0x928>
c000e75c:	a1 a4 a8 03 c0       	mov    eax,ds:0xc003a8a4
c000e761:	6a 00                	push   0x0
c000e763:	50                   	push   eax
c000e764:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e768:	6a 00                	push   0x0
c000e76a:	e8 59 c6 ff ff       	call   c000adc8 <tcp_recv_null>
c000e76f:	83 c4 10             	add    esp,0x10
c000e772:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e776:	66 90                	xchg   ax,ax
c000e778:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e77d:	83 f8 f6             	cmp    eax,0xfffffff6
c000e780:	0f 84 b6 00 00 00    	je     c000e83c <tcp_input+0x9ec>
c000e786:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e78b:	85 c0                	test   eax,eax
c000e78d:	74 11                	je     c000e7a0 <tcp_input+0x950>
c000e78f:	8b 15 a4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8a4
c000e795:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e799:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
c000e79f:	90                   	nop
c000e7a0:	a0 a8 a8 03 c0       	mov    al,ds:0xc003a8a8
c000e7a5:	0f b6 c0             	movzx  eax,al
c000e7a8:	83 e0 20             	and    eax,0x20
c000e7ab:	74 6b                	je     c000e818 <tcp_input+0x9c8>
c000e7ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7b1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e7b4:	0f b7 c0             	movzx  eax,ax
c000e7b7:	3d 60 08 00 00       	cmp    eax,0x860
c000e7bc:	74 12                	je     c000e7d0 <tcp_input+0x980>
c000e7be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000e7c5:	83 c0 01             	add    eax,0x1
c000e7c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7cc:	66 89 42 2c          	mov    WORD PTR [edx+0x2c],ax
c000e7d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7d4:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7da:	85 c0                	test   eax,eax
c000e7dc:	74 26                	je     c000e804 <tcp_input+0x9b4>
c000e7de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7e2:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
c000e7e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e7ec:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
c000e7ef:	6a 00                	push   0x0
c000e7f1:	6a 00                	push   0x0
c000e7f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7f7:	52                   	push   edx
c000e7f8:	ff d0                	call   eax
c000e7fa:	83 c4 10             	add    esp,0x10
c000e7fd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000e801:	eb 09                	jmp    c000e80c <tcp_input+0x9bc>
c000e803:	90                   	nop
c000e804:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c000e809:	8d 76 00             	lea    esi,[esi+0x0]
c000e80c:	0f be 44 24 03       	movsx  eax,BYTE PTR [esp+0x3]
c000e811:	83 f8 f6             	cmp    eax,0xfffffff6
c000e814:	74 2a                	je     c000e840 <tcp_input+0x9f0>
c000e816:	66 90                	xchg   ax,ax
c000e818:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e822:	83 ec 0c             	sub    esp,0xc
c000e825:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e829:	e8 a2 15 00 00       	call   c000fdd0 <tcp_output>
c000e82e:	83 c4 10             	add    esp,0x10
c000e831:	eb 11                	jmp    c000e844 <tcp_input+0x9f4>
c000e833:	90                   	nop
c000e834:	90                   	nop
c000e835:	eb 0d                	jmp    c000e844 <tcp_input+0x9f4>
c000e837:	90                   	nop
c000e838:	90                   	nop
c000e839:	eb 09                	jmp    c000e844 <tcp_input+0x9f4>
c000e83b:	90                   	nop
c000e83c:	90                   	nop
c000e83d:	eb 05                	jmp    c000e844 <tcp_input+0x9f4>
c000e83f:	90                   	nop
c000e840:	90                   	nop
c000e841:	8d 76 00             	lea    esi,[esi+0x0]
c000e844:	c7 05 88 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036888,0x0
c000e84e:	c7 05 a4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8a4,0x0
c000e858:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e85d:	85 c0                	test   eax,eax
c000e85f:	0f 84 b7 00 00 00    	je     c000e91c <tcp_input+0xacc>
c000e865:	a1 c4 a8 03 c0       	mov    eax,ds:0xc003a8c4
c000e86a:	83 ec 0c             	sub    esp,0xc
c000e86d:	50                   	push   eax
c000e86e:	e8 2d 9a ff ff       	call   c00082a0 <pbuf_free>
c000e873:	83 c4 10             	add    esp,0x10
c000e876:	c7 05 c4 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8c4,0x0
c000e880:	e9 97 00 00 00       	jmp    c000e91c <tcp_input+0xacc>
c000e885:	8d 76 00             	lea    esi,[esi+0x0]
c000e888:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e88d:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000e891:	0f b7 c0             	movzx  eax,ax
c000e894:	83 ec 0c             	sub    esp,0xc
c000e897:	50                   	push   eax
c000e898:	e8 4b 23 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e89d:	83 c4 10             	add    esp,0x10
c000e8a0:	0f b7 c0             	movzx  eax,ax
c000e8a3:	83 e0 04             	and    eax,0x4
c000e8a6:	75 64                	jne    c000e90c <tcp_input+0xabc>
c000e8a8:	66 a1 c0 67 03 c0    	mov    ax,ds:0xc00367c0
c000e8ae:	83 c0 01             	add    eax,0x1
c000e8b1:	66 a3 c0 67 03 c0    	mov    ds:0xc00367c0,ax
c000e8b7:	66 a1 b6 67 03 c0    	mov    ax,ds:0xc00367b6
c000e8bd:	83 c0 01             	add    eax,0x1
c000e8c0:	66 a3 b6 67 03 c0    	mov    ds:0xc00367b6,ax
c000e8c6:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e8cb:	66 8b 00             	mov    ax,WORD PTR [eax]
c000e8ce:	0f b7 c8             	movzx  ecx,ax
c000e8d1:	a1 bc a8 03 c0       	mov    eax,ds:0xc003a8bc
c000e8d6:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c000e8da:	0f b7 d0             	movzx  edx,ax
c000e8dd:	66 a1 aa a8 03 c0    	mov    ax,ds:0xc003a8aa
c000e8e3:	0f b7 d8             	movzx  ebx,ax
c000e8e6:	a1 b4 a8 03 c0       	mov    eax,ds:0xc003a8b4
c000e8eb:	01 c3                	add    ebx,eax
c000e8ed:	a1 b0 a8 03 c0       	mov    eax,ds:0xc003a8b0
c000e8f2:	83 ec 08             	sub    esp,0x8
c000e8f5:	51                   	push   ecx
c000e8f6:	52                   	push   edx
c000e8f7:	68 90 68 03 c0       	push   0xc0036890
c000e8fc:	68 98 68 03 c0       	push   0xc0036898
c000e901:	53                   	push   ebx
c000e902:	50                   	push   eax
c000e903:	e8 54 19 00 00       	call   c001025c <tcp_rst>
c000e908:	83 c4 20             	add    esp,0x20
c000e90b:	90                   	nop
c000e90c:	83 ec 0c             	sub    esp,0xc
c000e90f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e913:	e8 88 99 ff ff       	call   c00082a0 <pbuf_free>
c000e918:	83 c4 10             	add    esp,0x10
c000e91b:	90                   	nop
c000e91c:	83 c4 18             	add    esp,0x18
c000e91f:	5b                   	pop    ebx
c000e920:	c3                   	ret    
c000e921:	66 90                	xchg   ax,ax
c000e923:	90                   	nop

c000e924 <tcp_output_alloc_header>:
c000e924:	83 ec 2c             	sub    esp,0x2c
c000e927:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e92b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e92f:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000e934:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e939:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e93d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e941:	01 d0                	add    eax,edx
c000e943:	83 c0 14             	add    eax,0x14
c000e946:	0f b7 c0             	movzx  eax,ax
c000e949:	83 ec 04             	sub    esp,0x4
c000e94c:	6a 00                	push   0x0
c000e94e:	50                   	push   eax
c000e94f:	6a 01                	push   0x1
c000e951:	e8 22 9b ff ff       	call   c0008478 <pbuf_alloc>
c000e956:	83 c4 10             	add    esp,0x10
c000e959:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e95d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000e962:	0f 84 10 01 00 00    	je     c000ea78 <tcp_output_alloc_header+0x154>
c000e968:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000e96d:	8d 50 13             	lea    edx,[eax+0x13]
c000e970:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e974:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000e978:	0f b7 c0             	movzx  eax,ax
c000e97b:	39 c2                	cmp    edx,eax
c000e97d:	7c 15                	jl     c000e994 <tcp_output_alloc_header+0x70>
c000e97f:	83 ec 08             	sub    esp,0x8
c000e982:	68 80 05 03 c0       	push   0xc0030580
c000e987:	68 66 f9 02 c0       	push   0xc002f966
c000e98c:	e8 43 11 01 00       	call   c001fad4 <CPrintf>
c000e991:	83 c4 10             	add    esp,0x10
c000e994:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e998:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e99b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e99f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000e9a6:	0f b7 c0             	movzx  eax,ax
c000e9a9:	83 ec 0c             	sub    esp,0xc
c000e9ac:	50                   	push   eax
c000e9ad:	e8 36 22 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e9b2:	83 c4 10             	add    esp,0x10
c000e9b5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9b9:	66 89 02             	mov    WORD PTR [edx],ax
c000e9bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9c0:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000e9c4:	0f b7 c0             	movzx  eax,ax
c000e9c7:	83 ec 0c             	sub    esp,0xc
c000e9ca:	50                   	push   eax
c000e9cb:	e8 18 22 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000e9d0:	83 c4 10             	add    esp,0x10
c000e9d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9d7:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e9db:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e9e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000e9e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e9ed:	83 ec 0c             	sub    esp,0xc
c000e9f0:	50                   	push   eax
c000e9f1:	e8 16 22 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000e9f6:	83 c4 10             	add    esp,0x10
c000e9f9:	89 c2                	mov    edx,eax
c000e9fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9ff:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ea02:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ea07:	c1 e8 02             	shr    eax,0x2
c000ea0a:	83 c0 05             	add    eax,0x5
c000ea0d:	c1 e0 0c             	shl    eax,0xc
c000ea10:	83 c8 10             	or     eax,0x10
c000ea13:	0f b7 c0             	movzx  eax,ax
c000ea16:	83 ec 0c             	sub    esp,0xc
c000ea19:	50                   	push   eax
c000ea1a:	e8 c9 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ea1f:	83 c4 10             	add    esp,0x10
c000ea22:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea26:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ea2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea2e:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ea32:	0f b7 c0             	movzx  eax,ax
c000ea35:	83 ec 0c             	sub    esp,0xc
c000ea38:	50                   	push   eax
c000ea39:	e8 aa 21 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ea3e:	83 c4 10             	add    esp,0x10
c000ea41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea45:	66 89 42 0e          	mov    WORD PTR [edx+0xe],ax
c000ea49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea4d:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000ea53:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea57:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ea5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea61:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000ea64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea68:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000ea6c:	0f b7 c0             	movzx  eax,ax
c000ea6f:	01 c2                	add    edx,eax
c000ea71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea75:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000ea78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea7c:	83 c4 2c             	add    esp,0x2c
c000ea7f:	c3                   	ret    

c000ea80 <tcp_create_segment>:
c000ea80:	53                   	push   ebx
c000ea81:	83 ec 28             	sub    esp,0x28
c000ea84:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ea88:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea8c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c000ea90:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000ea94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ea99:	c1 e0 02             	shl    eax,0x2
c000ea9c:	83 e0 04             	and    eax,0x4
c000ea9f:	88 c2                	mov    dl,al
c000eaa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000eaa6:	83 e0 02             	and    eax,0x2
c000eaa9:	74 05                	je     c000eab0 <tcp_create_segment+0x30>
c000eaab:	b0 0c                	mov    al,0xc
c000eaad:	eb 05                	jmp    c000eab4 <tcp_create_segment+0x34>
c000eaaf:	90                   	nop
c000eab0:	b0 00                	mov    al,0x0
c000eab2:	66 90                	xchg   ax,ax
c000eab4:	01 d0                	add    eax,edx
c000eab6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c000eaba:	83 ec 0c             	sub    esp,0xc
c000eabd:	6a 04                	push   0x4
c000eabf:	e8 f4 8d ff ff       	call   c00078b8 <memp_malloc>
c000eac4:	83 c4 10             	add    esp,0x10
c000eac7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eacb:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ead0:	75 1a                	jne    c000eaec <tcp_create_segment+0x6c>
c000ead2:	83 ec 0c             	sub    esp,0xc
c000ead5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ead9:	e8 c2 97 ff ff       	call   c00082a0 <pbuf_free>
c000eade:	83 c4 10             	add    esp,0x10
c000eae1:	b8 00 00 00 00       	mov    eax,0x0
c000eae6:	e9 31 01 00 00       	jmp    c000ec1c <tcp_create_segment+0x19c>
c000eaeb:	90                   	nop
c000eaec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eaf0:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c000eaf4:	88 50 0a             	mov    BYTE PTR [eax+0xa],dl
c000eaf7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eafb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eb01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb05:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eb09:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eb0c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb10:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000eb13:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000eb18:	89 d1                	mov    ecx,edx
c000eb1a:	29 c1                	sub    ecx,eax
c000eb1c:	89 c8                	mov    eax,ecx
c000eb1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb22:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000eb26:	83 ec 08             	sub    esp,0x8
c000eb29:	6a 14                	push   0x14
c000eb2b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eb2f:	e8 d0 95 ff ff       	call   c0008104 <pbuf_header>
c000eb34:	83 c4 10             	add    esp,0x10
c000eb37:	0f b6 c0             	movzx  eax,al
c000eb3a:	85 c0                	test   eax,eax
c000eb3c:	74 2a                	je     c000eb68 <tcp_create_segment+0xe8>
c000eb3e:	66 a1 c4 67 03 c0    	mov    ax,ds:0xc00367c4
c000eb44:	83 c0 01             	add    eax,0x1
c000eb47:	66 a3 c4 67 03 c0    	mov    ds:0xc00367c4,ax
c000eb4d:	83 ec 0c             	sub    esp,0xc
c000eb50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb54:	e8 bf b3 ff ff       	call   c0009f18 <tcp_seg_free>
c000eb59:	83 c4 10             	add    esp,0x10
c000eb5c:	b8 00 00 00 00       	mov    eax,0x0
c000eb61:	e9 b6 00 00 00       	jmp    c000ec1c <tcp_create_segment+0x19c>
c000eb66:	66 90                	xchg   ax,ax
c000eb68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eb6f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eb72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eb76:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eb79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb7d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000eb80:	0f b7 c0             	movzx  eax,ax
c000eb83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eb87:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000eb8a:	83 ec 0c             	sub    esp,0xc
c000eb8d:	50                   	push   eax
c000eb8e:	e8 55 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000eb93:	83 c4 10             	add    esp,0x10
c000eb96:	66 89 03             	mov    WORD PTR [ebx],ax
c000eb99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eb9d:	66 8b 40 22          	mov    ax,WORD PTR [eax+0x22]
c000eba1:	0f b7 c0             	movzx  eax,ax
c000eba4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000eba8:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ebab:	83 ec 0c             	sub    esp,0xc
c000ebae:	50                   	push   eax
c000ebaf:	e8 34 20 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ebb4:	83 c4 10             	add    esp,0x10
c000ebb7:	66 89 43 02          	mov    WORD PTR [ebx+0x2],ax
c000ebbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ebbf:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ebc2:	83 ec 0c             	sub    esp,0xc
c000ebc5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ebc9:	e8 3e 20 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ebce:	83 c4 10             	add    esp,0x10
c000ebd1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ebd4:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ebd9:	c1 e8 02             	shr    eax,0x2
c000ebdc:	0f b6 c0             	movzx  eax,al
c000ebdf:	83 c0 05             	add    eax,0x5
c000ebe2:	c1 e0 0c             	shl    eax,0xc
c000ebe5:	89 c2                	mov    edx,eax
c000ebe7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000ebec:	09 d0                	or     eax,edx
c000ebee:	0f b7 c0             	movzx  eax,ax
c000ebf1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ebf5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000ebf8:	83 ec 0c             	sub    esp,0xc
c000ebfb:	50                   	push   eax
c000ebfc:	e8 e7 1f ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ec01:	83 c4 10             	add    esp,0x10
c000ec04:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c000ec08:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec0c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ec0f:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c000ec15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ec19:	8d 76 00             	lea    esi,[esi+0x0]
c000ec1c:	83 c4 28             	add    esp,0x28
c000ec1f:	5b                   	pop    ebx
c000ec20:	c3                   	ret    
c000ec21:	8d 76 00             	lea    esi,[esi+0x0]

c000ec24 <tcp_pbuf_prealloc>:
c000ec24:	53                   	push   ebx
c000ec25:	83 ec 28             	sub    esp,0x28
c000ec28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ec30:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000ec34:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000ec38:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c000ec3d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000ec42:	88 d8                	mov    al,bl
c000ec44:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ec48:	88 c8                	mov    al,cl
c000ec4a:	88 04 24             	mov    BYTE PTR [esp],al
c000ec4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec51:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ec56:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000ec5b:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ec60:	39 c2                	cmp    edx,eax
c000ec62:	73 64                	jae    c000ecc8 <tcp_pbuf_prealloc+0xa4>
c000ec64:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ec69:	83 e0 02             	and    eax,0x2
c000ec6c:	75 2e                	jne    c000ec9c <tcp_pbuf_prealloc+0x78>
c000ec6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec72:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ec75:	0f b6 c0             	movzx  eax,al
c000ec78:	83 e0 40             	and    eax,0x40
c000ec7b:	75 4b                	jne    c000ecc8 <tcp_pbuf_prealloc+0xa4>
c000ec7d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000ec81:	85 c0                	test   eax,eax
c000ec83:	74 17                	je     c000ec9c <tcp_pbuf_prealloc+0x78>
c000ec85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec89:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ec8c:	85 c0                	test   eax,eax
c000ec8e:	75 0c                	jne    c000ec9c <tcp_pbuf_prealloc+0x78>
c000ec90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec94:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ec97:	85 c0                	test   eax,eax
c000ec99:	74 2d                	je     c000ecc8 <tcp_pbuf_prealloc+0xa4>
c000ec9b:	90                   	nop
c000ec9c:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000eca1:	8d 90 17 02 00 00    	lea    edx,[eax+0x217]
c000eca7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000ecac:	39 c2                	cmp    edx,eax
c000ecae:	7d 0c                	jge    c000ecbc <tcp_pbuf_prealloc+0x98>
c000ecb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecb4:	05 18 02 00 00       	add    eax,0x218
c000ecb9:	eb 05                	jmp    c000ecc0 <tcp_pbuf_prealloc+0x9c>
c000ecbb:	90                   	nop
c000ecbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000ecc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ecc8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000eccd:	83 ec 04             	sub    esp,0x4
c000ecd0:	6a 00                	push   0x0
c000ecd2:	50                   	push   eax
c000ecd3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ecd7:	e8 9c 97 ff ff       	call   c0008478 <pbuf_alloc>
c000ecdc:	83 c4 10             	add    esp,0x10
c000ecdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ece3:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000ece8:	75 0a                	jne    c000ecf4 <tcp_pbuf_prealloc+0xd0>
c000ecea:	b8 00 00 00 00       	mov    eax,0x0
c000ecef:	eb 5b                	jmp    c000ed4c <tcp_pbuf_prealloc+0x128>
c000ecf1:	8d 76 00             	lea    esi,[esi+0x0]
c000ecf4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ecf8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ecfa:	85 c0                	test   eax,eax
c000ecfc:	74 16                	je     c000ed14 <tcp_pbuf_prealloc+0xf0>
c000ecfe:	83 ec 08             	sub    esp,0x8
c000ed01:	68 04 08 03 c0       	push   0xc0030804
c000ed06:	68 66 f9 02 c0       	push   0xc002f966
c000ed0b:	e8 c4 0d 01 00       	call   c001fad4 <CPrintf>
c000ed10:	83 c4 10             	add    esp,0x10
c000ed13:	90                   	nop
c000ed14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed18:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000ed1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed20:	89 d1                	mov    ecx,edx
c000ed22:	29 c1                	sub    ecx,eax
c000ed24:	89 c8                	mov    eax,ecx
c000ed26:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ed2a:	66 89 02             	mov    WORD PTR [edx],ax
c000ed2d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed35:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000ed39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed3d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed44:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000ed48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed4c:	83 c4 28             	add    esp,0x28
c000ed4f:	5b                   	pop    ebx
c000ed50:	c3                   	ret    
c000ed51:	8d 76 00             	lea    esi,[esi+0x0]

c000ed54 <tcp_write_checks>:
c000ed54:	83 ec 1c             	sub    esp,0x1c
c000ed57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ed5b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000ed60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed64:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed67:	83 f8 04             	cmp    eax,0x4
c000ed6a:	74 2c                	je     c000ed98 <tcp_write_checks+0x44>
c000ed6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed70:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed73:	83 f8 07             	cmp    eax,0x7
c000ed76:	74 20                	je     c000ed98 <tcp_write_checks+0x44>
c000ed78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed7c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed7f:	83 f8 02             	cmp    eax,0x2
c000ed82:	74 14                	je     c000ed98 <tcp_write_checks+0x44>
c000ed84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ed88:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ed8b:	83 f8 03             	cmp    eax,0x3
c000ed8e:	74 08                	je     c000ed98 <tcp_write_checks+0x44>
c000ed90:	b0 f3                	mov    al,0xf3
c000ed92:	e9 f9 00 00 00       	jmp    c000ee90 <tcp_write_checks+0x13c>
c000ed97:	90                   	nop
c000ed98:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ed9d:	85 c0                	test   eax,eax
c000ed9f:	75 07                	jne    c000eda8 <tcp_write_checks+0x54>
c000eda1:	b0 00                	mov    al,0x0
c000eda3:	e9 e8 00 00 00       	jmp    c000ee90 <tcp_write_checks+0x13c>
c000eda8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edac:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000edb0:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000edb5:	0f b7 c0             	movzx  eax,ax
c000edb8:	39 c2                	cmp    edx,eax
c000edba:	76 1c                	jbe    c000edd8 <tcp_write_checks+0x84>
c000edbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edc0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000edc3:	83 c8 80             	or     eax,0xffffff80
c000edc6:	88 c2                	mov    dl,al
c000edc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edcc:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000edcf:	b0 ff                	mov    al,0xff
c000edd1:	e9 ba 00 00 00       	jmp    c000ee90 <tcp_write_checks+0x13c>
c000edd6:	66 90                	xchg   ax,ax
c000edd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eddc:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000eddf:	0f b7 c0             	movzx  eax,ax
c000ede2:	83 f8 01             	cmp    eax,0x1
c000ede5:	77 11                	ja     c000edf8 <tcp_write_checks+0xa4>
c000ede7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000edeb:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000edee:	0f b7 c0             	movzx  eax,ax
c000edf1:	3d fc ff 00 00       	cmp    eax,0xfffc
c000edf6:	76 28                	jbe    c000ee20 <tcp_write_checks+0xcc>
c000edf8:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000edfe:	83 c0 01             	add    eax,0x1
c000ee01:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000ee07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee0b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ee0e:	83 c8 80             	or     eax,0xffffff80
c000ee11:	88 c2                	mov    dl,al
c000ee13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee17:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ee1a:	b0 ff                	mov    al,0xff
c000ee1c:	eb 72                	jmp    c000ee90 <tcp_write_checks+0x13c>
c000ee1e:	66 90                	xchg   ax,ax
c000ee20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee24:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ee27:	0f b7 c0             	movzx  eax,ax
c000ee2a:	85 c0                	test   eax,eax
c000ee2c:	74 2e                	je     c000ee5c <tcp_write_checks+0x108>
c000ee2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee32:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ee35:	85 c0                	test   eax,eax
c000ee37:	75 53                	jne    c000ee8c <tcp_write_checks+0x138>
c000ee39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee3d:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ee40:	85 c0                	test   eax,eax
c000ee42:	75 48                	jne    c000ee8c <tcp_write_checks+0x138>
c000ee44:	83 ec 08             	sub    esp,0x8
c000ee47:	68 b0 05 03 c0       	push   0xc00305b0
c000ee4c:	68 66 f9 02 c0       	push   0xc002f966
c000ee51:	e8 7e 0c 01 00       	call   c001fad4 <CPrintf>
c000ee56:	83 c4 10             	add    esp,0x10
c000ee59:	eb 31                	jmp    c000ee8c <tcp_write_checks+0x138>
c000ee5b:	90                   	nop
c000ee5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee60:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000ee63:	85 c0                	test   eax,eax
c000ee65:	75 0d                	jne    c000ee74 <tcp_write_checks+0x120>
c000ee67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee6b:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ee6e:	85 c0                	test   eax,eax
c000ee70:	74 1a                	je     c000ee8c <tcp_write_checks+0x138>
c000ee72:	66 90                	xchg   ax,ax
c000ee74:	83 ec 08             	sub    esp,0x8
c000ee77:	68 ec 05 03 c0       	push   0xc00305ec
c000ee7c:	68 66 f9 02 c0       	push   0xc002f966
c000ee81:	e8 4e 0c 01 00       	call   c001fad4 <CPrintf>
c000ee86:	83 c4 10             	add    esp,0x10
c000ee89:	8d 76 00             	lea    esi,[esi+0x0]
c000ee8c:	b0 00                	mov    al,0x0
c000ee8e:	66 90                	xchg   ax,ax
c000ee90:	83 c4 1c             	add    esp,0x1c
c000ee93:	c3                   	ret    

c000ee94 <tcp_write>:
c000ee94:	56                   	push   esi
c000ee95:	53                   	push   ebx
c000ee96:	83 ec 54             	sub    esp,0x54
c000ee99:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000ee9d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000eea1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000eea6:	88 d0                	mov    al,dl
c000eea8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000eeac:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000eeb4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000eebc:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c000eec4:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000eecc:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c000eed4:	66 c7 44 24 3a 00 00 	mov    WORD PTR [esp+0x3a],0x0
c000eedb:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000eee0:	c6 44 24 2a 00       	mov    BYTE PTR [esp+0x2a],0x0
c000eee5:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000eeec:	66 c7 44 24 36 00 00 	mov    WORD PTR [esp+0x36],0x0
c000eef3:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
c000eef8:	75 1e                	jne    c000ef18 <tcp_write+0x84>
c000eefa:	83 ec 08             	sub    esp,0x8
c000eefd:	68 20 06 03 c0       	push   0xc0030620
c000ef02:	68 66 f9 02 c0       	push   0xc002f966
c000ef07:	e8 c8 0b 01 00       	call   c001fad4 <CPrintf>
c000ef0c:	83 c4 10             	add    esp,0x10
c000ef0f:	b0 f2                	mov    al,0xf2
c000ef11:	e9 16 08 00 00       	jmp    c000f72c <tcp_write+0x898>
c000ef16:	66 90                	xchg   ax,ax
c000ef18:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000ef1d:	83 ec 08             	sub    esp,0x8
c000ef20:	50                   	push   eax
c000ef21:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ef25:	e8 2a fe ff ff       	call   c000ed54 <tcp_write_checks>
c000ef2a:	83 c4 10             	add    esp,0x10
c000ef2d:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c000ef31:	0f be 44 24 29       	movsx  eax,BYTE PTR [esp+0x29]
c000ef36:	85 c0                	test   eax,eax
c000ef38:	74 0a                	je     c000ef44 <tcp_write+0xb0>
c000ef3a:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
c000ef3e:	e9 e9 07 00 00       	jmp    c000f72c <tcp_write+0x898>
c000ef43:	90                   	nop
c000ef44:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef48:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000ef4b:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000ef50:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef54:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef57:	85 c0                	test   eax,eax
c000ef59:	0f 84 79 02 00 00    	je     c000f1d8 <tcp_write+0x344>
c000ef5f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef63:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ef66:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ef6a:	eb 0c                	jmp    c000ef78 <tcp_write+0xe4>
c000ef6c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef70:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef72:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ef76:	66 90                	xchg   ax,ax
c000ef78:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef7e:	85 c0                	test   eax,eax
c000ef80:	75 ea                	jne    c000ef6c <tcp_write+0xd8>
c000ef82:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef86:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000ef89:	0f b6 c0             	movzx  eax,al
c000ef8c:	c1 e0 02             	shl    eax,0x2
c000ef8f:	83 e0 04             	and    eax,0x4
c000ef92:	89 c2                	mov    edx,eax
c000ef94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ef98:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000ef9b:	0f b6 c0             	movzx  eax,al
c000ef9e:	83 e0 02             	and    eax,0x2
c000efa1:	74 09                	je     c000efac <tcp_write+0x118>
c000efa3:	b8 0c 00 00 00       	mov    eax,0xc
c000efa8:	eb 0a                	jmp    c000efb4 <tcp_write+0x120>
c000efaa:	66 90                	xchg   ax,ax
c000efac:	b8 00 00 00 00       	mov    eax,0x0
c000efb1:	8d 76 00             	lea    esi,[esi+0x0]
c000efb4:	01 d0                	add    eax,edx
c000efb6:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c000efbb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efbf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000efc2:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000efc6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000efc9:	66 8b 4c 24 26       	mov    cx,WORD PTR [esp+0x26]
c000efce:	01 ca                	add    edx,ecx
c000efd0:	29 d0                	sub    eax,edx
c000efd2:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000efd7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000efdb:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000efdf:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000efe4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000efe9:	0f b7 c0             	movzx  eax,ax
c000efec:	85 c0                	test   eax,eax
c000efee:	0f 84 84 00 00 00    	je     c000f078 <tcp_write+0x1e4>
c000eff4:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000eff9:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000effe:	39 c2                	cmp    edx,eax
c000f000:	76 16                	jbe    c000f018 <tcp_write+0x184>
c000f002:	83 ec 08             	sub    esp,0x8
c000f005:	68 54 06 03 c0       	push   0xc0030654
c000f00a:	68 66 f9 02 c0       	push   0xc002f966
c000f00f:	e8 c0 0a 01 00       	call   c001fad4 <CPrintf>
c000f014:	83 c4 10             	add    esp,0x10
c000f017:	90                   	nop
c000f018:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f01c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f020:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f025:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f029:	0f b7 d8             	movzx  ebx,ax
c000f02c:	0f b7 ca             	movzx  ecx,dx
c000f02f:	39 cb                	cmp    ebx,ecx
c000f031:	76 05                	jbe    c000f038 <tcp_write+0x1a4>
c000f033:	89 d0                	mov    eax,edx
c000f035:	8d 76 00             	lea    esi,[esi+0x0]
c000f038:	66 89 44 24 36       	mov    WORD PTR [esp+0x36],ax
c000f03d:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f042:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f047:	01 d0                	add    eax,edx
c000f049:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f04e:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c000f053:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f058:	89 d6                	mov    esi,edx
c000f05a:	29 c6                	sub    esi,eax
c000f05c:	89 f0                	mov    eax,esi
c000f05e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000f063:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000f067:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c000f06c:	89 d6                	mov    esi,edx
c000f06e:	29 c6                	sub    esi,eax
c000f070:	89 f0                	mov    eax,esi
c000f072:	66 89 44 24 34       	mov    WORD PTR [esp+0x34],ax
c000f077:	90                   	nop
c000f078:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f07d:	0f b7 c0             	movzx  eax,ax
c000f080:	85 c0                	test   eax,eax
c000f082:	74 24                	je     c000f0a8 <tcp_write+0x214>
c000f084:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f089:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f08e:	39 c2                	cmp    edx,eax
c000f090:	74 16                	je     c000f0a8 <tcp_write+0x214>
c000f092:	83 ec 08             	sub    esp,0x8
c000f095:	68 18 08 03 c0       	push   0xc0030818
c000f09a:	68 66 f9 02 c0       	push   0xc002f966
c000f09f:	e8 30 0a 01 00       	call   c001fad4 <CPrintf>
c000f0a4:	83 c4 10             	add    esp,0x10
c000f0a7:	90                   	nop
c000f0a8:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f0ad:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f0b2:	39 c2                	cmp    edx,eax
c000f0b4:	0f 83 ce 03 00 00    	jae    c000f488 <tcp_write+0x5f4>
c000f0ba:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c000f0bf:	85 c0                	test   eax,eax
c000f0c1:	0f 84 c1 03 00 00    	je     c000f488 <tcp_write+0x5f4>
c000f0c7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0cb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f0ce:	0f b7 c0             	movzx  eax,ax
c000f0d1:	85 c0                	test   eax,eax
c000f0d3:	0f 84 af 03 00 00    	je     c000f488 <tcp_write+0x5f4>
c000f0d9:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c000f0de:	0f b7 44 24 3a       	movzx  eax,WORD PTR [esp+0x3a]
c000f0e3:	29 c2                	sub    edx,eax
c000f0e5:	89 d0                	mov    eax,edx
c000f0e7:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f0ec:	39 d0                	cmp    eax,edx
c000f0ee:	7e 04                	jle    c000f0f4 <tcp_write+0x260>
c000f0f0:	89 d0                	mov    eax,edx
c000f0f2:	66 90                	xchg   ax,ax
c000f0f4:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c000f0f9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f0fd:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f101:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f106:	83 e0 01             	and    eax,0x1
c000f109:	74 61                	je     c000f16c <tcp_write+0x2d8>
c000f10b:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c000f110:	0f b7 54 24 34       	movzx  edx,WORD PTR [esp+0x34]
c000f115:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f11a:	83 ec 04             	sub    esp,0x4
c000f11d:	6a 01                	push   0x1
c000f11f:	51                   	push   ecx
c000f120:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f124:	8d 4c 24 26          	lea    ecx,[esp+0x26]
c000f128:	51                   	push   ecx
c000f129:	52                   	push   edx
c000f12a:	50                   	push   eax
c000f12b:	6a 03                	push   0x3
c000f12d:	e8 f2 fa ff ff       	call   c000ec24 <tcp_pbuf_prealloc>
c000f132:	83 c4 20             	add    esp,0x20
c000f135:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f139:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f13e:	0f 84 44 05 00 00    	je     c000f688 <tcp_write+0x7f4>
c000f144:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000f149:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f14e:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f152:	01 c1                	add    ecx,eax
c000f154:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f158:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f15b:	83 ec 04             	sub    esp,0x4
c000f15e:	52                   	push   edx
c000f15f:	51                   	push   ecx
c000f160:	50                   	push   eax
c000f161:	e8 14 12 ff ff       	call   c000037a <memcpy>
c000f166:	83 c4 10             	add    esp,0x10
c000f169:	eb 39                	jmp    c000f1a4 <tcp_write+0x310>
c000f16b:	90                   	nop
c000f16c:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c000f171:	83 ec 04             	sub    esp,0x4
c000f174:	6a 01                	push   0x1
c000f176:	50                   	push   eax
c000f177:	6a 03                	push   0x3
c000f179:	e8 fa 92 ff ff       	call   c0008478 <pbuf_alloc>
c000f17e:	83 c4 10             	add    esp,0x10
c000f181:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f185:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f18a:	0f 84 fc 04 00 00    	je     c000f68c <tcp_write+0x7f8>
c000f190:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f195:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f199:	01 c2                	add    edx,eax
c000f19b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f19f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f1a2:	66 90                	xchg   ax,ax
c000f1a4:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f1a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f1ad:	01 d0                	add    eax,edx
c000f1af:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f1b4:	83 ec 0c             	sub    esp,0xc
c000f1b7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f1bb:	e8 b4 98 ff ff       	call   c0008a74 <pbuf_clen>
c000f1c0:	83 c4 10             	add    esp,0x10
c000f1c3:	0f b6 c0             	movzx  eax,al
c000f1c6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f1ca:	01 d0                	add    eax,edx
c000f1cc:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f1d1:	e9 b2 02 00 00       	jmp    c000f488 <tcp_write+0x5f4>
c000f1d6:	66 90                	xchg   ax,ax
c000f1d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f1dc:	66 8b 40 76          	mov    ax,WORD PTR [eax+0x76]
c000f1e0:	0f b7 c0             	movzx  eax,ax
c000f1e3:	85 c0                	test   eax,eax
c000f1e5:	0f 84 9d 02 00 00    	je     c000f488 <tcp_write+0x5f4>
c000f1eb:	83 ec 08             	sub    esp,0x8
c000f1ee:	68 74 06 03 c0       	push   0xc0030674
c000f1f3:	68 66 f9 02 c0       	push   0xc002f966
c000f1f8:	e8 d7 08 01 00       	call   c001fad4 <CPrintf>
c000f1fd:	83 c4 10             	add    esp,0x10
c000f200:	e9 83 02 00 00       	jmp    c000f488 <tcp_write+0x5f4>
c000f205:	8d 76 00             	lea    esi,[esi+0x0]
c000f208:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f20c:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c000f211:	89 d6                	mov    esi,edx
c000f213:	29 c6                	sub    esi,eax
c000f215:	89 f0                	mov    eax,esi
c000f217:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c000f21c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f220:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000f223:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f228:	89 d3                	mov    ebx,edx
c000f22a:	29 c3                	sub    ebx,eax
c000f22c:	89 d8                	mov    eax,ebx
c000f22e:	66 89 44 24 20       	mov    WORD PTR [esp+0x20],ax
c000f233:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f237:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c000f23c:	0f b7 d8             	movzx  ebx,ax
c000f23f:	0f b7 ca             	movzx  ecx,dx
c000f242:	39 cb                	cmp    ebx,ecx
c000f244:	76 02                	jbe    c000f248 <tcp_write+0x3b4>
c000f246:	89 d0                	mov    eax,edx
c000f248:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c000f24d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f252:	83 e0 01             	and    eax,0x1
c000f255:	0f 84 b1 00 00 00    	je     c000f30c <tcp_write+0x478>
c000f25b:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f260:	0f 94 c0             	sete   al
c000f263:	0f b6 f0             	movzx  esi,al
c000f266:	0f b6 5c 24 08       	movzx  ebx,BYTE PTR [esp+0x8]
c000f26b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f26f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f272:	0f b7 c8             	movzx  ecx,ax
c000f275:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f27a:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c000f27f:	01 d0                	add    eax,edx
c000f281:	0f b7 c0             	movzx  eax,ax
c000f284:	83 ec 04             	sub    esp,0x4
c000f287:	56                   	push   esi
c000f288:	53                   	push   ebx
c000f289:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f28d:	8d 54 24 26          	lea    edx,[esp+0x26]
c000f291:	52                   	push   edx
c000f292:	51                   	push   ecx
c000f293:	50                   	push   eax
c000f294:	6a 00                	push   0x0
c000f296:	e8 89 f9 ff ff       	call   c000ec24 <tcp_pbuf_prealloc>
c000f29b:	83 c4 20             	add    esp,0x20
c000f29e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2a2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f2a7:	0f 84 e3 03 00 00    	je     c000f690 <tcp_write+0x7fc>
c000f2ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f2b1:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f2b5:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c000f2ba:	0f b7 c0             	movzx  eax,ax
c000f2bd:	39 c2                	cmp    edx,eax
c000f2bf:	76 17                	jbe    c000f2d8 <tcp_write+0x444>
c000f2c1:	83 ec 08             	sub    esp,0x8
c000f2c4:	68 a4 06 03 c0       	push   0xc00306a4
c000f2c9:	68 66 f9 02 c0       	push   0xc002f966
c000f2ce:	e8 01 08 01 00       	call   c001fad4 <CPrintf>
c000f2d3:	83 c4 10             	add    esp,0x10
c000f2d6:	66 90                	xchg   ax,ax
c000f2d8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f2dd:	0f b7 4c 24 3a       	movzx  ecx,WORD PTR [esp+0x3a]
c000f2e2:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000f2e6:	01 d1                	add    ecx,edx
c000f2e8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f2ec:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000f2ef:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000f2f4:	01 da                	add    edx,ebx
c000f2f6:	83 ec 04             	sub    esp,0x4
c000f2f9:	50                   	push   eax
c000f2fa:	51                   	push   ecx
c000f2fb:	52                   	push   edx
c000f2fc:	e8 79 10 ff ff       	call   c000037a <memcpy>
c000f301:	83 c4 10             	add    esp,0x10
c000f304:	e9 a7 00 00 00       	jmp    c000f3b0 <tcp_write+0x51c>
c000f309:	8d 76 00             	lea    esi,[esi+0x0]
c000f30c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f311:	0f b7 c0             	movzx  eax,ax
c000f314:	85 c0                	test   eax,eax
c000f316:	74 18                	je     c000f330 <tcp_write+0x49c>
c000f318:	83 ec 08             	sub    esp,0x8
c000f31b:	68 36 08 03 c0       	push   0xc0030836
c000f320:	68 66 f9 02 c0       	push   0xc002f966
c000f325:	e8 aa 07 01 00       	call   c001fad4 <CPrintf>
c000f32a:	83 c4 10             	add    esp,0x10
c000f32d:	8d 76 00             	lea    esi,[esi+0x0]
c000f330:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c000f335:	83 ec 04             	sub    esp,0x4
c000f338:	6a 01                	push   0x1
c000f33a:	50                   	push   eax
c000f33b:	6a 00                	push   0x0
c000f33d:	e8 36 91 ff ff       	call   c0008478 <pbuf_alloc>
c000f342:	83 c4 10             	add    esp,0x10
c000f345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f349:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f34e:	0f 84 40 03 00 00    	je     c000f694 <tcp_write+0x800>
c000f354:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f359:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000f35d:	01 c2                	add    edx,eax
c000f35f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f363:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f366:	0f b6 44 24 2b       	movzx  eax,BYTE PTR [esp+0x2b]
c000f36b:	83 ec 04             	sub    esp,0x4
c000f36e:	6a 00                	push   0x0
c000f370:	50                   	push   eax
c000f371:	6a 00                	push   0x0
c000f373:	e8 00 91 ff ff       	call   c0008478 <pbuf_alloc>
c000f378:	83 c4 10             	add    esp,0x10
c000f37b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f37f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c000f384:	75 16                	jne    c000f39c <tcp_write+0x508>
c000f386:	83 ec 0c             	sub    esp,0xc
c000f389:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f38d:	e8 0e 8f ff ff       	call   c00082a0 <pbuf_free>
c000f392:	83 c4 10             	add    esp,0x10
c000f395:	e9 02 03 00 00       	jmp    c000f69c <tcp_write+0x808>
c000f39a:	66 90                	xchg   ax,ax
c000f39c:	83 ec 08             	sub    esp,0x8
c000f39f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f3a7:	e8 2c 97 ff ff       	call   c0008ad8 <pbuf_cat>
c000f3ac:	83 c4 10             	add    esp,0x10
c000f3af:	90                   	nop
c000f3b0:	83 ec 0c             	sub    esp,0xc
c000f3b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f3b7:	e8 b8 96 ff ff       	call   c0008a74 <pbuf_clen>
c000f3bc:	83 c4 10             	add    esp,0x10
c000f3bf:	0f b6 c0             	movzx  eax,al
c000f3c2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f3c6:	01 d0                	add    eax,edx
c000f3c8:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c000f3cd:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f3d2:	83 f8 02             	cmp    eax,0x2
c000f3d5:	77 0d                	ja     c000f3e4 <tcp_write+0x550>
c000f3d7:	0f b7 44 24 38       	movzx  eax,WORD PTR [esp+0x38]
c000f3dc:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f3e1:	76 15                	jbe    c000f3f8 <tcp_write+0x564>
c000f3e3:	90                   	nop
c000f3e4:	83 ec 0c             	sub    esp,0xc
c000f3e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f3eb:	e8 b0 8e ff ff       	call   c00082a0 <pbuf_free>
c000f3f0:	83 c4 10             	add    esp,0x10
c000f3f3:	e9 a4 02 00 00       	jmp    c000f69c <tcp_write+0x808>
c000f3f8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c000f3fd:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f401:	8b 4a 6c             	mov    ecx,DWORD PTR [edx+0x6c]
c000f404:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f409:	01 ca                	add    edx,ecx
c000f40b:	83 ec 0c             	sub    esp,0xc
c000f40e:	50                   	push   eax
c000f40f:	52                   	push   edx
c000f410:	6a 00                	push   0x0
c000f412:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f416:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000f41a:	e8 61 f6 ff ff       	call   c000ea80 <tcp_create_segment>
c000f41f:	83 c4 20             	add    esp,0x20
c000f422:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f426:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f42b:	0f 84 67 02 00 00    	je     c000f698 <tcp_write+0x804>
c000f431:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f436:	75 0c                	jne    c000f444 <tcp_write+0x5b0>
c000f438:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f43c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f440:	eb 2a                	jmp    c000f46c <tcp_write+0x5d8>
c000f442:	66 90                	xchg   ax,ax
c000f444:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f449:	75 15                	jne    c000f460 <tcp_write+0x5cc>
c000f44b:	83 ec 08             	sub    esp,0x8
c000f44e:	68 44 08 03 c0       	push   0xc0030844
c000f453:	68 66 f9 02 c0       	push   0xc002f966
c000f458:	e8 77 06 01 00       	call   c001fad4 <CPrintf>
c000f45d:	83 c4 10             	add    esp,0x10
c000f460:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f464:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f468:	89 10                	mov    DWORD PTR [eax],edx
c000f46a:	66 90                	xchg   ax,ax
c000f46c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f470:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f474:	66 8b 54 24 3a       	mov    dx,WORD PTR [esp+0x3a]
c000f479:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c000f47e:	01 d0                	add    eax,edx
c000f480:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c000f485:	8d 76 00             	lea    esi,[esi+0x0]
c000f488:	0f b7 54 24 3a       	movzx  edx,WORD PTR [esp+0x3a]
c000f48d:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f492:	39 c2                	cmp    edx,eax
c000f494:	0f 82 6e fd ff ff    	jb     c000f208 <tcp_write+0x374>
c000f49a:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c000f49f:	85 c0                	test   eax,eax
c000f4a1:	0f 84 9d 00 00 00    	je     c000f544 <tcp_write+0x6b0>
c000f4a7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f4ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f4ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f4b2:	eb 70                	jmp    c000f524 <tcp_write+0x690>
c000f4b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f4bb:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f4c0:	01 d0                	add    eax,edx
c000f4c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f4c6:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f4ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d0:	85 c0                	test   eax,eax
c000f4d2:	75 44                	jne    c000f518 <tcp_write+0x684>
c000f4d4:	0f b7 54 24 36       	movzx  edx,WORD PTR [esp+0x36]
c000f4d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4dd:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000f4e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4e4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f4e8:	0f b7 c0             	movzx  eax,ax
c000f4eb:	01 c8                	add    eax,ecx
c000f4ed:	83 ec 04             	sub    esp,0x4
c000f4f0:	52                   	push   edx
c000f4f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000f4f5:	50                   	push   eax
c000f4f6:	e8 7f 0e ff ff       	call   c000037a <memcpy>
c000f4fb:	83 c4 10             	add    esp,0x10
c000f4fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f502:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c000f506:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f50b:	01 d0                	add    eax,edx
c000f50d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f511:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c000f515:	8d 76 00             	lea    esi,[esi+0x0]
c000f518:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f51c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f51e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f522:	66 90                	xchg   ax,ax
c000f524:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000f529:	75 89                	jne    c000f4b4 <tcp_write+0x620>
c000f52b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f52f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f532:	66 8b 54 24 36       	mov    dx,WORD PTR [esp+0x36]
c000f537:	01 d0                	add    eax,edx
c000f539:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f53d:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f541:	8d 76 00             	lea    esi,[esi+0x0]
c000f544:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000f549:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f54d:	66 89 42 76          	mov    WORD PTR [edx+0x76],ax
c000f551:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f556:	74 4c                	je     c000f5a4 <tcp_write+0x710>
c000f558:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f55d:	75 15                	jne    c000f574 <tcp_write+0x6e0>
c000f55f:	83 ec 08             	sub    esp,0x8
c000f562:	68 e4 06 03 c0       	push   0xc00306e4
c000f567:	68 66 f9 02 c0       	push   0xc002f966
c000f56c:	e8 63 05 01 00       	call   c001fad4 <CPrintf>
c000f571:	83 c4 10             	add    esp,0x10
c000f574:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f57b:	83 ec 08             	sub    esp,0x8
c000f57e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000f582:	50                   	push   eax
c000f583:	e8 50 95 ff ff       	call   c0008ad8 <pbuf_cat>
c000f588:	83 c4 10             	add    esp,0x10
c000f58b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f58f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000f592:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f596:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f599:	01 d0                	add    eax,edx
c000f59b:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000f59f:	66 89 42 08          	mov    WORD PTR [edx+0x8],ax
c000f5a3:	90                   	nop
c000f5a4:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000f5a9:	75 0d                	jne    c000f5b8 <tcp_write+0x724>
c000f5ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f5b3:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f5b6:	eb 0c                	jmp    c000f5c4 <tcp_write+0x730>
c000f5b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f5bc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f5c0:	89 10                	mov    DWORD PTR [eax],edx
c000f5c2:	66 90                	xchg   ax,ax
c000f5c4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5c8:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f5cb:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c000f5d0:	01 c2                	add    edx,eax
c000f5d2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5d6:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f5d9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f5dd:	66 8b 50 72          	mov    dx,WORD PTR [eax+0x72]
c000f5e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f5e5:	89 d6                	mov    esi,edx
c000f5e7:	29 c6                	sub    esi,eax
c000f5e9:	89 f0                	mov    eax,esi
c000f5eb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f5ef:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f5f3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000f5f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f5fb:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f5ff:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f603:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f606:	0f b7 c0             	movzx  eax,ax
c000f609:	85 c0                	test   eax,eax
c000f60b:	74 2b                	je     c000f638 <tcp_write+0x7a4>
c000f60d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f611:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f614:	85 c0                	test   eax,eax
c000f616:	75 20                	jne    c000f638 <tcp_write+0x7a4>
c000f618:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f61c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f61f:	85 c0                	test   eax,eax
c000f621:	75 15                	jne    c000f638 <tcp_write+0x7a4>
c000f623:	83 ec 08             	sub    esp,0x8
c000f626:	68 55 08 03 c0       	push   0xc0030855
c000f62b:	68 66 f9 02 c0       	push   0xc002f966
c000f630:	e8 9f 04 01 00       	call   c001fad4 <CPrintf>
c000f635:	83 c4 10             	add    esp,0x10
c000f638:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000f63d:	74 41                	je     c000f680 <tcp_write+0x7ec>
c000f63f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f643:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f646:	85 c0                	test   eax,eax
c000f648:	74 36                	je     c000f680 <tcp_write+0x7ec>
c000f64a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000f64f:	83 e0 02             	and    eax,0x2
c000f652:	75 2c                	jne    c000f680 <tcp_write+0x7ec>
c000f654:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f658:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f65b:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000f65f:	83 ec 0c             	sub    esp,0xc
c000f662:	6a 08                	push   0x8
c000f664:	e8 7f 15 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000f669:	83 c4 10             	add    esp,0x10
c000f66c:	89 c1                	mov    ecx,eax
c000f66e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f672:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f675:	89 d8                	mov    eax,ebx
c000f677:	09 c8                	or     eax,ecx
c000f679:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000f67d:	8d 76 00             	lea    esi,[esi+0x0]
c000f680:	b0 00                	mov    al,0x0
c000f682:	e9 a5 00 00 00       	jmp    c000f72c <tcp_write+0x898>
c000f687:	90                   	nop
c000f688:	90                   	nop
c000f689:	eb 11                	jmp    c000f69c <tcp_write+0x808>
c000f68b:	90                   	nop
c000f68c:	90                   	nop
c000f68d:	eb 0d                	jmp    c000f69c <tcp_write+0x808>
c000f68f:	90                   	nop
c000f690:	90                   	nop
c000f691:	eb 09                	jmp    c000f69c <tcp_write+0x808>
c000f693:	90                   	nop
c000f694:	90                   	nop
c000f695:	eb 05                	jmp    c000f69c <tcp_write+0x808>
c000f697:	90                   	nop
c000f698:	90                   	nop
c000f699:	8d 76 00             	lea    esi,[esi+0x0]
c000f69c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6a0:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f6a3:	83 c8 80             	or     eax,0xffffff80
c000f6a6:	88 c2                	mov    dl,al
c000f6a8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6ac:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f6af:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f6b5:	83 c0 01             	add    eax,0x1
c000f6b8:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f6be:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c000f6c3:	74 0f                	je     c000f6d4 <tcp_write+0x840>
c000f6c5:	83 ec 0c             	sub    esp,0xc
c000f6c8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c000f6cc:	e8 cf 8b ff ff       	call   c00082a0 <pbuf_free>
c000f6d1:	83 c4 10             	add    esp,0x10
c000f6d4:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c000f6d9:	74 11                	je     c000f6ec <tcp_write+0x858>
c000f6db:	83 ec 0c             	sub    esp,0xc
c000f6de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000f6e2:	e8 75 a8 ff ff       	call   c0009f5c <tcp_segs_free>
c000f6e7:	83 c4 10             	add    esp,0x10
c000f6ea:	66 90                	xchg   ax,ax
c000f6ec:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6f0:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f6f3:	0f b7 c0             	movzx  eax,ax
c000f6f6:	85 c0                	test   eax,eax
c000f6f8:	74 2e                	je     c000f728 <tcp_write+0x894>
c000f6fa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f6fe:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f701:	85 c0                	test   eax,eax
c000f703:	75 23                	jne    c000f728 <tcp_write+0x894>
c000f705:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f709:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f70c:	85 c0                	test   eax,eax
c000f70e:	75 18                	jne    c000f728 <tcp_write+0x894>
c000f710:	83 ec 08             	sub    esp,0x8
c000f713:	68 55 08 03 c0       	push   0xc0030855
c000f718:	68 66 f9 02 c0       	push   0xc002f966
c000f71d:	e8 b2 03 01 00       	call   c001fad4 <CPrintf>
c000f722:	83 c4 10             	add    esp,0x10
c000f725:	8d 76 00             	lea    esi,[esi+0x0]
c000f728:	b0 ff                	mov    al,0xff
c000f72a:	66 90                	xchg   ax,ax
c000f72c:	83 c4 54             	add    esp,0x54
c000f72f:	5b                   	pop    ebx
c000f730:	5e                   	pop    esi
c000f731:	c3                   	ret    
c000f732:	66 90                	xchg   ax,ax

c000f734 <tcp_enqueue_flags>:
c000f734:	83 ec 3c             	sub    esp,0x3c
c000f737:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f73b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000f73f:	c6 44 24 2f 00       	mov    BYTE PTR [esp+0x2f],0x0
c000f744:	c6 44 24 27 00       	mov    BYTE PTR [esp+0x27],0x0
c000f749:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f74e:	83 e0 03             	and    eax,0x3
c000f751:	75 15                	jne    c000f768 <tcp_enqueue_flags+0x34>
c000f753:	83 ec 08             	sub    esp,0x8
c000f756:	68 1c 07 03 c0       	push   0xc003071c
c000f75b:	68 66 f9 02 c0       	push   0xc002f966
c000f760:	e8 6f 03 01 00       	call   c001fad4 <CPrintf>
c000f765:	83 c4 10             	add    esp,0x10
c000f768:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f76c:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f76f:	0f b7 c0             	movzx  eax,ax
c000f772:	83 f8 01             	cmp    eax,0x1
c000f775:	77 11                	ja     c000f788 <tcp_enqueue_flags+0x54>
c000f777:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f77b:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f77e:	0f b7 c0             	movzx  eax,ax
c000f781:	3d fc ff 00 00       	cmp    eax,0xfffc
c000f786:	76 2c                	jbe    c000f7b4 <tcp_enqueue_flags+0x80>
c000f788:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f78e:	83 c0 01             	add    eax,0x1
c000f791:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f797:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f79b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f79e:	83 c8 80             	or     eax,0xffffff80
c000f7a1:	88 c2                	mov    dl,al
c000f7a3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7a7:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f7aa:	b0 ff                	mov    al,0xff
c000f7ac:	e9 6b 02 00 00       	jmp    c000fa1c <tcp_enqueue_flags+0x2e8>
c000f7b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f7b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f7b9:	83 e0 02             	and    eax,0x2
c000f7bc:	74 06                	je     c000f7c4 <tcp_enqueue_flags+0x90>
c000f7be:	c6 44 24 2f 01       	mov    BYTE PTR [esp+0x2f],0x1
c000f7c3:	90                   	nop
c000f7c4:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f7c9:	c1 e0 02             	shl    eax,0x2
c000f7cc:	83 e0 04             	and    eax,0x4
c000f7cf:	88 c2                	mov    dl,al
c000f7d1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c000f7d6:	83 e0 02             	and    eax,0x2
c000f7d9:	74 05                	je     c000f7e0 <tcp_enqueue_flags+0xac>
c000f7db:	b0 0c                	mov    al,0xc
c000f7dd:	eb 05                	jmp    c000f7e4 <tcp_enqueue_flags+0xb0>
c000f7df:	90                   	nop
c000f7e0:	b0 00                	mov    al,0x0
c000f7e2:	66 90                	xchg   ax,ax
c000f7e4:	01 d0                	add    eax,edx
c000f7e6:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c000f7ea:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f7ee:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f7f2:	0f b7 c0             	movzx  eax,ax
c000f7f5:	85 c0                	test   eax,eax
c000f7f7:	75 17                	jne    c000f810 <tcp_enqueue_flags+0xdc>
c000f7f9:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f7ff:	83 c0 01             	add    eax,0x1
c000f802:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f808:	b0 ff                	mov    al,0xff
c000f80a:	e9 0d 02 00 00       	jmp    c000fa1c <tcp_enqueue_flags+0x2e8>
c000f80f:	90                   	nop
c000f810:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f815:	83 ec 04             	sub    esp,0x4
c000f818:	6a 00                	push   0x0
c000f81a:	50                   	push   eax
c000f81b:	6a 00                	push   0x0
c000f81d:	e8 56 8c ff ff       	call   c0008478 <pbuf_alloc>
c000f822:	83 c4 10             	add    esp,0x10
c000f825:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f829:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000f82e:	75 2c                	jne    c000f85c <tcp_enqueue_flags+0x128>
c000f830:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f834:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f837:	83 c8 80             	or     eax,0xffffff80
c000f83a:	88 c2                	mov    dl,al
c000f83c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f840:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f843:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f849:	83 c0 01             	add    eax,0x1
c000f84c:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f852:	b0 ff                	mov    al,0xff
c000f854:	e9 c3 01 00 00       	jmp    c000fa1c <tcp_enqueue_flags+0x2e8>
c000f859:	8d 76 00             	lea    esi,[esi+0x0]
c000f85c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f860:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000f864:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c000f869:	0f b7 d2             	movzx  edx,dx
c000f86c:	0f b7 c0             	movzx  eax,ax
c000f86f:	39 c2                	cmp    edx,eax
c000f871:	73 15                	jae    c000f888 <tcp_enqueue_flags+0x154>
c000f873:	83 ec 08             	sub    esp,0x8
c000f876:	68 74 07 03 c0       	push   0xc0030774
c000f87b:	68 66 f9 02 c0       	push   0xc002f966
c000f880:	e8 4f 02 01 00       	call   c001fad4 <CPrintf>
c000f885:	83 c4 10             	add    esp,0x10
c000f888:	0f b6 4c 24 2f       	movzx  ecx,BYTE PTR [esp+0x2f]
c000f88d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f891:	8b 50 6c             	mov    edx,DWORD PTR [eax+0x6c]
c000f894:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f899:	83 ec 0c             	sub    esp,0xc
c000f89c:	51                   	push   ecx
c000f89d:	52                   	push   edx
c000f89e:	50                   	push   eax
c000f89f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000f8a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000f8a7:	e8 d4 f1 ff ff       	call   c000ea80 <tcp_create_segment>
c000f8ac:	83 c4 20             	add    esp,0x20
c000f8af:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f8b3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f8b8:	75 2a                	jne    c000f8e4 <tcp_enqueue_flags+0x1b0>
c000f8ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8be:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f8c1:	83 c8 80             	or     eax,0xffffff80
c000f8c4:	88 c2                	mov    dl,al
c000f8c6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f8ca:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f8cd:	66 a1 bc 67 03 c0    	mov    ax,ds:0xc00367bc
c000f8d3:	83 c0 01             	add    eax,0x1
c000f8d6:	66 a3 bc 67 03 c0    	mov    ds:0xc00367bc,ax
c000f8dc:	b0 ff                	mov    al,0xff
c000f8de:	e9 39 01 00 00       	jmp    c000fa1c <tcp_enqueue_flags+0x2e8>
c000f8e3:	90                   	nop
c000f8e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f8e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f8eb:	0f b7 c0             	movzx  eax,ax
c000f8ee:	85 c0                	test   eax,eax
c000f8f0:	74 16                	je     c000f908 <tcp_enqueue_flags+0x1d4>
c000f8f2:	83 ec 08             	sub    esp,0x8
c000f8f5:	68 b0 07 03 c0       	push   0xc00307b0
c000f8fa:	68 66 f9 02 c0       	push   0xc002f966
c000f8ff:	e8 d0 01 01 00       	call   c001fad4 <CPrintf>
c000f904:	83 c4 10             	add    esp,0x10
c000f907:	90                   	nop
c000f908:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f90c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f90f:	85 c0                	test   eax,eax
c000f911:	75 0d                	jne    c000f920 <tcp_enqueue_flags+0x1ec>
c000f913:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f917:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f91b:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000f91e:	eb 30                	jmp    c000f950 <tcp_enqueue_flags+0x21c>
c000f920:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f924:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f927:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f92b:	eb 0f                	jmp    c000f93c <tcp_enqueue_flags+0x208>
c000f92d:	8d 76 00             	lea    esi,[esi+0x0]
c000f930:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f934:	8b 00                	mov    eax,DWORD PTR [eax]
c000f936:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f93a:	66 90                	xchg   ax,ax
c000f93c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f940:	8b 00                	mov    eax,DWORD PTR [eax]
c000f942:	85 c0                	test   eax,eax
c000f944:	75 ea                	jne    c000f930 <tcp_enqueue_flags+0x1fc>
c000f946:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f94a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f94e:	89 10                	mov    DWORD PTR [eax],edx
c000f950:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f954:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c000f95a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f95f:	83 e0 02             	and    eax,0x2
c000f962:	75 0c                	jne    c000f970 <tcp_enqueue_flags+0x23c>
c000f964:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f969:	83 e0 01             	and    eax,0x1
c000f96c:	74 26                	je     c000f994 <tcp_enqueue_flags+0x260>
c000f96e:	66 90                	xchg   ax,ax
c000f970:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f974:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
c000f977:	8d 50 01             	lea    edx,[eax+0x1]
c000f97a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f97e:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
c000f981:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f985:	66 8b 40 72          	mov    ax,WORD PTR [eax+0x72]
c000f989:	83 e8 01             	sub    eax,0x1
c000f98c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f990:	66 89 42 72          	mov    WORD PTR [edx+0x72],ax
c000f994:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000f999:	83 e0 01             	and    eax,0x1
c000f99c:	74 16                	je     c000f9b4 <tcp_enqueue_flags+0x280>
c000f99e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9a2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9a5:	83 c8 20             	or     eax,0x20
c000f9a8:	88 c2                	mov    dl,al
c000f9aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ae:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000f9b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f9b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f9bb:	83 ec 0c             	sub    esp,0xc
c000f9be:	50                   	push   eax
c000f9bf:	e8 b0 90 ff ff       	call   c0008a74 <pbuf_clen>
c000f9c4:	83 c4 10             	add    esp,0x10
c000f9c7:	88 c1                	mov    cl,al
c000f9c9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9cd:	8b 50 74             	mov    edx,DWORD PTR [eax+0x74]
c000f9d0:	0f b6 c1             	movzx  eax,cl
c000f9d3:	01 d0                	add    eax,edx
c000f9d5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f9d9:	66 89 42 74          	mov    WORD PTR [edx+0x74],ax
c000f9dd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9e1:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
c000f9e4:	0f b7 c0             	movzx  eax,ax
c000f9e7:	85 c0                	test   eax,eax
c000f9e9:	74 2d                	je     c000fa18 <tcp_enqueue_flags+0x2e4>
c000f9eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9ef:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000f9f2:	85 c0                	test   eax,eax
c000f9f4:	75 22                	jne    c000fa18 <tcp_enqueue_flags+0x2e4>
c000f9f6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f9fa:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000f9fd:	85 c0                	test   eax,eax
c000f9ff:	75 17                	jne    c000fa18 <tcp_enqueue_flags+0x2e4>
c000fa01:	83 ec 08             	sub    esp,0x8
c000fa04:	68 dc 07 03 c0       	push   0xc00307dc
c000fa09:	68 66 f9 02 c0       	push   0xc002f966
c000fa0e:	e8 c1 00 01 00       	call   c001fad4 <CPrintf>
c000fa13:	83 c4 10             	add    esp,0x10
c000fa16:	66 90                	xchg   ax,ax
c000fa18:	b0 00                	mov    al,0x0
c000fa1a:	66 90                	xchg   ax,ax
c000fa1c:	83 c4 3c             	add    esp,0x3c
c000fa1f:	c3                   	ret    

c000fa20 <tcp_send_fin>:
c000fa20:	53                   	push   ebx
c000fa21:	83 ec 18             	sub    esp,0x18
c000fa24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa28:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa2b:	85 c0                	test   eax,eax
c000fa2d:	74 75                	je     c000faa4 <tcp_send_fin+0x84>
c000fa2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa33:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fa36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa3a:	eb 0c                	jmp    c000fa48 <tcp_send_fin+0x28>
c000fa3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa40:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa46:	66 90                	xchg   ax,ax
c000fa48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa4c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa4e:	85 c0                	test   eax,eax
c000fa50:	75 ea                	jne    c000fa3c <tcp_send_fin+0x1c>
c000fa52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fa59:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fa5d:	0f b7 c0             	movzx  eax,ax
c000fa60:	83 ec 0c             	sub    esp,0xc
c000fa63:	50                   	push   eax
c000fa64:	e8 7f 11 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fa69:	83 c4 10             	add    esp,0x10
c000fa6c:	0f b7 c0             	movzx  eax,ax
c000fa6f:	83 e0 07             	and    eax,0x7
c000fa72:	75 30                	jne    c000faa4 <tcp_send_fin+0x84>
c000fa74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa78:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fa7b:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000fa7f:	83 ec 0c             	sub    esp,0xc
c000fa82:	6a 01                	push   0x1
c000fa84:	e8 5f 11 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fa89:	83 c4 10             	add    esp,0x10
c000fa8c:	89 c1                	mov    ecx,eax
c000fa8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa92:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa95:	89 d8                	mov    eax,ebx
c000fa97:	09 c8                	or     eax,ecx
c000fa99:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000fa9d:	b0 00                	mov    al,0x0
c000fa9f:	eb 17                	jmp    c000fab8 <tcp_send_fin+0x98>
c000faa1:	8d 76 00             	lea    esi,[esi+0x0]
c000faa4:	83 ec 08             	sub    esp,0x8
c000faa7:	6a 01                	push   0x1
c000faa9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faad:	e8 82 fc ff ff       	call   c000f734 <tcp_enqueue_flags>
c000fab2:	83 c4 10             	add    esp,0x10
c000fab5:	8d 76 00             	lea    esi,[esi+0x0]
c000fab8:	83 c4 18             	add    esp,0x18
c000fabb:	5b                   	pop    ebx
c000fabc:	c3                   	ret    
c000fabd:	8d 76 00             	lea    esi,[esi+0x0]

c000fac0 <tcp_send_empty_ack>:
c000fac0:	53                   	push   ebx
c000fac1:	83 ec 18             	sub    esp,0x18
c000fac4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fac9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000facd:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c000fad0:	83 ec 0c             	sub    esp,0xc
c000fad3:	50                   	push   eax
c000fad4:	e8 33 11 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fad9:	83 c4 10             	add    esp,0x10
c000fadc:	89 c2                	mov    edx,eax
c000fade:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fae3:	52                   	push   edx
c000fae4:	6a 00                	push   0x0
c000fae6:	50                   	push   eax
c000fae7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000faeb:	e8 34 ee ff ff       	call   c000e924 <tcp_output_alloc_header>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000faf7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fafc:	75 0a                	jne    c000fb08 <tcp_send_empty_ack+0x48>
c000fafe:	b0 fe                	mov    al,0xfe
c000fb00:	e9 97 00 00 00       	jmp    c000fb9c <tcp_send_empty_ack+0xdc>
c000fb05:	8d 76 00             	lea    esi,[esi+0x0]
c000fb08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb0c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb0f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fb13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb17:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fb1a:	83 e0 fc             	and    eax,0xfffffffc
c000fb1d:	88 c2                	mov    dl,al
c000fb1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb23:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000fb26:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fb2a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fb2d:	0f b7 d0             	movzx  edx,ax
c000fb30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb34:	8d 48 04             	lea    ecx,[eax+0x4]
c000fb37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb3b:	83 ec 0c             	sub    esp,0xc
c000fb3e:	52                   	push   edx
c000fb3f:	6a 06                	push   0x6
c000fb41:	51                   	push   ecx
c000fb42:	50                   	push   eax
c000fb43:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb47:	e8 70 35 00 00       	call   c00130bc <inet_chksum_pseudo>
c000fb4c:	83 c4 20             	add    esp,0x20
c000fb4f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000fb53:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c000fb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb5b:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fb5e:	0f b6 c8             	movzx  ecx,al
c000fb61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb65:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fb68:	0f b6 d0             	movzx  edx,al
c000fb6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6f:	8d 58 04             	lea    ebx,[eax+0x4]
c000fb72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb76:	83 ec 08             	sub    esp,0x8
c000fb79:	6a 06                	push   0x6
c000fb7b:	51                   	push   ecx
c000fb7c:	52                   	push   edx
c000fb7d:	53                   	push   ebx
c000fb7e:	50                   	push   eax
c000fb7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fb83:	e8 68 41 00 00       	call   c0013cf0 <ip_output>
c000fb88:	83 c4 20             	add    esp,0x20
c000fb8b:	83 ec 0c             	sub    esp,0xc
c000fb8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fb92:	e8 09 87 ff ff       	call   c00082a0 <pbuf_free>
c000fb97:	83 c4 10             	add    esp,0x10
c000fb9a:	b0 00                	mov    al,0x0
c000fb9c:	83 c4 18             	add    esp,0x18
c000fb9f:	5b                   	pop    ebx
c000fba0:	c3                   	ret    
c000fba1:	8d 76 00             	lea    esi,[esi+0x0]

c000fba4 <tcp_output_segment>:
c000fba4:	56                   	push   esi
c000fba5:	53                   	push   ebx
c000fba6:	83 ec 14             	sub    esp,0x14
c000fba9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbad:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000fbb0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fbb4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fbb7:	83 ec 0c             	sub    esp,0xc
c000fbba:	50                   	push   eax
c000fbbb:	e8 4c 10 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fbc0:	83 c4 10             	add    esp,0x10
c000fbc3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000fbc6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbca:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fbce:	0f b7 c0             	movzx  eax,ax
c000fbd1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fbd5:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c000fbd8:	83 ec 0c             	sub    esp,0xc
c000fbdb:	50                   	push   eax
c000fbdc:	e8 07 10 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000fbe1:	83 c4 10             	add    esp,0x10
c000fbe4:	66 89 43 0e          	mov    WORD PTR [ebx+0xe],ax
c000fbe8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbec:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000fbef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fbf3:	66 8b 40 2e          	mov    ax,WORD PTR [eax+0x2e]
c000fbf7:	0f b7 c0             	movzx  eax,ax
c000fbfa:	01 c2                	add    edx,eax
c000fbfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc00:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000fc03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc07:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fc0a:	83 c0 14             	add    eax,0x14
c000fc0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc15:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fc18:	0f b6 c0             	movzx  eax,al
c000fc1b:	83 e0 01             	and    eax,0x1
c000fc1e:	74 10                	je     c000fc30 <tcp_output_segment+0x8c>
c000fc20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc24:	c7 00 02 04 02 18    	mov    DWORD PTR [eax],0x18020402
c000fc2a:	83 44 24 0c 04       	add    DWORD PTR [esp+0xc],0x4
c000fc2f:	90                   	nop
c000fc30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc34:	66 8b 40 3a          	mov    ax,WORD PTR [eax+0x3a]
c000fc38:	98                   	cwde   
c000fc39:	83 f8 ff             	cmp    eax,0xffffffff
c000fc3c:	75 0a                	jne    c000fc48 <tcp_output_segment+0xa4>
c000fc3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc42:	66 c7 40 3a 00 00    	mov    WORD PTR [eax+0x3a],0x0
c000fc48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc4c:	85 c0                	test   eax,eax
c000fc4e:	74 0c                	je     c000fc5c <tcp_output_segment+0xb8>
c000fc50:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc54:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc56:	85 c0                	test   eax,eax
c000fc58:	75 32                	jne    c000fc8c <tcp_output_segment+0xe8>
c000fc5a:	66 90                	xchg   ax,ax
c000fc5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc60:	83 c0 04             	add    eax,0x4
c000fc63:	83 ec 0c             	sub    esp,0xc
c000fc66:	50                   	push   eax
c000fc67:	e8 dc 38 00 00       	call   c0013548 <ip_route>
c000fc6c:	83 c4 10             	add    esp,0x10
c000fc6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fc73:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fc78:	0f 84 46 01 00 00    	je     c000fdc4 <tcp_output_segment+0x220>
c000fc7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fc82:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000fc85:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc89:	89 10                	mov    DWORD PTR [eax],edx
c000fc8b:	90                   	nop
c000fc8c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fc90:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fc93:	85 c0                	test   eax,eax
c000fc95:	75 2d                	jne    c000fcc4 <tcp_output_segment+0x120>
c000fc97:	8b 15 74 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036874
c000fc9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fca1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000fca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fca8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcae:	83 ec 0c             	sub    esp,0xc
c000fcb1:	50                   	push   eax
c000fcb2:	e8 55 0f ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fcb7:	83 c4 10             	add    esp,0x10
c000fcba:	89 c2                	mov    edx,eax
c000fcbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fcc0:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c000fcc3:	90                   	nop
c000fcc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcc8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fccb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fccf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcd5:	29 c2                	sub    edx,eax
c000fcd7:	89 d0                	mov    eax,edx
c000fcd9:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000fcde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fce2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fce5:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c000fce9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fced:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fcf0:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fcf5:	89 d6                	mov    esi,edx
c000fcf7:	29 c6                	sub    esi,eax
c000fcf9:	89 f0                	mov    eax,esi
c000fcfb:	66 89 41 0a          	mov    WORD PTR [ecx+0xa],ax
c000fcff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd06:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000fd09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd0d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000fd10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000fd15:	89 d6                	mov    esi,edx
c000fd17:	29 c6                	sub    esi,eax
c000fd19:	89 f0                	mov    eax,esi
c000fd1b:	66 89 41 08          	mov    WORD PTR [ecx+0x8],ax
c000fd1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd23:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd26:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fd2a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000fd2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd34:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fd37:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c000fd3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fd47:	0f b7 c8             	movzx  ecx,ax
c000fd4a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd4e:	8d 70 04             	lea    esi,[eax+0x4]
c000fd51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fd55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fd59:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fd60:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c000fd63:	83 ec 0c             	sub    esp,0xc
c000fd66:	51                   	push   ecx
c000fd67:	6a 06                	push   0x6
c000fd69:	56                   	push   esi
c000fd6a:	52                   	push   edx
c000fd6b:	50                   	push   eax
c000fd6c:	e8 4b 33 00 00       	call   c00130bc <inet_chksum_pseudo>
c000fd71:	83 c4 20             	add    esp,0x20
c000fd74:	66 89 43 10          	mov    WORD PTR [ebx+0x10],ax
c000fd78:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c000fd7e:	83 c0 01             	add    eax,0x1
c000fd81:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c000fd87:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd8b:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c000fd8e:	0f b6 d8             	movzx  ebx,al
c000fd91:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd95:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c000fd98:	0f b6 c8             	movzx  ecx,al
c000fd9b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd9f:	8d 70 04             	lea    esi,[eax+0x4]
c000fda2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fda6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fdaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fdad:	83 ec 08             	sub    esp,0x8
c000fdb0:	6a 06                	push   0x6
c000fdb2:	53                   	push   ebx
c000fdb3:	51                   	push   ecx
c000fdb4:	56                   	push   esi
c000fdb5:	52                   	push   edx
c000fdb6:	50                   	push   eax
c000fdb7:	e8 34 3f 00 00       	call   c0013cf0 <ip_output>
c000fdbc:	83 c4 20             	add    esp,0x20
c000fdbf:	eb 07                	jmp    c000fdc8 <tcp_output_segment+0x224>
c000fdc1:	8d 76 00             	lea    esi,[esi+0x0]
c000fdc4:	90                   	nop
c000fdc5:	8d 76 00             	lea    esi,[esi+0x0]
c000fdc8:	83 c4 14             	add    esp,0x14
c000fdcb:	5b                   	pop    ebx
c000fdcc:	5e                   	pop    esi
c000fdcd:	c3                   	ret    
c000fdce:	66 90                	xchg   ax,ax

c000fdd0 <tcp_output>:
c000fdd0:	56                   	push   esi
c000fdd1:	53                   	push   ebx
c000fdd2:	83 ec 24             	sub    esp,0x24
c000fdd5:	a1 88 68 03 c0       	mov    eax,ds:0xc0036888
c000fdda:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c000fdde:	75 08                	jne    c000fde8 <tcp_output+0x18>
c000fde0:	b0 00                	mov    al,0x0
c000fde2:	e9 6d 04 00 00       	jmp    c0010254 <tcp_output+0x484>
c000fde7:	90                   	nop
c000fde8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fdec:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c000fdf0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fdf4:	8b 52 60             	mov    edx,DWORD PTR [edx+0x60]
c000fdf7:	0f b7 d8             	movzx  ebx,ax
c000fdfa:	0f b7 ca             	movzx  ecx,dx
c000fdfd:	39 cb                	cmp    ebx,ecx
c000fdff:	76 03                	jbe    c000fe04 <tcp_output+0x34>
c000fe01:	89 d0                	mov    eax,edx
c000fe03:	90                   	nop
c000fe04:	0f b7 c0             	movzx  eax,ax
c000fe07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fe0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe0f:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000fe12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fe16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe1a:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fe1d:	0f b6 c0             	movzx  eax,al
c000fe20:	83 e0 02             	and    eax,0x2
c000fe23:	74 4f                	je     c000fe74 <tcp_output+0xa4>
c000fe25:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000fe2a:	74 34                	je     c000fe60 <tcp_output+0x90>
c000fe2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe30:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fe33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe36:	83 ec 0c             	sub    esp,0xc
c000fe39:	50                   	push   eax
c000fe3a:	e8 cd 0d ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000fe3f:	83 c4 10             	add    esp,0x10
c000fe42:	89 c2                	mov    edx,eax
c000fe44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe48:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c000fe4b:	29 c2                	sub    edx,eax
c000fe4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fe51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fe54:	0f b7 c0             	movzx  eax,ax
c000fe57:	01 d0                	add    eax,edx
c000fe59:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000fe5d:	73 15                	jae    c000fe74 <tcp_output+0xa4>
c000fe5f:	90                   	nop
c000fe60:	83 ec 0c             	sub    esp,0xc
c000fe63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000fe67:	e8 54 fc ff ff       	call   c000fac0 <tcp_send_empty_ack>
c000fe6c:	83 c4 10             	add    esp,0x10
c000fe6f:	e9 e0 03 00 00       	jmp    c0010254 <tcp_output+0x484>
c000fe74:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fe78:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fe7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe7f:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fe84:	0f 84 ea 02 00 00    	je     c0010174 <tcp_output+0x3a4>
c000fe8a:	eb 0c                	jmp    c000fe98 <tcp_output+0xc8>
c000fe8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe90:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe92:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe96:	66 90                	xchg   ax,ax
c000fe98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fe9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe9e:	85 c0                	test   eax,eax
c000fea0:	75 ea                	jne    c000fe8c <tcp_output+0xbc>
c000fea2:	e9 cd 02 00 00       	jmp    c0010174 <tcp_output+0x3a4>
c000fea7:	90                   	nop
c000fea8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000feac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000feaf:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000feb3:	0f b7 c0             	movzx  eax,ax
c000feb6:	83 ec 0c             	sub    esp,0xc
c000feb9:	50                   	push   eax
c000feba:	e8 29 0d ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000febf:	83 c4 10             	add    esp,0x10
c000fec2:	0f b7 c0             	movzx  eax,ax
c000fec5:	83 e0 04             	and    eax,0x4
c000fec8:	74 16                	je     c000fee0 <tcp_output+0x110>
c000feca:	83 ec 08             	sub    esp,0x8
c000fecd:	68 73 08 03 c0       	push   0xc0030873
c000fed2:	68 66 f9 02 c0       	push   0xc002f966
c000fed7:	e8 f8 fb 00 00       	call   c001fad4 <CPrintf>
c000fedc:	83 c4 10             	add    esp,0x10
c000fedf:	90                   	nop
c000fee0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fee4:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c000fee7:	85 c0                	test   eax,eax
c000fee9:	74 45                	je     c000ff30 <tcp_output+0x160>
c000feeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000feef:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fef2:	0f b6 c0             	movzx  eax,al
c000fef5:	83 e0 44             	and    eax,0x44
c000fef8:	75 36                	jne    c000ff30 <tcp_output+0x160>
c000fefa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fefe:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff01:	85 c0                	test   eax,eax
c000ff03:	74 33                	je     c000ff38 <tcp_output+0x168>
c000ff05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff09:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff0c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff0e:	85 c0                	test   eax,eax
c000ff10:	75 1e                	jne    c000ff30 <tcp_output+0x160>
c000ff12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff16:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c000ff19:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000ff1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff20:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff23:	0f b7 d2             	movzx  edx,dx
c000ff26:	0f b7 c0             	movzx  eax,ax
c000ff29:	39 c2                	cmp    edx,eax
c000ff2b:	72 0b                	jb     c000ff38 <tcp_output+0x168>
c000ff2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff30:	b8 01 00 00 00       	mov    eax,0x1
c000ff35:	eb 09                	jmp    c000ff40 <tcp_output+0x170>
c000ff37:	90                   	nop
c000ff38:	b8 00 00 00 00       	mov    eax,0x0
c000ff3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff40:	85 c0                	test   eax,eax
c000ff42:	75 18                	jne    c000ff5c <tcp_output+0x18c>
c000ff44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff48:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ff4b:	0f b6 c0             	movzx  eax,al
c000ff4e:	25 a0 00 00 00       	and    eax,0xa0
c000ff53:	0f 84 5b 02 00 00    	je     c00101b4 <tcp_output+0x3e4>
c000ff59:	8d 76 00             	lea    esi,[esi+0x0]
c000ff5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff60:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff66:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c000ff69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ff6d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ff70:	83 f8 02             	cmp    eax,0x2
c000ff73:	74 3f                	je     c000ffb4 <tcp_output+0x1e4>
c000ff75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff79:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ff7c:	66 8b 58 0c          	mov    bx,WORD PTR [eax+0xc]
c000ff80:	83 ec 0c             	sub    esp,0xc
c000ff83:	6a 10                	push   0x10
c000ff85:	e8 5e 0c ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c000ff8a:	83 c4 10             	add    esp,0x10
c000ff8d:	89 c1                	mov    ecx,eax
c000ff8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff93:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ff96:	89 d8                	mov    eax,ebx
c000ff98:	09 c8                	or     eax,ecx
c000ff9a:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c000ff9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffa2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ffa5:	83 e0 fc             	and    eax,0xfffffffc
c000ffa8:	88 c2                	mov    dl,al
c000ffaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffae:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c000ffb1:	8d 76 00             	lea    esi,[esi+0x0]
c000ffb4:	83 ec 08             	sub    esp,0x8
c000ffb7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ffbb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ffbf:	e8 e0 fb ff ff       	call   c000fba4 <tcp_output_segment>
c000ffc4:	83 c4 10             	add    esp,0x10
c000ffc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffcb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ffce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffd1:	83 ec 0c             	sub    esp,0xc
c000ffd4:	50                   	push   eax
c000ffd5:	e8 32 0c ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c000ffda:	83 c4 10             	add    esp,0x10
c000ffdd:	89 c3                	mov    ebx,eax
c000ffdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffe3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ffe6:	0f b7 f0             	movzx  esi,ax
c000ffe9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ffed:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fff0:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c000fff4:	0f b7 c0             	movzx  eax,ax
c000fff7:	83 ec 0c             	sub    esp,0xc
c000fffa:	50                   	push   eax
c000fffb:	e8 e8 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010000:	83 c4 10             	add    esp,0x10
c0010003:	0f b7 c0             	movzx  eax,ax
c0010006:	83 e0 03             	and    eax,0x3
c0010009:	0f 95 c0             	setne  al
c001000c:	0f b6 c0             	movzx  eax,al
c001000f:	01 f0                	add    eax,esi
c0010011:	01 d8                	add    eax,ebx
c0010013:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010017:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001001b:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c001001e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0010022:	79 0c                	jns    c0010030 <tcp_output+0x260>
c0010024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010028:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001002c:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
c001002f:	90                   	nop
c0010030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010034:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010037:	0f b7 d8             	movzx  ebx,ax
c001003a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001003e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010041:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c0010045:	0f b7 c0             	movzx  eax,ax
c0010048:	83 ec 0c             	sub    esp,0xc
c001004b:	50                   	push   eax
c001004c:	e8 97 0b ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	0f b7 c0             	movzx  eax,ax
c0010057:	83 e0 03             	and    eax,0x3
c001005a:	0f 95 c0             	setne  al
c001005d:	0f b6 c0             	movzx  eax,al
c0010060:	01 d8                	add    eax,ebx
c0010062:	85 c0                	test   eax,eax
c0010064:	0f 8e ee 00 00 00    	jle    c0010158 <tcp_output+0x388>
c001006a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001006e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010078:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001007b:	85 c0                	test   eax,eax
c001007d:	75 19                	jne    c0010098 <tcp_output+0x2c8>
c001007f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010083:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010087:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c001008a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001008e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010092:	e9 d1 00 00 00       	jmp    c0010168 <tcp_output+0x398>
c0010097:	90                   	nop
c0010098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001009c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001009f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100a2:	83 ec 0c             	sub    esp,0xc
c00100a5:	50                   	push   eax
c00100a6:	e8 61 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00100ab:	83 c4 10             	add    esp,0x10
c00100ae:	89 c3                	mov    ebx,eax
c00100b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00100b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100ba:	83 ec 0c             	sub    esp,0xc
c00100bd:	50                   	push   eax
c00100be:	e8 49 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00100c3:	83 c4 10             	add    esp,0x10
c00100c6:	29 c3                	sub    ebx,eax
c00100c8:	89 d8                	mov    eax,ebx
c00100ca:	79 74                	jns    c0010140 <tcp_output+0x370>
c00100cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00100d0:	83 c0 7c             	add    eax,0x7c
c00100d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100d7:	eb 0f                	jmp    c00100e8 <tcp_output+0x318>
c00100d9:	8d 76 00             	lea    esi,[esi+0x0]
c00100dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00100e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100e6:	66 90                	xchg   ax,ax
c00100e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00100ee:	85 c0                	test   eax,eax
c00100f0:	74 36                	je     c0010128 <tcp_output+0x358>
c00100f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00100f8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00100fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00100fe:	83 ec 0c             	sub    esp,0xc
c0010101:	50                   	push   eax
c0010102:	e8 05 0b ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010107:	83 c4 10             	add    esp,0x10
c001010a:	89 c3                	mov    ebx,eax
c001010c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010110:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010113:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010116:	83 ec 0c             	sub    esp,0xc
c0010119:	50                   	push   eax
c001011a:	e8 ed 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001011f:	83 c4 10             	add    esp,0x10
c0010122:	29 c3                	sub    ebx,eax
c0010124:	89 d8                	mov    eax,ebx
c0010126:	78 b4                	js     c00100dc <tcp_output+0x30c>
c0010128:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001012c:	8b 10                	mov    edx,DWORD PTR [eax]
c001012e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010132:	89 10                	mov    DWORD PTR [eax],edx
c0010134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010138:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001013c:	89 10                	mov    DWORD PTR [eax],edx
c001013e:	eb 28                	jmp    c0010168 <tcp_output+0x398>
c0010140:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010144:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0010148:	89 10                	mov    DWORD PTR [eax],edx
c001014a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001014e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010150:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010154:	eb 12                	jmp    c0010168 <tcp_output+0x398>
c0010156:	66 90                	xchg   ax,ax
c0010158:	83 ec 0c             	sub    esp,0xc
c001015b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001015f:	e8 b4 9d ff ff       	call   c0009f18 <tcp_seg_free>
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	90                   	nop
c0010168:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001016c:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c001016f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010173:	90                   	nop
c0010174:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010179:	74 3d                	je     c00101b8 <tcp_output+0x3e8>
c001017b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001017f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010185:	83 ec 0c             	sub    esp,0xc
c0010188:	50                   	push   eax
c0010189:	e8 7e 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c001018e:	83 c4 10             	add    esp,0x10
c0010191:	89 c2                	mov    edx,eax
c0010193:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010197:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c001019a:	29 c2                	sub    edx,eax
c001019c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00101a3:	0f b7 c0             	movzx  eax,ax
c00101a6:	01 d0                	add    eax,edx
c00101a8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00101ac:	0f 83 f6 fc ff ff    	jae    c000fea8 <tcp_output+0xd8>
c00101b2:	eb 04                	jmp    c00101b8 <tcp_output+0x3e8>
c00101b4:	90                   	nop
c00101b5:	8d 76 00             	lea    esi,[esi+0x0]
c00101b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101bc:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00101bf:	85 c0                	test   eax,eax
c00101c1:	75 0d                	jne    c00101d0 <tcp_output+0x400>
c00101c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101c7:	66 c7 40 76 00 00    	mov    WORD PTR [eax+0x76],0x0
c00101cd:	8d 76 00             	lea    esi,[esi+0x0]
c00101d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00101d5:	74 65                	je     c001023c <tcp_output+0x46c>
c00101d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00101db:	8a 80 a4 00 00 00    	mov    al,BYTE PTR [eax+0xa4]
c00101e1:	0f b6 c0             	movzx  eax,al
c00101e4:	85 c0                	test   eax,eax
c00101e6:	75 54                	jne    c001023c <tcp_output+0x46c>
c00101e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ec:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00101ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00101f2:	83 ec 0c             	sub    esp,0xc
c00101f5:	50                   	push   eax
c00101f6:	e8 11 0a ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00101fb:	83 c4 10             	add    esp,0x10
c00101fe:	89 c2                	mov    edx,eax
c0010200:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010204:	8b 40 50             	mov    eax,DWORD PTR [eax+0x50]
c0010207:	29 c2                	sub    edx,eax
c0010209:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001020d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010210:	0f b7 c0             	movzx  eax,ax
c0010213:	01 c2                	add    edx,eax
c0010215:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010219:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c001021c:	0f b7 c0             	movzx  eax,ax
c001021f:	39 c2                	cmp    edx,eax
c0010221:	76 19                	jbe    c001023c <tcp_output+0x46c>
c0010223:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010227:	c7 80 a0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xa0],0x0
c0010231:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010235:	c6 80 a4 00 00 00 01 	mov    BYTE PTR [eax+0xa4],0x1
c001023c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010240:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010243:	83 e0 7f             	and    eax,0x7f
c0010246:	88 c2                	mov    dl,al
c0010248:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001024c:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c001024f:	b0 00                	mov    al,0x0
c0010251:	8d 76 00             	lea    esi,[esi+0x0]
c0010254:	83 c4 24             	add    esp,0x24
c0010257:	5b                   	pop    ebx
c0010258:	5e                   	pop    esi
c0010259:	c3                   	ret    
c001025a:	66 90                	xchg   ax,ax

c001025c <tcp_rst>:
c001025c:	83 ec 2c             	sub    esp,0x2c
c001025f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0010263:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0010267:	66 89 54 24 0c       	mov    WORD PTR [esp+0xc],dx
c001026c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0010271:	83 ec 04             	sub    esp,0x4
c0010274:	6a 00                	push   0x0
c0010276:	6a 14                	push   0x14
c0010278:	6a 01                	push   0x1
c001027a:	e8 f9 81 ff ff       	call   c0008478 <pbuf_alloc>
c001027f:	83 c4 10             	add    esp,0x10
c0010282:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010286:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001028b:	0f 84 37 01 00 00    	je     c00103c8 <tcp_rst+0x16c>
c0010291:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010295:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0010299:	0f b7 c0             	movzx  eax,ax
c001029c:	83 f8 13             	cmp    eax,0x13
c001029f:	77 17                	ja     c00102b8 <tcp_rst+0x5c>
c00102a1:	83 ec 08             	sub    esp,0x8
c00102a4:	68 80 05 03 c0       	push   0xc0030580
c00102a9:	68 66 f9 02 c0       	push   0xc002f966
c00102ae:	e8 21 f8 00 00       	call   c001fad4 <CPrintf>
c00102b3:	83 c4 10             	add    esp,0x10
c00102b6:	66 90                	xchg   ax,ax
c00102b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00102bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00102bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102c3:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00102c8:	83 ec 0c             	sub    esp,0xc
c00102cb:	50                   	push   eax
c00102cc:	e8 17 09 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00102d1:	83 c4 10             	add    esp,0x10
c00102d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102d8:	66 89 02             	mov    WORD PTR [edx],ax
c00102db:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00102e0:	83 ec 0c             	sub    esp,0xc
c00102e3:	50                   	push   eax
c00102e4:	e8 ff 08 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00102f0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c00102f4:	83 ec 0c             	sub    esp,0xc
c00102f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00102fb:	e8 0c 09 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010300:	83 c4 10             	add    esp,0x10
c0010303:	89 c2                	mov    edx,eax
c0010305:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010309:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001030c:	83 ec 0c             	sub    esp,0xc
c001030f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010313:	e8 f4 08 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010318:	83 c4 10             	add    esp,0x10
c001031b:	89 c2                	mov    edx,eax
c001031d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010321:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010324:	83 ec 0c             	sub    esp,0xc
c0010327:	68 14 50 00 00       	push   0x5014
c001032c:	e8 b7 08 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010331:	83 c4 10             	add    esp,0x10
c0010334:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010338:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c001033c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010340:	66 c7 40 0e 08 60    	mov    WORD PTR [eax+0xe],0x6008
c0010346:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001034a:	66 c7 40 10 00 00    	mov    WORD PTR [eax+0x10],0x0
c0010350:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010354:	66 c7 40 12 00 00    	mov    WORD PTR [eax+0x12],0x0
c001035a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001035e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010361:	0f b7 c0             	movzx  eax,ax
c0010364:	83 ec 0c             	sub    esp,0xc
c0010367:	50                   	push   eax
c0010368:	6a 06                	push   0x6
c001036a:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001036e:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0010372:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010376:	e8 41 2d 00 00       	call   c00130bc <inet_chksum_pseudo>
c001037b:	83 c4 20             	add    esp,0x20
c001037e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010382:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010386:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c001038c:	83 c0 01             	add    eax,0x1
c001038f:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010395:	83 ec 08             	sub    esp,0x8
c0010398:	6a 06                	push   0x6
c001039a:	6a 00                	push   0x0
c001039c:	68 ff 00 00 00       	push   0xff
c00103a1:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00103a5:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00103a9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00103ad:	e8 3e 39 00 00       	call   c0013cf0 <ip_output>
c00103b2:	83 c4 20             	add    esp,0x20
c00103b5:	83 ec 0c             	sub    esp,0xc
c00103b8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00103bc:	e8 df 7e ff ff       	call   c00082a0 <pbuf_free>
c00103c1:	83 c4 10             	add    esp,0x10
c00103c4:	eb 06                	jmp    c00103cc <tcp_rst+0x170>
c00103c6:	66 90                	xchg   ax,ax
c00103c8:	90                   	nop
c00103c9:	8d 76 00             	lea    esi,[esi+0x0]
c00103cc:	83 c4 2c             	add    esp,0x2c
c00103cf:	c3                   	ret    

c00103d0 <tcp_rexmit_rto>:
c00103d0:	83 ec 1c             	sub    esp,0x1c
c00103d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103d7:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00103da:	85 c0                	test   eax,eax
c00103dc:	74 7a                	je     c0010458 <tcp_rexmit_rto+0x88>
c00103de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00103e2:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00103e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103e9:	eb 0d                	jmp    c00103f8 <tcp_rexmit_rto+0x28>
c00103eb:	90                   	nop
c00103ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00103f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103f6:	66 90                	xchg   ax,ax
c00103f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00103fe:	85 c0                	test   eax,eax
c0010400:	75 ea                	jne    c00103ec <tcp_rexmit_rto+0x1c>
c0010402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010406:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
c0010409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001040d:	89 10                	mov    DWORD PTR [eax],edx
c001040f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010413:	8b 50 7c             	mov    edx,DWORD PTR [eax+0x7c]
c0010416:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001041a:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
c001041d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010421:	c7 40 7c 00 00 00 00 	mov    DWORD PTR [eax+0x7c],0x0
c0010428:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001042c:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c001042f:	83 c0 01             	add    eax,0x1
c0010432:	88 c2                	mov    dl,al
c0010434:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010438:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001043b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001043f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010446:	83 ec 0c             	sub    esp,0xc
c0010449:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001044d:	e8 7e f9 ff ff       	call   c000fdd0 <tcp_output>
c0010452:	83 c4 10             	add    esp,0x10
c0010455:	eb 05                	jmp    c001045c <tcp_rexmit_rto+0x8c>
c0010457:	90                   	nop
c0010458:	90                   	nop
c0010459:	8d 76 00             	lea    esi,[esi+0x0]
c001045c:	83 c4 1c             	add    esp,0x1c
c001045f:	c3                   	ret    

c0010460 <tcp_rexmit>:
c0010460:	53                   	push   ebx
c0010461:	83 ec 18             	sub    esp,0x18
c0010464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010468:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001046b:	85 c0                	test   eax,eax
c001046d:	0f 84 a9 00 00 00    	je     c001051c <tcp_rexmit+0xbc>
c0010473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010477:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c001047a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001047e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010482:	8b 10                	mov    edx,DWORD PTR [eax]
c0010484:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010488:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
c001048b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001048f:	83 c0 78             	add    eax,0x78
c0010492:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010496:	eb 0c                	jmp    c00104a4 <tcp_rexmit+0x44>
c0010498:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001049c:	8b 00                	mov    eax,DWORD PTR [eax]
c001049e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104a2:	66 90                	xchg   ax,ax
c00104a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00104aa:	85 c0                	test   eax,eax
c00104ac:	74 36                	je     c00104e4 <tcp_rexmit+0x84>
c00104ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00104b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00104b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104ba:	83 ec 0c             	sub    esp,0xc
c00104bd:	50                   	push   eax
c00104be:	e8 49 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00104c3:	83 c4 10             	add    esp,0x10
c00104c6:	89 c3                	mov    ebx,eax
c00104c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00104cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00104cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00104d2:	83 ec 0c             	sub    esp,0xc
c00104d5:	50                   	push   eax
c00104d6:	e8 31 07 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c00104db:	83 c4 10             	add    esp,0x10
c00104de:	29 c3                	sub    ebx,eax
c00104e0:	89 d8                	mov    eax,ebx
c00104e2:	78 b4                	js     c0010498 <tcp_rexmit+0x38>
c00104e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00104ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00104ee:	89 10                	mov    DWORD PTR [eax],edx
c00104f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104f8:	89 10                	mov    DWORD PTR [eax],edx
c00104fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104fe:	8a 40 4e             	mov    al,BYTE PTR [eax+0x4e]
c0010501:	83 c0 01             	add    eax,0x1
c0010504:	88 c2                	mov    dl,al
c0010506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001050a:	88 50 4e             	mov    BYTE PTR [eax+0x4e],dl
c001050d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010511:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0010518:	eb 06                	jmp    c0010520 <tcp_rexmit+0xc0>
c001051a:	66 90                	xchg   ax,ax
c001051c:	90                   	nop
c001051d:	8d 76 00             	lea    esi,[esi+0x0]
c0010520:	83 c4 18             	add    esp,0x18
c0010523:	5b                   	pop    ebx
c0010524:	c3                   	ret    
c0010525:	8d 76 00             	lea    esi,[esi+0x0]

c0010528 <tcp_rexmit_fast>:
c0010528:	83 ec 0c             	sub    esp,0xc
c001052b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052f:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c0010532:	85 c0                	test   eax,eax
c0010534:	0f 84 ca 00 00 00    	je     c0010604 <tcp_rexmit_fast+0xdc>
c001053a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053e:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0010541:	0f b6 c0             	movzx  eax,al
c0010544:	83 e0 04             	and    eax,0x4
c0010547:	0f 85 b7 00 00 00    	jne    c0010604 <tcp_rexmit_fast+0xdc>
c001054d:	83 ec 0c             	sub    esp,0xc
c0010550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010554:	e8 07 ff ff ff       	call   c0010460 <tcp_rexmit>
c0010559:	83 c4 10             	add    esp,0x10
c001055c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010560:	66 8b 50 56          	mov    dx,WORD PTR [eax+0x56]
c0010564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010568:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c001056b:	0f b7 d2             	movzx  edx,dx
c001056e:	0f b7 c0             	movzx  eax,ax
c0010571:	39 c2                	cmp    edx,eax
c0010573:	76 17                	jbe    c001058c <tcp_rexmit_fast+0x64>
c0010575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010579:	8b 40 60             	mov    eax,DWORD PTR [eax+0x60]
c001057c:	0f b7 c0             	movzx  eax,ax
c001057f:	d1 e8                	shr    eax,1
c0010581:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010585:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c0010589:	eb 19                	jmp    c00105a4 <tcp_rexmit_fast+0x7c>
c001058b:	90                   	nop
c001058c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010590:	66 8b 40 56          	mov    ax,WORD PTR [eax+0x56]
c0010594:	0f b7 c0             	movzx  eax,ax
c0010597:	d1 e8                	shr    eax,1
c0010599:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001059d:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00105a1:	8d 76 00             	lea    esi,[esi+0x0]
c00105a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105a8:	8b 40 58             	mov    eax,DWORD PTR [eax+0x58]
c00105ab:	0f b7 d0             	movzx  edx,ax
c00105ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105b5:	0f b7 c0             	movzx  eax,ax
c00105b8:	01 c0                	add    eax,eax
c00105ba:	39 c2                	cmp    edx,eax
c00105bc:	7d 12                	jge    c00105d0 <tcp_rexmit_fast+0xa8>
c00105be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105c5:	d1 e0                	shl    eax,1
c00105c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00105cb:	66 89 42 58          	mov    WORD PTR [edx+0x58],ax
c00105cf:	90                   	nop
c00105d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d4:	8b 50 58             	mov    edx,DWORD PTR [eax+0x58]
c00105d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00105de:	89 c1                	mov    ecx,eax
c00105e0:	d1 e1                	shl    ecx,1
c00105e2:	01 c8                	add    eax,ecx
c00105e4:	01 d0                	add    eax,edx
c00105e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00105ea:	66 89 42 56          	mov    WORD PTR [edx+0x56],ax
c00105ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105f2:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00105f5:	83 c8 04             	or     eax,0x4
c00105f8:	88 c2                	mov    dl,al
c00105fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105fe:	88 50 24             	mov    BYTE PTR [eax+0x24],dl
c0010601:	8d 76 00             	lea    esi,[esi+0x0]
c0010604:	90                   	nop
c0010605:	83 c4 0c             	add    esp,0xc
c0010608:	c3                   	ret    
c0010609:	8d 76 00             	lea    esi,[esi+0x0]

c001060c <tcp_keepalive>:
c001060c:	83 ec 1c             	sub    esp,0x1c
c001060f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010613:	8b 40 5c             	mov    eax,DWORD PTR [eax+0x5c]
c0010616:	83 e8 01             	sub    eax,0x1
c0010619:	83 ec 0c             	sub    esp,0xc
c001061c:	50                   	push   eax
c001061d:	e8 ea 05 ff ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0010622:	83 c4 10             	add    esp,0x10
c0010625:	50                   	push   eax
c0010626:	6a 00                	push   0x0
c0010628:	6a 00                	push   0x0
c001062a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001062e:	e8 f1 e2 ff ff       	call   c000e924 <tcp_output_alloc_header>
c0010633:	83 c4 10             	add    esp,0x10
c0010636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001063a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001063f:	0f 84 87 00 00 00    	je     c00106cc <tcp_keepalive+0xc0>
c0010645:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010649:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001064c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010654:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010657:	0f b7 d0             	movzx  edx,ax
c001065a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001065e:	8d 48 04             	lea    ecx,[eax+0x4]
c0010661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010665:	83 ec 0c             	sub    esp,0xc
c0010668:	52                   	push   edx
c0010669:	6a 06                	push   0x6
c001066b:	51                   	push   ecx
c001066c:	50                   	push   eax
c001066d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010671:	e8 46 2a 00 00       	call   c00130bc <inet_chksum_pseudo>
c0010676:	83 c4 20             	add    esp,0x20
c0010679:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001067d:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c0010681:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010687:	83 c0 01             	add    eax,0x1
c001068a:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c0010690:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010694:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010697:	0f b6 d0             	movzx  edx,al
c001069a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001069e:	8d 48 04             	lea    ecx,[eax+0x4]
c00106a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00106a5:	83 ec 08             	sub    esp,0x8
c00106a8:	6a 06                	push   0x6
c00106aa:	6a 00                	push   0x0
c00106ac:	52                   	push   edx
c00106ad:	51                   	push   ecx
c00106ae:	50                   	push   eax
c00106af:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00106b3:	e8 38 36 00 00       	call   c0013cf0 <ip_output>
c00106b8:	83 c4 20             	add    esp,0x20
c00106bb:	83 ec 0c             	sub    esp,0xc
c00106be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106c2:	e8 d9 7b ff ff       	call   c00082a0 <pbuf_free>
c00106c7:	83 c4 10             	add    esp,0x10
c00106ca:	eb 04                	jmp    c00106d0 <tcp_keepalive+0xc4>
c00106cc:	90                   	nop
c00106cd:	8d 76 00             	lea    esi,[esi+0x0]
c00106d0:	83 c4 1c             	add    esp,0x1c
c00106d3:	c3                   	ret    

c00106d4 <tcp_zero_window_probe>:
c00106d4:	53                   	push   ebx
c00106d5:	83 ec 28             	sub    esp,0x28
c00106d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106dc:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
c00106df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00106e3:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00106e8:	75 0e                	jne    c00106f8 <tcp_zero_window_probe+0x24>
c00106ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00106ee:	8b 40 78             	mov    eax,DWORD PTR [eax+0x78]
c00106f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00106f5:	8d 76 00             	lea    esi,[esi+0x0]
c00106f8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00106fd:	0f 84 95 01 00 00    	je     c0010898 <tcp_zero_window_probe+0x1c4>
c0010703:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010707:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001070a:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c001070e:	0f b7 c0             	movzx  eax,ax
c0010711:	83 ec 0c             	sub    esp,0xc
c0010714:	50                   	push   eax
c0010715:	e8 ce 04 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001071a:	83 c4 10             	add    esp,0x10
c001071d:	0f b7 c0             	movzx  eax,ax
c0010720:	83 e0 01             	and    eax,0x1
c0010723:	74 17                	je     c001073c <tcp_zero_window_probe+0x68>
c0010725:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010729:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001072c:	0f b7 c0             	movzx  eax,ax
c001072f:	85 c0                	test   eax,eax
c0010731:	75 09                	jne    c001073c <tcp_zero_window_probe+0x68>
c0010733:	b8 01 00 00 00       	mov    eax,0x1
c0010738:	eb 0a                	jmp    c0010744 <tcp_zero_window_probe+0x70>
c001073a:	66 90                	xchg   ax,ax
c001073c:	b8 00 00 00 00       	mov    eax,0x0
c0010741:	8d 76 00             	lea    esi,[esi+0x0]
c0010744:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0010748:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001074d:	85 c0                	test   eax,eax
c001074f:	0f 94 c0             	sete   al
c0010752:	0f b6 c0             	movzx  eax,al
c0010755:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001075a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001075e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010761:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010764:	0f b7 44 24 18       	movzx  eax,WORD PTR [esp+0x18]
c0010769:	52                   	push   edx
c001076a:	50                   	push   eax
c001076b:	6a 00                	push   0x0
c001076d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010771:	e8 ae e1 ff ff       	call   c000e924 <tcp_output_alloc_header>
c0010776:	83 c4 10             	add    esp,0x10
c0010779:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001077d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010782:	0f 84 14 01 00 00    	je     c001089c <tcp_zero_window_probe+0x1c8>
c0010788:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001078c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001078f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010793:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0010798:	85 c0                	test   eax,eax
c001079a:	74 28                	je     c00107c4 <tcp_zero_window_probe+0xf0>
c001079c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107a0:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00107a4:	80 e4 c0             	and    ah,0xc0
c00107a7:	89 c3                	mov    ebx,eax
c00107a9:	83 ec 0c             	sub    esp,0xc
c00107ac:	6a 11                	push   0x11
c00107ae:	e8 35 04 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00107b3:	83 c4 10             	add    esp,0x10
c00107b6:	09 d8                	or     eax,ebx
c00107b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107bc:	66 89 42 0c          	mov    WORD PTR [edx+0xc],ax
c00107c0:	eb 5a                	jmp    c001081c <tcp_zero_window_probe+0x148>
c00107c2:	66 90                	xchg   ax,ax
c00107c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00107c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00107d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00107d9:	83 c0 14             	add    eax,0x14
c00107dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107e4:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00107e8:	0f b7 c0             	movzx  eax,ax
c00107eb:	83 ec 0c             	sub    esp,0xc
c00107ee:	50                   	push   eax
c00107ef:	e8 f4 03 ff ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00107f4:	83 c4 10             	add    esp,0x10
c00107f7:	0f b7 c0             	movzx  eax,ax
c00107fa:	c1 e8 0c             	shr    eax,0xc
c00107fd:	c1 e0 02             	shl    eax,0x2
c0010800:	0f b7 d0             	movzx  edx,ax
c0010803:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010807:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001080a:	52                   	push   edx
c001080b:	6a 01                	push   0x1
c001080d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010811:	50                   	push   eax
c0010812:	e8 29 87 ff ff       	call   c0008f40 <pbuf_copy_partial>
c0010817:	83 c4 10             	add    esp,0x10
c001081a:	66 90                	xchg   ax,ax
c001081c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010820:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010823:	0f b7 d0             	movzx  edx,ax
c0010826:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001082a:	8d 48 04             	lea    ecx,[eax+0x4]
c001082d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010831:	83 ec 0c             	sub    esp,0xc
c0010834:	52                   	push   edx
c0010835:	6a 06                	push   0x6
c0010837:	51                   	push   ecx
c0010838:	50                   	push   eax
c0010839:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001083d:	e8 7a 28 00 00       	call   c00130bc <inet_chksum_pseudo>
c0010842:	83 c4 20             	add    esp,0x20
c0010845:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010849:	66 89 42 10          	mov    WORD PTR [edx+0x10],ax
c001084d:	66 a1 b0 67 03 c0    	mov    ax,ds:0xc00367b0
c0010853:	83 c0 01             	add    eax,0x1
c0010856:	66 a3 b0 67 03 c0    	mov    ds:0xc00367b0,ax
c001085c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010860:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c0010863:	0f b6 d0             	movzx  edx,al
c0010866:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001086a:	8d 48 04             	lea    ecx,[eax+0x4]
c001086d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010871:	83 ec 08             	sub    esp,0x8
c0010874:	6a 06                	push   0x6
c0010876:	6a 00                	push   0x0
c0010878:	52                   	push   edx
c0010879:	51                   	push   ecx
c001087a:	50                   	push   eax
c001087b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001087f:	e8 6c 34 00 00       	call   c0013cf0 <ip_output>
c0010884:	83 c4 20             	add    esp,0x20
c0010887:	83 ec 0c             	sub    esp,0xc
c001088a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001088e:	e8 0d 7a ff ff       	call   c00082a0 <pbuf_free>
c0010893:	83 c4 10             	add    esp,0x10
c0010896:	eb 08                	jmp    c00108a0 <tcp_zero_window_probe+0x1cc>
c0010898:	90                   	nop
c0010899:	eb 05                	jmp    c00108a0 <tcp_zero_window_probe+0x1cc>
c001089b:	90                   	nop
c001089c:	90                   	nop
c001089d:	8d 76 00             	lea    esi,[esi+0x0]
c00108a0:	83 c4 28             	add    esp,0x28
c00108a3:	5b                   	pop    ebx
c00108a4:	c3                   	ret    
c00108a5:	66 90                	xchg   ax,ax
c00108a7:	90                   	nop

c00108a8 <sys_timeout>:
c00108a8:	83 ec 1c             	sub    esp,0x1c
c00108ab:	83 ec 0c             	sub    esp,0xc
c00108ae:	6a 0b                	push   0xb
c00108b0:	e8 03 70 ff ff       	call   c00078b8 <memp_malloc>
c00108b5:	83 c4 10             	add    esp,0x10
c00108b8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00108bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00108c1:	75 25                	jne    c00108e8 <sys_timeout+0x40>
c00108c3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00108c8:	0f 85 3e 01 00 00    	jne    c0010a0c <sys_timeout+0x164>
c00108ce:	83 ec 08             	sub    esp,0x8
c00108d1:	68 8c 08 03 c0       	push   0xc003088c
c00108d6:	68 66 f9 02 c0       	push   0xc002f966
c00108db:	e8 f4 f1 00 00       	call   c001fad4 <CPrintf>
c00108e0:	83 c4 10             	add    esp,0x10
c00108e3:	e9 24 01 00 00       	jmp    c0010a0c <sys_timeout+0x164>
c00108e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00108f6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00108fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00108fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010901:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010905:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010908:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001090c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010910:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010913:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010918:	85 c0                	test   eax,eax
c001091a:	75 10                	jne    c001092c <sys_timeout+0x84>
c001091c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010920:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010925:	e9 e6 00 00 00       	jmp    c0010a10 <sys_timeout+0x168>
c001092a:	66 90                	xchg   ax,ax
c001092c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010931:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010934:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010938:	73 2e                	jae    c0010968 <sys_timeout+0xc0>
c001093a:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c001093f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010942:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010947:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c001094b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001094e:	8b 15 d4 a8 03 c0    	mov    edx,DWORD PTR ds:0xc003a8d4
c0010954:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010958:	89 10                	mov    DWORD PTR [eax],edx
c001095a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001095e:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010963:	e9 a8 00 00 00       	jmp    c0010a10 <sys_timeout+0x168>
c0010968:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c001096d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010971:	e9 86 00 00 00       	jmp    c00109fc <sys_timeout+0x154>
c0010976:	66 90                	xchg   ax,ax
c0010978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001097c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001097f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010983:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010986:	29 c2                	sub    edx,eax
c0010988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001098c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001098f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010993:	8b 00                	mov    eax,DWORD PTR [eax]
c0010995:	85 c0                	test   eax,eax
c0010997:	74 17                	je     c00109b0 <sys_timeout+0x108>
c0010999:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001099d:	8b 00                	mov    eax,DWORD PTR [eax]
c001099f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00109a9:	39 c2                	cmp    edx,eax
c00109ab:	76 43                	jbe    c00109f0 <sys_timeout+0x148>
c00109ad:	8d 76 00             	lea    esi,[esi+0x0]
c00109b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00109b6:	85 c0                	test   eax,eax
c00109b8:	74 1e                	je     c00109d8 <sys_timeout+0x130>
c00109ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109be:	8b 00                	mov    eax,DWORD PTR [eax]
c00109c0:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00109c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00109ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00109d0:	29 d1                	sub    ecx,edx
c00109d2:	89 ca                	mov    edx,ecx
c00109d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00109d7:	90                   	nop
c00109d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109dc:	8b 10                	mov    edx,DWORD PTR [eax]
c00109de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00109e2:	89 10                	mov    DWORD PTR [eax],edx
c00109e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109e8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00109ec:	89 10                	mov    DWORD PTR [eax],edx
c00109ee:	eb 20                	jmp    c0010a10 <sys_timeout+0x168>
c00109f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00109f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00109f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00109fa:	66 90                	xchg   ax,ax
c00109fc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010a01:	0f 85 71 ff ff ff    	jne    c0010978 <sys_timeout+0xd0>
c0010a07:	eb 07                	jmp    c0010a10 <sys_timeout+0x168>
c0010a09:	8d 76 00             	lea    esi,[esi+0x0]
c0010a0c:	90                   	nop
c0010a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0010a10:	83 c4 1c             	add    esp,0x1c
c0010a13:	c3                   	ret    

c0010a14 <tcpip_tcp_timer>:
c0010a14:	83 ec 0c             	sub    esp,0xc
c0010a17:	e8 34 a5 ff ff       	call   c000af50 <tcp_tmr>
c0010a1c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010a21:	85 c0                	test   eax,eax
c0010a23:	75 0b                	jne    c0010a30 <tcpip_tcp_timer+0x1c>
c0010a25:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010a2a:	85 c0                	test   eax,eax
c0010a2c:	74 1e                	je     c0010a4c <tcpip_tcp_timer+0x38>
c0010a2e:	66 90                	xchg   ax,ax
c0010a30:	83 ec 04             	sub    esp,0x4
c0010a33:	6a 00                	push   0x0
c0010a35:	68 14 0a 01 c0       	push   0xc0010a14
c0010a3a:	68 fa 00 00 00       	push   0xfa
c0010a3f:	e8 64 fe ff ff       	call   c00108a8 <sys_timeout>
c0010a44:	83 c4 10             	add    esp,0x10
c0010a47:	eb 0f                	jmp    c0010a58 <tcpip_tcp_timer+0x44>
c0010a49:	8d 76 00             	lea    esi,[esi+0x0]
c0010a4c:	c7 05 d0 a8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x0
c0010a56:	66 90                	xchg   ax,ax
c0010a58:	90                   	nop
c0010a59:	83 c4 0c             	add    esp,0xc
c0010a5c:	c3                   	ret    
c0010a5d:	8d 76 00             	lea    esi,[esi+0x0]

c0010a60 <tcp_timer_needed>:
c0010a60:	83 ec 0c             	sub    esp,0xc
c0010a63:	a1 d0 a8 03 c0       	mov    eax,ds:0xc003a8d0
c0010a68:	85 c0                	test   eax,eax
c0010a6a:	75 38                	jne    c0010aa4 <tcp_timer_needed+0x44>
c0010a6c:	a1 70 68 03 c0       	mov    eax,ds:0xc0036870
c0010a71:	85 c0                	test   eax,eax
c0010a73:	75 0b                	jne    c0010a80 <tcp_timer_needed+0x20>
c0010a75:	a1 84 68 03 c0       	mov    eax,ds:0xc0036884
c0010a7a:	85 c0                	test   eax,eax
c0010a7c:	74 26                	je     c0010aa4 <tcp_timer_needed+0x44>
c0010a7e:	66 90                	xchg   ax,ax
c0010a80:	c7 05 d0 a8 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003a8d0,0x1
c0010a8a:	83 ec 04             	sub    esp,0x4
c0010a8d:	6a 00                	push   0x0
c0010a8f:	68 14 0a 01 c0       	push   0xc0010a14
c0010a94:	68 fa 00 00 00       	push   0xfa
c0010a99:	e8 0a fe ff ff       	call   c00108a8 <sys_timeout>
c0010a9e:	83 c4 10             	add    esp,0x10
c0010aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0010aa4:	90                   	nop
c0010aa5:	83 c4 0c             	add    esp,0xc
c0010aa8:	c3                   	ret    
c0010aa9:	8d 76 00             	lea    esi,[esi+0x0]

c0010aac <ip_reass_timer>:
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	e8 f0 3a 00 00       	call   c00145a4 <ip_reass_tmr>
c0010ab4:	83 ec 04             	sub    esp,0x4
c0010ab7:	6a 00                	push   0x0
c0010ab9:	68 ac 0a 01 c0       	push   0xc0010aac
c0010abe:	68 e8 03 00 00       	push   0x3e8
c0010ac3:	e8 e0 fd ff ff       	call   c00108a8 <sys_timeout>
c0010ac8:	83 c4 10             	add    esp,0x10
c0010acb:	90                   	nop
c0010acc:	83 c4 0c             	add    esp,0xc
c0010acf:	c3                   	ret    

c0010ad0 <arp_timer>:
c0010ad0:	83 ec 0c             	sub    esp,0xc
c0010ad3:	e8 60 0d 00 00       	call   c0011838 <etharp_tmr>
c0010ad8:	83 ec 04             	sub    esp,0x4
c0010adb:	6a 00                	push   0x0
c0010add:	68 d0 0a 01 c0       	push   0xc0010ad0
c0010ae2:	68 88 13 00 00       	push   0x1388
c0010ae7:	e8 bc fd ff ff       	call   c00108a8 <sys_timeout>
c0010aec:	83 c4 10             	add    esp,0x10
c0010aef:	90                   	nop
c0010af0:	83 c4 0c             	add    esp,0xc
c0010af3:	c3                   	ret    

c0010af4 <sys_timeouts_init>:
c0010af4:	83 ec 0c             	sub    esp,0xc
c0010af7:	83 ec 04             	sub    esp,0x4
c0010afa:	6a 00                	push   0x0
c0010afc:	68 ac 0a 01 c0       	push   0xc0010aac
c0010b01:	68 e8 03 00 00       	push   0x3e8
c0010b06:	e8 9d fd ff ff       	call   c00108a8 <sys_timeout>
c0010b0b:	83 c4 10             	add    esp,0x10
c0010b0e:	83 ec 04             	sub    esp,0x4
c0010b11:	6a 00                	push   0x0
c0010b13:	68 d0 0a 01 c0       	push   0xc0010ad0
c0010b18:	68 88 13 00 00       	push   0x1388
c0010b1d:	e8 86 fd ff ff       	call   c00108a8 <sys_timeout>
c0010b22:	83 c4 10             	add    esp,0x10
c0010b25:	90                   	nop
c0010b26:	83 c4 0c             	add    esp,0xc
c0010b29:	c3                   	ret    
c0010b2a:	66 90                	xchg   ax,ax

c0010b2c <sys_untimeout>:
c0010b2c:	83 ec 1c             	sub    esp,0x1c
c0010b2f:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b34:	85 c0                	test   eax,eax
c0010b36:	0f 84 b4 00 00 00    	je     c0010bf0 <sys_untimeout+0xc4>
c0010b3c:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010b45:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010b4d:	e9 8e 00 00 00       	jmp    c0010be0 <sys_untimeout+0xb4>
c0010b52:	66 90                	xchg   ax,ax
c0010b54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010b5b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0010b5f:	75 6b                	jne    c0010bcc <sys_untimeout+0xa0>
c0010b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b65:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010b68:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0010b6c:	75 5e                	jne    c0010bcc <sys_untimeout+0xa0>
c0010b6e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0010b73:	75 0f                	jne    c0010b84 <sys_untimeout+0x58>
c0010b75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b79:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b7b:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010b80:	eb 0e                	jmp    c0010b90 <sys_untimeout+0x64>
c0010b82:	66 90                	xchg   ax,ax
c0010b84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b88:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b8e:	89 10                	mov    DWORD PTR [eax],edx
c0010b90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b96:	85 c0                	test   eax,eax
c0010b98:	74 1e                	je     c0010bb8 <sys_untimeout+0x8c>
c0010b9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ba0:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0010ba3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ba7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010baa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bb0:	01 ca                	add    edx,ecx
c0010bb2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010bb5:	8d 76 00             	lea    esi,[esi+0x0]
c0010bb8:	83 ec 08             	sub    esp,0x8
c0010bbb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010bbf:	6a 0b                	push   0xb
c0010bc1:	e8 1e 6e ff ff       	call   c00079e4 <memp_free>
c0010bc6:	83 c4 10             	add    esp,0x10
c0010bc9:	eb 29                	jmp    c0010bf4 <sys_untimeout+0xc8>
c0010bcb:	90                   	nop
c0010bcc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bd0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010bd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010bd8:	8b 00                	mov    eax,DWORD PTR [eax]
c0010bda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010bde:	66 90                	xchg   ax,ax
c0010be0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010be5:	0f 85 69 ff ff ff    	jne    c0010b54 <sys_untimeout+0x28>
c0010beb:	90                   	nop
c0010bec:	eb 06                	jmp    c0010bf4 <sys_untimeout+0xc8>
c0010bee:	66 90                	xchg   ax,ax
c0010bf0:	90                   	nop
c0010bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0010bf4:	83 c4 1c             	add    esp,0x1c
c0010bf7:	c3                   	ret    

c0010bf8 <sys_timeouts_mbox_fetch>:
c0010bf8:	83 ec 1c             	sub    esp,0x1c
c0010bfb:	90                   	nop
c0010bfc:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c01:	85 c0                	test   eax,eax
c0010c03:	75 1f                	jne    c0010c24 <sys_timeouts_mbox_fetch+0x2c>
c0010c05:	83 ec 04             	sub    esp,0x4
c0010c08:	6a 00                	push   0x0
c0010c0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c12:	e8 ad 00 ff ff       	call   c0000cc4 <sys_arch_mbox_fetch>
c0010c17:	83 c4 10             	add    esp,0x10
c0010c1a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c1e:	e9 cd 00 00 00       	jmp    c0010cf0 <sys_timeouts_mbox_fetch+0xf8>
c0010c23:	90                   	nop
c0010c24:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c29:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c2c:	85 c0                	test   eax,eax
c0010c2e:	74 24                	je     c0010c54 <sys_timeouts_mbox_fetch+0x5c>
c0010c30:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c38:	83 ec 04             	sub    esp,0x4
c0010c3b:	50                   	push   eax
c0010c3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c40:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010c44:	e8 7b 00 ff ff       	call   c0000cc4 <sys_arch_mbox_fetch>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c50:	eb 0a                	jmp    c0010c5c <sys_timeouts_mbox_fetch+0x64>
c0010c52:	66 90                	xchg   ax,ax
c0010c54:	c7 44 24 0c ff ff ff ff 	mov    DWORD PTR [esp+0xc],0xffffffff
c0010c5c:	83 7c 24 0c ff       	cmp    DWORD PTR [esp+0xc],0xffffffff
c0010c61:	75 5d                	jne    c0010cc0 <sys_timeouts_mbox_fetch+0xc8>
c0010c63:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c72:	a3 d4 a8 03 c0       	mov    ds:0xc003a8d4,eax
c0010c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c7b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010c7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010c82:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c86:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c89:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c8c:	83 ec 08             	sub    esp,0x8
c0010c8f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010c93:	6a 0b                	push   0xb
c0010c95:	e8 4a 6d ff ff       	call   c00079e4 <memp_free>
c0010c9a:	83 c4 10             	add    esp,0x10
c0010c9d:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0010ca2:	0f 84 54 ff ff ff    	je     c0010bfc <sys_timeouts_mbox_fetch+0x4>
c0010ca8:	83 ec 0c             	sub    esp,0xc
c0010cab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0010caf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010cb3:	ff d0                	call   eax
c0010cb5:	83 c4 10             	add    esp,0x10
c0010cb8:	e9 3f ff ff ff       	jmp    c0010bfc <sys_timeouts_mbox_fetch+0x4>
c0010cbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010cc0:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cc5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cc8:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0010ccc:	73 16                	jae    c0010ce4 <sys_timeouts_mbox_fetch+0xec>
c0010cce:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cd3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010cd6:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010cdb:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0010cdf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ce2:	eb 0c                	jmp    c0010cf0 <sys_timeouts_mbox_fetch+0xf8>
c0010ce4:	a1 d4 a8 03 c0       	mov    eax,ds:0xc003a8d4
c0010ce9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cf0:	90                   	nop
c0010cf1:	83 c4 1c             	add    esp,0x1c
c0010cf4:	c3                   	ret    
c0010cf5:	66 90                	xchg   ax,ax
c0010cf7:	90                   	nop

c0010cf8 <udp_input>:
c0010cf8:	53                   	push   ebx
c0010cf9:	83 ec 28             	sub    esp,0x28
c0010cfc:	66 a1 9a 67 03 c0    	mov    ax,ds:0xc003679a
c0010d02:	83 c0 01             	add    eax,0x1
c0010d05:	66 a3 9a 67 03 c0    	mov    ds:0xc003679a,ax
c0010d0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010d1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010d1d:	0f b7 d8             	movzx  ebx,ax
c0010d20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d24:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010d27:	0f b7 c0             	movzx  eax,ax
c0010d2a:	83 ec 0c             	sub    esp,0xc
c0010d2d:	50                   	push   eax
c0010d2e:	e8 b5 fe fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010d33:	83 c4 10             	add    esp,0x10
c0010d36:	0f b7 c0             	movzx  eax,ax
c0010d39:	c1 e8 08             	shr    eax,0x8
c0010d3c:	0f b7 c0             	movzx  eax,ax
c0010d3f:	83 e0 0f             	and    eax,0xf
c0010d42:	83 c0 02             	add    eax,0x2
c0010d45:	c1 e0 02             	shl    eax,0x2
c0010d48:	39 c3                	cmp    ebx,eax
c0010d4a:	7c 3c                	jl     c0010d88 <udp_input+0x90>
c0010d4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d50:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010d53:	0f b7 c0             	movzx  eax,ax
c0010d56:	83 ec 0c             	sub    esp,0xc
c0010d59:	50                   	push   eax
c0010d5a:	e8 89 fe fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010d5f:	83 c4 10             	add    esp,0x10
c0010d62:	0f b7 c0             	movzx  eax,ax
c0010d65:	c1 e8 08             	shr    eax,0x8
c0010d68:	83 e0 0f             	and    eax,0xf
c0010d6b:	c1 e0 02             	shl    eax,0x2
c0010d6e:	f7 d8                	neg    eax
c0010d70:	98                   	cwde   
c0010d71:	83 ec 08             	sub    esp,0x8
c0010d74:	50                   	push   eax
c0010d75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d79:	e8 86 73 ff ff       	call   c0008104 <pbuf_header>
c0010d7e:	83 c4 10             	add    esp,0x10
c0010d81:	0f b6 c0             	movzx  eax,al
c0010d84:	85 c0                	test   eax,eax
c0010d86:	74 34                	je     c0010dbc <udp_input+0xc4>
c0010d88:	66 a1 a2 67 03 c0    	mov    ax,ds:0xc00367a2
c0010d8e:	83 c0 01             	add    eax,0x1
c0010d91:	66 a3 a2 67 03 c0    	mov    ds:0xc00367a2,ax
c0010d97:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010d9d:	83 c0 01             	add    eax,0x1
c0010da0:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010da6:	83 ec 0c             	sub    esp,0xc
c0010da9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010dad:	e8 ee 74 ff ff       	call   c00082a0 <pbuf_free>
c0010db2:	83 c4 10             	add    esp,0x10
c0010db5:	e9 aa 03 00 00       	jmp    c0011164 <udp_input+0x46c>
c0010dba:	66 90                	xchg   ax,ax
c0010dbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010dc7:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010dcc:	83 ec 08             	sub    esp,0x8
c0010dcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010dd3:	50                   	push   eax
c0010dd4:	e8 bb 2f 00 00       	call   c0013d94 <ip4_addr_isbroadcast>
c0010dd9:	83 c4 10             	add    esp,0x10
c0010ddc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010de0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010de4:	66 8b 00             	mov    ax,WORD PTR [eax]
c0010de7:	0f b7 c0             	movzx  eax,ax
c0010dea:	83 ec 0c             	sub    esp,0xc
c0010ded:	50                   	push   eax
c0010dee:	e8 f5 fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010df3:	83 c4 10             	add    esp,0x10
c0010df6:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0010dfb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010dff:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0010e03:	0f b7 c0             	movzx  eax,ax
c0010e06:	83 ec 0c             	sub    esp,0xc
c0010e09:	50                   	push   eax
c0010e0a:	e8 d9 fd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0010e0f:	83 c4 10             	add    esp,0x10
c0010e12:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0010e17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0010e1f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010e24:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e2c:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0010e31:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010e35:	e9 0a 01 00 00       	jmp    c0010f44 <udp_input+0x24c>
c0010e3a:	66 90                	xchg   ax,ax
c0010e3c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0010e41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e45:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0010e49:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c0010e4e:	0f b7 c0             	movzx  eax,ax
c0010e51:	39 c2                	cmp    edx,eax
c0010e53:	75 57                	jne    c0010eac <udp_input+0x1b4>
c0010e55:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010e5a:	85 c0                	test   eax,eax
c0010e5c:	75 12                	jne    c0010e70 <udp_input+0x178>
c0010e5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e62:	85 c0                	test   eax,eax
c0010e64:	74 22                	je     c0010e88 <udp_input+0x190>
c0010e66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e6c:	85 c0                	test   eax,eax
c0010e6e:	74 18                	je     c0010e88 <udp_input+0x190>
c0010e70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e74:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e76:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010e7b:	39 c2                	cmp    edx,eax
c0010e7d:	74 09                	je     c0010e88 <udp_input+0x190>
c0010e7f:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0010e84:	85 c0                	test   eax,eax
c0010e86:	74 24                	je     c0010eac <udp_input+0x1b4>
c0010e88:	c6 44 24 13 01       	mov    BYTE PTR [esp+0x13],0x1
c0010e8d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e92:	75 18                	jne    c0010eac <udp_input+0x1b4>
c0010e94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e98:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0010e9b:	0f b6 c0             	movzx  eax,al
c0010e9e:	83 e0 04             	and    eax,0x4
c0010ea1:	75 09                	jne    c0010eac <udp_input+0x1b4>
c0010ea3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ea7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010eab:	90                   	nop
c0010eac:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0010eb1:	85 c0                	test   eax,eax
c0010eb3:	74 7b                	je     c0010f30 <udp_input+0x238>
c0010eb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010eb9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010ebc:	0f b7 54 24 04       	movzx  edx,WORD PTR [esp+0x4]
c0010ec1:	0f b7 c0             	movzx  eax,ax
c0010ec4:	39 c2                	cmp    edx,eax
c0010ec6:	75 68                	jne    c0010f30 <udp_input+0x238>
c0010ec8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ecc:	83 c0 04             	add    eax,0x4
c0010ecf:	74 1b                	je     c0010eec <udp_input+0x1f4>
c0010ed1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ed5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed8:	85 c0                	test   eax,eax
c0010eda:	74 10                	je     c0010eec <udp_input+0x1f4>
c0010edc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ee0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010ee3:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0010ee8:	39 c2                	cmp    edx,eax
c0010eea:	75 44                	jne    c0010f30 <udp_input+0x238>
c0010eec:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0010ef1:	74 29                	je     c0010f1c <udp_input+0x224>
c0010ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010ef7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010efa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010efe:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f01:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c0010f07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f0b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010f0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f12:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c0010f17:	eb 37                	jmp    c0010f50 <udp_input+0x258>
c0010f19:	8d 76 00             	lea    esi,[esi+0x0]
c0010f1c:	66 a1 ae 67 03 c0    	mov    ax,ds:0xc00367ae
c0010f22:	83 c0 01             	add    eax,0x1
c0010f25:	66 a3 ae 67 03 c0    	mov    ds:0xc00367ae,ax
c0010f2b:	eb 23                	jmp    c0010f50 <udp_input+0x258>
c0010f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010f38:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f3c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010f3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f43:	90                   	nop
c0010f44:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010f49:	0f 85 ed fe ff ff    	jne    c0010e3c <udp_input+0x144>
c0010f4f:	90                   	nop
c0010f50:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010f55:	75 09                	jne    c0010f60 <udp_input+0x268>
c0010f57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010f5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010f5f:	90                   	nop
c0010f60:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0010f65:	75 15                	jne    c0010f7c <udp_input+0x284>
c0010f67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010f6b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f6e:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0010f73:	39 c2                	cmp    edx,eax
c0010f75:	0f 85 d9 01 00 00    	jne    c0011154 <udp_input+0x45c>
c0010f7b:	90                   	nop
c0010f7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010f80:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0010f84:	0f b7 c0             	movzx  eax,ax
c0010f87:	85 c0                	test   eax,eax
c0010f89:	74 61                	je     c0010fec <udp_input+0x2f4>
c0010f8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010f8f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010f92:	0f b7 c0             	movzx  eax,ax
c0010f95:	83 ec 0c             	sub    esp,0xc
c0010f98:	50                   	push   eax
c0010f99:	6a 11                	push   0x11
c0010f9b:	68 98 68 03 c0       	push   0xc0036898
c0010fa0:	68 90 68 03 c0       	push   0xc0036890
c0010fa5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010fa9:	e8 0e 21 00 00       	call   c00130bc <inet_chksum_pseudo>
c0010fae:	83 c4 20             	add    esp,0x20
c0010fb1:	0f b7 c0             	movzx  eax,ax
c0010fb4:	85 c0                	test   eax,eax
c0010fb6:	74 34                	je     c0010fec <udp_input+0x2f4>
c0010fb8:	66 a1 a0 67 03 c0    	mov    ax,ds:0xc00367a0
c0010fbe:	83 c0 01             	add    eax,0x1
c0010fc1:	66 a3 a0 67 03 c0    	mov    ds:0xc00367a0,ax
c0010fc7:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0010fcd:	83 c0 01             	add    eax,0x1
c0010fd0:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0010fd6:	83 ec 0c             	sub    esp,0xc
c0010fd9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010fdd:	e8 be 72 ff ff       	call   c00082a0 <pbuf_free>
c0010fe2:	83 c4 10             	add    esp,0x10
c0010fe5:	e9 7a 01 00 00       	jmp    c0011164 <udp_input+0x46c>
c0010fea:	66 90                	xchg   ax,ax
c0010fec:	83 ec 08             	sub    esp,0x8
c0010fef:	6a f8                	push   0xfffffff8
c0010ff1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010ff5:	e8 0a 71 ff ff       	call   c0008104 <pbuf_header>
c0010ffa:	83 c4 10             	add    esp,0x10
c0010ffd:	0f b6 c0             	movzx  eax,al
c0011000:	85 c0                	test   eax,eax
c0011002:	74 38                	je     c001103c <udp_input+0x344>
c0011004:	83 ec 08             	sub    esp,0x8
c0011007:	68 c9 08 03 c0       	push   0xc00308c9
c001100c:	68 66 f9 02 c0       	push   0xc002f966
c0011011:	e8 be ea 00 00       	call   c001fad4 <CPrintf>
c0011016:	83 c4 10             	add    esp,0x10
c0011019:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c001101f:	83 c0 01             	add    eax,0x1
c0011022:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011028:	83 ec 0c             	sub    esp,0xc
c001102b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001102f:	e8 6c 72 ff ff       	call   c00082a0 <pbuf_free>
c0011034:	83 c4 10             	add    esp,0x10
c0011037:	e9 28 01 00 00       	jmp    c0011164 <udp_input+0x46c>
c001103c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011041:	74 51                	je     c0011094 <udp_input+0x39c>
c0011043:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011047:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001104a:	85 c0                	test   eax,eax
c001104c:	74 32                	je     c0011080 <udp_input+0x388>
c001104e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011052:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011055:	0f b7 4c 24 04       	movzx  ecx,WORD PTR [esp+0x4]
c001105a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001105e:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0011061:	83 ec 0c             	sub    esp,0xc
c0011064:	51                   	push   ecx
c0011065:	68 90 68 03 c0       	push   0xc0036890
c001106a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001106e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011072:	52                   	push   edx
c0011073:	ff d0                	call   eax
c0011075:	83 c4 20             	add    esp,0x20
c0011078:	e9 e7 00 00 00       	jmp    c0011164 <udp_input+0x46c>
c001107d:	8d 76 00             	lea    esi,[esi+0x0]
c0011080:	83 ec 0c             	sub    esp,0xc
c0011083:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011087:	e8 14 72 ff ff       	call   c00082a0 <pbuf_free>
c001108c:	83 c4 10             	add    esp,0x10
c001108f:	e9 d0 00 00 00       	jmp    c0011164 <udp_input+0x46c>
c0011094:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c0011099:	85 c0                	test   eax,eax
c001109b:	0f 85 83 00 00 00    	jne    c0011124 <udp_input+0x42c>
c00110a1:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00110a6:	25 f0 00 00 00       	and    eax,0xf0
c00110ab:	3d e0 00 00 00       	cmp    eax,0xe0
c00110b0:	74 72                	je     c0011124 <udp_input+0x42c>
c00110b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110b6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00110b9:	0f b7 c0             	movzx  eax,ax
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	50                   	push   eax
c00110c0:	e8 23 fb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00110c5:	83 c4 10             	add    esp,0x10
c00110c8:	0f b7 c0             	movzx  eax,ax
c00110cb:	c1 e8 08             	shr    eax,0x8
c00110ce:	0f b7 c0             	movzx  eax,ax
c00110d1:	83 e0 0f             	and    eax,0xf
c00110d4:	83 c0 02             	add    eax,0x2
c00110d7:	c1 e0 02             	shl    eax,0x2
c00110da:	98                   	cwde   
c00110db:	83 ec 08             	sub    esp,0x8
c00110de:	50                   	push   eax
c00110df:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110e3:	e8 1c 70 ff ff       	call   c0008104 <pbuf_header>
c00110e8:	83 c4 10             	add    esp,0x10
c00110eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00110ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110f2:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00110f6:	74 18                	je     c0011110 <udp_input+0x418>
c00110f8:	83 ec 08             	sub    esp,0x8
c00110fb:	68 dd 08 03 c0       	push   0xc00308dd
c0011100:	68 66 f9 02 c0       	push   0xc002f966
c0011105:	e8 ca e9 00 00       	call   c001fad4 <CPrintf>
c001110a:	83 c4 10             	add    esp,0x10
c001110d:	8d 76 00             	lea    esi,[esi+0x0]
c0011110:	83 ec 08             	sub    esp,0x8
c0011113:	6a 03                	push   0x3
c0011115:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011119:	e8 5e 1e 00 00       	call   c0012f7c <icmp_dest_unreach>
c001111e:	83 c4 10             	add    esp,0x10
c0011121:	8d 76 00             	lea    esi,[esi+0x0]
c0011124:	66 a1 a8 67 03 c0    	mov    ax,ds:0xc00367a8
c001112a:	83 c0 01             	add    eax,0x1
c001112d:	66 a3 a8 67 03 c0    	mov    ds:0xc00367a8,ax
c0011133:	66 a1 9e 67 03 c0    	mov    ax,ds:0xc003679e
c0011139:	83 c0 01             	add    eax,0x1
c001113c:	66 a3 9e 67 03 c0    	mov    ds:0xc003679e,ax
c0011142:	83 ec 0c             	sub    esp,0xc
c0011145:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011149:	e8 52 71 ff ff       	call   c00082a0 <pbuf_free>
c001114e:	83 c4 10             	add    esp,0x10
c0011151:	eb 11                	jmp    c0011164 <udp_input+0x46c>
c0011153:	90                   	nop
c0011154:	83 ec 0c             	sub    esp,0xc
c0011157:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001115b:	e8 40 71 ff ff       	call   c00082a0 <pbuf_free>
c0011160:	83 c4 10             	add    esp,0x10
c0011163:	90                   	nop
c0011164:	90                   	nop
c0011165:	83 c4 28             	add    esp,0x28
c0011168:	5b                   	pop    ebx
c0011169:	c3                   	ret    
c001116a:	66 90                	xchg   ax,ax

c001116c <udp_bind>:
c001116c:	83 ec 2c             	sub    esp,0x2c
c001116f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011173:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011178:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c001117d:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011182:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011186:	e9 8d 00 00 00       	jmp    c0011218 <udp_bind+0xac>
c001118b:	90                   	nop
c001118c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011190:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0011194:	75 26                	jne    c00111bc <udp_bind+0x50>
c0011196:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001119b:	85 c0                	test   eax,eax
c001119d:	74 15                	je     c00111b4 <udp_bind+0x48>
c001119f:	83 ec 08             	sub    esp,0x8
c00111a2:	68 f1 08 03 c0       	push   0xc00308f1
c00111a7:	68 66 f9 02 c0       	push   0xc002f966
c00111ac:	e8 23 e9 00 00       	call   c001fad4 <CPrintf>
c00111b1:	83 c4 10             	add    esp,0x10
c00111b4:	c6 44 24 1b 01       	mov    BYTE PTR [esp+0x1b],0x1
c00111b9:	eb 51                	jmp    c001120c <udp_bind+0xa0>
c00111bb:	90                   	nop
c00111bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111c0:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00111c4:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c00111c9:	0f b7 c0             	movzx  eax,ax
c00111cc:	39 c2                	cmp    edx,eax
c00111ce:	75 3c                	jne    c001120c <udp_bind+0xa0>
c00111d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111d4:	85 c0                	test   eax,eax
c00111d6:	74 2c                	je     c0011204 <udp_bind+0x98>
c00111d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00111de:	85 c0                	test   eax,eax
c00111e0:	74 22                	je     c0011204 <udp_bind+0x98>
c00111e2:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00111e7:	74 1b                	je     c0011204 <udp_bind+0x98>
c00111e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00111ef:	85 c0                	test   eax,eax
c00111f1:	74 11                	je     c0011204 <udp_bind+0x98>
c00111f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00111f9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00111fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00111ff:	39 c2                	cmp    edx,eax
c0011201:	75 09                	jne    c001120c <udp_bind+0xa0>
c0011203:	90                   	nop
c0011204:	b0 f8                	mov    al,0xf8
c0011206:	e9 dd 00 00 00       	jmp    c00112e8 <udp_bind+0x17c>
c001120b:	90                   	nop
c001120c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011210:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011213:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011217:	90                   	nop
c0011218:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001121d:	0f 85 69 ff ff ff    	jne    c001118c <udp_bind+0x20>
c0011223:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011228:	74 0a                	je     c0011234 <udp_bind+0xc8>
c001122a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001122e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011230:	eb 0a                	jmp    c001123c <udp_bind+0xd0>
c0011232:	66 90                	xchg   ax,ax
c0011234:	b8 00 00 00 00       	mov    eax,0x0
c0011239:	8d 76 00             	lea    esi,[esi+0x0]
c001123c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011240:	89 02                	mov    DWORD PTR [edx],eax
c0011242:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0011247:	85 c0                	test   eax,eax
c0011249:	75 6d                	jne    c00112b8 <udp_bind+0x14c>
c001124b:	66 c7 44 24 0c 00 c0 	mov    WORD PTR [esp+0xc],0xc000
c0011252:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011257:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001125b:	eb 3b                	jmp    c0011298 <udp_bind+0x12c>
c001125d:	8d 76 00             	lea    esi,[esi+0x0]
c0011260:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011264:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011268:	0f b7 54 24 0c       	movzx  edx,WORD PTR [esp+0xc]
c001126d:	0f b7 c0             	movzx  eax,ax
c0011270:	39 c2                	cmp    edx,eax
c0011272:	75 18                	jne    c001128c <udp_bind+0x120>
c0011274:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011278:	83 c0 01             	add    eax,0x1
c001127b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011280:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011285:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011289:	eb 0d                	jmp    c0011298 <udp_bind+0x12c>
c001128b:	90                   	nop
c001128c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011290:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011293:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011297:	90                   	nop
c0011298:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001129d:	74 0d                	je     c00112ac <udp_bind+0x140>
c001129f:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00112a4:	3d ff ff 00 00       	cmp    eax,0xffff
c00112a9:	75 b5                	jne    c0011260 <udp_bind+0xf4>
c00112ab:	90                   	nop
c00112ac:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00112b1:	74 05                	je     c00112b8 <udp_bind+0x14c>
c00112b3:	b0 f8                	mov    al,0xf8
c00112b5:	eb 31                	jmp    c00112e8 <udp_bind+0x17c>
c00112b7:	90                   	nop
c00112b8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00112bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112c0:	66 89 42 12          	mov    WORD PTR [edx+0x12],ax
c00112c4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c00112c9:	85 c0                	test   eax,eax
c00112cb:	75 17                	jne    c00112e4 <udp_bind+0x178>
c00112cd:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c00112d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00112da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112de:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00112e3:	90                   	nop
c00112e4:	b0 00                	mov    al,0x0
c00112e6:	66 90                	xchg   ax,ax
c00112e8:	83 c4 2c             	add    esp,0x2c
c00112eb:	c3                   	ret    

c00112ec <udp_sendto_if>:
c00112ec:	83 ec 2c             	sub    esp,0x2c
c00112ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00112f3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00112f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00112fc:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011300:	0f b7 c0             	movzx  eax,ax
c0011303:	85 c0                	test   eax,eax
c0011305:	75 39                	jne    c0011340 <udp_sendto_if+0x54>
c0011307:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001130b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001130f:	0f b7 d0             	movzx  edx,ax
c0011312:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011316:	83 ec 04             	sub    esp,0x4
c0011319:	52                   	push   edx
c001131a:	50                   	push   eax
c001131b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001131f:	e8 48 fe ff ff       	call   c001116c <udp_bind>
c0011324:	83 c4 10             	add    esp,0x10
c0011327:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c001132b:	0f be 44 24 15       	movsx  eax,BYTE PTR [esp+0x15]
c0011330:	85 c0                	test   eax,eax
c0011332:	74 0c                	je     c0011340 <udp_sendto_if+0x54>
c0011334:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011338:	e9 2b 02 00 00       	jmp    c0011568 <udp_sendto_if+0x27c>
c001133d:	8d 76 00             	lea    esi,[esi+0x0]
c0011340:	83 ec 08             	sub    esp,0x8
c0011343:	6a 08                	push   0x8
c0011345:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011349:	e8 b6 6d ff ff       	call   c0008104 <pbuf_header>
c001134e:	83 c4 10             	add    esp,0x10
c0011351:	0f b6 c0             	movzx  eax,al
c0011354:	85 c0                	test   eax,eax
c0011356:	74 48                	je     c00113a0 <udp_sendto_if+0xb4>
c0011358:	83 ec 04             	sub    esp,0x4
c001135b:	6a 00                	push   0x0
c001135d:	6a 08                	push   0x8
c001135f:	6a 01                	push   0x1
c0011361:	e8 12 71 ff ff       	call   c0008478 <pbuf_alloc>
c0011366:	83 c4 10             	add    esp,0x10
c0011369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001136d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0011372:	75 08                	jne    c001137c <udp_sendto_if+0x90>
c0011374:	b0 ff                	mov    al,0xff
c0011376:	e9 ed 01 00 00       	jmp    c0011568 <udp_sendto_if+0x27c>
c001137b:	90                   	nop
c001137c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011380:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011383:	0f b7 c0             	movzx  eax,ax
c0011386:	85 c0                	test   eax,eax
c0011388:	74 1e                	je     c00113a8 <udp_sendto_if+0xbc>
c001138a:	83 ec 08             	sub    esp,0x8
c001138d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011391:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011395:	e8 1e 78 ff ff       	call   c0008bb8 <pbuf_chain>
c001139a:	83 c4 10             	add    esp,0x10
c001139d:	eb 09                	jmp    c00113a8 <udp_sendto_if+0xbc>
c001139f:	90                   	nop
c00113a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00113a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00113a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00113ac:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00113b0:	0f b7 c0             	movzx  eax,ax
c00113b3:	83 f8 07             	cmp    eax,0x7
c00113b6:	77 18                	ja     c00113d0 <udp_sendto_if+0xe4>
c00113b8:	83 ec 08             	sub    esp,0x8
c00113bb:	68 00 09 03 c0       	push   0xc0030900
c00113c0:	68 66 f9 02 c0       	push   0xc002f966
c00113c5:	e8 0a e7 00 00       	call   c001fad4 <CPrintf>
c00113ca:	83 c4 10             	add    esp,0x10
c00113cd:	8d 76 00             	lea    esi,[esi+0x0]
c00113d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00113d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00113df:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c00113e3:	0f b7 c0             	movzx  eax,ax
c00113e6:	83 ec 0c             	sub    esp,0xc
c00113e9:	50                   	push   eax
c00113ea:	e8 f9 f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00113ef:	83 c4 10             	add    esp,0x10
c00113f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00113f6:	66 89 02             	mov    WORD PTR [edx],ax
c00113f9:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00113fe:	83 ec 0c             	sub    esp,0xc
c0011401:	50                   	push   eax
c0011402:	e8 e1 f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011407:	83 c4 10             	add    esp,0x10
c001140a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001140e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0011412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011416:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c001141c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011420:	85 c0                	test   eax,eax
c0011422:	74 0c                	je     c0011430 <udp_sendto_if+0x144>
c0011424:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011428:	8b 00                	mov    eax,DWORD PTR [eax]
c001142a:	85 c0                	test   eax,eax
c001142c:	75 12                	jne    c0011440 <udp_sendto_if+0x154>
c001142e:	66 90                	xchg   ax,ax
c0011430:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011434:	83 c0 04             	add    eax,0x4
c0011437:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001143b:	eb 47                	jmp    c0011484 <udp_sendto_if+0x198>
c001143d:	8d 76 00             	lea    esi,[esi+0x0]
c0011440:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011444:	8b 10                	mov    edx,DWORD PTR [eax]
c0011446:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001144a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001144d:	39 c2                	cmp    edx,eax
c001144f:	74 2b                	je     c001147c <udp_sendto_if+0x190>
c0011451:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011455:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0011459:	74 19                	je     c0011474 <udp_sendto_if+0x188>
c001145b:	83 ec 0c             	sub    esp,0xc
c001145e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011462:	e8 39 6e ff ff       	call   c00082a0 <pbuf_free>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011472:	66 90                	xchg   ax,ax
c0011474:	b0 fa                	mov    al,0xfa
c0011476:	e9 ed 00 00 00       	jmp    c0011568 <udp_sendto_if+0x27c>
c001147b:	90                   	nop
c001147c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011480:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011484:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011488:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001148b:	0f b7 c0             	movzx  eax,ax
c001148e:	83 ec 0c             	sub    esp,0xc
c0011491:	50                   	push   eax
c0011492:	e8 51 f7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0011497:	83 c4 10             	add    esp,0x10
c001149a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001149e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00114a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114a6:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00114a9:	0f b6 c0             	movzx  eax,al
c00114ac:	83 e0 01             	and    eax,0x1
c00114af:	75 4b                	jne    c00114fc <udp_sendto_if+0x210>
c00114b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00114b5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00114b8:	0f b7 c0             	movzx  eax,ax
c00114bb:	83 ec 0c             	sub    esp,0xc
c00114be:	50                   	push   eax
c00114bf:	6a 11                	push   0x11
c00114c1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00114c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00114c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00114cd:	e8 ea 1b 00 00       	call   c00130bc <inet_chksum_pseudo>
c00114d2:	83 c4 20             	add    esp,0x20
c00114d5:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00114da:	0f b7 44 24 16       	movzx  eax,WORD PTR [esp+0x16]
c00114df:	85 c0                	test   eax,eax
c00114e1:	75 09                	jne    c00114ec <udp_sendto_if+0x200>
c00114e3:	66 c7 44 24 16 ff ff 	mov    WORD PTR [esp+0x16],0xffff
c00114ea:	66 90                	xchg   ax,ax
c00114ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00114f0:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00114f5:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00114f9:	8d 76 00             	lea    esi,[esi+0x0]
c00114fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011500:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0011503:	0f b6 d0             	movzx  edx,al
c0011506:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001150a:	8a 40 0a             	mov    al,BYTE PTR [eax+0xa]
c001150d:	0f b6 c0             	movzx  eax,al
c0011510:	83 ec 04             	sub    esp,0x4
c0011513:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011517:	6a 11                	push   0x11
c0011519:	52                   	push   edx
c001151a:	50                   	push   eax
c001151b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001151f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011523:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011527:	e8 f4 24 00 00       	call   c0013a20 <ip_output_if>
c001152c:	83 c4 20             	add    esp,0x20
c001152f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0011533:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011537:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001153b:	74 17                	je     c0011554 <udp_sendto_if+0x268>
c001153d:	83 ec 0c             	sub    esp,0xc
c0011540:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011544:	e8 57 6d ff ff       	call   c00082a0 <pbuf_free>
c0011549:	83 c4 10             	add    esp,0x10
c001154c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011554:	66 a1 98 67 03 c0    	mov    ax,ds:0xc0036798
c001155a:	83 c0 01             	add    eax,0x1
c001155d:	66 a3 98 67 03 c0    	mov    ds:0xc0036798,ax
c0011563:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0011567:	90                   	nop
c0011568:	83 c4 2c             	add    esp,0x2c
c001156b:	c3                   	ret    

c001156c <udp_sendto>:
c001156c:	83 ec 2c             	sub    esp,0x2c
c001156f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011573:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011578:	83 ec 0c             	sub    esp,0xc
c001157b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001157f:	e8 c4 1f 00 00       	call   c0013548 <ip_route>
c0011584:	83 c4 10             	add    esp,0x10
c0011587:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001158b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011590:	75 16                	jne    c00115a8 <udp_sendto+0x3c>
c0011592:	66 a1 a6 67 03 c0    	mov    ax,ds:0xc00367a6
c0011598:	83 c0 01             	add    eax,0x1
c001159b:	66 a3 a6 67 03 c0    	mov    ds:0xc00367a6,ax
c00115a1:	b0 fc                	mov    al,0xfc
c00115a3:	eb 27                	jmp    c00115cc <udp_sendto+0x60>
c00115a5:	8d 76 00             	lea    esi,[esi+0x0]
c00115a8:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00115ad:	83 ec 0c             	sub    esp,0xc
c00115b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00115b4:	50                   	push   eax
c00115b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00115c1:	e8 26 fd ff ff       	call   c00112ec <udp_sendto_if>
c00115c6:	83 c4 20             	add    esp,0x20
c00115c9:	8d 76 00             	lea    esi,[esi+0x0]
c00115cc:	83 c4 2c             	add    esp,0x2c
c00115cf:	c3                   	ret    

c00115d0 <udp_send>:
c00115d0:	83 ec 0c             	sub    esp,0xc
c00115d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115d7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00115da:	0f b7 c0             	movzx  eax,ax
c00115dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00115e1:	83 c2 04             	add    edx,0x4
c00115e4:	50                   	push   eax
c00115e5:	52                   	push   edx
c00115e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115ee:	e8 79 ff ff ff       	call   c001156c <udp_sendto>
c00115f3:	83 c4 10             	add    esp,0x10
c00115f6:	83 c4 0c             	add    esp,0xc
c00115f9:	c3                   	ret    
c00115fa:	66 90                	xchg   ax,ax

c00115fc <udp_connect>:
c00115fc:	83 ec 2c             	sub    esp,0x2c
c00115ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011603:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011608:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001160c:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c0011610:	0f b7 c0             	movzx  eax,ax
c0011613:	85 c0                	test   eax,eax
c0011615:	75 39                	jne    c0011650 <udp_connect+0x54>
c0011617:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001161b:	66 8b 40 12          	mov    ax,WORD PTR [eax+0x12]
c001161f:	0f b7 d0             	movzx  edx,ax
c0011622:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011626:	83 ec 04             	sub    esp,0x4
c0011629:	52                   	push   edx
c001162a:	50                   	push   eax
c001162b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001162f:	e8 38 fb ff ff       	call   c001116c <udp_bind>
c0011634:	83 c4 10             	add    esp,0x10
c0011637:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001163b:	0f be 44 24 1b       	movsx  eax,BYTE PTR [esp+0x1b]
c0011640:	85 c0                	test   eax,eax
c0011642:	74 0c                	je     c0011650 <udp_connect+0x54>
c0011644:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0011648:	e9 8b 00 00 00       	jmp    c00116d8 <udp_connect+0xdc>
c001164d:	8d 76 00             	lea    esi,[esi+0x0]
c0011650:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011655:	74 09                	je     c0011660 <udp_connect+0x64>
c0011657:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001165b:	8b 00                	mov    eax,DWORD PTR [eax]
c001165d:	eb 09                	jmp    c0011668 <udp_connect+0x6c>
c001165f:	90                   	nop
c0011660:	b8 00 00 00 00       	mov    eax,0x0
c0011665:	8d 76 00             	lea    esi,[esi+0x0]
c0011668:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001166c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001166f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011673:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011677:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001167b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001167f:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c0011682:	83 c8 04             	or     eax,0x4
c0011685:	88 c2                	mov    dl,al
c0011687:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001168b:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c001168e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011693:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011697:	eb 1f                	jmp    c00116b8 <udp_connect+0xbc>
c0011699:	8d 76 00             	lea    esi,[esi+0x0]
c001169c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116a0:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00116a4:	75 06                	jne    c00116ac <udp_connect+0xb0>
c00116a6:	b0 00                	mov    al,0x0
c00116a8:	eb 2e                	jmp    c00116d8 <udp_connect+0xdc>
c00116aa:	66 90                	xchg   ax,ax
c00116ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00116b0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00116b7:	90                   	nop
c00116b8:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00116bd:	75 dd                	jne    c001169c <udp_connect+0xa0>
c00116bf:	8b 15 8c 68 03 c0    	mov    edx,DWORD PTR ds:0xc003688c
c00116c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116c9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00116cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116d0:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c00116d5:	b0 00                	mov    al,0x0
c00116d7:	90                   	nop
c00116d8:	83 c4 2c             	add    esp,0x2c
c00116db:	c3                   	ret    

c00116dc <udp_disconnect>:
c00116dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00116e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116eb:	66 c7 40 14 00 00    	mov    WORD PTR [eax+0x14],0x0
c00116f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116f5:	8a 40 10             	mov    al,BYTE PTR [eax+0x10]
c00116f8:	83 e0 fb             	and    eax,0xfffffffb
c00116fb:	88 c2                	mov    dl,al
c00116fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011701:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
c0011704:	90                   	nop
c0011705:	c3                   	ret    
c0011706:	66 90                	xchg   ax,ax

c0011708 <udp_recv>:
c0011708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001170c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011710:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011713:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011717:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001171b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001171e:	90                   	nop
c001171f:	c3                   	ret    

c0011720 <udp_remove>:
c0011720:	83 ec 1c             	sub    esp,0x1c
c0011723:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011728:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c001172c:	75 12                	jne    c0011740 <udp_remove+0x20>
c001172e:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011733:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011736:	a3 8c 68 03 c0       	mov    ds:0xc003688c,eax
c001173b:	eb 4b                	jmp    c0011788 <udp_remove+0x68>
c001173d:	8d 76 00             	lea    esi,[esi+0x0]
c0011740:	a1 8c 68 03 c0       	mov    eax,ds:0xc003688c
c0011745:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011749:	eb 35                	jmp    c0011780 <udp_remove+0x60>
c001174b:	90                   	nop
c001174c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011750:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011753:	85 c0                	test   eax,eax
c0011755:	74 1d                	je     c0011774 <udp_remove+0x54>
c0011757:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001175b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001175e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0011762:	75 10                	jne    c0011774 <udp_remove+0x54>
c0011764:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011768:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001176b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001176f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011772:	66 90                	xchg   ax,ax
c0011774:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011778:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001177b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001177f:	90                   	nop
c0011780:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0011785:	75 c5                	jne    c001174c <udp_remove+0x2c>
c0011787:	90                   	nop
c0011788:	83 ec 08             	sub    esp,0x8
c001178b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001178f:	6a 01                	push   0x1
c0011791:	e8 4e 62 ff ff       	call   c00079e4 <memp_free>
c0011796:	83 c4 10             	add    esp,0x10
c0011799:	90                   	nop
c001179a:	83 c4 1c             	add    esp,0x1c
c001179d:	c3                   	ret    
c001179e:	66 90                	xchg   ax,ax

c00117a0 <udp_new>:
c00117a0:	83 ec 1c             	sub    esp,0x1c
c00117a3:	83 ec 0c             	sub    esp,0xc
c00117a6:	6a 01                	push   0x1
c00117a8:	e8 0b 61 ff ff       	call   c00078b8 <memp_malloc>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00117b4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00117b9:	74 1d                	je     c00117d8 <udp_new+0x38>
c00117bb:	83 ec 04             	sub    esp,0x4
c00117be:	6a 20                	push   0x20
c00117c0:	6a 00                	push   0x0
c00117c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117c6:	e8 25 ed fe ff       	call   c00004f0 <memset>
c00117cb:	83 c4 10             	add    esp,0x10
c00117ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117d2:	c6 40 0a ff          	mov    BYTE PTR [eax+0xa],0xff
c00117d6:	66 90                	xchg   ax,ax
c00117d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00117dc:	83 c4 1c             	add    esp,0x1c
c00117df:	c3                   	ret    

c00117e0 <free_entry>:
c00117e0:	83 ec 0c             	sub    esp,0xc
c00117e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e7:	c1 e0 04             	shl    eax,0x4
c00117ea:	05 00 a9 03 c0       	add    eax,0xc003a900
c00117ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00117f1:	85 c0                	test   eax,eax
c00117f3:	74 2f                	je     c0011824 <free_entry+0x44>
c00117f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117f9:	c1 e0 04             	shl    eax,0x4
c00117fc:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011801:	8b 00                	mov    eax,DWORD PTR [eax]
c0011803:	83 ec 0c             	sub    esp,0xc
c0011806:	50                   	push   eax
c0011807:	e8 94 6a ff ff       	call   c00082a0 <pbuf_free>
c001180c:	83 c4 10             	add    esp,0x10
c001180f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011813:	c1 e0 04             	shl    eax,0x4
c0011816:	05 00 a9 03 c0       	add    eax,0xc003a900
c001181b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011821:	8d 76 00             	lea    esi,[esi+0x0]
c0011824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011828:	c1 e0 04             	shl    eax,0x4
c001182b:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011830:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011833:	90                   	nop
c0011834:	83 c4 0c             	add    esp,0xc
c0011837:	c3                   	ret    

c0011838 <etharp_tmr>:
c0011838:	83 ec 1c             	sub    esp,0x1c
c001183b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011840:	e9 a7 00 00 00       	jmp    c00118ec <etharp_tmr+0xb4>
c0011845:	8d 76 00             	lea    esi,[esi+0x0]
c0011848:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001184d:	c1 e0 04             	shl    eax,0x4
c0011850:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011855:	8a 00                	mov    al,BYTE PTR [eax]
c0011857:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001185b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0011860:	85 c0                	test   eax,eax
c0011862:	74 7c                	je     c00118e0 <etharp_tmr+0xa8>
c0011864:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011869:	89 c2                	mov    edx,eax
c001186b:	c1 e2 04             	shl    edx,0x4
c001186e:	81 c2 0f a9 03 c0    	add    edx,0xc003a90f
c0011874:	8a 12                	mov    dl,BYTE PTR [edx]
c0011876:	83 c2 01             	add    edx,0x1
c0011879:	c1 e0 04             	shl    eax,0x4
c001187c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011881:	88 10                	mov    BYTE PTR [eax],dl
c0011883:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011888:	c1 e0 04             	shl    eax,0x4
c001188b:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011890:	8a 00                	mov    al,BYTE PTR [eax]
c0011892:	0f b6 c0             	movzx  eax,al
c0011895:	3d ef 00 00 00       	cmp    eax,0xef
c001189a:	77 30                	ja     c00118cc <etharp_tmr+0x94>
c001189c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118a1:	c1 e0 04             	shl    eax,0x4
c00118a4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00118a9:	8a 00                	mov    al,BYTE PTR [eax]
c00118ab:	0f b6 c0             	movzx  eax,al
c00118ae:	83 f8 01             	cmp    eax,0x1
c00118b1:	75 2d                	jne    c00118e0 <etharp_tmr+0xa8>
c00118b3:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118b8:	c1 e0 04             	shl    eax,0x4
c00118bb:	05 0f a9 03 c0       	add    eax,0xc003a90f
c00118c0:	8a 00                	mov    al,BYTE PTR [eax]
c00118c2:	0f b6 c0             	movzx  eax,al
c00118c5:	83 f8 01             	cmp    eax,0x1
c00118c8:	76 16                	jbe    c00118e0 <etharp_tmr+0xa8>
c00118ca:	66 90                	xchg   ax,ax
c00118cc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118d1:	83 ec 0c             	sub    esp,0xc
c00118d4:	50                   	push   eax
c00118d5:	e8 06 ff ff ff       	call   c00117e0 <free_entry>
c00118da:	83 c4 10             	add    esp,0x10
c00118dd:	8d 76 00             	lea    esi,[esi+0x0]
c00118e0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00118e4:	83 c0 01             	add    eax,0x1
c00118e7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00118eb:	90                   	nop
c00118ec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00118f1:	83 f8 09             	cmp    eax,0x9
c00118f4:	0f 86 4e ff ff ff    	jbe    c0011848 <etharp_tmr+0x10>
c00118fa:	90                   	nop
c00118fb:	83 c4 1c             	add    esp,0x1c
c00118fe:	c3                   	ret    
c00118ff:	90                   	nop

c0011900 <find_entry>:
c0011900:	83 ec 2c             	sub    esp,0x2c
c0011903:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011907:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001190b:	c6 44 24 1f 0a       	mov    BYTE PTR [esp+0x1f],0xa
c0011910:	c6 44 24 1e 0a       	mov    BYTE PTR [esp+0x1e],0xa
c0011915:	c6 44 24 1d 0a       	mov    BYTE PTR [esp+0x1d],0xa
c001191a:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c001191f:	c6 44 24 1b 00       	mov    BYTE PTR [esp+0x1b],0x0
c0011924:	c6 44 24 1a 00       	mov    BYTE PTR [esp+0x1a],0x0
c0011929:	c6 44 24 19 0a       	mov    BYTE PTR [esp+0x19],0xa
c001192e:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
c0011933:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c0011938:	e9 7f 01 00 00       	jmp    c0011abc <find_entry+0x1bc>
c001193d:	8d 76 00             	lea    esi,[esi+0x0]
c0011940:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011945:	c1 e0 04             	shl    eax,0x4
c0011948:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001194d:	8a 00                	mov    al,BYTE PTR [eax]
c001194f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0011953:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011958:	83 f8 0a             	cmp    eax,0xa
c001195b:	75 17                	jne    c0011974 <find_entry+0x74>
c001195d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011962:	85 c0                	test   eax,eax
c0011964:	75 0e                	jne    c0011974 <find_entry+0x74>
c0011966:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001196a:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c001196e:	e9 3d 01 00 00       	jmp    c0011ab0 <find_entry+0x1b0>
c0011973:	90                   	nop
c0011974:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011979:	85 c0                	test   eax,eax
c001197b:	0f 84 2f 01 00 00    	je     c0011ab0 <find_entry+0x1b0>
c0011981:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011986:	83 f8 01             	cmp    eax,0x1
c0011989:	74 21                	je     c00119ac <find_entry+0xac>
c001198b:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011990:	83 f8 02             	cmp    eax,0x2
c0011993:	74 17                	je     c00119ac <find_entry+0xac>
c0011995:	83 ec 08             	sub    esp,0x8
c0011998:	68 30 09 03 c0       	push   0xc0030930
c001199d:	68 66 f9 02 c0       	push   0xc002f966
c00119a2:	e8 2d e1 00 00       	call   c001fad4 <CPrintf>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	66 90                	xchg   ax,ax
c00119ac:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00119b1:	74 25                	je     c00119d8 <find_entry+0xd8>
c00119b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00119b9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00119be:	c1 e0 04             	shl    eax,0x4
c00119c1:	05 04 a9 03 c0       	add    eax,0xc003a904
c00119c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c8:	39 c2                	cmp    edx,eax
c00119ca:	75 0c                	jne    c00119d8 <find_entry+0xd8>
c00119cc:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00119d0:	e9 53 02 00 00       	jmp    c0011c28 <find_entry+0x328>
c00119d5:	8d 76 00             	lea    esi,[esi+0x0]
c00119d8:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00119dd:	83 f8 01             	cmp    eax,0x1
c00119e0:	0f 85 8a 00 00 00    	jne    c0011a70 <find_entry+0x170>
c00119e6:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00119eb:	c1 e0 04             	shl    eax,0x4
c00119ee:	05 00 a9 03 c0       	add    eax,0xc003a900
c00119f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00119f5:	85 c0                	test   eax,eax
c00119f7:	74 3f                	je     c0011a38 <find_entry+0x138>
c00119f9:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00119fe:	c1 e0 04             	shl    eax,0x4
c0011a01:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a06:	8a 00                	mov    al,BYTE PTR [eax]
c0011a08:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0011a0d:	0f b6 c0             	movzx  eax,al
c0011a10:	39 c2                	cmp    edx,eax
c0011a12:	0f 87 98 00 00 00    	ja     c0011ab0 <find_entry+0x1b0>
c0011a18:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a1c:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c0011a20:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a25:	c1 e0 04             	shl    eax,0x4
c0011a28:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a2d:	8a 00                	mov    al,BYTE PTR [eax]
c0011a2f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0011a33:	eb 7b                	jmp    c0011ab0 <find_entry+0x1b0>
c0011a35:	8d 76 00             	lea    esi,[esi+0x0]
c0011a38:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a3d:	c1 e0 04             	shl    eax,0x4
c0011a40:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a45:	8a 00                	mov    al,BYTE PTR [eax]
c0011a47:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0011a4c:	0f b6 c0             	movzx  eax,al
c0011a4f:	39 c2                	cmp    edx,eax
c0011a51:	77 5d                	ja     c0011ab0 <find_entry+0x1b0>
c0011a53:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a57:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011a5b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a60:	c1 e0 04             	shl    eax,0x4
c0011a63:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a68:	8a 00                	mov    al,BYTE PTR [eax]
c0011a6a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0011a6e:	eb 40                	jmp    c0011ab0 <find_entry+0x1b0>
c0011a70:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0011a75:	83 f8 02             	cmp    eax,0x2
c0011a78:	75 36                	jne    c0011ab0 <find_entry+0x1b0>
c0011a7a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011a7f:	c1 e0 04             	shl    eax,0x4
c0011a82:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011a87:	8a 00                	mov    al,BYTE PTR [eax]
c0011a89:	0f b6 54 24 1a       	movzx  edx,BYTE PTR [esp+0x1a]
c0011a8e:	0f b6 c0             	movzx  eax,al
c0011a91:	39 c2                	cmp    edx,eax
c0011a93:	77 1b                	ja     c0011ab0 <find_entry+0x1b0>
c0011a95:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011a99:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0011a9d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011aa2:	c1 e0 04             	shl    eax,0x4
c0011aa5:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011aaa:	8a 00                	mov    al,BYTE PTR [eax]
c0011aac:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0011ab0:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011ab4:	83 c0 01             	add    eax,0x1
c0011ab7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011abb:	90                   	nop
c0011abc:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011ac1:	83 f8 09             	cmp    eax,0x9
c0011ac4:	0f 86 76 fe ff ff    	jbe    c0011940 <find_entry+0x40>
c0011aca:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011acf:	83 e0 02             	and    eax,0x2
c0011ad2:	75 14                	jne    c0011ae8 <find_entry+0x1e8>
c0011ad4:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011ad9:	83 f8 0a             	cmp    eax,0xa
c0011adc:	75 12                	jne    c0011af0 <find_entry+0x1f0>
c0011ade:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011ae3:	83 e0 01             	and    eax,0x1
c0011ae6:	75 08                	jne    c0011af0 <find_entry+0x1f0>
c0011ae8:	b0 ff                	mov    al,0xff
c0011aea:	e9 39 01 00 00       	jmp    c0011c28 <find_entry+0x328>
c0011aef:	90                   	nop
c0011af0:	0f be 44 24 1d       	movsx  eax,BYTE PTR [esp+0x1d]
c0011af5:	83 f8 09             	cmp    eax,0x9
c0011af8:	7f 0e                	jg     c0011b08 <find_entry+0x208>
c0011afa:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0011afe:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b02:	e9 a1 00 00 00       	jmp    c0011ba8 <find_entry+0x2a8>
c0011b07:	90                   	nop
c0011b08:	0f be 44 24 1e       	movsx  eax,BYTE PTR [esp+0x1e]
c0011b0d:	83 f8 09             	cmp    eax,0x9
c0011b10:	7f 32                	jg     c0011b44 <find_entry+0x244>
c0011b12:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0011b16:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b1a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b1f:	c1 e0 04             	shl    eax,0x4
c0011b22:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011b27:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b29:	85 c0                	test   eax,eax
c0011b2b:	74 47                	je     c0011b74 <find_entry+0x274>
c0011b2d:	83 ec 08             	sub    esp,0x8
c0011b30:	68 a9 0a 03 c0       	push   0xc0030aa9
c0011b35:	68 66 f9 02 c0       	push   0xc002f966
c0011b3a:	e8 95 df 00 00       	call   c001fad4 <CPrintf>
c0011b3f:	83 c4 10             	add    esp,0x10
c0011b42:	eb 30                	jmp    c0011b74 <find_entry+0x274>
c0011b44:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011b49:	83 f8 09             	cmp    eax,0x9
c0011b4c:	7f 0a                	jg     c0011b58 <find_entry+0x258>
c0011b4e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011b52:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b56:	eb 1c                	jmp    c0011b74 <find_entry+0x274>
c0011b58:	0f be 44 24 19       	movsx  eax,BYTE PTR [esp+0x19]
c0011b5d:	83 f8 09             	cmp    eax,0x9
c0011b60:	7f 0a                	jg     c0011b6c <find_entry+0x26c>
c0011b62:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c0011b66:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0011b6a:	eb 08                	jmp    c0011b74 <find_entry+0x274>
c0011b6c:	b0 ff                	mov    al,0xff
c0011b6e:	e9 b5 00 00 00       	jmp    c0011c28 <find_entry+0x328>
c0011b73:	90                   	nop
c0011b74:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b79:	83 f8 09             	cmp    eax,0x9
c0011b7c:	76 16                	jbe    c0011b94 <find_entry+0x294>
c0011b7e:	83 ec 08             	sub    esp,0x8
c0011b81:	68 c0 0a 03 c0       	push   0xc0030ac0
c0011b86:	68 66 f9 02 c0       	push   0xc002f966
c0011b8b:	e8 44 df 00 00       	call   c001fad4 <CPrintf>
c0011b90:	83 c4 10             	add    esp,0x10
c0011b93:	90                   	nop
c0011b94:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011b99:	83 ec 0c             	sub    esp,0xc
c0011b9c:	50                   	push   eax
c0011b9d:	e8 3e fc ff ff       	call   c00117e0 <free_entry>
c0011ba2:	83 c4 10             	add    esp,0x10
c0011ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0011ba8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bad:	83 f8 09             	cmp    eax,0x9
c0011bb0:	76 16                	jbe    c0011bc8 <find_entry+0x2c8>
c0011bb2:	83 ec 08             	sub    esp,0x8
c0011bb5:	68 c0 0a 03 c0       	push   0xc0030ac0
c0011bba:	68 66 f9 02 c0       	push   0xc002f966
c0011bbf:	e8 10 df 00 00       	call   c001fad4 <CPrintf>
c0011bc4:	83 c4 10             	add    esp,0x10
c0011bc7:	90                   	nop
c0011bc8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011bcd:	c1 e0 04             	shl    eax,0x4
c0011bd0:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011bd5:	8a 00                	mov    al,BYTE PTR [eax]
c0011bd7:	0f b6 c0             	movzx  eax,al
c0011bda:	85 c0                	test   eax,eax
c0011bdc:	74 16                	je     c0011bf4 <find_entry+0x2f4>
c0011bde:	83 ec 08             	sub    esp,0x8
c0011be1:	68 70 09 03 c0       	push   0xc0030970
c0011be6:	68 66 f9 02 c0       	push   0xc002f966
c0011beb:	e8 e4 de 00 00       	call   c001fad4 <CPrintf>
c0011bf0:	83 c4 10             	add    esp,0x10
c0011bf3:	90                   	nop
c0011bf4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011bf9:	74 19                	je     c0011c14 <find_entry+0x314>
c0011bfb:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c0011c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c06:	c1 e2 04             	shl    edx,0x4
c0011c09:	81 c2 04 a9 03 c0    	add    edx,0xc003a904
c0011c0f:	89 02                	mov    DWORD PTR [edx],eax
c0011c11:	8d 76 00             	lea    esi,[esi+0x0]
c0011c14:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0011c19:	c1 e0 04             	shl    eax,0x4
c0011c1c:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011c21:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011c24:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0011c28:	83 c4 2c             	add    esp,0x2c
c0011c2b:	c3                   	ret    

c0011c2c <etharp_send_ip>:
c0011c2c:	83 ec 1c             	sub    esp,0x1c
c0011c2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011c33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011c36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c3e:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011c41:	0f b6 c0             	movzx  eax,al
c0011c44:	83 f8 06             	cmp    eax,0x6
c0011c47:	74 17                	je     c0011c60 <etharp_send_ip+0x34>
c0011c49:	83 ec 08             	sub    esp,0x8
c0011c4c:	68 9c 09 03 c0       	push   0xc003099c
c0011c51:	68 66 f9 02 c0       	push   0xc002f966
c0011c56:	e8 79 de 00 00       	call   c001fad4 <CPrintf>
c0011c5b:	83 c4 10             	add    esp,0x10
c0011c5e:	66 90                	xchg   ax,ax
c0011c60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c64:	83 ec 04             	sub    esp,0x4
c0011c67:	6a 06                	push   0x6
c0011c69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011c6d:	50                   	push   eax
c0011c6e:	e8 07 e7 fe ff       	call   c000037a <memcpy>
c0011c73:	83 c4 10             	add    esp,0x10
c0011c76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c7a:	83 c0 06             	add    eax,0x6
c0011c7d:	83 ec 04             	sub    esp,0x4
c0011c80:	6a 06                	push   0x6
c0011c82:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011c86:	50                   	push   eax
c0011c87:	e8 ee e6 fe ff       	call   c000037a <memcpy>
c0011c8c:	83 c4 10             	add    esp,0x10
c0011c8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c93:	66 c7 40 0c 08 00    	mov    WORD PTR [eax+0xc],0x8
c0011c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011c9d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011ca0:	83 ec 08             	sub    esp,0x8
c0011ca3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011ca7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011cab:	ff d0                	call   eax
c0011cad:	83 c4 10             	add    esp,0x10
c0011cb0:	83 c4 1c             	add    esp,0x1c
c0011cb3:	c3                   	ret    

c0011cb4 <update_arp_entry>:
c0011cb4:	83 ec 2c             	sub    esp,0x2c
c0011cb7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cbb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011cbf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011cc3:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c0011cc6:	0f b6 c0             	movzx  eax,al
c0011cc9:	83 f8 06             	cmp    eax,0x6
c0011ccc:	74 16                	je     c0011ce4 <update_arp_entry+0x30>
c0011cce:	83 ec 08             	sub    esp,0x8
c0011cd1:	68 e0 09 03 c0       	push   0xc00309e0
c0011cd6:	68 66 f9 02 c0       	push   0xc002f966
c0011cdb:	e8 f4 dd 00 00       	call   c001fad4 <CPrintf>
c0011ce0:	83 c4 10             	add    esp,0x10
c0011ce3:	90                   	nop
c0011ce4:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0011ce9:	74 39                	je     c0011d24 <update_arp_entry+0x70>
c0011ceb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011cef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf1:	85 c0                	test   eax,eax
c0011cf3:	74 2f                	je     c0011d24 <update_arp_entry+0x70>
c0011cf5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011cf9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cfb:	83 ec 08             	sub    esp,0x8
c0011cfe:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011d02:	50                   	push   eax
c0011d03:	e8 8c 20 00 00       	call   c0013d94 <ip4_addr_isbroadcast>
c0011d08:	83 c4 10             	add    esp,0x10
c0011d0b:	0f b6 c0             	movzx  eax,al
c0011d0e:	85 c0                	test   eax,eax
c0011d10:	75 12                	jne    c0011d24 <update_arp_entry+0x70>
c0011d12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d16:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d18:	25 f0 00 00 00       	and    eax,0xf0
c0011d1d:	3d e0 00 00 00       	cmp    eax,0xe0
c0011d22:	75 08                	jne    c0011d2c <update_arp_entry+0x78>
c0011d24:	b0 f2                	mov    al,0xf2
c0011d26:	e9 d9 00 00 00       	jmp    c0011e04 <update_arp_entry+0x150>
c0011d2b:	90                   	nop
c0011d2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0011d31:	83 ec 08             	sub    esp,0x8
c0011d34:	50                   	push   eax
c0011d35:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011d39:	e8 c2 fb ff ff       	call   c0011900 <find_entry>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011d45:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d4a:	85 c0                	test   eax,eax
c0011d4c:	79 0a                	jns    c0011d58 <update_arp_entry+0xa4>
c0011d4e:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0011d52:	e9 ad 00 00 00       	jmp    c0011e04 <update_arp_entry+0x150>
c0011d57:	90                   	nop
c0011d58:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d5d:	c1 e0 04             	shl    eax,0x4
c0011d60:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011d65:	c6 00 02             	mov    BYTE PTR [eax],0x2
c0011d68:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d6d:	c1 e0 04             	shl    eax,0x4
c0011d70:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011d75:	83 c0 08             	add    eax,0x8
c0011d78:	83 ec 04             	sub    esp,0x4
c0011d7b:	6a 06                	push   0x6
c0011d7d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011d81:	50                   	push   eax
c0011d82:	e8 f3 e5 fe ff       	call   c000037a <memcpy>
c0011d87:	83 c4 10             	add    esp,0x10
c0011d8a:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d8f:	c1 e0 04             	shl    eax,0x4
c0011d92:	05 0f a9 03 c0       	add    eax,0xc003a90f
c0011d97:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0011d9a:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011d9f:	c1 e0 04             	shl    eax,0x4
c0011da2:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011da7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011da9:	85 c0                	test   eax,eax
c0011dab:	74 53                	je     c0011e00 <update_arp_entry+0x14c>
c0011dad:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011db2:	c1 e0 04             	shl    eax,0x4
c0011db5:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011dba:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011dc0:	0f be 44 24 1f       	movsx  eax,BYTE PTR [esp+0x1f]
c0011dc5:	c1 e0 04             	shl    eax,0x4
c0011dc8:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011dcd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011dd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011dd7:	83 c0 23             	add    eax,0x23
c0011dda:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011dde:	50                   	push   eax
c0011ddf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011de3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011de7:	e8 40 fe ff ff       	call   c0011c2c <etharp_send_ip>
c0011dec:	83 c4 10             	add    esp,0x10
c0011def:	83 ec 0c             	sub    esp,0xc
c0011df2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011df6:	e8 a5 64 ff ff       	call   c00082a0 <pbuf_free>
c0011dfb:	83 c4 10             	add    esp,0x10
c0011dfe:	66 90                	xchg   ax,ax
c0011e00:	b0 00                	mov    al,0x0
c0011e02:	66 90                	xchg   ax,ax
c0011e04:	83 c4 2c             	add    esp,0x2c
c0011e07:	c3                   	ret    

c0011e08 <etharp_find_addr>:
c0011e08:	83 ec 1c             	sub    esp,0x1c
c0011e0b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011e10:	74 0a                	je     c0011e1c <etharp_find_addr+0x14>
c0011e12:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c0011e17:	75 1b                	jne    c0011e34 <etharp_find_addr+0x2c>
c0011e19:	8d 76 00             	lea    esi,[esi+0x0]
c0011e1c:	83 ec 08             	sub    esp,0x8
c0011e1f:	68 08 0a 03 c0       	push   0xc0030a08
c0011e24:	68 66 f9 02 c0       	push   0xc002f966
c0011e29:	e8 a6 dc 00 00       	call   c001fad4 <CPrintf>
c0011e2e:	83 c4 10             	add    esp,0x10
c0011e31:	8d 76 00             	lea    esi,[esi+0x0]
c0011e34:	83 ec 08             	sub    esp,0x8
c0011e37:	6a 02                	push   0x2
c0011e39:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011e3d:	e8 be fa ff ff       	call   c0011900 <find_entry>
c0011e42:	83 c4 10             	add    esp,0x10
c0011e45:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011e49:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e4e:	85 c0                	test   eax,eax
c0011e50:	78 4a                	js     c0011e9c <etharp_find_addr+0x94>
c0011e52:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e57:	c1 e0 04             	shl    eax,0x4
c0011e5a:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0011e5f:	8a 00                	mov    al,BYTE PTR [eax]
c0011e61:	0f b6 c0             	movzx  eax,al
c0011e64:	83 f8 02             	cmp    eax,0x2
c0011e67:	75 33                	jne    c0011e9c <etharp_find_addr+0x94>
c0011e69:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e6e:	c1 e0 04             	shl    eax,0x4
c0011e71:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e76:	8d 50 08             	lea    edx,[eax+0x8]
c0011e79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e7d:	89 10                	mov    DWORD PTR [eax],edx
c0011e7f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0011e84:	c1 e0 04             	shl    eax,0x4
c0011e87:	05 00 a9 03 c0       	add    eax,0xc003a900
c0011e8c:	8d 50 04             	lea    edx,[eax+0x4]
c0011e8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e93:	89 10                	mov    DWORD PTR [eax],edx
c0011e95:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011e99:	eb 05                	jmp    c0011ea0 <etharp_find_addr+0x98>
c0011e9b:	90                   	nop
c0011e9c:	b0 ff                	mov    al,0xff
c0011e9e:	66 90                	xchg   ax,ax
c0011ea0:	83 c4 1c             	add    esp,0x1c
c0011ea3:	c3                   	ret    

c0011ea4 <etharp_arp_input>:
c0011ea4:	83 ec 2c             	sub    esp,0x2c
c0011ea7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0011eac:	75 1a                	jne    c0011ec8 <etharp_arp_input+0x24>
c0011eae:	83 ec 08             	sub    esp,0x8
c0011eb1:	68 d3 0a 03 c0       	push   0xc0030ad3
c0011eb6:	68 66 f9 02 c0       	push   0xc002f966
c0011ebb:	e8 14 dc 00 00       	call   c001fad4 <CPrintf>
c0011ec0:	83 c4 10             	add    esp,0x10
c0011ec3:	e9 d0 02 00 00       	jmp    c0012198 <etharp_arp_input+0x2f4>
c0011ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011ecc:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0011ed0:	0f b7 c0             	movzx  eax,ax
c0011ed3:	83 f8 29             	cmp    eax,0x29
c0011ed6:	77 34                	ja     c0011f0c <etharp_arp_input+0x68>
c0011ed8:	66 a1 42 67 03 c0    	mov    ax,ds:0xc0036742
c0011ede:	83 c0 01             	add    eax,0x1
c0011ee1:	66 a3 42 67 03 c0    	mov    ds:0xc0036742,ax
c0011ee7:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011eed:	83 c0 01             	add    eax,0x1
c0011ef0:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011ef6:	83 ec 0c             	sub    esp,0xc
c0011ef9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011efd:	e8 9e 63 ff ff       	call   c00082a0 <pbuf_free>
c0011f02:	83 c4 10             	add    esp,0x10
c0011f05:	e9 8e 02 00 00       	jmp    c0012198 <etharp_arp_input+0x2f4>
c0011f0a:	66 90                	xchg   ax,ax
c0011f0c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011f10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f1b:	83 c0 0e             	add    eax,0xe
c0011f1e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f22:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0011f29:	0f b7 c0             	movzx  eax,ax
c0011f2c:	3d 00 01 00 00       	cmp    eax,0x100
c0011f31:	75 31                	jne    c0011f64 <etharp_arp_input+0xc0>
c0011f33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f37:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0011f3a:	0f b6 c0             	movzx  eax,al
c0011f3d:	83 f8 06             	cmp    eax,0x6
c0011f40:	75 22                	jne    c0011f64 <etharp_arp_input+0xc0>
c0011f42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f46:	8a 40 05             	mov    al,BYTE PTR [eax+0x5]
c0011f49:	0f b6 c0             	movzx  eax,al
c0011f4c:	83 f8 04             	cmp    eax,0x4
c0011f4f:	75 13                	jne    c0011f64 <etharp_arp_input+0xc0>
c0011f51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f55:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0011f59:	0f b7 c0             	movzx  eax,ax
c0011f5c:	83 f8 08             	cmp    eax,0x8
c0011f5f:	74 37                	je     c0011f98 <etharp_arp_input+0xf4>
c0011f61:	8d 76 00             	lea    esi,[esi+0x0]
c0011f64:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c0011f6a:	83 c0 01             	add    eax,0x1
c0011f6d:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c0011f73:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c0011f79:	83 c0 01             	add    eax,0x1
c0011f7c:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c0011f82:	83 ec 0c             	sub    esp,0xc
c0011f85:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011f89:	e8 12 63 ff ff       	call   c00082a0 <pbuf_free>
c0011f8e:	83 c4 10             	add    esp,0x10
c0011f91:	e9 02 02 00 00       	jmp    c0012198 <etharp_arp_input+0x2f4>
c0011f96:	66 90                	xchg   ax,ax
c0011f98:	66 a1 3a 67 03 c0    	mov    ax,ds:0xc003673a
c0011f9e:	83 c0 01             	add    eax,0x1
c0011fa1:	66 a3 3a 67 03 c0    	mov    ds:0xc003673a,ax
c0011fa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fab:	83 c0 0e             	add    eax,0xe
c0011fae:	83 ec 04             	sub    esp,0x4
c0011fb1:	6a 04                	push   0x4
c0011fb3:	50                   	push   eax
c0011fb4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0011fb8:	50                   	push   eax
c0011fb9:	e8 bc e3 fe ff       	call   c000037a <memcpy>
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fc5:	83 c0 18             	add    eax,0x18
c0011fc8:	83 ec 04             	sub    esp,0x4
c0011fcb:	6a 04                	push   0x4
c0011fcd:	50                   	push   eax
c0011fce:	8d 44 24 18          	lea    eax,[esp+0x18]
c0011fd2:	50                   	push   eax
c0011fd3:	e8 a2 e3 fe ff       	call   c000037a <memcpy>
c0011fd8:	83 c4 10             	add    esp,0x10
c0011fdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fdf:	83 c0 04             	add    eax,0x4
c0011fe2:	74 0c                	je     c0011ff0 <etharp_arp_input+0x14c>
c0011fe4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fe8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011feb:	85 c0                	test   eax,eax
c0011fed:	75 09                	jne    c0011ff8 <etharp_arp_input+0x154>
c0011fef:	90                   	nop
c0011ff0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011ff5:	eb 15                	jmp    c001200c <etharp_arp_input+0x168>
c0011ff7:	90                   	nop
c0011ff8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011ffc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012000:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012003:	39 c2                	cmp    edx,eax
c0012005:	0f 94 c0             	sete   al
c0012008:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001200c:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012011:	85 c0                	test   eax,eax
c0012013:	74 07                	je     c001201c <etharp_arp_input+0x178>
c0012015:	b8 01 00 00 00       	mov    eax,0x1
c001201a:	eb 08                	jmp    c0012024 <etharp_arp_input+0x180>
c001201c:	b8 02 00 00 00       	mov    eax,0x2
c0012021:	8d 76 00             	lea    esi,[esi+0x0]
c0012024:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012028:	83 c2 08             	add    edx,0x8
c001202b:	50                   	push   eax
c001202c:	52                   	push   edx
c001202d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0012031:	50                   	push   eax
c0012032:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012036:	e8 79 fc ff ff       	call   c0011cb4 <update_arp_entry>
c001203b:	83 c4 10             	add    esp,0x10
c001203e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012042:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0012046:	0f b7 c0             	movzx  eax,ax
c0012049:	3d 00 01 00 00       	cmp    eax,0x100
c001204e:	74 10                	je     c0012060 <etharp_arp_input+0x1bc>
c0012050:	3d 00 02 00 00       	cmp    eax,0x200
c0012055:	0f 84 29 01 00 00    	je     c0012184 <etharp_arp_input+0x2e0>
c001205b:	e9 10 01 00 00       	jmp    c0012170 <etharp_arp_input+0x2cc>
c0012060:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c0012065:	85 c0                	test   eax,eax
c0012067:	0f 84 f7 00 00 00    	je     c0012164 <etharp_arp_input+0x2c0>
c001206d:	83 ec 0c             	sub    esp,0xc
c0012070:	6a 02                	push   0x2
c0012072:	e8 71 eb fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012077:	83 c4 10             	add    esp,0x10
c001207a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001207e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0012082:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012086:	8d 50 0e             	lea    edx,[eax+0xe]
c0012089:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001208d:	83 c0 18             	add    eax,0x18
c0012090:	83 ec 04             	sub    esp,0x4
c0012093:	6a 04                	push   0x4
c0012095:	52                   	push   edx
c0012096:	50                   	push   eax
c0012097:	e8 de e2 fe ff       	call   c000037a <memcpy>
c001209c:	83 c4 10             	add    esp,0x10
c001209f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120a3:	8d 50 04             	lea    edx,[eax+0x4]
c00120a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120aa:	83 c0 0e             	add    eax,0xe
c00120ad:	83 ec 04             	sub    esp,0x4
c00120b0:	6a 04                	push   0x4
c00120b2:	52                   	push   edx
c00120b3:	50                   	push   eax
c00120b4:	e8 c1 e2 fe ff       	call   c000037a <memcpy>
c00120b9:	83 c4 10             	add    esp,0x10
c00120bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120c0:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c00120c3:	0f b6 c0             	movzx  eax,al
c00120c6:	83 f8 06             	cmp    eax,0x6
c00120c9:	74 15                	je     c00120e0 <etharp_arp_input+0x23c>
c00120cb:	83 ec 08             	sub    esp,0x8
c00120ce:	68 9c 09 03 c0       	push   0xc003099c
c00120d3:	68 66 f9 02 c0       	push   0xc002f966
c00120d8:	e8 f7 d9 00 00       	call   c001fad4 <CPrintf>
c00120dd:	83 c4 10             	add    esp,0x10
c00120e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120e4:	8d 50 08             	lea    edx,[eax+0x8]
c00120e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120eb:	83 c0 12             	add    eax,0x12
c00120ee:	83 ec 04             	sub    esp,0x4
c00120f1:	6a 06                	push   0x6
c00120f3:	52                   	push   edx
c00120f4:	50                   	push   eax
c00120f5:	e8 80 e2 fe ff       	call   c000037a <memcpy>
c00120fa:	83 c4 10             	add    esp,0x10
c00120fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012101:	8d 50 08             	lea    edx,[eax+0x8]
c0012104:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012108:	83 ec 04             	sub    esp,0x4
c001210b:	6a 06                	push   0x6
c001210d:	52                   	push   edx
c001210e:	50                   	push   eax
c001210f:	e8 66 e2 fe ff       	call   c000037a <memcpy>
c0012114:	83 c4 10             	add    esp,0x10
c0012117:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001211b:	83 c0 08             	add    eax,0x8
c001211e:	83 ec 04             	sub    esp,0x4
c0012121:	6a 06                	push   0x6
c0012123:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012127:	50                   	push   eax
c0012128:	e8 4d e2 fe ff       	call   c000037a <memcpy>
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012134:	83 c0 06             	add    eax,0x6
c0012137:	83 ec 04             	sub    esp,0x4
c001213a:	6a 06                	push   0x6
c001213c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012140:	50                   	push   eax
c0012141:	e8 34 e2 fe ff       	call   c000037a <memcpy>
c0012146:	83 c4 10             	add    esp,0x10
c0012149:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001214d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012150:	83 ec 08             	sub    esp,0x8
c0012153:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012157:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001215b:	ff d0                	call   eax
c001215d:	83 c4 10             	add    esp,0x10
c0012160:	eb 26                	jmp    c0012188 <etharp_arp_input+0x2e4>
c0012162:	66 90                	xchg   ax,ax
c0012164:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012168:	83 c0 04             	add    eax,0x4
c001216b:	eb 1b                	jmp    c0012188 <etharp_arp_input+0x2e4>
c001216d:	8d 76 00             	lea    esi,[esi+0x0]
c0012170:	66 a1 4c 67 03 c0    	mov    ax,ds:0xc003674c
c0012176:	83 c0 01             	add    eax,0x1
c0012179:	66 a3 4c 67 03 c0    	mov    ds:0xc003674c,ax
c001217f:	eb 07                	jmp    c0012188 <etharp_arp_input+0x2e4>
c0012181:	8d 76 00             	lea    esi,[esi+0x0]
c0012184:	90                   	nop
c0012185:	8d 76 00             	lea    esi,[esi+0x0]
c0012188:	83 ec 0c             	sub    esp,0xc
c001218b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001218f:	e8 0c 61 ff ff       	call   c00082a0 <pbuf_free>
c0012194:	83 c4 10             	add    esp,0x10
c0012197:	90                   	nop
c0012198:	83 c4 2c             	add    esp,0x2c
c001219b:	c3                   	ret    

c001219c <etharp_raw>:
c001219c:	83 ec 2c             	sub    esp,0x2c
c001219f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00121a3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00121a8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00121ad:	83 ec 04             	sub    esp,0x4
c00121b0:	6a 00                	push   0x0
c00121b2:	6a 2a                	push   0x2a
c00121b4:	6a 03                	push   0x3
c00121b6:	e8 bd 62 ff ff       	call   c0008478 <pbuf_alloc>
c00121bb:	83 c4 10             	add    esp,0x10
c00121be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00121c2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00121c7:	75 17                	jne    c00121e0 <etharp_raw+0x44>
c00121c9:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00121cf:	83 c0 01             	add    eax,0x1
c00121d2:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00121d8:	b0 ff                	mov    al,0xff
c00121da:	e9 85 01 00 00       	jmp    c0012364 <etharp_raw+0x1c8>
c00121df:	90                   	nop
c00121e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121e4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00121e8:	0f b7 c0             	movzx  eax,ax
c00121eb:	83 f8 29             	cmp    eax,0x29
c00121ee:	77 18                	ja     c0012208 <etharp_raw+0x6c>
c00121f0:	83 ec 08             	sub    esp,0x8
c00121f3:	68 2c 0a 03 c0       	push   0xc0030a2c
c00121f8:	68 66 f9 02 c0       	push   0xc002f966
c00121fd:	e8 d2 d8 00 00       	call   c001fad4 <CPrintf>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	8d 76 00             	lea    esi,[esi+0x0]
c0012208:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001220c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001220f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012213:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012217:	83 c0 0e             	add    eax,0xe
c001221a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001221e:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c0012223:	83 ec 0c             	sub    esp,0xc
c0012226:	50                   	push   eax
c0012227:	e8 bc e9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001222c:	83 c4 10             	add    esp,0x10
c001222f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012233:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0012237:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001223b:	8a 40 22             	mov    al,BYTE PTR [eax+0x22]
c001223e:	0f b6 c0             	movzx  eax,al
c0012241:	83 f8 06             	cmp    eax,0x6
c0012244:	74 16                	je     c001225c <etharp_raw+0xc0>
c0012246:	83 ec 08             	sub    esp,0x8
c0012249:	68 9c 09 03 c0       	push   0xc003099c
c001224e:	68 66 f9 02 c0       	push   0xc002f966
c0012253:	e8 7c d8 00 00       	call   c001fad4 <CPrintf>
c0012258:	83 c4 10             	add    esp,0x10
c001225b:	90                   	nop
c001225c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012260:	83 c0 08             	add    eax,0x8
c0012263:	83 ec 04             	sub    esp,0x4
c0012266:	6a 06                	push   0x6
c0012268:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001226c:	50                   	push   eax
c001226d:	e8 08 e1 fe ff       	call   c000037a <memcpy>
c0012272:	83 c4 10             	add    esp,0x10
c0012275:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012279:	83 c0 12             	add    eax,0x12
c001227c:	83 ec 04             	sub    esp,0x4
c001227f:	6a 06                	push   0x6
c0012281:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012285:	50                   	push   eax
c0012286:	e8 ef e0 fe ff       	call   c000037a <memcpy>
c001228b:	83 c4 10             	add    esp,0x10
c001228e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012292:	83 ec 04             	sub    esp,0x4
c0012295:	6a 06                	push   0x6
c0012297:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001229b:	50                   	push   eax
c001229c:	e8 d9 e0 fe ff       	call   c000037a <memcpy>
c00122a1:	83 c4 10             	add    esp,0x10
c00122a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00122a8:	83 c0 06             	add    eax,0x6
c00122ab:	83 ec 04             	sub    esp,0x4
c00122ae:	6a 06                	push   0x6
c00122b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122b4:	50                   	push   eax
c00122b5:	e8 c0 e0 fe ff       	call   c000037a <memcpy>
c00122ba:	83 c4 10             	add    esp,0x10
c00122bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122c1:	83 c0 0e             	add    eax,0xe
c00122c4:	83 ec 04             	sub    esp,0x4
c00122c7:	6a 04                	push   0x4
c00122c9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00122cd:	50                   	push   eax
c00122ce:	e8 a7 e0 fe ff       	call   c000037a <memcpy>
c00122d3:	83 c4 10             	add    esp,0x10
c00122d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122da:	83 c0 18             	add    eax,0x18
c00122dd:	83 ec 04             	sub    esp,0x4
c00122e0:	6a 04                	push   0x4
c00122e2:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00122e6:	50                   	push   eax
c00122e7:	e8 8e e0 fe ff       	call   c000037a <memcpy>
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f3:	66 c7 00 00 01       	mov    WORD PTR [eax],0x100
c00122f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122fc:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0012302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012306:	c6 40 04 06          	mov    BYTE PTR [eax+0x4],0x6
c001230a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001230e:	c6 40 05 04          	mov    BYTE PTR [eax+0x5],0x4
c0012312:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012316:	66 c7 40 0c 08 06    	mov    WORD PTR [eax+0xc],0x608
c001231c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012320:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0012323:	83 ec 08             	sub    esp,0x8
c0012326:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001232a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001232e:	ff d0                	call   eax
c0012330:	83 c4 10             	add    esp,0x10
c0012333:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012337:	66 a1 38 67 03 c0    	mov    ax,ds:0xc0036738
c001233d:	83 c0 01             	add    eax,0x1
c0012340:	66 a3 38 67 03 c0    	mov    ds:0xc0036738,ax
c0012346:	83 ec 0c             	sub    esp,0xc
c0012349:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001234d:	e8 4e 5f ff ff       	call   c00082a0 <pbuf_free>
c0012352:	83 c4 10             	add    esp,0x10
c0012355:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001235d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012361:	8d 76 00             	lea    esi,[esi+0x0]
c0012364:	83 c4 2c             	add    esp,0x2c
c0012367:	c3                   	ret    

c0012368 <etharp_request>:
c0012368:	83 ec 0c             	sub    esp,0xc
c001236b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001236f:	8d 48 04             	lea    ecx,[eax+0x4]
c0012372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012376:	8d 50 23             	lea    edx,[eax+0x23]
c0012379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001237d:	83 c0 23             	add    eax,0x23
c0012380:	6a 01                	push   0x1
c0012382:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012386:	68 fc 0a 03 c0       	push   0xc0030afc
c001238b:	51                   	push   ecx
c001238c:	52                   	push   edx
c001238d:	68 04 0b 03 c0       	push   0xc0030b04
c0012392:	50                   	push   eax
c0012393:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012397:	e8 00 fe ff ff       	call   c001219c <etharp_raw>
c001239c:	83 c4 20             	add    esp,0x20
c001239f:	83 c4 0c             	add    esp,0xc
c00123a2:	c3                   	ret    
c00123a3:	90                   	nop

c00123a4 <etharp_query>:
c00123a4:	83 ec 2c             	sub    esp,0x2c
c00123a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123ab:	83 c0 23             	add    eax,0x23
c00123ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00123b2:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00123b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00123bd:	83 ec 08             	sub    esp,0x8
c00123c0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00123c4:	50                   	push   eax
c00123c5:	e8 ca 19 00 00       	call   c0013d94 <ip4_addr_isbroadcast>
c00123ca:	83 c4 10             	add    esp,0x10
c00123cd:	0f b6 c0             	movzx  eax,al
c00123d0:	85 c0                	test   eax,eax
c00123d2:	75 24                	jne    c00123f8 <etharp_query+0x54>
c00123d4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00123da:	25 f0 00 00 00       	and    eax,0xf0
c00123df:	3d e0 00 00 00       	cmp    eax,0xe0
c00123e4:	74 12                	je     c00123f8 <etharp_query+0x54>
c00123e6:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00123eb:	74 0b                	je     c00123f8 <etharp_query+0x54>
c00123ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00123f3:	85 c0                	test   eax,eax
c00123f5:	75 09                	jne    c0012400 <etharp_query+0x5c>
c00123f7:	90                   	nop
c00123f8:	b0 f2                	mov    al,0xf2
c00123fa:	e9 dd 02 00 00       	jmp    c00126dc <etharp_query+0x338>
c00123ff:	90                   	nop
c0012400:	83 ec 08             	sub    esp,0x8
c0012403:	6a 01                	push   0x1
c0012405:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012409:	e8 f2 f4 ff ff       	call   c0011900 <find_entry>
c001240e:	83 c4 10             	add    esp,0x10
c0012411:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012415:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001241a:	85 c0                	test   eax,eax
c001241c:	79 22                	jns    c0012440 <etharp_query+0x9c>
c001241e:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0012423:	74 0f                	je     c0012434 <etharp_query+0x90>
c0012425:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c001242b:	83 c0 01             	add    eax,0x1
c001242e:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c0012434:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012438:	e9 9f 02 00 00       	jmp    c00126dc <etharp_query+0x338>
c001243d:	8d 76 00             	lea    esi,[esi+0x0]
c0012440:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012445:	c1 e0 04             	shl    eax,0x4
c0012448:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001244d:	8a 00                	mov    al,BYTE PTR [eax]
c001244f:	0f b6 c0             	movzx  eax,al
c0012452:	85 c0                	test   eax,eax
c0012454:	75 12                	jne    c0012468 <etharp_query+0xc4>
c0012456:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001245b:	c1 e0 04             	shl    eax,0x4
c001245e:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012463:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012466:	66 90                	xchg   ax,ax
c0012468:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001246d:	c1 e0 04             	shl    eax,0x4
c0012470:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012475:	8a 00                	mov    al,BYTE PTR [eax]
c0012477:	0f b6 c0             	movzx  eax,al
c001247a:	83 f8 01             	cmp    eax,0x1
c001247d:	74 2d                	je     c00124ac <etharp_query+0x108>
c001247f:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012484:	c1 e0 04             	shl    eax,0x4
c0012487:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001248c:	8a 00                	mov    al,BYTE PTR [eax]
c001248e:	0f b6 c0             	movzx  eax,al
c0012491:	83 f8 02             	cmp    eax,0x2
c0012494:	74 16                	je     c00124ac <etharp_query+0x108>
c0012496:	83 ec 08             	sub    esp,0x8
c0012499:	68 60 0a 03 c0       	push   0xc0030a60
c001249e:	68 66 f9 02 c0       	push   0xc002f966
c00124a3:	e8 2c d6 00 00       	call   c001fad4 <CPrintf>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	90                   	nop
c00124ac:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00124b1:	c1 e0 04             	shl    eax,0x4
c00124b4:	05 0e a9 03 c0       	add    eax,0xc003a90e
c00124b9:	8a 00                	mov    al,BYTE PTR [eax]
c00124bb:	0f b6 c0             	movzx  eax,al
c00124be:	83 f8 01             	cmp    eax,0x1
c00124c1:	74 09                	je     c00124cc <etharp_query+0x128>
c00124c3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124c8:	75 2a                	jne    c00124f4 <etharp_query+0x150>
c00124ca:	66 90                	xchg   ax,ax
c00124cc:	83 ec 08             	sub    esp,0x8
c00124cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124d7:	e8 8c fe ff ff       	call   c0012368 <etharp_request>
c00124dc:	83 c4 10             	add    esp,0x10
c00124df:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00124e3:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124e8:	75 0a                	jne    c00124f4 <etharp_query+0x150>
c00124ea:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00124ee:	e9 e9 01 00 00       	jmp    c00126dc <etharp_query+0x338>
c00124f3:	90                   	nop
c00124f4:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00124f9:	75 15                	jne    c0012510 <etharp_query+0x16c>
c00124fb:	83 ec 08             	sub    esp,0x8
c00124fe:	68 da fd 02 c0       	push   0xc002fdda
c0012503:	68 66 f9 02 c0       	push   0xc002f966
c0012508:	e8 c7 d5 00 00       	call   c001fad4 <CPrintf>
c001250d:	83 c4 10             	add    esp,0x10
c0012510:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012515:	c1 e0 04             	shl    eax,0x4
c0012518:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001251d:	8a 00                	mov    al,BYTE PTR [eax]
c001251f:	0f b6 c0             	movzx  eax,al
c0012522:	83 f8 02             	cmp    eax,0x2
c0012525:	75 39                	jne    c0012560 <etharp_query+0x1bc>
c0012527:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001252b:	a2 e0 a8 03 c0       	mov    ds:0xc003a8e0,al
c0012530:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012535:	c1 e0 04             	shl    eax,0x4
c0012538:	05 00 a9 03 c0       	add    eax,0xc003a900
c001253d:	83 c0 08             	add    eax,0x8
c0012540:	50                   	push   eax
c0012541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012545:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012549:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001254d:	e8 da f6 ff ff       	call   c0011c2c <etharp_send_ip>
c0012552:	83 c4 10             	add    esp,0x10
c0012555:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012559:	e9 7a 01 00 00       	jmp    c00126d8 <etharp_query+0x334>
c001255e:	66 90                	xchg   ax,ax
c0012560:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c0012565:	c1 e0 04             	shl    eax,0x4
c0012568:	05 0e a9 03 c0       	add    eax,0xc003a90e
c001256d:	8a 00                	mov    al,BYTE PTR [eax]
c001256f:	0f b6 c0             	movzx  eax,al
c0012572:	83 f8 01             	cmp    eax,0x1
c0012575:	0f 85 5d 01 00 00    	jne    c00126d8 <etharp_query+0x334>
c001257b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012583:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012587:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001258b:	eb 63                	jmp    c00125f0 <etharp_query+0x24c>
c001258d:	8d 76 00             	lea    esi,[esi+0x0]
c0012590:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012594:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0012598:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001259c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001259f:	0f b7 d2             	movzx  edx,dx
c00125a2:	0f b7 c0             	movzx  eax,ax
c00125a5:	39 c2                	cmp    edx,eax
c00125a7:	75 1f                	jne    c00125c8 <etharp_query+0x224>
c00125a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00125af:	85 c0                	test   eax,eax
c00125b1:	74 15                	je     c00125c8 <etharp_query+0x224>
c00125b3:	83 ec 08             	sub    esp,0x8
c00125b6:	68 e1 0a 03 c0       	push   0xc0030ae1
c00125bb:	68 66 f9 02 c0       	push   0xc002f966
c00125c0:	e8 0f d5 00 00       	call   c001fad4 <CPrintf>
c00125c5:	83 c4 10             	add    esp,0x10
c00125c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125cc:	8a 40 0c             	mov    al,BYTE PTR [eax+0xc]
c00125cf:	0f b6 c0             	movzx  eax,al
c00125d2:	83 f8 01             	cmp    eax,0x1
c00125d5:	74 0d                	je     c00125e4 <etharp_query+0x240>
c00125d7:	c7 44 24 14 01 00 00 00 	mov    DWORD PTR [esp+0x14],0x1
c00125df:	eb 17                	jmp    c00125f8 <etharp_query+0x254>
c00125e1:	8d 76 00             	lea    esi,[esi+0x0]
c00125e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00125ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00125ee:	66 90                	xchg   ax,ax
c00125f0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00125f5:	75 99                	jne    c0012590 <etharp_query+0x1ec>
c00125f7:	90                   	nop
c00125f8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00125fd:	74 59                	je     c0012658 <etharp_query+0x2b4>
c00125ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012603:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012606:	0f b7 c0             	movzx  eax,ax
c0012609:	83 ec 04             	sub    esp,0x4
c001260c:	6a 00                	push   0x0
c001260e:	50                   	push   eax
c001260f:	6a 03                	push   0x3
c0012611:	e8 62 5e ff ff       	call   c0008478 <pbuf_alloc>
c0012616:	83 c4 10             	add    esp,0x10
c0012619:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001261d:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012622:	74 4c                	je     c0012670 <etharp_query+0x2cc>
c0012624:	83 ec 08             	sub    esp,0x8
c0012627:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001262b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001262f:	e8 a4 66 ff ff       	call   c0008cd8 <pbuf_copy>
c0012634:	83 c4 10             	add    esp,0x10
c0012637:	0f be c0             	movsx  eax,al
c001263a:	85 c0                	test   eax,eax
c001263c:	74 32                	je     c0012670 <etharp_query+0x2cc>
c001263e:	83 ec 0c             	sub    esp,0xc
c0012641:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012645:	e8 56 5c ff ff       	call   c00082a0 <pbuf_free>
c001264a:	83 c4 10             	add    esp,0x10
c001264d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012655:	eb 19                	jmp    c0012670 <etharp_query+0x2cc>
c0012657:	90                   	nop
c0012658:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012660:	83 ec 0c             	sub    esp,0xc
c0012663:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012667:	e8 3c 64 ff ff       	call   c0008aa8 <pbuf_ref>
c001266c:	83 c4 10             	add    esp,0x10
c001266f:	90                   	nop
c0012670:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012675:	74 4d                	je     c00126c4 <etharp_query+0x320>
c0012677:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001267c:	c1 e0 04             	shl    eax,0x4
c001267f:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012684:	8b 00                	mov    eax,DWORD PTR [eax]
c0012686:	85 c0                	test   eax,eax
c0012688:	74 1e                	je     c00126a8 <etharp_query+0x304>
c001268a:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c001268f:	c1 e0 04             	shl    eax,0x4
c0012692:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012697:	8b 00                	mov    eax,DWORD PTR [eax]
c0012699:	83 ec 0c             	sub    esp,0xc
c001269c:	50                   	push   eax
c001269d:	e8 fe 5b ff ff       	call   c00082a0 <pbuf_free>
c00126a2:	83 c4 10             	add    esp,0x10
c00126a5:	8d 76 00             	lea    esi,[esi+0x0]
c00126a8:	0f be 44 24 0f       	movsx  eax,BYTE PTR [esp+0xf]
c00126ad:	c1 e0 04             	shl    eax,0x4
c00126b0:	8d 90 00 a9 03 c0    	lea    edx,[eax-0x3ffc5700]
c00126b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00126ba:	89 02                	mov    DWORD PTR [edx],eax
c00126bc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00126c1:	eb 15                	jmp    c00126d8 <etharp_query+0x334>
c00126c3:	90                   	nop
c00126c4:	66 a1 44 67 03 c0    	mov    ax,ds:0xc0036744
c00126ca:	83 c0 01             	add    eax,0x1
c00126cd:	66 a3 44 67 03 c0    	mov    ds:0xc0036744,ax
c00126d3:	c6 44 24 1f ff       	mov    BYTE PTR [esp+0x1f],0xff
c00126d8:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00126dc:	83 c4 2c             	add    esp,0x2c
c00126df:	c3                   	ret    

c00126e0 <etharp_output>:
c00126e0:	83 ec 1c             	sub    esp,0x1c
c00126e3:	83 ec 08             	sub    esp,0x8
c00126e6:	6a 0e                	push   0xe
c00126e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00126ec:	e8 13 5a ff ff       	call   c0008104 <pbuf_header>
c00126f1:	83 c4 10             	add    esp,0x10
c00126f4:	0f b6 c0             	movzx  eax,al
c00126f7:	85 c0                	test   eax,eax
c00126f9:	74 19                	je     c0012714 <etharp_output+0x34>
c00126fb:	66 a1 2a 67 03 c0    	mov    ax,ds:0xc003672a
c0012701:	83 c0 01             	add    eax,0x1
c0012704:	66 a3 2a 67 03 c0    	mov    ds:0xc003672a,ax
c001270a:	b0 fe                	mov    al,0xfe
c001270c:	e9 8b 01 00 00       	jmp    c001289c <etharp_output+0x1bc>
c0012711:	8d 76 00             	lea    esi,[esi+0x0]
c0012714:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001271c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012720:	8b 00                	mov    eax,DWORD PTR [eax]
c0012722:	83 ec 08             	sub    esp,0x8
c0012725:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012729:	50                   	push   eax
c001272a:	e8 65 16 00 00       	call   c0013d94 <ip4_addr_isbroadcast>
c001272f:	83 c4 10             	add    esp,0x10
c0012732:	0f b6 c0             	movzx  eax,al
c0012735:	85 c0                	test   eax,eax
c0012737:	74 0f                	je     c0012748 <etharp_output+0x68>
c0012739:	c7 44 24 0c 04 0b 03 c0 	mov    DWORD PTR [esp+0xc],0xc0030b04
c0012741:	e9 3a 01 00 00       	jmp    c0012880 <etharp_output+0x1a0>
c0012746:	66 90                	xchg   ax,ax
c0012748:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001274c:	8b 00                	mov    eax,DWORD PTR [eax]
c001274e:	25 f0 00 00 00       	and    eax,0xf0
c0012753:	3d e0 00 00 00       	cmp    eax,0xe0
c0012758:	75 42                	jne    c001279c <etharp_output+0xbc>
c001275a:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001275f:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0012764:	c6 44 24 08 5e       	mov    BYTE PTR [esp+0x8],0x5e
c0012769:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001276d:	83 c0 01             	add    eax,0x1
c0012770:	8a 00                	mov    al,BYTE PTR [eax]
c0012772:	83 e0 7f             	and    eax,0x7f
c0012775:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0012779:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001277d:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0012780:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0012784:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012788:	8a 40 03             	mov    al,BYTE PTR [eax+0x3]
c001278b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001278f:	8d 44 24 06          	lea    eax,[esp+0x6]
c0012793:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012797:	e9 e4 00 00 00       	jmp    c0012880 <etharp_output+0x1a0>
c001279c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00127a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00127a9:	31 c2                	xor    edx,eax
c00127ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127b2:	21 d0                	and    eax,edx
c00127b4:	74 3a                	je     c00127f0 <etharp_output+0x110>
c00127b6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00127bc:	0f b7 c0             	movzx  eax,ax
c00127bf:	3d a9 fe 00 00       	cmp    eax,0xfea9
c00127c4:	74 2a                	je     c00127f0 <etharp_output+0x110>
c00127c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127ca:	83 c0 0c             	add    eax,0xc
c00127cd:	74 19                	je     c00127e8 <etharp_output+0x108>
c00127cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127d6:	85 c0                	test   eax,eax
c00127d8:	74 0e                	je     c00127e8 <etharp_output+0x108>
c00127da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127de:	83 c0 0c             	add    eax,0xc
c00127e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00127e5:	eb 09                	jmp    c00127f0 <etharp_output+0x110>
c00127e7:	90                   	nop
c00127e8:	b0 fc                	mov    al,0xfc
c00127ea:	e9 ad 00 00 00       	jmp    c001289c <etharp_output+0x1bc>
c00127ef:	90                   	nop
c00127f0:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c00127f5:	0f b6 c0             	movzx  eax,al
c00127f8:	c1 e0 04             	shl    eax,0x4
c00127fb:	05 0e a9 03 c0       	add    eax,0xc003a90e
c0012800:	8a 00                	mov    al,BYTE PTR [eax]
c0012802:	0f b6 c0             	movzx  eax,al
c0012805:	83 f8 02             	cmp    eax,0x2
c0012808:	75 5a                	jne    c0012864 <etharp_output+0x184>
c001280a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001280e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012810:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c0012815:	0f b6 c0             	movzx  eax,al
c0012818:	c1 e0 04             	shl    eax,0x4
c001281b:	05 04 a9 03 c0       	add    eax,0xc003a904
c0012820:	8b 00                	mov    eax,DWORD PTR [eax]
c0012822:	39 c2                	cmp    edx,eax
c0012824:	75 3e                	jne    c0012864 <etharp_output+0x184>
c0012826:	66 a1 4e 67 03 c0    	mov    ax,ds:0xc003674e
c001282c:	83 c0 01             	add    eax,0x1
c001282f:	66 a3 4e 67 03 c0    	mov    ds:0xc003674e,ax
c0012835:	a0 e0 a8 03 c0       	mov    al,ds:0xc003a8e0
c001283a:	0f b6 c0             	movzx  eax,al
c001283d:	c1 e0 04             	shl    eax,0x4
c0012840:	05 00 a9 03 c0       	add    eax,0xc003a900
c0012845:	8d 50 08             	lea    edx,[eax+0x8]
c0012848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001284c:	83 c0 23             	add    eax,0x23
c001284f:	52                   	push   edx
c0012850:	50                   	push   eax
c0012851:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012855:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012859:	e8 ce f3 ff ff       	call   c0011c2c <etharp_send_ip>
c001285e:	83 c4 10             	add    esp,0x10
c0012861:	eb 39                	jmp    c001289c <etharp_output+0x1bc>
c0012863:	90                   	nop
c0012864:	83 ec 04             	sub    esp,0x4
c0012867:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001286b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001286f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012873:	e8 2c fb ff ff       	call   c00123a4 <etharp_query>
c0012878:	83 c4 10             	add    esp,0x10
c001287b:	eb 1f                	jmp    c001289c <etharp_output+0x1bc>
c001287d:	8d 76 00             	lea    esi,[esi+0x0]
c0012880:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012884:	83 c0 23             	add    eax,0x23
c0012887:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001288b:	50                   	push   eax
c001288c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012890:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012894:	e8 93 f3 ff ff       	call   c0011c2c <etharp_send_ip>
c0012899:	83 c4 10             	add    esp,0x10
c001289c:	83 c4 1c             	add    esp,0x1c
c001289f:	c3                   	ret    

c00128a0 <ethernet_input>:
c00128a0:	83 ec 1c             	sub    esp,0x1c
c00128a3:	66 c7 44 24 0e 0e 00 	mov    WORD PTR [esp+0xe],0xe
c00128aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128ae:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00128b2:	0f b7 c0             	movzx  eax,ax
c00128b5:	83 f8 0e             	cmp    eax,0xe
c00128b8:	77 26                	ja     c00128e0 <ethernet_input+0x40>
c00128ba:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c00128c0:	83 c0 01             	add    eax,0x1
c00128c3:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c00128c9:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00128cf:	83 c0 01             	add    eax,0x1
c00128d2:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00128d8:	e9 ef 00 00 00       	jmp    c00129cc <ethernet_input+0x12c>
c00128dd:	8d 76 00             	lea    esi,[esi+0x0]
c00128e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00128e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00128e7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00128ef:	66 8b 40 0c          	mov    ax,WORD PTR [eax+0xc]
c00128f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00128f8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00128fd:	83 f8 08             	cmp    eax,0x8
c0012900:	74 0e                	je     c0012910 <ethernet_input+0x70>
c0012902:	3d 08 06 00 00       	cmp    eax,0x608
c0012907:	74 6b                	je     c0012974 <ethernet_input+0xd4>
c0012909:	e9 92 00 00 00       	jmp    c00129a0 <ethernet_input+0x100>
c001290e:	66 90                	xchg   ax,ax
c0012910:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012914:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0012917:	0f b6 c0             	movzx  eax,al
c001291a:	83 e0 20             	and    eax,0x20
c001291d:	0f 84 a1 00 00 00    	je     c00129c4 <ethernet_input+0x124>
c0012923:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0012928:	f7 d8                	neg    eax
c001292a:	98                   	cwde   
c001292b:	83 ec 08             	sub    esp,0x8
c001292e:	50                   	push   eax
c001292f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012933:	e8 cc 57 ff ff       	call   c0008104 <pbuf_header>
c0012938:	83 c4 10             	add    esp,0x10
c001293b:	0f b6 c0             	movzx  eax,al
c001293e:	85 c0                	test   eax,eax
c0012940:	74 1a                	je     c001295c <ethernet_input+0xbc>
c0012942:	83 ec 08             	sub    esp,0x8
c0012945:	68 88 0a 03 c0       	push   0xc0030a88
c001294a:	68 66 f9 02 c0       	push   0xc002f966
c001294f:	e8 80 d1 00 00       	call   c001fad4 <CPrintf>
c0012954:	83 c4 10             	add    esp,0x10
c0012957:	eb 73                	jmp    c00129cc <ethernet_input+0x12c>
c0012959:	8d 76 00             	lea    esi,[esi+0x0]
c001295c:	83 ec 08             	sub    esp,0x8
c001295f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012963:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012967:	e8 70 0c 00 00       	call   c00135dc <ip_input>
c001296c:	83 c4 10             	add    esp,0x10
c001296f:	eb 4f                	jmp    c00129c0 <ethernet_input+0x120>
c0012971:	8d 76 00             	lea    esi,[esi+0x0]
c0012974:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012978:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001297b:	0f b6 c0             	movzx  eax,al
c001297e:	83 e0 20             	and    eax,0x20
c0012981:	74 45                	je     c00129c8 <ethernet_input+0x128>
c0012983:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012987:	83 c0 23             	add    eax,0x23
c001298a:	83 ec 04             	sub    esp,0x4
c001298d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012991:	50                   	push   eax
c0012992:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012996:	e8 09 f5 ff ff       	call   c0011ea4 <etharp_arp_input>
c001299b:	83 c4 10             	add    esp,0x10
c001299e:	eb 20                	jmp    c00129c0 <ethernet_input+0x120>
c00129a0:	66 a1 48 67 03 c0    	mov    ax,ds:0xc0036748
c00129a6:	83 c0 01             	add    eax,0x1
c00129a9:	66 a3 48 67 03 c0    	mov    ds:0xc0036748,ax
c00129af:	66 a1 3e 67 03 c0    	mov    ax,ds:0xc003673e
c00129b5:	83 c0 01             	add    eax,0x1
c00129b8:	66 a3 3e 67 03 c0    	mov    ds:0xc003673e,ax
c00129be:	eb 0c                	jmp    c00129cc <ethernet_input+0x12c>
c00129c0:	b0 00                	mov    al,0x0
c00129c2:	eb 1c                	jmp    c00129e0 <ethernet_input+0x140>
c00129c4:	90                   	nop
c00129c5:	eb 05                	jmp    c00129cc <ethernet_input+0x12c>
c00129c7:	90                   	nop
c00129c8:	90                   	nop
c00129c9:	8d 76 00             	lea    esi,[esi+0x0]
c00129cc:	83 ec 0c             	sub    esp,0xc
c00129cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00129d3:	e8 c8 58 ff ff       	call   c00082a0 <pbuf_free>
c00129d8:	83 c4 10             	add    esp,0x10
c00129db:	b0 00                	mov    al,0x0
c00129dd:	8d 76 00             	lea    esi,[esi+0x0]
c00129e0:	83 c4 1c             	add    esp,0x1c
c00129e3:	c3                   	ret    

c00129e4 <icmp_input>:
c00129e4:	83 ec 2c             	sub    esp,0x2c
c00129e7:	66 a1 82 67 03 c0    	mov    ax,ds:0xc0036782
c00129ed:	83 c0 01             	add    eax,0x1
c00129f0:	66 a3 82 67 03 c0    	mov    ds:0xc0036782,ax
c00129f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00129fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a05:	66 8b 00             	mov    ax,WORD PTR [eax]
c0012a08:	0f b7 c0             	movzx  eax,ax
c0012a0b:	83 ec 0c             	sub    esp,0xc
c0012a0e:	50                   	push   eax
c0012a0f:	e8 d4 e1 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0012a14:	83 c4 10             	add    esp,0x10
c0012a17:	0f b7 c0             	movzx  eax,ax
c0012a1a:	c1 e8 08             	shr    eax,0x8
c0012a1d:	83 e0 0f             	and    eax,0xf
c0012a20:	c1 e0 02             	shl    eax,0x2
c0012a23:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0012a28:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012a2d:	f7 d8                	neg    eax
c0012a2f:	98                   	cwde   
c0012a30:	83 ec 08             	sub    esp,0x8
c0012a33:	50                   	push   eax
c0012a34:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a38:	e8 c7 56 ff ff       	call   c0008104 <pbuf_header>
c0012a3d:	83 c4 10             	add    esp,0x10
c0012a40:	0f b6 c0             	movzx  eax,al
c0012a43:	85 c0                	test   eax,eax
c0012a45:	0f 85 a9 03 00 00    	jne    c0012df4 <icmp_input+0x410>
c0012a4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012a52:	0f b7 c0             	movzx  eax,ax
c0012a55:	83 f8 03             	cmp    eax,0x3
c0012a58:	0f 86 96 03 00 00    	jbe    c0012df4 <icmp_input+0x410>
c0012a5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012a65:	8a 00                	mov    al,BYTE PTR [eax]
c0012a67:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012a6b:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012a70:	85 c0                	test   eax,eax
c0012a72:	0f 84 64 03 00 00    	je     c0012ddc <icmp_input+0x3f8>
c0012a78:	83 f8 08             	cmp    eax,0x8
c0012a7b:	0f 85 3b 03 00 00    	jne    c0012dbc <icmp_input+0x3d8>
c0012a81:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0012a89:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012a8e:	25 f0 00 00 00       	and    eax,0xf0
c0012a93:	3d e0 00 00 00       	cmp    eax,0xe0
c0012a98:	75 0a                	jne    c0012aa4 <icmp_input+0xc0>
c0012a9a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012aa2:	66 90                	xchg   ax,ax
c0012aa4:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0012aa9:	83 ec 08             	sub    esp,0x8
c0012aac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ab0:	50                   	push   eax
c0012ab1:	e8 de 12 00 00       	call   c0013d94 <ip4_addr_isbroadcast>
c0012ab6:	83 c4 10             	add    esp,0x10
c0012ab9:	0f b6 c0             	movzx  eax,al
c0012abc:	85 c0                	test   eax,eax
c0012abe:	74 08                	je     c0012ac8 <icmp_input+0xe4>
c0012ac0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ac8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012acd:	75 25                	jne    c0012af4 <icmp_input+0x110>
c0012acf:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012ad5:	83 c0 01             	add    eax,0x1
c0012ad8:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012ade:	83 ec 0c             	sub    esp,0xc
c0012ae1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012ae5:	e8 b6 57 ff ff       	call   c00082a0 <pbuf_free>
c0012aea:	83 c4 10             	add    esp,0x10
c0012aed:	e9 4e 03 00 00       	jmp    c0012e40 <icmp_input+0x45c>
c0012af2:	66 90                	xchg   ax,ax
c0012af4:	90                   	nop
c0012af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012af9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012afc:	0f b7 c0             	movzx  eax,ax
c0012aff:	83 f8 07             	cmp    eax,0x7
c0012b02:	0f 86 f0 02 00 00    	jbe    c0012df8 <icmp_input+0x414>
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b0f:	e8 50 09 00 00       	call   c0013464 <inet_chksum_pbuf>
c0012b14:	83 c4 10             	add    esp,0x10
c0012b17:	0f b7 c0             	movzx  eax,ax
c0012b1a:	85 c0                	test   eax,eax
c0012b1c:	74 26                	je     c0012b44 <icmp_input+0x160>
c0012b1e:	83 ec 0c             	sub    esp,0xc
c0012b21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b25:	e8 76 57 ff ff       	call   c00082a0 <pbuf_free>
c0012b2a:	83 c4 10             	add    esp,0x10
c0012b2d:	66 a1 88 67 03 c0    	mov    ax,ds:0xc0036788
c0012b33:	83 c0 01             	add    eax,0x1
c0012b36:	66 a3 88 67 03 c0    	mov    ds:0xc0036788,ax
c0012b3c:	e9 ff 02 00 00       	jmp    c0012e40 <icmp_input+0x45c>
c0012b41:	8d 76 00             	lea    esi,[esi+0x0]
c0012b44:	83 ec 08             	sub    esp,0x8
c0012b47:	6a 22                	push   0x22
c0012b49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b4d:	e8 b2 55 ff ff       	call   c0008104 <pbuf_header>
c0012b52:	83 c4 10             	add    esp,0x10
c0012b55:	0f b6 c0             	movzx  eax,al
c0012b58:	85 c0                	test   eax,eax
c0012b5a:	0f 84 24 01 00 00    	je     c0012c84 <icmp_input+0x2a0>
c0012b60:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012b65:	83 ec 08             	sub    esp,0x8
c0012b68:	50                   	push   eax
c0012b69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012b6d:	e8 92 55 ff ff       	call   c0008104 <pbuf_header>
c0012b72:	83 c4 10             	add    esp,0x10
c0012b75:	0f b6 c0             	movzx  eax,al
c0012b78:	85 c0                	test   eax,eax
c0012b7a:	74 1c                	je     c0012b98 <icmp_input+0x1b4>
c0012b7c:	83 ec 08             	sub    esp,0x8
c0012b7f:	68 0c 0b 03 c0       	push   0xc0030b0c
c0012b84:	68 66 f9 02 c0       	push   0xc002f966
c0012b89:	e8 46 cf 00 00       	call   c001fad4 <CPrintf>
c0012b8e:	83 c4 10             	add    esp,0x10
c0012b91:	e9 8a 02 00 00       	jmp    c0012e20 <icmp_input+0x43c>
c0012b96:	66 90                	xchg   ax,ax
c0012b98:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012b9f:	0f b7 c0             	movzx  eax,ax
c0012ba2:	83 ec 04             	sub    esp,0x4
c0012ba5:	6a 00                	push   0x0
c0012ba7:	50                   	push   eax
c0012ba8:	6a 02                	push   0x2
c0012baa:	e8 c9 58 ff ff       	call   c0008478 <pbuf_alloc>
c0012baf:	83 c4 10             	add    esp,0x10
c0012bb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012bb6:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012bbb:	0f 84 5b 02 00 00    	je     c0012e1c <icmp_input+0x438>
c0012bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012bc5:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012bc9:	0f b7 c0             	movzx  eax,ax
c0012bcc:	0f bf 54 24 16       	movsx  edx,WORD PTR [esp+0x16]
c0012bd1:	83 c2 08             	add    edx,0x8
c0012bd4:	39 d0                	cmp    eax,edx
c0012bd6:	73 18                	jae    c0012bf0 <icmp_input+0x20c>
c0012bd8:	83 ec 08             	sub    esp,0x8
c0012bdb:	68 40 0b 03 c0       	push   0xc0030b40
c0012be0:	68 66 f9 02 c0       	push   0xc002f966
c0012be5:	e8 ea ce 00 00       	call   c001fad4 <CPrintf>
c0012bea:	83 c4 10             	add    esp,0x10
c0012bed:	8d 76 00             	lea    esi,[esi+0x0]
c0012bf0:	83 ec 08             	sub    esp,0x8
c0012bf3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012bf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bfb:	e8 d8 60 ff ff       	call   c0008cd8 <pbuf_copy>
c0012c00:	83 c4 10             	add    esp,0x10
c0012c03:	0f be c0             	movsx  eax,al
c0012c06:	85 c0                	test   eax,eax
c0012c08:	74 1a                	je     c0012c24 <icmp_input+0x240>
c0012c0a:	83 ec 08             	sub    esp,0x8
c0012c0d:	68 78 0b 03 c0       	push   0xc0030b78
c0012c12:	68 66 f9 02 c0       	push   0xc002f966
c0012c17:	e8 b8 ce 00 00       	call   c001fad4 <CPrintf>
c0012c1c:	83 c4 10             	add    esp,0x10
c0012c1f:	e9 fc 01 00 00       	jmp    c0012e20 <icmp_input+0x43c>
c0012c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c2f:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0012c34:	f7 d8                	neg    eax
c0012c36:	98                   	cwde   
c0012c37:	83 ec 08             	sub    esp,0x8
c0012c3a:	50                   	push   eax
c0012c3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c3f:	e8 c0 54 ff ff       	call   c0008104 <pbuf_header>
c0012c44:	83 c4 10             	add    esp,0x10
c0012c47:	0f b6 c0             	movzx  eax,al
c0012c4a:	85 c0                	test   eax,eax
c0012c4c:	74 1a                	je     c0012c68 <icmp_input+0x284>
c0012c4e:	83 ec 08             	sub    esp,0x8
c0012c51:	68 a0 0b 03 c0       	push   0xc0030ba0
c0012c56:	68 66 f9 02 c0       	push   0xc002f966
c0012c5b:	e8 74 ce 00 00       	call   c001fad4 <CPrintf>
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	e9 b8 01 00 00       	jmp    c0012e20 <icmp_input+0x43c>
c0012c68:	83 ec 0c             	sub    esp,0xc
c0012c6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c6f:	e8 2c 56 ff ff       	call   c00082a0 <pbuf_free>
c0012c74:	83 c4 10             	add    esp,0x10
c0012c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c7b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c7f:	eb 37                	jmp    c0012cb8 <icmp_input+0x2d4>
c0012c81:	8d 76 00             	lea    esi,[esi+0x0]
c0012c84:	83 ec 08             	sub    esp,0x8
c0012c87:	6a de                	push   0xffffffde
c0012c89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c8d:	e8 72 54 ff ff       	call   c0008104 <pbuf_header>
c0012c92:	83 c4 10             	add    esp,0x10
c0012c95:	0f b6 c0             	movzx  eax,al
c0012c98:	85 c0                	test   eax,eax
c0012c9a:	74 1c                	je     c0012cb8 <icmp_input+0x2d4>
c0012c9c:	83 ec 08             	sub    esp,0x8
c0012c9f:	68 a0 0b 03 c0       	push   0xc0030ba0
c0012ca4:	68 66 f9 02 c0       	push   0xc002f966
c0012ca9:	e8 26 ce 00 00       	call   c001fad4 <CPrintf>
c0012cae:	83 c4 10             	add    esp,0x10
c0012cb1:	e9 6a 01 00 00       	jmp    c0012e20 <icmp_input+0x43c>
c0012cb6:	66 90                	xchg   ax,ax
c0012cb8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012cc3:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c0012cc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ccd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012cd0:	8b 15 90 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036890
c0012cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012cda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012cdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ce1:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012ce4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ce8:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012cec:	0f b7 c0             	movzx  eax,ax
c0012cef:	3d f6 ff 00 00       	cmp    eax,0xfff6
c0012cf4:	76 16                	jbe    c0012d0c <icmp_input+0x328>
c0012cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012cfa:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012cfe:	83 c0 09             	add    eax,0x9
c0012d01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012d05:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012d09:	eb 15                	jmp    c0012d20 <icmp_input+0x33c>
c0012d0b:	90                   	nop
c0012d0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d10:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0012d14:	83 c0 08             	add    eax,0x8
c0012d17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012d1b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012d1f:	90                   	nop
c0012d20:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d24:	c6 40 08 ff          	mov    BYTE PTR [eax+0x8],0xff
c0012d28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012d2c:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0012d32:	83 ec 08             	sub    esp,0x8
c0012d35:	6a 14                	push   0x14
c0012d37:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012d3b:	e8 fc 06 00 00       	call   c001343c <inet_chksum>
c0012d40:	83 c4 10             	add    esp,0x10
c0012d43:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d47:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0012d4b:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012d51:	83 c0 01             	add    eax,0x1
c0012d54:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012d5a:	0f bf 44 24 16       	movsx  eax,WORD PTR [esp+0x16]
c0012d5f:	83 ec 08             	sub    esp,0x8
c0012d62:	50                   	push   eax
c0012d63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012d67:	e8 98 53 ff ff       	call   c0008104 <pbuf_header>
c0012d6c:	83 c4 10             	add    esp,0x10
c0012d6f:	0f b6 c0             	movzx  eax,al
c0012d72:	85 c0                	test   eax,eax
c0012d74:	74 1a                	je     c0012d90 <icmp_input+0x3ac>
c0012d76:	83 ec 08             	sub    esp,0x8
c0012d79:	68 88 0a 03 c0       	push   0xc0030a88
c0012d7e:	68 66 f9 02 c0       	push   0xc002f966
c0012d83:	e8 4c cd 00 00       	call   c001fad4 <CPrintf>
c0012d88:	83 c4 10             	add    esp,0x10
c0012d8b:	eb 53                	jmp    c0012de0 <icmp_input+0x3fc>
c0012d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0012d90:	83 ec 04             	sub    esp,0x4
c0012d93:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d97:	6a 01                	push   0x1
c0012d99:	6a 00                	push   0x0
c0012d9b:	68 ff 00 00 00       	push   0xff
c0012da0:	6a 00                	push   0x0
c0012da2:	68 98 68 03 c0       	push   0xc0036898
c0012da7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012dab:	e8 70 0c 00 00       	call   c0013a20 <ip_output_if>
c0012db0:	83 c4 20             	add    esp,0x20
c0012db3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012db7:	eb 27                	jmp    c0012de0 <icmp_input+0x3fc>
c0012db9:	8d 76 00             	lea    esi,[esi+0x0]
c0012dbc:	66 a1 90 67 03 c0    	mov    ax,ds:0xc0036790
c0012dc2:	83 c0 01             	add    eax,0x1
c0012dc5:	66 a3 90 67 03 c0    	mov    ds:0xc0036790,ax
c0012dcb:	66 a1 86 67 03 c0    	mov    ax,ds:0xc0036786
c0012dd1:	83 c0 01             	add    eax,0x1
c0012dd4:	66 a3 86 67 03 c0    	mov    ds:0xc0036786,ax
c0012dda:	eb 04                	jmp    c0012de0 <icmp_input+0x3fc>
c0012ddc:	90                   	nop
c0012ddd:	8d 76 00             	lea    esi,[esi+0x0]
c0012de0:	83 ec 0c             	sub    esp,0xc
c0012de3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012de7:	e8 b4 54 ff ff       	call   c00082a0 <pbuf_free>
c0012dec:	83 c4 10             	add    esp,0x10
c0012def:	eb 4f                	jmp    c0012e40 <icmp_input+0x45c>
c0012df1:	8d 76 00             	lea    esi,[esi+0x0]
c0012df4:	90                   	nop
c0012df5:	eb 05                	jmp    c0012dfc <icmp_input+0x418>
c0012df7:	90                   	nop
c0012df8:	90                   	nop
c0012df9:	8d 76 00             	lea    esi,[esi+0x0]
c0012dfc:	83 ec 0c             	sub    esp,0xc
c0012dff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e03:	e8 98 54 ff ff       	call   c00082a0 <pbuf_free>
c0012e08:	83 c4 10             	add    esp,0x10
c0012e0b:	66 a1 8a 67 03 c0    	mov    ax,ds:0xc003678a
c0012e11:	83 c0 01             	add    eax,0x1
c0012e14:	66 a3 8a 67 03 c0    	mov    ds:0xc003678a,ax
c0012e1a:	eb 24                	jmp    c0012e40 <icmp_input+0x45c>
c0012e1c:	90                   	nop
c0012e1d:	8d 76 00             	lea    esi,[esi+0x0]
c0012e20:	83 ec 0c             	sub    esp,0xc
c0012e23:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012e27:	e8 74 54 ff ff       	call   c00082a0 <pbuf_free>
c0012e2c:	83 c4 10             	add    esp,0x10
c0012e2f:	66 a1 94 67 03 c0    	mov    ax,ds:0xc0036794
c0012e35:	83 c0 01             	add    eax,0x1
c0012e38:	66 a3 94 67 03 c0    	mov    ds:0xc0036794,ax
c0012e3e:	90                   	nop
c0012e3f:	90                   	nop
c0012e40:	83 c4 2c             	add    esp,0x2c
c0012e43:	c3                   	ret    

c0012e44 <icmp_send_response>:
c0012e44:	83 ec 2c             	sub    esp,0x2c
c0012e47:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012e4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e4f:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0012e53:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012e57:	83 ec 04             	sub    esp,0x4
c0012e5a:	6a 00                	push   0x0
c0012e5c:	6a 24                	push   0x24
c0012e5e:	6a 01                	push   0x1
c0012e60:	e8 13 56 ff ff       	call   c0008478 <pbuf_alloc>
c0012e65:	83 c4 10             	add    esp,0x10
c0012e68:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e6c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0012e71:	0f 84 fd 00 00 00    	je     c0012f74 <icmp_send_response+0x130>
c0012e77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012e7b:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012e7f:	0f b7 c0             	movzx  eax,ax
c0012e82:	83 f8 23             	cmp    eax,0x23
c0012e85:	77 15                	ja     c0012e9c <icmp_send_response+0x58>
c0012e87:	83 ec 08             	sub    esp,0x8
c0012e8a:	68 d4 0b 03 c0       	push   0xc0030bd4
c0012e8f:	68 66 f9 02 c0       	push   0xc002f966
c0012e94:	e8 3b cc 00 00       	call   c001fad4 <CPrintf>
c0012e99:	83 c4 10             	add    esp,0x10
c0012e9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ea0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ea3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012ea7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012eab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012eae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012eb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012eb6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012eba:	88 10                	mov    BYTE PTR [eax],dl
c0012ebc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ec0:	8a 54 24 08          	mov    dl,BYTE PTR [esp+0x8]
c0012ec4:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012ec7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ecb:	66 c7 40 04 00 00    	mov    WORD PTR [eax+0x4],0x0
c0012ed1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ed5:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0012edb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012edf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ee2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ee6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012ee9:	83 c2 08             	add    edx,0x8
c0012eec:	83 ec 04             	sub    esp,0x4
c0012eef:	6a 1c                	push   0x1c
c0012ef1:	50                   	push   eax
c0012ef2:	52                   	push   edx
c0012ef3:	e8 82 d4 fe ff       	call   c000037a <memcpy>
c0012ef8:	83 c4 10             	add    esp,0x10
c0012efb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012eff:	66 c7 40 02 00 00    	mov    WORD PTR [eax+0x2],0x0
c0012f05:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012f09:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0012f0d:	0f b7 c0             	movzx  eax,ax
c0012f10:	83 ec 08             	sub    esp,0x8
c0012f13:	50                   	push   eax
c0012f14:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012f18:	e8 1f 05 00 00       	call   c001343c <inet_chksum>
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f24:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0012f28:	66 a1 80 67 03 c0    	mov    ax,ds:0xc0036780
c0012f2e:	83 c0 01             	add    eax,0x1
c0012f31:	66 a3 80 67 03 c0    	mov    ds:0xc0036780,ax
c0012f37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012f3b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012f3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f42:	83 ec 08             	sub    esp,0x8
c0012f45:	6a 01                	push   0x1
c0012f47:	6a 00                	push   0x0
c0012f49:	68 ff 00 00 00       	push   0xff
c0012f4e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f52:	50                   	push   eax
c0012f53:	6a 00                	push   0x0
c0012f55:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f59:	e8 92 0d 00 00       	call   c0013cf0 <ip_output>
c0012f5e:	83 c4 20             	add    esp,0x20
c0012f61:	83 ec 0c             	sub    esp,0xc
c0012f64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012f68:	e8 33 53 ff ff       	call   c00082a0 <pbuf_free>
c0012f6d:	83 c4 10             	add    esp,0x10
c0012f70:	eb 06                	jmp    c0012f78 <icmp_send_response+0x134>
c0012f72:	66 90                	xchg   ax,ax
c0012f74:	90                   	nop
c0012f75:	8d 76 00             	lea    esi,[esi+0x0]
c0012f78:	83 c4 2c             	add    esp,0x2c
c0012f7b:	c3                   	ret    

c0012f7c <icmp_dest_unreach>:
c0012f7c:	83 ec 0c             	sub    esp,0xc
c0012f7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f83:	0f b6 c0             	movzx  eax,al
c0012f86:	83 ec 04             	sub    esp,0x4
c0012f89:	50                   	push   eax
c0012f8a:	6a 03                	push   0x3
c0012f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012f90:	e8 af fe ff ff       	call   c0012e44 <icmp_send_response>
c0012f95:	83 c4 10             	add    esp,0x10
c0012f98:	90                   	nop
c0012f99:	83 c4 0c             	add    esp,0xc
c0012f9c:	c3                   	ret    
c0012f9d:	8d 76 00             	lea    esi,[esi+0x0]

c0012fa0 <icmp_time_exceeded>:
c0012fa0:	83 ec 0c             	sub    esp,0xc
c0012fa3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012fa7:	0f b6 c0             	movzx  eax,al
c0012faa:	83 ec 04             	sub    esp,0x4
c0012fad:	50                   	push   eax
c0012fae:	6a 0b                	push   0xb
c0012fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fb4:	e8 8b fe ff ff       	call   c0012e44 <icmp_send_response>
c0012fb9:	83 c4 10             	add    esp,0x10
c0012fbc:	90                   	nop
c0012fbd:	83 c4 0c             	add    esp,0xc
c0012fc0:	c3                   	ret    
c0012fc1:	66 90                	xchg   ax,ax
c0012fc3:	90                   	nop

c0012fc4 <lwip_standard_chksum>:
c0012fc4:	83 ec 2c             	sub    esp,0x2c
c0012fc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012fcf:	66 c7 44 24 0e 00 00 	mov    WORD PTR [esp+0xe],0x0
c0012fd6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012fde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012fe2:	83 e0 01             	and    eax,0x1
c0012fe5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012fe9:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012fee:	74 24                	je     c0013014 <lwip_standard_chksum+0x50>
c0012ff0:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0012ff5:	7e 1d                	jle    c0013014 <lwip_standard_chksum+0x50>
c0012ff7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012ffb:	8d 42 01             	lea    eax,[edx+0x1]
c0012ffe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013002:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0013006:	83 c0 01             	add    eax,0x1
c0013009:	8a 12                	mov    dl,BYTE PTR [edx]
c001300b:	88 10                	mov    BYTE PTR [eax],dl
c001300d:	83 6c 24 34 01       	sub    DWORD PTR [esp+0x34],0x1
c0013012:	66 90                	xchg   ax,ax
c0013014:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013018:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001301c:	eb 1e                	jmp    c001303c <lwip_standard_chksum+0x78>
c001301e:	66 90                	xchg   ax,ax
c0013020:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013024:	8d 50 02             	lea    edx,[eax+0x2]
c0013027:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001302b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001302e:	0f b7 c0             	movzx  eax,ax
c0013031:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013035:	83 6c 24 34 02       	sub    DWORD PTR [esp+0x34],0x2
c001303a:	66 90                	xchg   ax,ax
c001303c:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0013041:	7f dd                	jg     c0013020 <lwip_standard_chksum+0x5c>
c0013043:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013048:	7e 0e                	jle    c0013058 <lwip_standard_chksum+0x94>
c001304a:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001304e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013052:	8a 12                	mov    dl,BYTE PTR [edx]
c0013054:	88 10                	mov    BYTE PTR [eax],dl
c0013056:	66 90                	xchg   ax,ax
c0013058:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001305d:	0f b7 c0             	movzx  eax,ax
c0013060:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0013064:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013068:	c1 e8 10             	shr    eax,0x10
c001306b:	89 c2                	mov    edx,eax
c001306d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013071:	0f b7 c0             	movzx  eax,ax
c0013074:	01 d0                	add    eax,edx
c0013076:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001307a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001307e:	c1 e8 10             	shr    eax,0x10
c0013081:	89 c2                	mov    edx,eax
c0013083:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013087:	0f b7 c0             	movzx  eax,ax
c001308a:	01 d0                	add    eax,edx
c001308c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013090:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0013095:	74 1d                	je     c00130b4 <lwip_standard_chksum+0xf0>
c0013097:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001309b:	0f b7 c0             	movzx  eax,ax
c001309e:	83 ec 0c             	sub    esp,0xc
c00130a1:	50                   	push   eax
c00130a2:	e8 41 db fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00130a7:	83 c4 10             	add    esp,0x10
c00130aa:	0f b7 c0             	movzx  eax,ax
c00130ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00130b1:	8d 76 00             	lea    esi,[esi+0x0]
c00130b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130b8:	83 c4 2c             	add    esp,0x2c
c00130bb:	c3                   	ret    

c00130bc <inet_chksum_pseudo>:
c00130bc:	83 ec 2c             	sub    esp,0x2c
c00130bf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00130c3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00130c7:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00130cb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00130d0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00130d8:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00130dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130e5:	e9 8a 00 00 00       	jmp    c0013174 <inet_chksum_pseudo+0xb8>
c00130ea:	66 90                	xchg   ax,ax
c00130ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130f0:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00130f4:	0f b7 d0             	movzx  edx,ax
c00130f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130fe:	83 ec 08             	sub    esp,0x8
c0013101:	52                   	push   edx
c0013102:	50                   	push   eax
c0013103:	e8 bc fe ff ff       	call   c0012fc4 <lwip_standard_chksum>
c0013108:	83 c4 10             	add    esp,0x10
c001310b:	0f b7 c0             	movzx  eax,ax
c001310e:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013112:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013116:	c1 e8 10             	shr    eax,0x10
c0013119:	89 c2                	mov    edx,eax
c001311b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001311f:	0f b7 c0             	movzx  eax,ax
c0013122:	01 d0                	add    eax,edx
c0013124:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013128:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001312c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013130:	83 e0 01             	and    eax,0x1
c0013133:	0f b7 c0             	movzx  eax,ax
c0013136:	85 c0                	test   eax,eax
c0013138:	74 2e                	je     c0013168 <inet_chksum_pseudo+0xac>
c001313a:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001313e:	ba 01 00 00 00       	mov    edx,0x1
c0013143:	29 c2                	sub    edx,eax
c0013145:	89 d0                	mov    eax,edx
c0013147:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001314b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001314f:	0f b7 c0             	movzx  eax,ax
c0013152:	83 ec 0c             	sub    esp,0xc
c0013155:	50                   	push   eax
c0013156:	e8 8d da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001315b:	83 c4 10             	add    esp,0x10
c001315e:	0f b7 c0             	movzx  eax,ax
c0013161:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013165:	8d 76 00             	lea    esi,[esi+0x0]
c0013168:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001316c:	8b 00                	mov    eax,DWORD PTR [eax]
c001316e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013172:	66 90                	xchg   ax,ax
c0013174:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013179:	0f 85 6d ff ff ff    	jne    c00130ec <inet_chksum_pseudo+0x30>
c001317f:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013184:	85 c0                	test   eax,eax
c0013186:	74 1c                	je     c00131a4 <inet_chksum_pseudo+0xe8>
c0013188:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001318c:	0f b7 c0             	movzx  eax,ax
c001318f:	83 ec 0c             	sub    esp,0xc
c0013192:	50                   	push   eax
c0013193:	e8 50 da fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013198:	83 c4 10             	add    esp,0x10
c001319b:	0f b7 c0             	movzx  eax,ax
c001319e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00131a2:	66 90                	xchg   ax,ax
c00131a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00131a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00131aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00131ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131b2:	0f b7 c0             	movzx  eax,ax
c00131b5:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131bd:	c1 e8 10             	shr    eax,0x10
c00131c0:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131c4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00131c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00131ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00131ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d2:	0f b7 c0             	movzx  eax,ax
c00131d5:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131dd:	c1 e8 10             	shr    eax,0x10
c00131e0:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00131e9:	83 ec 0c             	sub    esp,0xc
c00131ec:	50                   	push   eax
c00131ed:	e8 f6 d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00131f2:	83 c4 10             	add    esp,0x10
c00131f5:	0f b7 c0             	movzx  eax,ax
c00131f8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00131fc:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0013201:	83 ec 0c             	sub    esp,0xc
c0013204:	50                   	push   eax
c0013205:	e8 de d9 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001320a:	83 c4 10             	add    esp,0x10
c001320d:	0f b7 c0             	movzx  eax,ax
c0013210:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013218:	c1 e8 10             	shr    eax,0x10
c001321b:	89 c2                	mov    edx,eax
c001321d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013221:	0f b7 c0             	movzx  eax,ax
c0013224:	01 d0                	add    eax,edx
c0013226:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001322a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001322e:	c1 e8 10             	shr    eax,0x10
c0013231:	89 c2                	mov    edx,eax
c0013233:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013237:	0f b7 c0             	movzx  eax,ax
c001323a:	01 d0                	add    eax,edx
c001323c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013240:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013244:	f7 d0                	not    eax
c0013246:	83 c4 2c             	add    esp,0x2c
c0013249:	c3                   	ret    
c001324a:	66 90                	xchg   ax,ax

c001324c <inet_chksum_pseudo_partial>:
c001324c:	83 ec 2c             	sub    esp,0x2c
c001324f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013253:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013257:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001325b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001325f:	66 89 54 24 08       	mov    WORD PTR [esp+0x8],dx
c0013264:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0013269:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013271:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001327a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001327e:	e9 d9 00 00 00       	jmp    c001335c <inet_chksum_pseudo_partial+0x110>
c0013283:	90                   	nop
c0013284:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013288:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001328c:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0013291:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c0013296:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001329b:	39 c2                	cmp    edx,eax
c001329d:	76 09                	jbe    c00132a8 <inet_chksum_pseudo_partial+0x5c>
c001329f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132a3:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c00132a8:	0f b7 54 24 14       	movzx  edx,WORD PTR [esp+0x14]
c00132ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00132b4:	83 ec 08             	sub    esp,0x8
c00132b7:	52                   	push   edx
c00132b8:	50                   	push   eax
c00132b9:	e8 06 fd ff ff       	call   c0012fc4 <lwip_standard_chksum>
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	0f b7 c0             	movzx  eax,ax
c00132c4:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00132c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00132cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00132d0:	89 d1                	mov    ecx,edx
c00132d2:	29 c1                	sub    ecx,eax
c00132d4:	89 c8                	mov    eax,ecx
c00132d6:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00132db:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00132e0:	3d fe 7f 00 00       	cmp    eax,0x7ffe
c00132e5:	76 15                	jbe    c00132fc <inet_chksum_pseudo_partial+0xb0>
c00132e7:	83 ec 08             	sub    esp,0x8
c00132ea:	68 00 0c 03 c0       	push   0xc0030c00
c00132ef:	68 66 f9 02 c0       	push   0xc002f966
c00132f4:	e8 db c7 00 00       	call   c001fad4 <CPrintf>
c00132f9:	83 c4 10             	add    esp,0x10
c00132fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013300:	c1 e8 10             	shr    eax,0x10
c0013303:	89 c2                	mov    edx,eax
c0013305:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013309:	0f b7 c0             	movzx  eax,ax
c001330c:	01 d0                	add    eax,edx
c001330e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013312:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013316:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001331a:	83 e0 01             	and    eax,0x1
c001331d:	0f b7 c0             	movzx  eax,ax
c0013320:	85 c0                	test   eax,eax
c0013322:	74 2c                	je     c0013350 <inet_chksum_pseudo_partial+0x104>
c0013324:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0013328:	ba 01 00 00 00       	mov    edx,0x1
c001332d:	29 c2                	sub    edx,eax
c001332f:	89 d0                	mov    eax,edx
c0013331:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0013335:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013339:	0f b7 c0             	movzx  eax,ax
c001333c:	83 ec 0c             	sub    esp,0xc
c001333f:	50                   	push   eax
c0013340:	e8 a3 d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013345:	83 c4 10             	add    esp,0x10
c0013348:	0f b7 c0             	movzx  eax,ax
c001334b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001334f:	90                   	nop
c0013350:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013354:	8b 00                	mov    eax,DWORD PTR [eax]
c0013356:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001335a:	66 90                	xchg   ax,ax
c001335c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013361:	74 0d                	je     c0013370 <inet_chksum_pseudo_partial+0x124>
c0013363:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013368:	85 c0                	test   eax,eax
c001336a:	0f 85 14 ff ff ff    	jne    c0013284 <inet_chksum_pseudo_partial+0x38>
c0013370:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0013375:	85 c0                	test   eax,eax
c0013377:	74 1b                	je     c0013394 <inet_chksum_pseudo_partial+0x148>
c0013379:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001337d:	0f b7 c0             	movzx  eax,ax
c0013380:	83 ec 0c             	sub    esp,0xc
c0013383:	50                   	push   eax
c0013384:	e8 5f d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013389:	83 c4 10             	add    esp,0x10
c001338c:	0f b7 c0             	movzx  eax,ax
c001338f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013393:	90                   	nop
c0013394:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013398:	8b 00                	mov    eax,DWORD PTR [eax]
c001339a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001339e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a2:	0f b7 c0             	movzx  eax,ax
c00133a5:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ad:	c1 e8 10             	shr    eax,0x10
c00133b0:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133b4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00133b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00133ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00133be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c2:	0f b7 c0             	movzx  eax,ax
c00133c5:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133cd:	c1 e8 10             	shr    eax,0x10
c00133d0:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133d4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00133d9:	83 ec 0c             	sub    esp,0xc
c00133dc:	50                   	push   eax
c00133dd:	e8 06 d8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133e2:	83 c4 10             	add    esp,0x10
c00133e5:	0f b7 c0             	movzx  eax,ax
c00133e8:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c00133ec:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00133f1:	83 ec 0c             	sub    esp,0xc
c00133f4:	50                   	push   eax
c00133f5:	e8 ee d7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00133fa:	83 c4 10             	add    esp,0x10
c00133fd:	0f b7 c0             	movzx  eax,ax
c0013400:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013408:	c1 e8 10             	shr    eax,0x10
c001340b:	89 c2                	mov    edx,eax
c001340d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013411:	0f b7 c0             	movzx  eax,ax
c0013414:	01 d0                	add    eax,edx
c0013416:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001341a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001341e:	c1 e8 10             	shr    eax,0x10
c0013421:	89 c2                	mov    edx,eax
c0013423:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013427:	0f b7 c0             	movzx  eax,ax
c001342a:	01 d0                	add    eax,edx
c001342c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013430:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013434:	f7 d0                	not    eax
c0013436:	83 c4 2c             	add    esp,0x2c
c0013439:	c3                   	ret    
c001343a:	66 90                	xchg   ax,ax

c001343c <inet_chksum>:
c001343c:	83 ec 1c             	sub    esp,0x1c
c001343f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013443:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013448:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c001344d:	83 ec 08             	sub    esp,0x8
c0013450:	50                   	push   eax
c0013451:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013455:	e8 6a fb ff ff       	call   c0012fc4 <lwip_standard_chksum>
c001345a:	83 c4 10             	add    esp,0x10
c001345d:	f7 d0                	not    eax
c001345f:	83 c4 1c             	add    esp,0x1c
c0013462:	c3                   	ret    
c0013463:	90                   	nop

c0013464 <inet_chksum_pbuf>:
c0013464:	83 ec 1c             	sub    esp,0x1c
c0013467:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001346f:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
c0013474:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013478:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001347c:	e9 8b 00 00 00       	jmp    c001350c <inet_chksum_pbuf+0xa8>
c0013481:	8d 76 00             	lea    esi,[esi+0x0]
c0013484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013488:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c001348c:	0f b7 d0             	movzx  edx,ax
c001348f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013493:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013496:	83 ec 08             	sub    esp,0x8
c0013499:	52                   	push   edx
c001349a:	50                   	push   eax
c001349b:	e8 24 fb ff ff       	call   c0012fc4 <lwip_standard_chksum>
c00134a0:	83 c4 10             	add    esp,0x10
c00134a3:	0f b7 c0             	movzx  eax,ax
c00134a6:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00134aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134ae:	c1 e8 10             	shr    eax,0x10
c00134b1:	89 c2                	mov    edx,eax
c00134b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134b7:	0f b7 c0             	movzx  eax,ax
c00134ba:	01 d0                	add    eax,edx
c00134bc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00134c4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00134c8:	83 e0 01             	and    eax,0x1
c00134cb:	0f b7 c0             	movzx  eax,ax
c00134ce:	85 c0                	test   eax,eax
c00134d0:	74 2e                	je     c0013500 <inet_chksum_pbuf+0x9c>
c00134d2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00134d6:	ba 01 00 00 00       	mov    edx,0x1
c00134db:	29 c2                	sub    edx,eax
c00134dd:	89 d0                	mov    eax,edx
c00134df:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00134e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00134e7:	0f b7 c0             	movzx  eax,ax
c00134ea:	83 ec 0c             	sub    esp,0xc
c00134ed:	50                   	push   eax
c00134ee:	e8 f5 d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00134f3:	83 c4 10             	add    esp,0x10
c00134f6:	0f b7 c0             	movzx  eax,ax
c00134f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013500:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013504:	8b 00                	mov    eax,DWORD PTR [eax]
c0013506:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001350a:	66 90                	xchg   ax,ax
c001350c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013511:	0f 85 6d ff ff ff    	jne    c0013484 <inet_chksum_pbuf+0x20>
c0013517:	0f b6 44 24 07       	movzx  eax,BYTE PTR [esp+0x7]
c001351c:	85 c0                	test   eax,eax
c001351e:	74 1c                	je     c001353c <inet_chksum_pbuf+0xd8>
c0013520:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013524:	0f b7 c0             	movzx  eax,ax
c0013527:	83 ec 0c             	sub    esp,0xc
c001352a:	50                   	push   eax
c001352b:	e8 b8 d6 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013530:	83 c4 10             	add    esp,0x10
c0013533:	0f b7 c0             	movzx  eax,ax
c0013536:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001353a:	66 90                	xchg   ax,ax
c001353c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013540:	f7 d0                	not    eax
c0013542:	83 c4 1c             	add    esp,0x1c
c0013545:	c3                   	ret    
c0013546:	66 90                	xchg   ax,ax

c0013548 <ip_route>:
c0013548:	83 ec 10             	sub    esp,0x10
c001354b:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c0013550:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013554:	eb 42                	jmp    c0013598 <ip_route+0x50>
c0013556:	66 90                	xchg   ax,ax
c0013558:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001355c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001355f:	83 e0 01             	and    eax,0x1
c0013562:	0f b6 c0             	movzx  eax,al
c0013565:	85 c0                	test   eax,eax
c0013567:	74 23                	je     c001358c <ip_route+0x44>
c0013569:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001356d:	8b 10                	mov    edx,DWORD PTR [eax]
c001356f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013573:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013576:	31 c2                	xor    edx,eax
c0013578:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001357c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001357f:	21 d0                	and    eax,edx
c0013581:	75 09                	jne    c001358c <ip_route+0x44>
c0013583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013587:	eb 4f                	jmp    c00135d8 <ip_route+0x90>
c0013589:	8d 76 00             	lea    esi,[esi+0x0]
c001358c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013590:	8b 00                	mov    eax,DWORD PTR [eax]
c0013592:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013596:	66 90                	xchg   ax,ax
c0013598:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001359d:	75 b9                	jne    c0013558 <ip_route+0x10>
c001359f:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00135a4:	85 c0                	test   eax,eax
c00135a6:	74 10                	je     c00135b8 <ip_route+0x70>
c00135a8:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00135ad:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c00135b0:	0f b6 c0             	movzx  eax,al
c00135b3:	83 e0 01             	and    eax,0x1
c00135b6:	75 18                	jne    c00135d0 <ip_route+0x88>
c00135b8:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c00135be:	83 c0 01             	add    eax,0x1
c00135c1:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c00135c7:	b8 00 00 00 00       	mov    eax,0x0
c00135cc:	eb 0a                	jmp    c00135d8 <ip_route+0x90>
c00135ce:	66 90                	xchg   ax,ax
c00135d0:	a1 14 67 03 c0       	mov    eax,ds:0xc0036714
c00135d5:	8d 76 00             	lea    esi,[esi+0x0]
c00135d8:	83 c4 10             	add    esp,0x10
c00135db:	c3                   	ret    

c00135dc <ip_input>:
c00135dc:	83 ec 1c             	sub    esp,0x1c
c00135df:	66 a1 6a 67 03 c0    	mov    ax,ds:0xc003676a
c00135e5:	83 c0 01             	add    eax,0x1
c00135e8:	66 a3 6a 67 03 c0    	mov    ds:0xc003676a,ax
c00135ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00135f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00135f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00135f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135fd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013600:	0f b7 c0             	movzx  eax,ax
c0013603:	83 ec 0c             	sub    esp,0xc
c0013606:	50                   	push   eax
c0013607:	e8 dc d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001360c:	83 c4 10             	add    esp,0x10
c001360f:	0f b7 c0             	movzx  eax,ax
c0013612:	c1 e8 0c             	shr    eax,0xc
c0013615:	0f b7 c0             	movzx  eax,ax
c0013618:	83 f8 04             	cmp    eax,0x4
c001361b:	74 37                	je     c0013654 <ip_input+0x78>
c001361d:	83 ec 0c             	sub    esp,0xc
c0013620:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013624:	e8 77 4c ff ff       	call   c00082a0 <pbuf_free>
c0013629:	83 c4 10             	add    esp,0x10
c001362c:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013632:	83 c0 01             	add    eax,0x1
c0013635:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c001363b:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013641:	83 c0 01             	add    eax,0x1
c0013644:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c001364a:	b0 00                	mov    al,0x0
c001364c:	e9 cb 03 00 00       	jmp    c0013a1c <ip_input+0x440>
c0013651:	8d 76 00             	lea    esi,[esi+0x0]
c0013654:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013658:	66 8b 00             	mov    ax,WORD PTR [eax]
c001365b:	0f b7 c0             	movzx  eax,ax
c001365e:	83 ec 0c             	sub    esp,0xc
c0013661:	50                   	push   eax
c0013662:	e8 81 d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013667:	83 c4 10             	add    esp,0x10
c001366a:	0f b7 c0             	movzx  eax,ax
c001366d:	c1 e8 08             	shr    eax,0x8
c0013670:	83 e0 0f             	and    eax,0xf
c0013673:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013678:	66 8b 44 24 02       	mov    ax,WORD PTR [esp+0x2]
c001367d:	c1 e0 02             	shl    eax,0x2
c0013680:	66 89 44 24 02       	mov    WORD PTR [esp+0x2],ax
c0013685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013689:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c001368d:	0f b7 c0             	movzx  eax,ax
c0013690:	83 ec 0c             	sub    esp,0xc
c0013693:	50                   	push   eax
c0013694:	e8 4f d5 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013699:	83 c4 10             	add    esp,0x10
c001369c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00136a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136a4:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c00136a8:	0f b7 54 24 02       	movzx  edx,WORD PTR [esp+0x2]
c00136ad:	0f b7 c0             	movzx  eax,ax
c00136b0:	39 c2                	cmp    edx,eax
c00136b2:	77 14                	ja     c00136c8 <ip_input+0xec>
c00136b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00136bb:	0f b7 14 24          	movzx  edx,WORD PTR [esp]
c00136bf:	0f b7 c0             	movzx  eax,ax
c00136c2:	39 c2                	cmp    edx,eax
c00136c4:	76 36                	jbe    c00136fc <ip_input+0x120>
c00136c6:	66 90                	xchg   ax,ax
c00136c8:	83 ec 0c             	sub    esp,0xc
c00136cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00136cf:	e8 cc 4b ff ff       	call   c00082a0 <pbuf_free>
c00136d4:	83 c4 10             	add    esp,0x10
c00136d7:	66 a1 72 67 03 c0    	mov    ax,ds:0xc0036772
c00136dd:	83 c0 01             	add    eax,0x1
c00136e0:	66 a3 72 67 03 c0    	mov    ds:0xc0036772,ax
c00136e6:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00136ec:	83 c0 01             	add    eax,0x1
c00136ef:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00136f5:	b0 00                	mov    al,0x0
c00136f7:	e9 20 03 00 00       	jmp    c0013a1c <ip_input+0x440>
c00136fc:	0f b7 44 24 02       	movzx  eax,WORD PTR [esp+0x2]
c0013701:	83 ec 08             	sub    esp,0x8
c0013704:	50                   	push   eax
c0013705:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013709:	e8 2e fd ff ff       	call   c001343c <inet_chksum>
c001370e:	83 c4 10             	add    esp,0x10
c0013711:	0f b7 c0             	movzx  eax,ax
c0013714:	85 c0                	test   eax,eax
c0013716:	74 34                	je     c001374c <ip_input+0x170>
c0013718:	83 ec 0c             	sub    esp,0xc
c001371b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001371f:	e8 7c 4b ff ff       	call   c00082a0 <pbuf_free>
c0013724:	83 c4 10             	add    esp,0x10
c0013727:	66 a1 70 67 03 c0    	mov    ax,ds:0xc0036770
c001372d:	83 c0 01             	add    eax,0x1
c0013730:	66 a3 70 67 03 c0    	mov    ds:0xc0036770,ax
c0013736:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c001373c:	83 c0 01             	add    eax,0x1
c001373f:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013745:	b0 00                	mov    al,0x0
c0013747:	e9 d0 02 00 00       	jmp    c0013a1c <ip_input+0x440>
c001374c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0013750:	83 ec 08             	sub    esp,0x8
c0013753:	50                   	push   eax
c0013754:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013758:	e8 13 51 ff ff       	call   c0008870 <pbuf_realloc>
c001375d:	83 c4 10             	add    esp,0x10
c0013760:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013764:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013767:	a3 98 68 03 c0       	mov    ds:0xc0036898,eax
c001376c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013770:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013773:	a3 90 68 03 c0       	mov    ds:0xc0036890,eax
c0013778:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0013780:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013784:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001378c:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c001378f:	83 e0 01             	and    eax,0x1
c0013792:	0f b6 c0             	movzx  eax,al
c0013795:	85 c0                	test   eax,eax
c0013797:	74 43                	je     c00137dc <ip_input+0x200>
c0013799:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001379d:	83 c0 04             	add    eax,0x4
c00137a0:	74 3a                	je     c00137dc <ip_input+0x200>
c00137a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137a9:	85 c0                	test   eax,eax
c00137ab:	74 2f                	je     c00137dc <ip_input+0x200>
c00137ad:	8b 15 98 68 03 c0    	mov    edx,DWORD PTR ds:0xc0036898
c00137b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00137ba:	39 c2                	cmp    edx,eax
c00137bc:	74 66                	je     c0013824 <ip_input+0x248>
c00137be:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c00137c3:	83 ec 08             	sub    esp,0x8
c00137c6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00137ca:	50                   	push   eax
c00137cb:	e8 c4 05 00 00       	call   c0013d94 <ip4_addr_isbroadcast>
c00137d0:	83 c4 10             	add    esp,0x10
c00137d3:	0f b6 c0             	movzx  eax,al
c00137d6:	85 c0                	test   eax,eax
c00137d8:	75 4a                	jne    c0013824 <ip_input+0x248>
c00137da:	66 90                	xchg   ax,ax
c00137dc:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00137e1:	74 15                	je     c00137f8 <ip_input+0x21c>
c00137e3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00137eb:	a1 10 67 03 c0       	mov    eax,ds:0xc0036710
c00137f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00137f4:	eb 0e                	jmp    c0013804 <ip_input+0x228>
c00137f6:	66 90                	xchg   ax,ax
c00137f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00137fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00137fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013802:	66 90                	xchg   ax,ax
c0013804:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013808:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001380c:	75 0a                	jne    c0013818 <ip_input+0x23c>
c001380e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013812:	8b 00                	mov    eax,DWORD PTR [eax]
c0013814:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013818:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001381d:	0f 85 65 ff ff ff    	jne    c0013788 <ip_input+0x1ac>
c0013823:	90                   	nop
c0013824:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013829:	83 ec 08             	sub    esp,0x8
c001382c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013830:	50                   	push   eax
c0013831:	e8 5e 05 00 00       	call   c0013d94 <ip4_addr_isbroadcast>
c0013836:	83 c4 10             	add    esp,0x10
c0013839:	0f b6 c0             	movzx  eax,al
c001383c:	85 c0                	test   eax,eax
c001383e:	75 14                	jne    c0013854 <ip_input+0x278>
c0013840:	a1 90 68 03 c0       	mov    eax,ds:0xc0036890
c0013845:	25 f0 00 00 00       	and    eax,0xf0
c001384a:	3d e0 00 00 00       	cmp    eax,0xe0
c001384f:	75 2b                	jne    c001387c <ip_input+0x2a0>
c0013851:	8d 76 00             	lea    esi,[esi+0x0]
c0013854:	83 ec 0c             	sub    esp,0xc
c0013857:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001385b:	e8 40 4a ff ff       	call   c00082a0 <pbuf_free>
c0013860:	83 c4 10             	add    esp,0x10
c0013863:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c0013869:	83 c0 01             	add    eax,0x1
c001386c:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c0013872:	b0 00                	mov    al,0x0
c0013874:	e9 a3 01 00 00       	jmp    c0013a1c <ip_input+0x440>
c0013879:	8d 76 00             	lea    esi,[esi+0x0]
c001387c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013881:	75 19                	jne    c001389c <ip_input+0x2c0>
c0013883:	83 ec 0c             	sub    esp,0xc
c0013886:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001388a:	e8 11 4a ff ff       	call   c00082a0 <pbuf_free>
c001388f:	83 c4 10             	add    esp,0x10
c0013892:	b0 00                	mov    al,0x0
c0013894:	e9 83 01 00 00       	jmp    c0013a1c <ip_input+0x440>
c0013899:	8d 76 00             	lea    esi,[esi+0x0]
c001389c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138a0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00138a4:	0f b7 c0             	movzx  eax,ax
c00138a7:	25 3f ff 00 00       	and    eax,0xff3f
c00138ac:	74 2e                	je     c00138dc <ip_input+0x300>
c00138ae:	83 ec 0c             	sub    esp,0xc
c00138b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138b5:	e8 7a 13 00 00       	call   c0014c34 <ip_reass>
c00138ba:	83 c4 10             	add    esp,0x10
c00138bd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00138c1:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00138c6:	75 08                	jne    c00138d0 <ip_input+0x2f4>
c00138c8:	b0 00                	mov    al,0x0
c00138ca:	e9 4d 01 00 00       	jmp    c0013a1c <ip_input+0x440>
c00138cf:	90                   	nop
c00138d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00138d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00138d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138db:	90                   	nop
c00138dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138e0:	a3 94 68 03 c0       	mov    ds:0xc0036894,eax
c00138e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138e9:	a3 9c 68 03 c0       	mov    ds:0xc003689c,eax
c00138ee:	83 ec 08             	sub    esp,0x8
c00138f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138f9:	e8 c6 5c ff ff       	call   c00095c4 <raw_input>
c00138fe:	83 c4 10             	add    esp,0x10
c0013901:	0f b6 c0             	movzx  eax,al
c0013904:	85 c0                	test   eax,eax
c0013906:	0f 85 e0 00 00 00    	jne    c00139ec <ip_input+0x410>
c001390c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013910:	8a 40 09             	mov    al,BYTE PTR [eax+0x9]
c0013913:	0f b6 c0             	movzx  eax,al
c0013916:	83 f8 06             	cmp    eax,0x6
c0013919:	74 25                	je     c0013940 <ip_input+0x364>
c001391b:	83 f8 11             	cmp    eax,0x11
c001391e:	74 08                	je     c0013928 <ip_input+0x34c>
c0013920:	83 f8 01             	cmp    eax,0x1
c0013923:	74 33                	je     c0013958 <ip_input+0x37c>
c0013925:	eb 49                	jmp    c0013970 <ip_input+0x394>
c0013927:	90                   	nop
c0013928:	83 ec 08             	sub    esp,0x8
c001392b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001392f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013933:	e8 c0 d3 ff ff       	call   c0010cf8 <udp_input>
c0013938:	83 c4 10             	add    esp,0x10
c001393b:	e9 b0 00 00 00       	jmp    c00139f0 <ip_input+0x414>
c0013940:	83 ec 08             	sub    esp,0x8
c0013943:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013947:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001394b:	e8 00 a5 ff ff       	call   c000de50 <tcp_input>
c0013950:	83 c4 10             	add    esp,0x10
c0013953:	e9 98 00 00 00       	jmp    c00139f0 <ip_input+0x414>
c0013958:	83 ec 08             	sub    esp,0x8
c001395b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001395f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013963:	e8 7c f0 ff ff       	call   c00129e4 <icmp_input>
c0013968:	83 c4 10             	add    esp,0x10
c001396b:	e9 80 00 00 00       	jmp    c00139f0 <ip_input+0x414>
c0013970:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013975:	83 ec 08             	sub    esp,0x8
c0013978:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001397c:	50                   	push   eax
c001397d:	e8 12 04 00 00       	call   c0013d94 <ip4_addr_isbroadcast>
c0013982:	83 c4 10             	add    esp,0x10
c0013985:	0f b6 c0             	movzx  eax,al
c0013988:	85 c0                	test   eax,eax
c001398a:	75 30                	jne    c00139bc <ip_input+0x3e0>
c001398c:	a1 98 68 03 c0       	mov    eax,ds:0xc0036898
c0013991:	25 f0 00 00 00       	and    eax,0xf0
c0013996:	3d e0 00 00 00       	cmp    eax,0xe0
c001399b:	74 1f                	je     c00139bc <ip_input+0x3e0>
c001399d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00139a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00139a8:	83 ec 08             	sub    esp,0x8
c00139ab:	6a 02                	push   0x2
c00139ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139b1:	e8 c6 f5 ff ff       	call   c0012f7c <icmp_dest_unreach>
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	8d 76 00             	lea    esi,[esi+0x0]
c00139bc:	83 ec 0c             	sub    esp,0xc
c00139bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139c3:	e8 d8 48 ff ff       	call   c00082a0 <pbuf_free>
c00139c8:	83 c4 10             	add    esp,0x10
c00139cb:	66 a1 78 67 03 c0    	mov    ax,ds:0xc0036778
c00139d1:	83 c0 01             	add    eax,0x1
c00139d4:	66 a3 78 67 03 c0    	mov    ds:0xc0036778,ax
c00139da:	66 a1 6e 67 03 c0    	mov    ax,ds:0xc003676e
c00139e0:	83 c0 01             	add    eax,0x1
c00139e3:	66 a3 6e 67 03 c0    	mov    ds:0xc003676e,ax
c00139e9:	eb 05                	jmp    c00139f0 <ip_input+0x414>
c00139eb:	90                   	nop
c00139ec:	90                   	nop
c00139ed:	8d 76 00             	lea    esi,[esi+0x0]
c00139f0:	c7 05 94 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036894,0x0
c00139fa:	c7 05 9c 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003689c,0x0
c0013a04:	c7 05 90 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036890,0x0
c0013a0e:	c7 05 98 68 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0036898,0x0
c0013a18:	b0 00                	mov    al,0x0
c0013a1a:	66 90                	xchg   ax,ax
c0013a1c:	83 c4 1c             	add    esp,0x1c
c0013a1f:	c3                   	ret    

c0013a20 <ip_output_if>:
c0013a20:	83 ec 2c             	sub    esp,0x2c
c0013a23:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013a27:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013a2b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013a2f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013a33:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013a37:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013a3b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013a43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a47:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013a4b:	0f b7 c0             	movzx  eax,ax
c0013a4e:	83 f8 01             	cmp    eax,0x1
c0013a51:	74 15                	je     c0013a68 <ip_output_if+0x48>
c0013a53:	83 ec 08             	sub    esp,0x8
c0013a56:	68 0a 0c 03 c0       	push   0xc0030c0a
c0013a5b:	68 66 f9 02 c0       	push   0xc002f966
c0013a60:	e8 6f c0 00 00       	call   c001fad4 <CPrintf>
c0013a65:	83 c4 10             	add    esp,0x10
c0013a68:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0013a6d:	0f 84 ed 01 00 00    	je     c0013c60 <ip_output_if+0x240>
c0013a73:	66 c7 44 24 1a 14 00 	mov    WORD PTR [esp+0x1a],0x14
c0013a7a:	83 ec 08             	sub    esp,0x8
c0013a7d:	6a 14                	push   0x14
c0013a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013a83:	e8 7c 46 ff ff       	call   c0008104 <pbuf_header>
c0013a88:	83 c4 10             	add    esp,0x10
c0013a8b:	0f b6 c0             	movzx  eax,al
c0013a8e:	85 c0                	test   eax,eax
c0013a90:	74 16                	je     c0013aa8 <ip_output_if+0x88>
c0013a92:	66 a1 7c 67 03 c0    	mov    ax,ds:0xc003677c
c0013a98:	83 c0 01             	add    eax,0x1
c0013a9b:	66 a3 7c 67 03 c0    	mov    ds:0xc003677c,ax
c0013aa1:	b0 fe                	mov    al,0xfe
c0013aa3:	e9 44 02 00 00       	jmp    c0013cec <ip_output_if+0x2cc>
c0013aa8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013aac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013aaf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ab3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ab7:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0013abb:	0f b7 c0             	movzx  eax,ax
c0013abe:	83 f8 13             	cmp    eax,0x13
c0013ac1:	77 15                	ja     c0013ad8 <ip_output_if+0xb8>
c0013ac3:	83 ec 08             	sub    esp,0x8
c0013ac6:	68 18 0c 03 c0       	push   0xc0030c18
c0013acb:	68 66 f9 02 c0       	push   0xc002f966
c0013ad0:	e8 ff bf 00 00       	call   c001fad4 <CPrintf>
c0013ad5:	83 c4 10             	add    esp,0x10
c0013ad8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013adc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013ae0:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
c0013ae3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013ae7:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013aeb:	88 50 09             	mov    BYTE PTR [eax+0x9],dl
c0013aee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0013af3:	c1 e0 08             	shl    eax,0x8
c0013af6:	89 c2                	mov    edx,eax
c0013af8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013afd:	09 d0                	or     eax,edx
c0013aff:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b03:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013b07:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b0d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013b10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013b17:	0f b7 c0             	movzx  eax,ax
c0013b1a:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b22:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013b25:	c1 e8 10             	shr    eax,0x10
c0013b28:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b2c:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0013b31:	c1 e8 02             	shr    eax,0x2
c0013b34:	0f b7 c0             	movzx  eax,ax
c0013b37:	c1 e0 08             	shl    eax,0x8
c0013b3a:	80 cc 40             	or     ah,0x40
c0013b3d:	89 c2                	mov    edx,eax
c0013b3f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0013b44:	09 d0                	or     eax,edx
c0013b46:	0f b7 c0             	movzx  eax,ax
c0013b49:	83 ec 0c             	sub    esp,0xc
c0013b4c:	50                   	push   eax
c0013b4d:	e8 96 d0 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013b59:	66 89 02             	mov    WORD PTR [edx],ax
c0013b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b60:	66 8b 00             	mov    ax,WORD PTR [eax]
c0013b63:	0f b7 c0             	movzx  eax,ax
c0013b66:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b6a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013b6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013b71:	0f b7 c0             	movzx  eax,ax
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	50                   	push   eax
c0013b78:	e8 6b d0 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013b7d:	83 c4 10             	add    esp,0x10
c0013b80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013b84:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0013b88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b8c:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0013b90:	0f b7 c0             	movzx  eax,ax
c0013b93:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013b97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b9b:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0013ba1:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013ba7:	0f b7 c0             	movzx  eax,ax
c0013baa:	83 ec 0c             	sub    esp,0xc
c0013bad:	50                   	push   eax
c0013bae:	e8 35 d0 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0013bb3:	83 c4 10             	add    esp,0x10
c0013bb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013bba:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0013bbe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bc2:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0013bc6:	0f b7 c0             	movzx  eax,ax
c0013bc9:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013bcd:	66 a1 a0 a9 03 c0    	mov    ax,ds:0xc003a9a0
c0013bd3:	83 c0 01             	add    eax,0x1
c0013bd6:	66 a3 a0 a9 03 c0    	mov    ds:0xc003a9a0,ax
c0013bdc:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0013be1:	74 0d                	je     c0013bf0 <ip_output_if+0x1d0>
c0013be3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0013be9:	85 c0                	test   eax,eax
c0013beb:	75 13                	jne    c0013c00 <ip_output_if+0x1e0>
c0013bed:	8d 76 00             	lea    esi,[esi+0x0]
c0013bf0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013bf4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013bf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bfb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013bfe:	eb 10                	jmp    c0013c10 <ip_output_if+0x1f0>
c0013c00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013c04:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c0a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0013c10:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c14:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c17:	0f b7 c0             	movzx  eax,ax
c0013c1a:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c1e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013c25:	c1 e8 10             	shr    eax,0x10
c0013c28:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c2c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c30:	c1 e8 10             	shr    eax,0x10
c0013c33:	89 c2                	mov    edx,eax
c0013c35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c39:	0f b7 c0             	movzx  eax,ax
c0013c3c:	01 d0                	add    eax,edx
c0013c3e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c46:	c1 e8 10             	shr    eax,0x10
c0013c49:	01 44 24 1c          	add    DWORD PTR [esp+0x1c],eax
c0013c4d:	f7 54 24 1c          	not    DWORD PTR [esp+0x1c]
c0013c51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c55:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013c59:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0013c5d:	eb 21                	jmp    c0013c80 <ip_output_if+0x260>
c0013c5f:	90                   	nop
c0013c60:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013c67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013c6f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013c72:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013c76:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013c7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0013c7e:	66 90                	xchg   ax,ax
c0013c80:	66 a1 68 67 03 c0    	mov    ax,ds:0xc0036768
c0013c86:	83 c0 01             	add    eax,0x1
c0013c89:	66 a3 68 67 03 c0    	mov    ds:0xc0036768,ax
c0013c8f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013c93:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013c96:	0f b7 c0             	movzx  eax,ax
c0013c99:	85 c0                	test   eax,eax
c0013c9b:	74 33                	je     c0013cd0 <ip_output_if+0x2b0>
c0013c9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ca1:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0013ca4:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013ca8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0013cab:	0f b7 d2             	movzx  edx,dx
c0013cae:	0f b7 c0             	movzx  eax,ax
c0013cb1:	39 c2                	cmp    edx,eax
c0013cb3:	76 1b                	jbe    c0013cd0 <ip_output_if+0x2b0>
c0013cb5:	83 ec 04             	sub    esp,0x4
c0013cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cbc:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013cc0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cc4:	e8 2b 14 00 00       	call   c00150f4 <ip_frag>
c0013cc9:	83 c4 10             	add    esp,0x10
c0013ccc:	eb 1e                	jmp    c0013cec <ip_output_if+0x2cc>
c0013cce:	66 90                	xchg   ax,ax
c0013cd0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0013cd4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0013cd7:	83 ec 04             	sub    esp,0x4
c0013cda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013cde:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0013ce2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013ce6:	ff d0                	call   eax
c0013ce8:	83 c4 10             	add    esp,0x10
c0013ceb:	90                   	nop
c0013cec:	83 c4 2c             	add    esp,0x2c
c0013cef:	c3                   	ret    

c0013cf0 <ip_output>:
c0013cf0:	83 ec 2c             	sub    esp,0x2c
c0013cf3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0013cf7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013cfb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0013cff:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d03:	88 54 24 08          	mov    BYTE PTR [esp+0x8],dl
c0013d07:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013d0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013d0f:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0013d13:	0f b7 c0             	movzx  eax,ax
c0013d16:	83 f8 01             	cmp    eax,0x1
c0013d19:	74 15                	je     c0013d30 <ip_output+0x40>
c0013d1b:	83 ec 08             	sub    esp,0x8
c0013d1e:	68 0a 0c 03 c0       	push   0xc0030c0a
c0013d23:	68 66 f9 02 c0       	push   0xc002f966
c0013d28:	e8 a7 bd 00 00       	call   c001fad4 <CPrintf>
c0013d2d:	83 c4 10             	add    esp,0x10
c0013d30:	83 ec 0c             	sub    esp,0xc
c0013d33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0013d37:	e8 0c f8 ff ff       	call   c0013548 <ip_route>
c0013d3c:	83 c4 10             	add    esp,0x10
c0013d3f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013d43:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013d48:	75 16                	jne    c0013d60 <ip_output+0x70>
c0013d4a:	66 a1 76 67 03 c0    	mov    ax,ds:0xc0036776
c0013d50:	83 c0 01             	add    eax,0x1
c0013d53:	66 a3 76 67 03 c0    	mov    ds:0xc0036776,ax
c0013d59:	b0 fc                	mov    al,0xfc
c0013d5b:	eb 33                	jmp    c0013d90 <ip_output+0xa0>
c0013d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d60:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c0013d65:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0013d6a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0013d6f:	83 ec 04             	sub    esp,0x4
c0013d72:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d76:	51                   	push   ecx
c0013d77:	52                   	push   edx
c0013d78:	50                   	push   eax
c0013d79:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013d7d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013d81:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013d85:	e8 96 fc ff ff       	call   c0013a20 <ip_output_if>
c0013d8a:	83 c4 20             	add    esp,0x20
c0013d8d:	8d 76 00             	lea    esi,[esi+0x0]
c0013d90:	83 c4 2c             	add    esp,0x2c
c0013d93:	c3                   	ret    

c0013d94 <ip4_addr_isbroadcast>:
c0013d94:	83 ec 10             	sub    esp,0x10
c0013d97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d9f:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0013da4:	74 0a                	je     c0013db0 <ip4_addr_isbroadcast+0x1c>
c0013da6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013dab:	75 07                	jne    c0013db4 <ip4_addr_isbroadcast+0x20>
c0013dad:	8d 76 00             	lea    esi,[esi+0x0]
c0013db0:	b0 01                	mov    al,0x1
c0013db2:	eb 64                	jmp    c0013e18 <ip4_addr_isbroadcast+0x84>
c0013db4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013db8:	8a 40 29             	mov    al,BYTE PTR [eax+0x29]
c0013dbb:	0f b6 c0             	movzx  eax,al
c0013dbe:	83 e0 02             	and    eax,0x2
c0013dc1:	75 05                	jne    c0013dc8 <ip4_addr_isbroadcast+0x34>
c0013dc3:	b0 00                	mov    al,0x0
c0013dc5:	eb 51                	jmp    c0013e18 <ip4_addr_isbroadcast+0x84>
c0013dc7:	90                   	nop
c0013dc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013dcc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013dcf:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0013dd3:	75 07                	jne    c0013ddc <ip4_addr_isbroadcast+0x48>
c0013dd5:	b0 00                	mov    al,0x0
c0013dd7:	eb 3f                	jmp    c0013e18 <ip4_addr_isbroadcast+0x84>
c0013dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0013ddc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013de0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013de7:	31 c2                	xor    edx,eax
c0013de9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ded:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013df0:	21 d0                	and    eax,edx
c0013df2:	75 20                	jne    c0013e14 <ip4_addr_isbroadcast+0x80>
c0013df4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013df8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013dfb:	f7 d0                	not    eax
c0013dfd:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0013e01:	89 c2                	mov    edx,eax
c0013e03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013e0a:	f7 d0                	not    eax
c0013e0c:	39 c2                	cmp    edx,eax
c0013e0e:	75 04                	jne    c0013e14 <ip4_addr_isbroadcast+0x80>
c0013e10:	b0 01                	mov    al,0x1
c0013e12:	eb 04                	jmp    c0013e18 <ip4_addr_isbroadcast+0x84>
c0013e14:	b0 00                	mov    al,0x0
c0013e16:	66 90                	xchg   ax,ax
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	c3                   	ret    

c0013e1c <ip4_addr_netmask_valid>:
c0013e1c:	83 ec 1c             	sub    esp,0x1c
c0013e1f:	83 ec 0c             	sub    esp,0xc
c0013e22:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e26:	e8 e1 cd fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0013e2b:	83 c4 10             	add    esp,0x10
c0013e2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013e32:	c7 44 24 0c 00 00 00 80 	mov    DWORD PTR [esp+0xc],0x80000000
c0013e3a:	eb 10                	jmp    c0013e4c <ip4_addr_netmask_valid+0x30>
c0013e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e40:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013e44:	74 12                	je     c0013e58 <ip4_addr_netmask_valid+0x3c>
c0013e46:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013e4a:	66 90                	xchg   ax,ax
c0013e4c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013e51:	75 e9                	jne    c0013e3c <ip4_addr_netmask_valid+0x20>
c0013e53:	eb 1b                	jmp    c0013e70 <ip4_addr_netmask_valid+0x54>
c0013e55:	8d 76 00             	lea    esi,[esi+0x0]
c0013e58:	90                   	nop
c0013e59:	eb 15                	jmp    c0013e70 <ip4_addr_netmask_valid+0x54>
c0013e5b:	90                   	nop
c0013e5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e60:	23 44 24 0c          	and    eax,DWORD PTR [esp+0xc]
c0013e64:	74 06                	je     c0013e6c <ip4_addr_netmask_valid+0x50>
c0013e66:	b0 00                	mov    al,0x0
c0013e68:	eb 12                	jmp    c0013e7c <ip4_addr_netmask_valid+0x60>
c0013e6a:	66 90                	xchg   ax,ax
c0013e6c:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
c0013e70:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0013e75:	75 e5                	jne    c0013e5c <ip4_addr_netmask_valid+0x40>
c0013e77:	b0 01                	mov    al,0x1
c0013e79:	8d 76 00             	lea    esi,[esi+0x0]
c0013e7c:	83 c4 1c             	add    esp,0x1c
c0013e7f:	c3                   	ret    

c0013e80 <ipaddr_aton>:
c0013e80:	83 ec 2c             	sub    esp,0x2c
c0013e83:	8d 44 24 04          	lea    eax,[esp+0x4]
c0013e87:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e8f:	8a 00                	mov    al,BYTE PTR [eax]
c0013e91:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013e95:	8d 76 00             	lea    esi,[esi+0x0]
c0013e98:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013e9c:	0f b6 c0             	movzx  eax,al
c0013e9f:	83 f8 2f             	cmp    eax,0x2f
c0013ea2:	76 0c                	jbe    c0013eb0 <ipaddr_aton+0x30>
c0013ea4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013ea8:	0f b6 c0             	movzx  eax,al
c0013eab:	83 f8 39             	cmp    eax,0x39
c0013eae:	76 0c                	jbe    c0013ebc <ipaddr_aton+0x3c>
c0013eb0:	b8 00 00 00 00       	mov    eax,0x0
c0013eb5:	e9 f2 02 00 00       	jmp    c00141ac <ipaddr_aton+0x32c>
c0013eba:	66 90                	xchg   ax,ax
c0013ebc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013ec4:	c6 44 24 1b 0a       	mov    BYTE PTR [esp+0x1b],0xa
c0013ec9:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013ece:	83 f8 30             	cmp    eax,0x30
c0013ed1:	75 45                	jne    c0013f18 <ipaddr_aton+0x98>
c0013ed3:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013ed8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013edc:	8a 00                	mov    al,BYTE PTR [eax]
c0013ede:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013ee2:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013ee7:	83 f8 78             	cmp    eax,0x78
c0013eea:	74 0c                	je     c0013ef8 <ipaddr_aton+0x78>
c0013eec:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013ef1:	83 f8 58             	cmp    eax,0x58
c0013ef4:	75 1a                	jne    c0013f10 <ipaddr_aton+0x90>
c0013ef6:	66 90                	xchg   ax,ax
c0013ef8:	c6 44 24 1b 10       	mov    BYTE PTR [esp+0x1b],0x10
c0013efd:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013f02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f06:	8a 00                	mov    al,BYTE PTR [eax]
c0013f08:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f0c:	eb 0a                	jmp    c0013f18 <ipaddr_aton+0x98>
c0013f0e:	66 90                	xchg   ax,ax
c0013f10:	c6 44 24 1b 08       	mov    BYTE PTR [esp+0x1b],0x8
c0013f15:	8d 76 00             	lea    esi,[esi+0x0]
c0013f18:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f1c:	0f b6 c0             	movzx  eax,al
c0013f1f:	83 f8 2f             	cmp    eax,0x2f
c0013f22:	76 3c                	jbe    c0013f60 <ipaddr_aton+0xe0>
c0013f24:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f28:	0f b6 c0             	movzx  eax,al
c0013f2b:	83 f8 39             	cmp    eax,0x39
c0013f2e:	77 30                	ja     c0013f60 <ipaddr_aton+0xe0>
c0013f30:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013f35:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0013f3a:	89 c2                	mov    edx,eax
c0013f3c:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013f41:	01 d0                	add    eax,edx
c0013f43:	83 e8 30             	sub    eax,0x30
c0013f46:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013f4a:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013f4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f53:	8a 00                	mov    al,BYTE PTR [eax]
c0013f55:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0013f59:	e9 ae 00 00 00       	jmp    c001400c <ipaddr_aton+0x18c>
c0013f5e:	66 90                	xchg   ax,ax
c0013f60:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0013f65:	83 f8 10             	cmp    eax,0x10
c0013f68:	0f 85 a6 00 00 00    	jne    c0014014 <ipaddr_aton+0x194>
c0013f6e:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f72:	0f b6 c0             	movzx  eax,al
c0013f75:	83 f8 2f             	cmp    eax,0x2f
c0013f78:	76 0e                	jbe    c0013f88 <ipaddr_aton+0x108>
c0013f7a:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f7e:	0f b6 c0             	movzx  eax,al
c0013f81:	83 f8 39             	cmp    eax,0x39
c0013f84:	76 32                	jbe    c0013fb8 <ipaddr_aton+0x138>
c0013f86:	66 90                	xchg   ax,ax
c0013f88:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f8c:	0f b6 c0             	movzx  eax,al
c0013f8f:	83 f8 60             	cmp    eax,0x60
c0013f92:	76 0c                	jbe    c0013fa0 <ipaddr_aton+0x120>
c0013f94:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013f98:	0f b6 c0             	movzx  eax,al
c0013f9b:	83 f8 66             	cmp    eax,0x66
c0013f9e:	76 18                	jbe    c0013fb8 <ipaddr_aton+0x138>
c0013fa0:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fa4:	0f b6 c0             	movzx  eax,al
c0013fa7:	83 f8 40             	cmp    eax,0x40
c0013faa:	76 68                	jbe    c0014014 <ipaddr_aton+0x194>
c0013fac:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fb0:	0f b6 c0             	movzx  eax,al
c0013fb3:	83 f8 46             	cmp    eax,0x46
c0013fb6:	77 5c                	ja     c0014014 <ipaddr_aton+0x194>
c0013fb8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fbc:	c1 e0 04             	shl    eax,0x4
c0013fbf:	89 c2                	mov    edx,eax
c0013fc1:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0013fc6:	8d 48 0a             	lea    ecx,[eax+0xa]
c0013fc9:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fcd:	0f b6 c0             	movzx  eax,al
c0013fd0:	83 f8 60             	cmp    eax,0x60
c0013fd3:	76 13                	jbe    c0013fe8 <ipaddr_aton+0x168>
c0013fd5:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0013fd9:	0f b6 c0             	movzx  eax,al
c0013fdc:	83 f8 7a             	cmp    eax,0x7a
c0013fdf:	77 07                	ja     c0013fe8 <ipaddr_aton+0x168>
c0013fe1:	b8 61 00 00 00       	mov    eax,0x61
c0013fe6:	eb 08                	jmp    c0013ff0 <ipaddr_aton+0x170>
c0013fe8:	b8 41 00 00 00       	mov    eax,0x41
c0013fed:	8d 76 00             	lea    esi,[esi+0x0]
c0013ff0:	29 c1                	sub    ecx,eax
c0013ff2:	89 c8                	mov    eax,ecx
c0013ff4:	09 d0                	or     eax,edx
c0013ff6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013ffa:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0013fff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014003:	8a 00                	mov    al,BYTE PTR [eax]
c0014005:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014009:	8d 76 00             	lea    esi,[esi+0x0]
c001400c:	e9 07 ff ff ff       	jmp    c0013f18 <ipaddr_aton+0x98>
c0014011:	8d 76 00             	lea    esi,[esi+0x0]
c0014014:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014019:	83 f8 2e             	cmp    eax,0x2e
c001401c:	75 42                	jne    c0014060 <ipaddr_aton+0x1e0>
c001401e:	8d 44 24 04          	lea    eax,[esp+0x4]
c0014022:	83 c0 0c             	add    eax,0xc
c0014025:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0014029:	72 0d                	jb     c0014038 <ipaddr_aton+0x1b8>
c001402b:	b8 00 00 00 00       	mov    eax,0x0
c0014030:	e9 77 01 00 00       	jmp    c00141ac <ipaddr_aton+0x32c>
c0014035:	8d 76 00             	lea    esi,[esi+0x0]
c0014038:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001403c:	8d 50 04             	lea    edx,[eax+0x4]
c001403f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014043:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014047:	89 10                	mov    DWORD PTR [eax],edx
c0014049:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c001404e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014052:	8a 00                	mov    al,BYTE PTR [eax]
c0014054:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0014058:	e9 3b fe ff ff       	jmp    c0013e98 <ipaddr_aton+0x18>
c001405d:	8d 76 00             	lea    esi,[esi+0x0]
c0014060:	90                   	nop
c0014061:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014066:	85 c0                	test   eax,eax
c0014068:	74 46                	je     c00140b0 <ipaddr_aton+0x230>
c001406a:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001406f:	83 f8 20             	cmp    eax,0x20
c0014072:	74 3c                	je     c00140b0 <ipaddr_aton+0x230>
c0014074:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014079:	83 f8 0c             	cmp    eax,0xc
c001407c:	74 32                	je     c00140b0 <ipaddr_aton+0x230>
c001407e:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014083:	83 f8 0a             	cmp    eax,0xa
c0014086:	74 28                	je     c00140b0 <ipaddr_aton+0x230>
c0014088:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c001408d:	83 f8 0d             	cmp    eax,0xd
c0014090:	74 1e                	je     c00140b0 <ipaddr_aton+0x230>
c0014092:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c0014097:	83 f8 09             	cmp    eax,0x9
c001409a:	74 14                	je     c00140b0 <ipaddr_aton+0x230>
c001409c:	0f be 44 24 1a       	movsx  eax,BYTE PTR [esp+0x1a]
c00140a1:	83 f8 0b             	cmp    eax,0xb
c00140a4:	74 0a                	je     c00140b0 <ipaddr_aton+0x230>
c00140a6:	b8 00 00 00 00       	mov    eax,0x0
c00140ab:	e9 fc 00 00 00       	jmp    c00141ac <ipaddr_aton+0x32c>
c00140b0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00140b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00140b8:	29 c2                	sub    edx,eax
c00140ba:	89 d0                	mov    eax,edx
c00140bc:	c1 f8 02             	sar    eax,0x2
c00140bf:	83 c0 01             	add    eax,0x1
c00140c2:	83 f8 04             	cmp    eax,0x4
c00140c5:	0f 87 9d 00 00 00    	ja     c0014168 <ipaddr_aton+0x2e8>
c00140cb:	8b 04 85 50 0c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf3b0]
c00140d2:	ff e0                	jmp    eax
c00140d4:	b8 00 00 00 00       	mov    eax,0x0
c00140d9:	e9 ce 00 00 00       	jmp    c00141ac <ipaddr_aton+0x32c>
c00140de:	66 90                	xchg   ax,ax
c00140e0:	81 7c 24 1c ff ff ff 00 	cmp    DWORD PTR [esp+0x1c],0xffffff
c00140e8:	76 0a                	jbe    c00140f4 <ipaddr_aton+0x274>
c00140ea:	b8 00 00 00 00       	mov    eax,0x0
c00140ef:	e9 b8 00 00 00       	jmp    c00141ac <ipaddr_aton+0x32c>
c00140f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00140f8:	c1 e0 18             	shl    eax,0x18
c00140fb:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c00140ff:	e9 80 00 00 00       	jmp    c0014184 <ipaddr_aton+0x304>
c0014104:	81 7c 24 1c ff ff 00 00 	cmp    DWORD PTR [esp+0x1c],0xffff
c001410c:	76 0a                	jbe    c0014118 <ipaddr_aton+0x298>
c001410e:	b8 00 00 00 00       	mov    eax,0x0
c0014113:	e9 94 00 00 00       	jmp    c00141ac <ipaddr_aton+0x32c>
c0014118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001411c:	c1 e0 18             	shl    eax,0x18
c001411f:	89 c2                	mov    edx,eax
c0014121:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014125:	c1 e0 10             	shl    eax,0x10
c0014128:	09 d0                	or     eax,edx
c001412a:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c001412e:	eb 54                	jmp    c0014184 <ipaddr_aton+0x304>
c0014130:	81 7c 24 1c ff 00 00 00 	cmp    DWORD PTR [esp+0x1c],0xff
c0014138:	76 0a                	jbe    c0014144 <ipaddr_aton+0x2c4>
c001413a:	b8 00 00 00 00       	mov    eax,0x0
c001413f:	eb 6b                	jmp    c00141ac <ipaddr_aton+0x32c>
c0014141:	8d 76 00             	lea    esi,[esi+0x0]
c0014144:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014148:	c1 e0 18             	shl    eax,0x18
c001414b:	89 c2                	mov    edx,eax
c001414d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014151:	c1 e0 10             	shl    eax,0x10
c0014154:	09 c2                	or     edx,eax
c0014156:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001415a:	c1 e0 08             	shl    eax,0x8
c001415d:	09 d0                	or     eax,edx
c001415f:	09 44 24 1c          	or     DWORD PTR [esp+0x1c],eax
c0014163:	eb 1f                	jmp    c0014184 <ipaddr_aton+0x304>
c0014165:	8d 76 00             	lea    esi,[esi+0x0]
c0014168:	83 ec 08             	sub    esp,0x8
c001416b:	68 45 0c 03 c0       	push   0xc0030c45
c0014170:	68 66 f9 02 c0       	push   0xc002f966
c0014175:	e8 5a b9 00 00       	call   c001fad4 <CPrintf>
c001417a:	83 c4 10             	add    esp,0x10
c001417d:	eb 05                	jmp    c0014184 <ipaddr_aton+0x304>
c001417f:	90                   	nop
c0014180:	90                   	nop
c0014181:	8d 76 00             	lea    esi,[esi+0x0]
c0014184:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0014189:	74 19                	je     c00141a4 <ipaddr_aton+0x324>
c001418b:	83 ec 0c             	sub    esp,0xc
c001418e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014192:	e8 75 ca fe ff       	call   c0000c0c <LWIP_PLATFORM_HTONL>
c0014197:	83 c4 10             	add    esp,0x10
c001419a:	89 c2                	mov    edx,eax
c001419c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00141a0:	89 10                	mov    DWORD PTR [eax],edx
c00141a2:	66 90                	xchg   ax,ax
c00141a4:	b8 01 00 00 00       	mov    eax,0x1
c00141a9:	8d 76 00             	lea    esi,[esi+0x0]
c00141ac:	83 c4 2c             	add    esp,0x2c
c00141af:	c3                   	ret    

c00141b0 <ipaddr_addr>:
c00141b0:	83 ec 1c             	sub    esp,0x1c
c00141b3:	83 ec 08             	sub    esp,0x8
c00141b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00141ba:	50                   	push   eax
c00141bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141bf:	e8 bc fc ff ff       	call   c0013e80 <ipaddr_aton>
c00141c4:	83 c4 10             	add    esp,0x10
c00141c7:	85 c0                	test   eax,eax
c00141c9:	74 09                	je     c00141d4 <ipaddr_addr+0x24>
c00141cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141cf:	eb 0b                	jmp    c00141dc <ipaddr_addr+0x2c>
c00141d1:	8d 76 00             	lea    esi,[esi+0x0]
c00141d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00141d9:	8d 76 00             	lea    esi,[esi+0x0]
c00141dc:	83 c4 1c             	add    esp,0x1c
c00141df:	c3                   	ret    

c00141e0 <ipaddr_ntoa_r>:
c00141e0:	83 ec 20             	sub    esp,0x20
c00141e3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00141eb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00141f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141f5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00141fd:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014201:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014205:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001420a:	e9 f9 00 00 00       	jmp    c0014308 <ipaddr_ntoa_r+0x128>
c001420f:	90                   	nop
c0014210:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0014215:	8d 76 00             	lea    esi,[esi+0x0]
c0014218:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001421c:	8a 00                	mov    al,BYTE PTR [eax]
c001421e:	0f b6 c8             	movzx  ecx,al
c0014221:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0014226:	89 c8                	mov    eax,ecx
c0014228:	f7 e2                	mul    edx
c001422a:	c1 ea 03             	shr    edx,0x3
c001422d:	89 d0                	mov    eax,edx
c001422f:	c1 e0 02             	shl    eax,0x2
c0014232:	01 d0                	add    eax,edx
c0014234:	01 c0                	add    eax,eax
c0014236:	29 c1                	sub    ecx,eax
c0014238:	89 c8                	mov    eax,ecx
c001423a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001423e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014242:	8a 00                	mov    al,BYTE PTR [eax]
c0014244:	0f b6 c0             	movzx  eax,al
c0014247:	ba cd cc cc cc       	mov    edx,0xcccccccd
c001424c:	f7 e2                	mul    edx
c001424e:	89 d0                	mov    eax,edx
c0014250:	c1 e8 03             	shr    eax,0x3
c0014253:	88 c2                	mov    dl,al
c0014255:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014259:	88 10                	mov    BYTE PTR [eax],dl
c001425b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001425f:	83 c0 30             	add    eax,0x30
c0014262:	88 c1                	mov    cl,al
c0014264:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c0014268:	8d 50 01             	lea    edx,[eax+0x1]
c001426b:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c001426f:	0f b6 c0             	movzx  eax,al
c0014272:	88 ca                	mov    dl,cl
c0014274:	88 54 04 05          	mov    BYTE PTR [esp+eax*1+0x5],dl
c0014278:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001427c:	8a 00                	mov    al,BYTE PTR [eax]
c001427e:	0f b6 c0             	movzx  eax,al
c0014281:	85 c0                	test   eax,eax
c0014283:	75 93                	jne    c0014218 <ipaddr_ntoa_r+0x38>
c0014285:	eb 35                	jmp    c00142bc <ipaddr_ntoa_r+0xdc>
c0014287:	90                   	nop
c0014288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001428c:	8d 50 01             	lea    edx,[eax+0x1]
c001428f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014293:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0014297:	7f 0b                	jg     c00142a4 <ipaddr_ntoa_r+0xc4>
c0014299:	b8 00 00 00 00       	mov    eax,0x0
c001429e:	e9 85 00 00 00       	jmp    c0014328 <ipaddr_ntoa_r+0x148>
c00142a3:	90                   	nop
c00142a4:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00142a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142ad:	8d 48 01             	lea    ecx,[eax+0x1]
c00142b0:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00142b4:	8a 54 14 05          	mov    dl,BYTE PTR [esp+edx*1+0x5]
c00142b8:	88 10                	mov    BYTE PTR [eax],dl
c00142ba:	66 90                	xchg   ax,ax
c00142bc:	8a 44 24 16          	mov    al,BYTE PTR [esp+0x16]
c00142c0:	8d 50 ff             	lea    edx,[eax-0x1]
c00142c3:	88 54 24 16          	mov    BYTE PTR [esp+0x16],dl
c00142c7:	0f b6 c0             	movzx  eax,al
c00142ca:	85 c0                	test   eax,eax
c00142cc:	75 ba                	jne    c0014288 <ipaddr_ntoa_r+0xa8>
c00142ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142d2:	8d 50 01             	lea    edx,[eax+0x1]
c00142d5:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142d9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00142dd:	7f 09                	jg     c00142e8 <ipaddr_ntoa_r+0x108>
c00142df:	b8 00 00 00 00       	mov    eax,0x0
c00142e4:	eb 42                	jmp    c0014328 <ipaddr_ntoa_r+0x148>
c00142e6:	66 90                	xchg   ax,ax
c00142e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00142ec:	8d 50 01             	lea    edx,[eax+0x1]
c00142ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00142f3:	c6 00 2e             	mov    BYTE PTR [eax],0x2e
c00142f6:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00142fb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00142ff:	83 c0 01             	add    eax,0x1
c0014302:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0014306:	66 90                	xchg   ax,ax
c0014308:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c001430d:	83 f8 03             	cmp    eax,0x3
c0014310:	0f 86 fa fe ff ff    	jbe    c0014210 <ipaddr_ntoa_r+0x30>
c0014316:	83 6c 24 1c 01       	sub    DWORD PTR [esp+0x1c],0x1
c001431b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001431f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014322:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014326:	66 90                	xchg   ax,ax
c0014328:	83 c4 20             	add    esp,0x20
c001432b:	c3                   	ret    

c001432c <ipaddr_ntoa>:
c001432c:	6a 10                	push   0x10
c001432e:	68 a4 a9 03 c0       	push   0xc003a9a4
c0014333:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014337:	e8 a4 fe ff ff       	call   c00141e0 <ipaddr_ntoa_r>
c001433c:	83 c4 0c             	add    esp,0xc
c001433f:	c3                   	ret    

c0014340 <ip_reass_dequeue_datagram>:
c0014340:	83 ec 0c             	sub    esp,0xc
c0014343:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014348:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c001434c:	75 0e                	jne    c001435c <ip_reass_dequeue_datagram+0x1c>
c001434e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014352:	8b 00                	mov    eax,DWORD PTR [eax]
c0014354:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c0014359:	eb 29                	jmp    c0014384 <ip_reass_dequeue_datagram+0x44>
c001435b:	90                   	nop
c001435c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014361:	75 15                	jne    c0014378 <ip_reass_dequeue_datagram+0x38>
c0014363:	83 ec 08             	sub    esp,0x8
c0014366:	68 6c 0c 03 c0       	push   0xc0030c6c
c001436b:	68 66 f9 02 c0       	push   0xc002f966
c0014370:	e8 5f b7 00 00       	call   c001fad4 <CPrintf>
c0014375:	83 c4 10             	add    esp,0x10
c0014378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001437c:	8b 10                	mov    edx,DWORD PTR [eax]
c001437e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014382:	89 10                	mov    DWORD PTR [eax],edx
c0014384:	83 ec 08             	sub    esp,0x8
c0014387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001438b:	6a 05                	push   0x5
c001438d:	e8 52 36 ff ff       	call   c00079e4 <memp_free>
c0014392:	83 c4 10             	add    esp,0x10
c0014395:	90                   	nop
c0014396:	83 c4 0c             	add    esp,0xc
c0014399:	c3                   	ret    
c001439a:	66 90                	xchg   ax,ax

c001439c <ip_reass_free_complete_datagram>:
c001439c:	83 ec 2c             	sub    esp,0x2c
c001439f:	66 c7 44 24 1e 00 00 	mov    WORD PTR [esp+0x1e],0x0
c00143a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143aa:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00143ae:	75 18                	jne    c00143c8 <ip_reass_free_complete_datagram+0x2c>
c00143b0:	83 ec 08             	sub    esp,0x8
c00143b3:	68 85 0c 03 c0       	push   0xc0030c85
c00143b8:	68 66 f9 02 c0       	push   0xc002f966
c00143bd:	e8 12 b7 00 00       	call   c001fad4 <CPrintf>
c00143c2:	83 c4 10             	add    esp,0x10
c00143c5:	8d 76 00             	lea    esi,[esi+0x0]
c00143c8:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00143cd:	74 21                	je     c00143f0 <ip_reass_free_complete_datagram+0x54>
c00143cf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00143d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00143d5:	39 44 24 30          	cmp    DWORD PTR [esp+0x30],eax
c00143d9:	74 15                	je     c00143f0 <ip_reass_free_complete_datagram+0x54>
c00143db:	83 ec 08             	sub    esp,0x8
c00143de:	68 91 0c 03 c0       	push   0xc0030c91
c00143e3:	68 66 f9 02 c0       	push   0xc002f966
c00143e8:	e8 e7 b6 00 00       	call   c001fad4 <CPrintf>
c00143ed:	83 c4 10             	add    esp,0x10
c00143f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00143f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00143f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00143fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014402:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014406:	0f b7 c0             	movzx  eax,ax
c0014409:	85 c0                	test   eax,eax
c001440b:	0f 85 a3 00 00 00    	jne    c00144b4 <ip_reass_free_complete_datagram+0x118>
c0014411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014415:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014418:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001441c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014420:	8b 10                	mov    edx,DWORD PTR [eax]
c0014422:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014426:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014429:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001442d:	8d 50 08             	lea    edx,[eax+0x8]
c0014430:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014434:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014437:	83 ec 04             	sub    esp,0x4
c001443a:	6a 14                	push   0x14
c001443c:	52                   	push   edx
c001443d:	50                   	push   eax
c001443e:	e8 37 bf fe ff       	call   c000037a <memcpy>
c0014443:	83 c4 10             	add    esp,0x10
c0014446:	83 ec 08             	sub    esp,0x8
c0014449:	6a 01                	push   0x1
c001444b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001444f:	e8 4c eb ff ff       	call   c0012fa0 <icmp_time_exceeded>
c0014454:	83 c4 10             	add    esp,0x10
c0014457:	83 ec 0c             	sub    esp,0xc
c001445a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001445e:	e8 11 46 ff ff       	call   c0008a74 <pbuf_clen>
c0014463:	83 c4 10             	add    esp,0x10
c0014466:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001446a:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c001446f:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014474:	01 d0                	add    eax,edx
c0014476:	3d ff ff 00 00       	cmp    eax,0xffff
c001447b:	7e 17                	jle    c0014494 <ip_reass_free_complete_datagram+0xf8>
c001447d:	83 ec 08             	sub    esp,0x8
c0014480:	68 a3 0c 03 c0       	push   0xc0030ca3
c0014485:	68 66 f9 02 c0       	push   0xc002f966
c001448a:	e8 45 b6 00 00       	call   c001fad4 <CPrintf>
c001448f:	83 c4 10             	add    esp,0x10
c0014492:	66 90                	xchg   ax,ax
c0014494:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014499:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c001449e:	01 d0                	add    eax,edx
c00144a0:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c00144a5:	83 ec 0c             	sub    esp,0xc
c00144a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144ac:	e8 ef 3d ff ff       	call   c00082a0 <pbuf_free>
c00144b1:	83 c4 10             	add    esp,0x10
c00144b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00144b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144bf:	eb 7b                	jmp    c001453c <ip_reass_free_complete_datagram+0x1a0>
c00144c1:	8d 76 00             	lea    esi,[esi+0x0]
c00144c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00144cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00144d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00144d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00144db:	8b 00                	mov    eax,DWORD PTR [eax]
c00144dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144e1:	83 ec 0c             	sub    esp,0xc
c00144e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144e8:	e8 87 45 ff ff       	call   c0008a74 <pbuf_clen>
c00144ed:	83 c4 10             	add    esp,0x10
c00144f0:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00144f4:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c00144f9:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c00144fe:	01 d0                	add    eax,edx
c0014500:	3d ff ff 00 00       	cmp    eax,0xffff
c0014505:	7e 15                	jle    c001451c <ip_reass_free_complete_datagram+0x180>
c0014507:	83 ec 08             	sub    esp,0x8
c001450a:	68 a3 0c 03 c0       	push   0xc0030ca3
c001450f:	68 66 f9 02 c0       	push   0xc002f966
c0014514:	e8 bb b5 00 00       	call   c001fad4 <CPrintf>
c0014519:	83 c4 10             	add    esp,0x10
c001451c:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c0014521:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
c0014526:	01 d0                	add    eax,edx
c0014528:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001452d:	83 ec 0c             	sub    esp,0xc
c0014530:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014534:	e8 67 3d ff ff       	call   c00082a0 <pbuf_free>
c0014539:	83 c4 10             	add    esp,0x10
c001453c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014541:	75 81                	jne    c00144c4 <ip_reass_free_complete_datagram+0x128>
c0014543:	83 ec 08             	sub    esp,0x8
c0014546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001454a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001454e:	e8 ed fd ff ff       	call   c0014340 <ip_reass_dequeue_datagram>
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c001455c:	0f b7 54 24 1e       	movzx  edx,WORD PTR [esp+0x1e]
c0014561:	0f b7 c0             	movzx  eax,ax
c0014564:	39 c2                	cmp    edx,eax
c0014566:	76 18                	jbe    c0014580 <ip_reass_free_complete_datagram+0x1e4>
c0014568:	83 ec 08             	sub    esp,0x8
c001456b:	68 c0 0c 03 c0       	push   0xc0030cc0
c0014570:	68 66 f9 02 c0       	push   0xc002f966
c0014575:	e8 5a b5 00 00       	call   c001fad4 <CPrintf>
c001457a:	83 c4 10             	add    esp,0x10
c001457d:	8d 76 00             	lea    esi,[esi+0x0]
c0014580:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014587:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001458c:	89 d1                	mov    ecx,edx
c001458e:	29 c1                	sub    ecx,eax
c0014590:	89 c8                	mov    eax,ecx
c0014592:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014598:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001459d:	83 c4 2c             	add    esp,0x2c
c00145a0:	c3                   	ret    
c00145a1:	8d 76 00             	lea    esi,[esi+0x0]

c00145a4 <ip_reass_tmr>:
c00145a4:	83 ec 1c             	sub    esp,0x1c
c00145a7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145af:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c00145b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145b8:	eb 62                	jmp    c001461c <ip_reass_tmr+0x78>
c00145ba:	66 90                	xchg   ax,ax
c00145bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145c0:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00145c3:	0f b6 c0             	movzx  eax,al
c00145c6:	85 c0                	test   eax,eax
c00145c8:	74 2a                	je     c00145f4 <ip_reass_tmr+0x50>
c00145ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145ce:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00145d1:	83 e8 01             	sub    eax,0x1
c00145d4:	88 c2                	mov    dl,al
c00145d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145da:	88 50 1f             	mov    BYTE PTR [eax+0x1f],dl
c00145dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00145e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00145eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145ef:	eb 2b                	jmp    c001461c <ip_reass_tmr+0x78>
c00145f1:	8d 76 00             	lea    esi,[esi+0x0]
c00145f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00145f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014600:	8b 00                	mov    eax,DWORD PTR [eax]
c0014602:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014606:	83 ec 08             	sub    esp,0x8
c0014609:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001460d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014611:	e8 86 fd ff ff       	call   c001439c <ip_reass_free_complete_datagram>
c0014616:	83 c4 10             	add    esp,0x10
c0014619:	8d 76 00             	lea    esi,[esi+0x0]
c001461c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014621:	75 99                	jne    c00145bc <ip_reass_tmr+0x18>
c0014623:	90                   	nop
c0014624:	83 c4 1c             	add    esp,0x1c
c0014627:	c3                   	ret    

c0014628 <ip_reass_remove_oldest_datagram>:
c0014628:	83 ec 2c             	sub    esp,0x2c
c001462b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014633:	90                   	nop
c0014634:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001463c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014644:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001464c:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014651:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014655:	e9 9a 00 00 00       	jmp    c00146f4 <ip_reass_remove_oldest_datagram+0xcc>
c001465a:	66 90                	xchg   ax,ax
c001465c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014660:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014663:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014667:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001466a:	39 c2                	cmp    edx,eax
c001466c:	75 2e                	jne    c001469c <ip_reass_remove_oldest_datagram+0x74>
c001466e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014672:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014675:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014679:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001467c:	39 c2                	cmp    edx,eax
c001467e:	75 1c                	jne    c001469c <ip_reass_remove_oldest_datagram+0x74>
c0014680:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014684:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014687:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001468b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001468f:	0f b7 d2             	movzx  edx,dx
c0014692:	0f b7 c0             	movzx  eax,ax
c0014695:	39 c2                	cmp    edx,eax
c0014697:	74 3b                	je     c00146d4 <ip_reass_remove_oldest_datagram+0xac>
c0014699:	8d 76 00             	lea    esi,[esi+0x0]
c001469c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00146a1:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00146a6:	75 0c                	jne    c00146b4 <ip_reass_remove_oldest_datagram+0x8c>
c00146a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146b0:	eb 22                	jmp    c00146d4 <ip_reass_remove_oldest_datagram+0xac>
c00146b2:	66 90                	xchg   ax,ax
c00146b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146b8:	8a 50 1f             	mov    dl,BYTE PTR [eax+0x1f]
c00146bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00146bf:	8a 40 1f             	mov    al,BYTE PTR [eax+0x1f]
c00146c2:	0f b6 d2             	movzx  edx,dl
c00146c5:	0f b6 c0             	movzx  eax,al
c00146c8:	39 c2                	cmp    edx,eax
c00146ca:	77 08                	ja     c00146d4 <ip_reass_remove_oldest_datagram+0xac>
c00146cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00146da:	85 c0                	test   eax,eax
c00146dc:	74 0a                	je     c00146e8 <ip_reass_remove_oldest_datagram+0xc0>
c00146de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00146e6:	66 90                	xchg   ax,ax
c00146e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00146ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00146ee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00146f2:	66 90                	xchg   ax,ax
c00146f4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00146f9:	0f 85 5d ff ff ff    	jne    c001465c <ip_reass_remove_oldest_datagram+0x34>
c00146ff:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014704:	74 22                	je     c0014728 <ip_reass_remove_oldest_datagram+0x100>
c0014706:	83 ec 08             	sub    esp,0x8
c0014709:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001470d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014711:	e8 86 fc ff ff       	call   c001439c <ip_reass_free_complete_datagram>
c0014716:	83 c4 10             	add    esp,0x10
c0014719:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001471d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014721:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0014725:	8d 76 00             	lea    esi,[esi+0x0]
c0014728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0014730:	7d 0e                	jge    c0014740 <ip_reass_remove_oldest_datagram+0x118>
c0014732:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
c0014737:	0f 8f f7 fe ff ff    	jg     c0014634 <ip_reass_remove_oldest_datagram+0xc>
c001473d:	8d 76 00             	lea    esi,[esi+0x0]
c0014740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014744:	83 c4 2c             	add    esp,0x2c
c0014747:	c3                   	ret    

c0014748 <ip_reass_enqueue_new_datagram>:
c0014748:	83 ec 1c             	sub    esp,0x1c
c001474b:	83 ec 0c             	sub    esp,0xc
c001474e:	6a 05                	push   0x5
c0014750:	e8 63 31 ff ff       	call   c00078b8 <memp_malloc>
c0014755:	83 c4 10             	add    esp,0x10
c0014758:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001475c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014761:	75 4d                	jne    c00147b0 <ip_reass_enqueue_new_datagram+0x68>
c0014763:	83 ec 08             	sub    esp,0x8
c0014766:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001476a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001476e:	e8 b5 fe ff ff       	call   c0014628 <ip_reass_remove_oldest_datagram>
c0014773:	83 c4 10             	add    esp,0x10
c0014776:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c001477a:	7f 14                	jg     c0014790 <ip_reass_enqueue_new_datagram+0x48>
c001477c:	83 ec 0c             	sub    esp,0xc
c001477f:	6a 05                	push   0x5
c0014781:	e8 32 31 ff ff       	call   c00078b8 <memp_malloc>
c0014786:	83 c4 10             	add    esp,0x10
c0014789:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001478d:	8d 76 00             	lea    esi,[esi+0x0]
c0014790:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014795:	75 19                	jne    c00147b0 <ip_reass_enqueue_new_datagram+0x68>
c0014797:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c001479d:	83 c0 01             	add    eax,0x1
c00147a0:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c00147a6:	b8 00 00 00 00       	mov    eax,0x0
c00147ab:	eb 53                	jmp    c0014800 <ip_reass_enqueue_new_datagram+0xb8>
c00147ad:	8d 76 00             	lea    esi,[esi+0x0]
c00147b0:	83 ec 04             	sub    esp,0x4
c00147b3:	6a 20                	push   0x20
c00147b5:	6a 00                	push   0x0
c00147b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147bb:	e8 30 bd fe ff       	call   c00004f0 <memset>
c00147c0:	83 c4 10             	add    esp,0x10
c00147c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147c7:	c6 40 1f 03          	mov    BYTE PTR [eax+0x1f],0x3
c00147cb:	8b 15 b8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9b8
c00147d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147d5:	89 10                	mov    DWORD PTR [eax],edx
c00147d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147db:	a3 b8 a9 03 c0       	mov    ds:0xc003a9b8,eax
c00147e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147e4:	83 c0 08             	add    eax,0x8
c00147e7:	83 ec 04             	sub    esp,0x4
c00147ea:	6a 14                	push   0x14
c00147ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00147f0:	50                   	push   eax
c00147f1:	e8 84 bb fe ff       	call   c000037a <memcpy>
c00147f6:	83 c4 10             	add    esp,0x10
c00147f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00147fd:	8d 76 00             	lea    esi,[esi+0x0]
c0014800:	83 c4 1c             	add    esp,0x1c
c0014803:	c3                   	ret    

c0014804 <ip_reass_chain_frag_into_datagram_and_validate>:
c0014804:	53                   	push   ebx
c0014805:	83 ec 28             	sub    esp,0x28
c0014808:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014810:	c7 44 24 10 01 00 00 00 	mov    DWORD PTR [esp+0x10],0x1
c0014818:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001481c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001481f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014823:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014827:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c001482b:	0f b7 c0             	movzx  eax,ax
c001482e:	83 ec 0c             	sub    esp,0xc
c0014831:	50                   	push   eax
c0014832:	e8 b1 c3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014837:	83 c4 10             	add    esp,0x10
c001483a:	89 c3                	mov    ebx,eax
c001483c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014840:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014843:	0f b7 c0             	movzx  eax,ax
c0014846:	83 ec 0c             	sub    esp,0xc
c0014849:	50                   	push   eax
c001484a:	e8 99 c3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001484f:	83 c4 10             	add    esp,0x10
c0014852:	0f b7 c0             	movzx  eax,ax
c0014855:	c1 e8 08             	shr    eax,0x8
c0014858:	83 e0 0f             	and    eax,0xf
c001485b:	c1 e0 02             	shl    eax,0x2
c001485e:	89 d9                	mov    ecx,ebx
c0014860:	29 c1                	sub    ecx,eax
c0014862:	89 c8                	mov    eax,ecx
c0014864:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0014869:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001486d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014871:	0f b7 c0             	movzx  eax,ax
c0014874:	83 ec 0c             	sub    esp,0xc
c0014877:	50                   	push   eax
c0014878:	e8 6b c3 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c001487d:	83 c4 10             	add    esp,0x10
c0014880:	25 ff 1f 00 00       	and    eax,0x1fff
c0014885:	c1 e0 03             	shl    eax,0x3
c0014888:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001488d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014891:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014894:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014898:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001489c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00148a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00148a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148aa:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00148ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00148b2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00148b7:	01 d0                	add    eax,edx
c00148b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00148bd:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00148c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00148c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148cc:	e9 13 01 00 00       	jmp    c00149e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1e0>
c00148d1:	8d 76 00             	lea    esi,[esi+0x0]
c00148d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00148db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00148df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148e3:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c00148e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148eb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00148ef:	0f b7 d2             	movzx  edx,dx
c00148f2:	0f b7 c0             	movzx  eax,ax
c00148f5:	39 c2                	cmp    edx,eax
c00148f7:	73 6f                	jae    c0014968 <ip_reass_chain_frag_into_datagram_and_validate+0x164>
c00148f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00148fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014901:	89 10                	mov    DWORD PTR [eax],edx
c0014903:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014908:	74 4e                	je     c0014958 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
c001490a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001490e:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014912:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014916:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001491a:	0f b7 d2             	movzx  edx,dx
c001491d:	0f b7 c0             	movzx  eax,ax
c0014920:	39 c2                	cmp    edx,eax
c0014922:	0f 82 bc 02 00 00    	jb     c0014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014928:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001492c:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014934:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014938:	0f b7 d2             	movzx  edx,dx
c001493b:	0f b7 c0             	movzx  eax,ax
c001493e:	39 c2                	cmp    edx,eax
c0014940:	0f 87 9e 02 00 00    	ja     c0014be4 <ip_reass_chain_frag_into_datagram_and_validate+0x3e0>
c0014946:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001494a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001494e:	89 10                	mov    DWORD PTR [eax],edx
c0014950:	e9 9b 00 00 00       	jmp    c00149f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014955:	8d 76 00             	lea    esi,[esi+0x0]
c0014958:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001495c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014960:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014963:	e9 88 00 00 00       	jmp    c00149f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
c0014968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001496c:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c0014970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014974:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014978:	0f b7 d2             	movzx  edx,dx
c001497b:	0f b7 c0             	movzx  eax,ax
c001497e:	39 c2                	cmp    edx,eax
c0014980:	0f 84 62 02 00 00    	je     c0014be8 <ip_reass_chain_frag_into_datagram_and_validate+0x3e4>
c0014986:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001498a:	66 8b 50 04          	mov    dx,WORD PTR [eax+0x4]
c001498e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014992:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014996:	0f b7 d2             	movzx  edx,dx
c0014999:	0f b7 c0             	movzx  eax,ax
c001499c:	39 c2                	cmp    edx,eax
c001499e:	0f 82 48 02 00 00    	jb     c0014bec <ip_reass_chain_frag_into_datagram_and_validate+0x3e8>
c00149a4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00149a9:	74 25                	je     c00149d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c00149ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00149af:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00149b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149b7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149bb:	0f b7 d2             	movzx  edx,dx
c00149be:	0f b7 c0             	movzx  eax,ax
c00149c1:	39 c2                	cmp    edx,eax
c00149c3:	74 0b                	je     c00149d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1cc>
c00149c5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00149cd:	8d 76 00             	lea    esi,[esi+0x0]
c00149d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00149d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00149de:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149e2:	66 90                	xchg   ax,ax
c00149e4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00149e9:	0f 85 e5 fe ff ff    	jne    c00148d4 <ip_reass_chain_frag_into_datagram_and_validate+0xd0>
c00149ef:	90                   	nop
c00149f0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00149f5:	0f 85 95 00 00 00    	jne    c0014a90 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c00149fb:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014a00:	74 62                	je     c0014a64 <ip_reass_chain_frag_into_datagram_and_validate+0x260>
c0014a02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a06:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a0e:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a12:	0f b7 d2             	movzx  edx,dx
c0014a15:	0f b7 c0             	movzx  eax,ax
c0014a18:	39 c2                	cmp    edx,eax
c0014a1a:	76 18                	jbe    c0014a34 <ip_reass_chain_frag_into_datagram_and_validate+0x230>
c0014a1c:	83 ec 08             	sub    esp,0x8
c0014a1f:	68 db 0c 03 c0       	push   0xc0030cdb
c0014a24:	68 66 f9 02 c0       	push   0xc002f966
c0014a29:	e8 a6 b0 00 00       	call   c001fad4 <CPrintf>
c0014a2e:	83 c4 10             	add    esp,0x10
c0014a31:	8d 76 00             	lea    esi,[esi+0x0]
c0014a34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a38:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a3c:	89 10                	mov    DWORD PTR [eax],edx
c0014a3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a42:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014a46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a4a:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014a4e:	0f b7 d2             	movzx  edx,dx
c0014a51:	0f b7 c0             	movzx  eax,ax
c0014a54:	39 c2                	cmp    edx,eax
c0014a56:	74 38                	je     c0014a90 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014a58:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014a60:	eb 2e                	jmp    c0014a90 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
c0014a62:	66 90                	xchg   ax,ax
c0014a64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014a6b:	85 c0                	test   eax,eax
c0014a6d:	74 15                	je     c0014a84 <ip_reass_chain_frag_into_datagram_and_validate+0x280>
c0014a6f:	83 ec 08             	sub    esp,0x8
c0014a72:	68 1c 0d 03 c0       	push   0xc0030d1c
c0014a77:	68 66 f9 02 c0       	push   0xc002f966
c0014a7c:	e8 53 b0 00 00       	call   c001fad4 <CPrintf>
c0014a81:	83 c4 10             	add    esp,0x10
c0014a84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a88:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0014a8f:	90                   	nop
c0014a90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a94:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014a97:	0f b6 c0             	movzx  eax,al
c0014a9a:	83 e0 01             	and    eax,0x1
c0014a9d:	0f 84 39 01 00 00    	je     c0014bdc <ip_reass_chain_frag_into_datagram_and_validate+0x3d8>
c0014aa3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014aa8:	0f 84 26 01 00 00    	je     c0014bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014aae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ab2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ab5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014ab8:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014abc:	0f b7 c0             	movzx  eax,ax
c0014abf:	85 c0                	test   eax,eax
c0014ac1:	74 0d                	je     c0014ad0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>
c0014ac3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014acb:	e9 04 01 00 00       	jmp    c0014bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014ad0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ad4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ade:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014ae2:	eb 44                	jmp    c0014b28 <ip_reass_chain_frag_into_datagram_and_validate+0x324>
c0014ae4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014aeb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014aef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014af3:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014af7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014afb:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014aff:	0f b7 d2             	movzx  edx,dx
c0014b02:	0f b7 c0             	movzx  eax,ax
c0014b05:	39 c2                	cmp    edx,eax
c0014b07:	74 0b                	je     c0014b14 <ip_reass_chain_frag_into_datagram_and_validate+0x310>
c0014b09:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014b11:	eb 1d                	jmp    c0014b30 <ip_reass_chain_frag_into_datagram_and_validate+0x32c>
c0014b13:	90                   	nop
c0014b14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b26:	66 90                	xchg   ax,ax
c0014b28:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014b2d:	75 b5                	jne    c0014ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>
c0014b2f:	90                   	nop
c0014b30:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014b35:	0f 84 99 00 00 00    	je     c0014bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014b3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b42:	85 c0                	test   eax,eax
c0014b44:	75 16                	jne    c0014b5c <ip_reass_chain_frag_into_datagram_and_validate+0x358>
c0014b46:	83 ec 08             	sub    esp,0x8
c0014b49:	68 f9 0c 03 c0       	push   0xc0030cf9
c0014b4e:	68 66 f9 02 c0       	push   0xc002f966
c0014b53:	e8 7c af 00 00       	call   c001fad4 <CPrintf>
c0014b58:	83 c4 10             	add    esp,0x10
c0014b5b:	90                   	nop
c0014b5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014b60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b63:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014b66:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0014b6a:	75 18                	jne    c0014b84 <ip_reass_chain_frag_into_datagram_and_validate+0x380>
c0014b6c:	83 ec 08             	sub    esp,0x8
c0014b6f:	68 f9 0c 03 c0       	push   0xc0030cf9
c0014b74:	68 66 f9 02 c0       	push   0xc002f966
c0014b79:	e8 56 af 00 00       	call   c001fad4 <CPrintf>
c0014b7e:	83 c4 10             	add    esp,0x10
c0014b81:	8d 76 00             	lea    esi,[esi+0x0]
c0014b84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b88:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b8a:	85 c0                	test   eax,eax
c0014b8c:	74 16                	je     c0014ba4 <ip_reass_chain_frag_into_datagram_and_validate+0x3a0>
c0014b8e:	83 ec 08             	sub    esp,0x8
c0014b91:	68 54 0d 03 c0       	push   0xc0030d54
c0014b96:	68 66 f9 02 c0       	push   0xc002f966
c0014b9b:	e8 34 af 00 00       	call   c001fad4 <CPrintf>
c0014ba0:	83 c4 10             	add    esp,0x10
c0014ba3:	90                   	nop
c0014ba4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014ba8:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0014bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014bb0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014bb3:	0f b7 d2             	movzx  edx,dx
c0014bb6:	0f b7 c0             	movzx  eax,ax
c0014bb9:	39 c2                	cmp    edx,eax
c0014bbb:	74 17                	je     c0014bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x3d0>
c0014bbd:	83 ec 08             	sub    esp,0x8
c0014bc0:	68 78 0d 03 c0       	push   0xc0030d78
c0014bc5:	68 66 f9 02 c0       	push   0xc002f966
c0014bca:	e8 05 af 00 00       	call   c001fad4 <CPrintf>
c0014bcf:	83 c4 10             	add    esp,0x10
c0014bd2:	66 90                	xchg   ax,ax
c0014bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014bd8:	eb 52                	jmp    c0014c2c <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014bda:	66 90                	xchg   ax,ax
c0014bdc:	b8 00 00 00 00       	mov    eax,0x0
c0014be1:	eb 49                	jmp    c0014c2c <ip_reass_chain_frag_into_datagram_and_validate+0x428>
c0014be3:	90                   	nop
c0014be4:	90                   	nop
c0014be5:	eb 09                	jmp    c0014bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014be7:	90                   	nop
c0014be8:	90                   	nop
c0014be9:	eb 05                	jmp    c0014bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x3ec>
c0014beb:	90                   	nop
c0014bec:	90                   	nop
c0014bed:	8d 76 00             	lea    esi,[esi+0x0]
c0014bf0:	83 ec 0c             	sub    esp,0xc
c0014bf3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014bf7:	e8 78 3e ff ff       	call   c0008a74 <pbuf_clen>
c0014bfc:	83 c4 10             	add    esp,0x10
c0014bff:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014c06:	0f b6 c0             	movzx  eax,al
c0014c09:	89 d3                	mov    ebx,edx
c0014c0b:	29 c3                	sub    ebx,eax
c0014c0d:	89 d8                	mov    eax,ebx
c0014c0f:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014c15:	83 ec 0c             	sub    esp,0xc
c0014c18:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0014c1c:	e8 7f 36 ff ff       	call   c00082a0 <pbuf_free>
c0014c21:	83 c4 10             	add    esp,0x10
c0014c24:	b8 00 00 00 00       	mov    eax,0x0
c0014c29:	8d 76 00             	lea    esi,[esi+0x0]
c0014c2c:	83 c4 28             	add    esp,0x28
c0014c2f:	5b                   	pop    ebx
c0014c30:	c3                   	ret    
c0014c31:	8d 76 00             	lea    esi,[esi+0x0]

c0014c34 <ip_reass>:
c0014c34:	53                   	push   ebx
c0014c35:	83 ec 28             	sub    esp,0x28
c0014c38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c40:	66 a1 52 67 03 c0    	mov    ax,ds:0xc0036752
c0014c46:	83 c0 01             	add    eax,0x1
c0014c49:	66 a3 52 67 03 c0    	mov    ds:0xc0036752,ax
c0014c4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014c53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014c56:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c5e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014c61:	0f b7 c0             	movzx  eax,ax
c0014c64:	83 ec 0c             	sub    esp,0xc
c0014c67:	50                   	push   eax
c0014c68:	e8 7b bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014c6d:	83 c4 10             	add    esp,0x10
c0014c70:	0f b7 c0             	movzx  eax,ax
c0014c73:	c1 e8 08             	shr    eax,0x8
c0014c76:	0f b7 c0             	movzx  eax,ax
c0014c79:	83 e0 0f             	and    eax,0xf
c0014c7c:	c1 e0 02             	shl    eax,0x2
c0014c7f:	83 f8 14             	cmp    eax,0x14
c0014c82:	74 14                	je     c0014c98 <ip_reass+0x64>
c0014c84:	66 a1 64 67 03 c0    	mov    ax,ds:0xc0036764
c0014c8a:	83 c0 01             	add    eax,0x1
c0014c8d:	66 a3 64 67 03 c0    	mov    ds:0xc0036764,ax
c0014c93:	e9 68 03 00 00       	jmp    c0015000 <ip_reass+0x3cc>
c0014c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c9c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014ca0:	0f b7 c0             	movzx  eax,ax
c0014ca3:	83 ec 0c             	sub    esp,0xc
c0014ca6:	50                   	push   eax
c0014ca7:	e8 3c bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014cac:	83 c4 10             	add    esp,0x10
c0014caf:	25 ff 1f 00 00       	and    eax,0x1fff
c0014cb4:	c1 e0 03             	shl    eax,0x3
c0014cb7:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0014cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cc0:	66 8b 40 02          	mov    ax,WORD PTR [eax+0x2]
c0014cc4:	0f b7 c0             	movzx  eax,ax
c0014cc7:	83 ec 0c             	sub    esp,0xc
c0014cca:	50                   	push   eax
c0014ccb:	e8 18 bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014cd0:	83 c4 10             	add    esp,0x10
c0014cd3:	89 c3                	mov    ebx,eax
c0014cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014cd9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014cdc:	0f b7 c0             	movzx  eax,ax
c0014cdf:	83 ec 0c             	sub    esp,0xc
c0014ce2:	50                   	push   eax
c0014ce3:	e8 00 bf fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014ce8:	83 c4 10             	add    esp,0x10
c0014ceb:	0f b7 c0             	movzx  eax,ax
c0014cee:	c1 e8 08             	shr    eax,0x8
c0014cf1:	83 e0 0f             	and    eax,0xf
c0014cf4:	c1 e0 02             	shl    eax,0x2
c0014cf7:	89 d9                	mov    ecx,ebx
c0014cf9:	29 c1                	sub    ecx,eax
c0014cfb:	89 c8                	mov    eax,ecx
c0014cfd:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0014d02:	83 ec 0c             	sub    esp,0xc
c0014d05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014d09:	e8 66 3d ff ff       	call   c0008a74 <pbuf_clen>
c0014d0e:	83 c4 10             	add    esp,0x10
c0014d11:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0014d15:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014d1b:	0f b7 d0             	movzx  edx,ax
c0014d1e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014d23:	01 d0                	add    eax,edx
c0014d25:	83 f8 0a             	cmp    eax,0xa
c0014d28:	7e 42                	jle    c0014d6c <ip_reass+0x138>
c0014d2a:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014d2f:	83 ec 08             	sub    esp,0x8
c0014d32:	50                   	push   eax
c0014d33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d37:	e8 ec f8 ff ff       	call   c0014628 <ip_reass_remove_oldest_datagram>
c0014d3c:	83 c4 10             	add    esp,0x10
c0014d3f:	85 c0                	test   eax,eax
c0014d41:	74 15                	je     c0014d58 <ip_reass+0x124>
c0014d43:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014d49:	0f b7 d0             	movzx  edx,ax
c0014d4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014d51:	01 d0                	add    eax,edx
c0014d53:	83 f8 0a             	cmp    eax,0xa
c0014d56:	7e 14                	jle    c0014d6c <ip_reass+0x138>
c0014d58:	66 a1 5c 67 03 c0    	mov    ax,ds:0xc003675c
c0014d5e:	83 c0 01             	add    eax,0x1
c0014d61:	66 a3 5c 67 03 c0    	mov    ds:0xc003675c,ax
c0014d67:	e9 94 02 00 00       	jmp    c0015000 <ip_reass+0x3cc>
c0014d6c:	a1 b8 a9 03 c0       	mov    eax,ds:0xc003a9b8
c0014d71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d75:	eb 65                	jmp    c0014ddc <ip_reass+0x1a8>
c0014d77:	90                   	nop
c0014d78:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d7c:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
c0014d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d83:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0014d86:	39 c2                	cmp    edx,eax
c0014d88:	75 3e                	jne    c0014dc8 <ip_reass+0x194>
c0014d8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0014d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d95:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d98:	39 c2                	cmp    edx,eax
c0014d9a:	75 2c                	jne    c0014dc8 <ip_reass+0x194>
c0014d9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014da0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014da3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014da7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0014dab:	0f b7 d2             	movzx  edx,dx
c0014dae:	0f b7 c0             	movzx  eax,ax
c0014db1:	39 c2                	cmp    edx,eax
c0014db3:	75 13                	jne    c0014dc8 <ip_reass+0x194>
c0014db5:	66 a1 66 67 03 c0    	mov    ax,ds:0xc0036766
c0014dbb:	83 c0 01             	add    eax,0x1
c0014dbe:	66 a3 66 67 03 c0    	mov    ds:0xc0036766,ax
c0014dc4:	eb 1e                	jmp    c0014de4 <ip_reass+0x1b0>
c0014dc6:	66 90                	xchg   ax,ax
c0014dc8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dcc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014dd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014dd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0014dd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014dda:	66 90                	xchg   ax,ax
c0014ddc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014de1:	75 95                	jne    c0014d78 <ip_reass+0x144>
c0014de3:	90                   	nop
c0014de4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014de9:	75 25                	jne    c0014e10 <ip_reass+0x1dc>
c0014deb:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0014df0:	83 ec 08             	sub    esp,0x8
c0014df3:	50                   	push   eax
c0014df4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014df8:	e8 4b f9 ff ff       	call   c0014748 <ip_reass_enqueue_new_datagram>
c0014dfd:	83 c4 10             	add    esp,0x10
c0014e00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e04:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014e09:	75 61                	jne    c0014e6c <ip_reass+0x238>
c0014e0b:	e9 f0 01 00 00       	jmp    c0015000 <ip_reass+0x3cc>
c0014e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e14:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014e18:	0f b7 c0             	movzx  eax,ax
c0014e1b:	83 ec 0c             	sub    esp,0xc
c0014e1e:	50                   	push   eax
c0014e1f:	e8 c4 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014e24:	83 c4 10             	add    esp,0x10
c0014e27:	0f b7 c0             	movzx  eax,ax
c0014e2a:	25 ff 1f 00 00       	and    eax,0x1fff
c0014e2f:	75 3b                	jne    c0014e6c <ip_reass+0x238>
c0014e31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e35:	66 8b 40 0e          	mov    ax,WORD PTR [eax+0xe]
c0014e39:	0f b7 c0             	movzx  eax,ax
c0014e3c:	83 ec 0c             	sub    esp,0xc
c0014e3f:	50                   	push   eax
c0014e40:	e8 a3 bd fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014e45:	83 c4 10             	add    esp,0x10
c0014e48:	0f b7 c0             	movzx  eax,ax
c0014e4b:	25 ff 1f 00 00       	and    eax,0x1fff
c0014e50:	74 1a                	je     c0014e6c <ip_reass+0x238>
c0014e52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e56:	83 c0 08             	add    eax,0x8
c0014e59:	83 ec 04             	sub    esp,0x4
c0014e5c:	6a 14                	push   0x14
c0014e5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e62:	50                   	push   eax
c0014e63:	e8 12 b5 fe ff       	call   c000037a <memcpy>
c0014e68:	83 c4 10             	add    esp,0x10
c0014e6b:	90                   	nop
c0014e6c:	0f b6 54 24 0b       	movzx  edx,BYTE PTR [esp+0xb]
c0014e71:	66 a1 b4 a9 03 c0    	mov    ax,ds:0xc003a9b4
c0014e77:	01 d0                	add    eax,edx
c0014e79:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014e7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e83:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0014e87:	0f b7 c0             	movzx  eax,ax
c0014e8a:	83 e0 20             	and    eax,0x20
c0014e8d:	75 29                	jne    c0014eb8 <ip_reass+0x284>
c0014e8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e93:	8a 40 1e             	mov    al,BYTE PTR [eax+0x1e]
c0014e96:	83 c8 01             	or     eax,0x1
c0014e99:	88 c2                	mov    dl,al
c0014e9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e9f:	88 50 1e             	mov    BYTE PTR [eax+0x1e],dl
c0014ea2:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0014ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014eab:	01 d0                	add    eax,edx
c0014ead:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014eb1:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014eb5:	8d 76 00             	lea    esi,[esi+0x0]
c0014eb8:	83 ec 08             	sub    esp,0x8
c0014ebb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0014ebf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ec3:	e8 3c f9 ff ff       	call   c0014804 <ip_reass_chain_frag_into_datagram_and_validate>
c0014ec8:	83 c4 10             	add    esp,0x10
c0014ecb:	85 c0                	test   eax,eax
c0014ecd:	0f 84 25 01 00 00    	je     c0014ff8 <ip_reass+0x3c4>
c0014ed3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ed7:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014eda:	83 c0 14             	add    eax,0x14
c0014edd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ee1:	66 89 42 1c          	mov    WORD PTR [edx+0x1c],ax
c0014ee5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ee9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eef:	8b 00                	mov    eax,DWORD PTR [eax]
c0014ef1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ef5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ef9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014efc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014eff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f07:	83 c0 08             	add    eax,0x8
c0014f0a:	83 ec 04             	sub    esp,0x4
c0014f0d:	6a 14                	push   0x14
c0014f0f:	50                   	push   eax
c0014f10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f14:	e8 61 b4 fe ff       	call   c000037a <memcpy>
c0014f19:	83 c4 10             	add    esp,0x10
c0014f1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f20:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f23:	0f b7 c0             	movzx  eax,ax
c0014f26:	83 ec 0c             	sub    esp,0xc
c0014f29:	50                   	push   eax
c0014f2a:	e8 b9 bc fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0014f2f:	83 c4 10             	add    esp,0x10
c0014f32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f36:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0014f3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f3e:	66 c7 40 06 00 00    	mov    WORD PTR [eax+0x6],0x0
c0014f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f48:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0014f4e:	83 ec 08             	sub    esp,0x8
c0014f51:	6a 14                	push   0x14
c0014f53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f57:	e8 e0 e4 ff ff       	call   c001343c <inet_chksum>
c0014f5c:	83 c4 10             	add    esp,0x10
c0014f5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014f63:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0014f67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014f6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f6e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f72:	eb 3c                	jmp    c0014fb0 <ip_reass+0x37c>
c0014f74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014f78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014f7b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f7f:	83 ec 08             	sub    esp,0x8
c0014f82:	6a ec                	push   0xffffffec
c0014f84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014f88:	e8 77 31 ff ff       	call   c0008104 <pbuf_header>
c0014f8d:	83 c4 10             	add    esp,0x10
c0014f90:	83 ec 08             	sub    esp,0x8
c0014f93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014f97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014f9b:	e8 38 3b ff ff       	call   c0008ad8 <pbuf_cat>
c0014fa0:	83 c4 10             	add    esp,0x10
c0014fa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014fa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fa9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014fad:	8d 76 00             	lea    esi,[esi+0x0]
c0014fb0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0014fb5:	75 bd                	jne    c0014f74 <ip_reass+0x340>
c0014fb7:	83 ec 08             	sub    esp,0x8
c0014fba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fbe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014fc2:	e8 79 f3 ff ff       	call   c0014340 <ip_reass_dequeue_datagram>
c0014fc7:	83 c4 10             	add    esp,0x10
c0014fca:	83 ec 0c             	sub    esp,0xc
c0014fcd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0014fd1:	e8 9e 3a ff ff       	call   c0008a74 <pbuf_clen>
c0014fd6:	83 c4 10             	add    esp,0x10
c0014fd9:	66 8b 15 b4 a9 03 c0 	mov    dx,WORD PTR ds:0xc003a9b4
c0014fe0:	0f b6 c0             	movzx  eax,al
c0014fe3:	89 d3                	mov    ebx,edx
c0014fe5:	29 c3                	sub    ebx,eax
c0014fe7:	89 d8                	mov    eax,ebx
c0014fe9:	66 a3 b4 a9 03 c0    	mov    ds:0xc003a9b4,ax
c0014fef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014ff3:	eb 2f                	jmp    c0015024 <ip_reass+0x3f0>
c0014ff5:	8d 76 00             	lea    esi,[esi+0x0]
c0014ff8:	b8 00 00 00 00       	mov    eax,0x0
c0014ffd:	eb 25                	jmp    c0015024 <ip_reass+0x3f0>
c0014fff:	90                   	nop
c0015000:	66 a1 56 67 03 c0    	mov    ax,ds:0xc0036756
c0015006:	83 c0 01             	add    eax,0x1
c0015009:	66 a3 56 67 03 c0    	mov    ds:0xc0036756,ax
c001500f:	83 ec 0c             	sub    esp,0xc
c0015012:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015016:	e8 85 32 ff ff       	call   c00082a0 <pbuf_free>
c001501b:	83 c4 10             	add    esp,0x10
c001501e:	b8 00 00 00 00       	mov    eax,0x0
c0015023:	90                   	nop
c0015024:	83 c4 28             	add    esp,0x28
c0015027:	5b                   	pop    ebx
c0015028:	c3                   	ret    
c0015029:	8d 76 00             	lea    esi,[esi+0x0]

c001502c <ip_frag_alloc_pbuf_custom_ref>:
c001502c:	83 ec 0c             	sub    esp,0xc
c001502f:	83 ec 0c             	sub    esp,0xc
c0015032:	6a 06                	push   0x6
c0015034:	e8 7f 28 ff ff       	call   c00078b8 <memp_malloc>
c0015039:	83 c4 10             	add    esp,0x10
c001503c:	83 c4 0c             	add    esp,0xc
c001503f:	c3                   	ret    

c0015040 <ip_frag_free_pbuf_custom_ref>:
c0015040:	83 ec 0c             	sub    esp,0xc
c0015043:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0015048:	75 16                	jne    c0015060 <ip_frag_free_pbuf_custom_ref+0x20>
c001504a:	83 ec 08             	sub    esp,0x8
c001504d:	68 96 fd 02 c0       	push   0xc002fd96
c0015052:	68 66 f9 02 c0       	push   0xc002f966
c0015057:	e8 78 aa 00 00       	call   c001fad4 <CPrintf>
c001505c:	83 c4 10             	add    esp,0x10
c001505f:	90                   	nop
c0015060:	83 ec 08             	sub    esp,0x8
c0015063:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015067:	6a 06                	push   0x6
c0015069:	e8 76 29 ff ff       	call   c00079e4 <memp_free>
c001506e:	83 c4 10             	add    esp,0x10
c0015071:	90                   	nop
c0015072:	83 c4 0c             	add    esp,0xc
c0015075:	c3                   	ret    
c0015076:	66 90                	xchg   ax,ax

c0015078 <ipfrag_free_pbuf_custom>:
c0015078:	83 ec 1c             	sub    esp,0x1c
c001507b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001507f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015083:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015088:	75 16                	jne    c00150a0 <ipfrag_free_pbuf_custom+0x28>
c001508a:	83 ec 08             	sub    esp,0x8
c001508d:	68 06 0d 03 c0       	push   0xc0030d06
c0015092:	68 66 f9 02 c0       	push   0xc002f966
c0015097:	e8 38 aa 00 00       	call   c001fad4 <CPrintf>
c001509c:	83 c4 10             	add    esp,0x10
c001509f:	90                   	nop
c00150a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150a4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00150a8:	74 16                	je     c00150c0 <ipfrag_free_pbuf_custom+0x48>
c00150aa:	83 ec 08             	sub    esp,0x8
c00150ad:	68 12 0d 03 c0       	push   0xc0030d12
c00150b2:	68 66 f9 02 c0       	push   0xc002f966
c00150b7:	e8 18 aa 00 00       	call   c001fad4 <CPrintf>
c00150bc:	83 c4 10             	add    esp,0x10
c00150bf:	90                   	nop
c00150c0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00150c7:	85 c0                	test   eax,eax
c00150c9:	74 15                	je     c00150e0 <ipfrag_free_pbuf_custom+0x68>
c00150cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00150cf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00150d2:	83 ec 0c             	sub    esp,0xc
c00150d5:	50                   	push   eax
c00150d6:	e8 c5 31 ff ff       	call   c00082a0 <pbuf_free>
c00150db:	83 c4 10             	add    esp,0x10
c00150de:	66 90                	xchg   ax,ax
c00150e0:	83 ec 0c             	sub    esp,0xc
c00150e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00150e7:	e8 54 ff ff ff       	call   c0015040 <ip_frag_free_pbuf_custom_ref>
c00150ec:	83 c4 10             	add    esp,0x10
c00150ef:	90                   	nop
c00150f0:	83 c4 1c             	add    esp,0x1c
c00150f3:	c3                   	ret    

c00150f4 <ip_frag>:
c00150f4:	53                   	push   ebx
c00150f5:	83 ec 38             	sub    esp,0x38
c00150f8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00150fc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00150ff:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
c0015104:	66 c7 44 24 2a 14 00 	mov    WORD PTR [esp+0x2a],0x14
c001510b:	66 c7 44 24 26 00 00 	mov    WORD PTR [esp+0x26],0x0
c0015112:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015119:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001511d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015121:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015125:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015129:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c001512d:	0f b7 c0             	movzx  eax,ax
c0015130:	83 ec 0c             	sub    esp,0xc
c0015133:	50                   	push   eax
c0015134:	e8 af ba fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c0015139:	83 c4 10             	add    esp,0x10
c001513c:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c0015141:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015145:	25 ff 1f 00 00       	and    eax,0x1fff
c001514a:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001514f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015153:	25 00 20 00 00       	and    eax,0x2000
c0015158:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001515d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015161:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0015164:	83 e8 14             	sub    eax,0x14
c0015167:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001516c:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015171:	83 e8 14             	sub    eax,0x14
c0015174:	79 06                	jns    c001517c <ip_frag+0x88>
c0015176:	83 c0 07             	add    eax,0x7
c0015179:	8d 76 00             	lea    esi,[esi+0x0]
c001517c:	c1 f8 03             	sar    eax,0x3
c001517f:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c0015184:	e9 03 03 00 00       	jmp    c001548c <ip_frag+0x398>
c0015189:	8d 76 00             	lea    esi,[esi+0x0]
c001518c:	0f b7 44 24 22       	movzx  eax,WORD PTR [esp+0x22]
c0015191:	8d 50 ed             	lea    edx,[eax-0x13]
c0015194:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015199:	39 c2                	cmp    edx,eax
c001519b:	0f 9f c0             	setg   al
c001519e:	0f b6 c0             	movzx  eax,al
c00151a1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00151a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00151aa:	25 ff 1f 00 00       	and    eax,0x1fff
c00151af:	89 c2                	mov    edx,eax
c00151b1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00151b6:	09 d0                	or     eax,edx
c00151b8:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00151bd:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00151c2:	85 c0                	test   eax,eax
c00151c4:	75 0e                	jne    c00151d4 <ip_frag+0xe0>
c00151c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00151ca:	80 cc 20             	or     ah,0x20
c00151cd:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
c00151d2:	66 90                	xchg   ax,ax
c00151d4:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00151d9:	85 c0                	test   eax,eax
c00151db:	75 0b                	jne    c00151e8 <ip_frag+0xf4>
c00151dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00151e1:	c1 e0 03             	shl    eax,0x3
c00151e4:	eb 0a                	jmp    c00151f0 <ip_frag+0xfc>
c00151e6:	66 90                	xchg   ax,ax
c00151e8:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c00151ed:	8d 76 00             	lea    esi,[esi+0x0]
c00151f0:	66 89 44 24 10       	mov    WORD PTR [esp+0x10],ax
c00151f5:	83 ec 04             	sub    esp,0x4
c00151f8:	6a 00                	push   0x0
c00151fa:	6a 14                	push   0x14
c00151fc:	6a 02                	push   0x2
c00151fe:	e8 75 32 ff ff       	call   c0008478 <pbuf_alloc>
c0015203:	83 c4 10             	add    esp,0x10
c0015206:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001520a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001520f:	75 07                	jne    c0015218 <ip_frag+0x124>
c0015211:	b0 ff                	mov    al,0xff
c0015213:	e9 84 02 00 00       	jmp    c001549c <ip_frag+0x3a8>
c0015218:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001521c:	66 8b 40 0a          	mov    ax,WORD PTR [eax+0xa]
c0015220:	0f b7 c0             	movzx  eax,ax
c0015223:	83 f8 13             	cmp    eax,0x13
c0015226:	77 18                	ja     c0015240 <ip_frag+0x14c>
c0015228:	83 ec 08             	sub    esp,0x8
c001522b:	68 a8 0d 03 c0       	push   0xc0030da8
c0015230:	68 66 f9 02 c0       	push   0xc002f966
c0015235:	e8 9a a8 00 00       	call   c001fad4 <CPrintf>
c001523a:	83 c4 10             	add    esp,0x10
c001523d:	8d 76 00             	lea    esi,[esi+0x0]
c0015240:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015247:	83 ec 04             	sub    esp,0x4
c001524a:	6a 14                	push   0x14
c001524c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015250:	50                   	push   eax
c0015251:	e8 24 b1 fe ff       	call   c000037a <memcpy>
c0015256:	83 c4 10             	add    esp,0x10
c0015259:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001525d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0015260:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015264:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015268:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001526b:	0f b7 44 24 2a       	movzx  eax,WORD PTR [esp+0x2a]
c0015270:	01 c2                	add    edx,eax
c0015272:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015276:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0015279:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001527d:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c0015281:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c0015286:	89 d1                	mov    ecx,edx
c0015288:	29 c1                	sub    ecx,eax
c001528a:	89 c8                	mov    eax,ecx
c001528c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015290:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c0015294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015298:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c001529d:	e9 1a 01 00 00       	jmp    c00153bc <ip_frag+0x2c8>
c00152a2:	66 90                	xchg   ax,ax
c00152a4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152a8:	66 8b 50 0a          	mov    dx,WORD PTR [eax+0xa]
c00152ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00152b0:	0f b7 d8             	movzx  ebx,ax
c00152b3:	0f b7 ca             	movzx  ecx,dx
c00152b6:	39 cb                	cmp    ebx,ecx
c00152b8:	76 02                	jbe    c00152bc <ip_frag+0x1c8>
c00152ba:	89 d0                	mov    eax,edx
c00152bc:	66 89 44 24 26       	mov    WORD PTR [esp+0x26],ax
c00152c1:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c00152c6:	85 c0                	test   eax,eax
c00152c8:	75 12                	jne    c00152dc <ip_frag+0x1e8>
c00152ca:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00152ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00152d4:	e9 e3 00 00 00       	jmp    c00153bc <ip_frag+0x2c8>
c00152d9:	8d 76 00             	lea    esi,[esi+0x0]
c00152dc:	e8 4b fd ff ff       	call   c001502c <ip_frag_alloc_pbuf_custom_ref>
c00152e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152e5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00152ea:	75 18                	jne    c0015304 <ip_frag+0x210>
c00152ec:	83 ec 0c             	sub    esp,0xc
c00152ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152f3:	e8 a8 2f ff ff       	call   c00082a0 <pbuf_free>
c00152f8:	83 c4 10             	add    esp,0x10
c00152fb:	b0 ff                	mov    al,0xff
c00152fd:	e9 9a 01 00 00       	jmp    c001549c <ip_frag+0x3a8>
c0015302:	66 90                	xchg   ax,ax
c0015304:	0f b7 5c 24 26       	movzx  ebx,WORD PTR [esp+0x26]
c0015309:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001530d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015310:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015314:	0f b7 44 24 26       	movzx  eax,WORD PTR [esp+0x26]
c0015319:	83 ec 08             	sub    esp,0x8
c001531c:	53                   	push   ebx
c001531d:	51                   	push   ecx
c001531e:	52                   	push   edx
c001531f:	6a 02                	push   0x2
c0015321:	50                   	push   eax
c0015322:	6a 03                	push   0x3
c0015324:	e8 b7 2c ff ff       	call   c0007fe0 <pbuf_alloced_custom>
c0015329:	83 c4 20             	add    esp,0x20
c001532c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015330:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0015335:	75 25                	jne    c001535c <ip_frag+0x268>
c0015337:	83 ec 0c             	sub    esp,0xc
c001533a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001533e:	e8 fd fc ff ff       	call   c0015040 <ip_frag_free_pbuf_custom_ref>
c0015343:	83 c4 10             	add    esp,0x10
c0015346:	83 ec 0c             	sub    esp,0xc
c0015349:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001534d:	e8 4e 2f ff ff       	call   c00082a0 <pbuf_free>
c0015352:	83 c4 10             	add    esp,0x10
c0015355:	b0 ff                	mov    al,0xff
c0015357:	e9 40 01 00 00       	jmp    c001549c <ip_frag+0x3a8>
c001535c:	83 ec 0c             	sub    esp,0xc
c001535f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015363:	e8 40 37 ff ff       	call   c0008aa8 <pbuf_ref>
c0015368:	83 c4 10             	add    esp,0x10
c001536b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001536f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015373:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015376:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001537a:	c7 40 10 78 50 01 c0 	mov    DWORD PTR [eax+0x10],0xc0015078
c0015381:	83 ec 08             	sub    esp,0x8
c0015384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001538c:	e8 47 37 ff ff       	call   c0008ad8 <pbuf_cat>
c0015391:	83 c4 10             	add    esp,0x10
c0015394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015398:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c001539d:	89 d3                	mov    ebx,edx
c001539f:	29 c3                	sub    ebx,eax
c00153a1:	89 d8                	mov    eax,ebx
c00153a3:	66 89 44 24 24       	mov    WORD PTR [esp+0x24],ax
c00153a8:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00153ad:	85 c0                	test   eax,eax
c00153af:	74 0b                	je     c00153bc <ip_frag+0x2c8>
c00153b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00153b5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00153bb:	90                   	nop
c00153bc:	0f b7 44 24 24       	movzx  eax,WORD PTR [esp+0x24]
c00153c1:	85 c0                	test   eax,eax
c00153c3:	0f 85 db fe ff ff    	jne    c00152a4 <ip_frag+0x1b0>
c00153c9:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00153ce:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00153d3:	0f b7 44 24 28       	movzx  eax,WORD PTR [esp+0x28]
c00153d8:	83 ec 0c             	sub    esp,0xc
c00153db:	50                   	push   eax
c00153dc:	e8 07 b8 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00153e1:	83 c4 10             	add    esp,0x10
c00153e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00153e8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00153ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00153f0:	83 c0 14             	add    eax,0x14
c00153f3:	0f b7 c0             	movzx  eax,ax
c00153f6:	83 ec 0c             	sub    esp,0xc
c00153f9:	50                   	push   eax
c00153fa:	e8 e9 b7 fe ff       	call   c0000be8 <LWIP_PLATFORM_HTONS>
c00153ff:	83 c4 10             	add    esp,0x10
c0015402:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015406:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c001540a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001540e:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
c0015414:	83 ec 08             	sub    esp,0x8
c0015417:	6a 14                	push   0x14
c0015419:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001541d:	e8 1a e0 ff ff       	call   c001343c <inet_chksum>
c0015422:	83 c4 10             	add    esp,0x10
c0015425:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015429:	66 89 42 0a          	mov    WORD PTR [edx+0xa],ax
c001542d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0015431:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015434:	83 ec 04             	sub    esp,0x4
c0015437:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001543b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001543f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0015443:	ff d0                	call   eax
c0015445:	83 c4 10             	add    esp,0x10
c0015448:	66 a1 50 67 03 c0    	mov    ax,ds:0xc0036750
c001544e:	83 c0 01             	add    eax,0x1
c0015451:	66 a3 50 67 03 c0    	mov    ds:0xc0036750,ax
c0015457:	83 ec 0c             	sub    esp,0xc
c001545a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001545e:	e8 3d 2e ff ff       	call   c00082a0 <pbuf_free>
c0015463:	83 c4 10             	add    esp,0x10
c0015466:	66 8b 54 24 2e       	mov    dx,WORD PTR [esp+0x2e]
c001546b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001546f:	89 d1                	mov    ecx,edx
c0015471:	29 c1                	sub    ecx,eax
c0015473:	89 c8                	mov    eax,ecx
c0015475:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c001547a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001547e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015482:	01 d0                	add    eax,edx
c0015484:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0015489:	8d 76 00             	lea    esi,[esi+0x0]
c001548c:	0f b7 44 24 2e       	movzx  eax,WORD PTR [esp+0x2e]
c0015491:	85 c0                	test   eax,eax
c0015493:	0f 85 f3 fc ff ff    	jne    c001518c <ip_frag+0x98>
c0015499:	b0 00                	mov    al,0x0
c001549b:	90                   	nop
c001549c:	83 c4 38             	add    esp,0x38
c001549f:	5b                   	pop    ebx
c00154a0:	c3                   	ret    
c00154a1:	90                   	nop

c00154a2 <Computer::close(int, int, void*)>:
c00154a2:	53                   	push   ebx
c00154a3:	83 ec 08             	sub    esp,0x8
c00154a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00154aa:	e8 b5 a4 00 00       	call   c001f964 <KeExecuteAtexit()>
c00154af:	83 ec 0c             	sub    esp,0xc
c00154b2:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00154b8:	50                   	push   eax
c00154b9:	e8 b8 5f 00 00       	call   c001b476 <Device::closeAll()>
c00154be:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00154c4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00154c8:	8b 10                	mov    edx,DWORD PTR [eax]
c00154ca:	51                   	push   ecx
c00154cb:	68 0f 27 00 00       	push   0x270f
c00154d0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00154d4:	53                   	push   ebx
c00154d5:	50                   	push   eax
c00154d6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00154d9:	83 c4 14             	add    esp,0x14
c00154dc:	68 c8 0d 03 c0       	push   0xc0030dc8
c00154e1:	e8 c0 ac 00 00       	call   c00201a6 <KePanic(char const*)>
c00154e6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00154eb:	83 c4 18             	add    esp,0x18
c00154ee:	5b                   	pop    ebx
c00154ef:	c3                   	ret    

c00154f0 <Krnl::firstTask()>:
c00154f0:	53                   	push   ebx
c00154f1:	83 ec 14             	sub    esp,0x14
c00154f4:	fb                   	sti    
c00154f5:	68 de 0d 03 c0       	push   0xc0030dde
c00154fa:	e8 44 a5 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c00154ff:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0015506:	e8 f3 0d 00 00       	call   c00162fe <malloc>
c001550b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015512:	89 c3                	mov    ebx,eax
c0015514:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0015519:	50                   	push   eax
c001551a:	68 f7 0d 03 c0       	push   0xc0030df7
c001551f:	6a 01                	push   0x1
c0015521:	53                   	push   ebx
c0015522:	e8 e5 f7 00 00       	call   c0024d0c <Process::Process(bool, char const*, Process*, char**)>
c0015527:	83 c4 20             	add    esp,0x20
c001552a:	68 ff 00 00 00       	push   0xff
c001552f:	6a 00                	push   0x0
c0015531:	68 45 5d 01 c0       	push   0xc0015d45
c0015536:	53                   	push   ebx
c0015537:	e8 f8 f9 00 00       	call   c0024f34 <Process::createThread(void (*)(void*), void*, int)>
c001553c:	8b 15 f8 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401f8
c0015542:	6a 7a                	push   0x7a
c0015544:	6a 00                	push   0x0
c0015546:	68 fc 57 02 c0       	push   0xc00257fc
c001554b:	52                   	push   edx
c001554c:	e8 e3 f9 00 00       	call   c0024f34 <Process::createThread(void (*)(void*), void*, int)>
c0015551:	83 c4 14             	add    esp,0x14
c0015554:	a3 b0 01 04 c0       	mov    ds:0xc00401b0,eax
c0015559:	68 f4 0e 03 c0       	push   0xc0030ef4
c001555e:	e8 e0 a4 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c0015563:	c6 05 c1 a9 03 c0 01 	mov    BYTE PTR ds:0xc003a9c1,0x1
c001556a:	e8 f0 ad 00 00       	call   c002035f <KeInitRand()>
c001556f:	e8 1f 06 01 00       	call   c0025b93 <Vm::initialise8086()>
c0015574:	e8 f9 4a 00 00       	call   c001a072 <Fs::initVFS()>
c0015579:	c7 04 24 04 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e04
c0015580:	e8 be a4 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c0015585:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001558a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0015590:	8b 10                	mov    edx,DWORD PTR [eax]
c0015592:	6a 00                	push   0x0
c0015594:	6a 00                	push   0x0
c0015596:	6a 00                	push   0x0
c0015598:	50                   	push   eax
c0015599:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001559c:	83 c4 14             	add    esp,0x14
c001559f:	68 f4 0e 03 c0       	push   0xc0030ef4
c00155a4:	e8 9a a4 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c00155a9:	e8 5e 42 00 00       	call   c001980c <KeInitialiseSymlinks()>
c00155ae:	e8 3b aa 00 00       	call   c001ffee <KeLoadSystemEnv()>
c00155b3:	e8 b3 ac 00 00       	call   c002026b <KeSetupPowerManager()>
c00155b8:	83 c4 0c             	add    esp,0xc
c00155bb:	6a 3a                	push   0x3a
c00155bd:	68 1e 0e 03 c0       	push   0xc0030e1e
c00155c2:	68 27 0e 03 c0       	push   0xc0030e27
c00155c7:	e8 fa d8 00 00       	call   c0022ec6 <Reg::readIntWithDefault(char*, char*, int)>
c00155cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00155cf:	e8 b8 56 00 00       	call   c001ac8c <User::loadClockSettings(int)>
c00155d4:	c7 04 24 18 0f 03 c0 	mov    DWORD PTR [esp],0xc0030f18
c00155db:	e8 63 a4 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c00155e0:	59                   	pop    ecx
c00155e1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00155e6:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c00155ec:	53                   	push   ebx
c00155ed:	e8 38 5d 00 00       	call   c001b32a <Device::loadDriversForAll()>
c00155f2:	c7 04 24 2f 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e2f
c00155f9:	e8 45 a4 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c00155fe:	58                   	pop    eax
c00155ff:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c0015605:	5a                   	pop    edx
c0015606:	6a 01                	push   0x1
c0015608:	68 40 0e 03 c0       	push   0xc0030e40
c001560d:	e8 ef f0 00 00       	call   c0024701 <Thr::loadDLL(char const*, bool)>
c0015612:	59                   	pop    ecx
c0015613:	5a                   	pop    edx
c0015614:	53                   	push   ebx
c0015615:	50                   	push   eax
c0015616:	e8 38 f3 00 00       	call   c0024953 <Thr::executeDLL(unsigned long, void*)>
c001561b:	83 c4 10             	add    esp,0x10
c001561e:	83 ec 0c             	sub    esp,0xc
c0015621:	6a 02                	push   0x2
c0015623:	e8 18 fc 00 00       	call   c0025240 <blockTask(TaskState)>
c0015628:	83 c4 10             	add    esp,0x10
c001562b:	eb f1                	jmp    c001561e <Krnl::firstTask()+0x12e>
c001562d:	90                   	nop

c001562e <Computer::Computer()>:
c001562e:	83 ec 0c             	sub    esp,0xc
c0015631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015635:	83 ec 08             	sub    esp,0x8
c0015638:	68 5c 0e 03 c0       	push   0xc0030e5c
c001563d:	50                   	push   eax
c001563e:	e8 2d 5d 00 00       	call   c001b370 <Device::Device(char const*)>
c0015643:	83 c4 10             	add    esp,0x10
c0015646:	ba 64 0f 03 c0       	mov    edx,0xc0030f64
c001564b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001564f:	89 10                	mov    DWORD PTR [eax],edx
c0015651:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015655:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001565f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015663:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c001566d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015671:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0015677:	83 ca 04             	or     edx,0x4
c001567a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0015680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015684:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001568a:	0f b6 d0             	movzx  edx,al
c001568d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015691:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0015698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001569c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00156a2:	0f b6 d0             	movzx  edx,al
c00156a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156a9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00156ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156b2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00156b8:	8d 50 01             	lea    edx,[eax+0x1]
c00156bb:	88 d1                	mov    cl,dl
c00156bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156c1:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00156c7:	0f b6 d0             	movzx  edx,al
c00156ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156ce:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00156d2:	83 e1 3f             	and    ecx,0x3f
c00156d5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00156d9:	90                   	nop
c00156da:	83 c4 0c             	add    esp,0xc
c00156dd:	c3                   	ret    

c00156de <Computer::setBootMessage(char const*)>:
c00156de:	c3                   	ret    
c00156df:	90                   	nop

c00156e0 <Computer::detectFeatures()>:
c00156e0:	55                   	push   ebp
c00156e1:	57                   	push   edi
c00156e2:	56                   	push   esi
c00156e3:	53                   	push   ebx
c00156e4:	83 ec 1c             	sub    esp,0x1c
c00156e7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00156eb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00156f1:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c00156f7:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00156fd:	e8 f7 aa fe ff       	call   c00001f9 <detectCPUID>
c0015702:	31 d2                	xor    edx,edx
c0015704:	85 c0                	test   eax,eax
c0015706:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001570c:	0f 95 c2             	setne  dl
c001570f:	83 e0 fd             	and    eax,0xfffffffd
c0015712:	d1 e2                	shl    edx,1
c0015714:	09 d0                	or     eax,edx
c0015716:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001571c:	a8 02                	test   al,0x2
c001571e:	75 51                	jne    c0015771 <Computer::detectFeatures()+0x91>
c0015720:	f6 05 d5 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d5,0x4
c0015727:	74 0f                	je     c0015738 <Computer::detectFeatures()+0x58>
c0015729:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001572f:	83 e0 fb             	and    eax,0xfffffffb
c0015732:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015738:	e8 09 8b 01 00       	call   c002e246 <x87Detect>
c001573d:	83 e0 01             	and    eax,0x1
c0015740:	c1 e0 04             	shl    eax,0x4
c0015743:	89 c2                	mov    edx,eax
c0015745:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001574b:	83 e0 ef             	and    eax,0xffffffef
c001574e:	09 d0                	or     eax,edx
c0015750:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015756:	88 c2                	mov    dl,al
c0015758:	a8 10                	test   al,0x10
c001575a:	0f 85 33 01 00 00    	jne    c0015893 <Computer::detectFeatures()+0x1b3>
c0015760:	80 e2 80             	and    dl,0x80
c0015763:	0f 85 4c 01 00 00    	jne    c00158b5 <Computer::detectFeatures()+0x1d5>
c0015769:	83 c4 1c             	add    esp,0x1c
c001576c:	5b                   	pop    ebx
c001576d:	5e                   	pop    esi
c001576e:	5f                   	pop    edi
c001576f:	5d                   	pop    ebp
c0015770:	c3                   	ret    
c0015771:	83 ec 0c             	sub    esp,0xc
c0015774:	6a 20                	push   0x20
c0015776:	e8 01 97 00 00       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c001577b:	83 e0 01             	and    eax,0x1
c001577e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015785:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c001578b:	83 e0 f7             	and    eax,0xfffffff7
c001578e:	09 d0                	or     eax,edx
c0015790:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015796:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c001579d:	e8 da 96 00 00       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c00157a2:	89 c2                	mov    edx,eax
c00157a4:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00157aa:	83 e2 01             	and    edx,0x1
c00157ad:	83 e0 fe             	and    eax,0xfffffffe
c00157b0:	09 d0                	or     eax,edx
c00157b2:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00157b8:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c00157bf:	e8 b8 96 00 00       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c00157c4:	89 c2                	mov    edx,eax
c00157c6:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00157cc:	c1 e2 07             	shl    edx,0x7
c00157cf:	83 e0 7f             	and    eax,0x7f
c00157d2:	09 d0                	or     eax,edx
c00157d4:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00157da:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c00157e1:	e8 96 96 00 00       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c00157e6:	83 c4 10             	add    esp,0x10
c00157e9:	83 e0 01             	and    eax,0x1
c00157ec:	c1 e0 05             	shl    eax,0x5
c00157ef:	89 c2                	mov    edx,eax
c00157f1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00157f7:	83 e0 df             	and    eax,0xffffffdf
c00157fa:	09 d0                	or     eax,edx
c00157fc:	f7 05 d4 a9 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003a9d4,0x401
c0015806:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001580c:	0f 84 c9 00 00 00    	je     c00158db <Computer::detectFeatures()+0x1fb>
c0015812:	83 e0 fe             	and    eax,0xfffffffe
c0015815:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c001581b:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0015821:	89 c2                	mov    edx,eax
c0015823:	83 e2 09             	and    edx,0x9
c0015826:	83 fa 01             	cmp    edx,0x1
c0015829:	75 09                	jne    c0015834 <Computer::detectFeatures()+0x154>
c001582b:	83 e0 fe             	and    eax,0xfffffffe
c001582e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015834:	83 ec 0c             	sub    esp,0xc
c0015837:	8d 44 24 18          	lea    eax,[esp+0x18]
c001583b:	50                   	push   eax
c001583c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0015840:	55                   	push   ebp
c0015841:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0015845:	57                   	push   edi
c0015846:	8d 74 24 18          	lea    esi,[esp+0x18]
c001584a:	56                   	push   esi
c001584b:	68 00 00 00 80       	push   0x80000000
c0015850:	e8 a3 95 00 00       	call   c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0015855:	83 c4 20             	add    esp,0x20
c0015858:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c001585f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0015863:	0f 86 b7 fe ff ff    	jbe    c0015720 <Computer::detectFeatures()+0x40>
c0015869:	83 ec 0c             	sub    esp,0xc
c001586c:	50                   	push   eax
c001586d:	55                   	push   ebp
c001586e:	57                   	push   edi
c001586f:	56                   	push   esi
c0015870:	68 01 00 00 80       	push   0x80000001
c0015875:	e8 7e 95 00 00       	call   c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001587a:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0015880:	83 c4 20             	add    esp,0x20
c0015883:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0015888:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001588e:	e9 8d fe ff ff       	jmp    c0015720 <Computer::detectFeatures()+0x40>
c0015893:	e8 68 89 01 00       	call   c002e200 <sseDetect>
c0015898:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c001589e:	c1 e0 07             	shl    eax,0x7
c00158a1:	83 e2 7f             	and    edx,0x7f
c00158a4:	09 c2                	or     edx,eax
c00158a6:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c00158ac:	80 e2 80             	and    dl,0x80
c00158af:	0f 84 b4 fe ff ff    	je     c0015769 <Computer::detectFeatures()+0x89>
c00158b5:	e8 d6 85 01 00       	call   c002de90 <avxDetect>
c00158ba:	83 e0 01             	and    eax,0x1
c00158bd:	c1 e0 05             	shl    eax,0x5
c00158c0:	89 c2                	mov    edx,eax
c00158c2:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c00158c8:	83 e0 df             	and    eax,0xffffffdf
c00158cb:	09 d0                	or     eax,edx
c00158cd:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c00158d3:	83 c4 1c             	add    esp,0x1c
c00158d6:	5b                   	pop    ebx
c00158d7:	5e                   	pop    esi
c00158d8:	5f                   	pop    edi
c00158d9:	5d                   	pop    ebp
c00158da:	c3                   	ret    
c00158db:	83 ec 0c             	sub    esp,0xc
c00158de:	68 00 02 00 00       	push   0x200
c00158e3:	e8 94 95 00 00       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c00158e8:	83 c4 10             	add    esp,0x10
c00158eb:	89 c2                	mov    edx,eax
c00158ed:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00158f3:	83 e2 01             	and    edx,0x1
c00158f6:	83 e0 fe             	and    eax,0xfffffffe
c00158f9:	09 d0                	or     eax,edx
c00158fb:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0015901:	e9 15 ff ff ff       	jmp    c001581b <Computer::detectFeatures()+0x13b>

c0015906 <Computer::displayFeatures()>:
c0015906:	c3                   	ret    
c0015907:	90                   	nop

c0015908 <Computer::rdmsr(unsigned int)>:
c0015908:	83 ec 0c             	sub    esp,0xc
c001590b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001590f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0015916:	74 0a                	je     c0015922 <Computer::rdmsr(unsigned int)+0x1a>
c0015918:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001591c:	0f 32                	rdmsr  
c001591e:	83 c4 0c             	add    esp,0xc
c0015921:	c3                   	ret    
c0015922:	83 ec 0c             	sub    esp,0xc
c0015925:	68 65 0e 03 c0       	push   0xc0030e65
c001592a:	e8 77 a8 00 00       	call   c00201a6 <KePanic(char const*)>
c001592f:	83 c4 10             	add    esp,0x10
c0015932:	eb e4                	jmp    c0015918 <Computer::rdmsr(unsigned int)+0x10>

c0015934 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0015934:	57                   	push   edi
c0015935:	56                   	push   esi
c0015936:	83 ec 04             	sub    esp,0x4
c0015939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001593d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015941:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0015945:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001594c:	74 10                	je     c001595e <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c001594e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015952:	89 f0                	mov    eax,esi
c0015954:	89 fa                	mov    edx,edi
c0015956:	0f 30                	wrmsr  
c0015958:	83 c4 04             	add    esp,0x4
c001595b:	5e                   	pop    esi
c001595c:	5f                   	pop    edi
c001595d:	c3                   	ret    
c001595e:	83 ec 0c             	sub    esp,0xc
c0015961:	68 6b 0e 03 c0       	push   0xc0030e6b
c0015966:	e8 3b a8 00 00       	call   c00201a6 <KePanic(char const*)>
c001596b:	83 c4 10             	add    esp,0x10
c001596e:	eb de                	jmp    c001594e <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0015970 <Computer::shutdown()>:
c0015970:	83 ec 0c             	sub    esp,0xc
c0015973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015977:	8b 10                	mov    edx,DWORD PTR [eax]
c0015979:	6a 00                	push   0x0
c001597b:	6a 00                	push   0x0
c001597d:	6a 00                	push   0x0
c001597f:	50                   	push   eax
c0015980:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015983:	83 c4 1c             	add    esp,0x1c
c0015986:	c3                   	ret    
c0015987:	90                   	nop

c0015988 <Computer::restart()>:
c0015988:	83 ec 0c             	sub    esp,0xc
c001598b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001598f:	8b 10                	mov    edx,DWORD PTR [eax]
c0015991:	6a 00                	push   0x0
c0015993:	6a 00                	push   0x0
c0015995:	6a 01                	push   0x1
c0015997:	50                   	push   eax
c0015998:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001599b:	83 c4 1c             	add    esp,0x1c
c001599e:	c3                   	ret    
c001599f:	90                   	nop

c00159a0 <Computer::sleep()>:
c00159a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159a4:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00159aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00159ae:	e9 e1 8e 00 00       	jmp    c001e894 <ACPI::sleep()>
c00159b3:	90                   	nop

c00159b4 <Computer::nmiEnabled()>:
c00159b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159b8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c00159be:	c3                   	ret    
c00159bf:	90                   	nop

c00159c0 <Computer::readCMOS(unsigned char)>:
c00159c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00159c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00159c8:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c00159cf:	75 09                	jne    c00159da <Computer::readCMOS(unsigned char)+0x1a>
c00159d1:	b2 80                	mov    dl,0x80
c00159d3:	09 d0                	or     eax,edx
c00159d5:	e6 70                	out    0x70,al
c00159d7:	e4 71                	in     al,0x71
c00159d9:	c3                   	ret    
c00159da:	31 d2                	xor    edx,edx
c00159dc:	eb f5                	jmp    c00159d3 <Computer::readCMOS(unsigned char)+0x13>

c00159de <Computer::enableNMI(bool)>:
c00159de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00159e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159e6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00159ec:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00159f4:	eb ca                	jmp    c00159c0 <Computer::readCMOS(unsigned char)>

c00159f6 <Computer::open(int, int, void*)>:
c00159f6:	56                   	push   esi
c00159f7:	53                   	push   ebx
c00159f8:	83 ec 10             	sub    esp,0x10
c00159fb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00159ff:	f6 05 d4 a9 03 c0 04 	test   BYTE PTR ds:0xc003a9d4,0x4
c0015a06:	68 71 0e 03 c0       	push   0xc0030e71
c0015a0b:	0f 94 05 40 3a 03 c0 	sete   BYTE PTR ds:0xc0033a40
c0015a12:	e8 2c a0 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c0015a17:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0015a1e:	e8 db 08 00 00       	call   c00162fe <malloc>
c0015a23:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a26:	89 c6                	mov    esi,eax
c0015a28:	e8 db 89 00 00       	call   c001e408 <ACPI::ACPI()>
c0015a2d:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0015a33:	58                   	pop    eax
c0015a34:	5a                   	pop    edx
c0015a35:	56                   	push   esi
c0015a36:	53                   	push   ebx
c0015a37:	e8 d2 57 00 00       	call   c001b20e <Device::addChild(Device*)>
c0015a3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a3f:	e8 9c fc ff ff       	call   c00156e0 <Computer::detectFeatures()>
c0015a44:	59                   	pop    ecx
c0015a45:	5e                   	pop    esi
c0015a46:	6a 01                	push   0x1
c0015a48:	53                   	push   ebx
c0015a49:	e8 90 ff ff ff       	call   c00159de <Computer::enableNMI(bool)>
c0015a4e:	c7 04 24 89 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e89
c0015a55:	e8 e9 9f 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c0015a5a:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0015a61:	e8 98 08 00 00       	call   c00162fe <malloc>
c0015a66:	89 04 24             	mov    DWORD PTR [esp],eax
c0015a69:	89 c6                	mov    esi,eax
c0015a6b:	e8 c4 94 00 00       	call   c001ef34 <CPU::CPU()>
c0015a70:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0015a76:	58                   	pop    eax
c0015a77:	5a                   	pop    edx
c0015a78:	56                   	push   esi
c0015a79:	53                   	push   ebx
c0015a7a:	e8 8f 57 00 00       	call   c001b20e <Device::addChild(Device*)>
c0015a7f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015a85:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0015a89:	8b 10                	mov    edx,DWORD PTR [eax]
c0015a8b:	51                   	push   ecx
c0015a8c:	6a 00                	push   0x0
c0015a8e:	6a 00                	push   0x0
c0015a90:	50                   	push   eax
c0015a91:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015a94:	83 c4 14             	add    esp,0x14
c0015a97:	68 38 0f 03 c0       	push   0xc0030f38
c0015a9c:	e8 a2 9f 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c0015aa1:	e8 2a 13 01 00       	call   c0026dd0 <HalInitialiseCoprocessor()>
c0015aa6:	c7 04 24 a3 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ea3
c0015aad:	e8 91 9f 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c0015ab2:	c7 04 24 f0 54 01 c0 	mov    DWORD PTR [esp],0xc00154f0
c0015ab9:	e8 a2 f5 00 00       	call   c0025060 <setupMultitasking(void (*)())>
c0015abe:	83 c4 14             	add    esp,0x14
c0015ac1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ac6:	5b                   	pop    ebx
c0015ac7:	5e                   	pop    esi
c0015ac8:	c3                   	ret    
c0015ac9:	90                   	nop

c0015aca <Computer::disableNMI()>:
c0015aca:	6a 00                	push   0x0
c0015acc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ad0:	50                   	push   eax
c0015ad1:	e8 08 ff ff ff       	call   c00159de <Computer::enableNMI(bool)>
c0015ad6:	5a                   	pop    edx
c0015ad7:	59                   	pop    ecx
c0015ad8:	c3                   	ret    
c0015ad9:	90                   	nop

c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>:
c0015ada:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ae2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015ae6:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c0015aed:	75 0b                	jne    c0015afa <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c0015aef:	b1 80                	mov    cl,0x80
c0015af1:	09 c8                	or     eax,ecx
c0015af3:	e6 70                	out    0x70,al
c0015af5:	88 d0                	mov    al,dl
c0015af7:	e6 71                	out    0x71,al
c0015af9:	c3                   	ret    
c0015afa:	31 c9                	xor    ecx,ecx
c0015afc:	eb f3                	jmp    c0015af1 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c0015afe <Computer::handleNMI()>:
c0015afe:	56                   	push   esi
c0015aff:	53                   	push   ebx
c0015b00:	83 ec 10             	sub    esp,0x10
c0015b03:	e4 92                	in     al,0x92
c0015b05:	89 c6                	mov    esi,eax
c0015b07:	e4 61                	in     al,0x61
c0015b09:	68 be 0e 03 c0       	push   0xc0030ebe
c0015b0e:	88 c3                	mov    bl,al
c0015b10:	e8 78 36 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0015b15:	83 c4 10             	add    esp,0x10
c0015b18:	83 e6 10             	and    esi,0x10
c0015b1b:	75 10                	jne    c0015b2d <Computer::handleNMI()+0x2f>
c0015b1d:	f6 c3 40             	test   bl,0x40
c0015b20:	75 20                	jne    c0015b42 <Computer::handleNMI()+0x44>
c0015b22:	80 e3 80             	and    bl,0x80
c0015b25:	75 30                	jne    c0015b57 <Computer::handleNMI()+0x59>
c0015b27:	83 c4 04             	add    esp,0x4
c0015b2a:	5b                   	pop    ebx
c0015b2b:	5e                   	pop    esi
c0015b2c:	c3                   	ret    
c0015b2d:	83 ec 0c             	sub    esp,0xc
c0015b30:	68 cf 0e 03 c0       	push   0xc0030ecf
c0015b35:	e8 6c a6 00 00       	call   c00201a6 <KePanic(char const*)>
c0015b3a:	83 c4 10             	add    esp,0x10
c0015b3d:	f6 c3 40             	test   bl,0x40
c0015b40:	74 e0                	je     c0015b22 <Computer::handleNMI()+0x24>
c0015b42:	83 ec 0c             	sub    esp,0xc
c0015b45:	68 dc 0e 03 c0       	push   0xc0030edc
c0015b4a:	e8 57 a6 00 00       	call   c00201a6 <KePanic(char const*)>
c0015b4f:	83 c4 10             	add    esp,0x10
c0015b52:	80 e3 80             	and    bl,0x80
c0015b55:	74 d0                	je     c0015b27 <Computer::handleNMI()+0x29>
c0015b57:	c7 44 24 10 e6 0e 03 c0 	mov    DWORD PTR [esp+0x10],0xc0030ee6
c0015b5f:	83 c4 04             	add    esp,0x4
c0015b62:	5b                   	pop    ebx
c0015b63:	5e                   	pop    esi
c0015b64:	e9 3d a6 00 00       	jmp    c00201a6 <KePanic(char const*)>
c0015b69:	90                   	nop

c0015b6a <GDTEntry::setBase(unsigned int)>:
c0015b6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015b72:	89 c1                	mov    ecx,eax
c0015b74:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0015b78:	c1 e9 10             	shr    ecx,0x10
c0015b7b:	c1 e8 18             	shr    eax,0x18
c0015b7e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0015b81:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0015b84:	c3                   	ret    
c0015b85:	90                   	nop

c0015b86 <GDTEntry::setLimit(unsigned int)>:
c0015b86:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0015b8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015b8e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0015b91:	66 89 01             	mov    WORD PTR [ecx],ax
c0015b94:	83 e2 f0             	and    edx,0xfffffff0
c0015b97:	c1 e8 10             	shr    eax,0x10
c0015b9a:	83 e0 0f             	and    eax,0xf
c0015b9d:	09 d0                	or     eax,edx
c0015b9f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0015ba2:	c3                   	ret    
c0015ba3:	90                   	nop

c0015ba4 <GDT::GDT()>:
c0015ba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ba8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015bae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015bb8:	90                   	nop
c0015bb9:	c3                   	ret    

c0015bba <GDT::addEntry(GDTEntry)>:
c0015bba:	53                   	push   ebx
c0015bbb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015bbf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015bc3:	8b 02                	mov    eax,DWORD PTR [edx]
c0015bc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015bc9:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0015bcd:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0015bd1:	8d 48 01             	lea    ecx,[eax+0x1]
c0015bd4:	c1 e0 03             	shl    eax,0x3
c0015bd7:	89 0a                	mov    DWORD PTR [edx],ecx
c0015bd9:	5b                   	pop    ebx
c0015bda:	c3                   	ret    
c0015bdb:	90                   	nop

c0015bdc <GDT::getNumberOfEntries()>:
c0015bdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015be0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be2:	c3                   	ret    
c0015be3:	90                   	nop

c0015be4 <GDT::flush()>:
c0015be4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015be8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015bea:	83 c0 04             	add    eax,0x4
c0015bed:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c0015bf4:	a3 c6 a9 03 c0       	mov    ds:0xc003a9c6,eax
c0015bf9:	66 89 15 c4 a9 03 c0 	mov    WORD PTR ds:0xc003a9c4,dx
c0015c00:	e9 55 a7 fe ff       	jmp    c000035a <loadGDT>
c0015c05:	90                   	nop

c0015c06 <GDT::setup()>:
c0015c06:	57                   	push   edi
c0015c07:	56                   	push   esi
c0015c08:	53                   	push   ebx
c0015c09:	83 ec 30             	sub    esp,0x30
c0015c0c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0015c10:	6a 00                	push   0x0
c0015c12:	8d 74 24 14          	lea    esi,[esp+0x14]
c0015c16:	56                   	push   esi
c0015c17:	e8 4e ff ff ff       	call   c0015b6a <GDTEntry::setBase(unsigned int)>
c0015c1c:	6a 00                	push   0x0
c0015c1e:	56                   	push   esi
c0015c1f:	e8 62 ff ff ff       	call   c0015b86 <GDTEntry::setLimit(unsigned int)>
c0015c24:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0015c2c:	6a 00                	push   0x0
c0015c2e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015c32:	56                   	push   esi
c0015c33:	e8 32 ff ff ff       	call   c0015b6a <GDTEntry::setBase(unsigned int)>
c0015c38:	68 ff ff ff 00       	push   0xffffff
c0015c3d:	56                   	push   esi
c0015c3e:	e8 43 ff ff ff       	call   c0015b86 <GDTEntry::setLimit(unsigned int)>
c0015c43:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0015c47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015c4b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015c4f:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0015c53:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0015c58:	0d 00 9a c0 00       	or     eax,0xc09a00
c0015c5d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015c61:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0015c65:	89 f8                	mov    eax,edi
c0015c67:	89 fa                	mov    edx,edi
c0015c69:	80 e4 f7             	and    ah,0xf7
c0015c6c:	80 ce 60             	or     dh,0x60
c0015c6f:	89 c7                	mov    edi,eax
c0015c71:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0015c75:	80 cc 60             	or     ah,0x60
c0015c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015c7c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015c80:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0015c84:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015c88:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0015c8c:	83 c4 20             	add    esp,0x20
c0015c8f:	6a 00                	push   0x0
c0015c91:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015c95:	50                   	push   eax
c0015c96:	e8 cf fe ff ff       	call   c0015b6a <GDTEntry::setBase(unsigned int)>
c0015c9b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0015c9f:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0015ca3:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0015ca7:	83 e0 3f             	and    eax,0x3f
c0015caa:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015cae:	6a 00                	push   0x0
c0015cb0:	8d 44 24 34          	lea    eax,[esp+0x34]
c0015cb4:	50                   	push   eax
c0015cb5:	e8 b0 fe ff ff       	call   c0015b6a <GDTEntry::setBase(unsigned int)>
c0015cba:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0015cbe:	83 e0 3f             	and    eax,0x3f
c0015cc1:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c0015cc5:	83 c4 0c             	add    esp,0xc
c0015cc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015ccc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015cd0:	53                   	push   ebx
c0015cd1:	e8 e4 fe ff ff       	call   c0015bba <GDT::addEntry(GDTEntry)>
c0015cd6:	83 c4 0c             	add    esp,0xc
c0015cd9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015cdd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015ce1:	53                   	push   ebx
c0015ce2:	e8 d3 fe ff ff       	call   c0015bba <GDT::addEntry(GDTEntry)>
c0015ce7:	83 c4 0c             	add    esp,0xc
c0015cea:	57                   	push   edi
c0015ceb:	56                   	push   esi
c0015cec:	53                   	push   ebx
c0015ced:	e8 c8 fe ff ff       	call   c0015bba <GDT::addEntry(GDTEntry)>
c0015cf2:	83 c4 0c             	add    esp,0xc
c0015cf5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015cf9:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0015cfd:	53                   	push   ebx
c0015cfe:	e8 b7 fe ff ff       	call   c0015bba <GDT::addEntry(GDTEntry)>
c0015d03:	83 c4 0c             	add    esp,0xc
c0015d06:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015d0a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015d0e:	53                   	push   ebx
c0015d0f:	e8 a6 fe ff ff       	call   c0015bba <GDT::addEntry(GDTEntry)>
c0015d14:	83 c4 0c             	add    esp,0xc
c0015d17:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d1b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015d1f:	53                   	push   ebx
c0015d20:	e8 95 fe ff ff       	call   c0015bba <GDT::addEntry(GDTEntry)>
c0015d25:	83 c4 0c             	add    esp,0xc
c0015d28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d2c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015d30:	53                   	push   ebx
c0015d31:	e8 84 fe ff ff       	call   c0015bba <GDT::addEntry(GDTEntry)>
c0015d36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d39:	e8 a6 fe ff ff       	call   c0015be4 <GDT::flush()>
c0015d3e:	83 c4 40             	add    esp,0x40
c0015d41:	5b                   	pop    ebx
c0015d42:	5e                   	pop    esi
c0015d43:	5f                   	pop    edi
c0015d44:	c3                   	ret    

c0015d45 <idleFunction(void*)>:
c0015d45:	83 ec 0c             	sub    esp,0xc
c0015d48:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0015d4d:	48                   	dec    eax
c0015d4e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0015d53:	75 01                	jne    c0015d56 <idleFunction(void*)+0x11>
c0015d55:	fb                   	sti    
c0015d56:	e8 41 0d 01 00       	call   c0026a9c <HalSystemIdle()>
c0015d5b:	e8 a2 8a 01 00       	call   c002e802 <idleCommon()>
c0015d60:	eb f4                	jmp    c0015d56 <idleFunction(void*)+0x11>
c0015d62:	66 90                	xchg   ax,ax

c0015d64 <IDTEntry::IDTEntry(bool)>:
c0015d64:	53                   	push   ebx
c0015d65:	83 ec 04             	sub    esp,0x4
c0015d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d6c:	88 04 24             	mov    BYTE PTR [esp],al
c0015d6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d73:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0015d79:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d7d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0015d81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d85:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015d88:	83 e2 f0             	and    edx,0xfffffff0
c0015d8b:	83 ca 0e             	or     edx,0xe
c0015d8e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015d91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d95:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015d98:	83 e2 ef             	and    edx,0xffffffef
c0015d9b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015d9e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0015da2:	85 c0                	test   eax,eax
c0015da4:	74 06                	je     c0015dac <IDTEntry::IDTEntry(bool)+0x48>
c0015da6:	b2 03                	mov    dl,0x3
c0015da8:	eb 06                	jmp    c0015db0 <IDTEntry::IDTEntry(bool)+0x4c>
c0015daa:	66 90                	xchg   ax,ax
c0015dac:	b2 00                	mov    dl,0x0
c0015dae:	66 90                	xchg   ax,ax
c0015db0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015db4:	83 e2 03             	and    edx,0x3
c0015db7:	89 d3                	mov    ebx,edx
c0015db9:	c1 e3 05             	shl    ebx,0x5
c0015dbc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015dbf:	83 e2 9f             	and    edx,0xffffff9f
c0015dc2:	88 d1                	mov    cl,dl
c0015dc4:	88 da                	mov    dl,bl
c0015dc6:	09 ca                	or     edx,ecx
c0015dc8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015dcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015dcf:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0015dd2:	83 ca 80             	or     edx,0xffffff80
c0015dd5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0015dd8:	90                   	nop
c0015dd9:	83 c4 04             	add    esp,0x4
c0015ddc:	5b                   	pop    ebx
c0015ddd:	c3                   	ret    

c0015dde <IDTEntry::setOffset(unsigned int)>:
c0015dde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015de6:	66 89 02             	mov    WORD PTR [edx],ax
c0015de9:	c1 e8 10             	shr    eax,0x10
c0015dec:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0015df0:	c3                   	ret    
c0015df1:	90                   	nop
c0015df2:	66 90                	xchg   ax,ax

c0015df4 <IDT::IDT()>:
c0015df4:	90                   	nop
c0015df5:	c3                   	ret    

c0015df6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0015df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dfa:	83 c0 30             	add    eax,0x30
c0015dfd:	c3                   	ret    

c0015dfe <IDT::addEntry(IDTEntry, int)>:
c0015dfe:	53                   	push   ebx
c0015dff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015e07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015e0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e0f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c0015e12:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c0015e16:	5b                   	pop    ebx
c0015e17:	c3                   	ret    

c0015e18 <IDT::addEntry(int, void (*)(), bool)>:
c0015e18:	53                   	push   ebx
c0015e19:	83 ec 10             	sub    esp,0x10
c0015e1c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0015e21:	50                   	push   eax
c0015e22:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0015e26:	53                   	push   ebx
c0015e27:	e8 38 ff ff ff       	call   c0015d64 <IDTEntry::IDTEntry(bool)>
c0015e2c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015e30:	53                   	push   ebx
c0015e31:	e8 a8 ff ff ff       	call   c0015dde <IDTEntry::setOffset(unsigned int)>
c0015e36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e3a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e3e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015e46:	e8 b3 ff ff ff       	call   c0015dfe <IDT::addEntry(IDTEntry, int)>
c0015e4b:	83 c4 30             	add    esp,0x30
c0015e4e:	5b                   	pop    ebx
c0015e4f:	c3                   	ret    

c0015e50 <IDT::flush()>:
c0015e50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e54:	66 c7 05 cc a9 03 c0 ff 07 	mov    WORD PTR ds:0xc003a9cc,0x7ff
c0015e5d:	a3 ce a9 03 c0       	mov    ds:0xc003a9ce,eax
c0015e62:	0f 01 1d cc a9 03 c0 	lidtd  ds:0xc003a9cc
c0015e69:	c3                   	ret    

c0015e6a <IDT::setup()>:
c0015e6a:	57                   	push   edi
c0015e6b:	56                   	push   esi
c0015e6c:	53                   	push   ebx
c0015e6d:	83 ec 10             	sub    esp,0x10
c0015e70:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015e74:	6a 00                	push   0x0
c0015e76:	68 00 df 02 c0       	push   0xc002df00
c0015e7b:	6a 00                	push   0x0
c0015e7d:	53                   	push   ebx
c0015e7e:	e8 95 ff ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015e83:	6a 00                	push   0x0
c0015e85:	68 10 df 02 c0       	push   0xc002df10
c0015e8a:	6a 01                	push   0x1
c0015e8c:	53                   	push   ebx
c0015e8d:	e8 86 ff ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015e92:	83 c4 20             	add    esp,0x20
c0015e95:	6a 00                	push   0x0
c0015e97:	68 1a df 02 c0       	push   0xc002df1a
c0015e9c:	6a 02                	push   0x2
c0015e9e:	53                   	push   ebx
c0015e9f:	e8 74 ff ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015ea4:	6a 00                	push   0x0
c0015ea6:	68 24 df 02 c0       	push   0xc002df24
c0015eab:	6a 03                	push   0x3
c0015ead:	53                   	push   ebx
c0015eae:	e8 65 ff ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015eb3:	83 c4 20             	add    esp,0x20
c0015eb6:	6a 00                	push   0x0
c0015eb8:	68 2e df 02 c0       	push   0xc002df2e
c0015ebd:	6a 04                	push   0x4
c0015ebf:	53                   	push   ebx
c0015ec0:	e8 53 ff ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015ec5:	6a 00                	push   0x0
c0015ec7:	68 38 df 02 c0       	push   0xc002df38
c0015ecc:	6a 05                	push   0x5
c0015ece:	53                   	push   ebx
c0015ecf:	e8 44 ff ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015ed4:	83 c4 20             	add    esp,0x20
c0015ed7:	6a 00                	push   0x0
c0015ed9:	68 42 df 02 c0       	push   0xc002df42
c0015ede:	6a 06                	push   0x6
c0015ee0:	53                   	push   ebx
c0015ee1:	e8 32 ff ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015ee6:	6a 00                	push   0x0
c0015ee8:	68 4c df 02 c0       	push   0xc002df4c
c0015eed:	6a 07                	push   0x7
c0015eef:	53                   	push   ebx
c0015ef0:	e8 23 ff ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015ef5:	83 c4 20             	add    esp,0x20
c0015ef8:	6a 00                	push   0x0
c0015efa:	68 56 df 02 c0       	push   0xc002df56
c0015eff:	6a 08                	push   0x8
c0015f01:	53                   	push   ebx
c0015f02:	e8 11 ff ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015f07:	6a 00                	push   0x0
c0015f09:	68 5e df 02 c0       	push   0xc002df5e
c0015f0e:	6a 09                	push   0x9
c0015f10:	53                   	push   ebx
c0015f11:	e8 02 ff ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015f16:	83 c4 20             	add    esp,0x20
c0015f19:	6a 00                	push   0x0
c0015f1b:	68 68 df 02 c0       	push   0xc002df68
c0015f20:	6a 0a                	push   0xa
c0015f22:	53                   	push   ebx
c0015f23:	e8 f0 fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015f28:	6a 00                	push   0x0
c0015f2a:	68 70 df 02 c0       	push   0xc002df70
c0015f2f:	6a 0b                	push   0xb
c0015f31:	53                   	push   ebx
c0015f32:	e8 e1 fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015f37:	83 c4 20             	add    esp,0x20
c0015f3a:	6a 00                	push   0x0
c0015f3c:	68 78 df 02 c0       	push   0xc002df78
c0015f41:	6a 0c                	push   0xc
c0015f43:	53                   	push   ebx
c0015f44:	e8 cf fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015f49:	6a 00                	push   0x0
c0015f4b:	68 80 df 02 c0       	push   0xc002df80
c0015f50:	6a 0d                	push   0xd
c0015f52:	53                   	push   ebx
c0015f53:	e8 c0 fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015f58:	83 c4 20             	add    esp,0x20
c0015f5b:	6a 00                	push   0x0
c0015f5d:	68 9a df 02 c0       	push   0xc002df9a
c0015f62:	6a 0e                	push   0xe
c0015f64:	53                   	push   ebx
c0015f65:	e8 ae fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015f6a:	6a 00                	push   0x0
c0015f6c:	68 a2 df 02 c0       	push   0xc002dfa2
c0015f71:	6a 0f                	push   0xf
c0015f73:	53                   	push   ebx
c0015f74:	e8 9f fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015f79:	83 c4 20             	add    esp,0x20
c0015f7c:	6a 00                	push   0x0
c0015f7e:	68 ac df 02 c0       	push   0xc002dfac
c0015f83:	6a 10                	push   0x10
c0015f85:	53                   	push   ebx
c0015f86:	e8 8d fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015f8b:	6a 00                	push   0x0
c0015f8d:	68 b6 df 02 c0       	push   0xc002dfb6
c0015f92:	6a 11                	push   0x11
c0015f94:	53                   	push   ebx
c0015f95:	e8 7e fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015f9a:	83 c4 20             	add    esp,0x20
c0015f9d:	6a 00                	push   0x0
c0015f9f:	68 c0 df 02 c0       	push   0xc002dfc0
c0015fa4:	6a 12                	push   0x12
c0015fa6:	53                   	push   ebx
c0015fa7:	e8 6c fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015fac:	6a 01                	push   0x1
c0015fae:	68 5a e0 02 c0       	push   0xc002e05a
c0015fb3:	6a 60                	push   0x60
c0015fb5:	53                   	push   ebx
c0015fb6:	e8 5d fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015fbb:	83 c4 20             	add    esp,0x20
c0015fbe:	6a 00                	push   0x0
c0015fc0:	68 61 e0 02 c0       	push   0xc002e061
c0015fc5:	6a 20                	push   0x20
c0015fc7:	53                   	push   ebx
c0015fc8:	e8 4b fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015fcd:	6a 00                	push   0x0
c0015fcf:	68 4c e0 02 c0       	push   0xc002e04c
c0015fd4:	6a 21                	push   0x21
c0015fd6:	53                   	push   ebx
c0015fd7:	e8 3c fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015fdc:	83 c4 20             	add    esp,0x20
c0015fdf:	6a 00                	push   0x0
c0015fe1:	68 53 e0 02 c0       	push   0xc002e053
c0015fe6:	6a 22                	push   0x22
c0015fe8:	53                   	push   ebx
c0015fe9:	e8 2a fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015fee:	6a 00                	push   0x0
c0015ff0:	68 ca df 02 c0       	push   0xc002dfca
c0015ff5:	6a 23                	push   0x23
c0015ff7:	53                   	push   ebx
c0015ff8:	e8 1b fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0015ffd:	83 c4 20             	add    esp,0x20
c0016000:	6a 00                	push   0x0
c0016002:	68 d4 df 02 c0       	push   0xc002dfd4
c0016007:	6a 24                	push   0x24
c0016009:	53                   	push   ebx
c001600a:	e8 09 fe ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c001600f:	6a 00                	push   0x0
c0016011:	68 de df 02 c0       	push   0xc002dfde
c0016016:	6a 25                	push   0x25
c0016018:	53                   	push   ebx
c0016019:	e8 fa fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c001601e:	83 c4 20             	add    esp,0x20
c0016021:	6a 00                	push   0x0
c0016023:	68 e8 df 02 c0       	push   0xc002dfe8
c0016028:	6a 26                	push   0x26
c001602a:	53                   	push   ebx
c001602b:	e8 e8 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016030:	6a 00                	push   0x0
c0016032:	68 f2 df 02 c0       	push   0xc002dff2
c0016037:	6a 27                	push   0x27
c0016039:	53                   	push   ebx
c001603a:	e8 d9 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c001603f:	83 c4 20             	add    esp,0x20
c0016042:	6a 00                	push   0x0
c0016044:	68 fc df 02 c0       	push   0xc002dffc
c0016049:	6a 28                	push   0x28
c001604b:	53                   	push   ebx
c001604c:	e8 c7 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016051:	6a 00                	push   0x0
c0016053:	68 06 e0 02 c0       	push   0xc002e006
c0016058:	6a 29                	push   0x29
c001605a:	53                   	push   ebx
c001605b:	e8 b8 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016060:	83 c4 20             	add    esp,0x20
c0016063:	6a 00                	push   0x0
c0016065:	68 10 e0 02 c0       	push   0xc002e010
c001606a:	6a 2a                	push   0x2a
c001606c:	53                   	push   ebx
c001606d:	e8 a6 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016072:	6a 00                	push   0x0
c0016074:	68 1a e0 02 c0       	push   0xc002e01a
c0016079:	6a 2b                	push   0x2b
c001607b:	53                   	push   ebx
c001607c:	e8 97 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016081:	83 c4 20             	add    esp,0x20
c0016084:	6a 00                	push   0x0
c0016086:	68 24 e0 02 c0       	push   0xc002e024
c001608b:	6a 2c                	push   0x2c
c001608d:	53                   	push   ebx
c001608e:	e8 85 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016093:	6a 00                	push   0x0
c0016095:	68 2e e0 02 c0       	push   0xc002e02e
c001609a:	6a 2d                	push   0x2d
c001609c:	53                   	push   ebx
c001609d:	e8 76 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c00160a2:	83 c4 20             	add    esp,0x20
c00160a5:	6a 00                	push   0x0
c00160a7:	68 38 e0 02 c0       	push   0xc002e038
c00160ac:	6a 2e                	push   0x2e
c00160ae:	53                   	push   ebx
c00160af:	e8 64 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c00160b4:	6a 00                	push   0x0
c00160b6:	68 42 e0 02 c0       	push   0xc002e042
c00160bb:	6a 2f                	push   0x2f
c00160bd:	53                   	push   ebx
c00160be:	e8 55 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c00160c3:	83 c4 20             	add    esp,0x20
c00160c6:	6a 00                	push   0x0
c00160c8:	68 9c e1 02 c0       	push   0xc002e19c
c00160cd:	6a 30                	push   0x30
c00160cf:	53                   	push   ebx
c00160d0:	e8 43 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c00160d5:	6a 00                	push   0x0
c00160d7:	68 a6 e1 02 c0       	push   0xc002e1a6
c00160dc:	6a 31                	push   0x31
c00160de:	53                   	push   ebx
c00160df:	e8 34 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c00160e4:	83 c4 20             	add    esp,0x20
c00160e7:	6a 00                	push   0x0
c00160e9:	68 b0 e1 02 c0       	push   0xc002e1b0
c00160ee:	6a 32                	push   0x32
c00160f0:	53                   	push   ebx
c00160f1:	e8 22 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c00160f6:	6a 00                	push   0x0
c00160f8:	68 ba e1 02 c0       	push   0xc002e1ba
c00160fd:	6a 33                	push   0x33
c00160ff:	53                   	push   ebx
c0016100:	e8 13 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016105:	83 c4 20             	add    esp,0x20
c0016108:	6a 00                	push   0x0
c001610a:	68 c4 e1 02 c0       	push   0xc002e1c4
c001610f:	6a 34                	push   0x34
c0016111:	53                   	push   ebx
c0016112:	e8 01 fd ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016117:	6a 00                	push   0x0
c0016119:	68 ce e1 02 c0       	push   0xc002e1ce
c001611e:	6a 35                	push   0x35
c0016120:	53                   	push   ebx
c0016121:	e8 f2 fc ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016126:	83 c4 20             	add    esp,0x20
c0016129:	6a 00                	push   0x0
c001612b:	68 d8 e1 02 c0       	push   0xc002e1d8
c0016130:	6a 36                	push   0x36
c0016132:	53                   	push   ebx
c0016133:	e8 e0 fc ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016138:	6a 00                	push   0x0
c001613a:	68 e2 e1 02 c0       	push   0xc002e1e2
c001613f:	6a 37                	push   0x37
c0016141:	53                   	push   ebx
c0016142:	e8 d1 fc ff ff       	call   c0015e18 <IDT::addEntry(int, void (*)(), bool)>
c0016147:	83 c4 1c             	add    esp,0x1c
c001614a:	6a 03                	push   0x3
c001614c:	6a 02                	push   0x2
c001614e:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0016154:	e8 13 25 00 00       	call   c001866c <VAS::allocatePages(int, int)>
c0016159:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0016160:	89 c6                	mov    esi,eax
c0016162:	e8 97 01 00 00       	call   c00162fe <malloc>
c0016167:	81 c6 00 20 00 00    	add    esi,0x2000
c001616d:	89 04 24             	mov    DWORD PTR [esp],eax
c0016170:	89 c7                	mov    edi,eax
c0016172:	e8 15 16 00 00       	call   c001778c <TSS::TSS()>
c0016177:	83 c4 0c             	add    esp,0xc
c001617a:	68 56 df 02 c0       	push   0xc002df56
c001617f:	56                   	push   esi
c0016180:	57                   	push   edi
c0016181:	e8 4a 16 00 00       	call   c00177d0 <TSS::setup(unsigned long, unsigned long)>
c0016186:	89 c6                	mov    esi,eax
c0016188:	58                   	pop    eax
c0016189:	5a                   	pop    edx
c001618a:	6a 00                	push   0x0
c001618c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016190:	50                   	push   eax
c0016191:	e8 ce fb ff ff       	call   c0015d64 <IDTEntry::IDTEntry(bool)>
c0016196:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001619a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001619f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00161a6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00161ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00161b0:	80 ce 05             	or     dh,0x5
c00161b3:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00161b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00161ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00161be:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00161c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161c4:	e8 87 fc ff ff       	call   c0015e50 <IDT::flush()>
c00161c9:	83 c4 20             	add    esp,0x20
c00161cc:	5b                   	pop    ebx
c00161cd:	5e                   	pop    esi
c00161ce:	5f                   	pop    edi
c00161cf:	c3                   	ret    

c00161d0 <sbrk>:
c00161d0:	55                   	push   ebp
c00161d1:	57                   	push   edi
c00161d2:	56                   	push   esi
c00161d3:	53                   	push   ebx
c00161d4:	83 ec 1c             	sub    esp,0x1c
c00161d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161db:	85 c0                	test   eax,eax
c00161dd:	74 61                	je     c0016240 <sbrk+0x70>
c00161df:	78 66                	js     c0016247 <sbrk+0x77>
c00161e1:	8b 15 24 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a24
c00161e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00161eb:	05 ff 0f 00 00       	add    eax,0xfff
c00161f0:	89 c5                	mov    ebp,eax
c00161f2:	78 6b                	js     c001625f <sbrk+0x8f>
c00161f4:	c1 fd 0c             	sar    ebp,0xc
c00161f7:	bb 00 00 00 00       	mov    ebx,0x0
c00161fc:	8b 35 b0 aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aab0
c0016202:	8b 3d 24 3a 03 c0    	mov    edi,DWORD PTR ds:0xc0033a24
c0016208:	e8 fa 03 00 00       	call   c0016607 <Phys::allocatePage()>
c001620d:	68 01 04 00 00       	push   0x401
c0016212:	57                   	push   edi
c0016213:	50                   	push   eax
c0016214:	56                   	push   esi
c0016215:	e8 4e 23 00 00       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c001621a:	81 05 24 3a 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc0033a24,0x1000
c0016224:	83 c3 01             	add    ebx,0x1
c0016227:	83 c4 10             	add    esp,0x10
c001622a:	39 dd                	cmp    ebp,ebx
c001622c:	75 ce                	jne    c00161fc <sbrk+0x2c>
c001622e:	0f 20 d8             	mov    eax,cr3
c0016231:	0f 22 d8             	mov    cr3,eax
c0016234:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016238:	83 c4 1c             	add    esp,0x1c
c001623b:	5b                   	pop    ebx
c001623c:	5e                   	pop    esi
c001623d:	5f                   	pop    edi
c001623e:	5d                   	pop    ebp
c001623f:	c3                   	ret    
c0016240:	a1 24 3a 03 c0       	mov    eax,ds:0xc0033a24
c0016245:	eb f1                	jmp    c0016238 <sbrk+0x68>
c0016247:	83 ec 08             	sub    esp,0x8
c001624a:	50                   	push   eax
c001624b:	68 88 0f 03 c0       	push   0xc0030f88
c0016250:	e8 38 2f 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0016255:	83 c4 10             	add    esp,0x10
c0016258:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001625d:	eb d9                	jmp    c0016238 <sbrk+0x68>
c001625f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0016265:	eb 8d                	jmp    c00161f4 <sbrk+0x24>

c0016267 <mmap>:
c0016267:	83 ec 18             	sub    esp,0x18
c001626a:	68 b8 0f 03 c0       	push   0xc0030fb8
c001626f:	e8 32 9f 00 00       	call   c00201a6 <KePanic(char const*)>
c0016274:	b8 00 00 00 00       	mov    eax,0x0
c0016279:	83 c4 1c             	add    esp,0x1c
c001627c:	c3                   	ret    

c001627d <munmap>:
c001627d:	83 ec 18             	sub    esp,0x18
c0016280:	68 bd 0f 03 c0       	push   0xc0030fbd
c0016285:	e8 1c 9f 00 00       	call   c00201a6 <KePanic(char const*)>
c001628a:	b8 00 00 00 00       	mov    eax,0x0
c001628f:	83 c4 1c             	add    esp,0x1c
c0016292:	c3                   	ret    

c0016293 <liballoc_lock()>:
c0016293:	fa                   	cli    
c0016294:	83 05 d0 01 04 c0 01 	add    DWORD PTR ds:0xc00401d0,0x1
c001629b:	b8 00 00 00 00       	mov    eax,0x0
c00162a0:	c3                   	ret    

c00162a1 <liballoc_unlock()>:
c00162a1:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00162a6:	83 e8 01             	sub    eax,0x1
c00162a9:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00162ae:	75 01                	jne    c00162b1 <liballoc_unlock()+0x10>
c00162b0:	fb                   	sti    
c00162b1:	b8 00 00 00 00       	mov    eax,0x0
c00162b6:	c3                   	ret    

c00162b7 <liballoc_alloc(int)>:
c00162b7:	83 ec 10             	sub    esp,0x10
c00162ba:	6a 01                	push   0x1
c00162bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162c0:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00162c6:	e8 a1 23 00 00       	call   c001866c <VAS::allocatePages(int, int)>
c00162cb:	83 c4 1c             	add    esp,0x1c
c00162ce:	c3                   	ret    

c00162cf <liballoc_free(void*, int)>:
c00162cf:	83 ec 14             	sub    esp,0x14
c00162d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00162d6:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00162dc:	e8 cf 1f 00 00       	call   c00182b0 <VAS::freeAllocatedPages(unsigned long)>
c00162e1:	b8 00 00 00 00       	mov    eax,0x0
c00162e6:	83 c4 1c             	add    esp,0x1c
c00162e9:	c3                   	ret    

c00162ea <realloc>:
c00162ea:	83 ec 14             	sub    esp,0x14
c00162ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f5:	e8 e8 b3 fe ff       	call   c00016e2 <dlrealloc>
c00162fa:	83 c4 1c             	add    esp,0x1c
c00162fd:	c3                   	ret    

c00162fe <malloc>:
c00162fe:	83 ec 18             	sub    esp,0x18
c0016301:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016305:	e8 9b ae fe ff       	call   c00011a5 <dlmalloc>
c001630a:	83 c4 1c             	add    esp,0x1c
c001630d:	c3                   	ret    

c001630e <free>:
c001630e:	83 ec 18             	sub    esp,0x18
c0016311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016315:	e8 33 ab fe ff       	call   c0000e4d <dlfree>
c001631a:	83 c4 1c             	add    esp,0x1c
c001631d:	c3                   	ret    

c001631e <rfree>:
c001631e:	83 ec 18             	sub    esp,0x18
c0016321:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016325:	e8 23 ab fe ff       	call   c0000e4d <dlfree>
c001632a:	83 c4 1c             	add    esp,0x1c
c001632d:	c3                   	ret    

c001632e <calloc>:
c001632e:	56                   	push   esi
c001632f:	53                   	push   ebx
c0016330:	83 ec 10             	sub    esp,0x10
c0016333:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016337:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c001633c:	53                   	push   ebx
c001633d:	e8 bc ff ff ff       	call   c00162fe <malloc>
c0016342:	89 c6                	mov    esi,eax
c0016344:	83 c4 0c             	add    esp,0xc
c0016347:	53                   	push   ebx
c0016348:	6a 00                	push   0x0
c001634a:	50                   	push   eax
c001634b:	e8 a0 a1 fe ff       	call   c00004f0 <memset>
c0016350:	89 f0                	mov    eax,esi
c0016352:	83 c4 14             	add    esp,0x14
c0016355:	5b                   	pop    ebx
c0016356:	5e                   	pop    esi
c0016357:	c3                   	ret    

c0016358 <KeEntryPoint>:
c0016358:	57                   	push   edi
c0016359:	bf f9 03 00 00       	mov    edi,0x3f9
c001635e:	56                   	push   esi
c001635f:	89 fa                	mov    edx,edi
c0016361:	53                   	push   ebx
c0016362:	31 f6                	xor    esi,esi
c0016364:	83 ec 2c             	sub    esp,0x2c
c0016367:	a1 00 05 00 00       	mov    eax,ds:0x500
c001636c:	a3 d4 a9 03 c0       	mov    ds:0xc003a9d4,eax
c0016371:	89 f0                	mov    eax,esi
c0016373:	ee                   	out    dx,al
c0016374:	bb fb 03 00 00       	mov    ebx,0x3fb
c0016379:	b0 80                	mov    al,0x80
c001637b:	89 da                	mov    edx,ebx
c001637d:	ee                   	out    dx,al
c001637e:	b1 03                	mov    cl,0x3
c0016380:	ba f8 03 00 00       	mov    edx,0x3f8
c0016385:	88 c8                	mov    al,cl
c0016387:	ee                   	out    dx,al
c0016388:	89 f0                	mov    eax,esi
c001638a:	89 fa                	mov    edx,edi
c001638c:	ee                   	out    dx,al
c001638d:	88 c8                	mov    al,cl
c001638f:	89 da                	mov    edx,ebx
c0016391:	ee                   	out    dx,al
c0016392:	b0 c7                	mov    al,0xc7
c0016394:	ba fa 03 00 00       	mov    edx,0x3fa
c0016399:	ee                   	out    dx,al
c001639a:	b0 0b                	mov    al,0xb
c001639c:	ba fc 03 00 00       	mov    edx,0x3fc
c00163a1:	ee                   	out    dx,al
c00163a2:	68 c4 0f 03 c0       	push   0xc0030fc4
c00163a7:	e8 e1 2d 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00163ac:	e8 16 96 00 00       	call   c001f9c7 <KeDisplaySplashScreen()>
c00163b1:	a1 24 05 00 00       	mov    eax,ds:0x524
c00163b6:	05 ff 0f 00 00       	add    eax,0xfff
c00163bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00163c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00163c3:	e8 ad 03 00 00       	call   c0016775 <Phys::physicalMemorySetup(unsigned int)>
c00163c8:	e8 66 1c 00 00       	call   c0018033 <Virt::virtualMemorySetup()>
c00163cd:	e8 3f 95 00 00       	call   c001f911 <KeInitialiseAtexit()>
c00163d2:	58                   	pop    eax
c00163d3:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00163d7:	53                   	push   ebx
c00163d8:	e8 53 1f 00 00       	call   c0018330 <VAS::VAS()>
c00163dd:	89 1d b0 aa 03 c0    	mov    DWORD PTR ds:0xc003aab0,ebx
c00163e3:	e8 b2 83 01 00       	call   c002e79a <_init>
c00163e8:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00163ef:	e8 0a ff ff ff       	call   c00162fe <malloc>
c00163f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00163f7:	89 c6                	mov    esi,eax
c00163f9:	e8 30 f2 ff ff       	call   c001562e <Computer::Computer()>
c00163fe:	53                   	push   ebx
c00163ff:	89 35 bc a9 03 c0    	mov    DWORD PTR ds:0xc003a9bc,esi
c0016405:	6a 00                	push   0x0
c0016407:	6a 00                	push   0x0
c0016409:	56                   	push   esi
c001640a:	e8 e7 f5 ff ff       	call   c00159f6 <Computer::open(int, int, void*)>
c001640f:	83 c4 14             	add    esp,0x14
c0016412:	53                   	push   ebx
c0016413:	e8 e2 1f 00 00       	call   c00183fa <VAS::~VAS()>
c0016418:	83 c4 30             	add    esp,0x30
c001641b:	5b                   	pop    ebx
c001641c:	5e                   	pop    esi
c001641d:	5f                   	pop    edi
c001641e:	c3                   	ret    

c001641f <Phys::allocateDMA(unsigned long)>:
c001641f:	55                   	push   ebp
c0016420:	31 ed                	xor    ebp,ebp
c0016422:	57                   	push   edi
c0016423:	56                   	push   esi
c0016424:	53                   	push   ebx
c0016425:	31 db                	xor    ebx,ebx
c0016427:	83 ec 1c             	sub    esp,0x1c
c001642a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001642e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016436:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c001643c:	31 c0                	xor    eax,eax
c001643e:	c1 ef 0c             	shr    edi,0xc
c0016441:	eb 1b                	jmp    c001645e <Phys::allocateDMA(unsigned long)+0x3f>
c0016443:	85 c0                	test   eax,eax
c0016445:	75 06                	jne    c001644d <Phys::allocateDMA(unsigned long)+0x2e>
c0016447:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001644b:	89 dd                	mov    ebp,ebx
c001644d:	8d 70 01             	lea    esi,[eax+0x1]
c0016450:	39 f7                	cmp    edi,esi
c0016452:	74 37                	je     c001648b <Phys::allocateDMA(unsigned long)+0x6c>
c0016454:	89 f0                	mov    eax,esi
c0016456:	83 c3 01             	add    ebx,0x1
c0016459:	83 fb 0f             	cmp    ebx,0xf
c001645c:	7f 13                	jg     c0016471 <Phys::allocateDMA(unsigned long)+0x52>
c001645e:	80 bb f0 a9 03 c0 00 	cmp    BYTE PTR [ebx-0x3ffc5610],0x0
c0016465:	74 dc                	je     c0016443 <Phys::allocateDMA(unsigned long)+0x24>
c0016467:	31 c0                	xor    eax,eax
c0016469:	83 c3 01             	add    ebx,0x1
c001646c:	83 fb 0f             	cmp    ebx,0xf
c001646f:	7e ed                	jle    c001645e <Phys::allocateDMA(unsigned long)+0x3f>
c0016471:	83 ec 0c             	sub    esp,0xc
c0016474:	68 dc 0f 03 c0       	push   0xc0030fdc
c0016479:	e8 28 9d 00 00       	call   c00201a6 <KePanic(char const*)>
c001647e:	83 c4 10             	add    esp,0x10
c0016481:	31 c0                	xor    eax,eax
c0016483:	83 c4 1c             	add    esp,0x1c
c0016486:	5b                   	pop    ebx
c0016487:	5e                   	pop    esi
c0016488:	5f                   	pop    edi
c0016489:	5d                   	pop    ebp
c001648a:	c3                   	ret    
c001648b:	89 e9                	mov    ecx,ebp
c001648d:	c1 f9 04             	sar    ecx,0x4
c0016490:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016494:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0016498:	89 ca                	mov    edx,ecx
c001649a:	83 ea 01             	sub    edx,0x1
c001649d:	79 03                	jns    c00164a2 <Phys::allocateDMA(unsigned long)+0x83>
c001649f:	8d 51 0e             	lea    edx,[ecx+0xe]
c00164a2:	c1 fa 04             	sar    edx,0x4
c00164a5:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c00164a9:	74 08                	je     c00164b3 <Phys::allocateDMA(unsigned long)+0x94>
c00164ab:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00164af:	31 c0                	xor    eax,eax
c00164b1:	eb b6                	jmp    c0016469 <Phys::allocateDMA(unsigned long)+0x4a>
c00164b3:	85 f6                	test   esi,esi
c00164b5:	74 17                	je     c00164ce <Phys::allocateDMA(unsigned long)+0xaf>
c00164b7:	8d 95 f0 a9 03 c0    	lea    edx,[ebp-0x3ffc5610]
c00164bd:	8d 84 05 f1 a9 03 c0 	lea    eax,[ebp+eax*1-0x3ffc560f]
c00164c4:	c6 02 01             	mov    BYTE PTR [edx],0x1
c00164c7:	83 c2 01             	add    edx,0x1
c00164ca:	39 d0                	cmp    eax,edx
c00164cc:	75 f6                	jne    c00164c4 <Phys::allocateDMA(unsigned long)+0xa5>
c00164ce:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00164d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00164d7:	01 f8                	add    eax,edi
c00164d9:	85 d2                	test   edx,edx
c00164db:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00164e0:	74 17                	je     c00164f9 <Phys::allocateDMA(unsigned long)+0xda>
c00164e2:	83 ec 0c             	sub    esp,0xc
c00164e5:	68 dc 0f 03 c0       	push   0xc0030fdc
c00164ea:	e8 b7 9c 00 00       	call   c00201a6 <KePanic(char const*)>
c00164ef:	83 c4 10             	add    esp,0x10
c00164f2:	89 f0                	mov    eax,esi
c00164f4:	e9 5d ff ff ff       	jmp    c0016456 <Phys::allocateDMA(unsigned long)+0x37>
c00164f9:	c1 e5 0c             	shl    ebp,0xc
c00164fc:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0016502:	e9 7c ff ff ff       	jmp    c0016483 <Phys::allocateDMA(unsigned long)+0x64>

c0016507 <Phys::freeDMA(unsigned long, unsigned long)>:
c0016507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001650b:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0016511:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c0016516:	c1 ea 0c             	shr    edx,0xc
c0016519:	29 d0                	sub    eax,edx
c001651b:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c0016520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016524:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0016529:	c1 e8 0c             	shr    eax,0xc
c001652c:	85 d2                	test   edx,edx
c001652e:	74 11                	je     c0016541 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0016530:	05 f0 a9 03 c0       	add    eax,0xc003a9f0
c0016535:	01 c2                	add    edx,eax
c0016537:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001653a:	83 c0 01             	add    eax,0x1
c001653d:	39 d0                	cmp    eax,edx
c001653f:	75 f6                	jne    c0016537 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0016541:	c3                   	ret    

c0016542 <Phys::setPageState(unsigned long, bool)>:
c0016542:	57                   	push   edi
c0016543:	56                   	push   esi
c0016544:	8b 35 28 3a 03 c0    	mov    esi,DWORD PTR ds:0xc0033a28
c001654a:	53                   	push   ebx
c001654b:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0016550:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016554:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016558:	0f b6 c0             	movzx  eax,al
c001655b:	89 ca                	mov    edx,ecx
c001655d:	83 e1 07             	and    ecx,0x7
c0016560:	c1 ea 03             	shr    edx,0x3
c0016563:	d3 c3                	rol    ebx,cl
c0016565:	01 d6                	add    esi,edx
c0016567:	d3 e0                	shl    eax,cl
c0016569:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c001656c:	21 fb                	and    ebx,edi
c001656e:	88 1e                	mov    BYTE PTR [esi],bl
c0016570:	8b 1d 28 3a 03 c0    	mov    ebx,DWORD PTR ds:0xc0033a28
c0016576:	01 da                	add    edx,ebx
c0016578:	8a 0a                	mov    cl,BYTE PTR [edx]
c001657a:	09 c8                	or     eax,ecx
c001657c:	88 02                	mov    BYTE PTR [edx],al
c001657e:	5b                   	pop    ebx
c001657f:	5e                   	pop    esi
c0016580:	5f                   	pop    edi
c0016581:	c3                   	ret    

c0016582 <Phys::getPageState(unsigned long)>:
c0016582:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016586:	8b 15 28 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033a28
c001658c:	89 c8                	mov    eax,ecx
c001658e:	83 e1 07             	and    ecx,0x7
c0016591:	c1 e8 03             	shr    eax,0x3
c0016594:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0016598:	d3 f8                	sar    eax,cl
c001659a:	83 e0 01             	and    eax,0x1
c001659d:	c3                   	ret    

c001659e <Phys::freePage(unsigned long)>:
c001659e:	53                   	push   ebx
c001659f:	83 ec 08             	sub    esp,0x8
c00165a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a6:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c00165ac:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00165b2:	76 41                	jbe    c00165f5 <Phys::freePage(unsigned long)+0x57>
c00165b4:	c1 e8 0c             	shr    eax,0xc
c00165b7:	50                   	push   eax
c00165b8:	89 c3                	mov    ebx,eax
c00165ba:	e8 c3 ff ff ff       	call   c0016582 <Phys::getPageState(unsigned long)>
c00165bf:	5a                   	pop    edx
c00165c0:	84 c0                	test   al,al
c00165c2:	74 20                	je     c00165e4 <Phys::freePage(unsigned long)+0x46>
c00165c4:	83 ec 08             	sub    esp,0x8
c00165c7:	a1 e8 a9 03 c0       	mov    eax,ds:0xc003a9e8
c00165cc:	6a 00                	push   0x0
c00165ce:	83 e8 01             	sub    eax,0x1
c00165d1:	53                   	push   ebx
c00165d2:	a3 e8 a9 03 c0       	mov    ds:0xc003a9e8,eax
c00165d7:	e8 66 ff ff ff       	call   c0016542 <Phys::setPageState(unsigned long, bool)>
c00165dc:	83 c4 10             	add    esp,0x10
c00165df:	83 c4 08             	add    esp,0x8
c00165e2:	5b                   	pop    ebx
c00165e3:	c3                   	ret    
c00165e4:	c7 44 24 10 81 10 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031081
c00165ec:	83 c4 08             	add    esp,0x8
c00165ef:	5b                   	pop    ebx
c00165f0:	e9 b1 9b 00 00       	jmp    c00201a6 <KePanic(char const*)>
c00165f5:	68 00 10 00 00       	push   0x1000
c00165fa:	50                   	push   eax
c00165fb:	e8 07 ff ff ff       	call   c0016507 <Phys::freeDMA(unsigned long, unsigned long)>
c0016600:	59                   	pop    ecx
c0016601:	5b                   	pop    ebx
c0016602:	83 c4 08             	add    esp,0x8
c0016605:	5b                   	pop    ebx
c0016606:	c3                   	ret    

c0016607 <Phys::allocatePage()>:
c0016607:	56                   	push   esi
c0016608:	53                   	push   ebx
c0016609:	83 ec 14             	sub    esp,0x14
c001660c:	8b 35 dc a9 03 c0    	mov    esi,DWORD PTR ds:0xc003a9dc
c0016612:	89 f3                	mov    ebx,esi
c0016614:	eb 0a                	jmp    c0016620 <Phys::allocatePage()+0x19>
c0016616:	89 1d dc a9 03 c0    	mov    DWORD PTR ds:0xc003a9dc,ebx
c001661c:	39 de                	cmp    esi,ebx
c001661e:	74 26                	je     c0016646 <Phys::allocatePage()+0x3f>
c0016620:	53                   	push   ebx
c0016621:	e8 5c ff ff ff       	call   c0016582 <Phys::getPageState(unsigned long)>
c0016626:	5a                   	pop    edx
c0016627:	84 c0                	test   al,al
c0016629:	74 67                	je     c0016692 <Phys::allocatePage()+0x8b>
c001662b:	83 c3 01             	add    ebx,0x1
c001662e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0016634:	75 e0                	jne    c0016616 <Phys::allocatePage()+0xf>
c0016636:	31 db                	xor    ebx,ebx
c0016638:	c7 05 dc a9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003a9dc,0x0
c0016642:	39 de                	cmp    esi,ebx
c0016644:	75 da                	jne    c0016620 <Phys::allocatePage()+0x19>
c0016646:	83 ec 0c             	sub    esp,0xc
c0016649:	a0 00 aa 03 c0       	mov    al,ds:0xc003aa00
c001664e:	83 f0 01             	xor    eax,0x1
c0016651:	a2 00 aa 03 c0       	mov    ds:0xc003aa00,al
c0016656:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001665b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001665e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0016664:	50                   	push   eax
c0016665:	e8 a8 27 00 00       	call   c0018e12 <VAS::scanForEviction()>
c001666a:	83 c4 10             	add    esp,0x10
c001666d:	85 c0                	test   eax,eax
c001666f:	75 48                	jne    c00166b9 <Phys::allocatePage()+0xb2>
c0016671:	83 ec 0c             	sub    esp,0xc
c0016674:	68 04 10 03 c0       	push   0xc0031004
c0016679:	e8 28 9b 00 00       	call   c00201a6 <KePanic(char const*)>
c001667e:	83 c4 10             	add    esp,0x10
c0016681:	8b 1d dc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9dc
c0016687:	53                   	push   ebx
c0016688:	e8 f5 fe ff ff       	call   c0016582 <Phys::getPageState(unsigned long)>
c001668d:	5a                   	pop    edx
c001668e:	84 c0                	test   al,al
c0016690:	75 99                	jne    c001662b <Phys::allocatePage()+0x24>
c0016692:	6a 01                	push   0x1
c0016694:	53                   	push   ebx
c0016695:	e8 a8 fe ff ff       	call   c0016542 <Phys::setPageState(unsigned long, bool)>
c001669a:	8b 15 e8 a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9e8
c00166a0:	a1 dc a9 03 c0       	mov    eax,ds:0xc003a9dc
c00166a5:	83 c2 01             	add    edx,0x1
c00166a8:	59                   	pop    ecx
c00166a9:	89 15 e8 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e8,edx
c00166af:	c1 e0 0c             	shl    eax,0xc
c00166b2:	5b                   	pop    ebx
c00166b3:	83 c4 14             	add    esp,0x14
c00166b6:	5b                   	pop    ebx
c00166b7:	5e                   	pop    esi
c00166b8:	c3                   	ret    
c00166b9:	83 ec 08             	sub    esp,0x8
c00166bc:	89 c2                	mov    edx,eax
c00166be:	6a 01                	push   0x1
c00166c0:	c1 ea 0c             	shr    edx,0xc
c00166c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00166c7:	52                   	push   edx
c00166c8:	e8 75 fe ff ff       	call   c0016542 <Phys::setPageState(unsigned long, bool)>
c00166cd:	83 c4 10             	add    esp,0x10
c00166d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00166d4:	eb dd                	jmp    c00166b3 <Phys::allocatePage()+0xac>

c00166d6 <Phys::allocateContiguousPages(int)>:
c00166d6:	57                   	push   edi
c00166d7:	56                   	push   esi
c00166d8:	53                   	push   ebx
c00166d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166dd:	fa                   	cli    
c00166de:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00166e3:	31 db                	xor    ebx,ebx
c00166e5:	83 c0 01             	add    eax,0x1
c00166e8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00166ed:	85 db                	test   ebx,ebx
c00166ef:	75 11                	jne    c0016702 <Phys::allocateContiguousPages(int)+0x2c>
c00166f1:	e8 11 ff ff ff       	call   c0016607 <Phys::allocatePage()>
c00166f6:	83 fe 01             	cmp    esi,0x1
c00166f9:	89 c7                	mov    edi,eax
c00166fb:	74 21                	je     c001671e <Phys::allocateContiguousPages(int)+0x48>
c00166fd:	bb 01 00 00 00       	mov    ebx,0x1
c0016702:	e8 00 ff ff ff       	call   c0016607 <Phys::allocatePage()>
c0016707:	89 da                	mov    edx,ebx
c0016709:	c1 e2 0c             	shl    edx,0xc
c001670c:	01 fa                	add    edx,edi
c001670e:	39 c2                	cmp    edx,eax
c0016710:	74 22                	je     c0016734 <Phys::allocateContiguousPages(int)+0x5e>
c0016712:	bb 01 00 00 00       	mov    ebx,0x1
c0016717:	89 c7                	mov    edi,eax
c0016719:	83 fe 01             	cmp    esi,0x1
c001671c:	75 e4                	jne    c0016702 <Phys::allocateContiguousPages(int)+0x2c>
c001671e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016723:	83 e8 01             	sub    eax,0x1
c0016726:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001672b:	75 01                	jne    c001672e <Phys::allocateContiguousPages(int)+0x58>
c001672d:	fb                   	sti    
c001672e:	89 f8                	mov    eax,edi
c0016730:	5b                   	pop    ebx
c0016731:	5e                   	pop    esi
c0016732:	5f                   	pop    edi
c0016733:	c3                   	ret    
c0016734:	83 c3 01             	add    ebx,0x1
c0016737:	39 f3                	cmp    ebx,esi
c0016739:	75 b2                	jne    c00166ed <Phys::allocateContiguousPages(int)+0x17>
c001673b:	eb e1                	jmp    c001671e <Phys::allocateContiguousPages(int)+0x48>

c001673d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001673d:	56                   	push   esi
c001673e:	53                   	push   ebx
c001673f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016743:	39 1d e0 a9 03 c0    	cmp    DWORD PTR ds:0xc003a9e0,ebx
c0016749:	73 06                	jae    c0016751 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001674b:	89 1d e0 a9 03 c0    	mov    DWORD PTR ds:0xc003a9e0,ebx
c0016751:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016755:	c1 eb 0c             	shr    ebx,0xc
c0016758:	c1 e8 0c             	shr    eax,0xc
c001675b:	39 d8                	cmp    eax,ebx
c001675d:	73 13                	jae    c0016772 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c001675f:	6a 00                	push   0x0
c0016761:	8d 70 01             	lea    esi,[eax+0x1]
c0016764:	50                   	push   eax
c0016765:	e8 d8 fd ff ff       	call   c0016542 <Phys::setPageState(unsigned long, bool)>
c001676a:	5a                   	pop    edx
c001676b:	89 f0                	mov    eax,esi
c001676d:	59                   	pop    ecx
c001676e:	39 f3                	cmp    ebx,esi
c0016770:	75 ed                	jne    c001675f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0016772:	5b                   	pop    ebx
c0016773:	5e                   	pop    esi
c0016774:	c3                   	ret    

c0016775 <Phys::physicalMemorySetup(unsigned int)>:
c0016775:	55                   	push   ebp
c0016776:	57                   	push   edi
c0016777:	56                   	push   esi
c0016778:	53                   	push   ebx
c0016779:	83 ec 40             	sub    esp,0x40
c001677c:	6a 10                	push   0x10
c001677e:	6a 00                	push   0x0
c0016780:	68 f0 a9 03 c0       	push   0xc003a9f0
c0016785:	e8 66 9d fe ff       	call   c00004f0 <memset>
c001678a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001678e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016793:	05 00 10 00 00       	add    eax,0x1000
c0016798:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001679c:	5b                   	pop    ebx
c001679d:	31 db                	xor    ebx,ebx
c001679f:	5e                   	pop    esi
c00167a0:	50                   	push   eax
c00167a1:	68 97 10 03 c0       	push   0xc0031097
c00167a6:	e8 e2 29 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00167ab:	83 c4 10             	add    esp,0x10
c00167ae:	83 ec 08             	sub    esp,0x8
c00167b1:	6a 01                	push   0x1
c00167b3:	53                   	push   ebx
c00167b4:	83 c3 01             	add    ebx,0x1
c00167b7:	e8 86 fd ff ff       	call   c0016542 <Phys::setPageState(unsigned long, bool)>
c00167bc:	83 c4 10             	add    esp,0x10
c00167bf:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00167c5:	75 e7                	jne    c00167ae <Phys::physicalMemorySetup(unsigned int)+0x39>
c00167c7:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c00167ce:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c00167d5:	c1 e0 08             	shl    eax,0x8
c00167d8:	09 c2                	or     edx,eax
c00167da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00167de:	0f 84 98 01 00 00    	je     c001697c <Phys::physicalMemorySetup(unsigned int)+0x207>
c00167e4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00167e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00167f0:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00167f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00167f9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016801:	eb 1c                	jmp    c001681f <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0016803:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016807:	83 c3 18             	add    ebx,0x18
c001680a:	83 c6 01             	add    esi,0x1
c001680d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0016811:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016815:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0016819:	0f 84 6d 01 00 00    	je     c001698c <Phys::physicalMemorySetup(unsigned int)+0x217>
c001681f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0016822:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016825:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0016828:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001682c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016830:	8b 33                	mov    esi,DWORD PTR [ebx]
c0016832:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0016835:	01 f0                	add    eax,esi
c0016837:	55                   	push   ebp
c0016838:	11 fa                	adc    edx,edi
c001683a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001683e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016842:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016846:	51                   	push   ecx
c0016847:	56                   	push   esi
c0016848:	68 34 10 03 c0       	push   0xc0031034
c001684d:	e8 3b 29 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0016852:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016856:	83 c4 10             	add    esp,0x10
c0016859:	09 f8                	or     eax,edi
c001685b:	0f 85 2b 01 00 00    	jne    c001698c <Phys::physicalMemorySetup(unsigned int)+0x217>
c0016861:	83 fd 01             	cmp    ebp,0x1
c0016864:	75 9d                	jne    c0016803 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016866:	ba 00 00 08 00       	mov    edx,0x80000
c001686b:	89 c1                	mov    ecx,eax
c001686d:	39 f2                	cmp    edx,esi
c001686f:	19 f9                	sbb    ecx,edi
c0016871:	0f 82 ab 00 00 00    	jb     c0016922 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016877:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001687b:	89 c1                	mov    ecx,eax
c001687d:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0016881:	0f 83 9b 00 00 00    	jae    c0016922 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0016887:	ba 00 00 0a 00       	mov    edx,0xa0000
c001688c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016890:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0016894:	39 fa                	cmp    edx,edi
c0016896:	19 e8                	sbb    eax,ebp
c0016898:	0f 82 b0 01 00 00    	jb     c0016a4e <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c001689e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00168a2:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00168a6:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00168ac:	ba ff 1f 00 00       	mov    edx,0x1fff
c00168b1:	83 d5 ff             	adc    ebp,0xffffffff
c00168b4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00168b8:	31 c0                	xor    eax,eax
c00168ba:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00168be:	39 fa                	cmp    edx,edi
c00168c0:	89 c1                	mov    ecx,eax
c00168c2:	19 e9                	sbb    ecx,ebp
c00168c4:	0f 83 39 ff ff ff    	jae    c0016803 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00168ca:	be 00 00 08 00       	mov    esi,0x80000
c00168cf:	83 ec 04             	sub    esp,0x4
c00168d2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00168d6:	57                   	push   edi
c00168d7:	56                   	push   esi
c00168d8:	68 58 10 03 c0       	push   0xc0031058
c00168dd:	e8 ab 28 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00168e2:	5d                   	pop    ebp
c00168e3:	58                   	pop    eax
c00168e4:	57                   	push   edi
c00168e5:	56                   	push   esi
c00168e6:	e8 52 fe ff ff       	call   c001673d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00168eb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00168ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00168f3:	83 c4 0c             	add    esp,0xc
c00168f6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00168fa:	8b 15 ec a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9ec
c0016900:	01 d0                	add    eax,edx
c0016902:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0016909:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c001690e:	52                   	push   edx
c001690f:	50                   	push   eax
c0016910:	68 bd 10 03 c0       	push   0xc00310bd
c0016915:	e8 73 28 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001691a:	83 c4 10             	add    esp,0x10
c001691d:	e9 e1 fe ff ff       	jmp    c0016803 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0016922:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0016926:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001692a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001692e:	39 ea                	cmp    edx,ebp
c0016930:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0016934:	0f 82 c9 fe ff ff    	jb     c0016803 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001693a:	ba ff 1f 00 00       	mov    edx,0x1fff
c001693f:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0016943:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0016947:	0f 83 b6 fe ff ff    	jae    c0016803 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001694d:	39 ee                	cmp    esi,ebp
c001694f:	89 f8                	mov    eax,edi
c0016951:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0016955:	0f 83 74 ff ff ff    	jae    c00168cf <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001695b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001695f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016963:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016967:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001696b:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001696f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016973:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016977:	e9 53 ff ff ff       	jmp    c00168cf <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001697c:	83 ec 0c             	sub    esp,0xc
c001697f:	68 af 10 03 c0       	push   0xc00310af
c0016984:	e8 1d 98 00 00       	call   c00201a6 <KePanic(char const*)>
c0016989:	83 c4 10             	add    esp,0x10
c001698c:	83 ec 08             	sub    esp,0x8
c001698f:	bb 60 00 00 00       	mov    ebx,0x60
c0016994:	6a 00                	push   0x0
c0016996:	6a 06                	push   0x6
c0016998:	e8 a5 fb ff ff       	call   c0016542 <Phys::setPageState(unsigned long, bool)>
c001699d:	58                   	pop    eax
c001699e:	5a                   	pop    edx
c001699f:	6a 00                	push   0x0
c00169a1:	6a 07                	push   0x7
c00169a3:	e8 9a fb ff ff       	call   c0016542 <Phys::setPageState(unsigned long, bool)>
c00169a8:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c00169ae:	83 c4 10             	add    esp,0x10
c00169b1:	83 c1 02             	add    ecx,0x2
c00169b4:	89 0d ec a9 03 c0    	mov    DWORD PTR ds:0xc003a9ec,ecx
c00169ba:	83 ec 08             	sub    esp,0x8
c00169bd:	6a 00                	push   0x0
c00169bf:	53                   	push   ebx
c00169c0:	83 c3 01             	add    ebx,0x1
c00169c3:	e8 7a fb ff ff       	call   c0016542 <Phys::setPageState(unsigned long, bool)>
c00169c8:	83 c4 10             	add    esp,0x10
c00169cb:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00169d1:	75 e7                	jne    c00169ba <Phys::physicalMemorySetup(unsigned int)+0x245>
c00169d3:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c00169d8:	bb 40 01 00 00       	mov    ebx,0x140
c00169dd:	83 c0 20             	add    eax,0x20
c00169e0:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c00169e5:	eb 26                	jmp    c0016a0d <Phys::physicalMemorySetup(unsigned int)+0x298>
c00169e7:	83 ec 08             	sub    esp,0x8
c00169ea:	6a 00                	push   0x0
c00169ec:	53                   	push   ebx
c00169ed:	83 c3 01             	add    ebx,0x1
c00169f0:	e8 4d fb ff ff       	call   c0016542 <Phys::setPageState(unsigned long, bool)>
c00169f5:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c00169fa:	83 c4 10             	add    esp,0x10
c00169fd:	83 c0 01             	add    eax,0x1
c0016a00:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0016a06:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016a0b:	74 07                	je     c0016a14 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c0016a0d:	3d ff 03 00 00       	cmp    eax,0x3ff
c0016a12:	7e d3                	jle    c00169e7 <Phys::physicalMemorySetup(unsigned int)+0x272>
c0016a14:	bb d0 01 00 00       	mov    ebx,0x1d0
c0016a19:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016a1e:	7f 26                	jg     c0016a46 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c0016a20:	83 ec 08             	sub    esp,0x8
c0016a23:	6a 00                	push   0x0
c0016a25:	53                   	push   ebx
c0016a26:	83 c3 01             	add    ebx,0x1
c0016a29:	e8 14 fb ff ff       	call   c0016542 <Phys::setPageState(unsigned long, bool)>
c0016a2e:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c0016a33:	83 c4 10             	add    esp,0x10
c0016a36:	83 c0 01             	add    eax,0x1
c0016a39:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0016a3f:	a3 ec a9 03 c0       	mov    ds:0xc003a9ec,eax
c0016a44:	75 d3                	jne    c0016a19 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c0016a46:	83 c4 3c             	add    esp,0x3c
c0016a49:	5b                   	pop    ebx
c0016a4a:	5e                   	pop    esi
c0016a4b:	5f                   	pop    edi
c0016a4c:	5d                   	pop    ebp
c0016a4d:	c3                   	ret    
c0016a4e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0016a56:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016a5e:	e9 3b fe ff ff       	jmp    c001689e <Phys::physicalMemorySetup(unsigned int)+0x129>
c0016a63:	90                   	nop

c0016a64 <Pipe::isAtty()>:
c0016a64:	31 c0                	xor    eax,eax
c0016a66:	c3                   	ret    
c0016a67:	90                   	nop

c0016a68 <Pipe::~Pipe()>:
c0016a68:	83 ec 0c             	sub    esp,0xc
c0016a6b:	ba 1c 11 03 c0       	mov    edx,0xc003111c
c0016a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a74:	89 10                	mov    DWORD PTR [eax],edx
c0016a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a7a:	83 ec 0c             	sub    esp,0xc
c0016a7d:	50                   	push   eax
c0016a7e:	e8 69 11 00 00       	call   c0017bec <UnixFile::~UnixFile()>
c0016a83:	83 c4 10             	add    esp,0x10
c0016a86:	90                   	nop
c0016a87:	83 c4 0c             	add    esp,0xc
c0016a8a:	c3                   	ret    
c0016a8b:	90                   	nop

c0016a8c <Pipe::~Pipe()>:
c0016a8c:	83 ec 0c             	sub    esp,0xc
c0016a8f:	83 ec 0c             	sub    esp,0xc
c0016a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a96:	e8 cd ff ff ff       	call   c0016a68 <Pipe::~Pipe()>
c0016a9b:	83 c4 10             	add    esp,0x10
c0016a9e:	83 ec 08             	sub    esp,0x8
c0016aa1:	6a 20                	push   0x20
c0016aa3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016aa7:	e8 b4 25 00 00       	call   c0019060 <operator delete(void*, unsigned long)>
c0016aac:	83 c4 10             	add    esp,0x10
c0016aaf:	83 c4 0c             	add    esp,0xc
c0016ab2:	c3                   	ret    
c0016ab3:	90                   	nop

c0016ab4 <Pipe::write(unsigned long long, void*, int*)>:
c0016ab4:	55                   	push   ebp
c0016ab5:	57                   	push   edi
c0016ab6:	56                   	push   esi
c0016ab7:	53                   	push   ebx
c0016ab8:	83 ec 1c             	sub    esp,0x1c
c0016abb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016abf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ac3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0016ac6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016aca:	89 04 24             	mov    DWORD PTR [esp],eax
c0016acd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016ad1:	89 d8                	mov    eax,ebx
c0016ad3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0016ad6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0016ada:	89 d6                	mov    esi,edx
c0016adc:	89 d7                	mov    edi,edx
c0016ade:	c1 ff 1f             	sar    edi,0x1f
c0016ae1:	03 34 24             	add    esi,DWORD PTR [esp]
c0016ae4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0016ae8:	c1 f8 1f             	sar    eax,0x1f
c0016aeb:	39 f3                	cmp    ebx,esi
c0016aed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016af1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016af5:	19 f8                	sbb    eax,edi
c0016af7:	b8 01 00 00 00       	mov    eax,0x1
c0016afc:	72 6e                	jb     c0016b6c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0016afe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016b01:	01 d0                	add    eax,edx
c0016b03:	99                   	cdq    
c0016b04:	f7 fb                	idiv   ebx
c0016b06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b0a:	29 d3                	sub    ebx,edx
c0016b0c:	89 d7                	mov    edi,edx
c0016b0e:	89 de                	mov    esi,ebx
c0016b10:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016b13:	c1 fb 1f             	sar    ebx,0x1f
c0016b16:	39 f2                	cmp    edx,esi
c0016b18:	19 d8                	sbb    eax,ebx
c0016b1a:	b8 00 00 00 00       	mov    eax,0x0
c0016b1f:	72 04                	jb     c0016b25 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0016b21:	89 d0                	mov    eax,edx
c0016b23:	29 f0                	sub    eax,esi
c0016b25:	89 d3                	mov    ebx,edx
c0016b27:	29 c3                	sub    ebx,eax
c0016b29:	74 0b                	je     c0016b36 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0016b2b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0016b2e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016b32:	89 d9                	mov    ecx,ebx
c0016b34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b36:	85 c0                	test   eax,eax
c0016b38:	74 0d                	je     c0016b47 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0016b3a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016b3e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0016b41:	89 de                	mov    esi,ebx
c0016b43:	89 c1                	mov    ecx,eax
c0016b45:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b47:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0016b4a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016b4f:	75 10                	jne    c0016b61 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0016b51:	83 ec 0c             	sub    esp,0xc
c0016b54:	68 d9 10 03 c0       	push   0xc00310d9
c0016b59:	e8 48 96 00 00       	call   c00201a6 <KePanic(char const*)>
c0016b5e:	83 c4 10             	add    esp,0x10
c0016b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016b65:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016b68:	89 08                	mov    DWORD PTR [eax],ecx
c0016b6a:	31 c0                	xor    eax,eax
c0016b6c:	83 c4 1c             	add    esp,0x1c
c0016b6f:	5b                   	pop    ebx
c0016b70:	5e                   	pop    esi
c0016b71:	5f                   	pop    edi
c0016b72:	5d                   	pop    ebp
c0016b73:	c3                   	ret    

c0016b74 <Pipe::read(unsigned long long, void*, int*)>:
c0016b74:	55                   	push   ebp
c0016b75:	57                   	push   edi
c0016b76:	56                   	push   esi
c0016b77:	53                   	push   ebx
c0016b78:	83 ec 1c             	sub    esp,0x1c
c0016b7b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016b7f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016b83:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0016b87:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0016b8a:	89 c8                	mov    eax,ecx
c0016b8c:	99                   	cdq    
c0016b8d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0016b91:	74 24                	je     c0016bb7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016b93:	39 f9                	cmp    ecx,edi
c0016b95:	89 d1                	mov    ecx,edx
c0016b97:	19 f1                	sbb    ecx,esi
c0016b99:	73 1c                	jae    c0016bb7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0016b9b:	fa                   	cli    
c0016b9c:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0016ba2:	e8 dd e5 00 00       	call   c0025184 <schedule()>
c0016ba7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0016bac:	48                   	dec    eax
c0016bad:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0016bb2:	75 d3                	jne    c0016b87 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016bb4:	fb                   	sti    
c0016bb5:	eb d0                	jmp    c0016b87 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0016bb7:	39 f8                	cmp    eax,edi
c0016bb9:	89 d1                	mov    ecx,edx
c0016bbb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016bbe:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016bc2:	19 f1                	sbb    ecx,esi
c0016bc4:	73 07                	jae    c0016bcd <Pipe::read(unsigned long long, void*, int*)+0x59>
c0016bc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0016bc9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016bcd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0016bd0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0016bd3:	29 f7                	sub    edi,esi
c0016bd5:	89 f8                	mov    eax,edi
c0016bd7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016bdb:	99                   	cdq    
c0016bdc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0016bdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016be3:	19 d0                	sbb    eax,edx
c0016be5:	73 07                	jae    c0016bee <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0016be7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016bea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016bee:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0016bf1:	89 ea                	mov    edx,ebp
c0016bf3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0016bf7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016bfc:	74 0d                	je     c0016c0b <Pipe::read(unsigned long long, void*, int*)+0x97>
c0016bfe:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0016c01:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0016c05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c0b:	85 d2                	test   edx,edx
c0016c0d:	74 11                	je     c0016c20 <Pipe::read(unsigned long long, void*, int*)+0xac>
c0016c0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c13:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0016c16:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c1a:	89 d1                	mov    ecx,edx
c0016c1c:	89 c7                	mov    edi,eax
c0016c1e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016c20:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016c23:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0016c26:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0016c29:	99                   	cdq    
c0016c2a:	89 f7                	mov    edi,esi
c0016c2c:	03 04 24             	add    eax,DWORD PTR [esp]
c0016c2f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0016c33:	c1 ff 1f             	sar    edi,0x1f
c0016c36:	57                   	push   edi
c0016c37:	56                   	push   esi
c0016c38:	52                   	push   edx
c0016c39:	50                   	push   eax
c0016c3a:	e8 41 7a 01 00       	call   c002e680 <__umoddi3>
c0016c3f:	83 c4 10             	add    esp,0x10
c0016c42:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0016c45:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0016c4a:	75 10                	jne    c0016c5c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0016c4c:	83 ec 0c             	sub    esp,0xc
c0016c4f:	68 f6 10 03 c0       	push   0xc00310f6
c0016c54:	e8 4d 95 00 00       	call   c00201a6 <KePanic(char const*)>
c0016c59:	83 c4 10             	add    esp,0x10
c0016c5c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016c60:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0016c63:	89 10                	mov    DWORD PTR [eax],edx
c0016c65:	83 c4 1c             	add    esp,0x1c
c0016c68:	31 c0                	xor    eax,eax
c0016c6a:	5b                   	pop    ebx
c0016c6b:	5e                   	pop    esi
c0016c6c:	5f                   	pop    edi
c0016c6d:	5d                   	pop    ebp
c0016c6e:	c3                   	ret    
c0016c6f:	90                   	nop

c0016c70 <Pipe::Pipe(int)>:
c0016c70:	83 ec 0c             	sub    esp,0xc
c0016c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c77:	83 ec 08             	sub    esp,0x8
c0016c7a:	6a 00                	push   0x0
c0016c7c:	50                   	push   eax
c0016c7d:	e8 84 0d 00 00       	call   c0017a06 <UnixFile::UnixFile(int)>
c0016c82:	83 c4 10             	add    esp,0x10
c0016c85:	ba 1c 11 03 c0       	mov    edx,0xc003111c
c0016c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8e:	89 10                	mov    DWORD PTR [eax],edx
c0016c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c94:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c98:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0016ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016caa:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0016cb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cb5:	83 ec 0c             	sub    esp,0xc
c0016cb8:	50                   	push   eax
c0016cb9:	e8 40 f6 ff ff       	call   c00162fe <malloc>
c0016cbe:	83 c4 10             	add    esp,0x10
c0016cc1:	89 c2                	mov    edx,eax
c0016cc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cce:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0016cd2:	90                   	nop
c0016cd3:	83 c4 0c             	add    esp,0xc
c0016cd6:	c3                   	ret    
c0016cd7:	90                   	nop

c0016cd8 <VgaText::isAtty()>:
c0016cd8:	b0 01                	mov    al,0x1
c0016cda:	c3                   	ret    
c0016cdb:	90                   	nop

c0016cdc <VgaText::~VgaText()>:
c0016cdc:	83 ec 0c             	sub    esp,0xc
c0016cdf:	ba 64 11 03 c0       	mov    edx,0xc0031164
c0016ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ce8:	89 10                	mov    DWORD PTR [eax],edx
c0016cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cee:	83 ec 0c             	sub    esp,0xc
c0016cf1:	50                   	push   eax
c0016cf2:	e8 f5 0e 00 00       	call   c0017bec <UnixFile::~UnixFile()>
c0016cf7:	83 c4 10             	add    esp,0x10
c0016cfa:	90                   	nop
c0016cfb:	83 c4 0c             	add    esp,0xc
c0016cfe:	c3                   	ret    
c0016cff:	90                   	nop

c0016d00 <VgaText::~VgaText()>:
c0016d00:	83 ec 0c             	sub    esp,0xc
c0016d03:	83 ec 0c             	sub    esp,0xc
c0016d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d0a:	e8 cd ff ff ff       	call   c0016cdc <VgaText::~VgaText()>
c0016d0f:	83 c4 10             	add    esp,0x10
c0016d12:	83 ec 08             	sub    esp,0x8
c0016d15:	68 84 01 00 00       	push   0x184
c0016d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d1e:	e8 3d 23 00 00       	call   c0019060 <operator delete(void*, unsigned long)>
c0016d23:	83 c4 10             	add    esp,0x10
c0016d26:	83 c4 0c             	add    esp,0xc
c0016d29:	c3                   	ret    

c0016d2a <VgaText::read(unsigned long long, void*, int*)>:
c0016d2a:	83 ec 10             	sub    esp,0x10
c0016d2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016d31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016d35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d39:	e8 ba 53 00 00       	call   c001c0f8 <readKeyboard(VgaText*, char*, unsigned long)>
c0016d3e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016d42:	89 02                	mov    DWORD PTR [edx],eax
c0016d44:	31 c0                	xor    eax,eax
c0016d46:	83 c4 1c             	add    esp,0x1c
c0016d49:	c3                   	ret    

c0016d4a <setTerminalScrollLock(bool)>:
c0016d4a:	c3                   	ret    

c0016d4b <doTerminalCycle()>:
c0016d4b:	c3                   	ret    

c0016d4c <addToTerminalCycle(VgaText*)>:
c0016d4c:	c3                   	ret    

c0016d4d <scrollTerminalScrollLock(int)>:
c0016d4d:	c3                   	ret    

c0016d4e <VgaText::updateTitle()>:
c0016d4e:	c3                   	ret    
c0016d4f:	90                   	nop

c0016d50 <VgaText::load()>:
c0016d50:	c3                   	ret    
c0016d51:	90                   	nop

c0016d52 <VgaText::updateCursor()>:
c0016d52:	83 ec 14             	sub    esp,0x14
c0016d55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d59:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0016d5c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0016d5f:	e8 2c 0f 01 00       	call   c0027c90 <HalConsoleCursorUpdate(int, int)>
c0016d64:	83 c4 1c             	add    esp,0x1c
c0016d67:	c3                   	ret    

c0016d68 <VgaText::doANSI_SGR(int)>:
c0016d68:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d70:	85 d2                	test   edx,edx
c0016d72:	75 0b                	jne    c0016d7f <VgaText::doANSI_SGR(int)+0x17>
c0016d74:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0016d77:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016d7a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d7d:	eb 59                	jmp    c0016dd8 <VgaText::doANSI_SGR(int)+0x70>
c0016d7f:	83 fa 07             	cmp    edx,0x7
c0016d82:	75 0b                	jne    c0016d8f <VgaText::doANSI_SGR(int)+0x27>
c0016d84:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0016d87:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0016d8a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0016d8d:	eb 49                	jmp    c0016dd8 <VgaText::doANSI_SGR(int)+0x70>
c0016d8f:	83 fa 1b             	cmp    edx,0x1b
c0016d92:	74 e0                	je     c0016d74 <VgaText::doANSI_SGR(int)+0xc>
c0016d94:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0016d97:	83 f9 07             	cmp    ecx,0x7
c0016d9a:	77 09                	ja     c0016da5 <VgaText::doANSI_SGR(int)+0x3d>
c0016d9c:	8b 14 8d 60 3a 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc5a0]
c0016da3:	eb 20                	jmp    c0016dc5 <VgaText::doANSI_SGR(int)+0x5d>
c0016da5:	8d 4a d8             	lea    ecx,[edx-0x28]
c0016da8:	83 f9 07             	cmp    ecx,0x7
c0016dab:	77 09                	ja     c0016db6 <VgaText::doANSI_SGR(int)+0x4e>
c0016dad:	8b 14 8d 60 3a 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffcc5a0]
c0016db4:	eb 22                	jmp    c0016dd8 <VgaText::doANSI_SGR(int)+0x70>
c0016db6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0016db9:	83 f9 07             	cmp    ecx,0x7
c0016dbc:	77 0b                	ja     c0016dc9 <VgaText::doANSI_SGR(int)+0x61>
c0016dbe:	8b 14 95 18 39 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc6e8]
c0016dc5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016dc8:	c3                   	ret    
c0016dc9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0016dcc:	83 f9 07             	cmp    ecx,0x7
c0016dcf:	77 0a                	ja     c0016ddb <VgaText::doANSI_SGR(int)+0x73>
c0016dd1:	8b 14 95 f0 38 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffcc710]
c0016dd8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016ddb:	c3                   	ret    

c0016ddc <VgaText::setDefaultBgColour(VgaColour)>:
c0016ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016de0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016de4:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016de7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0016dea:	c3                   	ret    
c0016deb:	90                   	nop

c0016dec <VgaText::setDefaultFgColour(VgaColour)>:
c0016dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016df0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016df4:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0016df7:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0016dfa:	c3                   	ret    
c0016dfb:	90                   	nop

c0016dfc <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0016dfc:	53                   	push   ebx
c0016dfd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016e01:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016e05:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016e09:	51                   	push   ecx
c0016e0a:	e8 cd ff ff ff       	call   c0016ddc <VgaText::setDefaultBgColour(VgaColour)>
c0016e0f:	58                   	pop    eax
c0016e10:	5a                   	pop    edx
c0016e11:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016e15:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016e19:	5b                   	pop    ebx
c0016e1a:	eb d0                	jmp    c0016dec <VgaText::setDefaultFgColour(VgaColour)>

c0016e1c <VgaText::setTitleTextColour(VgaColour)>:
c0016e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e24:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0016e27:	c3                   	ret    

c0016e28 <VgaText::setTitleColour(VgaColour)>:
c0016e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e30:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016e33:	c3                   	ret    

c0016e34 <VgaText::setTitle(char*)>:
c0016e34:	c3                   	ret    
c0016e35:	90                   	nop

c0016e36 <VgaText::combineColours(unsigned char, unsigned char)>:
c0016e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e3a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0016e3f:	83 e0 0f             	and    eax,0xf
c0016e42:	c1 e2 04             	shl    edx,0x4
c0016e45:	09 d0                	or     eax,edx
c0016e47:	c3                   	ret    

c0016e48 <VgaText::scrollScreen()>:
c0016e48:	55                   	push   ebp
c0016e49:	57                   	push   edi
c0016e4a:	56                   	push   esi
c0016e4b:	be 01 00 00 00       	mov    esi,0x1
c0016e50:	53                   	push   ebx
c0016e51:	83 ec 0c             	sub    esp,0xc
c0016e54:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016e58:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0016e5b:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0016e61:	31 ff                	xor    edi,edi
c0016e63:	01 e9                	add    ecx,ebp
c0016e65:	8a 01                	mov    al,BYTE PTR [ecx]
c0016e67:	83 fe 18             	cmp    esi,0x18
c0016e6a:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0016e70:	75 20                	jne    c0016e92 <VgaText::scrollScreen()+0x4a>
c0016e72:	f7 c7 01 00 00 00    	test   edi,0x1
c0016e78:	74 15                	je     c0016e8f <VgaText::scrollScreen()+0x47>
c0016e7a:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016e7e:	50                   	push   eax
c0016e7f:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016e83:	50                   	push   eax
c0016e84:	e8 ad ff ff ff       	call   c0016e36 <VgaText::combineColours(unsigned char, unsigned char)>
c0016e89:	5a                   	pop    edx
c0016e8a:	5a                   	pop    edx
c0016e8b:	88 01                	mov    BYTE PTR [ecx],al
c0016e8d:	eb 03                	jmp    c0016e92 <VgaText::scrollScreen()+0x4a>
c0016e8f:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0016e92:	47                   	inc    edi
c0016e93:	41                   	inc    ecx
c0016e94:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0016e9a:	75 c9                	jne    c0016e65 <VgaText::scrollScreen()+0x1d>
c0016e9c:	46                   	inc    esi
c0016e9d:	83 fe 19             	cmp    esi,0x19
c0016ea0:	75 b9                	jne    c0016e5b <VgaText::scrollScreen()+0x13>
c0016ea2:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c0016ea8:	75 1f                	jne    c0016ec9 <VgaText::scrollScreen()+0x81>
c0016eaa:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0016eae:	74 05                	je     c0016eb5 <VgaText::scrollScreen()+0x6d>
c0016eb0:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0016eb3:	eb 14                	jmp    c0016ec9 <VgaText::scrollScreen()+0x81>
c0016eb5:	50                   	push   eax
c0016eb6:	50                   	push   eax
c0016eb7:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0016ebb:	50                   	push   eax
c0016ebc:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0016ec0:	50                   	push   eax
c0016ec1:	e8 5e 0c 01 00       	call   c0027b24 <HalConsoleScroll(int, int)>
c0016ec6:	83 c4 10             	add    esp,0x10
c0016ec9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0016ecd:	83 c4 0c             	add    esp,0xc
c0016ed0:	5b                   	pop    ebx
c0016ed1:	5e                   	pop    esi
c0016ed2:	5f                   	pop    edi
c0016ed3:	5d                   	pop    ebp
c0016ed4:	e9 79 fe ff ff       	jmp    c0016d52 <VgaText::updateCursor()>
c0016ed9:	90                   	nop

c0016eda <VgaText::combineCharAndColour(char, unsigned char)>:
c0016eda:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0016edf:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0016ee4:	c1 e0 08             	shl    eax,0x8
c0016ee7:	09 d0                	or     eax,edx
c0016ee9:	c3                   	ret    

c0016eea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0016eea:	55                   	push   ebp
c0016eeb:	57                   	push   edi
c0016eec:	56                   	push   esi
c0016eed:	53                   	push   ebx
c0016eee:	83 ec 1c             	sub    esp,0x1c
c0016ef1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016ef5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ef9:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016efd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f01:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016f05:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016f09:	0f b6 c3             	movzx  eax,bl
c0016f0c:	50                   	push   eax
c0016f0d:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0016f12:	50                   	push   eax
c0016f13:	e8 1e ff ff ff       	call   c0016e36 <VgaText::combineColours(unsigned char, unsigned char)>
c0016f18:	5a                   	pop    edx
c0016f19:	0f b6 c0             	movzx  eax,al
c0016f1c:	59                   	pop    ecx
c0016f1d:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0016f22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016f26:	50                   	push   eax
c0016f27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016f2b:	e8 aa ff ff ff       	call   c0016eda <VgaText::combineCharAndColour(char, unsigned char)>
c0016f30:	5a                   	pop    edx
c0016f31:	6b d7 50             	imul   edx,edi,0x50
c0016f34:	59                   	pop    ecx
c0016f35:	01 f2                	add    edx,esi
c0016f37:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016f3a:	0f b7 d2             	movzx  edx,dx
c0016f3d:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0016f41:	39 2d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebp
c0016f47:	75 28                	jne    c0016f71 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0016f49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f4d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0016f51:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c0016f55:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0016f59:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016f5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016f61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016f65:	83 c4 1c             	add    esp,0x1c
c0016f68:	5b                   	pop    ebx
c0016f69:	5e                   	pop    esi
c0016f6a:	5f                   	pop    edi
c0016f6b:	5d                   	pop    ebp
c0016f6c:	e9 bb 0c 01 00       	jmp    c0027c2c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0016f71:	83 c4 1c             	add    esp,0x1c
c0016f74:	5b                   	pop    ebx
c0016f75:	5e                   	pop    esi
c0016f76:	5f                   	pop    edi
c0016f77:	5d                   	pop    ebp
c0016f78:	c3                   	ret    
c0016f79:	90                   	nop

c0016f7a <VgaText::getCursorX()>:
c0016f7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f7e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016f81:	c3                   	ret    

c0016f82 <VgaText::getCursorY()>:
c0016f82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f86:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0016f89:	c3                   	ret    

c0016f8a <VgaText::setCursor(int, int)>:
c0016f8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016f8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016f92:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0016f95:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f99:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016f9c:	e9 b1 fd ff ff       	jmp    c0016d52 <VgaText::updateCursor()>

c0016fa1 <setActiveTerminal(VgaText*)>:
c0016fa1:	53                   	push   ebx
c0016fa2:	83 ec 08             	sub    esp,0x8
c0016fa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016fa9:	85 db                	test   ebx,ebx
c0016fab:	75 11                	jne    c0016fbe <setActiveTerminal(VgaText*)+0x1d>
c0016fad:	c7 44 24 10 30 11 03 c0 	mov    DWORD PTR [esp+0x10],0xc0031130
c0016fb5:	83 c4 08             	add    esp,0x8
c0016fb8:	5b                   	pop    ebx
c0016fb9:	e9 e8 91 00 00       	jmp    c00201a6 <KePanic(char const*)>
c0016fbe:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0016fc3:	85 c0                	test   eax,eax
c0016fc5:	74 0c                	je     c0016fd3 <setActiveTerminal(VgaText*)+0x32>
c0016fc7:	83 ec 0c             	sub    esp,0xc
c0016fca:	50                   	push   eax
c0016fcb:	e8 82 fd ff ff       	call   c0016d52 <VgaText::updateCursor()>
c0016fd0:	83 c4 10             	add    esp,0x10
c0016fd3:	89 1d 08 aa 03 c0    	mov    DWORD PTR ds:0xc003aa08,ebx
c0016fd9:	50                   	push   eax
c0016fda:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0016fdd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0016fe0:	53                   	push   ebx
c0016fe1:	e8 a4 ff ff ff       	call   c0016f8a <VgaText::setCursor(int, int)>
c0016fe6:	83 c4 18             	add    esp,0x18
c0016fe9:	5b                   	pop    ebx
c0016fea:	c3                   	ret    
c0016feb:	90                   	nop

c0016fec <VgaText::clearScreen()>:
c0016fec:	57                   	push   edi
c0016fed:	56                   	push   esi
c0016fee:	31 f6                	xor    esi,esi
c0016ff0:	53                   	push   ebx
c0016ff1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ff5:	52                   	push   edx
c0016ff6:	6a 00                	push   0x0
c0016ff8:	6a 00                	push   0x0
c0016ffa:	53                   	push   ebx
c0016ffb:	e8 8a ff ff ff       	call   c0016f8a <VgaText::setCursor(int, int)>
c0017000:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0017007:	83 c4 10             	add    esp,0x10
c001700a:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001700d:	7e 20                	jle    c001702f <VgaText::clearScreen()+0x43>
c001700f:	31 ff                	xor    edi,edi
c0017011:	50                   	push   eax
c0017012:	50                   	push   eax
c0017013:	56                   	push   esi
c0017014:	57                   	push   edi
c0017015:	47                   	inc    edi
c0017016:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017019:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001701c:	6a 20                	push   0x20
c001701e:	53                   	push   ebx
c001701f:	e8 c6 fe ff ff       	call   c0016eea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017024:	83 c4 20             	add    esp,0x20
c0017027:	83 ff 50             	cmp    edi,0x50
c001702a:	75 e5                	jne    c0017011 <VgaText::clearScreen()+0x25>
c001702c:	46                   	inc    esi
c001702d:	eb db                	jmp    c001700a <VgaText::clearScreen()+0x1e>
c001702f:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0017036:	5b                   	pop    ebx
c0017037:	5e                   	pop    esi
c0017038:	5f                   	pop    edi
c0017039:	c3                   	ret    

c001703a <VgaText::setCursorX(int)>:
c001703a:	83 ec 10             	sub    esp,0x10
c001703d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017041:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0017044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017048:	50                   	push   eax
c0017049:	e8 3c ff ff ff       	call   c0016f8a <VgaText::setCursor(int, int)>
c001704e:	83 c4 1c             	add    esp,0x1c
c0017051:	c3                   	ret    

c0017052 <VgaText::setCursorY(int)>:
c0017052:	83 ec 10             	sub    esp,0x10
c0017055:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017059:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001705d:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0017060:	50                   	push   eax
c0017061:	e8 24 ff ff ff       	call   c0016f8a <VgaText::setCursor(int, int)>
c0017066:	83 c4 1c             	add    esp,0x1c
c0017069:	c3                   	ret    

c001706a <VgaText::incrementCursor(bool)>:
c001706a:	56                   	push   esi
c001706b:	53                   	push   ebx
c001706c:	51                   	push   ecx
c001706d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017071:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017075:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017078:	40                   	inc    eax
c0017079:	83 f8 50             	cmp    eax,0x50
c001707c:	74 05                	je     c0017083 <VgaText::incrementCursor(bool)+0x19>
c001707e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017081:	eb 24                	jmp    c00170a7 <VgaText::incrementCursor(bool)+0x3d>
c0017083:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017086:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001708d:	8d 50 01             	lea    edx,[eax+0x1]
c0017090:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0017093:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017096:	75 0f                	jne    c00170a7 <VgaText::incrementCursor(bool)+0x3d>
c0017098:	83 ec 0c             	sub    esp,0xc
c001709b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001709e:	53                   	push   ebx
c001709f:	e8 a4 fd ff ff       	call   c0016e48 <VgaText::scrollScreen()>
c00170a4:	83 c4 10             	add    esp,0x10
c00170a7:	89 f0                	mov    eax,esi
c00170a9:	84 c0                	test   al,al
c00170ab:	74 0c                	je     c00170b9 <VgaText::incrementCursor(bool)+0x4f>
c00170ad:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00170b1:	5a                   	pop    edx
c00170b2:	5b                   	pop    ebx
c00170b3:	5e                   	pop    esi
c00170b4:	e9 99 fc ff ff       	jmp    c0016d52 <VgaText::updateCursor()>
c00170b9:	58                   	pop    eax
c00170ba:	5b                   	pop    ebx
c00170bb:	5e                   	pop    esi
c00170bc:	c3                   	ret    
c00170bd:	90                   	nop

c00170be <VgaText::decrementCursor(bool)>:
c00170be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00170c2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00170c6:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00170c9:	85 c0                	test   eax,eax
c00170cb:	74 04                	je     c00170d1 <VgaText::decrementCursor(bool)+0x13>
c00170cd:	48                   	dec    eax
c00170ce:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00170d1:	84 c9                	test   cl,cl
c00170d3:	74 09                	je     c00170de <VgaText::decrementCursor(bool)+0x20>
c00170d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00170d9:	e9 74 fc ff ff       	jmp    c0016d52 <VgaText::updateCursor()>
c00170de:	c3                   	ret    
c00170df:	90                   	nop

c00170e0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c00170e0:	53                   	push   ebx
c00170e1:	83 ec 08             	sub    esp,0x8
c00170e4:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00170e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00170f1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00170f5:	83 f8 07             	cmp    eax,0x7
c00170f8:	75 21                	jne    c001711b <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00170fa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017102:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c001710a:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0017112:	83 c4 08             	add    esp,0x8
c0017115:	5b                   	pop    ebx
c0017116:	e9 18 3b 00 00       	jmp    c001ac33 <Krnl::beep(int, int, bool)>
c001711b:	83 f8 0d             	cmp    eax,0xd
c001711e:	75 09                	jne    c0017129 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0017120:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017127:	eb 2d                	jmp    c0017156 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0017129:	83 f8 0a             	cmp    eax,0xa
c001712c:	75 31                	jne    c001715f <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001712e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017131:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017138:	8d 50 01             	lea    edx,[eax+0x1]
c001713b:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c001713e:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0017141:	75 0f                	jne    c0017152 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0017143:	83 ec 0c             	sub    esp,0xc
c0017146:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017149:	53                   	push   ebx
c001714a:	e8 f9 fc ff ff       	call   c0016e48 <VgaText::scrollScreen()>
c001714f:	83 c4 10             	add    esp,0x10
c0017152:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017156:	83 c4 08             	add    esp,0x8
c0017159:	5b                   	pop    ebx
c001715a:	e9 f3 fb ff ff       	jmp    c0016d52 <VgaText::updateCursor()>
c001715f:	83 f8 08             	cmp    eax,0x8
c0017162:	75 25                	jne    c0017189 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0017164:	50                   	push   eax
c0017165:	50                   	push   eax
c0017166:	6a 01                	push   0x1
c0017168:	53                   	push   ebx
c0017169:	e8 50 ff ff ff       	call   c00170be <VgaText::decrementCursor(bool)>
c001716e:	5a                   	pop    edx
c001716f:	59                   	pop    ecx
c0017170:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017173:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017176:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017179:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001717c:	6a 20                	push   0x20
c001717e:	53                   	push   ebx
c001717f:	e8 66 fd ff ff       	call   c0016eea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017184:	83 c4 28             	add    esp,0x28
c0017187:	5b                   	pop    ebx
c0017188:	c3                   	ret    
c0017189:	83 ec 08             	sub    esp,0x8
c001718c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001718f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017192:	51                   	push   ecx
c0017193:	52                   	push   edx
c0017194:	50                   	push   eax
c0017195:	53                   	push   ebx
c0017196:	e8 4f fd ff ff       	call   c0016eea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001719b:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001719f:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00171a7:	83 c4 28             	add    esp,0x28
c00171aa:	5b                   	pop    ebx
c00171ab:	e9 ba fe ff ff       	jmp    c001706a <VgaText::incrementCursor(bool)>

c00171b0 <VgaText::putchar(char)>:
c00171b0:	57                   	push   edi
c00171b1:	56                   	push   esi
c00171b2:	53                   	push   ebx
c00171b3:	83 ec 10             	sub    esp,0x10
c00171b6:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00171ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00171be:	89 f8                	mov    eax,edi
c00171c0:	0f be c0             	movsx  eax,al
c00171c3:	83 f8 5b             	cmp    eax,0x5b
c00171c6:	75 18                	jne    c00171e0 <VgaText::putchar(char)+0x30>
c00171c8:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00171cc:	74 20                	je     c00171ee <VgaText::putchar(char)+0x3e>
c00171ce:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00171d4:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00171db:	e9 c1 00 00 00       	jmp    c00172a1 <VgaText::putchar(char)+0xf1>
c00171e0:	83 f8 1b             	cmp    eax,0x1b
c00171e3:	75 09                	jne    c00171ee <VgaText::putchar(char)+0x3e>
c00171e5:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00171e9:	e9 b3 00 00 00       	jmp    c00172a1 <VgaText::putchar(char)+0xf1>
c00171ee:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00171f1:	84 c9                	test   cl,cl
c00171f3:	0f 84 98 00 00 00    	je     c0017291 <VgaText::putchar(char)+0xe1>
c00171f9:	8d 77 c0             	lea    esi,[edi-0x40]
c00171fc:	89 f2                	mov    edx,esi
c00171fe:	80 fa 3e             	cmp    dl,0x3e
c0017201:	77 78                	ja     c001727b <VgaText::putchar(char)+0xcb>
c0017203:	83 f8 6d             	cmp    eax,0x6d
c0017206:	75 47                	jne    c001724f <VgaText::putchar(char)+0x9f>
c0017208:	31 f6                	xor    esi,esi
c001720a:	31 d2                	xor    edx,edx
c001720c:	31 c0                	xor    eax,eax
c001720e:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0017211:	7e 2d                	jle    c0017240 <VgaText::putchar(char)+0x90>
c0017213:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0017218:	83 fa 3b             	cmp    edx,0x3b
c001721b:	75 17                	jne    c0017234 <VgaText::putchar(char)+0x84>
c001721d:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0017221:	50                   	push   eax
c0017222:	53                   	push   ebx
c0017223:	e8 40 fb ff ff       	call   c0016d68 <VgaText::doANSI_SGR(int)>
c0017228:	59                   	pop    ecx
c0017229:	31 d2                	xor    edx,edx
c001722b:	5f                   	pop    edi
c001722c:	31 c0                	xor    eax,eax
c001722e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0017232:	eb 09                	jmp    c001723d <VgaText::putchar(char)+0x8d>
c0017234:	6b c0 0a             	imul   eax,eax,0xa
c0017237:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c001723b:	88 ca                	mov    dl,cl
c001723d:	46                   	inc    esi
c001723e:	eb ce                	jmp    c001720e <VgaText::putchar(char)+0x5e>
c0017240:	84 d2                	test   dl,dl
c0017242:	74 2f                	je     c0017273 <VgaText::putchar(char)+0xc3>
c0017244:	50                   	push   eax
c0017245:	53                   	push   ebx
c0017246:	e8 1d fb ff ff       	call   c0016d68 <VgaText::doANSI_SGR(int)>
c001724b:	58                   	pop    eax
c001724c:	5a                   	pop    edx
c001724d:	eb 24                	jmp    c0017273 <VgaText::putchar(char)+0xc3>
c001724f:	83 f8 4a             	cmp    eax,0x4a
c0017252:	75 1f                	jne    c0017273 <VgaText::putchar(char)+0xc3>
c0017254:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0017258:	75 19                	jne    c0017273 <VgaText::putchar(char)+0xc3>
c001725a:	83 ec 0c             	sub    esp,0xc
c001725d:	53                   	push   ebx
c001725e:	e8 89 fd ff ff       	call   c0016fec <VgaText::clearScreen()>
c0017263:	83 c4 0c             	add    esp,0xc
c0017266:	6a 00                	push   0x0
c0017268:	6a 00                	push   0x0
c001726a:	53                   	push   ebx
c001726b:	e8 1a fd ff ff       	call   c0016f8a <VgaText::setCursor(int, int)>
c0017270:	83 c4 10             	add    esp,0x10
c0017273:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0017279:	eb 26                	jmp    c00172a1 <VgaText::putchar(char)+0xf1>
c001727b:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c001727e:	83 f8 0e             	cmp    eax,0xe
c0017281:	7f 1e                	jg     c00172a1 <VgaText::putchar(char)+0xf1>
c0017283:	8d 48 01             	lea    ecx,[eax+0x1]
c0017286:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0017289:	89 f9                	mov    ecx,edi
c001728b:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c001728f:	eb 10                	jmp    c00172a1 <VgaText::putchar(char)+0xf1>
c0017291:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017294:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0017297:	50                   	push   eax
c0017298:	53                   	push   ebx
c0017299:	e8 42 fe ff ff       	call   c00170e0 <VgaText::putchar(char, VgaColour, VgaColour)>
c001729e:	83 c4 10             	add    esp,0x10
c00172a1:	83 c4 10             	add    esp,0x10
c00172a4:	5b                   	pop    ebx
c00172a5:	5e                   	pop    esi
c00172a6:	5f                   	pop    edi
c00172a7:	c3                   	ret    

c00172a8 <VgaText::putx(unsigned int)>:
c00172a8:	57                   	push   edi
c00172a9:	b9 11 00 00 00       	mov    ecx,0x11
c00172ae:	56                   	push   esi
c00172af:	be 3e 11 03 c0       	mov    esi,0xc003113e
c00172b4:	53                   	push   ebx
c00172b5:	83 ec 20             	sub    esp,0x20
c00172b8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00172bc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00172c0:	fc                   	cld    
c00172c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172c3:	be 08 00 00 00       	mov    esi,0x8
c00172c8:	50                   	push   eax
c00172c9:	50                   	push   eax
c00172ca:	89 d8                	mov    eax,ebx
c00172cc:	c1 e3 04             	shl    ebx,0x4
c00172cf:	c1 e8 1c             	shr    eax,0x1c
c00172d2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00172d7:	50                   	push   eax
c00172d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172dc:	e8 cf fe ff ff       	call   c00171b0 <VgaText::putchar(char)>
c00172e1:	83 c4 10             	add    esp,0x10
c00172e4:	4e                   	dec    esi
c00172e5:	75 e1                	jne    c00172c8 <VgaText::putx(unsigned int)+0x20>
c00172e7:	83 c4 20             	add    esp,0x20
c00172ea:	5b                   	pop    ebx
c00172eb:	5e                   	pop    esi
c00172ec:	5f                   	pop    edi
c00172ed:	c3                   	ret    

c00172ee <VgaText::puts(char const*)>:
c00172ee:	53                   	push   ebx
c00172ef:	83 ec 08             	sub    esp,0x8
c00172f2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00172f6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00172f9:	85 c0                	test   eax,eax
c00172fb:	74 12                	je     c001730f <VgaText::puts(char const*)+0x21>
c00172fd:	43                   	inc    ebx
c00172fe:	51                   	push   ecx
c00172ff:	51                   	push   ecx
c0017300:	50                   	push   eax
c0017301:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017305:	e8 a6 fe ff ff       	call   c00171b0 <VgaText::putchar(char)>
c001730a:	83 c4 10             	add    esp,0x10
c001730d:	eb e7                	jmp    c00172f6 <VgaText::puts(char const*)+0x8>
c001730f:	83 c4 08             	add    esp,0x8
c0017312:	5b                   	pop    ebx
c0017313:	c3                   	ret    

c0017314 <VgaText::write(unsigned long long, void*, int*)>:
c0017314:	55                   	push   ebp
c0017315:	57                   	push   edi
c0017316:	56                   	push   esi
c0017317:	53                   	push   ebx
c0017318:	83 ec 0c             	sub    esp,0xc
c001731b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001731f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017323:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017327:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001732e:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0017331:	39 eb                	cmp    ebx,ebp
c0017333:	74 13                	je     c0017348 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0017335:	43                   	inc    ebx
c0017336:	50                   	push   eax
c0017337:	50                   	push   eax
c0017338:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001733c:	50                   	push   eax
c001733d:	56                   	push   esi
c001733e:	e8 6d fe ff ff       	call   c00171b0 <VgaText::putchar(char)>
c0017343:	83 c4 10             	add    esp,0x10
c0017346:	eb e9                	jmp    c0017331 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0017348:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001734f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017353:	89 38                	mov    DWORD PTR [eax],edi
c0017355:	83 c4 0c             	add    esp,0xc
c0017358:	31 c0                	xor    eax,eax
c001735a:	5b                   	pop    ebx
c001735b:	5e                   	pop    esi
c001735c:	5f                   	pop    edi
c001735d:	5d                   	pop    ebp
c001735e:	c3                   	ret    
c001735f:	90                   	nop

c0017360 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0017360:	55                   	push   ebp
c0017361:	57                   	push   edi
c0017362:	56                   	push   esi
c0017363:	53                   	push   ebx
c0017364:	83 ec 0c             	sub    esp,0xc
c0017367:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001736b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0017370:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0017377:	50                   	push   eax
c0017378:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001737d:	50                   	push   eax
c001737e:	e8 b3 fa ff ff       	call   c0016e36 <VgaText::combineColours(unsigned char, unsigned char)>
c0017383:	5a                   	pop    edx
c0017384:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017388:	59                   	pop    ecx
c0017389:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001738c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0017390:	0f b7 f6             	movzx  esi,si
c0017393:	0f b6 e8             	movzx  ebp,al
c0017396:	01 f6                	add    esi,esi
c0017398:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001739b:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001739e:	85 c0                	test   eax,eax
c00173a0:	0f 84 ef 00 00 00    	je     c0017495 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c00173a6:	83 f8 0d             	cmp    eax,0xd
c00173a9:	75 0c                	jne    c00173b7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c00173ab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173b2:	e9 d8 00 00 00       	jmp    c001748f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00173b7:	83 f8 0a             	cmp    eax,0xa
c00173ba:	75 44                	jne    c0017400 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c00173bc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00173bf:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00173c6:	8d 48 01             	lea    ecx,[eax+0x1]
c00173c9:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00173cc:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00173cf:	75 0f                	jne    c00173e0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c00173d1:	83 ec 0c             	sub    esp,0xc
c00173d4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00173d7:	53                   	push   ebx
c00173d8:	e8 6b fa ff ff       	call   c0016e48 <VgaText::scrollScreen()>
c00173dd:	83 c4 10             	add    esp,0x10
c00173e0:	83 ec 0c             	sub    esp,0xc
c00173e3:	53                   	push   ebx
c00173e4:	e8 69 f9 ff ff       	call   c0016d52 <VgaText::updateCursor()>
c00173e9:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00173ed:	83 c4 10             	add    esp,0x10
c00173f0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00173f3:	0f b7 f6             	movzx  esi,si
c00173f6:	01 f6                	add    esi,esi
c00173f8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00173fb:	e9 8f 00 00 00       	jmp    c001748f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017400:	83 f8 08             	cmp    eax,0x8
c0017403:	75 34                	jne    c0017439 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0017405:	51                   	push   ecx
c0017406:	51                   	push   ecx
c0017407:	6a 01                	push   0x1
c0017409:	53                   	push   ebx
c001740a:	e8 af fc ff ff       	call   c00170be <VgaText::decrementCursor(bool)>
c001740f:	5e                   	pop    esi
c0017410:	58                   	pop    eax
c0017411:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017414:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017417:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001741a:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001741d:	6a 20                	push   0x20
c001741f:	53                   	push   ebx
c0017420:	e8 c5 fa ff ff       	call   c0016eea <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0017425:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017429:	83 c4 20             	add    esp,0x20
c001742c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001742f:	0f b7 f6             	movzx  esi,si
c0017432:	01 f6                	add    esi,esi
c0017434:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0017437:	eb 56                	jmp    c001748f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017439:	52                   	push   edx
c001743a:	52                   	push   edx
c001743b:	55                   	push   ebp
c001743c:	50                   	push   eax
c001743d:	e8 98 fa ff ff       	call   c0016eda <VgaText::combineCharAndColour(char, unsigned char)>
c0017442:	83 c4 10             	add    esp,0x10
c0017445:	66 89 06             	mov    WORD PTR [esi],ax
c0017448:	39 1d 08 aa 03 c0    	cmp    DWORD PTR ds:0xc003aa08,ebx
c001744e:	75 1d                	jne    c001746d <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0017450:	83 ec 0c             	sub    esp,0xc
c0017453:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0017456:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0017459:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001745d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017461:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0017464:	50                   	push   eax
c0017465:	e8 c2 07 01 00       	call   c0027c2c <HalConsoleWriteCharacter(char, int, int, int, int)>
c001746a:	83 c4 20             	add    esp,0x20
c001746d:	83 c6 02             	add    esi,0x2
c0017470:	50                   	push   eax
c0017471:	50                   	push   eax
c0017472:	6a 00                	push   0x0
c0017474:	53                   	push   ebx
c0017475:	e8 f0 fb ff ff       	call   c001706a <VgaText::incrementCursor(bool)>
c001747a:	83 c4 10             	add    esp,0x10
c001747d:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0017481:	75 0c                	jne    c001748f <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0017483:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0017487:	0f b7 f6             	movzx  esi,si
c001748a:	01 f6                	add    esi,esi
c001748c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001748f:	47                   	inc    edi
c0017490:	e9 06 ff ff ff       	jmp    c001739b <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0017495:	83 ec 0c             	sub    esp,0xc
c0017498:	53                   	push   ebx
c0017499:	e8 b4 f8 ff ff       	call   c0016d52 <VgaText::updateCursor()>
c001749e:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00174a5:	83 c4 1c             	add    esp,0x1c
c00174a8:	5b                   	pop    ebx
c00174a9:	5e                   	pop    esi
c00174aa:	5f                   	pop    edi
c00174ab:	5d                   	pop    ebp
c00174ac:	c3                   	ret    
c00174ad:	90                   	nop

c00174ae <VgaText::VgaText(char const*)>:
c00174ae:	56                   	push   esi
c00174af:	53                   	push   ebx
c00174b0:	83 ec 04             	sub    esp,0x4
c00174b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174b7:	83 ec 08             	sub    esp,0x8
c00174ba:	6a 00                	push   0x0
c00174bc:	50                   	push   eax
c00174bd:	e8 44 05 00 00       	call   c0017a06 <UnixFile::UnixFile(int)>
c00174c2:	83 c4 10             	add    esp,0x10
c00174c5:	ba 64 11 03 c0       	mov    edx,0xc0031164
c00174ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ce:	89 10                	mov    DWORD PTR [eax],edx
c00174d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174d4:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00174db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174df:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00174e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174ea:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00174ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174f2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00174f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174fa:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0017501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017505:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001750c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017510:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0017517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001751b:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0017522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017526:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001752d:	83 ec 0c             	sub    esp,0xc
c0017530:	6a 01                	push   0x1
c0017532:	e8 1e 09 00 00       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c0017537:	83 c4 10             	add    esp,0x10
c001753a:	89 c2                	mov    edx,eax
c001753c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017540:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017543:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c0017549:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001754d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017550:	89 c6                	mov    esi,eax
c0017552:	e8 b0 f0 ff ff       	call   c0016607 <Phys::allocatePage()>
c0017557:	68 05 0c 00 00       	push   0xc05
c001755c:	56                   	push   esi
c001755d:	50                   	push   eax
c001755e:	53                   	push   ebx
c001755f:	e8 04 10 00 00       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017564:	83 c4 10             	add    esp,0x10
c0017567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001756b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001756e:	83 ec 04             	sub    esp,0x4
c0017571:	68 a0 0f 00 00       	push   0xfa0
c0017576:	6a 00                	push   0x0
c0017578:	50                   	push   eax
c0017579:	e8 72 8f fe ff       	call   c00004f0 <memset>
c001757e:	83 c4 10             	add    esp,0x10
c0017581:	83 ec 04             	sub    esp,0x4
c0017584:	6a 00                	push   0x0
c0017586:	6a 07                	push   0x7
c0017588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001758c:	e8 6b f8 ff ff       	call   c0016dfc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017591:	83 c4 10             	add    esp,0x10
c0017594:	83 ec 04             	sub    esp,0x4
c0017597:	6a 00                	push   0x0
c0017599:	6a 00                	push   0x0
c001759b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001759f:	e8 e6 f9 ff ff       	call   c0016f8a <VgaText::setCursor(int, int)>
c00175a4:	83 c4 10             	add    esp,0x10
c00175a7:	83 ec 0c             	sub    esp,0xc
c00175aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175ae:	e8 39 fa ff ff       	call   c0016fec <VgaText::clearScreen()>
c00175b3:	83 c4 10             	add    esp,0x10
c00175b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ba:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00175be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175c2:	05 82 00 00 00       	add    eax,0x82
c00175c7:	83 ec 04             	sub    esp,0x4
c00175ca:	68 80 00 00 00       	push   0x80
c00175cf:	6a 00                	push   0x0
c00175d1:	50                   	push   eax
c00175d2:	e8 19 8f fe ff       	call   c00004f0 <memset>
c00175d7:	83 c4 10             	add    esp,0x10
c00175da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175de:	05 02 01 00 00       	add    eax,0x102
c00175e3:	83 ec 04             	sub    esp,0x4
c00175e6:	68 80 00 00 00       	push   0x80
c00175eb:	6a 00                	push   0x0
c00175ed:	50                   	push   eax
c00175ee:	e8 fd 8e fe ff       	call   c00004f0 <memset>
c00175f3:	83 c4 10             	add    esp,0x10
c00175f6:	90                   	nop
c00175f7:	83 c4 04             	add    esp,0x4
c00175fa:	5b                   	pop    ebx
c00175fb:	5e                   	pop    esi
c00175fc:	c3                   	ret    
c00175fd:	90                   	nop

c00175fe <VgaText::receiveKey(unsigned char)>:
c00175fe:	55                   	push   ebp
c00175ff:	57                   	push   edi
c0017600:	56                   	push   esi
c0017601:	53                   	push   ebx
c0017602:	83 ec 2c             	sub    esp,0x2c
c0017605:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0017609:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001760d:	89 ef                	mov    edi,ebp
c001760f:	81 e7 ff 00 00 00    	and    edi,0xff
c0017615:	0f 84 66 01 00 00    	je     c0017781 <VgaText::receiveKey(unsigned char)+0x183>
c001761b:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0017621:	83 ff 08             	cmp    edi,0x8
c0017624:	75 73                	jne    c0017699 <VgaText::receiveKey(unsigned char)+0x9b>
c0017626:	83 ec 0c             	sub    esp,0xc
c0017629:	56                   	push   esi
c001762a:	e8 41 8f fe ff       	call   c0000570 <strlen>
c001762f:	83 c4 10             	add    esp,0x10
c0017632:	85 c0                	test   eax,eax
c0017634:	0f 84 02 01 00 00    	je     c001773c <VgaText::receiveKey(unsigned char)+0x13e>
c001763a:	50                   	push   eax
c001763b:	50                   	push   eax
c001763c:	6a 08                	push   0x8
c001763e:	53                   	push   ebx
c001763f:	e8 6c fb ff ff       	call   c00171b0 <VgaText::putchar(char)>
c0017644:	89 34 24             	mov    DWORD PTR [esp],esi
c0017647:	e8 24 8f fe ff       	call   c0000570 <strlen>
c001764c:	83 c4 10             	add    esp,0x10
c001764f:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0017657:	83 fa 0d             	cmp    edx,0xd
c001765a:	89 d0                	mov    eax,edx
c001765c:	0f 95 c1             	setne  cl
c001765f:	83 fa 1f             	cmp    edx,0x1f
c0017662:	0f 9e c2             	setle  dl
c0017665:	0f b6 d2             	movzx  edx,dl
c0017668:	85 ca                	test   edx,ecx
c001766a:	74 17                	je     c0017683 <VgaText::receiveKey(unsigned char)+0x85>
c001766c:	83 e8 08             	sub    eax,0x8
c001766f:	3c 02                	cmp    al,0x2
c0017671:	76 10                	jbe    c0017683 <VgaText::receiveKey(unsigned char)+0x85>
c0017673:	55                   	push   ebp
c0017674:	55                   	push   ebp
c0017675:	68 4f 11 03 c0       	push   0xc003114f
c001767a:	53                   	push   ebx
c001767b:	e8 6e fc ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0017680:	83 c4 10             	add    esp,0x10
c0017683:	83 ec 0c             	sub    esp,0xc
c0017686:	56                   	push   esi
c0017687:	e8 e4 8e fe ff       	call   c0000570 <strlen>
c001768c:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0017694:	e9 a0 00 00 00       	jmp    c0017739 <VgaText::receiveKey(unsigned char)+0x13b>
c0017699:	83 ec 0c             	sub    esp,0xc
c001769c:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c00176a2:	50                   	push   eax
c00176a3:	e8 c8 8e fe ff       	call   c0000570 <strlen>
c00176a8:	89 34 24             	mov    DWORD PTR [esp],esi
c00176ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176af:	e8 bc 8e fe ff       	call   c0000570 <strlen>
c00176b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00176b8:	83 c4 10             	add    esp,0x10
c00176bb:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c00176bf:	3d 80 00 00 00       	cmp    eax,0x80
c00176c4:	0f 87 b7 00 00 00    	ja     c0017781 <VgaText::receiveKey(unsigned char)+0x183>
c00176ca:	8d 45 ff             	lea    eax,[ebp-0x1]
c00176cd:	8d 55 f7             	lea    edx,[ebp-0x9]
c00176d0:	3c 1e                	cmp    al,0x1e
c00176d2:	0f 96 c0             	setbe  al
c00176d5:	80 fa 01             	cmp    dl,0x1
c00176d8:	0f 97 c2             	seta   dl
c00176db:	0f b6 d2             	movzx  edx,dl
c00176de:	85 c2                	test   edx,eax
c00176e0:	74 2e                	je     c0017710 <VgaText::receiveKey(unsigned char)+0x112>
c00176e2:	83 ff 0d             	cmp    edi,0xd
c00176e5:	74 29                	je     c0017710 <VgaText::receiveKey(unsigned char)+0x112>
c00176e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00176ea:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00176ed:	68 55 11 03 c0       	push   0xc0031155
c00176f2:	53                   	push   ebx
c00176f3:	e8 68 fc ff ff       	call   c0017360 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00176f8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00176fb:	8d 45 40             	lea    eax,[ebp+0x40]
c00176fe:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0017701:	0f b6 c0             	movzx  eax,al
c0017704:	50                   	push   eax
c0017705:	53                   	push   ebx
c0017706:	e8 d5 f9 ff ff       	call   c00170e0 <VgaText::putchar(char, VgaColour, VgaColour)>
c001770b:	83 c4 20             	add    esp,0x20
c001770e:	eb 11                	jmp    c0017721 <VgaText::receiveKey(unsigned char)+0x123>
c0017710:	89 e8                	mov    eax,ebp
c0017712:	51                   	push   ecx
c0017713:	0f be c0             	movsx  eax,al
c0017716:	51                   	push   ecx
c0017717:	50                   	push   eax
c0017718:	53                   	push   ebx
c0017719:	e8 92 fa ff ff       	call   c00171b0 <VgaText::putchar(char)>
c001771e:	83 c4 10             	add    esp,0x10
c0017721:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017726:	89 e8                	mov    eax,ebp
c0017728:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001772c:	52                   	push   edx
c001772d:	52                   	push   edx
c001772e:	8d 44 24 26          	lea    eax,[esp+0x26]
c0017732:	50                   	push   eax
c0017733:	56                   	push   esi
c0017734:	e8 07 91 fe ff       	call   c0000840 <strcat>
c0017739:	83 c4 10             	add    esp,0x10
c001773c:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0017742:	b0 01                	mov    al,0x1
c0017744:	83 ff 1c             	cmp    edi,0x1c
c0017747:	77 0e                	ja     c0017757 <VgaText::receiveKey(unsigned char)+0x159>
c0017749:	b8 08 04 00 10       	mov    eax,0x10000408
c001774e:	89 f9                	mov    ecx,edi
c0017750:	d3 e8                	shr    eax,cl
c0017752:	f7 d0                	not    eax
c0017754:	83 e0 01             	and    eax,0x1
c0017757:	84 c0                	test   al,al
c0017759:	74 04                	je     c001775f <VgaText::receiveKey(unsigned char)+0x161>
c001775b:	84 d2                	test   dl,dl
c001775d:	74 22                	je     c0017781 <VgaText::receiveKey(unsigned char)+0x183>
c001775f:	81 c3 02 01 00 00    	add    ebx,0x102
c0017765:	50                   	push   eax
c0017766:	50                   	push   eax
c0017767:	56                   	push   esi
c0017768:	53                   	push   ebx
c0017769:	e8 d2 90 fe ff       	call   c0000840 <strcat>
c001776e:	83 c4 0c             	add    esp,0xc
c0017771:	68 80 00 00 00       	push   0x80
c0017776:	6a 00                	push   0x0
c0017778:	56                   	push   esi
c0017779:	e8 72 8d fe ff       	call   c00004f0 <memset>
c001777e:	83 c4 10             	add    esp,0x10
c0017781:	83 c4 2c             	add    esp,0x2c
c0017784:	5b                   	pop    ebx
c0017785:	5e                   	pop    esi
c0017786:	5f                   	pop    edi
c0017787:	5d                   	pop    ebp
c0017788:	c3                   	ret    
c0017789:	90                   	nop

c001778a <VgaText::doUpdate()>:
c001778a:	c3                   	ret    
c001778b:	90                   	nop

c001778c <TSS::TSS()>:
c001778c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017790:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017797:	90                   	nop
c0017798:	c3                   	ret    
c0017799:	90                   	nop
c001779a:	66 90                	xchg   ax,ax

c001779c <TSS::setESP(unsigned long)>:
c001779c:	55                   	push   ebp
c001779d:	89 e5                	mov    ebp,esp
c001779f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177a5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00177a8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00177ab:	90                   	nop
c00177ac:	5d                   	pop    ebp
c00177ad:	c3                   	ret    
c00177ae:	66 90                	xchg   ax,ax

c00177b0 <TSS::flush()>:
c00177b0:	55                   	push   ebp
c00177b1:	89 e5                	mov    ebp,esp
c00177b3:	83 ec 10             	sub    esp,0x10
c00177b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00177bb:	83 c8 03             	or     eax,0x3
c00177be:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00177c2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00177c6:	66 89 d0             	mov    ax,dx
c00177c9:	0f 00 d8             	ltr    ax
c00177cc:	90                   	nop
c00177cd:	c9                   	leave  
c00177ce:	c3                   	ret    
c00177cf:	90                   	nop

c00177d0 <TSS::setup(unsigned long, unsigned long)>:
c00177d0:	55                   	push   ebp
c00177d1:	89 e5                	mov    ebp,esp
c00177d3:	83 ec 18             	sub    esp,0x18
c00177d6:	83 ec 0c             	sub    esp,0xc
c00177d9:	6a 68                	push   0x68
c00177db:	e8 1e eb ff ff       	call   c00162fe <malloc>
c00177e0:	83 c4 10             	add    esp,0x10
c00177e3:	89 c2                	mov    edx,eax
c00177e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00177eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00177ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00177f1:	83 ec 04             	sub    esp,0x4
c00177f4:	6a 68                	push   0x68
c00177f6:	6a 00                	push   0x0
c00177f8:	50                   	push   eax
c00177f9:	e8 f2 8c fe ff       	call   c00004f0 <memset>
c00177fe:	83 c4 10             	add    esp,0x10
c0017801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017804:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017807:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001780d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017810:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017813:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0017819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001781c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001781f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017822:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017828:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001782b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0017831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017834:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017837:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001783d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017840:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017843:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0017849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001784c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001784f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0017855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017858:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001785b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0017861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017864:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017867:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001786d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017870:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017873:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0017876:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0017879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001787c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001787f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0017882:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017885:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017888:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001788b:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0017892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017895:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017898:	0f 20 da             	mov    edx,cr3
c001789b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001789e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00178a1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00178a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00178aa:	83 ec 08             	sub    esp,0x8
c00178ad:	50                   	push   eax
c00178ae:	8d 45 ec             	lea    eax,[ebp-0x14]
c00178b1:	50                   	push   eax
c00178b2:	e8 b3 e2 ff ff       	call   c0015b6a <GDTEntry::setBase(unsigned int)>
c00178b7:	83 c4 10             	add    esp,0x10
c00178ba:	83 ec 08             	sub    esp,0x8
c00178bd:	6a 68                	push   0x68
c00178bf:	8d 45 ec             	lea    eax,[ebp-0x14]
c00178c2:	50                   	push   eax
c00178c3:	e8 be e2 ff ff       	call   c0015b86 <GDTEntry::setLimit(unsigned int)>
c00178c8:	83 c4 10             	add    esp,0x10
c00178cb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00178cf:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00178d2:	83 e0 0f             	and    eax,0xf
c00178d5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00178d8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00178db:	83 c8 40             	or     eax,0x40
c00178de:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00178e1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00178e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00178ec:	05 78 01 00 00       	add    eax,0x178
c00178f1:	83 ec 04             	sub    esp,0x4
c00178f4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00178f7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00178fa:	50                   	push   eax
c00178fb:	e8 ba e2 ff ff       	call   c0015bba <GDT::addEntry(GDTEntry)>
c0017900:	83 c4 10             	add    esp,0x10
c0017903:	89 c2                	mov    edx,eax
c0017905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017908:	89 10                	mov    DWORD PTR [eax],edx
c001790a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001790f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017915:	05 78 01 00 00       	add    eax,0x178
c001791a:	83 ec 0c             	sub    esp,0xc
c001791d:	50                   	push   eax
c001791e:	e8 c1 e2 ff ff       	call   c0015be4 <GDT::flush()>
c0017923:	83 c4 10             	add    esp,0x10
c0017926:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017929:	8b 00                	mov    eax,DWORD PTR [eax]
c001792b:	c9                   	leave  
c001792c:	c3                   	ret    
c001792d:	90                   	nop

c001792e <ReservedFilename::read(unsigned long long, void*, int*)>:
c001792e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017932:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017936:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017939:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001793e:	75 08                	jne    c0017948 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0017940:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0017946:	eb 38                	jmp    c0017980 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0017948:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001794d:	75 17                	jne    c0017966 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001794f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017954:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017957:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001795d:	8b 10                	mov    edx,DWORD PTR [eax]
c001795f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017963:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0017966:	89 c1                	mov    ecx,eax
c0017968:	83 e1 fd             	and    ecx,0xfffffffd
c001796b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0017971:	74 cd                	je     c0017940 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017973:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0017978:	83 e0 ef             	and    eax,0xffffffef
c001797b:	83 f8 08             	cmp    eax,0x8
c001797e:	76 c0                	jbe    c0017940 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0017980:	31 c0                	xor    eax,eax
c0017982:	c3                   	ret    
c0017983:	90                   	nop

c0017984 <ReservedFilename::isAtty()>:
c0017984:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017988:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001798b:	31 c0                	xor    eax,eax
c001798d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0017993:	74 09                	je     c001799e <ReservedFilename::isAtty()+0x1a>
c0017995:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001799b:	0f 94 c0             	sete   al
c001799e:	c3                   	ret    
c001799f:	90                   	nop

c00179a0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00179a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00179a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00179ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00179af:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00179b4:	75 08                	jne    c00179be <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00179b6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00179bc:	eb 3d                	jmp    c00179fb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00179be:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00179c3:	75 17                	jne    c00179dc <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00179c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00179cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179d3:	8b 10                	mov    edx,DWORD PTR [eax]
c00179d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179d9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00179dc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00179e1:	75 04                	jne    c00179e7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00179e3:	89 0a                	mov    DWORD PTR [edx],ecx
c00179e5:	eb 14                	jmp    c00179fb <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00179e7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00179ec:	74 c8                	je     c00179b6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00179ee:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00179f3:	83 e0 ef             	and    eax,0xffffffef
c00179f6:	83 f8 08             	cmp    eax,0x8
c00179f9:	76 bb                	jbe    c00179b6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00179fb:	31 c0                	xor    eax,eax
c00179fd:	c3                   	ret    

c00179fe <UnixFile::getFileDescriptor()>:
c00179fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017a02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a05:	c3                   	ret    

c0017a06 <UnixFile::UnixFile(int)>:
c0017a06:	53                   	push   ebx
c0017a07:	83 ec 28             	sub    esp,0x28
c0017a0a:	ba 2c 12 03 c0       	mov    edx,0xc003122c
c0017a0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a13:	89 10                	mov    DWORD PTR [eax],edx
c0017a15:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0017a1d:	0f 8f 90 01 00 00    	jg     c0017bb3 <UnixFile::UnixFile(int)+0x1ad>
c0017a23:	a1 a0 3a 03 c0       	mov    eax,ds:0xc0033aa0
c0017a28:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2b:	89 15 a0 3a 03 c0    	mov    DWORD PTR ds:0xc0033aa0,edx
c0017a31:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a35:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0017a38:	83 ec 08             	sub    esp,0x8
c0017a3b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0017a3f:	68 98 aa 03 c0       	push   0xc003aa98
c0017a44:	e8 1f 6e 01 00       	call   c002e868 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017a49:	83 c4 10             	add    esp,0x10
c0017a4c:	a0 94 aa 03 c0       	mov    al,ds:0xc003aa94
c0017a51:	83 f0 01             	xor    eax,0x1
c0017a54:	0f b6 c0             	movzx  eax,al
c0017a57:	85 c0                	test   eax,eax
c0017a59:	0f 84 55 01 00 00    	je     c0017bb4 <UnixFile::UnixFile(int)+0x1ae>
c0017a5f:	c6 05 94 aa 03 c0 01 	mov    BYTE PTR ds:0xc003aa94,0x1
c0017a66:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0017a6e:	83 ec 0c             	sub    esp,0xc
c0017a71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a75:	e8 84 e8 ff ff       	call   c00162fe <malloc>
c0017a7a:	83 c4 10             	add    esp,0x10
c0017a7d:	89 c3                	mov    ebx,eax
c0017a7f:	83 ec 08             	sub    esp,0x8
c0017a82:	68 03 ff ff 0f       	push   0xfffff03
c0017a87:	53                   	push   ebx
c0017a88:	e8 2d 01 00 00       	call   c0017bba <ReservedFilename::ReservedFilename(int)>
c0017a8d:	83 c4 10             	add    esp,0x10
c0017a90:	89 1d 8c aa 03 c0    	mov    DWORD PTR ds:0xc003aa8c,ebx
c0017a96:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0017a9e:	83 ec 0c             	sub    esp,0xc
c0017aa1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017aa5:	e8 54 e8 ff ff       	call   c00162fe <malloc>
c0017aaa:	83 c4 10             	add    esp,0x10
c0017aad:	89 c3                	mov    ebx,eax
c0017aaf:	83 ec 08             	sub    esp,0x8
c0017ab2:	68 01 ff ff 0f       	push   0xfffff01
c0017ab7:	53                   	push   ebx
c0017ab8:	e8 fd 00 00 00       	call   c0017bba <ReservedFilename::ReservedFilename(int)>
c0017abd:	83 c4 10             	add    esp,0x10
c0017ac0:	89 1d 90 aa 03 c0    	mov    DWORD PTR ds:0xc003aa90,ebx
c0017ac6:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0017ace:	83 ec 0c             	sub    esp,0xc
c0017ad1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017ad5:	e8 24 e8 ff ff       	call   c00162fe <malloc>
c0017ada:	83 c4 10             	add    esp,0x10
c0017add:	89 c3                	mov    ebx,eax
c0017adf:	83 ec 08             	sub    esp,0x8
c0017ae2:	68 00 ff ff 0f       	push   0xfffff00
c0017ae7:	53                   	push   ebx
c0017ae8:	e8 cd 00 00 00       	call   c0017bba <ReservedFilename::ReservedFilename(int)>
c0017aed:	83 c4 10             	add    esp,0x10
c0017af0:	89 1d 84 aa 03 c0    	mov    DWORD PTR ds:0xc003aa84,ebx
c0017af6:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0017afe:	83 ec 0c             	sub    esp,0xc
c0017b01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b05:	e8 f4 e7 ff ff       	call   c00162fe <malloc>
c0017b0a:	83 c4 10             	add    esp,0x10
c0017b0d:	89 c3                	mov    ebx,eax
c0017b0f:	83 ec 08             	sub    esp,0x8
c0017b12:	68 02 ff ff 0f       	push   0xfffff02
c0017b17:	53                   	push   ebx
c0017b18:	e8 9d 00 00 00       	call   c0017bba <ReservedFilename::ReservedFilename(int)>
c0017b1d:	83 c4 10             	add    esp,0x10
c0017b20:	89 1d 88 aa 03 c0    	mov    DWORD PTR ds:0xc003aa88,ebx
c0017b26:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b2e:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0017b33:	7f 7f                	jg     c0017bb4 <UnixFile::UnixFile(int)+0x1ae>
c0017b35:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0017b3d:	83 ec 0c             	sub    esp,0xc
c0017b40:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b44:	e8 b5 e7 ff ff       	call   c00162fe <malloc>
c0017b49:	83 c4 10             	add    esp,0x10
c0017b4c:	89 c3                	mov    ebx,eax
c0017b4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b52:	05 10 ff ff 0f       	add    eax,0xfffff10
c0017b57:	83 ec 08             	sub    esp,0x8
c0017b5a:	50                   	push   eax
c0017b5b:	53                   	push   ebx
c0017b5c:	e8 59 00 00 00       	call   c0017bba <ReservedFilename::ReservedFilename(int)>
c0017b61:	83 c4 10             	add    esp,0x10
c0017b64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b68:	89 1c 85 60 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55a0],ebx
c0017b6f:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0017b77:	83 ec 0c             	sub    esp,0xc
c0017b7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b7e:	e8 7b e7 ff ff       	call   c00162fe <malloc>
c0017b83:	83 c4 10             	add    esp,0x10
c0017b86:	89 c3                	mov    ebx,eax
c0017b88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b8c:	05 20 ff ff 0f       	add    eax,0xfffff20
c0017b91:	83 ec 08             	sub    esp,0x8
c0017b94:	50                   	push   eax
c0017b95:	53                   	push   ebx
c0017b96:	e8 1f 00 00 00       	call   c0017bba <ReservedFilename::ReservedFilename(int)>
c0017b9b:	83 c4 10             	add    esp,0x10
c0017b9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ba2:	89 1c 85 20 aa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc55e0],ebx
c0017ba9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0017bae:	e9 7b ff ff ff       	jmp    c0017b2e <UnixFile::UnixFile(int)+0x128>
c0017bb3:	90                   	nop
c0017bb4:	83 c4 28             	add    esp,0x28
c0017bb7:	5b                   	pop    ebx
c0017bb8:	c3                   	ret    
c0017bb9:	90                   	nop

c0017bba <ReservedFilename::ReservedFilename(int)>:
c0017bba:	83 ec 0c             	sub    esp,0xc
c0017bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bc1:	83 ec 08             	sub    esp,0x8
c0017bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bc8:	50                   	push   eax
c0017bc9:	e8 38 fe ff ff       	call   c0017a06 <UnixFile::UnixFile(int)>
c0017bce:	83 c4 10             	add    esp,0x10
c0017bd1:	ba 48 12 03 c0       	mov    edx,0xc0031248
c0017bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bda:	89 10                	mov    DWORD PTR [eax],edx
c0017bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017be0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017be7:	90                   	nop
c0017be8:	83 c4 0c             	add    esp,0xc
c0017beb:	c3                   	ret    

c0017bec <UnixFile::~UnixFile()>:
c0017bec:	83 ec 1c             	sub    esp,0x1c
c0017bef:	ba 2c 12 03 c0       	mov    edx,0xc003122c
c0017bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bf8:	89 10                	mov    DWORD PTR [eax],edx
c0017bfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c01:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0017c06:	7f 76                	jg     c0017c7e <UnixFile::~UnixFile()+0x92>
c0017c08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017c10:	83 ec 0c             	sub    esp,0xc
c0017c13:	68 98 aa 03 c0       	push   0xc003aa98
c0017c18:	e8 1f 6d 01 00       	call   c002e93c <LinkedList<UnixFile>::getFirstElement()>
c0017c1d:	83 c4 10             	add    esp,0x10
c0017c20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c24:	83 ec 0c             	sub    esp,0xc
c0017c27:	68 98 aa 03 c0       	push   0xc003aa98
c0017c2c:	e8 13 6d 01 00       	call   c002e944 <LinkedList<UnixFile>::removeFirst()>
c0017c31:	83 c4 10             	add    esp,0x10
c0017c34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c38:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0017c3c:	74 43                	je     c0017c81 <UnixFile::~UnixFile()+0x95>
c0017c3e:	83 ec 08             	sub    esp,0x8
c0017c41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c45:	68 98 aa 03 c0       	push   0xc003aa98
c0017c4a:	e8 19 6c 01 00       	call   c002e868 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0017c4f:	83 c4 10             	add    esp,0x10
c0017c52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c56:	8d 50 01             	lea    edx,[eax+0x1]
c0017c59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c5d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0017c62:	0f 94 c0             	sete   al
c0017c65:	0f b6 c0             	movzx  eax,al
c0017c68:	85 c0                	test   eax,eax
c0017c6a:	74 a4                	je     c0017c10 <UnixFile::~UnixFile()+0x24>
c0017c6c:	83 ec 0c             	sub    esp,0xc
c0017c6f:	68 04 12 03 c0       	push   0xc0031204
c0017c74:	e8 2d 85 00 00       	call   c00201a6 <KePanic(char const*)>
c0017c79:	83 c4 10             	add    esp,0x10
c0017c7c:	eb 92                	jmp    c0017c10 <UnixFile::~UnixFile()+0x24>
c0017c7e:	90                   	nop
c0017c7f:	eb 01                	jmp    c0017c82 <UnixFile::~UnixFile()+0x96>
c0017c81:	90                   	nop
c0017c82:	90                   	nop
c0017c83:	83 c4 1c             	add    esp,0x1c
c0017c86:	c3                   	ret    
c0017c87:	90                   	nop

c0017c88 <UnixFile::~UnixFile()>:
c0017c88:	83 ec 0c             	sub    esp,0xc
c0017c8b:	83 ec 0c             	sub    esp,0xc
c0017c8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c92:	e8 55 ff ff ff       	call   c0017bec <UnixFile::~UnixFile()>
c0017c97:	83 c4 10             	add    esp,0x10
c0017c9a:	83 ec 08             	sub    esp,0x8
c0017c9d:	6a 0c                	push   0xc
c0017c9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ca3:	e8 b8 13 00 00       	call   c0019060 <operator delete(void*, unsigned long)>
c0017ca8:	83 c4 10             	add    esp,0x10
c0017cab:	83 c4 0c             	add    esp,0xc
c0017cae:	c3                   	ret    
c0017caf:	90                   	nop

c0017cb0 <ReservedFilename::~ReservedFilename()>:
c0017cb0:	83 ec 0c             	sub    esp,0xc
c0017cb3:	ba 48 12 03 c0       	mov    edx,0xc0031248
c0017cb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cbc:	89 10                	mov    DWORD PTR [eax],edx
c0017cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cc2:	83 ec 0c             	sub    esp,0xc
c0017cc5:	50                   	push   eax
c0017cc6:	e8 21 ff ff ff       	call   c0017bec <UnixFile::~UnixFile()>
c0017ccb:	83 c4 10             	add    esp,0x10
c0017cce:	90                   	nop
c0017ccf:	83 c4 0c             	add    esp,0xc
c0017cd2:	c3                   	ret    
c0017cd3:	90                   	nop

c0017cd4 <ReservedFilename::~ReservedFilename()>:
c0017cd4:	83 ec 0c             	sub    esp,0xc
c0017cd7:	83 ec 0c             	sub    esp,0xc
c0017cda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cde:	e8 cd ff ff ff       	call   c0017cb0 <ReservedFilename::~ReservedFilename()>
c0017ce3:	83 c4 10             	add    esp,0x10
c0017ce6:	83 ec 08             	sub    esp,0x8
c0017ce9:	6a 0c                	push   0xc
c0017ceb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cef:	e8 6c 13 00 00       	call   c0019060 <operator delete(void*, unsigned long)>
c0017cf4:	83 c4 10             	add    esp,0x10
c0017cf7:	83 c4 0c             	add    esp,0xc
c0017cfa:	c3                   	ret    

c0017cfb <KeGetFileFromDescriptor(int)>:
c0017cfb:	53                   	push   ebx
c0017cfc:	83 ec 08             	sub    esp,0x8
c0017cff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d03:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0017d09:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0017d0f:	7f 2c                	jg     c0017d3d <KeGetFileFromDescriptor(int)+0x42>
c0017d11:	83 ec 0c             	sub    esp,0xc
c0017d14:	68 98 aa 03 c0       	push   0xc003aa98
c0017d19:	e8 1e 6c 01 00       	call   c002e93c <LinkedList<UnixFile>::getFirstElement()>
c0017d1e:	83 c4 10             	add    esp,0x10
c0017d21:	85 c0                	test   eax,eax
c0017d23:	75 04                	jne    c0017d29 <KeGetFileFromDescriptor(int)+0x2e>
c0017d25:	31 c0                	xor    eax,eax
c0017d27:	eb 6e                	jmp    c0017d97 <KeGetFileFromDescriptor(int)+0x9c>
c0017d29:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0017d2c:	74 69                	je     c0017d97 <KeGetFileFromDescriptor(int)+0x9c>
c0017d2e:	52                   	push   edx
c0017d2f:	52                   	push   edx
c0017d30:	50                   	push   eax
c0017d31:	68 98 aa 03 c0       	push   0xc003aa98
c0017d36:	e8 ab 6c 01 00       	call   c002e9e6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0017d3b:	eb e1                	jmp    c0017d1e <KeGetFileFromDescriptor(int)+0x23>
c0017d3d:	a1 8c aa 03 c0       	mov    eax,ds:0xc003aa8c
c0017d42:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0017d48:	74 4d                	je     c0017d97 <KeGetFileFromDescriptor(int)+0x9c>
c0017d4a:	a1 90 aa 03 c0       	mov    eax,ds:0xc003aa90
c0017d4f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0017d55:	74 40                	je     c0017d97 <KeGetFileFromDescriptor(int)+0x9c>
c0017d57:	a1 88 aa 03 c0       	mov    eax,ds:0xc003aa88
c0017d5c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0017d62:	74 33                	je     c0017d97 <KeGetFileFromDescriptor(int)+0x9c>
c0017d64:	a1 84 aa 03 c0       	mov    eax,ds:0xc003aa84
c0017d69:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0017d6f:	74 26                	je     c0017d97 <KeGetFileFromDescriptor(int)+0x9c>
c0017d71:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0017d77:	83 f8 08             	cmp    eax,0x8
c0017d7a:	77 09                	ja     c0017d85 <KeGetFileFromDescriptor(int)+0x8a>
c0017d7c:	8b 04 85 60 aa 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc55a0]
c0017d83:	eb 12                	jmp    c0017d97 <KeGetFileFromDescriptor(int)+0x9c>
c0017d85:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0017d8b:	83 fb 08             	cmp    ebx,0x8
c0017d8e:	77 95                	ja     c0017d25 <KeGetFileFromDescriptor(int)+0x2a>
c0017d90:	8b 04 9d 20 aa 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc55e0]
c0017d97:	83 c4 08             	add    esp,0x8
c0017d9a:	5b                   	pop    ebx
c0017d9b:	c3                   	ret    

c0017d9c <__static_initialization_and_destruction_0(int, int)>:
c0017d9c:	83 ec 0c             	sub    esp,0xc
c0017d9f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017da4:	75 34                	jne    c0017dda <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017da6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0017dae:	75 2a                	jne    c0017dda <__static_initialization_and_destruction_0(int, int)+0x3e>
c0017db0:	83 ec 0c             	sub    esp,0xc
c0017db3:	68 98 aa 03 c0       	push   0xc003aa98
c0017db8:	e8 69 6a 01 00       	call   c002e826 <LinkedList<UnixFile>::LinkedList()>
c0017dbd:	83 c4 10             	add    esp,0x10
c0017dc0:	83 ec 04             	sub    esp,0x4
c0017dc3:	68 18 3a 03 c0       	push   0xc0033a18
c0017dc8:	68 98 aa 03 c0       	push   0xc003aa98
c0017dcd:	68 24 e8 02 c0       	push   0xc002e824
c0017dd2:	e8 39 12 00 00       	call   c0019010 <__cxa_atexit>
c0017dd7:	83 c4 10             	add    esp,0x10
c0017dda:	90                   	nop
c0017ddb:	83 c4 0c             	add    esp,0xc
c0017dde:	c3                   	ret    

c0017ddf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0017ddf:	83 ec 0c             	sub    esp,0xc
c0017de2:	83 ec 08             	sub    esp,0x8
c0017de5:	68 ff ff 00 00       	push   0xffff
c0017dea:	6a 01                	push   0x1
c0017dec:	e8 ab ff ff ff       	call   c0017d9c <__static_initialization_and_destruction_0(int, int)>
c0017df1:	83 c4 10             	add    esp,0x10
c0017df4:	83 c4 0c             	add    esp,0xc
c0017df7:	c3                   	ret    

c0017df8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0017df8:	53                   	push   ebx
c0017df9:	8b 15 a8 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033aa8
c0017dff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017e07:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0017e0d:	89 d8                	mov    eax,ebx
c0017e0f:	d1 e8                	shr    eax,1
c0017e11:	01 d0                	add    eax,edx
c0017e13:	80 e3 01             	and    bl,0x1
c0017e16:	8a 10                	mov    dl,BYTE PTR [eax]
c0017e18:	75 09                	jne    c0017e23 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0017e1a:	83 e2 f0             	and    edx,0xfffffff0
c0017e1d:	09 ca                	or     edx,ecx
c0017e1f:	88 10                	mov    BYTE PTR [eax],dl
c0017e21:	5b                   	pop    ebx
c0017e22:	c3                   	ret    
c0017e23:	83 e2 0f             	and    edx,0xf
c0017e26:	0f b6 c9             	movzx  ecx,cl
c0017e29:	c1 e1 04             	shl    ecx,0x4
c0017e2c:	09 ca                	or     edx,ecx
c0017e2e:	88 10                	mov    BYTE PTR [eax],dl
c0017e30:	5b                   	pop    ebx
c0017e31:	c3                   	ret    

c0017e32 <Virt::getPageState(unsigned long)>:
c0017e32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017e36:	8b 0d a8 3a 03 c0    	mov    ecx,DWORD PTR ds:0xc0033aa8
c0017e3c:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0017e42:	89 d0                	mov    eax,edx
c0017e44:	d1 e8                	shr    eax,1
c0017e46:	80 e2 01             	and    dl,0x1
c0017e49:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0017e4c:	74 03                	je     c0017e51 <Virt::getPageState(unsigned long)+0x1f>
c0017e4e:	c1 e8 04             	shr    eax,0x4
c0017e51:	83 e0 0f             	and    eax,0xf
c0017e54:	c3                   	ret    

c0017e55 <Virt::allocateKernelVirtualPages(int)>:
c0017e55:	55                   	push   ebp
c0017e56:	31 ed                	xor    ebp,ebp
c0017e58:	57                   	push   edi
c0017e59:	31 ff                	xor    edi,edi
c0017e5b:	56                   	push   esi
c0017e5c:	53                   	push   ebx
c0017e5d:	31 db                	xor    ebx,ebx
c0017e5f:	83 ec 0c             	sub    esp,0xc
c0017e62:	8b 35 a4 3a 03 c0    	mov    esi,DWORD PTR ds:0xc0033aa4
c0017e68:	56                   	push   esi
c0017e69:	e8 c4 ff ff ff       	call   c0017e32 <Virt::getPageState(unsigned long)>
c0017e6e:	5a                   	pop    edx
c0017e6f:	84 c0                	test   al,al
c0017e71:	75 41                	jne    c0017eb4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0017e73:	85 db                	test   ebx,ebx
c0017e75:	75 02                	jne    c0017e79 <Virt::allocateKernelVirtualPages(int)+0x24>
c0017e77:	89 f5                	mov    ebp,esi
c0017e79:	83 c3 01             	add    ebx,0x1
c0017e7c:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017e80:	74 5f                	je     c0017ee1 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0017e82:	83 c6 01             	add    esi,0x1
c0017e85:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017e8b:	76 34                	jbe    c0017ec1 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0017e8d:	c7 05 a4 3a 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0033aa4,0xc8000
c0017e97:	f7 c7 01 00 00 00    	test   edi,0x1
c0017e9d:	75 2a                	jne    c0017ec9 <Virt::allocateKernelVirtualPages(int)+0x74>
c0017e9f:	be 00 80 0c 00       	mov    esi,0xc8000
c0017ea4:	bf 01 00 00 00       	mov    edi,0x1
c0017ea9:	56                   	push   esi
c0017eaa:	e8 83 ff ff ff       	call   c0017e32 <Virt::getPageState(unsigned long)>
c0017eaf:	5a                   	pop    edx
c0017eb0:	84 c0                	test   al,al
c0017eb2:	74 bf                	je     c0017e73 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0017eb4:	31 db                	xor    ebx,ebx
c0017eb6:	83 c6 01             	add    esi,0x1
c0017eb9:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0017ebf:	77 cc                	ja     c0017e8d <Virt::allocateKernelVirtualPages(int)+0x38>
c0017ec1:	89 35 a4 3a 03 c0    	mov    DWORD PTR ds:0xc0033aa4,esi
c0017ec7:	eb 9f                	jmp    c0017e68 <Virt::allocateKernelVirtualPages(int)+0x13>
c0017ec9:	83 ec 0c             	sub    esp,0xc
c0017ecc:	68 5c 12 03 c0       	push   0xc003125c
c0017ed1:	e8 d0 82 00 00       	call   c00201a6 <KePanic(char const*)>
c0017ed6:	8b 35 a4 3a 03 c0    	mov    esi,DWORD PTR ds:0xc0033aa4
c0017edc:	83 c4 10             	add    esp,0x10
c0017edf:	eb 87                	jmp    c0017e68 <Virt::allocateKernelVirtualPages(int)+0x13>
c0017ee1:	89 2d a4 3a 03 c0    	mov    DWORD PTR ds:0xc0033aa4,ebp
c0017ee7:	83 fb 01             	cmp    ebx,0x1
c0017eea:	74 6f                	je     c0017f5b <Virt::allocateKernelVirtualPages(int)+0x106>
c0017eec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017ef0:	85 c9                	test   ecx,ecx
c0017ef2:	74 49                	je     c0017f3d <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017ef4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017ef8:	89 e8                	mov    eax,ebp
c0017efa:	31 db                	xor    ebx,ebx
c0017efc:	8d 79 ff             	lea    edi,[ecx-0x1]
c0017eff:	eb 18                	jmp    c0017f19 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0017f01:	6a 01                	push   0x1
c0017f03:	83 c3 01             	add    ebx,0x1
c0017f06:	50                   	push   eax
c0017f07:	e8 ec fe ff ff       	call   c0017df8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f0c:	58                   	pop    eax
c0017f0d:	5a                   	pop    edx
c0017f0e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017f12:	74 29                	je     c0017f3d <Virt::allocateKernelVirtualPages(int)+0xe8>
c0017f14:	a1 a4 3a 03 c0       	mov    eax,ds:0xc0033aa4
c0017f19:	8d 50 01             	lea    edx,[eax+0x1]
c0017f1c:	85 db                	test   ebx,ebx
c0017f1e:	89 15 a4 3a 03 c0    	mov    DWORD PTR ds:0xc0033aa4,edx
c0017f24:	74 24                	je     c0017f4a <Virt::allocateKernelVirtualPages(int)+0xf5>
c0017f26:	39 df                	cmp    edi,ebx
c0017f28:	75 d7                	jne    c0017f01 <Virt::allocateKernelVirtualPages(int)+0xac>
c0017f2a:	6a 03                	push   0x3
c0017f2c:	83 c3 01             	add    ebx,0x1
c0017f2f:	50                   	push   eax
c0017f30:	e8 c3 fe ff ff       	call   c0017df8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f35:	59                   	pop    ecx
c0017f36:	5e                   	pop    esi
c0017f37:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0017f3b:	75 d7                	jne    c0017f14 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0017f3d:	83 c4 0c             	add    esp,0xc
c0017f40:	89 e8                	mov    eax,ebp
c0017f42:	5b                   	pop    ebx
c0017f43:	c1 e0 0c             	shl    eax,0xc
c0017f46:	5e                   	pop    esi
c0017f47:	5f                   	pop    edi
c0017f48:	5d                   	pop    ebp
c0017f49:	c3                   	ret    
c0017f4a:	6a 02                	push   0x2
c0017f4c:	bb 01 00 00 00       	mov    ebx,0x1
c0017f51:	50                   	push   eax
c0017f52:	e8 a1 fe ff ff       	call   c0017df8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f57:	58                   	pop    eax
c0017f58:	5a                   	pop    edx
c0017f59:	eb b9                	jmp    c0017f14 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0017f5b:	6a 04                	push   0x4
c0017f5d:	8d 45 01             	lea    eax,[ebp+0x1]
c0017f60:	55                   	push   ebp
c0017f61:	a3 a4 3a 03 c0       	mov    ds:0xc0033aa4,eax
c0017f66:	e8 8d fe ff ff       	call   c0017df8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0017f6b:	5b                   	pop    ebx
c0017f6c:	89 e8                	mov    eax,ebp
c0017f6e:	5e                   	pop    esi
c0017f6f:	c1 e0 0c             	shl    eax,0xc
c0017f72:	83 c4 0c             	add    esp,0xc
c0017f75:	5b                   	pop    ebx
c0017f76:	5e                   	pop    esi
c0017f77:	5f                   	pop    edi
c0017f78:	5d                   	pop    ebp
c0017f79:	c3                   	ret    

c0017f7a <Virt::freeSwapfilePage(unsigned long)>:
c0017f7a:	53                   	push   ebx
c0017f7b:	8b 15 ac aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaac
c0017f81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017f85:	b8 01 00 00 00       	mov    eax,0x1
c0017f8a:	89 cb                	mov    ebx,ecx
c0017f8c:	d3 e0                	shl    eax,cl
c0017f8e:	c1 eb 05             	shr    ebx,0x5
c0017f91:	f7 d0                	not    eax
c0017f93:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0017f96:	21 c1                	and    ecx,eax
c0017f98:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0017f9b:	5b                   	pop    ebx
c0017f9c:	c3                   	ret    

c0017f9d <Virt::swapIDToSector(unsigned long)>:
c0017f9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017fa1:	8b 15 ac 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033aac
c0017fa7:	8b 0d b4 3a 03 c0    	mov    ecx,DWORD PTR ds:0xc0033ab4
c0017fad:	0f af c2             	imul   eax,edx
c0017fb0:	01 c8                	add    eax,ecx
c0017fb2:	c3                   	ret    

c0017fb3 <Virt::allocateSwapfilePage()>:
c0017fb3:	55                   	push   ebp
c0017fb4:	31 d2                	xor    edx,edx
c0017fb6:	57                   	push   edi
c0017fb7:	56                   	push   esi
c0017fb8:	53                   	push   ebx
c0017fb9:	83 ec 0c             	sub    esp,0xc
c0017fbc:	8b 0d ac 3a 03 c0    	mov    ecx,DWORD PTR ds:0xc0033aac
c0017fc2:	a1 b0 3a 03 c0       	mov    eax,ds:0xc0033ab0
c0017fc7:	f7 f1                	div    ecx
c0017fc9:	39 0d b0 3a 03 c0    	cmp    DWORD PTR ds:0xc0033ab0,ecx
c0017fcf:	72 2f                	jb     c0018000 <Virt::allocateSwapfilePage()+0x4d>
c0017fd1:	8b 35 ac aa 03 c0    	mov    esi,DWORD PTR ds:0xc003aaac
c0017fd7:	8b 16                	mov    edx,DWORD PTR [esi]
c0017fd9:	f6 c2 01             	test   dl,0x1
c0017fdc:	74 3e                	je     c001801c <Virt::allocateSwapfilePage()+0x69>
c0017fde:	31 c9                	xor    ecx,ecx
c0017fe0:	bf 01 00 00 00       	mov    edi,0x1
c0017fe5:	eb 12                	jmp    c0017ff9 <Virt::allocateSwapfilePage()+0x46>
c0017fe7:	89 fd                	mov    ebp,edi
c0017fe9:	89 ca                	mov    edx,ecx
c0017feb:	d3 e5                	shl    ebp,cl
c0017fed:	c1 ea 05             	shr    edx,0x5
c0017ff0:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0017ff3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017ff5:	85 ea                	test   edx,ebp
c0017ff7:	74 2c                	je     c0018025 <Virt::allocateSwapfilePage()+0x72>
c0017ff9:	83 c1 01             	add    ecx,0x1
c0017ffc:	39 c8                	cmp    eax,ecx
c0017ffe:	77 e7                	ja     c0017fe7 <Virt::allocateSwapfilePage()+0x34>
c0018000:	83 ec 0c             	sub    esp,0xc
c0018003:	68 f0 14 03 c0       	push   0xc00314f0
c0018008:	e8 99 81 00 00       	call   c00201a6 <KePanic(char const*)>
c001800d:	83 c4 10             	add    esp,0x10
c0018010:	31 c9                	xor    ecx,ecx
c0018012:	83 c4 0c             	add    esp,0xc
c0018015:	89 c8                	mov    eax,ecx
c0018017:	5b                   	pop    ebx
c0018018:	5e                   	pop    esi
c0018019:	5f                   	pop    edi
c001801a:	5d                   	pop    ebp
c001801b:	c3                   	ret    
c001801c:	89 f3                	mov    ebx,esi
c001801e:	bd 01 00 00 00       	mov    ebp,0x1
c0018023:	31 c9                	xor    ecx,ecx
c0018025:	09 ea                	or     edx,ebp
c0018027:	89 c8                	mov    eax,ecx
c0018029:	89 13                	mov    DWORD PTR [ebx],edx
c001802b:	83 c4 0c             	add    esp,0xc
c001802e:	5b                   	pop    ebx
c001802f:	5e                   	pop    esi
c0018030:	5f                   	pop    edi
c0018031:	5d                   	pop    ebp
c0018032:	c3                   	ret    

c0018033 <Virt::virtualMemorySetup()>:
c0018033:	53                   	push   ebx
c0018034:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018039:	6a 0f                	push   0xf
c001803b:	53                   	push   ebx
c001803c:	83 c3 01             	add    ebx,0x1
c001803f:	e8 b4 fd ff ff       	call   c0017df8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018044:	58                   	pop    eax
c0018045:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001804b:	5a                   	pop    edx
c001804c:	75 eb                	jne    c0018039 <Virt::virtualMemorySetup()+0x6>
c001804e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0018053:	6a 00                	push   0x0
c0018055:	53                   	push   ebx
c0018056:	83 c3 01             	add    ebx,0x1
c0018059:	e8 9a fd ff ff       	call   c0017df8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001805e:	59                   	pop    ecx
c001805f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0018065:	58                   	pop    eax
c0018066:	75 eb                	jne    c0018053 <Virt::virtualMemorySetup()+0x20>
c0018068:	bb 00 00 0d 00       	mov    ebx,0xd0000
c001806d:	6a 0f                	push   0xf
c001806f:	53                   	push   ebx
c0018070:	83 c3 01             	add    ebx,0x1
c0018073:	e8 80 fd ff ff       	call   c0017df8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018078:	58                   	pop    eax
c0018079:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001807f:	5a                   	pop    edx
c0018080:	75 eb                	jne    c001806d <Virt::virtualMemorySetup()+0x3a>
c0018082:	5b                   	pop    ebx
c0018083:	c3                   	ret    

c0018084 <Virt::setupPageSwapping(int)>:
c0018084:	53                   	push   ebx
c0018085:	83 ec 0c             	sub    esp,0xc
c0018088:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001808c:	a1 88 f3 03 c0       	mov    eax,ds:0xc003f388
c0018091:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0018097:	8b 10                	mov    edx,DWORD PTR [eax]
c0018099:	53                   	push   ebx
c001809a:	c1 e3 0b             	shl    ebx,0xb
c001809d:	68 07 15 03 c0       	push   0xc0031507
c00180a2:	50                   	push   eax
c00180a3:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00180a6:	89 1d b0 3a 03 c0    	mov    DWORD PTR ds:0xc0033ab0,ebx
c00180ac:	c6 05 b8 3a 03 c0 43 	mov    BYTE PTR ds:0xc0033ab8,0x43
c00180b3:	c1 eb 08             	shr    ebx,0x8
c00180b6:	a3 b4 3a 03 c0       	mov    ds:0xc0033ab4,eax
c00180bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180be:	c7 05 ac 3a 03 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0033aac,0x8
c00180c8:	e8 31 e2 ff ff       	call   c00162fe <malloc>
c00180cd:	83 c4 0c             	add    esp,0xc
c00180d0:	89 c1                	mov    ecx,eax
c00180d2:	a3 ac aa 03 c0       	mov    ds:0xc003aaac,eax
c00180d7:	31 d2                	xor    edx,edx
c00180d9:	a1 b0 3a 03 c0       	mov    eax,ds:0xc0033ab0
c00180de:	f7 35 ac 3a 03 c0    	div    DWORD PTR ds:0xc0033aac
c00180e4:	c1 e8 05             	shr    eax,0x5
c00180e7:	50                   	push   eax
c00180e8:	6a 00                	push   0x0
c00180ea:	51                   	push   ecx
c00180eb:	e8 00 84 fe ff       	call   c00004f0 <memset>
c00180f0:	83 c4 18             	add    esp,0x18
c00180f3:	5b                   	pop    ebx
c00180f4:	c3                   	ret    
c00180f5:	90                   	nop

c00180f6 <VAS::setCPUSpecific(unsigned long)>:
c00180f6:	c3                   	ret    
c00180f7:	90                   	nop

c00180f8 <VAS::VAS(VAS*)>:
c00180f8:	83 ec 0c             	sub    esp,0xc
c00180fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001810a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018111:	83 ec 0c             	sub    esp,0xc
c0018114:	68 7c 12 03 c0       	push   0xc003127c
c0018119:	e8 88 80 00 00       	call   c00201a6 <KePanic(char const*)>
c001811e:	83 c4 10             	add    esp,0x10
c0018121:	90                   	nop
c0018122:	83 c4 0c             	add    esp,0xc
c0018125:	c3                   	ret    

c0018126 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0018126:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001812a:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001812f:	89 c2                	mov    edx,eax
c0018131:	c1 e8 0a             	shr    eax,0xa
c0018134:	c1 ea 16             	shr    edx,0x16
c0018137:	83 f9 01             	cmp    ecx,0x1
c001813a:	19 c9                	sbb    ecx,ecx
c001813c:	c1 e2 0c             	shl    edx,0xc
c001813f:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0018145:	25 fc 0f 00 00       	and    eax,0xffc
c001814a:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0018151:	01 d0                	add    eax,edx
c0018153:	c3                   	ret    

c0018154 <VAS::getPageTableEntry(unsigned long)>:
c0018154:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018158:	89 ca                	mov    edx,ecx
c001815a:	c1 e9 0a             	shr    ecx,0xa
c001815d:	c1 ea 16             	shr    edx,0x16
c0018160:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0018166:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001816c:	c1 e0 0c             	shl    eax,0xc
c001816f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0018172:	c3                   	ret    

c0018173 <Virt::freeKernelVirtualPages(unsigned long)>:
c0018173:	55                   	push   ebp
c0018174:	57                   	push   edi
c0018175:	bf 01 00 00 00       	mov    edi,0x1
c001817a:	56                   	push   esi
c001817b:	53                   	push   ebx
c001817c:	83 ec 1c             	sub    esp,0x1c
c001817f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018183:	c1 ee 0c             	shr    esi,0xc
c0018186:	eb 48                	jmp    c00181d0 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0018188:	83 ec 08             	sub    esp,0x8
c001818b:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018190:	55                   	push   ebp
c0018191:	50                   	push   eax
c0018192:	e8 bd ff ff ff       	call   c0018154 <VAS::getPageTableEntry(unsigned long)>
c0018197:	83 c4 10             	add    esp,0x10
c001819a:	8b 10                	mov    edx,DWORD PTR [eax]
c001819c:	f6 c6 04             	test   dh,0x4
c001819f:	75 70                	jne    c0018211 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00181a1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00181a7:	83 fb 04             	cmp    ebx,0x4
c00181aa:	0f 84 8a 00 00 00    	je     c001823a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00181b0:	83 fb 02             	cmp    ebx,0x2
c00181b3:	0f 84 9a 00 00 00    	je     c0018253 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00181b9:	83 fb 03             	cmp    ebx,0x3
c00181bc:	0f 84 be 00 00 00    	je     c0018280 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00181c2:	83 fb 01             	cmp    ebx,0x1
c00181c5:	0f 84 a2 00 00 00    	je     c001826d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00181cb:	83 c6 01             	add    esi,0x1
c00181ce:	31 ff                	xor    edi,edi
c00181d0:	56                   	push   esi
c00181d1:	89 f5                	mov    ebp,esi
c00181d3:	e8 5a fc ff ff       	call   c0017e32 <Virt::getPageState(unsigned long)>
c00181d8:	c1 e5 0c             	shl    ebp,0xc
c00181db:	0f b6 d8             	movzx  ebx,al
c00181de:	5a                   	pop    edx
c00181df:	85 db                	test   ebx,ebx
c00181e1:	75 a5                	jne    c0018188 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00181e3:	83 ec 0c             	sub    esp,0xc
c00181e6:	68 1e 15 03 c0       	push   0xc003151e
c00181eb:	e8 b6 7f 00 00       	call   c00201a6 <KePanic(char const*)>
c00181f0:	5a                   	pop    edx
c00181f1:	59                   	pop    ecx
c00181f2:	55                   	push   ebp
c00181f3:	8b 2d b0 aa 03 c0    	mov    ebp,DWORD PTR ds:0xc003aab0
c00181f9:	55                   	push   ebp
c00181fa:	e8 55 ff ff ff       	call   c0018154 <VAS::getPageTableEntry(unsigned long)>
c00181ff:	83 c4 10             	add    esp,0x10
c0018202:	8b 10                	mov    edx,DWORD PTR [eax]
c0018204:	f6 c6 04             	test   dh,0x4
c0018207:	75 08                	jne    c0018211 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0018209:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001820f:	eb ba                	jmp    c00181cb <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018211:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018215:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001821b:	83 ec 0c             	sub    esp,0xc
c001821e:	52                   	push   edx
c001821f:	e8 7a e3 ff ff       	call   c001659e <Phys::freePage(unsigned long)>
c0018224:	83 c4 10             	add    esp,0x10
c0018227:	83 fb 04             	cmp    ebx,0x4
c001822a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001822e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0018234:	0f 85 76 ff ff ff    	jne    c00181b0 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001823a:	83 e7 01             	and    edi,0x1
c001823d:	75 46                	jne    c0018285 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001823f:	c7 44 24 30 a0 12 03 c0 	mov    DWORD PTR [esp+0x30],0xc00312a0
c0018247:	83 c4 1c             	add    esp,0x1c
c001824a:	5b                   	pop    ebx
c001824b:	5e                   	pop    esi
c001824c:	5f                   	pop    edi
c001824d:	5d                   	pop    ebp
c001824e:	e9 53 7f 00 00       	jmp    c00201a6 <KePanic(char const*)>
c0018253:	83 e7 01             	and    edi,0x1
c0018256:	75 15                	jne    c001826d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0018258:	83 ec 0c             	sub    esp,0xc
c001825b:	68 3a 15 03 c0       	push   0xc003153a
c0018260:	e8 41 7f 00 00       	call   c00201a6 <KePanic(char const*)>
c0018265:	83 c4 10             	add    esp,0x10
c0018268:	e9 5e ff ff ff       	jmp    c00181cb <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001826d:	83 ec 08             	sub    esp,0x8
c0018270:	6a 00                	push   0x0
c0018272:	56                   	push   esi
c0018273:	e8 80 fb ff ff       	call   c0017df8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018278:	83 c4 10             	add    esp,0x10
c001827b:	e9 4b ff ff ff       	jmp    c00181cb <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0018280:	83 e7 01             	and    edi,0x1
c0018283:	75 16                	jne    c001829b <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0018285:	83 ec 08             	sub    esp,0x8
c0018288:	6a 00                	push   0x0
c001828a:	56                   	push   esi
c001828b:	e8 68 fb ff ff       	call   c0017df8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0018290:	83 c4 10             	add    esp,0x10
c0018293:	83 c4 1c             	add    esp,0x1c
c0018296:	5b                   	pop    ebx
c0018297:	5e                   	pop    esi
c0018298:	5f                   	pop    edi
c0018299:	5d                   	pop    ebp
c001829a:	c3                   	ret    
c001829b:	c7 44 24 30 56 15 03 c0 	mov    DWORD PTR [esp+0x30],0xc0031556
c00182a3:	83 c4 1c             	add    esp,0x1c
c00182a6:	5b                   	pop    ebx
c00182a7:	5e                   	pop    esi
c00182a8:	5f                   	pop    edi
c00182a9:	5d                   	pop    ebp
c00182aa:	e9 f7 7e 00 00       	jmp    c00201a6 <KePanic(char const*)>
c00182af:	90                   	nop

c00182b0 <VAS::freeAllocatedPages(unsigned long)>:
c00182b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00182b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00182b8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00182bc:	74 09                	je     c00182c7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00182be:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00182c2:	e9 ac fe ff ff       	jmp    c0018173 <Virt::freeKernelVirtualPages(unsigned long)>
c00182c7:	c7 44 24 04 c4 12 03 c0 	mov    DWORD PTR [esp+0x4],0xc00312c4
c00182cf:	e9 b9 0e 00 00       	jmp    c001918d <Dbg::kprintf(char const*, ...)>

c00182d4 <VAS::virtualToPhysical(unsigned long)>:
c00182d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00182d8:	50                   	push   eax
c00182d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00182dd:	52                   	push   edx
c00182de:	e8 71 fe ff ff       	call   c0018154 <VAS::getPageTableEntry(unsigned long)>
c00182e3:	59                   	pop    ecx
c00182e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00182e6:	5a                   	pop    edx
c00182e7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00182ec:	c3                   	ret    
c00182ed:	90                   	nop

c00182ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00182ee:	55                   	push   ebp
c00182ef:	57                   	push   edi
c00182f0:	56                   	push   esi
c00182f1:	53                   	push   ebx
c00182f2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00182f6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00182fa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00182fe:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018302:	85 db                	test   ebx,ebx
c0018304:	7e 24                	jle    c001832a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0018306:	c1 e3 0c             	shl    ebx,0xc
c0018309:	01 f3                	add    ebx,esi
c001830b:	56                   	push   esi
c001830c:	81 c6 00 10 00 00    	add    esi,0x1000
c0018312:	55                   	push   ebp
c0018313:	e8 3c fe ff ff       	call   c0018154 <VAS::getPageTableEntry(unsigned long)>
c0018318:	5a                   	pop    edx
c0018319:	59                   	pop    ecx
c001831a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001831c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018320:	21 f9                	and    ecx,edi
c0018322:	09 d1                	or     ecx,edx
c0018324:	39 f3                	cmp    ebx,esi
c0018326:	89 08                	mov    DWORD PTR [eax],ecx
c0018328:	75 e1                	jne    c001830b <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c001832a:	5b                   	pop    ebx
c001832b:	5e                   	pop    esi
c001832c:	5f                   	pop    edi
c001832d:	5d                   	pop    ebp
c001832e:	c3                   	ret    
c001832f:	90                   	nop

c0018330 <VAS::VAS()>:
c0018330:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018334:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001833b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001833f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001834a:	a3 b0 aa 03 c0       	mov    ds:0xc003aab0,eax
c001834f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018353:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0018357:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001835b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001835e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018362:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0018369:	ba 7d 50 03 c0       	mov    edx,0xc003507d
c001836e:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018373:	29 c2                	sub    edx,eax
c0018375:	89 d0                	mov    eax,edx
c0018377:	05 ff 0f 00 00       	add    eax,0xfff
c001837c:	c1 e8 0c             	shr    eax,0xc
c001837f:	89 c2                	mov    edx,eax
c0018381:	b8 00 50 03 c0       	mov    eax,0xc0035000
c0018386:	6a 04                	push   0x4
c0018388:	6a ff                	push   0xffffffff
c001838a:	52                   	push   edx
c001838b:	50                   	push   eax
c001838c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018390:	e8 59 ff ff ff       	call   c00182ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018395:	83 c4 14             	add    esp,0x14
c0018398:	90                   	nop
c0018399:	c3                   	ret    

c001839a <VAS::setToWriteCombining(unsigned long, int)>:
c001839a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001839f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00183a5:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00183ac:	75 01                	jne    c00183af <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00183ae:	c3                   	ret    
c00183af:	68 80 00 00 00       	push   0x80
c00183b4:	6a ff                	push   0xffffffff
c00183b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183ba:	50                   	push   eax
c00183bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183bf:	52                   	push   edx
c00183c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00183c4:	51                   	push   ecx
c00183c5:	e8 24 ff ff ff       	call   c00182ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00183ca:	83 c4 14             	add    esp,0x14
c00183cd:	c3                   	ret    

c00183ce <VAS::mapOtherVASIn(bool, VAS*)>:
c00183ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00183d2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00183d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183d9:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00183dc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183e1:	83 f8 01             	cmp    eax,0x1
c00183e4:	19 c0                	sbb    eax,eax
c00183e6:	83 ca 03             	or     edx,0x3
c00183e9:	83 e0 fc             	and    eax,0xfffffffc
c00183ec:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00183f3:	0f 20 d8             	mov    eax,cr3
c00183f6:	0f 22 d8             	mov    cr3,eax
c00183f9:	c3                   	ret    

c00183fa <VAS::~VAS()>:
c00183fa:	83 ec 2c             	sub    esp,0x2c
c00183fd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018405:	fa                   	cli    
c0018406:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001840b:	83 c0 01             	add    eax,0x1
c001840e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018413:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018418:	8b 00                	mov    eax,DWORD PTR [eax]
c001841a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001841d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018423:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018427:	6a 01                	push   0x1
c0018429:	50                   	push   eax
c001842a:	e8 9f ff ff ff       	call   c00183ce <VAS::mapOtherVASIn(bool, VAS*)>
c001842f:	83 c4 0c             	add    esp,0xc
c0018432:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001843a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0018442:	0f 8f d8 00 00 00    	jg     c0018520 <VAS::~VAS()+0x126>
c0018448:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001844c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001844f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018453:	c1 e2 02             	shl    edx,0x2
c0018456:	01 d0                	add    eax,edx
c0018458:	8b 00                	mov    eax,DWORD PTR [eax]
c001845a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018462:	83 e0 01             	and    eax,0x1
c0018465:	0f 84 ab 00 00 00    	je     c0018516 <VAS::~VAS()+0x11c>
c001846b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0018473:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001847b:	7f 74                	jg     c00184f1 <VAS::~VAS()+0xf7>
c001847d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018481:	c1 e0 0a             	shl    eax,0xa
c0018484:	89 c2                	mov    edx,eax
c0018486:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001848a:	01 d0                	add    eax,edx
c001848c:	c1 e0 0c             	shl    eax,0xc
c001848f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018493:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018498:	8b 00                	mov    eax,DWORD PTR [eax]
c001849a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001849d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00184a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00184a7:	6a 01                	push   0x1
c00184a9:	50                   	push   eax
c00184aa:	e8 77 fc ff ff       	call   c0018126 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00184af:	83 c4 0c             	add    esp,0xc
c00184b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00184b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00184ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00184bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00184c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184c4:	25 01 04 00 00       	and    eax,0x401
c00184c9:	3d 01 04 00 00       	cmp    eax,0x401
c00184ce:	75 1a                	jne    c00184ea <VAS::~VAS()+0xf0>
c00184d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184d4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00184d9:	83 ec 0c             	sub    esp,0xc
c00184dc:	50                   	push   eax
c00184dd:	e8 bc e0 ff ff       	call   c001659e <Phys::freePage(unsigned long)>
c00184e2:	83 c4 10             	add    esp,0x10
c00184e5:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00184ea:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00184ef:	eb 82                	jmp    c0018473 <VAS::~VAS()+0x79>
c00184f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00184f5:	25 00 04 00 00       	and    eax,0x400
c00184fa:	74 1a                	je     c0018516 <VAS::~VAS()+0x11c>
c00184fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018500:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018505:	83 ec 0c             	sub    esp,0xc
c0018508:	50                   	push   eax
c0018509:	e8 90 e0 ff ff       	call   c001659e <Phys::freePage(unsigned long)>
c001850e:	83 c4 10             	add    esp,0x10
c0018511:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0018516:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001851b:	e9 1a ff ff ff       	jmp    c001843a <VAS::~VAS()+0x40>
c0018520:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018524:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018527:	83 ec 0c             	sub    esp,0xc
c001852a:	50                   	push   eax
c001852b:	e8 43 fc ff ff       	call   c0018173 <Virt::freeKernelVirtualPages(unsigned long)>
c0018530:	83 c4 10             	add    esp,0x10
c0018533:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018537:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001853a:	83 ec 0c             	sub    esp,0xc
c001853d:	50                   	push   eax
c001853e:	e8 5b e0 ff ff       	call   c001659e <Phys::freePage(unsigned long)>
c0018543:	83 c4 10             	add    esp,0x10
c0018546:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001854b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018550:	83 e8 01             	sub    eax,0x1
c0018553:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018558:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001855d:	85 c0                	test   eax,eax
c001855f:	75 01                	jne    c0018562 <VAS::~VAS()+0x168>
c0018561:	fb                   	sti    
c0018562:	90                   	nop
c0018563:	83 c4 2c             	add    esp,0x2c
c0018566:	c3                   	ret    
c0018567:	90                   	nop

c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0018568:	55                   	push   ebp
c0018569:	57                   	push   edi
c001856a:	56                   	push   esi
c001856b:	53                   	push   ebx
c001856c:	83 ec 1c             	sub    esp,0x1c
c001856f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018573:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018577:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001857d:	77 08                	ja     c0018587 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001857f:	0f 20 d8             	mov    eax,cr3
c0018582:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0018585:	75 49                	jne    c00185d0 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0018587:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001858b:	09 d8                	or     eax,ebx
c001858d:	a9 ff 0f 00 00       	test   eax,0xfff
c0018592:	75 59                	jne    c00185ed <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0018594:	89 de                	mov    esi,ebx
c0018596:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018599:	c1 ee 16             	shr    esi,0x16
c001859c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00185a3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00185a7:	74 56                	je     c00185ff <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c00185a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00185ad:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185b1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00185b7:	c1 eb 0a             	shr    ebx,0xa
c00185ba:	c1 e6 0c             	shl    esi,0xc
c00185bd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00185c3:	09 d0                	or     eax,edx
c00185c5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00185c8:	83 c4 1c             	add    esp,0x1c
c00185cb:	5b                   	pop    ebx
c00185cc:	5e                   	pop    esi
c00185cd:	5f                   	pop    edi
c00185ce:	5d                   	pop    ebp
c00185cf:	c3                   	ret    
c00185d0:	83 ec 0c             	sub    esp,0xc
c00185d3:	68 e8 12 03 c0       	push   0xc00312e8
c00185d8:	e8 b0 0b 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00185dd:	83 c4 10             	add    esp,0x10
c00185e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00185e4:	09 d8                	or     eax,ebx
c00185e6:	a9 ff 0f 00 00       	test   eax,0xfff
c00185eb:	74 a7                	je     c0018594 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00185ed:	83 ec 0c             	sub    esp,0xc
c00185f0:	68 50 13 03 c0       	push   0xc0031350
c00185f5:	e8 ac 7b 00 00       	call   c00201a6 <KePanic(char const*)>
c00185fa:	83 c4 10             	add    esp,0x10
c00185fd:	eb 95                	jmp    c0018594 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00185ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018603:	e8 ff df ff ff       	call   c0016607 <Phys::allocatePage()>
c0018608:	83 ec 0c             	sub    esp,0xc
c001860b:	89 c5                	mov    ebp,eax
c001860d:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018613:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0018617:	6a 01                	push   0x1
c0018619:	e8 37 f8 ff ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c001861e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018625:	6a 01                	push   0x1
c0018627:	50                   	push   eax
c0018628:	55                   	push   ebp
c0018629:	81 cd 07 04 00 00    	or     ebp,0x407
c001862f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018633:	51                   	push   ecx
c0018634:	e8 29 01 00 00       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018639:	83 c4 1c             	add    esp,0x1c
c001863c:	68 00 10 00 00       	push   0x1000
c0018641:	6a 00                	push   0x0
c0018643:	50                   	push   eax
c0018644:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018648:	e8 a3 7e fe ff       	call   c00004f0 <memset>
c001864d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018651:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018654:	e8 1a fb ff ff       	call   c0018173 <Virt::freeKernelVirtualPages(unsigned long)>
c0018659:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001865d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018660:	83 c4 10             	add    esp,0x10
c0018663:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0018666:	e9 3e ff ff ff       	jmp    c00185a9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c001866b:	90                   	nop

c001866c <VAS::allocatePages(int, int)>:
c001866c:	55                   	push   ebp
c001866d:	57                   	push   edi
c001866e:	56                   	push   esi
c001866f:	53                   	push   ebx
c0018670:	83 ec 1c             	sub    esp,0x1c
c0018673:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018677:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001867b:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c001867f:	75 71                	jne    c00186f2 <VAS::allocatePages(int, int)+0x86>
c0018681:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0018684:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018688:	85 c0                	test   eax,eax
c001868a:	74 4d                	je     c00186d9 <VAS::allocatePages(int, int)+0x6d>
c001868c:	89 dd                	mov    ebp,ebx
c001868e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018692:	c1 e5 0c             	shl    ebp,0xc
c0018695:	01 c5                	add    ebp,eax
c0018697:	85 db                	test   ebx,ebx
c0018699:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c001869c:	7e 29                	jle    c00186c7 <VAS::allocatePages(int, int)+0x5b>
c001869e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00186a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00186a6:	81 cf 00 04 00 00    	or     edi,0x400
c00186ac:	e8 56 df ff ff       	call   c0016607 <Phys::allocatePage()>
c00186b1:	57                   	push   edi
c00186b2:	53                   	push   ebx
c00186b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00186b9:	50                   	push   eax
c00186ba:	56                   	push   esi
c00186bb:	e8 a8 fe ff ff       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c00186c0:	83 c4 10             	add    esp,0x10
c00186c3:	39 dd                	cmp    ebp,ebx
c00186c5:	75 e5                	jne    c00186ac <VAS::allocatePages(int, int)+0x40>
c00186c7:	0f 20 d8             	mov    eax,cr3
c00186ca:	0f 22 d8             	mov    cr3,eax
c00186cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00186d1:	83 c4 1c             	add    esp,0x1c
c00186d4:	5b                   	pop    ebx
c00186d5:	5e                   	pop    esi
c00186d6:	5f                   	pop    edi
c00186d7:	5d                   	pop    ebp
c00186d8:	c3                   	ret    
c00186d9:	83 ec 0c             	sub    esp,0xc
c00186dc:	68 74 13 03 c0       	push   0xc0031374
c00186e1:	e8 c0 7a 00 00       	call   c00201a6 <KePanic(char const*)>
c00186e6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00186e9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186ed:	83 c4 10             	add    esp,0x10
c00186f0:	eb 9a                	jmp    c001868c <VAS::allocatePages(int, int)+0x20>
c00186f2:	83 ec 0c             	sub    esp,0xc
c00186f5:	53                   	push   ebx
c00186f6:	e8 5a f7 ff ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c00186fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00186ff:	83 c4 10             	add    esp,0x10
c0018702:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0018707:	77 37                	ja     c0018740 <VAS::allocatePages(int, int)+0xd4>
c0018709:	85 db                	test   ebx,ebx
c001870b:	7e ba                	jle    c00186c7 <VAS::allocatePages(int, int)+0x5b>
c001870d:	c1 e3 0c             	shl    ebx,0xc
c0018710:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018714:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0018718:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001871b:	81 cf 00 04 00 00    	or     edi,0x400
c0018721:	89 c3                	mov    ebx,eax
c0018723:	e8 df de ff ff       	call   c0016607 <Phys::allocatePage()>
c0018728:	57                   	push   edi
c0018729:	53                   	push   ebx
c001872a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018730:	50                   	push   eax
c0018731:	56                   	push   esi
c0018732:	e8 31 fe ff ff       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018737:	83 c4 10             	add    esp,0x10
c001873a:	39 dd                	cmp    ebp,ebx
c001873c:	75 e5                	jne    c0018723 <VAS::allocatePages(int, int)+0xb7>
c001873e:	eb 87                	jmp    c00186c7 <VAS::allocatePages(int, int)+0x5b>
c0018740:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018745:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001874b:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0018752:	74 b5                	je     c0018709 <VAS::allocatePages(int, int)+0x9d>
c0018754:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018758:	80 ce 01             	or     dh,0x1
c001875b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001875f:	eb a8                	jmp    c0018709 <VAS::allocatePages(int, int)+0x9d>
c0018761:	90                   	nop

c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0018762:	55                   	push   ebp
c0018763:	57                   	push   edi
c0018764:	56                   	push   esi
c0018765:	53                   	push   ebx
c0018766:	83 ec 0c             	sub    esp,0xc
c0018769:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001876d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018771:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0018775:	85 db                	test   ebx,ebx
c0018777:	7e 2f                	jle    c00187a8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0018779:	c1 e3 0c             	shl    ebx,0xc
c001877c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018780:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0018784:	01 d3                	add    ebx,edx
c0018786:	55                   	push   ebp
c0018787:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001878b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001878f:	29 c2                	sub    edx,eax
c0018791:	01 f2                	add    edx,esi
c0018793:	52                   	push   edx
c0018794:	56                   	push   esi
c0018795:	81 c6 00 10 00 00    	add    esi,0x1000
c001879b:	57                   	push   edi
c001879c:	e8 c7 fd ff ff       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c00187a1:	83 c4 10             	add    esp,0x10
c00187a4:	39 de                	cmp    esi,ebx
c00187a6:	75 de                	jne    c0018786 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c00187a8:	0f 20 d8             	mov    eax,cr3
c00187ab:	0f 22 d8             	mov    cr3,eax
c00187ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00187b2:	83 c4 0c             	add    esp,0xc
c00187b5:	5b                   	pop    ebx
c00187b6:	5e                   	pop    esi
c00187b7:	5f                   	pop    edi
c00187b8:	5d                   	pop    ebp
c00187b9:	c3                   	ret    

c00187ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00187ba:	55                   	push   ebp
c00187bb:	57                   	push   edi
c00187bc:	56                   	push   esi
c00187bd:	53                   	push   ebx
c00187be:	83 ec 1c             	sub    esp,0x1c
c00187c1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187c5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00187c9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00187cd:	09 f8                	or     eax,edi
c00187cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00187d3:	a9 ff 0f 00 00       	test   eax,0xfff
c00187d8:	75 4f                	jne    c0018829 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c00187da:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00187de:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00187e1:	c1 eb 16             	shr    ebx,0x16
c00187e4:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c00187eb:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c00187ef:	74 52                	je     c0018843 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c00187f1:	0f b6 f2             	movzx  esi,dl
c00187f4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00187f8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00187fc:	c1 e8 0a             	shr    eax,0xa
c00187ff:	83 fe 01             	cmp    esi,0x1
c0018802:	19 d2                	sbb    edx,edx
c0018804:	c1 e3 0c             	shl    ebx,0xc
c0018807:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001880d:	25 fc 0f 00 00       	and    eax,0xffc
c0018812:	01 d8                	add    eax,ebx
c0018814:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0018818:	09 d9                	or     ecx,ebx
c001881a:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0018821:	83 c4 1c             	add    esp,0x1c
c0018824:	5b                   	pop    ebx
c0018825:	5e                   	pop    esi
c0018826:	5f                   	pop    edi
c0018827:	5d                   	pop    ebp
c0018828:	c3                   	ret    
c0018829:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001882d:	83 ec 0c             	sub    esp,0xc
c0018830:	68 a0 13 03 c0       	push   0xc00313a0
c0018835:	e8 6c 79 00 00       	call   c00201a6 <KePanic(char const*)>
c001883a:	83 c4 10             	add    esp,0x10
c001883d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018841:	eb 97                	jmp    c00187da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0018843:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018847:	e8 bb dd ff ff       	call   c0016607 <Phys::allocatePage()>
c001884c:	83 ec 0c             	sub    esp,0xc
c001884f:	89 c5                	mov    ebp,eax
c0018851:	8b 0d b0 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aab0
c0018857:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001885b:	6a 01                	push   0x1
c001885d:	e8 f3 f5 ff ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c0018862:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018869:	6a 01                	push   0x1
c001886b:	50                   	push   eax
c001886c:	55                   	push   ebp
c001886d:	81 cd 07 04 00 00    	or     ebp,0x407
c0018873:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0018877:	51                   	push   ecx
c0018878:	e8 e5 fe ff ff       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001887d:	83 c4 1c             	add    esp,0x1c
c0018880:	68 00 10 00 00       	push   0x1000
c0018885:	6a 00                	push   0x0
c0018887:	50                   	push   eax
c0018888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001888c:	e8 5f 7c fe ff       	call   c00004f0 <memset>
c0018891:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0018895:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0018898:	e8 d6 f8 ff ff       	call   c0018173 <Virt::freeKernelVirtualPages(unsigned long)>
c001889d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00188a0:	83 c4 10             	add    esp,0x10
c00188a3:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c00188a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188aa:	e9 42 ff ff ff       	jmp    c00187f1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c00188af:	90                   	nop

c00188b0 <VAS::VAS(bool)>:
c00188b0:	53                   	push   ebx
c00188b1:	83 ec 28             	sub    esp,0x28
c00188b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00188b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00188c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00188d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188d6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00188da:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00188dd:	e8 25 dd ff ff       	call   c0016607 <Phys::allocatePage()>
c00188e2:	89 c2                	mov    edx,eax
c00188e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00188e8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00188eb:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c00188f1:	83 ec 0c             	sub    esp,0xc
c00188f4:	6a 01                	push   0x1
c00188f6:	e8 5a f5 ff ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c00188fb:	83 c4 10             	add    esp,0x10
c00188fe:	89 c2                	mov    edx,eax
c0018900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018904:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0018907:	83 ec 0c             	sub    esp,0xc
c001890a:	6a 03                	push   0x3
c001890c:	6a 01                	push   0x1
c001890e:	52                   	push   edx
c001890f:	50                   	push   eax
c0018910:	53                   	push   ebx
c0018911:	e8 4c fe ff ff       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018916:	83 c4 20             	add    esp,0x20
c0018919:	89 c2                	mov    edx,eax
c001891b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001891f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0018922:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001892a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0018932:	7f 1d                	jg     c0018951 <VAS::VAS(bool)+0xa1>
c0018934:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018938:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001893b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001893f:	c1 e2 02             	shl    edx,0x2
c0018942:	01 d0                	add    eax,edx
c0018944:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001894a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c001894f:	eb d9                	jmp    c001892a <VAS::VAS(bool)+0x7a>
c0018951:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0018959:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0018961:	7f 7e                	jg     c00189e1 <VAS::VAS(bool)+0x131>
c0018963:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018967:	2d 00 02 00 00       	sub    eax,0x200
c001896c:	c1 e0 0c             	shl    eax,0xc
c001896f:	83 c8 05             	or     eax,0x5
c0018972:	89 c2                	mov    edx,eax
c0018974:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018979:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001897f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018985:	83 e0 10             	and    eax,0x10
c0018988:	0f b6 c0             	movzx  eax,al
c001898b:	85 c0                	test   eax,eax
c001898d:	74 07                	je     c0018996 <VAS::VAS(bool)+0xe6>
c001898f:	b8 00 01 00 00       	mov    eax,0x100
c0018994:	eb 05                	jmp    c001899b <VAS::VAS(bool)+0xeb>
c0018996:	b8 00 00 00 00       	mov    eax,0x0
c001899b:	09 d0                	or     eax,edx
c001899d:	89 c1                	mov    ecx,eax
c001899f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189aa:	c1 e2 02             	shl    edx,0x2
c00189ad:	01 d0                	add    eax,edx
c00189af:	89 ca                	mov    edx,ecx
c00189b1:	89 10                	mov    DWORD PTR [eax],edx
c00189b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189b7:	2d 40 03 00 00       	sub    eax,0x340
c00189bc:	83 f8 7f             	cmp    eax,0x7f
c00189bf:	77 16                	ja     c00189d7 <VAS::VAS(bool)+0x127>
c00189c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00189c5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189c8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189cc:	c1 e2 02             	shl    edx,0x2
c00189cf:	01 d0                	add    eax,edx
c00189d1:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00189d7:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00189dc:	e9 78 ff ff ff       	jmp    c0018959 <VAS::VAS(bool)+0xa9>
c00189e1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00189e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00189ec:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c00189f2:	83 e0 10             	and    eax,0x10
c00189f5:	0f b6 c0             	movzx  eax,al
c00189f8:	85 c0                	test   eax,eax
c00189fa:	74 07                	je     c0018a03 <VAS::VAS(bool)+0x153>
c00189fc:	b8 03 41 00 00       	mov    eax,0x4103
c0018a01:	eb 05                	jmp    c0018a08 <VAS::VAS(bool)+0x158>
c0018a03:	b8 03 40 00 00       	mov    eax,0x4003
c0018a08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a0c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0018a0f:	81 c2 20 0c 00 00    	add    edx,0xc20
c0018a15:	89 02                	mov    DWORD PTR [edx],eax
c0018a17:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a1b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018a1e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a23:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a29:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0018a2f:	83 e0 10             	and    eax,0x10
c0018a32:	0f b6 c0             	movzx  eax,al
c0018a35:	85 c0                	test   eax,eax
c0018a37:	74 07                	je     c0018a40 <VAS::VAS(bool)+0x190>
c0018a39:	b8 00 01 00 00       	mov    eax,0x100
c0018a3e:	eb 05                	jmp    c0018a45 <VAS::VAS(bool)+0x195>
c0018a40:	b8 00 00 00 00       	mov    eax,0x0
c0018a45:	09 c2                	or     edx,eax
c0018a47:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a4b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a4e:	05 fc 0f 00 00       	add    eax,0xffc
c0018a53:	83 ca 03             	or     edx,0x3
c0018a56:	89 10                	mov    DWORD PTR [eax],edx
c0018a58:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a63:	83 ec 0c             	sub    esp,0xc
c0018a66:	50                   	push   eax
c0018a67:	e8 00 2a 00 00       	call   c001b46c <Device::getName()>
c0018a6c:	83 c4 10             	add    esp,0x10
c0018a6f:	83 ec 08             	sub    esp,0x8
c0018a72:	68 70 15 03 c0       	push   0xc0031570
c0018a77:	50                   	push   eax
c0018a78:	e8 d3 7c fe ff       	call   c0000750 <strcmp>
c0018a7d:	83 c4 10             	add    esp,0x10
c0018a80:	85 c0                	test   eax,eax
c0018a82:	0f 94 c0             	sete   al
c0018a85:	0f b6 c0             	movzx  eax,al
c0018a88:	85 c0                	test   eax,eax
c0018a8a:	74 68                	je     c0018af4 <VAS::VAS(bool)+0x244>
c0018a8c:	fa                   	cli    
c0018a8d:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018a92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018a98:	05 7c 09 00 00       	add    eax,0x97c
c0018a9d:	83 ec 0c             	sub    esp,0xc
c0018aa0:	50                   	push   eax
c0018aa1:	e8 50 d3 ff ff       	call   c0015df6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018aa6:	83 c4 10             	add    esp,0x10
c0018aa9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018aae:	89 c3                	mov    ebx,eax
c0018ab0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0018ab5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0018abb:	05 7c 09 00 00       	add    eax,0x97c
c0018ac0:	83 ec 0c             	sub    esp,0xc
c0018ac3:	50                   	push   eax
c0018ac4:	e8 2d d3 ff ff       	call   c0015df6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0018ac9:	83 c4 10             	add    esp,0x10
c0018acc:	83 ec 08             	sub    esp,0x8
c0018acf:	50                   	push   eax
c0018ad0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018ad4:	e8 7b f6 ff ff       	call   c0018154 <VAS::getPageTableEntry(unsigned long)>
c0018ad9:	83 c4 10             	add    esp,0x10
c0018adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0018ade:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018ae3:	6a 11                	push   0x11
c0018ae5:	53                   	push   ebx
c0018ae6:	50                   	push   eax
c0018ae7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018aeb:	e8 78 fa ff ff       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018af0:	83 c4 10             	add    esp,0x10
c0018af3:	fb                   	sti    
c0018af4:	90                   	nop
c0018af5:	83 c4 28             	add    esp,0x28
c0018af8:	5b                   	pop    ebx
c0018af9:	c3                   	ret    

c0018afa <VAS::evict(unsigned long)>:
c0018afa:	55                   	push   ebp
c0018afb:	57                   	push   edi
c0018afc:	56                   	push   esi
c0018afd:	53                   	push   ebx
c0018afe:	83 ec 1c             	sub    esp,0x1c
c0018b01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018b05:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018b09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b0d:	e8 a1 f4 ff ff       	call   c0017fb3 <Virt::allocateSwapfilePage()>
c0018b12:	89 c7                	mov    edi,eax
c0018b14:	a1 ac 3a 03 c0       	mov    eax,ds:0xc0033aac
c0018b19:	85 c0                	test   eax,eax
c0018b1b:	7e 40                	jle    c0018b5d <VAS::evict(unsigned long)+0x63>
c0018b1d:	89 ee                	mov    esi,ebp
c0018b1f:	31 db                	xor    ebx,ebx
c0018b21:	83 ec 0c             	sub    esp,0xc
c0018b24:	57                   	push   edi
c0018b25:	e8 73 f4 ff ff       	call   c0017f9d <Virt::swapIDToSector(unsigned long)>
c0018b2a:	89 34 24             	mov    DWORD PTR [esp],esi
c0018b2d:	01 d8                	add    eax,ebx
c0018b2f:	6a 01                	push   0x1
c0018b31:	31 d2                	xor    edx,edx
c0018b33:	83 c3 01             	add    ebx,0x1
c0018b36:	52                   	push   edx
c0018b37:	81 c6 00 02 00 00    	add    esi,0x200
c0018b3d:	50                   	push   eax
c0018b3e:	0f be 05 b8 3a 03 c0 	movsx  eax,BYTE PTR ds:0xc0033ab8
c0018b45:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018b4c:	50                   	push   eax
c0018b4d:	e8 1a 3b 00 00       	call   c001c66c <LogicalDisk::write(unsigned long long, int, void*)>
c0018b52:	83 c4 20             	add    esp,0x20
c0018b55:	39 1d ac 3a 03 c0    	cmp    DWORD PTR ds:0xc0033aac,ebx
c0018b5b:	7f c4                	jg     c0018b21 <VAS::evict(unsigned long)+0x27>
c0018b5d:	83 ec 08             	sub    esp,0x8
c0018b60:	c1 e7 0c             	shl    edi,0xc
c0018b63:	55                   	push   ebp
c0018b64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b68:	50                   	push   eax
c0018b69:	e8 e6 f5 ff ff       	call   c0018154 <VAS::getPageTableEntry(unsigned long)>
c0018b6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018b70:	89 d3                	mov    ebx,edx
c0018b72:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0018b78:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018b7e:	09 d7                	or     edi,edx
c0018b80:	89 38                	mov    DWORD PTR [eax],edi
c0018b82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018b85:	8b 15 a8 aa 03 c0    	mov    edx,DWORD PTR ds:0xc003aaa8
c0018b8b:	83 c2 01             	add    edx,0x1
c0018b8e:	89 15 a8 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa8,edx
c0018b94:	e8 05 da ff ff       	call   c001659e <Phys::freePage(unsigned long)>
c0018b99:	0f 20 d8             	mov    eax,cr3
c0018b9c:	0f 22 d8             	mov    cr3,eax
c0018b9f:	8b 0d a8 aa 03 c0    	mov    ecx,DWORD PTR ds:0xc003aaa8
c0018ba5:	51                   	push   ecx
c0018ba6:	55                   	push   ebp
c0018ba7:	53                   	push   ebx
c0018ba8:	68 c4 13 03 c0       	push   0xc00313c4
c0018bad:	e8 db 05 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0018bb2:	a1 a4 aa 03 c0       	mov    eax,ds:0xc003aaa4
c0018bb7:	c7 44 24 50 7e 15 03 c0 	mov    DWORD PTR [esp+0x50],0xc003157e
c0018bbf:	8d 50 01             	lea    edx,[eax+0x1]
c0018bc2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018bc6:	89 15 a4 aa 03 c0    	mov    DWORD PTR ds:0xc003aaa4,edx
c0018bcc:	83 c4 3c             	add    esp,0x3c
c0018bcf:	5b                   	pop    ebx
c0018bd0:	5e                   	pop    esi
c0018bd1:	5f                   	pop    edi
c0018bd2:	5d                   	pop    ebp
c0018bd3:	e9 b5 05 00 00       	jmp    c001918d <Dbg::kprintf(char const*, ...)>

c0018bd8 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0018bd8:	55                   	push   ebp
c0018bd9:	57                   	push   edi
c0018bda:	56                   	push   esi
c0018bdb:	53                   	push   ebx
c0018bdc:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0018be2:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0018be9:	89 f3                	mov    ebx,esi
c0018beb:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0018bf1:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0018bf7:	77 22                	ja     c0018c1b <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0018bf9:	83 ec 08             	sub    esp,0x8
c0018bfc:	56                   	push   esi
c0018bfd:	68 a1 15 03 c0       	push   0xc00315a1
c0018c02:	e8 86 05 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0018c07:	83 c4 10             	add    esp,0x10
c0018c0a:	85 db                	test   ebx,ebx
c0018c0c:	75 2a                	jne    c0018c38 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0018c0e:	31 c0                	xor    eax,eax
c0018c10:	81 c4 1c 10 00 00    	add    esp,0x101c
c0018c16:	5b                   	pop    ebx
c0018c17:	5e                   	pop    esi
c0018c18:	5f                   	pop    edi
c0018c19:	5d                   	pop    ebp
c0018c1a:	c3                   	ret    
c0018c1b:	83 ec 0c             	sub    esp,0xc
c0018c1e:	68 8f 15 03 c0       	push   0xc003158f
c0018c23:	e8 7e 75 00 00       	call   c00201a6 <KePanic(char const*)>
c0018c28:	5f                   	pop    edi
c0018c29:	5d                   	pop    ebp
c0018c2a:	56                   	push   esi
c0018c2b:	68 a1 15 03 c0       	push   0xc00315a1
c0018c30:	e8 58 05 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0018c35:	83 c4 10             	add    esp,0x10
c0018c38:	83 ec 08             	sub    esp,0x8
c0018c3b:	53                   	push   ebx
c0018c3c:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c0018c43:	51                   	push   ecx
c0018c44:	e8 0b f5 ff ff       	call   c0018154 <VAS::getPageTableEntry(unsigned long)>
c0018c49:	83 c4 10             	add    esp,0x10
c0018c4c:	89 c2                	mov    edx,eax
c0018c4e:	85 c0                	test   eax,eax
c0018c50:	74 bc                	je     c0018c0e <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018c52:	8b 28                	mov    ebp,DWORD PTR [eax]
c0018c54:	f7 c5 00 02 00 00    	test   ebp,0x200
c0018c5a:	0f 85 c0 00 00 00    	jne    c0018d20 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0018c60:	89 e8                	mov    eax,ebp
c0018c62:	25 01 04 00 00       	and    eax,0x401
c0018c67:	3d 00 04 00 00       	cmp    eax,0x400
c0018c6c:	75 a0                	jne    c0018c0e <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0018c6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c72:	c1 ed 0c             	shr    ebp,0xc
c0018c75:	e8 8d d9 ff ff       	call   c0016607 <Phys::allocatePage()>
c0018c7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c7e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018c80:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0018c86:	09 c1                	or     ecx,eax
c0018c88:	81 c9 01 08 00 00    	or     ecx,0x801
c0018c8e:	89 0a                	mov    DWORD PTR [edx],ecx
c0018c90:	8b 15 ac 3a 03 c0    	mov    edx,DWORD PTR ds:0xc0033aac
c0018c96:	85 d2                	test   edx,edx
c0018c98:	7e 40                	jle    c0018cda <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0018c9a:	89 df                	mov    edi,ebx
c0018c9c:	31 f6                	xor    esi,esi
c0018c9e:	83 ec 0c             	sub    esp,0xc
c0018ca1:	55                   	push   ebp
c0018ca2:	e8 f6 f2 ff ff       	call   c0017f9d <Virt::swapIDToSector(unsigned long)>
c0018ca7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018caa:	01 f0                	add    eax,esi
c0018cac:	6a 01                	push   0x1
c0018cae:	31 d2                	xor    edx,edx
c0018cb0:	83 c6 01             	add    esi,0x1
c0018cb3:	52                   	push   edx
c0018cb4:	81 c7 00 02 00 00    	add    edi,0x200
c0018cba:	50                   	push   eax
c0018cbb:	0f be 05 b8 3a 03 c0 	movsx  eax,BYTE PTR ds:0xc0033ab8
c0018cc2:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0018cc9:	50                   	push   eax
c0018cca:	e8 31 39 00 00       	call   c001c600 <LogicalDisk::read(unsigned long long, int, void*)>
c0018ccf:	83 c4 20             	add    esp,0x20
c0018cd2:	39 35 ac 3a 03 c0    	cmp    DWORD PTR ds:0xc0033aac,esi
c0018cd8:	7f c4                	jg     c0018c9e <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0018cda:	83 ec 04             	sub    esp,0x4
c0018cdd:	a1 a8 aa 03 c0       	mov    eax,ds:0xc003aaa8
c0018ce2:	83 e8 01             	sub    eax,0x1
c0018ce5:	50                   	push   eax
c0018ce6:	a3 a8 aa 03 c0       	mov    ds:0xc003aaa8,eax
c0018ceb:	53                   	push   ebx
c0018cec:	68 b4 15 03 c0       	push   0xc00315b4
c0018cf1:	e8 97 04 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0018cf6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018cf9:	e8 7c f2 ff ff       	call   c0017f7a <Virt::freeSwapfilePage(unsigned long)>
c0018cfe:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0018d03:	83 c4 10             	add    esp,0x10
c0018d06:	83 e8 01             	sub    eax,0x1
c0018d09:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0018d0e:	85 c0                	test   eax,eax
c0018d10:	75 01                	jne    c0018d13 <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0018d12:	fb                   	sti    
c0018d13:	0f 20 d8             	mov    eax,cr3
c0018d16:	0f 22 d8             	mov    cr3,eax
c0018d19:	b0 01                	mov    al,0x1
c0018d1b:	e9 f0 fe ff ff       	jmp    c0018c10 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0018d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d24:	bd 00 10 00 00       	mov    ebp,0x1000
c0018d29:	83 ec 0c             	sub    esp,0xc
c0018d2c:	89 de                	mov    esi,ebx
c0018d2e:	68 f4 13 03 c0       	push   0xc00313f4
c0018d33:	e8 55 04 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0018d38:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0018d3c:	e8 c6 d8 ff ff       	call   c0016607 <Phys::allocatePage()>
c0018d41:	89 e9                	mov    ecx,ebp
c0018d43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d45:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d49:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018d4b:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0018d51:	09 c8                	or     eax,ecx
c0018d53:	83 c8 02             	or     eax,0x2
c0018d56:	89 02                	mov    DWORD PTR [edx],eax
c0018d58:	0f 20 d8             	mov    eax,cr3
c0018d5b:	0f 22 d8             	mov    cr3,eax
c0018d5e:	8d 74 24 20          	lea    esi,[esp+0x20]
c0018d62:	89 df                	mov    edi,ebx
c0018d64:	89 e9                	mov    ecx,ebp
c0018d66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018d68:	b0 01                	mov    al,0x1
c0018d6a:	83 c4 10             	add    esp,0x10
c0018d6d:	e9 9e fe ff ff       	jmp    c0018c10 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c0018d72 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0018d72:	55                   	push   ebp
c0018d73:	57                   	push   edi
c0018d74:	56                   	push   esi
c0018d75:	53                   	push   ebx
c0018d76:	83 ec 28             	sub    esp,0x28
c0018d79:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0018d7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d81:	50                   	push   eax
c0018d82:	e8 ce f0 ff ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c0018d87:	83 c4 0c             	add    esp,0xc
c0018d8a:	89 c5                	mov    ebp,eax
c0018d8c:	6a 07                	push   0x7
c0018d8e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018d92:	52                   	push   edx
c0018d93:	56                   	push   esi
c0018d94:	e8 d3 f8 ff ff       	call   c001866c <VAS::allocatePages(int, int)>
c0018d99:	83 c4 10             	add    esp,0x10
c0018d9c:	89 c7                	mov    edi,eax
c0018d9e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018da2:	85 c9                	test   ecx,ecx
c0018da4:	74 2f                	je     c0018dd5 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0018da6:	31 db                	xor    ebx,ebx
c0018da8:	e8 5a d8 ff ff       	call   c0016607 <Phys::allocatePage()>
c0018dad:	83 c3 01             	add    ebx,0x1
c0018db0:	6a 03                	push   0x3
c0018db2:	55                   	push   ebp
c0018db3:	50                   	push   eax
c0018db4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018db8:	56                   	push   esi
c0018db9:	e8 aa f7 ff ff       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018dbe:	6a 07                	push   0x7
c0018dc0:	57                   	push   edi
c0018dc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018dc5:	50                   	push   eax
c0018dc6:	56                   	push   esi
c0018dc7:	e8 9c f7 ff ff       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c0018dcc:	83 c4 20             	add    esp,0x20
c0018dcf:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0018dd3:	75 d3                	jne    c0018da8 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0018dd5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018dd9:	89 28                	mov    DWORD PTR [eax],ebp
c0018ddb:	83 c4 1c             	add    esp,0x1c
c0018dde:	89 f8                	mov    eax,edi
c0018de0:	5b                   	pop    ebx
c0018de1:	5e                   	pop    esi
c0018de2:	5f                   	pop    edi
c0018de3:	5d                   	pop    ebp
c0018de4:	c3                   	ret    
c0018de5:	90                   	nop

c0018de6 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0018de6:	53                   	push   ebx
c0018de7:	83 ec 14             	sub    esp,0x14
c0018dea:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0018dee:	68 14 14 03 c0       	push   0xc0031414
c0018df3:	e8 95 03 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0018df8:	c7 04 24 74 14 03 c0 	mov    DWORD PTR [esp],0xc0031474
c0018dff:	e8 89 03 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0018e04:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0018e08:	83 c4 18             	add    esp,0x18
c0018e0b:	5b                   	pop    ebx
c0018e0c:	e9 62 f3 ff ff       	jmp    c0018173 <Virt::freeKernelVirtualPages(unsigned long)>
c0018e11:	90                   	nop

c0018e12 <VAS::scanForEviction()>:
c0018e12:	57                   	push   edi
c0018e13:	56                   	push   esi
c0018e14:	31 f6                	xor    esi,esi
c0018e16:	53                   	push   ebx
c0018e17:	83 ec 10             	sub    esp,0x10
c0018e1a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018e1e:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018e21:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018e27:	75 0e                	jne    c0018e37 <VAS::scanForEviction()+0x25>
c0018e29:	89 da                	mov    edx,ebx
c0018e2b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018e2e:	c1 ea 16             	shr    edx,0x16
c0018e31:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018e35:	74 57                	je     c0018e8e <VAS::scanForEviction()+0x7c>
c0018e37:	53                   	push   ebx
c0018e38:	57                   	push   edi
c0018e39:	e8 16 f3 ff ff       	call   c0018154 <VAS::getPageTableEntry(unsigned long)>
c0018e3e:	5a                   	pop    edx
c0018e3f:	8b 10                	mov    edx,DWORD PTR [eax]
c0018e41:	59                   	pop    ecx
c0018e42:	89 d1                	mov    ecx,edx
c0018e44:	c1 e9 0c             	shr    ecx,0xc
c0018e47:	74 10                	je     c0018e59 <VAS::scanForEviction()+0x47>
c0018e49:	89 d1                	mov    ecx,edx
c0018e4b:	81 e1 01 08 00 00    	and    ecx,0x801
c0018e51:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0018e57:	74 40                	je     c0018e99 <VAS::scanForEviction()+0x87>
c0018e59:	81 c3 00 10 00 00    	add    ebx,0x1000
c0018e5f:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0018e65:	76 2d                	jbe    c0018e94 <VAS::scanForEviction()+0x82>
c0018e67:	83 c6 01             	add    esi,0x1
c0018e6a:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0018e71:	83 fe 03             	cmp    esi,0x3
c0018e74:	74 32                	je     c0018ea8 <VAS::scanForEviction()+0x96>
c0018e76:	31 db                	xor    ebx,ebx
c0018e78:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0018e7e:	75 b7                	jne    c0018e37 <VAS::scanForEviction()+0x25>
c0018e80:	89 da                	mov    edx,ebx
c0018e82:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0018e85:	c1 ea 16             	shr    edx,0x16
c0018e88:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0018e8c:	75 a9                	jne    c0018e37 <VAS::scanForEviction()+0x25>
c0018e8e:	81 c3 00 00 40 00    	add    ebx,0x400000
c0018e94:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0018e97:	eb 88                	jmp    c0018e21 <VAS::scanForEviction()+0xf>
c0018e99:	f6 c2 20             	test   dl,0x20
c0018e9c:	74 13                	je     c0018eb1 <VAS::scanForEviction()+0x9f>
c0018e9e:	83 e2 df             	and    edx,0xffffffdf
c0018ea1:	89 10                	mov    DWORD PTR [eax],edx
c0018ea3:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0018ea6:	eb b1                	jmp    c0018e59 <VAS::scanForEviction()+0x47>
c0018ea8:	83 c4 10             	add    esp,0x10
c0018eab:	31 c0                	xor    eax,eax
c0018ead:	5b                   	pop    ebx
c0018eae:	5e                   	pop    esi
c0018eaf:	5f                   	pop    edi
c0018eb0:	c3                   	ret    
c0018eb1:	83 ec 08             	sub    esp,0x8
c0018eb4:	89 d0                	mov    eax,edx
c0018eb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018ebb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ebf:	53                   	push   ebx
c0018ec0:	68 c9 15 03 c0       	push   0xc00315c9
c0018ec5:	e8 c3 02 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0018eca:	58                   	pop    eax
c0018ecb:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018ece:	5a                   	pop    edx
c0018ecf:	51                   	push   ecx
c0018ed0:	57                   	push   edi
c0018ed1:	e8 24 fc ff ff       	call   c0018afa <VAS::evict(unsigned long)>
c0018ed6:	5b                   	pop    ebx
c0018ed7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0018eda:	5e                   	pop    esi
c0018edb:	50                   	push   eax
c0018edc:	68 dd 15 03 c0       	push   0xc00315dd
c0018ee1:	e8 a7 02 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0018ee6:	58                   	pop    eax
c0018ee7:	5a                   	pop    edx
c0018ee8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018eec:	50                   	push   eax
c0018eed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018ef1:	68 f0 15 03 c0       	push   0xc00315f0
c0018ef6:	e8 92 02 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0018efb:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0018efe:	83 c4 10             	add    esp,0x10
c0018f01:	81 c1 00 10 00 00    	add    ecx,0x1000
c0018f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018f0b:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0018f0e:	83 c4 10             	add    esp,0x10
c0018f11:	5b                   	pop    ebx
c0018f12:	5e                   	pop    esi
c0018f13:	5f                   	pop    edi
c0018f14:	c3                   	ret    

c0018f15 <mapVASFirstTime>:
c0018f15:	55                   	push   ebp
c0018f16:	57                   	push   edi
c0018f17:	56                   	push   esi
c0018f18:	53                   	push   ebx
c0018f19:	83 ec 0c             	sub    esp,0xc
c0018f1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f21:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018f24:	83 fa 01             	cmp    edx,0x1
c0018f27:	0f 84 cb 00 00 00    	je     c0018ff8 <mapVASFirstTime+0xe3>
c0018f2d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0018f30:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0018f33:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0018f38:	c1 e5 15             	shl    ebp,0x15
c0018f3b:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0018f40:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0018f46:	29 eb                	sub    ebx,ebp
c0018f48:	29 ef                	sub    edi,ebp
c0018f4a:	e8 b8 d6 ff ff       	call   c0016607 <Phys::allocatePage()>
c0018f4f:	83 ec 0c             	sub    esp,0xc
c0018f52:	68 03 04 00 00       	push   0x403
c0018f57:	6a 01                	push   0x1
c0018f59:	53                   	push   ebx
c0018f5a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0018f60:	50                   	push   eax
c0018f61:	56                   	push   esi
c0018f62:	e8 fb f7 ff ff       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018f67:	83 c4 20             	add    esp,0x20
c0018f6a:	39 fb                	cmp    ebx,edi
c0018f6c:	75 dc                	jne    c0018f4a <mapVASFirstTime+0x35>
c0018f6e:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0018f73:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0018f78:	29 eb                	sub    ebx,ebp
c0018f7a:	29 ef                	sub    edi,ebp
c0018f7c:	e8 86 d6 ff ff       	call   c0016607 <Phys::allocatePage()>
c0018f81:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0018f85:	83 fa 01             	cmp    edx,0x1
c0018f88:	19 d2                	sbb    edx,edx
c0018f8a:	83 ec 0c             	sub    esp,0xc
c0018f8d:	83 e2 04             	and    edx,0x4
c0018f90:	81 c2 03 04 00 00    	add    edx,0x403
c0018f96:	52                   	push   edx
c0018f97:	6a 01                	push   0x1
c0018f99:	53                   	push   ebx
c0018f9a:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0018fa0:	50                   	push   eax
c0018fa1:	56                   	push   esi
c0018fa2:	e8 bb f7 ff ff       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018fa7:	83 c4 20             	add    esp,0x20
c0018faa:	39 df                	cmp    edi,ebx
c0018fac:	75 ce                	jne    c0018f7c <mapVASFirstTime+0x67>
c0018fae:	83 ec 0c             	sub    esp,0xc
c0018fb1:	bb 7c 60 03 c0       	mov    ebx,0xc003607c
c0018fb6:	6a 04                	push   0x4
c0018fb8:	81 eb 00 50 03 c0    	sub    ebx,0xc0035000
c0018fbe:	6a ff                	push   0xffffffff
c0018fc0:	c1 eb 0c             	shr    ebx,0xc
c0018fc3:	53                   	push   ebx
c0018fc4:	68 00 50 03 c0       	push   0xc0035000
c0018fc9:	56                   	push   esi
c0018fca:	e8 1f f3 ff ff       	call   c00182ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018fcf:	83 c4 14             	add    esp,0x14
c0018fd2:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0018fd7:	6a 04                	push   0x4
c0018fd9:	6a ff                	push   0xffffffff
c0018fdb:	53                   	push   ebx
c0018fdc:	68 00 50 03 c0       	push   0xc0035000
c0018fe1:	50                   	push   eax
c0018fe2:	e8 07 f3 ff ff       	call   c00182ee <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0018fe7:	0f 20 d8             	mov    eax,cr3
c0018fea:	0f 22 d8             	mov    cr3,eax
c0018fed:	83 c4 20             	add    esp,0x20
c0018ff0:	83 c4 0c             	add    esp,0xc
c0018ff3:	5b                   	pop    ebx
c0018ff4:	5e                   	pop    esi
c0018ff5:	5f                   	pop    edi
c0018ff6:	5d                   	pop    ebp
c0018ff7:	c3                   	ret    
c0018ff8:	83 ec 0c             	sub    esp,0xc
c0018ffb:	68 fd 15 03 c0       	push   0xc00315fd
c0019000:	e8 88 01 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0019005:	83 c4 10             	add    esp,0x10
c0019008:	83 c4 0c             	add    esp,0xc
c001900b:	5b                   	pop    ebx
c001900c:	5e                   	pop    esi
c001900d:	5f                   	pop    edi
c001900e:	5d                   	pop    ebp
c001900f:	c3                   	ret    

c0019010 <__cxa_atexit>:
c0019010:	31 c0                	xor    eax,eax
c0019012:	c3                   	ret    

c0019013 <__cxa_finalize>:
c0019013:	c3                   	ret    

c0019014 <__stack_chk_fail>:
c0019014:	55                   	push   ebp
c0019015:	89 e5                	mov    ebp,esp
c0019017:	83 ec 10             	sub    esp,0x10
c001901a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001901d:	68 16 16 03 c0       	push   0xc0031616
c0019022:	e8 66 01 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0019027:	58                   	pop    eax
c0019028:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001902b:	5a                   	pop    edx
c001902c:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001902f:	68 16 16 03 c0       	push   0xc0031616
c0019034:	e8 54 01 00 00       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0019039:	c7 04 24 1e 16 03 c0 	mov    DWORD PTR [esp],0xc003161e
c0019040:	e8 61 71 00 00       	call   c00201a6 <KePanic(char const*)>
c0019045:	83 c4 10             	add    esp,0x10
c0019048:	c9                   	leave  
c0019049:	c3                   	ret    

c001904a <__cxa_pure_virtual>:
c001904a:	83 ec 18             	sub    esp,0x18
c001904d:	68 36 16 03 c0       	push   0xc0031636
c0019052:	e8 4f 71 00 00       	call   c00201a6 <KePanic(char const*)>
c0019057:	83 c4 1c             	add    esp,0x1c
c001905a:	c3                   	ret    

c001905b <operator new[](unsigned long)>:
c001905b:	e9 9e d2 ff ff       	jmp    c00162fe <malloc>

c0019060 <operator delete(void*, unsigned long)>:
c0019060:	e9 b9 d2 ff ff       	jmp    c001631e <rfree>

c0019065 <operator delete[](void*)>:
c0019065:	e9 b4 d2 ff ff       	jmp    c001631e <rfree>

c001906a <operator delete[](void*, unsigned long)>:
c001906a:	e9 af d2 ff ff       	jmp    c001631e <rfree>

c001906f <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c001906f:	55                   	push   ebp
c0019070:	57                   	push   edi
c0019071:	56                   	push   esi
c0019072:	be 3f 11 03 c0       	mov    esi,0xc003113f
c0019077:	53                   	push   ebx
c0019078:	83 ec 20             	sub    esp,0x20
c001907b:	a0 3e 11 03 c0       	mov    al,ds:0xc003113e
c0019080:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019084:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019088:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001908c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019090:	b8 10 00 00 00       	mov    eax,0x10
c0019095:	f7 c7 02 00 00 00    	test   edi,0x2
c001909b:	75 60                	jne    c00190fd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c001909d:	89 c1                	mov    ecx,eax
c001909f:	c1 e9 02             	shr    ecx,0x2
c00190a2:	fc                   	cld    
c00190a3:	31 d2                	xor    edx,edx
c00190a5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00190a7:	a8 02                	test   al,0x2
c00190a9:	74 0b                	je     c00190b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c00190ab:	66 8b 16             	mov    dx,WORD PTR [esi]
c00190ae:	66 89 17             	mov    WORD PTR [edi],dx
c00190b1:	ba 02 00 00 00       	mov    edx,0x2
c00190b6:	a8 01                	test   al,0x1
c00190b8:	74 06                	je     c00190c0 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c00190ba:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c00190bd:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c00190c0:	89 ee                	mov    esi,ebp
c00190c2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00190c6:	eb 02                	jmp    c00190ca <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c00190c8:	89 c6                	mov    esi,eax
c00190ca:	31 d2                	xor    edx,edx
c00190cc:	83 c1 01             	add    ecx,0x1
c00190cf:	89 f0                	mov    eax,esi
c00190d1:	f7 f3                	div    ebx
c00190d3:	39 de                	cmp    esi,ebx
c00190d5:	73 f1                	jae    c00190c8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c00190d7:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00190da:	eb 02                	jmp    c00190de <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c00190dc:	89 c5                	mov    ebp,eax
c00190de:	31 d2                	xor    edx,edx
c00190e0:	83 e9 01             	sub    ecx,0x1
c00190e3:	89 e8                	mov    eax,ebp
c00190e5:	f7 f3                	div    ebx
c00190e7:	39 dd                	cmp    ebp,ebx
c00190e9:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c00190ed:	88 11                	mov    BYTE PTR [ecx],dl
c00190ef:	73 eb                	jae    c00190dc <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c00190f1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190f5:	83 c4 20             	add    esp,0x20
c00190f8:	5b                   	pop    ebx
c00190f9:	5e                   	pop    esi
c00190fa:	5f                   	pop    edi
c00190fb:	5d                   	pop    ebp
c00190fc:	c3                   	ret    
c00190fd:	66 8b 16             	mov    dx,WORD PTR [esi]
c0019100:	83 c7 02             	add    edi,0x2
c0019103:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0019107:	83 c6 02             	add    esi,0x2
c001910a:	83 e8 02             	sub    eax,0x2
c001910d:	eb 8e                	jmp    c001909d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c001910f <Dbg::logc(char)>:
c001910f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019113:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c001911a:	75 12                	jne    c001912e <Dbg::logc(char)+0x1f>
c001911c:	ba fd 03 00 00       	mov    edx,0x3fd
c0019121:	ec                   	in     al,dx
c0019122:	a8 20                	test   al,0x20
c0019124:	74 fb                	je     c0019121 <Dbg::logc(char)+0x12>
c0019126:	ba f8 03 00 00       	mov    edx,0x3f8
c001912b:	88 c8                	mov    al,cl
c001912d:	ee                   	out    dx,al
c001912e:	c3                   	ret    

c001912f <Dbg::logs(char*)>:
c001912f:	53                   	push   ebx
c0019130:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019134:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019137:	85 c0                	test   eax,eax
c0019139:	74 11                	je     c001914c <Dbg::logs(char*)+0x1d>
c001913b:	83 c3 01             	add    ebx,0x1
c001913e:	50                   	push   eax
c001913f:	e8 cb ff ff ff       	call   c001910f <Dbg::logc(char)>
c0019144:	58                   	pop    eax
c0019145:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019148:	85 c0                	test   eax,eax
c001914a:	75 ef                	jne    c001913b <Dbg::logs(char*)+0xc>
c001914c:	5b                   	pop    ebx
c001914d:	c3                   	ret    

c001914e <Dbg::logWriteInt(unsigned int)>:
c001914e:	83 ec 10             	sub    esp,0x10
c0019151:	6a 0a                	push   0xa
c0019153:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019157:	50                   	push   eax
c0019158:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001915c:	50                   	push   eax
c001915d:	e8 0d ff ff ff       	call   c001906f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019162:	50                   	push   eax
c0019163:	e8 c7 ff ff ff       	call   c001912f <Dbg::logs(char*)>
c0019168:	83 c4 20             	add    esp,0x20
c001916b:	c3                   	ret    

c001916c <Dbg::logWriteIntBase(unsigned int, int)>:
c001916c:	83 ec 10             	sub    esp,0x10
c001916f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019173:	50                   	push   eax
c0019174:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019178:	50                   	push   eax
c0019179:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001917d:	52                   	push   edx
c001917e:	e8 ec fe ff ff       	call   c001906f <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0019183:	50                   	push   eax
c0019184:	e8 a6 ff ff ff       	call   c001912f <Dbg::logs(char*)>
c0019189:	83 c4 20             	add    esp,0x20
c001918c:	c3                   	ret    

c001918d <Dbg::kprintf(char const*, ...)>:
c001918d:	55                   	push   ebp
c001918e:	57                   	push   edi
c001918f:	56                   	push   esi
c0019190:	53                   	push   ebx
c0019191:	83 ec 0c             	sub    esp,0xc
c0019194:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019198:	f6 05 d4 a9 03 c0 10 	test   BYTE PTR ds:0xc003a9d4,0x10
c001919f:	74 08                	je     c00191a9 <Dbg::kprintf(char const*, ...)+0x1c>
c00191a1:	83 c4 0c             	add    esp,0xc
c00191a4:	5b                   	pop    ebx
c00191a5:	5e                   	pop    esi
c00191a6:	5f                   	pop    edi
c00191a7:	5d                   	pop    ebp
c00191a8:	c3                   	ret    
c00191a9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00191ad:	31 ff                	xor    edi,edi
c00191af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00191b3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00191b6:	85 c0                	test   eax,eax
c00191b8:	74 e7                	je     c00191a1 <Dbg::kprintf(char const*, ...)+0x14>
c00191ba:	8d 77 01             	lea    esi,[edi+0x1]
c00191bd:	83 f8 25             	cmp    eax,0x25
c00191c0:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c00191c3:	75 47                	jne    c001920c <Dbg::kprintf(char const*, ...)+0x7f>
c00191c5:	83 c7 02             	add    edi,0x2
c00191c8:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00191cb:	8d 34 3b             	lea    esi,[ebx+edi*1]
c00191ce:	83 e8 25             	sub    eax,0x25
c00191d1:	0f b6 c0             	movzx  eax,al
c00191d4:	83 f8 53             	cmp    eax,0x53
c00191d7:	0f 87 ce 00 00 00    	ja     c00192ab <Dbg::kprintf(char const*, ...)+0x11e>
c00191dd:	ff 24 85 4c 16 03 c0 	jmp    DWORD PTR [eax*4-0x3ffce9b4]
c00191e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00191e8:	89 c8                	mov    eax,ecx
c00191ea:	83 c1 04             	add    ecx,0x4
c00191ed:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00191f1:	8b 28                	mov    ebp,DWORD PTR [eax]
c00191f3:	55                   	push   ebp
c00191f4:	e8 55 ff ff ff       	call   c001914e <Dbg::logWriteInt(unsigned int)>
c00191f9:	58                   	pop    eax
c00191fa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00191fd:	85 c0                	test   eax,eax
c00191ff:	74 a0                	je     c00191a1 <Dbg::kprintf(char const*, ...)+0x14>
c0019201:	8d 77 01             	lea    esi,[edi+0x1]
c0019204:	83 f8 25             	cmp    eax,0x25
c0019207:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c001920a:	74 b9                	je     c00191c5 <Dbg::kprintf(char const*, ...)+0x38>
c001920c:	50                   	push   eax
c001920d:	89 f7                	mov    edi,esi
c001920f:	e8 fb fe ff ff       	call   c001910f <Dbg::logc(char)>
c0019214:	89 ee                	mov    esi,ebp
c0019216:	58                   	pop    eax
c0019217:	eb e1                	jmp    c00191fa <Dbg::kprintf(char const*, ...)+0x6d>
c0019219:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001921d:	89 c8                	mov    eax,ecx
c001921f:	83 c1 04             	add    ecx,0x4
c0019222:	8b 00                	mov    eax,DWORD PTR [eax]
c0019224:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0019228:	50                   	push   eax
c0019229:	e8 01 ff ff ff       	call   c001912f <Dbg::logs(char*)>
c001922e:	58                   	pop    eax
c001922f:	eb c9                	jmp    c00191fa <Dbg::kprintf(char const*, ...)+0x6d>
c0019231:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019235:	89 d0                	mov    eax,edx
c0019237:	83 c2 04             	add    edx,0x4
c001923a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001923e:	8b 00                	mov    eax,DWORD PTR [eax]
c0019240:	50                   	push   eax
c0019241:	e8 08 ff ff ff       	call   c001914e <Dbg::logWriteInt(unsigned int)>
c0019246:	58                   	pop    eax
c0019247:	eb b1                	jmp    c00191fa <Dbg::kprintf(char const*, ...)+0x6d>
c0019249:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001924d:	89 d0                	mov    eax,edx
c001924f:	83 c2 04             	add    edx,0x4
c0019252:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0019255:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019259:	50                   	push   eax
c001925a:	e8 b0 fe ff ff       	call   c001910f <Dbg::logc(char)>
c001925f:	58                   	pop    eax
c0019260:	eb 98                	jmp    c00191fa <Dbg::kprintf(char const*, ...)+0x6d>
c0019262:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019266:	89 c8                	mov    eax,ecx
c0019268:	83 c1 04             	add    ecx,0x4
c001926b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001926f:	6a 10                	push   0x10
c0019271:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019273:	51                   	push   ecx
c0019274:	e8 f3 fe ff ff       	call   c001916c <Dbg::logWriteIntBase(unsigned int, int)>
c0019279:	5d                   	pop    ebp
c001927a:	58                   	pop    eax
c001927b:	e9 7a ff ff ff       	jmp    c00191fa <Dbg::kprintf(char const*, ...)+0x6d>
c0019280:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019284:	89 d0                	mov    eax,edx
c0019286:	83 c2 08             	add    edx,0x8
c0019289:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001928d:	6a 10                	push   0x10
c001928f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019291:	50                   	push   eax
c0019292:	e8 d5 fe ff ff       	call   c001916c <Dbg::logWriteIntBase(unsigned int, int)>
c0019297:	58                   	pop    eax
c0019298:	5a                   	pop    edx
c0019299:	e9 5c ff ff ff       	jmp    c00191fa <Dbg::kprintf(char const*, ...)+0x6d>
c001929e:	6a 25                	push   0x25
c00192a0:	e8 6a fe ff ff       	call   c001910f <Dbg::logc(char)>
c00192a5:	5a                   	pop    edx
c00192a6:	e9 4f ff ff ff       	jmp    c00191fa <Dbg::kprintf(char const*, ...)+0x6d>
c00192ab:	6a 25                	push   0x25
c00192ad:	e8 5d fe ff ff       	call   c001910f <Dbg::logc(char)>
c00192b2:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00192b6:	50                   	push   eax
c00192b7:	e8 53 fe ff ff       	call   c001910f <Dbg::logc(char)>
c00192bc:	5a                   	pop    edx
c00192bd:	59                   	pop    ecx
c00192be:	e9 37 ff ff ff       	jmp    c00191fa <Dbg::kprintf(char const*, ...)+0x6d>
c00192c3:	90                   	nop

c00192c4 <KiUbsanPrintDetails(char const*, void*)>:
c00192c4:	83 ec 1c             	sub    esp,0x1c
c00192c7:	83 ec 08             	sub    esp,0x8
c00192ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00192ce:	68 9c 17 03 c0       	push   0xc003179c
c00192d3:	e8 b5 fe ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00192d8:	83 c4 10             	add    esp,0x10
c00192db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00192df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00192e9:	83 ec 08             	sub    esp,0x8
c00192ec:	50                   	push   eax
c00192ed:	68 b0 17 03 c0       	push   0xc00317b0
c00192f2:	e8 96 fe ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00192f7:	83 c4 10             	add    esp,0x10
c00192fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019301:	83 ec 08             	sub    esp,0x8
c0019304:	50                   	push   eax
c0019305:	68 ba 17 03 c0       	push   0xc00317ba
c001930a:	e8 7e fe ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001930f:	83 c4 10             	add    esp,0x10
c0019312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019316:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0019319:	83 ec 08             	sub    esp,0x8
c001931c:	50                   	push   eax
c001931d:	68 c4 17 03 c0       	push   0xc00317c4
c0019322:	e8 66 fe ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0019327:	83 c4 10             	add    esp,0x10
c001932a:	90                   	nop
c001932b:	83 c4 1c             	add    esp,0x1c
c001932e:	c3                   	ret    
c001932f:	90                   	nop

c0019330 <__ubsan_handle_type_mismatch_v1>:
c0019330:	83 ec 0c             	sub    esp,0xc
c0019333:	83 ec 08             	sub    esp,0x8
c0019336:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001933a:	68 08 19 03 c0       	push   0xc0031908
c001933f:	e8 80 ff ff ff       	call   c00192c4 <KiUbsanPrintDetails(char const*, void*)>
c0019344:	83 c4 10             	add    esp,0x10
c0019347:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001934c:	75 16                	jne    c0019364 <__ubsan_handle_type_mismatch_v1+0x34>
c001934e:	83 ec 0c             	sub    esp,0xc
c0019351:	68 ce 17 03 c0       	push   0xc00317ce
c0019356:	e8 32 fe ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001935b:	83 c4 10             	add    esp,0x10
c001935e:	e9 91 00 00 00       	jmp    c00193f4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019363:	90                   	nop
c0019364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019368:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001936b:	85 c0                	test   eax,eax
c001936d:	74 29                	je     c0019398 <__ubsan_handle_type_mismatch_v1+0x68>
c001936f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019373:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0019376:	83 e8 01             	sub    eax,0x1
c0019379:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c001937d:	75 19                	jne    c0019398 <__ubsan_handle_type_mismatch_v1+0x68>
c001937f:	83 ec 08             	sub    esp,0x8
c0019382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019386:	68 28 19 03 c0       	push   0xc0031928
c001938b:	e8 fd fd ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0019390:	83 c4 10             	add    esp,0x10
c0019393:	eb 5f                	jmp    c00193f4 <__ubsan_handle_type_mismatch_v1+0xc4>
c0019395:	8d 76 00             	lea    esi,[esi+0x0]
c0019398:	83 ec 0c             	sub    esp,0xc
c001939b:	68 e3 17 03 c0       	push   0xc00317e3
c00193a0:	e8 e8 fd ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00193a5:	83 c4 10             	add    esp,0x10
c00193a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193ac:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00193af:	0f b6 c0             	movzx  eax,al
c00193b2:	83 ec 08             	sub    esp,0x8
c00193b5:	50                   	push   eax
c00193b6:	68 fd 17 03 c0       	push   0xc00317fd
c00193bb:	e8 cd fd ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00193c0:	83 c4 10             	add    esp,0x10
c00193c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193c7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00193ca:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00193cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00193d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00193d5:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00193d8:	0f b6 c0             	movzx  eax,al
c00193db:	8b 04 85 c0 3a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc540]
c00193e2:	51                   	push   ecx
c00193e3:	52                   	push   edx
c00193e4:	50                   	push   eax
c00193e5:	68 50 19 03 c0       	push   0xc0031950
c00193ea:	e8 9e fd ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00193ef:	83 c4 10             	add    esp,0x10
c00193f2:	66 90                	xchg   ax,ax
c00193f4:	83 ec 0c             	sub    esp,0xc
c00193f7:	68 08 19 03 c0       	push   0xc0031908
c00193fc:	e8 a5 6d 00 00       	call   c00201a6 <KePanic(char const*)>
c0019401:	83 c4 10             	add    esp,0x10
c0019404:	90                   	nop
c0019405:	83 c4 0c             	add    esp,0xc
c0019408:	c3                   	ret    
c0019409:	8d 76 00             	lea    esi,[esi+0x0]

c001940c <__ubsan_handle_pointer_overflow>:
c001940c:	83 ec 0c             	sub    esp,0xc
c001940f:	83 ec 08             	sub    esp,0x8
c0019412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019416:	68 98 19 03 c0       	push   0xc0031998
c001941b:	e8 a4 fe ff ff       	call   c00192c4 <KiUbsanPrintDetails(char const*, void*)>
c0019420:	83 c4 10             	add    esp,0x10
c0019423:	83 ec 0c             	sub    esp,0xc
c0019426:	68 98 19 03 c0       	push   0xc0031998
c001942b:	e8 76 6d 00 00       	call   c00201a6 <KePanic(char const*)>
c0019430:	83 c4 10             	add    esp,0x10
c0019433:	90                   	nop
c0019434:	83 c4 0c             	add    esp,0xc
c0019437:	c3                   	ret    

c0019438 <__ubsan_handle_out_of_bounds>:
c0019438:	83 ec 0c             	sub    esp,0xc
c001943b:	83 ec 08             	sub    esp,0x8
c001943e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019442:	68 08 18 03 c0       	push   0xc0031808
c0019447:	e8 78 fe ff ff       	call   c00192c4 <KiUbsanPrintDetails(char const*, void*)>
c001944c:	83 c4 10             	add    esp,0x10
c001944f:	83 ec 0c             	sub    esp,0xc
c0019452:	68 08 18 03 c0       	push   0xc0031808
c0019457:	e8 4a 6d 00 00       	call   c00201a6 <KePanic(char const*)>
c001945c:	83 c4 10             	add    esp,0x10
c001945f:	90                   	nop
c0019460:	83 c4 0c             	add    esp,0xc
c0019463:	c3                   	ret    

c0019464 <__ubsan_handle_add_overflow>:
c0019464:	83 ec 0c             	sub    esp,0xc
c0019467:	83 ec 08             	sub    esp,0x8
c001946a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001946e:	68 25 18 03 c0       	push   0xc0031825
c0019473:	e8 4c fe ff ff       	call   c00192c4 <KiUbsanPrintDetails(char const*, void*)>
c0019478:	83 c4 10             	add    esp,0x10
c001947b:	83 ec 0c             	sub    esp,0xc
c001947e:	68 25 18 03 c0       	push   0xc0031825
c0019483:	e8 1e 6d 00 00       	call   c00201a6 <KePanic(char const*)>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	90                   	nop
c001948c:	83 c4 0c             	add    esp,0xc
c001948f:	c3                   	ret    

c0019490 <__ubsan_handle_load_invalid_value>:
c0019490:	83 ec 0c             	sub    esp,0xc
c0019493:	83 ec 08             	sub    esp,0x8
c0019496:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001949a:	68 b8 19 03 c0       	push   0xc00319b8
c001949f:	e8 20 fe ff ff       	call   c00192c4 <KiUbsanPrintDetails(char const*, void*)>
c00194a4:	83 c4 10             	add    esp,0x10
c00194a7:	83 ec 0c             	sub    esp,0xc
c00194aa:	68 b8 19 03 c0       	push   0xc00319b8
c00194af:	e8 f2 6c 00 00       	call   c00201a6 <KePanic(char const*)>
c00194b4:	83 c4 10             	add    esp,0x10
c00194b7:	90                   	nop
c00194b8:	83 c4 0c             	add    esp,0xc
c00194bb:	c3                   	ret    

c00194bc <__ubsan_handle_divrem_overflow>:
c00194bc:	83 ec 0c             	sub    esp,0xc
c00194bf:	83 ec 08             	sub    esp,0x8
c00194c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194c6:	68 dc 19 03 c0       	push   0xc00319dc
c00194cb:	e8 f4 fd ff ff       	call   c00192c4 <KiUbsanPrintDetails(char const*, void*)>
c00194d0:	83 c4 10             	add    esp,0x10
c00194d3:	83 ec 0c             	sub    esp,0xc
c00194d6:	68 dc 19 03 c0       	push   0xc00319dc
c00194db:	e8 c6 6c 00 00       	call   c00201a6 <KePanic(char const*)>
c00194e0:	83 c4 10             	add    esp,0x10
c00194e3:	90                   	nop
c00194e4:	83 c4 0c             	add    esp,0xc
c00194e7:	c3                   	ret    

c00194e8 <__ubsan_handle_mul_overflow>:
c00194e8:	83 ec 0c             	sub    esp,0xc
c00194eb:	83 ec 08             	sub    esp,0x8
c00194ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00194f2:	68 41 18 03 c0       	push   0xc0031841
c00194f7:	e8 c8 fd ff ff       	call   c00192c4 <KiUbsanPrintDetails(char const*, void*)>
c00194fc:	83 c4 10             	add    esp,0x10
c00194ff:	83 ec 0c             	sub    esp,0xc
c0019502:	68 41 18 03 c0       	push   0xc0031841
c0019507:	e8 9a 6c 00 00       	call   c00201a6 <KePanic(char const*)>
c001950c:	83 c4 10             	add    esp,0x10
c001950f:	90                   	nop
c0019510:	83 c4 0c             	add    esp,0xc
c0019513:	c3                   	ret    

c0019514 <__ubsan_handle_sub_overflow>:
c0019514:	83 ec 0c             	sub    esp,0xc
c0019517:	83 ec 08             	sub    esp,0x8
c001951a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001951e:	68 5d 18 03 c0       	push   0xc003185d
c0019523:	e8 9c fd ff ff       	call   c00192c4 <KiUbsanPrintDetails(char const*, void*)>
c0019528:	83 c4 10             	add    esp,0x10
c001952b:	83 ec 0c             	sub    esp,0xc
c001952e:	68 5d 18 03 c0       	push   0xc003185d
c0019533:	e8 6e 6c 00 00       	call   c00201a6 <KePanic(char const*)>
c0019538:	83 c4 10             	add    esp,0x10
c001953b:	90                   	nop
c001953c:	83 c4 0c             	add    esp,0xc
c001953f:	c3                   	ret    

c0019540 <__ubsan_handle_shift_out_of_bounds>:
c0019540:	83 ec 0c             	sub    esp,0xc
c0019543:	83 ec 08             	sub    esp,0x8
c0019546:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001954a:	68 fc 19 03 c0       	push   0xc00319fc
c001954f:	e8 70 fd ff ff       	call   c00192c4 <KiUbsanPrintDetails(char const*, void*)>
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	83 ec 0c             	sub    esp,0xc
c001955a:	68 fc 19 03 c0       	push   0xc00319fc
c001955f:	e8 42 6c 00 00       	call   c00201a6 <KePanic(char const*)>
c0019564:	83 c4 10             	add    esp,0x10
c0019567:	90                   	nop
c0019568:	83 c4 0c             	add    esp,0xc
c001956b:	c3                   	ret    

c001956c <__ubsan_handle_negate_overflow>:
c001956c:	83 ec 0c             	sub    esp,0xc
c001956f:	83 ec 08             	sub    esp,0x8
c0019572:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019576:	68 20 1a 03 c0       	push   0xc0031a20
c001957b:	e8 44 fd ff ff       	call   c00192c4 <KiUbsanPrintDetails(char const*, void*)>
c0019580:	83 c4 10             	add    esp,0x10
c0019583:	83 ec 0c             	sub    esp,0xc
c0019586:	68 20 1a 03 c0       	push   0xc0031a20
c001958b:	e8 16 6c 00 00       	call   c00201a6 <KePanic(char const*)>
c0019590:	83 c4 10             	add    esp,0x10
c0019593:	90                   	nop
c0019594:	83 c4 0c             	add    esp,0xc
c0019597:	c3                   	ret    

c0019598 <KiIsHashInTable(unsigned short)>:
c0019598:	0f b7 d0             	movzx  edx,ax
c001959b:	83 e0 07             	and    eax,0x7
c001959e:	c1 fa 03             	sar    edx,0x3
c00195a1:	88 c1                	mov    cl,al
c00195a3:	0f b6 92 00 af 03 c0 	movzx  edx,BYTE PTR [edx-0x3ffc5100]
c00195aa:	d3 fa                	sar    edx,cl
c00195ac:	89 d0                	mov    eax,edx
c00195ae:	83 e0 01             	and    eax,0x1
c00195b1:	c3                   	ret    

c00195b2 <KiSetHashInTable(unsigned short, bool)>:
c00195b2:	56                   	push   esi
c00195b3:	53                   	push   ebx
c00195b4:	0f b7 d8             	movzx  ebx,ax
c00195b7:	83 e0 07             	and    eax,0x7
c00195ba:	c1 fb 03             	sar    ebx,0x3
c00195bd:	89 c1                	mov    ecx,eax
c00195bf:	0f b6 b3 00 af 03 c0 	movzx  esi,BYTE PTR [ebx-0x3ffc5100]
c00195c6:	b8 01 00 00 00       	mov    eax,0x1
c00195cb:	d3 e0                	shl    eax,cl
c00195cd:	84 d2                	test   dl,dl
c00195cf:	74 04                	je     c00195d5 <KiSetHashInTable(unsigned short, bool)+0x23>
c00195d1:	09 f0                	or     eax,esi
c00195d3:	eb 04                	jmp    c00195d9 <KiSetHashInTable(unsigned short, bool)+0x27>
c00195d5:	f7 d0                	not    eax
c00195d7:	21 f0                	and    eax,esi
c00195d9:	88 83 00 af 03 c0    	mov    BYTE PTR [ebx-0x3ffc5100],al
c00195df:	5b                   	pop    ebx
c00195e0:	5e                   	pop    esi
c00195e1:	c3                   	ret    

c00195e2 <KiFlushSymlinkChanges()>:
c00195e2:	57                   	push   edi
c00195e3:	56                   	push   esi
c00195e4:	53                   	push   ebx
c00195e5:	83 ec 1c             	sub    esp,0x1c
c00195e8:	68 14 01 00 00       	push   0x114
c00195ed:	e8 0c cd ff ff       	call   c00162fe <malloc>
c00195f2:	83 c4 0c             	add    esp,0xc
c00195f5:	89 c3                	mov    ebx,eax
c00195f7:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c00195fd:	68 3f 1a 03 c0       	push   0xc0031a3f
c0019602:	50                   	push   eax
c0019603:	e8 8c 0d 00 00       	call   c001a394 <File::File(char const*, Process*)>
c0019608:	83 c4 10             	add    esp,0x10
c001960b:	85 db                	test   ebx,ebx
c001960d:	75 10                	jne    c001961f <KiFlushSymlinkChanges()+0x3d>
c001960f:	83 ec 0c             	sub    esp,0xc
c0019612:	68 5d 1a 03 c0       	push   0xc0031a5d
c0019617:	e8 8a 6b 00 00       	call   c00201a6 <KePanic(char const*)>
c001961c:	83 c4 10             	add    esp,0x10
c001961f:	50                   	push   eax
c0019620:	50                   	push   eax
c0019621:	6a 06                	push   0x6
c0019623:	53                   	push   ebx
c0019624:	e8 89 0d 00 00       	call   c001a3b2 <File::open(FileOpenMode)>
c0019629:	83 c4 10             	add    esp,0x10
c001962c:	85 c0                	test   eax,eax
c001962e:	74 10                	je     c0019640 <KiFlushSymlinkChanges()+0x5e>
c0019630:	83 ec 0c             	sub    esp,0xc
c0019633:	68 77 1a 03 c0       	push   0xc0031a77
c0019638:	e8 69 6b 00 00       	call   c00201a6 <KePanic(char const*)>
c001963d:	83 c4 10             	add    esp,0x10
c0019640:	31 f6                	xor    esi,esi
c0019642:	39 35 c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,esi
c0019648:	7e 70                	jle    c00196ba <KiFlushSymlinkChanges()+0xd8>
c001964a:	83 ec 0c             	sub    esp,0xc
c001964d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001964f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019653:	89 f0                	mov    eax,esi
c0019655:	57                   	push   edi
c0019656:	c1 e0 08             	shl    eax,0x8
c0019659:	05 00 ab 03 c0       	add    eax,0xc003ab00
c001965e:	50                   	push   eax
c001965f:	6a 00                	push   0x0
c0019661:	68 00 01 00 00       	push   0x100
c0019666:	53                   	push   ebx
c0019667:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001966a:	83 c4 20             	add    esp,0x20
c001966d:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c0019675:	74 10                	je     c0019687 <KiFlushSymlinkChanges()+0xa5>
c0019677:	83 ec 0c             	sub    esp,0xc
c001967a:	68 91 1a 03 c0       	push   0xc0031a91
c001967f:	e8 22 6b 00 00       	call   c00201a6 <KePanic(char const*)>
c0019684:	83 c4 10             	add    esp,0x10
c0019687:	83 ec 0c             	sub    esp,0xc
c001968a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001968c:	8d 14 f5 e0 aa 03 c0 	lea    edx,[esi*8-0x3ffc5520]
c0019693:	57                   	push   edi
c0019694:	52                   	push   edx
c0019695:	6a 00                	push   0x0
c0019697:	6a 08                	push   0x8
c0019699:	53                   	push   ebx
c001969a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001969d:	83 c4 20             	add    esp,0x20
c00196a0:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c00196a5:	74 10                	je     c00196b7 <KiFlushSymlinkChanges()+0xd5>
c00196a7:	83 ec 0c             	sub    esp,0xc
c00196aa:	68 ab 1a 03 c0       	push   0xc0031aab
c00196af:	e8 f2 6a 00 00       	call   c00201a6 <KePanic(char const*)>
c00196b4:	83 c4 10             	add    esp,0x10
c00196b7:	46                   	inc    esi
c00196b8:	eb 88                	jmp    c0019642 <KiFlushSymlinkChanges()+0x60>
c00196ba:	83 ec 0c             	sub    esp,0xc
c00196bd:	53                   	push   ebx
c00196be:	e8 4d 0d 00 00       	call   c001a410 <File::close()>
c00196c3:	83 c4 10             	add    esp,0x10
c00196c6:	85 db                	test   ebx,ebx
c00196c8:	74 0c                	je     c00196d6 <KiFlushSymlinkChanges()+0xf4>
c00196ca:	83 ec 0c             	sub    esp,0xc
c00196cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196cf:	53                   	push   ebx
c00196d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00196d3:	83 c4 10             	add    esp,0x10
c00196d6:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c00196e0:	83 c4 10             	add    esp,0x10
c00196e3:	5b                   	pop    ebx
c00196e4:	5e                   	pop    esi
c00196e5:	5f                   	pop    edi
c00196e6:	c3                   	ret    

c00196e7 <KiDeinitialiseSymlinks(void*)>:
c00196e7:	e9 f6 fe ff ff       	jmp    c00195e2 <KiFlushSymlinkChanges()>

c00196ec <KiGetSymlinkHash(char const*)>:
c00196ec:	53                   	push   ebx
c00196ed:	89 c3                	mov    ebx,eax
c00196ef:	83 ec 14             	sub    esp,0x14
c00196f2:	50                   	push   eax
c00196f3:	e8 78 6e fe ff       	call   c0000570 <strlen>
c00196f8:	5a                   	pop    edx
c00196f9:	59                   	pop    ecx
c00196fa:	50                   	push   eax
c00196fb:	53                   	push   ebx
c00196fc:	e8 0c 64 00 00       	call   c001fb0d <KeCalculateCRC32(unsigned char*, int)>
c0019701:	83 c4 18             	add    esp,0x18
c0019704:	89 c2                	mov    edx,eax
c0019706:	5b                   	pop    ebx
c0019707:	c1 ea 10             	shr    edx,0x10
c001970a:	31 d0                	xor    eax,edx
c001970c:	c3                   	ret    

c001970d <KiCreateSymlinkID()>:
c001970d:	55                   	push   ebp
c001970e:	57                   	push   edi
c001970f:	56                   	push   esi
c0019710:	53                   	push   ebx
c0019711:	31 db                	xor    ebx,ebx
c0019713:	83 ec 1c             	sub    esp,0x1c
c0019716:	e8 d9 6b 00 00       	call   c00202f4 <KeRand()>
c001971b:	43                   	inc    ebx
c001971c:	8b 2d 00 cf 03 c0    	mov    ebp,DWORD PTR ds:0xc003cf00
c0019722:	31 d2                	xor    edx,edx
c0019724:	8d 4d 01             	lea    ecx,[ebp+0x1]
c0019727:	0f a4 c2 1f          	shld   edx,eax,0x1f
c001972b:	89 0d 00 cf 03 c0    	mov    DWORD PTR ds:0xc003cf00,ecx
c0019731:	c1 e0 1f             	shl    eax,0x1f
c0019734:	89 d7                	mov    edi,edx
c0019736:	89 c6                	mov    esi,eax
c0019738:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c001973c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019744:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c001974a:	75 10                	jne    c001975c <KiCreateSymlinkID()+0x4f>
c001974c:	83 ec 0c             	sub    esp,0xc
c001974f:	68 c5 1a 03 c0       	push   0xc0031ac5
c0019754:	e8 4d 6a 00 00       	call   c00201a6 <KePanic(char const*)>
c0019759:	83 c4 10             	add    esp,0x10
c001975c:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0019760:	75 04                	jne    c0019766 <KiCreateSymlinkID()+0x59>
c0019762:	39 f5                	cmp    ebp,esi
c0019764:	74 b0                	je     c0019716 <KiCreateSymlinkID()+0x9>
c0019766:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001976a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001976e:	31 f0                	xor    eax,esi
c0019770:	83 c4 1c             	add    esp,0x1c
c0019773:	31 fa                	xor    edx,edi
c0019775:	5b                   	pop    ebx
c0019776:	5e                   	pop    esi
c0019777:	5f                   	pop    edi
c0019778:	5d                   	pop    ebp
c0019779:	c3                   	ret    

c001977a <KeRegisterSymlink(char const*, unsigned long long)>:
c001977a:	53                   	push   ebx
c001977b:	83 ec 0c             	sub    esp,0xc
c001977e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019782:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019786:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001978a:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c001978f:	68 00 01 00 00       	push   0x100
c0019794:	89 0c c5 e4 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc551c],ecx
c001979b:	6a 00                	push   0x0
c001979d:	89 14 c5 e0 aa 03 c0 	mov    DWORD PTR [eax*8-0x3ffc5520],edx
c00197a4:	c1 e0 08             	shl    eax,0x8
c00197a7:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00197ac:	50                   	push   eax
c00197ad:	e8 3e 6d fe ff       	call   c00004f0 <memset>
c00197b2:	58                   	pop    eax
c00197b3:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00197b8:	5a                   	pop    edx
c00197b9:	c1 e0 08             	shl    eax,0x8
c00197bc:	53                   	push   ebx
c00197bd:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00197c2:	50                   	push   eax
c00197c3:	e8 78 6e fe ff       	call   c0000640 <strcpy>
c00197c8:	89 d8                	mov    eax,ebx
c00197ca:	e8 1d ff ff ff       	call   c00196ec <KiGetSymlinkHash(char const*)>
c00197cf:	59                   	pop    ecx
c00197d0:	0f b7 d8             	movzx  ebx,ax
c00197d3:	58                   	pop    eax
c00197d4:	53                   	push   ebx
c00197d5:	68 ce 1a 03 c0       	push   0xc0031ace
c00197da:	e8 ae f9 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00197df:	89 d8                	mov    eax,ebx
c00197e1:	ba 01 00 00 00       	mov    edx,0x1
c00197e6:	e8 c7 fd ff ff       	call   c00195b2 <KiSetHashInTable(unsigned short, bool)>
c00197eb:	a1 c0 aa 03 c0       	mov    eax,ds:0xc003aac0
c00197f0:	83 c4 10             	add    esp,0x10
c00197f3:	40                   	inc    eax
c00197f4:	a3 c0 aa 03 c0       	mov    ds:0xc003aac0,eax
c00197f9:	83 f8 03             	cmp    eax,0x3
c00197fc:	7e 09                	jle    c0019807 <KeRegisterSymlink(char const*, unsigned long long)+0x8d>
c00197fe:	83 c4 08             	add    esp,0x8
c0019801:	5b                   	pop    ebx
c0019802:	e9 db fd ff ff       	jmp    c00195e2 <KiFlushSymlinkChanges()>
c0019807:	83 c4 08             	add    esp,0x8
c001980a:	5b                   	pop    ebx
c001980b:	c3                   	ret    

c001980c <KeInitialiseSymlinks()>:
c001980c:	57                   	push   edi
c001980d:	56                   	push   esi
c001980e:	53                   	push   ebx
c001980f:	81 ec 14 01 00 00    	sub    esp,0x114
c0019815:	c7 05 00 cf 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003cf00,0x0
c001981f:	68 00 20 00 00       	push   0x2000
c0019824:	c7 05 c0 aa 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003aac0,0x0
c001982e:	6a 00                	push   0x0
c0019830:	68 00 af 03 c0       	push   0xc003af00
c0019835:	e8 b6 6c fe ff       	call   c00004f0 <memset>
c001983a:	59                   	pop    ecx
c001983b:	5b                   	pop    ebx
c001983c:	ff 35 00 cf 03 c0    	push   DWORD PTR ds:0xc003cf00
c0019842:	68 e2 1a 03 c0       	push   0xc0031ae2
c0019847:	e8 41 f9 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001984c:	5e                   	pop    esi
c001984d:	5f                   	pop    edi
c001984e:	6a 00                	push   0x0
c0019850:	68 e7 96 01 c0       	push   0xc00196e7
c0019855:	e8 d6 60 00 00       	call   c001f930 <KeRegisterAtexit(void (*)(void*), void*)>
c001985a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019861:	e8 98 ca ff ff       	call   c00162fe <malloc>
c0019866:	83 c4 0c             	add    esp,0xc
c0019869:	89 c3                	mov    ebx,eax
c001986b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019871:	68 3f 1a 03 c0       	push   0xc0031a3f
c0019876:	50                   	push   eax
c0019877:	e8 18 0b 00 00       	call   c001a394 <File::File(char const*, Process*)>
c001987c:	83 c4 10             	add    esp,0x10
c001987f:	85 db                	test   ebx,ebx
c0019881:	75 10                	jne    c0019893 <KeInitialiseSymlinks()+0x87>
c0019883:	83 ec 0c             	sub    esp,0xc
c0019886:	68 ff 1a 03 c0       	push   0xc0031aff
c001988b:	e8 16 69 00 00       	call   c00201a6 <KePanic(char const*)>
c0019890:	83 c4 10             	add    esp,0x10
c0019893:	83 ec 0c             	sub    esp,0xc
c0019896:	53                   	push   ebx
c0019897:	e8 da 0d 00 00       	call   c001a676 <File::exists()>
c001989c:	83 c4 10             	add    esp,0x10
c001989f:	84 c0                	test   al,al
c00198a1:	75 3a                	jne    c00198dd <KeInitialiseSymlinks()+0xd1>
c00198a3:	52                   	push   edx
c00198a4:	52                   	push   edx
c00198a5:	6a 12                	push   0x12
c00198a7:	53                   	push   ebx
c00198a8:	e8 05 0b 00 00       	call   c001a3b2 <File::open(FileOpenMode)>
c00198ad:	83 c4 10             	add    esp,0x10
c00198b0:	85 c0                	test   eax,eax
c00198b2:	74 10                	je     c00198c4 <KeInitialiseSymlinks()+0xb8>
c00198b4:	83 ec 0c             	sub    esp,0xc
c00198b7:	68 1c 1b 03 c0       	push   0xc0031b1c
c00198bc:	e8 e5 68 00 00       	call   c00201a6 <KePanic(char const*)>
c00198c1:	83 c4 10             	add    esp,0x10
c00198c4:	83 ec 0c             	sub    esp,0xc
c00198c7:	53                   	push   ebx
c00198c8:	e8 43 0b 00 00       	call   c001a410 <File::close()>
c00198cd:	83 c4 10             	add    esp,0x10
c00198d0:	85 db                	test   ebx,ebx
c00198d2:	0f 84 9e 00 00 00    	je     c0019976 <KeInitialiseSymlinks()+0x16a>
c00198d8:	e9 8d 00 00 00       	jmp    c001996a <KeInitialiseSymlinks()+0x15e>
c00198dd:	50                   	push   eax
c00198de:	50                   	push   eax
c00198df:	6a 01                	push   0x1
c00198e1:	53                   	push   ebx
c00198e2:	e8 cb 0a 00 00       	call   c001a3b2 <File::open(FileOpenMode)>
c00198e7:	83 c4 10             	add    esp,0x10
c00198ea:	85 c0                	test   eax,eax
c00198ec:	74 10                	je     c00198fe <KeInitialiseSymlinks()+0xf2>
c00198ee:	83 ec 0c             	sub    esp,0xc
c00198f1:	68 39 1b 03 c0       	push   0xc0031b39
c00198f6:	e8 ab 68 00 00       	call   c00201a6 <KePanic(char const*)>
c00198fb:	83 c4 10             	add    esp,0x10
c00198fe:	83 ec 0c             	sub    esp,0xc
c0019901:	ff 05 00 cf 03 c0    	inc    DWORD PTR ds:0xc003cf00
c0019907:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001990b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001990d:	57                   	push   edi
c001990e:	8d 74 24 20          	lea    esi,[esp+0x20]
c0019912:	56                   	push   esi
c0019913:	6a 00                	push   0x0
c0019915:	68 00 01 00 00       	push   0x100
c001991a:	53                   	push   ebx
c001991b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001991e:	83 c4 20             	add    esp,0x20
c0019921:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019929:	75 33                	jne    c001995e <KeInitialiseSymlinks()+0x152>
c001992b:	83 ec 0c             	sub    esp,0xc
c001992e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019930:	57                   	push   edi
c0019931:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019935:	52                   	push   edx
c0019936:	6a 00                	push   0x0
c0019938:	6a 08                	push   0x8
c001993a:	53                   	push   ebx
c001993b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001993e:	83 c4 20             	add    esp,0x20
c0019941:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019946:	75 16                	jne    c001995e <KeInitialiseSymlinks()+0x152>
c0019948:	89 f0                	mov    eax,esi
c001994a:	e8 9d fd ff ff       	call   c00196ec <KiGetSymlinkHash(char const*)>
c001994f:	ba 01 00 00 00       	mov    edx,0x1
c0019954:	0f b7 c0             	movzx  eax,ax
c0019957:	e8 56 fc ff ff       	call   c00195b2 <KiSetHashInTable(unsigned short, bool)>
c001995c:	eb a0                	jmp    c00198fe <KeInitialiseSymlinks()+0xf2>
c001995e:	83 ec 0c             	sub    esp,0xc
c0019961:	53                   	push   ebx
c0019962:	e8 a9 0a 00 00       	call   c001a410 <File::close()>
c0019967:	83 c4 10             	add    esp,0x10
c001996a:	83 ec 0c             	sub    esp,0xc
c001996d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001996f:	53                   	push   ebx
c0019970:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019973:	83 c4 10             	add    esp,0x10
c0019976:	81 c4 10 01 00 00    	add    esp,0x110
c001997c:	5b                   	pop    ebx
c001997d:	5e                   	pop    esi
c001997e:	5f                   	pop    edi
c001997f:	c3                   	ret    

c0019980 <KiIsSymlinkRegistered(char const*)>:
c0019980:	55                   	push   ebp
c0019981:	57                   	push   edi
c0019982:	56                   	push   esi
c0019983:	53                   	push   ebx
c0019984:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001998a:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0019991:	89 f0                	mov    eax,esi
c0019993:	e8 54 fd ff ff       	call   c00196ec <KiGetSymlinkHash(char const*)>
c0019998:	0f b7 c0             	movzx  eax,ax
c001999b:	53                   	push   ebx
c001999c:	56                   	push   esi
c001999d:	50                   	push   eax
c001999e:	68 54 1b 03 c0       	push   0xc0031b54
c00199a3:	e8 e5 f7 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00199a8:	89 f0                	mov    eax,esi
c00199aa:	e8 3d fd ff ff       	call   c00196ec <KiGetSymlinkHash(char const*)>
c00199af:	0f b7 c0             	movzx  eax,ax
c00199b2:	e8 e1 fb ff ff       	call   c0019598 <KiIsHashInTable(unsigned short)>
c00199b7:	83 c4 10             	add    esp,0x10
c00199ba:	88 c1                	mov    cl,al
c00199bc:	31 d2                	xor    edx,edx
c00199be:	31 c0                	xor    eax,eax
c00199c0:	84 c9                	test   cl,cl
c00199c2:	0f 84 31 01 00 00    	je     c0019af9 <KiIsSymlinkRegistered(char const*)+0x179>
c00199c8:	31 db                	xor    ebx,ebx
c00199ca:	39 1d c0 aa 03 c0    	cmp    DWORD PTR ds:0xc003aac0,ebx
c00199d0:	7e 30                	jle    c0019a02 <KiIsSymlinkRegistered(char const*)+0x82>
c00199d2:	89 d8                	mov    eax,ebx
c00199d4:	51                   	push   ecx
c00199d5:	c1 e0 08             	shl    eax,0x8
c00199d8:	51                   	push   ecx
c00199d9:	05 00 ab 03 c0       	add    eax,0xc003ab00
c00199de:	50                   	push   eax
c00199df:	56                   	push   esi
c00199e0:	e8 6b 6d fe ff       	call   c0000750 <strcmp>
c00199e5:	83 c4 10             	add    esp,0x10
c00199e8:	85 c0                	test   eax,eax
c00199ea:	75 13                	jne    c00199ff <KiIsSymlinkRegistered(char const*)+0x7f>
c00199ec:	8b 04 dd e0 aa 03 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffc5520]
c00199f3:	8b 14 dd e4 aa 03 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffc551c]
c00199fa:	e9 fa 00 00 00       	jmp    c0019af9 <KiIsSymlinkRegistered(char const*)+0x179>
c00199ff:	43                   	inc    ebx
c0019a00:	eb c8                	jmp    c00199ca <KiIsSymlinkRegistered(char const*)+0x4a>
c0019a02:	83 ec 0c             	sub    esp,0xc
c0019a05:	68 14 01 00 00       	push   0x114
c0019a0a:	e8 ef c8 ff ff       	call   c00162fe <malloc>
c0019a0f:	83 c4 0c             	add    esp,0xc
c0019a12:	89 c3                	mov    ebx,eax
c0019a14:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019a1a:	68 3f 1a 03 c0       	push   0xc0031a3f
c0019a1f:	50                   	push   eax
c0019a20:	e8 6f 09 00 00       	call   c001a394 <File::File(char const*, Process*)>
c0019a25:	83 c4 10             	add    esp,0x10
c0019a28:	85 db                	test   ebx,ebx
c0019a2a:	75 12                	jne    c0019a3e <KiIsSymlinkRegistered(char const*)+0xbe>
c0019a2c:	83 ec 0c             	sub    esp,0xc
c0019a2f:	68 69 1b 03 c0       	push   0xc0031b69
c0019a34:	e8 6d 67 00 00       	call   c00201a6 <KePanic(char const*)>
c0019a39:	83 c4 10             	add    esp,0x10
c0019a3c:	eb 10                	jmp    c0019a4e <KiIsSymlinkRegistered(char const*)+0xce>
c0019a3e:	83 ec 0c             	sub    esp,0xc
c0019a41:	53                   	push   ebx
c0019a42:	e8 2f 0c 00 00       	call   c001a676 <File::exists()>
c0019a47:	83 c4 10             	add    esp,0x10
c0019a4a:	84 c0                	test   al,al
c0019a4c:	74 de                	je     c0019a2c <KiIsSymlinkRegistered(char const*)+0xac>
c0019a4e:	52                   	push   edx
c0019a4f:	52                   	push   edx
c0019a50:	6a 01                	push   0x1
c0019a52:	53                   	push   ebx
c0019a53:	e8 5a 09 00 00       	call   c001a3b2 <File::open(FileOpenMode)>
c0019a58:	83 c4 10             	add    esp,0x10
c0019a5b:	85 c0                	test   eax,eax
c0019a5d:	74 10                	je     c0019a6f <KiIsSymlinkRegistered(char const*)+0xef>
c0019a5f:	83 ec 0c             	sub    esp,0xc
c0019a62:	68 84 1b 03 c0       	push   0xc0031b84
c0019a67:	e8 3a 67 00 00       	call   c00201a6 <KePanic(char const*)>
c0019a6c:	83 c4 10             	add    esp,0x10
c0019a6f:	83 ec 0c             	sub    esp,0xc
c0019a72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a74:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0019a78:	55                   	push   ebp
c0019a79:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0019a7d:	57                   	push   edi
c0019a7e:	6a 00                	push   0x0
c0019a80:	68 00 01 00 00       	push   0x100
c0019a85:	53                   	push   ebx
c0019a86:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a89:	83 c4 20             	add    esp,0x20
c0019a8c:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0019a94:	75 4b                	jne    c0019ae1 <KiIsSymlinkRegistered(char const*)+0x161>
c0019a96:	83 ec 0c             	sub    esp,0xc
c0019a99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a9b:	55                   	push   ebp
c0019a9c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019aa0:	52                   	push   edx
c0019aa1:	6a 00                	push   0x0
c0019aa3:	6a 08                	push   0x8
c0019aa5:	53                   	push   ebx
c0019aa6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019aa9:	83 c4 20             	add    esp,0x20
c0019aac:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019ab1:	75 2e                	jne    c0019ae1 <KiIsSymlinkRegistered(char const*)+0x161>
c0019ab3:	50                   	push   eax
c0019ab4:	50                   	push   eax
c0019ab5:	57                   	push   edi
c0019ab6:	56                   	push   esi
c0019ab7:	e8 94 6c fe ff       	call   c0000750 <strcmp>
c0019abc:	83 c4 10             	add    esp,0x10
c0019abf:	85 c0                	test   eax,eax
c0019ac1:	75 ac                	jne    c0019a6f <KiIsSymlinkRegistered(char const*)+0xef>
c0019ac3:	83 ec 0c             	sub    esp,0xc
c0019ac6:	53                   	push   ebx
c0019ac7:	e8 44 09 00 00       	call   c001a410 <File::close()>
c0019acc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019ace:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ad1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ad4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ad8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019adc:	83 c4 10             	add    esp,0x10
c0019adf:	eb 18                	jmp    c0019af9 <KiIsSymlinkRegistered(char const*)+0x179>
c0019ae1:	83 ec 0c             	sub    esp,0xc
c0019ae4:	53                   	push   ebx
c0019ae5:	e8 26 09 00 00       	call   c001a410 <File::close()>
c0019aea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019aec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019aef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019af2:	83 c4 10             	add    esp,0x10
c0019af5:	31 c0                	xor    eax,eax
c0019af7:	31 d2                	xor    edx,edx
c0019af9:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019aff:	5b                   	pop    ebx
c0019b00:	5e                   	pop    esi
c0019b01:	5f                   	pop    edi
c0019b02:	5d                   	pop    ebp
c0019b03:	c3                   	ret    

c0019b04 <KeDereferenceSymlink(char const*, char*)>:
c0019b04:	55                   	push   ebp
c0019b05:	57                   	push   edi
c0019b06:	56                   	push   esi
c0019b07:	53                   	push   ebx
c0019b08:	83 ec 48             	sub    esp,0x48
c0019b0b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019b0f:	56                   	push   esi
c0019b10:	e8 6b fe ff ff       	call   c0019980 <KiIsSymlinkRegistered(char const*)>
c0019b15:	83 c4 10             	add    esp,0x10
c0019b18:	89 c7                	mov    edi,eax
c0019b1a:	89 d0                	mov    eax,edx
c0019b1c:	09 f8                	or     eax,edi
c0019b1e:	75 07                	jne    c0019b27 <KeDereferenceSymlink(char const*, char*)+0x23>
c0019b20:	31 c0                	xor    eax,eax
c0019b22:	e9 7c 01 00 00       	jmp    c0019ca3 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019b27:	83 ec 0c             	sub    esp,0xc
c0019b2a:	89 d5                	mov    ebp,edx
c0019b2c:	68 14 01 00 00       	push   0x114
c0019b31:	e8 c8 c7 ff ff       	call   c00162fe <malloc>
c0019b36:	83 c4 0c             	add    esp,0xc
c0019b39:	89 c3                	mov    ebx,eax
c0019b3b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019b41:	56                   	push   esi
c0019b42:	50                   	push   eax
c0019b43:	e8 4c 08 00 00       	call   c001a394 <File::File(char const*, Process*)>
c0019b48:	83 c4 10             	add    esp,0x10
c0019b4b:	85 db                	test   ebx,ebx
c0019b4d:	0f 84 32 01 00 00    	je     c0019c85 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019b53:	56                   	push   esi
c0019b54:	56                   	push   esi
c0019b55:	6a 01                	push   0x1
c0019b57:	53                   	push   ebx
c0019b58:	e8 55 08 00 00       	call   c001a3b2 <File::open(FileOpenMode)>
c0019b5d:	83 c4 10             	add    esp,0x10
c0019b60:	85 c0                	test   eax,eax
c0019b62:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b64:	74 09                	je     c0019b6f <KeDereferenceSymlink(char const*, char*)+0x6b>
c0019b66:	83 ec 0c             	sub    esp,0xc
c0019b69:	53                   	push   ebx
c0019b6a:	e9 10 01 00 00       	jmp    c0019c7f <KeDereferenceSymlink(char const*, char*)+0x17b>
c0019b6f:	83 ec 0c             	sub    esp,0xc
c0019b72:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b76:	56                   	push   esi
c0019b77:	8d 54 24 37          	lea    edx,[esp+0x37]
c0019b7b:	52                   	push   edx
c0019b7c:	6a 00                	push   0x0
c0019b7e:	6a 08                	push   0x8
c0019b80:	53                   	push   ebx
c0019b81:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019b84:	83 c4 20             	add    esp,0x20
c0019b87:	85 c0                	test   eax,eax
c0019b89:	0f 85 e2 00 00 00    	jne    c0019c71 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019b8f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019b94:	0f 85 d7 00 00 00    	jne    c0019c71 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019b9a:	83 ec 0c             	sub    esp,0xc
c0019b9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019b9f:	56                   	push   esi
c0019ba0:	8d 54 24 20          	lea    edx,[esp+0x20]
c0019ba4:	52                   	push   edx
c0019ba5:	6a 00                	push   0x0
c0019ba7:	6a 08                	push   0x8
c0019ba9:	53                   	push   ebx
c0019baa:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019bad:	83 c4 20             	add    esp,0x20
c0019bb0:	85 c0                	test   eax,eax
c0019bb2:	0f 85 b9 00 00 00    	jne    c0019c71 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019bb8:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0019bbd:	0f 85 ae 00 00 00    	jne    c0019c71 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019bc3:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0019bc7:	0f 85 53 ff ff ff    	jne    c0019b20 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019bcd:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c0019bd1:	0f 85 49 ff ff ff    	jne    c0019b20 <KeDereferenceSymlink(char const*, char*)+0x1c>
c0019bd7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0019bdf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019be7:	51                   	push   ecx
c0019be8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0019bec:	50                   	push   eax
c0019bed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019bf1:	50                   	push   eax
c0019bf2:	53                   	push   ebx
c0019bf3:	e8 bc 0a 00 00       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c0019bf8:	83 c4 10             	add    esp,0x10
c0019bfb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0019c00:	75 6f                	jne    c0019c71 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c02:	31 c9                	xor    ecx,ecx
c0019c04:	bf 0f 00 00 00       	mov    edi,0xf
c0019c09:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019c0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019c11:	39 c7                	cmp    edi,eax
c0019c13:	89 cf                	mov    edi,ecx
c0019c15:	19 d7                	sbb    edi,edx
c0019c17:	73 58                	jae    c0019c71 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c19:	83 c0 f0             	add    eax,0xfffffff0
c0019c1c:	bf ff 00 00 00       	mov    edi,0xff
c0019c21:	83 d2 ff             	adc    edx,0xffffffff
c0019c24:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c28:	39 c7                	cmp    edi,eax
c0019c2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019c2e:	19 d1                	sbb    ecx,edx
c0019c30:	72 53                	jb     c0019c85 <KeDereferenceSymlink(char const*, char*)+0x181>
c0019c32:	40                   	inc    eax
c0019c33:	52                   	push   edx
c0019c34:	50                   	push   eax
c0019c35:	6a 00                	push   0x0
c0019c37:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0019c3b:	e8 b0 68 fe ff       	call   c00004f0 <memset>
c0019c40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c42:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c45:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0019c49:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019c51:	53                   	push   ebx
c0019c52:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019c55:	83 c4 20             	add    esp,0x20
c0019c58:	85 c0                	test   eax,eax
c0019c5a:	75 15                	jne    c0019c71 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c60:	89 c7                	mov    edi,eax
c0019c62:	c1 ff 1f             	sar    edi,0x1f
c0019c65:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0019c69:	75 06                	jne    c0019c71 <KeDereferenceSymlink(char const*, char*)+0x16d>
c0019c6b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c6f:	74 19                	je     c0019c8a <KeDereferenceSymlink(char const*, char*)+0x186>
c0019c71:	83 ec 0c             	sub    esp,0xc
c0019c74:	53                   	push   ebx
c0019c75:	e8 96 07 00 00       	call   c001a410 <File::close()>
c0019c7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c82:	83 c4 10             	add    esp,0x10
c0019c85:	83 c8 ff             	or     eax,0xffffffff
c0019c88:	eb 19                	jmp    c0019ca3 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0019c8a:	83 ec 0c             	sub    esp,0xc
c0019c8d:	53                   	push   ebx
c0019c8e:	e8 7d 07 00 00       	call   c001a410 <File::close()>
c0019c93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019c95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019c98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019c9b:	83 c4 10             	add    esp,0x10
c0019c9e:	b8 01 00 00 00       	mov    eax,0x1
c0019ca3:	83 c4 3c             	add    esp,0x3c
c0019ca6:	5b                   	pop    ebx
c0019ca7:	5e                   	pop    esi
c0019ca8:	5f                   	pop    edi
c0019ca9:	5d                   	pop    ebp
c0019caa:	c3                   	ret    

c0019cab <KeCreateSymlink(char const*, char const*)>:
c0019cab:	55                   	push   ebp
c0019cac:	57                   	push   edi
c0019cad:	56                   	push   esi
c0019cae:	53                   	push   ebx
c0019caf:	83 ec 38             	sub    esp,0x38
c0019cb2:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0019cb6:	68 14 01 00 00       	push   0x114
c0019cbb:	e8 3e c6 ff ff       	call   c00162fe <malloc>
c0019cc0:	6a 00                	push   0x0
c0019cc2:	89 c3                	mov    ebx,eax
c0019cc4:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0019cca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019cce:	50                   	push   eax
c0019ccf:	e8 e2 05 00 00       	call   c001a2b6 <File::File(char const*, Process*, bool)>
c0019cd4:	83 c4 20             	add    esp,0x20
c0019cd7:	b8 01 00 00 00       	mov    eax,0x1
c0019cdc:	85 db                	test   ebx,ebx
c0019cde:	0f 84 19 01 00 00    	je     c0019dfd <KeCreateSymlink(char const*, char const*)+0x152>
c0019ce4:	52                   	push   edx
c0019ce5:	52                   	push   edx
c0019ce6:	6a 12                	push   0x12
c0019ce8:	53                   	push   ebx
c0019ce9:	e8 c4 06 00 00       	call   c001a3b2 <File::open(FileOpenMode)>
c0019cee:	83 c4 10             	add    esp,0x10
c0019cf1:	85 c0                	test   eax,eax
c0019cf3:	74 0b                	je     c0019d00 <KeCreateSymlink(char const*, char const*)+0x55>
c0019cf5:	83 ec 0c             	sub    esp,0xc
c0019cf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cfa:	53                   	push   ebx
c0019cfb:	e9 f2 00 00 00       	jmp    c0019df2 <KeCreateSymlink(char const*, char const*)+0x147>
c0019d00:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0019d04:	be d1 1b 03 c0       	mov    esi,0xc0031bd1
c0019d09:	b9 09 00 00 00       	mov    ecx,0x9
c0019d0e:	fc                   	cld    
c0019d0f:	83 ec 0c             	sub    esp,0xc
c0019d12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d14:	8d 74 24 10          	lea    esi,[esp+0x10]
c0019d18:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d1a:	56                   	push   esi
c0019d1b:	8d 54 24 27          	lea    edx,[esp+0x27]
c0019d1f:	52                   	push   edx
c0019d20:	6a 00                	push   0x0
c0019d22:	6a 08                	push   0x8
c0019d24:	53                   	push   ebx
c0019d25:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019d28:	83 c4 20             	add    esp,0x20
c0019d2b:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d30:	0f 85 ae 00 00 00    	jne    c0019de4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019d36:	85 c0                	test   eax,eax
c0019d38:	0f 85 a6 00 00 00    	jne    c0019de4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019d3e:	e8 ca f9 ff ff       	call   c001970d <KiCreateSymlinkID()>
c0019d43:	83 ec 0c             	sub    esp,0xc
c0019d46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019d4a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0019d4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d50:	56                   	push   esi
c0019d51:	8d 54 24 18          	lea    edx,[esp+0x18]
c0019d55:	52                   	push   edx
c0019d56:	6a 00                	push   0x0
c0019d58:	6a 08                	push   0x8
c0019d5a:	53                   	push   ebx
c0019d5b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0019d5e:	83 c4 20             	add    esp,0x20
c0019d61:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0019d66:	75 7c                	jne    c0019de4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019d68:	85 c0                	test   eax,eax
c0019d6a:	75 78                	jne    c0019de4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019d6c:	83 ec 0c             	sub    esp,0xc
c0019d6f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d71:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019d74:	55                   	push   ebp
c0019d75:	e8 f6 67 fe ff       	call   c0000570 <strlen>
c0019d7a:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d7d:	31 d2                	xor    edx,edx
c0019d7f:	55                   	push   ebp
c0019d80:	52                   	push   edx
c0019d81:	50                   	push   eax
c0019d82:	53                   	push   ebx
c0019d83:	ff d7                	call   edi
c0019d85:	83 c4 14             	add    esp,0x14
c0019d88:	89 c6                	mov    esi,eax
c0019d8a:	55                   	push   ebp
c0019d8b:	e8 e0 67 fe ff       	call   c0000570 <strlen>
c0019d90:	83 c4 10             	add    esp,0x10
c0019d93:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019d97:	75 4b                	jne    c0019de4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019d99:	85 f6                	test   esi,esi
c0019d9b:	75 47                	jne    c0019de4 <KeCreateSymlink(char const*, char const*)+0x139>
c0019d9d:	50                   	push   eax
c0019d9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019da2:	55                   	push   ebp
c0019da3:	68 9f 1b 03 c0       	push   0xc0031b9f
c0019da8:	e8 e0 f3 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0019dad:	83 c4 0c             	add    esp,0xc
c0019db0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019db4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019db8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0019dbc:	e8 b9 f9 ff ff       	call   c001977a <KeRegisterSymlink(char const*, unsigned long long)>
c0019dc1:	c7 04 24 c4 1b 03 c0 	mov    DWORD PTR [esp],0xc0031bc4
c0019dc8:	e8 c0 f3 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0019dcd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dd0:	e8 3b 06 00 00       	call   c001a410 <File::close()>
c0019dd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019dd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019dda:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019ddd:	83 c4 10             	add    esp,0x10
c0019de0:	31 c0                	xor    eax,eax
c0019de2:	eb 19                	jmp    c0019dfd <KeCreateSymlink(char const*, char const*)+0x152>
c0019de4:	83 ec 0c             	sub    esp,0xc
c0019de7:	53                   	push   ebx
c0019de8:	e8 23 06 00 00       	call   c001a410 <File::close()>
c0019ded:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019def:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019df2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019df5:	83 c4 10             	add    esp,0x10
c0019df8:	b8 01 00 00 00       	mov    eax,0x1
c0019dfd:	83 c4 2c             	add    esp,0x2c
c0019e00:	5b                   	pop    ebx
c0019e01:	5e                   	pop    esi
c0019e02:	5f                   	pop    edi
c0019e03:	5d                   	pop    ebp
c0019e04:	c3                   	ret    
c0019e05:	90                   	nop

c0019e06 <File::read(unsigned long long, void*, int*)>:
c0019e06:	53                   	push   ebx
c0019e07:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e0b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e0f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019e16:	83 f8 19             	cmp    eax,0x19
c0019e19:	77 35                	ja     c0019e50 <File::read(unsigned long long, void*, int*)+0x4a>
c0019e1b:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019e22:	85 c0                	test   eax,eax
c0019e24:	74 2a                	je     c0019e50 <File::read(unsigned long long, void*, int*)+0x4a>
c0019e26:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019e2c:	85 c0                	test   eax,eax
c0019e2e:	74 20                	je     c0019e50 <File::read(unsigned long long, void*, int*)+0x4a>
c0019e30:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019e34:	74 21                	je     c0019e57 <File::read(unsigned long long, void*, int*)+0x51>
c0019e36:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019e38:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019e3c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019e42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e46:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019e4a:	5b                   	pop    ebx
c0019e4b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0019e4e:	ff e0                	jmp    eax
c0019e50:	b8 0b 00 00 00       	mov    eax,0xb
c0019e55:	eb 05                	jmp    c0019e5c <File::read(unsigned long long, void*, int*)+0x56>
c0019e57:	b8 05 00 00 00       	mov    eax,0x5
c0019e5c:	5b                   	pop    ebx
c0019e5d:	c3                   	ret    

c0019e5e <File::write(unsigned long long, void*, int*)>:
c0019e5e:	53                   	push   ebx
c0019e5f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e63:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019e67:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019e6e:	83 f8 19             	cmp    eax,0x19
c0019e71:	77 35                	ja     c0019ea8 <File::write(unsigned long long, void*, int*)+0x4a>
c0019e73:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019e7a:	85 c0                	test   eax,eax
c0019e7c:	74 2a                	je     c0019ea8 <File::write(unsigned long long, void*, int*)+0x4a>
c0019e7e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019e84:	85 c0                	test   eax,eax
c0019e86:	74 20                	je     c0019ea8 <File::write(unsigned long long, void*, int*)+0x4a>
c0019e88:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019e8c:	74 21                	je     c0019eaf <File::write(unsigned long long, void*, int*)+0x51>
c0019e8e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019e90:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019e94:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019e9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019e9e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019ea2:	5b                   	pop    ebx
c0019ea3:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0019ea6:	ff e0                	jmp    eax
c0019ea8:	b8 0b 00 00 00       	mov    eax,0xb
c0019ead:	eb 05                	jmp    c0019eb4 <File::write(unsigned long long, void*, int*)+0x56>
c0019eaf:	b8 05 00 00 00       	mov    eax,0x5
c0019eb4:	5b                   	pop    ebx
c0019eb5:	c3                   	ret    

c0019eb6 <Directory::read(unsigned long long, void*, int*)>:
c0019eb6:	53                   	push   ebx
c0019eb7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ebb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019ebf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0019ec6:	83 f8 19             	cmp    eax,0x19
c0019ec9:	77 35                	ja     c0019f00 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019ecb:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0019ed2:	85 c0                	test   eax,eax
c0019ed4:	74 2a                	je     c0019f00 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019ed6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0019edc:	85 c0                	test   eax,eax
c0019ede:	74 20                	je     c0019f00 <Directory::read(unsigned long long, void*, int*)+0x4a>
c0019ee0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0019ee4:	74 21                	je     c0019f07 <Directory::read(unsigned long long, void*, int*)+0x51>
c0019ee6:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019ee8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0019eec:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0019ef2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019ef6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019efa:	5b                   	pop    ebx
c0019efb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0019efe:	ff e0                	jmp    eax
c0019f00:	b8 0b 00 00 00       	mov    eax,0xb
c0019f05:	eb 05                	jmp    c0019f0c <Directory::read(unsigned long long, void*, int*)+0x56>
c0019f07:	b8 05 00 00 00       	mov    eax,0x5
c0019f0c:	5b                   	pop    ebx
c0019f0d:	c3                   	ret    

c0019f0e <Directory::write(unsigned long long, void*, int*)>:
c0019f0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f12:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0019f19:	b8 0b 00 00 00       	mov    eax,0xb
c0019f1e:	83 fa 19             	cmp    edx,0x19
c0019f21:	77 18                	ja     c0019f3b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019f23:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c0019f2a:	85 d2                	test   edx,edx
c0019f2c:	74 0d                	je     c0019f3b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0019f2e:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0019f35:	19 c0                	sbb    eax,eax
c0019f37:	83 e0 0a             	and    eax,0xa
c0019f3a:	40                   	inc    eax
c0019f3b:	c3                   	ret    

c0019f3c <File::isAtty()>:
c0019f3c:	31 c0                	xor    eax,eax
c0019f3e:	c3                   	ret    
c0019f3f:	90                   	nop

c0019f40 <Directory::isAtty()>:
c0019f40:	31 c0                	xor    eax,eax
c0019f42:	c3                   	ret    
c0019f43:	90                   	nop

c0019f44 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019f44:	b8 0a 00 00 00       	mov    eax,0xa
c0019f49:	c3                   	ret    

c0019f4a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0019f4a:	b8 0a 00 00 00       	mov    eax,0xa
c0019f4f:	c3                   	ret    

c0019f50 <Filesystem::allocateSwapfile(char const*, int)>:
c0019f50:	31 c0                	xor    eax,eax
c0019f52:	31 d2                	xor    edx,edx
c0019f54:	c3                   	ret    
c0019f55:	90                   	nop

c0019f56 <File::~File()>:
c0019f56:	83 ec 0c             	sub    esp,0xc
c0019f59:	ba 90 1c 03 c0       	mov    edx,0xc0031c90
c0019f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f62:	89 10                	mov    DWORD PTR [eax],edx
c0019f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f68:	83 ec 0c             	sub    esp,0xc
c0019f6b:	50                   	push   eax
c0019f6c:	e8 7b dc ff ff       	call   c0017bec <UnixFile::~UnixFile()>
c0019f71:	83 c4 10             	add    esp,0x10
c0019f74:	90                   	nop
c0019f75:	83 c4 0c             	add    esp,0xc
c0019f78:	c3                   	ret    
c0019f79:	90                   	nop

c0019f7a <File::~File()>:
c0019f7a:	83 ec 0c             	sub    esp,0xc
c0019f7d:	83 ec 0c             	sub    esp,0xc
c0019f80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f84:	e8 cd ff ff ff       	call   c0019f56 <File::~File()>
c0019f89:	83 c4 10             	add    esp,0x10
c0019f8c:	83 ec 08             	sub    esp,0x8
c0019f8f:	68 14 01 00 00       	push   0x114
c0019f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f98:	e8 c3 f0 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c0019f9d:	83 c4 10             	add    esp,0x10
c0019fa0:	83 c4 0c             	add    esp,0xc
c0019fa3:	c3                   	ret    

c0019fa4 <Directory::~Directory()>:
c0019fa4:	83 ec 0c             	sub    esp,0xc
c0019fa7:	ba ac 1c 03 c0       	mov    edx,0xc0031cac
c0019fac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fb0:	89 10                	mov    DWORD PTR [eax],edx
c0019fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fb6:	83 ec 0c             	sub    esp,0xc
c0019fb9:	50                   	push   eax
c0019fba:	e8 2d dc ff ff       	call   c0017bec <UnixFile::~UnixFile()>
c0019fbf:	83 c4 10             	add    esp,0x10
c0019fc2:	90                   	nop
c0019fc3:	83 c4 0c             	add    esp,0xc
c0019fc6:	c3                   	ret    
c0019fc7:	90                   	nop

c0019fc8 <Directory::~Directory()>:
c0019fc8:	83 ec 0c             	sub    esp,0xc
c0019fcb:	83 ec 0c             	sub    esp,0xc
c0019fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fd2:	e8 cd ff ff ff       	call   c0019fa4 <Directory::~Directory()>
c0019fd7:	83 c4 10             	add    esp,0x10
c0019fda:	83 ec 08             	sub    esp,0x8
c0019fdd:	68 14 01 00 00       	push   0x114
c0019fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fe6:	e8 75 f0 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c0019feb:	83 c4 10             	add    esp,0x10
c0019fee:	83 c4 0c             	add    esp,0xc
c0019ff1:	c3                   	ret    

c0019ff2 <Filesystem::Filesystem()>:
c0019ff2:	ba 24 1c 03 c0       	mov    edx,0xc0031c24
c0019ff7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ffb:	89 10                	mov    DWORD PTR [eax],edx
c0019ffd:	8b 15 04 cf 03 c0    	mov    edx,DWORD PTR ds:0xc003cf04
c001a003:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a007:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a00a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a00e:	a3 04 cf 03 c0       	mov    ds:0xc003cf04,eax
c001a013:	90                   	nop
c001a014:	c3                   	ret    
c001a015:	90                   	nop

c001a016 <Filesystem::~Filesystem()>:
c001a016:	ba 24 1c 03 c0       	mov    edx,0xc0031c24
c001a01b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a01f:	89 10                	mov    DWORD PTR [eax],edx
c001a021:	90                   	nop
c001a022:	c3                   	ret    
c001a023:	90                   	nop

c001a024 <Filesystem::~Filesystem()>:
c001a024:	83 ec 0c             	sub    esp,0xc
c001a027:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a02b:	e8 e6 ff ff ff       	call   c001a016 <Filesystem::~Filesystem()>
c001a030:	83 c4 04             	add    esp,0x4
c001a033:	83 ec 08             	sub    esp,0x8
c001a036:	6a 08                	push   0x8
c001a038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a03c:	e8 1f f0 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001a041:	83 c4 10             	add    esp,0x10
c001a044:	83 c4 0c             	add    esp,0xc
c001a047:	c3                   	ret    

c001a048 <Fs::getcwd(Process*, char*, int)>:
c001a048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a04c:	31 c0                	xor    eax,eax
c001a04e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a051:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001a055:	7d 15                	jge    c001a06c <Fs::getcwd(Process*, char*, int)+0x24>
c001a057:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001a05b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001a062:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001a065:	84 c9                	test   cl,cl
c001a067:	74 06                	je     c001a06f <Fs::getcwd(Process*, char*, int)+0x27>
c001a069:	40                   	inc    eax
c001a06a:	eb e2                	jmp    c001a04e <Fs::getcwd(Process*, char*, int)+0x6>
c001a06c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c001a06f:	31 c0                	xor    eax,eax
c001a071:	c3                   	ret    

c001a072 <Fs::initVFS()>:
c001a072:	83 ec 18             	sub    esp,0x18
c001a075:	6a 08                	push   0x8
c001a077:	e8 82 c2 ff ff       	call   c00162fe <malloc>
c001a07c:	89 04 24             	mov    DWORD PTR [esp],eax
c001a07f:	e8 c0 e9 00 00       	call   c0028a44 <FAT::FAT()>
c001a084:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a08b:	e8 6e c2 ff ff       	call   c00162fe <malloc>
c001a090:	89 04 24             	mov    DWORD PTR [esp],eax
c001a093:	e8 d8 f8 00 00       	call   c0029970 <ISO9660::ISO9660()>
c001a098:	83 c4 1c             	add    esp,0x1c
c001a09b:	c3                   	ret    

c001a09c <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c001a09c:	55                   	push   ebp
c001a09d:	57                   	push   edi
c001a09e:	56                   	push   esi
c001a09f:	53                   	push   ebx
c001a0a0:	81 ec 10 04 00 00    	sub    esp,0x410
c001a0a6:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c001a0ad:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c001a0b4:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c001a0bc:	68 00 04 00 00       	push   0x400
c001a0c1:	6a 00                	push   0x0
c001a0c3:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a0c7:	57                   	push   edi
c001a0c8:	e8 23 64 fe ff       	call   c00004f0 <memset>
c001a0cd:	83 c4 10             	add    esp,0x10
c001a0d0:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c001a0d4:	75 0b                	jne    c001a0e1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c001a0d6:	50                   	push   eax
c001a0d7:	50                   	push   eax
c001a0d8:	55                   	push   ebp
c001a0d9:	57                   	push   edi
c001a0da:	e8 61 65 fe ff       	call   c0000640 <strcpy>
c001a0df:	eb 51                	jmp    c001a132 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c001a0e1:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001a0e5:	83 f8 5c             	cmp    eax,0x5c
c001a0e8:	74 05                	je     c001a0ef <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c001a0ea:	83 f8 2f             	cmp    eax,0x2f
c001a0ed:	75 1e                	jne    c001a10d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c001a0ef:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001a0f6:	8a 00                	mov    al,BYTE PTR [eax]
c001a0f8:	3c 60                	cmp    al,0x60
c001a0fa:	7e 03                	jle    c001a0ff <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c001a0fc:	83 e8 20             	sub    eax,0x20
c001a0ff:	88 04 24             	mov    BYTE PTR [esp],al
c001a102:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a109:	50                   	push   eax
c001a10a:	50                   	push   eax
c001a10b:	eb 1e                	jmp    c001a12b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c001a10d:	50                   	push   eax
c001a10e:	50                   	push   eax
c001a10f:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c001a116:	57                   	push   edi
c001a117:	e8 24 65 fe ff       	call   c0000640 <strcpy>
c001a11c:	58                   	pop    eax
c001a11d:	5a                   	pop    edx
c001a11e:	68 1f 2d 03 c0       	push   0xc0032d1f
c001a123:	57                   	push   edi
c001a124:	e8 17 67 fe ff       	call   c0000840 <strcat>
c001a129:	59                   	pop    ecx
c001a12a:	58                   	pop    eax
c001a12b:	55                   	push   ebp
c001a12c:	57                   	push   edi
c001a12d:	e8 0e 67 fe ff       	call   c0000840 <strcat>
c001a132:	83 c4 10             	add    esp,0x10
c001a135:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a138:	3c 60                	cmp    al,0x60
c001a13a:	7e 03                	jle    c001a13f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c001a13c:	83 e8 20             	sub    eax,0x20
c001a13f:	88 04 24             	mov    BYTE PTR [esp],al
c001a142:	88 06                	mov    BYTE PTR [esi],al
c001a144:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001a14b:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c001a151:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c001a155:	bf 03 00 00 00       	mov    edi,0x3
c001a15a:	b8 03 00 00 00       	mov    eax,0x3
c001a15f:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c001a163:	89 e9                	mov    ecx,ebp
c001a165:	85 ed                	test   ebp,ebp
c001a167:	0f 84 97 00 00 00    	je     c001a204 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c001a16d:	8d 57 01             	lea    edx,[edi+0x1]
c001a170:	83 fd 5c             	cmp    ebp,0x5c
c001a173:	74 05                	je     c001a17a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c001a175:	83 fd 2f             	cmp    ebp,0x2f
c001a178:	75 12                	jne    c001a18c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a17a:	89 c5                	mov    ebp,eax
c001a17c:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a181:	74 09                	je     c001a18c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c001a183:	40                   	inc    eax
c001a184:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c001a188:	89 d7                	mov    edi,edx
c001a18a:	eb d3                	jmp    c001a15f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c001a18c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001a191:	0f be e9             	movsx  ebp,cl
c001a194:	75 5e                	jne    c001a1f4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a196:	83 fd 2e             	cmp    ebp,0x2e
c001a199:	75 59                	jne    c001a1f4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c001a19b:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c001a19f:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c001a1a4:	74 18                	je     c001a1be <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c001a1a6:	83 fd 2e             	cmp    ebp,0x2e
c001a1a9:	74 53                	je     c001a1fe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a1ab:	89 fa                	mov    edx,edi
c001a1ad:	42                   	inc    edx
c001a1ae:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a1b2:	83 f9 2f             	cmp    ecx,0x2f
c001a1b5:	74 f6                	je     c001a1ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a1b7:	83 f9 5c             	cmp    ecx,0x5c
c001a1ba:	74 f1                	je     c001a1ad <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c001a1bc:	eb ca                	jmp    c001a188 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1be:	83 fd 2e             	cmp    ebp,0x2e
c001a1c1:	74 3b                	je     c001a1fe <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c001a1c3:	83 f8 03             	cmp    eax,0x3
c001a1c6:	74 c0                	je     c001a188 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1c8:	42                   	inc    edx
c001a1c9:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c001a1cd:	83 f9 5c             	cmp    ecx,0x5c
c001a1d0:	74 f6                	je     c001a1c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a1d2:	83 f9 2f             	cmp    ecx,0x2f
c001a1d5:	74 f1                	je     c001a1c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c001a1d7:	48                   	dec    eax
c001a1d8:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a1dc:	75 06                	jne    c001a1e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a1de:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a1e2:	eb f3                	jmp    c001a1d7 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c001a1e4:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c001a1e8:	74 07                	je     c001a1f1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c001a1ea:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a1ee:	48                   	dec    eax
c001a1ef:	eb f3                	jmp    c001a1e4 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c001a1f1:	40                   	inc    eax
c001a1f2:	eb 94                	jmp    c001a188 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1f4:	83 fd 5c             	cmp    ebp,0x5c
c001a1f7:	74 8f                	je     c001a188 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1f9:	83 fd 2f             	cmp    ebp,0x2f
c001a1fc:	74 8a                	je     c001a188 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a1fe:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c001a201:	40                   	inc    eax
c001a202:	eb 84                	jmp    c001a188 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c001a204:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001a208:	83 ec 0c             	sub    esp,0xc
c001a20b:	56                   	push   esi
c001a20c:	e8 5f 63 fe ff       	call   c0000570 <strlen>
c001a211:	83 c4 10             	add    esp,0x10
c001a214:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c001a219:	74 17                	je     c001a232 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a21b:	83 ec 0c             	sub    esp,0xc
c001a21e:	56                   	push   esi
c001a21f:	e8 4c 63 fe ff       	call   c0000570 <strlen>
c001a224:	83 c4 10             	add    esp,0x10
c001a227:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c001a22c:	74 04                	je     c001a232 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c001a22e:	31 ff                	xor    edi,edi
c001a230:	eb 5c                	jmp    c001a28e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a232:	83 ec 0c             	sub    esp,0xc
c001a235:	56                   	push   esi
c001a236:	e8 35 63 fe ff       	call   c0000570 <strlen>
c001a23b:	83 c4 10             	add    esp,0x10
c001a23e:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c001a243:	74 e9                	je     c001a22e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c001a245:	83 ec 0c             	sub    esp,0xc
c001a248:	56                   	push   esi
c001a249:	e8 22 63 fe ff       	call   c0000570 <strlen>
c001a24e:	83 c4 10             	add    esp,0x10
c001a251:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c001a256:	eb b0                	jmp    c001a208 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c001a258:	52                   	push   edx
c001a259:	52                   	push   edx
c001a25a:	56                   	push   esi
c001a25b:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c001a25f:	55                   	push   ebp
c001a260:	e8 db 63 fe ff       	call   c0000640 <strcpy>
c001a265:	59                   	pop    ecx
c001a266:	58                   	pop    eax
c001a267:	56                   	push   esi
c001a268:	55                   	push   ebp
c001a269:	e8 96 f8 ff ff       	call   c0019b04 <KeDereferenceSymlink(char const*, char*)>
c001a26e:	83 c4 10             	add    esp,0x10
c001a271:	48                   	dec    eax
c001a272:	75 37                	jne    c001a2ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a274:	50                   	push   eax
c001a275:	56                   	push   esi
c001a276:	55                   	push   ebp
c001a277:	68 da 1b 03 c0       	push   0xc0031bda
c001a27c:	e8 0c ef ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001a281:	83 c4 10             	add    esp,0x10
c001a284:	8d 47 01             	lea    eax,[edi+0x1]
c001a287:	83 ff 14             	cmp    edi,0x14
c001a28a:	74 08                	je     c001a294 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c001a28c:	89 c7                	mov    edi,eax
c001a28e:	85 db                	test   ebx,ebx
c001a290:	75 c6                	jne    c001a258 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c001a292:	eb 17                	jmp    c001a2ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c001a294:	83 ec 0c             	sub    esp,0xc
c001a297:	bf 15 00 00 00       	mov    edi,0x15
c001a29c:	68 f5 1b 03 c0       	push   0xc0031bf5
c001a2a1:	e8 00 5f 00 00       	call   c00201a6 <KePanic(char const*)>
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	eb e3                	jmp    c001a28e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c001a2ab:	81 c4 0c 04 00 00    	add    esp,0x40c
c001a2b1:	5b                   	pop    ebx
c001a2b2:	5e                   	pop    esi
c001a2b3:	5f                   	pop    edi
c001a2b4:	5d                   	pop    ebp
c001a2b5:	c3                   	ret    

c001a2b6 <File::File(char const*, Process*, bool)>:
c001a2b6:	83 ec 1c             	sub    esp,0x1c
c001a2b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a2bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a2c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2c5:	83 ec 08             	sub    esp,0x8
c001a2c8:	6a 00                	push   0x0
c001a2ca:	50                   	push   eax
c001a2cb:	e8 36 d7 ff ff       	call   c0017a06 <UnixFile::UnixFile(int)>
c001a2d0:	83 c4 10             	add    esp,0x10
c001a2d3:	ba 90 1c 03 c0       	mov    edx,0xc0031c90
c001a2d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2dc:	89 10                	mov    DWORD PTR [eax],edx
c001a2de:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2e3:	85 c0                	test   eax,eax
c001a2e5:	74 0f                	je     c001a2f6 <File::File(char const*, Process*, bool)+0x40>
c001a2e7:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a2ec:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001a2f0:	74 04                	je     c001a2f6 <File::File(char const*, Process*, bool)+0x40>
c001a2f2:	b0 01                	mov    al,0x1
c001a2f4:	eb 02                	jmp    c001a2f8 <File::File(char const*, Process*, bool)+0x42>
c001a2f6:	b0 00                	mov    al,0x0
c001a2f8:	0f b6 c0             	movzx  eax,al
c001a2fb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a2ff:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a305:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a309:	83 c2 0d             	add    edx,0xd
c001a30c:	50                   	push   eax
c001a30d:	51                   	push   ecx
c001a30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a312:	52                   	push   edx
c001a313:	e8 84 fd ff ff       	call   c001a09c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a318:	83 c4 10             	add    esp,0x10
c001a31b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a31f:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a322:	83 e8 41             	sub    eax,0x41
c001a325:	88 c2                	mov    dl,al
c001a327:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a32b:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a331:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a335:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a33d:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a343:	0f b6 c0             	movzx  eax,al
c001a346:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a34d:	85 c0                	test   eax,eax
c001a34f:	74 3e                	je     c001a38f <File::File(char const*, Process*, bool)+0xd9>
c001a351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a355:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a35b:	0f b6 c0             	movzx  eax,al
c001a35e:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a365:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a36b:	85 c0                	test   eax,eax
c001a36d:	75 20                	jne    c001a38f <File::File(char const*, Process*, bool)+0xd9>
c001a36f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a373:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a379:	0f b6 c0             	movzx  eax,al
c001a37c:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a383:	83 ec 0c             	sub    esp,0xc
c001a386:	50                   	push   eax
c001a387:	e8 b2 21 00 00       	call   c001c53e <LogicalDisk::mount()>
c001a38c:	83 c4 10             	add    esp,0x10
c001a38f:	90                   	nop
c001a390:	83 c4 1c             	add    esp,0x1c
c001a393:	c3                   	ret    

c001a394 <File::File(char const*, Process*)>:
c001a394:	83 ec 0c             	sub    esp,0xc
c001a397:	6a 01                	push   0x1
c001a399:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a39d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3a5:	e8 0c ff ff ff       	call   c001a2b6 <File::File(char const*, Process*, bool)>
c001a3aa:	83 c4 10             	add    esp,0x10
c001a3ad:	90                   	nop
c001a3ae:	83 c4 0c             	add    esp,0xc
c001a3b1:	c3                   	ret    

c001a3b2 <File::open(FileOpenMode)>:
c001a3b2:	53                   	push   ebx
c001a3b3:	b8 0b 00 00 00       	mov    eax,0xb
c001a3b8:	83 ec 08             	sub    esp,0x8
c001a3bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3bf:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a3c6:	83 fa 19             	cmp    edx,0x19
c001a3c9:	77 40                	ja     c001a40b <File::open(FileOpenMode)+0x59>
c001a3cb:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a3d2:	85 d2                	test   edx,edx
c001a3d4:	74 35                	je     c001a40b <File::open(FileOpenMode)+0x59>
c001a3d6:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a3dc:	85 d2                	test   edx,edx
c001a3de:	74 2b                	je     c001a40b <File::open(FileOpenMode)+0x59>
c001a3e0:	b8 06 00 00 00       	mov    eax,0x6
c001a3e5:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a3e9:	75 20                	jne    c001a40b <File::open(FileOpenMode)+0x59>
c001a3eb:	8b 02                	mov    eax,DWORD PTR [edx]
c001a3ed:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a3f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a3f7:	51                   	push   ecx
c001a3f8:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a3fb:	51                   	push   ecx
c001a3fc:	52                   	push   edx
c001a3fd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a400:	83 c4 10             	add    esp,0x10
c001a403:	85 c0                	test   eax,eax
c001a405:	75 04                	jne    c001a40b <File::open(FileOpenMode)+0x59>
c001a407:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a40b:	83 c4 08             	add    esp,0x8
c001a40e:	5b                   	pop    ebx
c001a40f:	c3                   	ret    

c001a410 <File::close()>:
c001a410:	53                   	push   ebx
c001a411:	b8 0b 00 00 00       	mov    eax,0xb
c001a416:	83 ec 08             	sub    esp,0x8
c001a419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a41d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a424:	83 f9 19             	cmp    ecx,0x19
c001a427:	77 41                	ja     c001a46a <File::close()+0x5a>
c001a429:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a430:	85 db                	test   ebx,ebx
c001a432:	74 36                	je     c001a46a <File::close()+0x5a>
c001a434:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a43b:	74 2d                	je     c001a46a <File::close()+0x5a>
c001a43d:	b8 05 00 00 00       	mov    eax,0x5
c001a442:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a446:	74 22                	je     c001a46a <File::close()+0x5a>
c001a448:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a44c:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a453:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a459:	53                   	push   ebx
c001a45a:	53                   	push   ebx
c001a45b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a45d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a463:	50                   	push   eax
c001a464:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c001a467:	83 c4 10             	add    esp,0x10
c001a46a:	83 c4 08             	add    esp,0x8
c001a46d:	5b                   	pop    ebx
c001a46e:	c3                   	ret    
c001a46f:	90                   	nop

c001a470 <File::seek(unsigned long long)>:
c001a470:	56                   	push   esi
c001a471:	53                   	push   ebx
c001a472:	b8 0b 00 00 00       	mov    eax,0xb
c001a477:	51                   	push   ecx
c001a478:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a47c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a480:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a487:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a48b:	83 fa 19             	cmp    edx,0x19
c001a48e:	77 31                	ja     c001a4c1 <File::seek(unsigned long long)+0x51>
c001a490:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a497:	85 d2                	test   edx,edx
c001a499:	74 26                	je     c001a4c1 <File::seek(unsigned long long)+0x51>
c001a49b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a4a1:	85 d2                	test   edx,edx
c001a4a3:	74 1c                	je     c001a4c1 <File::seek(unsigned long long)+0x51>
c001a4a5:	b8 05 00 00 00       	mov    eax,0x5
c001a4aa:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a4ae:	74 11                	je     c001a4c1 <File::seek(unsigned long long)+0x51>
c001a4b0:	8b 02                	mov    eax,DWORD PTR [edx]
c001a4b2:	53                   	push   ebx
c001a4b3:	51                   	push   ecx
c001a4b4:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a4ba:	52                   	push   edx
c001a4bb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a4be:	83 c4 10             	add    esp,0x10
c001a4c1:	5a                   	pop    edx
c001a4c2:	5b                   	pop    ebx
c001a4c3:	5e                   	pop    esi
c001a4c4:	c3                   	ret    
c001a4c5:	90                   	nop

c001a4c6 <File::truncate(unsigned long long)>:
c001a4c6:	56                   	push   esi
c001a4c7:	53                   	push   ebx
c001a4c8:	b8 0b 00 00 00       	mov    eax,0xb
c001a4cd:	51                   	push   ecx
c001a4ce:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a4d6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c001a4dd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4e1:	83 fa 19             	cmp    edx,0x19
c001a4e4:	77 31                	ja     c001a517 <File::truncate(unsigned long long)+0x51>
c001a4e6:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a4ed:	85 d2                	test   edx,edx
c001a4ef:	74 26                	je     c001a517 <File::truncate(unsigned long long)+0x51>
c001a4f1:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a4f7:	85 d2                	test   edx,edx
c001a4f9:	74 1c                	je     c001a517 <File::truncate(unsigned long long)+0x51>
c001a4fb:	b8 05 00 00 00       	mov    eax,0x5
c001a500:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001a504:	74 11                	je     c001a517 <File::truncate(unsigned long long)+0x51>
c001a506:	8b 02                	mov    eax,DWORD PTR [edx]
c001a508:	53                   	push   ebx
c001a509:	51                   	push   ecx
c001a50a:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001a510:	52                   	push   edx
c001a511:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001a514:	83 c4 10             	add    esp,0x10
c001a517:	5a                   	pop    edx
c001a518:	5b                   	pop    ebx
c001a519:	5e                   	pop    esi
c001a51a:	c3                   	ret    
c001a51b:	90                   	nop

c001a51c <File::tell(unsigned long long*)>:
c001a51c:	83 ec 0c             	sub    esp,0xc
c001a51f:	b8 0b 00 00 00       	mov    eax,0xb
c001a524:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a528:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001a52f:	83 fa 19             	cmp    edx,0x19
c001a532:	77 34                	ja     c001a568 <File::tell(unsigned long long*)+0x4c>
c001a534:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a53b:	85 d2                	test   edx,edx
c001a53d:	74 29                	je     c001a568 <File::tell(unsigned long long*)+0x4c>
c001a53f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a545:	85 d2                	test   edx,edx
c001a547:	74 1f                	je     c001a568 <File::tell(unsigned long long*)+0x4c>
c001a549:	b8 05 00 00 00       	mov    eax,0x5
c001a54e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001a552:	74 14                	je     c001a568 <File::tell(unsigned long long*)+0x4c>
c001a554:	50                   	push   eax
c001a555:	8b 02                	mov    eax,DWORD PTR [edx]
c001a557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a55b:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001a561:	52                   	push   edx
c001a562:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a565:	83 c4 10             	add    esp,0x10
c001a568:	83 c4 0c             	add    esp,0xc
c001a56b:	c3                   	ret    

c001a56c <File::rewind()>:
c001a56c:	83 ec 10             	sub    esp,0x10
c001a56f:	6a 00                	push   0x0
c001a571:	6a 00                	push   0x0
c001a573:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a577:	e8 f4 fe ff ff       	call   c001a470 <File::seek(unsigned long long)>
c001a57c:	83 c4 1c             	add    esp,0x1c
c001a57f:	c3                   	ret    

c001a580 <File::unlink()>:
c001a580:	83 ec 0c             	sub    esp,0xc
c001a583:	b8 0b 00 00 00       	mov    eax,0xb
c001a588:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a58c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a593:	83 f9 19             	cmp    ecx,0x19
c001a596:	77 2f                	ja     c001a5c7 <File::unlink()+0x47>
c001a598:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a59f:	85 c9                	test   ecx,ecx
c001a5a1:	74 24                	je     c001a5c7 <File::unlink()+0x47>
c001a5a3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a5a9:	85 c9                	test   ecx,ecx
c001a5ab:	74 1a                	je     c001a5c7 <File::unlink()+0x47>
c001a5ad:	b8 06 00 00 00       	mov    eax,0x6
c001a5b2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a5b6:	75 0f                	jne    c001a5c7 <File::unlink()+0x47>
c001a5b8:	83 c2 0d             	add    edx,0xd
c001a5bb:	50                   	push   eax
c001a5bc:	50                   	push   eax
c001a5bd:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a5bf:	52                   	push   edx
c001a5c0:	51                   	push   ecx
c001a5c1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001a5c4:	83 c4 10             	add    esp,0x10
c001a5c7:	83 c4 0c             	add    esp,0xc
c001a5ca:	c3                   	ret    
c001a5cb:	90                   	nop

c001a5cc <File::rename(char const*)>:
c001a5cc:	83 ec 0c             	sub    esp,0xc
c001a5cf:	b8 0b 00 00 00       	mov    eax,0xb
c001a5d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a5d8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a5df:	83 f9 19             	cmp    ecx,0x19
c001a5e2:	77 32                	ja     c001a616 <File::rename(char const*)+0x4a>
c001a5e4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a5eb:	85 c9                	test   ecx,ecx
c001a5ed:	74 27                	je     c001a616 <File::rename(char const*)+0x4a>
c001a5ef:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a5f5:	85 c9                	test   ecx,ecx
c001a5f7:	74 1d                	je     c001a616 <File::rename(char const*)+0x4a>
c001a5f9:	b8 06 00 00 00       	mov    eax,0x6
c001a5fe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a602:	75 12                	jne    c001a616 <File::rename(char const*)+0x4a>
c001a604:	83 c2 0d             	add    edx,0xd
c001a607:	50                   	push   eax
c001a608:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a60a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a60e:	52                   	push   edx
c001a60f:	51                   	push   ecx
c001a610:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001a613:	83 c4 10             	add    esp,0x10
c001a616:	83 c4 0c             	add    esp,0xc
c001a619:	c3                   	ret    

c001a61a <File::chfatattr(unsigned char, unsigned char)>:
c001a61a:	57                   	push   edi
c001a61b:	b8 0b 00 00 00       	mov    eax,0xb
c001a620:	56                   	push   esi
c001a621:	53                   	push   ebx
c001a622:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a626:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a62a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a631:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a635:	83 f9 19             	cmp    ecx,0x19
c001a638:	77 37                	ja     c001a671 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a63a:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a641:	85 c9                	test   ecx,ecx
c001a643:	74 2c                	je     c001a671 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a645:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a64b:	85 c9                	test   ecx,ecx
c001a64d:	74 22                	je     c001a671 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a64f:	b8 06 00 00 00       	mov    eax,0x6
c001a654:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a658:	75 17                	jne    c001a671 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001a65a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a65c:	89 f0                	mov    eax,esi
c001a65e:	83 c2 0d             	add    edx,0xd
c001a661:	0f b6 f0             	movzx  esi,al
c001a664:	0f b6 db             	movzx  ebx,bl
c001a667:	56                   	push   esi
c001a668:	53                   	push   ebx
c001a669:	52                   	push   edx
c001a66a:	51                   	push   ecx
c001a66b:	ff 57 38             	call   DWORD PTR [edi+0x38]
c001a66e:	83 c4 10             	add    esp,0x10
c001a671:	5b                   	pop    ebx
c001a672:	5e                   	pop    esi
c001a673:	5f                   	pop    edi
c001a674:	c3                   	ret    
c001a675:	90                   	nop

c001a676 <File::exists()>:
c001a676:	83 ec 0c             	sub    esp,0xc
c001a679:	31 c0                	xor    eax,eax
c001a67b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a67f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a686:	83 f9 19             	cmp    ecx,0x19
c001a689:	77 24                	ja     c001a6af <File::exists()+0x39>
c001a68b:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a692:	85 c9                	test   ecx,ecx
c001a694:	74 19                	je     c001a6af <File::exists()+0x39>
c001a696:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a69c:	85 c9                	test   ecx,ecx
c001a69e:	74 0f                	je     c001a6af <File::exists()+0x39>
c001a6a0:	83 c2 0d             	add    edx,0xd
c001a6a3:	50                   	push   eax
c001a6a4:	50                   	push   eax
c001a6a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6a7:	52                   	push   edx
c001a6a8:	51                   	push   ecx
c001a6a9:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001a6ac:	83 c4 10             	add    esp,0x10
c001a6af:	83 c4 0c             	add    esp,0xc
c001a6b2:	c3                   	ret    
c001a6b3:	90                   	nop

c001a6b4 <File::stat(unsigned long long*, bool*)>:
c001a6b4:	56                   	push   esi
c001a6b5:	53                   	push   ebx
c001a6b6:	50                   	push   eax
c001a6b7:	b8 0b 00 00 00       	mov    eax,0xb
c001a6bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a6c0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a6c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a6cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a6cf:	83 f9 19             	cmp    ecx,0x19
c001a6d2:	77 3d                	ja     c001a711 <File::stat(unsigned long long*, bool*)+0x5d>
c001a6d4:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a6db:	85 c9                	test   ecx,ecx
c001a6dd:	74 32                	je     c001a711 <File::stat(unsigned long long*, bool*)+0x5d>
c001a6df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001a6e5:	85 c9                	test   ecx,ecx
c001a6e7:	74 28                	je     c001a711 <File::stat(unsigned long long*, bool*)+0x5d>
c001a6e9:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6eb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a6ef:	74 13                	je     c001a704 <File::stat(unsigned long long*, bool*)+0x50>
c001a6f1:	83 ec 04             	sub    esp,0x4
c001a6f4:	56                   	push   esi
c001a6f5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a6fb:	51                   	push   ecx
c001a6fc:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001a6ff:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001a702:	eb 0a                	jmp    c001a70e <File::stat(unsigned long long*, bool*)+0x5a>
c001a704:	53                   	push   ebx
c001a705:	83 c2 0d             	add    edx,0xd
c001a708:	56                   	push   esi
c001a709:	52                   	push   edx
c001a70a:	51                   	push   ecx
c001a70b:	ff 50 34             	call   DWORD PTR [eax+0x34]
c001a70e:	83 c4 10             	add    esp,0x10
c001a711:	5a                   	pop    edx
c001a712:	5b                   	pop    ebx
c001a713:	5e                   	pop    esi
c001a714:	c3                   	ret    

c001a715 <Fs::setcwd(Process*, char*)>:
c001a715:	55                   	push   ebp
c001a716:	57                   	push   edi
c001a717:	56                   	push   esi
c001a718:	53                   	push   ebx
c001a719:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a71f:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c001a726:	6a 00                	push   0x0
c001a728:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001a72e:	57                   	push   edi
c001a72f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a736:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001a73a:	56                   	push   esi
c001a73b:	e8 5c f9 ff ff       	call   c001a09c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a740:	89 34 24             	mov    DWORD PTR [esp],esi
c001a743:	e8 28 5e fe ff       	call   c0000570 <strlen>
c001a748:	83 c4 10             	add    esp,0x10
c001a74b:	83 f8 02             	cmp    eax,0x2
c001a74e:	77 15                	ja     c001a765 <Fs::setcwd(Process*, char*)+0x50>
c001a750:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c001a755:	83 eb 41             	sub    ebx,0x41
c001a758:	8b 04 9d 80 f3 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc0c80]
c001a75f:	85 c0                	test   eax,eax
c001a761:	75 1c                	jne    c001a77f <Fs::setcwd(Process*, char*)+0x6a>
c001a763:	eb 2f                	jmp    c001a794 <Fs::setcwd(Process*, char*)+0x7f>
c001a765:	83 ec 0c             	sub    esp,0xc
c001a768:	56                   	push   esi
c001a769:	e8 02 5e fe ff       	call   c0000570 <strlen>
c001a76e:	83 c4 10             	add    esp,0x10
c001a771:	83 f8 03             	cmp    eax,0x3
c001a774:	75 57                	jne    c001a7cd <Fs::setcwd(Process*, char*)+0xb8>
c001a776:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001a77b:	75 50                	jne    c001a7cd <Fs::setcwd(Process*, char*)+0xb8>
c001a77d:	eb d1                	jmp    c001a750 <Fs::setcwd(Process*, char*)+0x3b>
c001a77f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c001a786:	75 0c                	jne    c001a794 <Fs::setcwd(Process*, char*)+0x7f>
c001a788:	83 ec 0c             	sub    esp,0xc
c001a78b:	50                   	push   eax
c001a78c:	e8 ad 1d 00 00       	call   c001c53e <LogicalDisk::mount()>
c001a791:	83 c4 10             	add    esp,0x10
c001a794:	b8 03 00 00 00       	mov    eax,0x3
c001a799:	83 fb 19             	cmp    ebx,0x19
c001a79c:	0f 87 c6 00 00 00    	ja     c001a868 <Fs::setcwd(Process*, char*)+0x153>
c001a7a2:	8b 14 9d 80 f3 03 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffc0c80]
c001a7a9:	b8 05 00 00 00       	mov    eax,0x5
c001a7ae:	85 d2                	test   edx,edx
c001a7b0:	0f 84 b2 00 00 00    	je     c001a868 <Fs::setcwd(Process*, char*)+0x153>
c001a7b6:	b8 06 00 00 00       	mov    eax,0x6
c001a7bb:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c001a7c2:	0f 85 92 00 00 00    	jne    c001a85a <Fs::setcwd(Process*, char*)+0x145>
c001a7c8:	e9 9b 00 00 00       	jmp    c001a868 <Fs::setcwd(Process*, char*)+0x153>
c001a7cd:	83 ec 0c             	sub    esp,0xc
c001a7d0:	68 14 01 00 00       	push   0x114
c001a7d5:	e8 24 bb ff ff       	call   c00162fe <malloc>
c001a7da:	83 c4 0c             	add    esp,0xc
c001a7dd:	89 c3                	mov    ebx,eax
c001a7df:	55                   	push   ebp
c001a7e0:	56                   	push   esi
c001a7e1:	50                   	push   eax
c001a7e2:	e8 ad fb ff ff       	call   c001a394 <File::File(char const*, Process*)>
c001a7e7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001a7ec:	83 c4 0c             	add    esp,0xc
c001a7ef:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a7f3:	50                   	push   eax
c001a7f4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a7f8:	50                   	push   eax
c001a7f9:	53                   	push   ebx
c001a7fa:	e8 b5 fe ff ff       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c001a7ff:	83 c4 10             	add    esp,0x10
c001a802:	83 f8 02             	cmp    eax,0x2
c001a805:	74 27                	je     c001a82e <Fs::setcwd(Process*, char*)+0x119>
c001a807:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001a80c:	75 1c                	jne    c001a82a <Fs::setcwd(Process*, char*)+0x115>
c001a80e:	b8 02 00 00 00       	mov    eax,0x2
c001a813:	85 db                	test   ebx,ebx
c001a815:	74 51                	je     c001a868 <Fs::setcwd(Process*, char*)+0x153>
c001a817:	83 ec 0c             	sub    esp,0xc
c001a81a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a81c:	53                   	push   ebx
c001a81d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a820:	83 c4 10             	add    esp,0x10
c001a823:	b8 02 00 00 00       	mov    eax,0x2
c001a828:	eb 3e                	jmp    c001a868 <Fs::setcwd(Process*, char*)+0x153>
c001a82a:	85 c0                	test   eax,eax
c001a82c:	74 1c                	je     c001a84a <Fs::setcwd(Process*, char*)+0x135>
c001a82e:	b8 01 00 00 00       	mov    eax,0x1
c001a833:	85 db                	test   ebx,ebx
c001a835:	74 31                	je     c001a868 <Fs::setcwd(Process*, char*)+0x153>
c001a837:	83 ec 0c             	sub    esp,0xc
c001a83a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a83c:	53                   	push   ebx
c001a83d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a840:	83 c4 10             	add    esp,0x10
c001a843:	b8 01 00 00 00       	mov    eax,0x1
c001a848:	eb 1e                	jmp    c001a868 <Fs::setcwd(Process*, char*)+0x153>
c001a84a:	85 db                	test   ebx,ebx
c001a84c:	74 0c                	je     c001a85a <Fs::setcwd(Process*, char*)+0x145>
c001a84e:	83 ec 0c             	sub    esp,0xc
c001a851:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a853:	53                   	push   ebx
c001a854:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a857:	83 c4 10             	add    esp,0x10
c001a85a:	50                   	push   eax
c001a85b:	50                   	push   eax
c001a85c:	56                   	push   esi
c001a85d:	57                   	push   edi
c001a85e:	e8 dd 5d fe ff       	call   c0000640 <strcpy>
c001a863:	83 c4 10             	add    esp,0x10
c001a866:	31 c0                	xor    eax,eax
c001a868:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a86e:	5b                   	pop    ebx
c001a86f:	5e                   	pop    esi
c001a870:	5f                   	pop    edi
c001a871:	5d                   	pop    ebp
c001a872:	c3                   	ret    
c001a873:	90                   	nop

c001a874 <Directory::Directory(char const*, Process*)>:
c001a874:	83 ec 0c             	sub    esp,0xc
c001a877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a87b:	83 ec 08             	sub    esp,0x8
c001a87e:	6a 00                	push   0x0
c001a880:	50                   	push   eax
c001a881:	e8 80 d1 ff ff       	call   c0017a06 <UnixFile::UnixFile(int)>
c001a886:	83 c4 10             	add    esp,0x10
c001a889:	ba ac 1c 03 c0       	mov    edx,0xc0031cac
c001a88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a892:	89 10                	mov    DWORD PTR [eax],edx
c001a894:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001a899:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a89d:	0f 95 c0             	setne  al
c001a8a0:	0f b6 c0             	movzx  eax,al
c001a8a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a8a7:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c001a8ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a8b1:	83 c2 0d             	add    edx,0xd
c001a8b4:	50                   	push   eax
c001a8b5:	51                   	push   ecx
c001a8b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8ba:	52                   	push   edx
c001a8bb:	e8 dc f7 ff ff       	call   c001a09c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001a8c0:	83 c4 10             	add    esp,0x10
c001a8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c7:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001a8ca:	83 e8 41             	sub    eax,0x41
c001a8cd:	88 c2                	mov    dl,al
c001a8cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8d3:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001a8d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8dd:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001a8e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8e5:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a8eb:	0f b6 c0             	movzx  eax,al
c001a8ee:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a8f5:	85 c0                	test   eax,eax
c001a8f7:	74 3e                	je     c001a937 <Directory::Directory(char const*, Process*)+0xc3>
c001a8f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8fd:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a903:	0f b6 c0             	movzx  eax,al
c001a906:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a90d:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a913:	85 c0                	test   eax,eax
c001a915:	75 20                	jne    c001a937 <Directory::Directory(char const*, Process*)+0xc3>
c001a917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a91b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c001a921:	0f b6 c0             	movzx  eax,al
c001a924:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c001a92b:	83 ec 0c             	sub    esp,0xc
c001a92e:	50                   	push   eax
c001a92f:	e8 0a 1c 00 00       	call   c001c53e <LogicalDisk::mount()>
c001a934:	83 c4 10             	add    esp,0x10
c001a937:	90                   	nop
c001a938:	83 c4 0c             	add    esp,0xc
c001a93b:	c3                   	ret    

c001a93c <Directory::open()>:
c001a93c:	53                   	push   ebx
c001a93d:	b8 0b 00 00 00       	mov    eax,0xb
c001a942:	83 ec 08             	sub    esp,0x8
c001a945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a949:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001a950:	83 fa 19             	cmp    edx,0x19
c001a953:	77 3d                	ja     c001a992 <Directory::open()+0x56>
c001a955:	8b 14 95 80 f3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc0c80]
c001a95c:	85 d2                	test   edx,edx
c001a95e:	74 32                	je     c001a992 <Directory::open()+0x56>
c001a960:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c001a966:	85 d2                	test   edx,edx
c001a968:	74 28                	je     c001a992 <Directory::open()+0x56>
c001a96a:	b8 06 00 00 00       	mov    eax,0x6
c001a96f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001a973:	75 1d                	jne    c001a992 <Directory::open()+0x56>
c001a975:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001a97b:	50                   	push   eax
c001a97c:	8b 02                	mov    eax,DWORD PTR [edx]
c001a97e:	51                   	push   ecx
c001a97f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001a982:	51                   	push   ecx
c001a983:	52                   	push   edx
c001a984:	ff 50 50             	call   DWORD PTR [eax+0x50]
c001a987:	83 c4 10             	add    esp,0x10
c001a98a:	85 c0                	test   eax,eax
c001a98c:	75 04                	jne    c001a992 <Directory::open()+0x56>
c001a98e:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001a992:	83 c4 08             	add    esp,0x8
c001a995:	5b                   	pop    ebx
c001a996:	c3                   	ret    
c001a997:	90                   	nop

c001a998 <Directory::close()>:
c001a998:	53                   	push   ebx
c001a999:	b8 0b 00 00 00       	mov    eax,0xb
c001a99e:	83 ec 08             	sub    esp,0x8
c001a9a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a9a5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001a9ac:	83 f9 19             	cmp    ecx,0x19
c001a9af:	77 41                	ja     c001a9f2 <Directory::close()+0x5a>
c001a9b1:	8b 1c 8d 80 f3 03 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffc0c80]
c001a9b8:	85 db                	test   ebx,ebx
c001a9ba:	74 36                	je     c001a9f2 <Directory::close()+0x5a>
c001a9bc:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c001a9c3:	74 2d                	je     c001a9f2 <Directory::close()+0x5a>
c001a9c5:	b8 05 00 00 00       	mov    eax,0x5
c001a9ca:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001a9ce:	74 22                	je     c001a9f2 <Directory::close()+0x5a>
c001a9d0:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c001a9d4:	8b 04 8d 80 f3 03 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffc0c80]
c001a9db:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001a9e1:	53                   	push   ebx
c001a9e2:	53                   	push   ebx
c001a9e3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a9e5:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001a9eb:	50                   	push   eax
c001a9ec:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c001a9ef:	83 c4 10             	add    esp,0x10
c001a9f2:	83 c4 08             	add    esp,0x8
c001a9f5:	5b                   	pop    ebx
c001a9f6:	c3                   	ret    
c001a9f7:	90                   	nop

c001a9f8 <Directory::unlink()>:
c001a9f8:	83 ec 0c             	sub    esp,0xc
c001a9fb:	b8 0b 00 00 00       	mov    eax,0xb
c001aa00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa0b:	83 f9 19             	cmp    ecx,0x19
c001aa0e:	77 2f                	ja     c001aa3f <Directory::unlink()+0x47>
c001aa10:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa17:	85 c9                	test   ecx,ecx
c001aa19:	74 24                	je     c001aa3f <Directory::unlink()+0x47>
c001aa1b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa21:	85 c9                	test   ecx,ecx
c001aa23:	74 1a                	je     c001aa3f <Directory::unlink()+0x47>
c001aa25:	b8 06 00 00 00       	mov    eax,0x6
c001aa2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa2e:	75 0f                	jne    c001aa3f <Directory::unlink()+0x47>
c001aa30:	83 c2 0d             	add    edx,0xd
c001aa33:	50                   	push   eax
c001aa34:	50                   	push   eax
c001aa35:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa37:	52                   	push   edx
c001aa38:	51                   	push   ecx
c001aa39:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001aa3c:	83 c4 10             	add    esp,0x10
c001aa3f:	83 c4 0c             	add    esp,0xc
c001aa42:	c3                   	ret    
c001aa43:	90                   	nop

c001aa44 <Directory::rename(char const*)>:
c001aa44:	83 ec 0c             	sub    esp,0xc
c001aa47:	b8 0b 00 00 00       	mov    eax,0xb
c001aa4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aa57:	83 f9 19             	cmp    ecx,0x19
c001aa5a:	77 32                	ja     c001aa8e <Directory::rename(char const*)+0x4a>
c001aa5c:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aa63:	85 c9                	test   ecx,ecx
c001aa65:	74 27                	je     c001aa8e <Directory::rename(char const*)+0x4a>
c001aa67:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aa6d:	85 c9                	test   ecx,ecx
c001aa6f:	74 1d                	je     c001aa8e <Directory::rename(char const*)+0x4a>
c001aa71:	b8 06 00 00 00       	mov    eax,0x6
c001aa76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001aa7a:	75 12                	jne    c001aa8e <Directory::rename(char const*)+0x4a>
c001aa7c:	83 c2 0d             	add    edx,0xd
c001aa7f:	50                   	push   eax
c001aa80:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aa82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001aa86:	52                   	push   edx
c001aa87:	51                   	push   ecx
c001aa88:	ff 50 44             	call   DWORD PTR [eax+0x44]
c001aa8b:	83 c4 10             	add    esp,0x10
c001aa8e:	83 c4 0c             	add    esp,0xc
c001aa91:	c3                   	ret    

c001aa92 <Directory::exists()>:
c001aa92:	83 ec 0c             	sub    esp,0xc
c001aa95:	31 c0                	xor    eax,eax
c001aa97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aa9b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aaa2:	83 f9 19             	cmp    ecx,0x19
c001aaa5:	77 24                	ja     c001aacb <Directory::exists()+0x39>
c001aaa7:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaae:	85 c9                	test   ecx,ecx
c001aab0:	74 19                	je     c001aacb <Directory::exists()+0x39>
c001aab2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001aab8:	85 c9                	test   ecx,ecx
c001aaba:	74 0f                	je     c001aacb <Directory::exists()+0x39>
c001aabc:	83 c2 0d             	add    edx,0xd
c001aabf:	50                   	push   eax
c001aac0:	50                   	push   eax
c001aac1:	8b 01                	mov    eax,DWORD PTR [ecx]
c001aac3:	52                   	push   edx
c001aac4:	51                   	push   ecx
c001aac5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c001aac8:	83 c4 10             	add    esp,0x10
c001aacb:	83 c4 0c             	add    esp,0xc
c001aace:	c3                   	ret    
c001aacf:	90                   	nop

c001aad0 <Directory::read(dirent*)>:
c001aad0:	83 ec 1c             	sub    esp,0x1c
c001aad3:	b8 0b 00 00 00       	mov    eax,0xb
c001aad8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001aadc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001aae3:	83 f9 19             	cmp    ecx,0x19
c001aae6:	77 30                	ja     c001ab18 <Directory::read(dirent*)+0x48>
c001aae8:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001aaef:	85 c9                	test   ecx,ecx
c001aaf1:	74 25                	je     c001ab18 <Directory::read(dirent*)+0x48>
c001aaf3:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c001aafa:	74 1c                	je     c001ab18 <Directory::read(dirent*)+0x48>
c001aafc:	83 ec 0c             	sub    esp,0xc
c001aaff:	8b 02                	mov    eax,DWORD PTR [edx]
c001ab01:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001ab05:	51                   	push   ecx
c001ab06:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ab0a:	6a 00                	push   0x0
c001ab0c:	68 10 01 00 00       	push   0x110
c001ab11:	52                   	push   edx
c001ab12:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab15:	83 c4 20             	add    esp,0x20
c001ab18:	83 c4 1c             	add    esp,0x1c
c001ab1b:	c3                   	ret    

c001ab1c <Directory::create()>:
c001ab1c:	83 ec 0c             	sub    esp,0xc
c001ab1f:	b8 0b 00 00 00       	mov    eax,0xb
c001ab24:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ab28:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001ab2f:	83 f9 19             	cmp    ecx,0x19
c001ab32:	77 2f                	ja     c001ab63 <Directory::create()+0x47>
c001ab34:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c001ab3b:	85 c9                	test   ecx,ecx
c001ab3d:	74 24                	je     c001ab63 <Directory::create()+0x47>
c001ab3f:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c001ab45:	85 c9                	test   ecx,ecx
c001ab47:	74 1a                	je     c001ab63 <Directory::create()+0x47>
c001ab49:	b8 06 00 00 00       	mov    eax,0x6
c001ab4e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001ab52:	75 0f                	jne    c001ab63 <Directory::create()+0x47>
c001ab54:	83 c2 0d             	add    edx,0xd
c001ab57:	50                   	push   eax
c001ab58:	50                   	push   eax
c001ab59:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ab5b:	52                   	push   edx
c001ab5c:	51                   	push   ecx
c001ab5d:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001ab60:	83 c4 10             	add    esp,0x10
c001ab63:	83 c4 0c             	add    esp,0xc
c001ab66:	c3                   	ret    
c001ab67:	90                   	nop

c001ab68 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001ab68:	b8 0a 00 00 00       	mov    eax,0xa
c001ab6d:	c3                   	ret    
c001ab6e:	66 90                	xchg   ax,ax

c001ab70 <Bus::Bus(char const*)>:
c001ab70:	83 ec 0c             	sub    esp,0xc
c001ab73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab77:	83 ec 08             	sub    esp,0x8
c001ab7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab7e:	50                   	push   eax
c001ab7f:	e8 ec 07 00 00       	call   c001b370 <Device::Device(char const*)>
c001ab84:	83 c4 10             	add    esp,0x10
c001ab87:	ba c8 1c 03 c0       	mov    edx,0xc0031cc8
c001ab8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab90:	89 10                	mov    DWORD PTR [eax],edx
c001ab92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab96:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001aba0:	90                   	nop
c001aba1:	83 c4 0c             	add    esp,0xc
c001aba4:	c3                   	ret    
c001aba5:	90                   	nop
c001aba6:	66 90                	xchg   ax,ax

c001aba8 <Bus::~Bus()>:
c001aba8:	83 ec 0c             	sub    esp,0xc
c001abab:	ba c8 1c 03 c0       	mov    edx,0xc0031cc8
c001abb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb4:	89 10                	mov    DWORD PTR [eax],edx
c001abb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abba:	83 ec 0c             	sub    esp,0xc
c001abbd:	50                   	push   eax
c001abbe:	e8 4d 05 00 00       	call   c001b110 <Device::~Device()>
c001abc3:	83 c4 10             	add    esp,0x10
c001abc6:	90                   	nop
c001abc7:	83 c4 0c             	add    esp,0xc
c001abca:	c3                   	ret    
c001abcb:	90                   	nop

c001abcc <Bus::~Bus()>:
c001abcc:	83 ec 0c             	sub    esp,0xc
c001abcf:	83 ec 0c             	sub    esp,0xc
c001abd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abd6:	e8 cd ff ff ff       	call   c001aba8 <Bus::~Bus()>
c001abdb:	83 c4 10             	add    esp,0x10
c001abde:	83 ec 08             	sub    esp,0x8
c001abe1:	68 58 01 00 00       	push   0x158
c001abe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abea:	e8 71 e4 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001abef:	83 c4 10             	add    esp,0x10
c001abf2:	83 c4 0c             	add    esp,0xc
c001abf5:	c3                   	ret    

c001abf6 <beepThread(void*)>:
c001abf6:	83 ec 0c             	sub    esp,0xc
c001abf9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001abfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac02:	48                   	dec    eax
c001ac03:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ac08:	75 01                	jne    c001ac0b <beepThread(void*)+0x15>
c001ac0a:	fb                   	sti    
c001ac0b:	83 ec 0c             	sub    esp,0xc
c001ac0e:	6b c2 0a             	imul   eax,edx,0xa
c001ac11:	50                   	push   eax
c001ac12:	e8 45 a7 00 00       	call   c002535c <milliTenthSleep(unsigned int)>
c001ac17:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ac1e:	e8 40 c5 00 00       	call   c0027163 <HalMakeBeep(int)>
c001ac23:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001ac2b:	83 c4 1c             	add    esp,0x1c
c001ac2e:	e9 0d a6 00 00       	jmp    c0025240 <blockTask(TaskState)>

c001ac33 <Krnl::beep(int, int, bool)>:
c001ac33:	56                   	push   esi
c001ac34:	53                   	push   ebx
c001ac35:	83 ec 10             	sub    esp,0x10
c001ac38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ac3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ac40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac44:	e8 1a c5 00 00       	call   c0027163 <HalMakeBeep(int)>
c001ac49:	83 c4 10             	add    esp,0x10
c001ac4c:	89 f0                	mov    eax,esi
c001ac4e:	84 c0                	test   al,al
c001ac50:	74 1e                	je     c001ac70 <Krnl::beep(int, int, bool)+0x3d>
c001ac52:	83 ec 0c             	sub    esp,0xc
c001ac55:	6b db 0a             	imul   ebx,ebx,0xa
c001ac58:	53                   	push   ebx
c001ac59:	e8 fe a6 00 00       	call   c002535c <milliTenthSleep(unsigned int)>
c001ac5e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ac66:	83 c4 14             	add    esp,0x14
c001ac69:	5b                   	pop    ebx
c001ac6a:	5e                   	pop    esi
c001ac6b:	e9 f3 c4 00 00       	jmp    c0027163 <HalMakeBeep(int)>
c001ac70:	68 e6 00 00 00       	push   0xe6
c001ac75:	53                   	push   ebx
c001ac76:	68 f6 ab 01 c0       	push   0xc001abf6
c001ac7b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001ac81:	e8 ae a2 00 00       	call   c0024f34 <Process::createThread(void (*)(void*), void*, int)>
c001ac86:	83 c4 14             	add    esp,0x14
c001ac89:	5b                   	pop    ebx
c001ac8a:	5e                   	pop    esi
c001ac8b:	c3                   	ret    

c001ac8c <User::loadClockSettings(int)>:
c001ac8c:	53                   	push   ebx
c001ac8d:	83 ec 14             	sub    esp,0x14
c001ac90:	68 14 01 00 00       	push   0x114
c001ac95:	e8 64 b6 ff ff       	call   c00162fe <malloc>
c001ac9a:	83 c4 0c             	add    esp,0xc
c001ac9d:	89 c3                	mov    ebx,eax
c001ac9f:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c001aca5:	68 ec 1c 03 c0       	push   0xc0031cec
c001acaa:	50                   	push   eax
c001acab:	e8 e4 f6 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c001acb0:	58                   	pop    eax
c001acb1:	5a                   	pop    edx
c001acb2:	6a 01                	push   0x1
c001acb4:	53                   	push   ebx
c001acb5:	e8 f8 f6 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c001acba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001acbd:	e8 4e f7 ff ff       	call   c001a410 <File::close()>
c001acc2:	83 c4 10             	add    esp,0x10
c001acc5:	85 db                	test   ebx,ebx
c001acc7:	74 0f                	je     c001acd8 <User::loadClockSettings(int)+0x4c>
c001acc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001accb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001accf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001acd2:	83 c4 08             	add    esp,0x8
c001acd5:	5b                   	pop    ebx
c001acd6:	ff e0                	jmp    eax
c001acd8:	83 c4 08             	add    esp,0x8
c001acdb:	5b                   	pop    ebx
c001acdc:	c3                   	ret    
c001acdd:	90                   	nop

c001acde <Clock::Clock(char const*)>:
c001acde:	83 ec 0c             	sub    esp,0xc
c001ace1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ace5:	83 ec 08             	sub    esp,0x8
c001ace8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acec:	50                   	push   eax
c001aced:	e8 7e 06 00 00       	call   c001b370 <Device::Device(char const*)>
c001acf2:	83 c4 10             	add    esp,0x10
c001acf5:	ba 14 1d 03 c0       	mov    edx,0xc0031d14
c001acfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acfe:	89 10                	mov    DWORD PTR [eax],edx
c001ad00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad04:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c001ad0e:	90                   	nop
c001ad0f:	83 c4 0c             	add    esp,0xc
c001ad12:	c3                   	ret    
c001ad13:	90                   	nop

c001ad14 <Clock::~Clock()>:
c001ad14:	83 ec 0c             	sub    esp,0xc
c001ad17:	ba 14 1d 03 c0       	mov    edx,0xc0031d14
c001ad1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad20:	89 10                	mov    DWORD PTR [eax],edx
c001ad22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad26:	83 ec 0c             	sub    esp,0xc
c001ad29:	50                   	push   eax
c001ad2a:	e8 e1 03 00 00       	call   c001b110 <Device::~Device()>
c001ad2f:	83 c4 10             	add    esp,0x10
c001ad32:	90                   	nop
c001ad33:	83 c4 0c             	add    esp,0xc
c001ad36:	c3                   	ret    
c001ad37:	90                   	nop

c001ad38 <Clock::~Clock()>:
c001ad38:	83 ec 0c             	sub    esp,0xc
c001ad3b:	83 ec 0c             	sub    esp,0xc
c001ad3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad42:	e8 cd ff ff ff       	call   c001ad14 <Clock::~Clock()>
c001ad47:	83 c4 10             	add    esp,0x10
c001ad4a:	83 ec 08             	sub    esp,0x8
c001ad4d:	68 58 01 00 00       	push   0x158
c001ad52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad56:	e8 05 e3 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001ad5b:	83 c4 10             	add    esp,0x10
c001ad5e:	83 c4 0c             	add    esp,0xc
c001ad61:	c3                   	ret    

c001ad62 <Clock::timeInSecondsLocal()>:
c001ad62:	53                   	push   ebx
c001ad63:	83 ec 14             	sub    esp,0x14
c001ad66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad6a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ad6c:	50                   	push   eax
c001ad6d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001ad70:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001ad77:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001ad7d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001ad83:	89 cb                	mov    ebx,ecx
c001ad85:	c1 fb 1f             	sar    ebx,0x1f
c001ad88:	01 c8                	add    eax,ecx
c001ad8a:	11 da                	adc    edx,ebx
c001ad8c:	83 c4 10             	add    esp,0x10
c001ad8f:	31 c9                	xor    ecx,ecx
c001ad91:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ad98:	74 05                	je     c001ad9f <Clock::timeInSecondsLocal()+0x3d>
c001ad9a:	b9 08 07 00 00       	mov    ecx,0x708
c001ad9f:	31 db                	xor    ebx,ebx
c001ada1:	01 c8                	add    eax,ecx
c001ada3:	11 da                	adc    edx,ebx
c001ada5:	83 c4 08             	add    esp,0x8
c001ada8:	5b                   	pop    ebx
c001ada9:	c3                   	ret    

c001adaa <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001adaa:	57                   	push   edi
c001adab:	56                   	push   esi
c001adac:	53                   	push   ebx
c001adad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adb1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001adb5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001adb7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001adbb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001adbe:	0f b6 05 08 cf 03 c0 	movzx  eax,BYTE PTR ds:0xc003cf08
c001adc5:	03 05 0c cf 03 c0    	add    eax,DWORD PTR ds:0xc003cf0c
c001adcb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001add1:	99                   	cdq    
c001add2:	29 c6                	sub    esi,eax
c001add4:	19 d7                	sbb    edi,edx
c001add6:	89 f0                	mov    eax,esi
c001add8:	89 fa                	mov    edx,edi
c001adda:	31 f6                	xor    esi,esi
c001addc:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001ade3:	74 05                	je     c001adea <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001ade5:	be 08 07 00 00       	mov    esi,0x708
c001adea:	31 ff                	xor    edi,edi
c001adec:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001adf0:	29 f0                	sub    eax,esi
c001adf2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001adf6:	19 fa                	sbb    edx,edi
c001adf8:	89 d8                	mov    eax,ebx
c001adfa:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001adfe:	5b                   	pop    ebx
c001adff:	5e                   	pop    esi
c001ae00:	5f                   	pop    edi
c001ae01:	ff e0                	jmp    eax

c001ae03 <datetimeToSeconds(datetime_t)>:
c001ae03:	55                   	push   ebp
c001ae04:	57                   	push   edi
c001ae05:	56                   	push   esi
c001ae06:	53                   	push   ebx
c001ae07:	83 ec 0c             	sub    esp,0xc
c001ae0a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae0e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ae12:	89 d6                	mov    esi,edx
c001ae14:	0f b6 c7             	movzx  eax,bh
c001ae17:	c1 ee 10             	shr    esi,0x10
c001ae1a:	6b e8 3c             	imul   ebp,eax,0x3c
c001ae1d:	81 ee 6c 07 00 00    	sub    esi,0x76c
c001ae23:	0f b6 ce             	movzx  ecx,dh
c001ae26:	89 df                	mov    edi,ebx
c001ae28:	49                   	dec    ecx
c001ae29:	c1 ef 10             	shr    edi,0x10
c001ae2c:	0f b6 db             	movzx  ebx,bl
c001ae2f:	89 f8                	mov    eax,edi
c001ae31:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c001ae37:	0f b6 f8             	movzx  edi,al
c001ae3a:	0f b6 d2             	movzx  edx,dl
c001ae3d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c001ae41:	01 d8                	add    eax,ebx
c001ae43:	0f b7 de             	movzx  ebx,si
c001ae46:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae49:	c1 f8 1f             	sar    eax,0x1f
c001ae4c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ae50:	0f b6 c1             	movzx  eax,cl
c001ae53:	8b 0c 85 60 1d 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffce2a0]
c001ae5a:	83 f8 01             	cmp    eax,0x1
c001ae5d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c001ae61:	76 27                	jbe    c001ae8a <datetimeToSeconds(datetime_t)+0x87>
c001ae63:	83 e6 03             	and    esi,0x3
c001ae66:	75 22                	jne    c001ae8a <datetimeToSeconds(datetime_t)+0x87>
c001ae68:	31 d2                	xor    edx,edx
c001ae6a:	be 64 00 00 00       	mov    esi,0x64
c001ae6f:	89 d8                	mov    eax,ebx
c001ae71:	f7 f6                	div    esi
c001ae73:	85 d2                	test   edx,edx
c001ae75:	75 12                	jne    c001ae89 <datetimeToSeconds(datetime_t)+0x86>
c001ae77:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001ae7d:	be 90 01 00 00       	mov    esi,0x190
c001ae82:	99                   	cdq    
c001ae83:	f7 fe                	idiv   esi
c001ae85:	85 d2                	test   edx,edx
c001ae87:	75 01                	jne    c001ae8a <datetimeToSeconds(datetime_t)+0x87>
c001ae89:	41                   	inc    ecx
c001ae8a:	83 fb 46             	cmp    ebx,0x46
c001ae8d:	76 48                	jbe    c001aed7 <datetimeToSeconds(datetime_t)+0xd4>
c001ae8f:	be 46 00 00 00       	mov    esi,0x46
c001ae94:	bf 64 00 00 00       	mov    edi,0x64
c001ae99:	bd 90 01 00 00       	mov    ebp,0x190
c001ae9e:	b8 6d 01 00 00       	mov    eax,0x16d
c001aea3:	f7 c6 03 00 00 00    	test   esi,0x3
c001aea9:	75 23                	jne    c001aece <datetimeToSeconds(datetime_t)+0xcb>
c001aeab:	89 f0                	mov    eax,esi
c001aead:	99                   	cdq    
c001aeae:	f7 ff                	idiv   edi
c001aeb0:	b8 6e 01 00 00       	mov    eax,0x16e
c001aeb5:	85 d2                	test   edx,edx
c001aeb7:	75 15                	jne    c001aece <datetimeToSeconds(datetime_t)+0xcb>
c001aeb9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001aebf:	99                   	cdq    
c001aec0:	f7 fd                	idiv   ebp
c001aec2:	83 fa 01             	cmp    edx,0x1
c001aec5:	19 c0                	sbb    eax,eax
c001aec7:	f7 d0                	not    eax
c001aec9:	05 6e 01 00 00       	add    eax,0x16e
c001aece:	01 c1                	add    ecx,eax
c001aed0:	46                   	inc    esi
c001aed1:	39 de                	cmp    esi,ebx
c001aed3:	7c c9                	jl     c001ae9e <datetimeToSeconds(datetime_t)+0x9b>
c001aed5:	eb 34                	jmp    c001af0b <datetimeToSeconds(datetime_t)+0x108>
c001aed7:	74 32                	je     c001af0b <datetimeToSeconds(datetime_t)+0x108>
c001aed9:	b8 45 00 00 00       	mov    eax,0x45
c001aede:	89 c2                	mov    edx,eax
c001aee0:	83 e2 03             	and    edx,0x3
c001aee3:	39 d8                	cmp    eax,ebx
c001aee5:	7e 0f                	jle    c001aef6 <datetimeToSeconds(datetime_t)+0xf3>
c001aee7:	83 fa 01             	cmp    edx,0x1
c001aeea:	19 d2                	sbb    edx,edx
c001aeec:	48                   	dec    eax
c001aeed:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001aef4:	eb e8                	jmp    c001aede <datetimeToSeconds(datetime_t)+0xdb>
c001aef6:	b8 6d 01 00 00       	mov    eax,0x16d
c001aefb:	85 d2                	test   edx,edx
c001aefd:	75 0a                	jne    c001af09 <datetimeToSeconds(datetime_t)+0x106>
c001aeff:	83 fb 01             	cmp    ebx,0x1
c001af02:	19 c0                	sbb    eax,eax
c001af04:	05 6e 01 00 00       	add    eax,0x16e
c001af09:	29 c1                	sub    ecx,eax
c001af0b:	b8 80 51 01 00       	mov    eax,0x15180
c001af10:	f7 e9                	imul   ecx
c001af12:	03 04 24             	add    eax,DWORD PTR [esp]
c001af15:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c001af19:	83 c4 0c             	add    esp,0xc
c001af1c:	5b                   	pop    ebx
c001af1d:	5e                   	pop    esi
c001af1e:	5f                   	pop    edi
c001af1f:	5d                   	pop    ebp
c001af20:	c3                   	ret    
c001af21:	90                   	nop

c001af22 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c001af22:	57                   	push   edi
c001af23:	56                   	push   esi
c001af24:	53                   	push   ebx
c001af25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af29:	8b 06                	mov    eax,DWORD PTR [esi]
c001af2b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001af2e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af32:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af36:	e8 c8 fe ff ff       	call   c001ae03 <datetimeToSeconds(datetime_t)>
c001af3b:	59                   	pop    ecx
c001af3c:	0f b6 0d 08 cf 03 c0 	movzx  ecx,BYTE PTR ds:0xc003cf08
c001af43:	5b                   	pop    ebx
c001af44:	03 0d 0c cf 03 c0    	add    ecx,DWORD PTR ds:0xc003cf0c
c001af4a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001af50:	89 cb                	mov    ebx,ecx
c001af52:	c1 fb 1f             	sar    ebx,0x1f
c001af55:	29 c8                	sub    eax,ecx
c001af57:	19 da                	sbb    edx,ebx
c001af59:	31 c9                	xor    ecx,ecx
c001af5b:	80 3d 09 cf 03 c0 00 	cmp    BYTE PTR ds:0xc003cf09,0x0
c001af62:	74 05                	je     c001af69 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001af64:	b9 08 07 00 00       	mov    ecx,0x708
c001af69:	31 db                	xor    ebx,ebx
c001af6b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001af6f:	29 c8                	sub    eax,ecx
c001af71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af75:	19 da                	sbb    edx,ebx
c001af77:	89 f8                	mov    eax,edi
c001af79:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001af7d:	5b                   	pop    ebx
c001af7e:	5e                   	pop    esi
c001af7f:	5f                   	pop    edi
c001af80:	ff e0                	jmp    eax

c001af82 <secondsToDatetime(unsigned long long)>:
c001af82:	55                   	push   ebp
c001af83:	57                   	push   edi
c001af84:	56                   	push   esi
c001af85:	53                   	push   ebx
c001af86:	83 ec 1c             	sub    esp,0x1c
c001af89:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001af8d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001af91:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001af95:	6a 00                	push   0x0
c001af97:	68 80 51 01 00       	push   0x15180
c001af9c:	55                   	push   ebp
c001af9d:	57                   	push   edi
c001af9e:	e8 dd 35 01 00       	call   c002e580 <__udivdi3>
c001afa3:	83 c4 10             	add    esp,0x10
c001afa6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001afac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afb0:	6a 00                	push   0x0
c001afb2:	68 80 51 01 00       	push   0x15180
c001afb7:	55                   	push   ebp
c001afb8:	57                   	push   edi
c001afb9:	bf 10 0e 00 00       	mov    edi,0xe10
c001afbe:	e8 bd 36 01 00       	call   c002e680 <__umoddi3>
c001afc3:	83 c4 10             	add    esp,0x10
c001afc6:	99                   	cdq    
c001afc7:	f7 ff                	idiv   edi
c001afc9:	bf 3c 00 00 00       	mov    edi,0x3c
c001afce:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001afd1:	89 d0                	mov    eax,edx
c001afd3:	99                   	cdq    
c001afd4:	f7 ff                	idiv   edi
c001afd6:	85 db                	test   ebx,ebx
c001afd8:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001afdb:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001afde:	79 11                	jns    c001aff1 <secondsToDatetime(unsigned long long)+0x6f>
c001afe0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001afe4:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001afea:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001afef:	eb 07                	jmp    c001aff8 <secondsToDatetime(unsigned long long)+0x76>
c001aff1:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001aff6:	89 d8                	mov    eax,ebx
c001aff8:	bf b4 05 00 00       	mov    edi,0x5b4
c001affd:	99                   	cdq    
c001affe:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c001b003:	f7 f9                	idiv   ecx
c001b005:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001b00a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b00e:	31 d2                	xor    edx,edx
c001b010:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001b018:	01 c3                	add    ebx,eax
c001b01a:	89 d8                	mov    eax,ebx
c001b01c:	f7 f1                	div    ecx
c001b01e:	31 d2                	xor    edx,edx
c001b020:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c001b023:	89 d8                	mov    eax,ebx
c001b025:	f7 f7                	div    edi
c001b027:	31 d2                	xor    edx,edx
c001b029:	29 c1                	sub    ecx,eax
c001b02b:	89 d8                	mov    eax,ebx
c001b02d:	f7 f5                	div    ebp
c001b02f:	bd 6d 01 00 00       	mov    ebp,0x16d
c001b034:	29 c1                	sub    ecx,eax
c001b036:	31 d2                	xor    edx,edx
c001b038:	89 c8                	mov    eax,ecx
c001b03a:	f7 f5                	div    ebp
c001b03c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001b041:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b045:	31 d2                	xor    edx,edx
c001b047:	89 c8                	mov    eax,ecx
c001b049:	f7 f5                	div    ebp
c001b04b:	31 d2                	xor    edx,edx
c001b04d:	01 c3                	add    ebx,eax
c001b04f:	89 c8                	mov    eax,ecx
c001b051:	f7 f7                	div    edi
c001b053:	bf 99 00 00 00       	mov    edi,0x99
c001b058:	29 c3                	sub    ebx,eax
c001b05a:	31 d2                	xor    edx,edx
c001b05c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001b064:	29 c3                	sub    ebx,eax
c001b066:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001b069:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001b06c:	bb 05 00 00 00       	mov    ebx,0x5
c001b071:	83 c1 02             	add    ecx,0x2
c001b074:	89 c8                	mov    eax,ecx
c001b076:	f7 f7                	div    edi
c001b078:	31 d2                	xor    edx,edx
c001b07a:	89 c7                	mov    edi,eax
c001b07c:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001b082:	83 c0 02             	add    eax,0x2
c001b085:	f7 f3                	div    ebx
c001b087:	89 eb                	mov    ebx,ebp
c001b089:	29 c3                	sub    ebx,eax
c001b08b:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001b091:	88 1e                	mov    BYTE PTR [esi],bl
c001b093:	19 c0                	sbb    eax,eax
c001b095:	31 d2                	xor    edx,edx
c001b097:	83 e0 0c             	and    eax,0xc
c001b09a:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001b09e:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001b0a6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001b0aa:	83 f9 01             	cmp    ecx,0x1
c001b0ad:	0f 96 c2             	setbe  dl
c001b0b0:	41                   	inc    ecx
c001b0b1:	01 d0                	add    eax,edx
c001b0b3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001b0b6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001b0ba:	83 c4 1c             	add    esp,0x1c
c001b0bd:	89 f0                	mov    eax,esi
c001b0bf:	5b                   	pop    ebx
c001b0c0:	5e                   	pop    esi
c001b0c1:	5f                   	pop    edi
c001b0c2:	5d                   	pop    ebp
c001b0c3:	c2 04 00             	ret    0x4

c001b0c6 <Clock::timeInDatetimeLocal()>:
c001b0c6:	53                   	push   ebx
c001b0c7:	83 ec 14             	sub    esp,0x14
c001b0ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b0ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b0d2:	e8 8b fc ff ff       	call   c001ad62 <Clock::timeInSecondsLocal()>
c001b0d7:	83 c4 0c             	add    esp,0xc
c001b0da:	52                   	push   edx
c001b0db:	50                   	push   eax
c001b0dc:	53                   	push   ebx
c001b0dd:	e8 a0 fe ff ff       	call   c001af82 <secondsToDatetime(unsigned long long)>
c001b0e2:	89 d8                	mov    eax,ebx
c001b0e4:	83 c4 14             	add    esp,0x14
c001b0e7:	5b                   	pop    ebx
c001b0e8:	c2 04 00             	ret    0x4
c001b0eb:	90                   	nop

c001b0ec <Device::hibernate()>:
c001b0ec:	c3                   	ret    
c001b0ed:	90                   	nop

c001b0ee <Device::wake()>:
c001b0ee:	c3                   	ret    
c001b0ef:	90                   	nop

c001b0f0 <Device::detect()>:
c001b0f0:	c3                   	ret    
c001b0f1:	90                   	nop

c001b0f2 <Device::disableLegacy()>:
c001b0f2:	c3                   	ret    
c001b0f3:	90                   	nop

c001b0f4 <Device::powerSaving(PowerSavingLevel)>:
c001b0f4:	c3                   	ret    
c001b0f5:	90                   	nop

c001b0f6 <DriverlessDevice::close(int, int, void*)>:
c001b0f6:	31 c0                	xor    eax,eax
c001b0f8:	c3                   	ret    
c001b0f9:	90                   	nop

c001b0fa <DriverlessDevice::detect()>:
c001b0fa:	c3                   	ret    
c001b0fb:	90                   	nop

c001b0fc <DriverlessDevice::open(int, int, void*)>:
c001b0fc:	83 ec 18             	sub    esp,0x18
c001b0ff:	68 90 1d 03 c0       	push   0xc0031d90
c001b104:	e8 9d 50 00 00       	call   c00201a6 <KePanic(char const*)>
c001b109:	83 c8 ff             	or     eax,0xffffffff
c001b10c:	83 c4 1c             	add    esp,0x1c
c001b10f:	c3                   	ret    

c001b110 <Device::~Device()>:
c001b110:	ba fc 1d 03 c0       	mov    edx,0xc0031dfc
c001b115:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b119:	89 10                	mov    DWORD PTR [eax],edx
c001b11b:	90                   	nop
c001b11c:	c3                   	ret    
c001b11d:	90                   	nop

c001b11e <Device::~Device()>:
c001b11e:	83 ec 0c             	sub    esp,0xc
c001b121:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b125:	e8 e6 ff ff ff       	call   c001b110 <Device::~Device()>
c001b12a:	83 c4 04             	add    esp,0x4
c001b12d:	83 ec 08             	sub    esp,0x8
c001b130:	68 58 01 00 00       	push   0x158
c001b135:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b139:	e8 22 df ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001b13e:	83 c4 10             	add    esp,0x10
c001b141:	83 c4 0c             	add    esp,0xc
c001b144:	c3                   	ret    
c001b145:	90                   	nop

c001b146 <Device::findAndLoadDriver()>:
c001b146:	c7 44 24 04 ae 1d 03 c0 	mov    DWORD PTR [esp+0x4],0xc0031dae
c001b14e:	e9 3a e0 ff ff       	jmp    c001918d <Dbg::kprintf(char const*, ...)>
c001b153:	90                   	nop

c001b154 <Device::preOpenPCI(PCIDeviceInfo)>:
c001b154:	57                   	push   edi
c001b155:	b9 09 00 00 00       	mov    ecx,0x9
c001b15a:	56                   	push   esi
c001b15b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b15f:	8d 74 24 10          	lea    esi,[esp+0x10]
c001b163:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001b16d:	81 c7 18 01 00 00    	add    edi,0x118
c001b173:	fc                   	cld    
c001b174:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b176:	5e                   	pop    esi
c001b177:	5f                   	pop    edi
c001b178:	c3                   	ret    
c001b179:	90                   	nop

c001b17a <Device::preOpenACPI(void*, char*, char*)>:
c001b17a:	57                   	push   edi
c001b17b:	b9 1e 00 00 00       	mov    ecx,0x1e
c001b180:	56                   	push   esi
c001b181:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b185:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b189:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c001b193:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c001b199:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c001b19f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1a5:	b9 0e 00 00 00       	mov    ecx,0xe
c001b1aa:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c001b1b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b1b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1b6:	5e                   	pop    esi
c001b1b7:	5f                   	pop    edi
c001b1b8:	c3                   	ret    
c001b1b9:	90                   	nop

c001b1ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b1ba:	53                   	push   ebx
c001b1bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1cb:	0f b6 c0             	movzx  eax,al
c001b1ce:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b1d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b1d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b1da:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b1de:	5b                   	pop    ebx
c001b1df:	e9 c0 05 00 00       	jmp    c001b7a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c001b1e4 <Device::getParent()>:
c001b1e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b1e8:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c001b1ee:	c3                   	ret    
c001b1ef:	90                   	nop

c001b1f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b1f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b1f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b1f8:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001b1fd:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b201:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001b205:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b209:	e9 fe 06 00 00       	jmp    c001b90c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c001b20e <Device::addChild(Device*)>:
c001b20e:	53                   	push   ebx
c001b20f:	83 ec 08             	sub    esp,0x8
c001b212:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b216:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b21a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001b220:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001b226:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b228:	85 d2                	test   edx,edx
c001b22a:	74 04                	je     c001b230 <Device::addChild(Device*)+0x22>
c001b22c:	89 d3                	mov    ebx,edx
c001b22e:	eb f6                	jmp    c001b226 <Device::addChild(Device*)+0x18>
c001b230:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001b233:	83 ec 0c             	sub    esp,0xc
c001b236:	6a 08                	push   0x8
c001b238:	e8 c1 b0 ff ff       	call   c00162fe <malloc>
c001b23d:	89 03                	mov    DWORD PTR [ebx],eax
c001b23f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b245:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b24c:	83 c4 18             	add    esp,0x18
c001b24f:	5b                   	pop    ebx
c001b250:	c3                   	ret    
c001b251:	90                   	nop

c001b252 <Device::removeAllChildren()>:
c001b252:	56                   	push   esi
c001b253:	53                   	push   ebx
c001b254:	52                   	push   edx
c001b255:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b259:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001b25f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b262:	74 17                	je     c001b27b <Device::removeAllChildren()+0x29>
c001b264:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001b267:	85 c0                	test   eax,eax
c001b269:	74 0c                	je     c001b277 <Device::removeAllChildren()+0x25>
c001b26b:	83 ec 0c             	sub    esp,0xc
c001b26e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b270:	50                   	push   eax
c001b271:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001b274:	83 c4 10             	add    esp,0x10
c001b277:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b279:	eb e4                	jmp    c001b25f <Device::removeAllChildren()+0xd>
c001b27b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b281:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b287:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b28d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b294:	58                   	pop    eax
c001b295:	5b                   	pop    ebx
c001b296:	5e                   	pop    esi
c001b297:	c3                   	ret    

c001b298 <Device::hibernateAll()>:
c001b298:	53                   	push   ebx
c001b299:	83 ec 14             	sub    esp,0x14
c001b29c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2a2:	53                   	push   ebx
c001b2a3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b2a6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b2ac:	83 c4 10             	add    esp,0x10
c001b2af:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b2b2:	74 0f                	je     c001b2c3 <Device::hibernateAll()+0x2b>
c001b2b4:	83 ec 0c             	sub    esp,0xc
c001b2b7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b2ba:	e8 d9 ff ff ff       	call   c001b298 <Device::hibernateAll()>
c001b2bf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b2c1:	eb e9                	jmp    c001b2ac <Device::hibernateAll()+0x14>
c001b2c3:	83 c4 08             	add    esp,0x8
c001b2c6:	5b                   	pop    ebx
c001b2c7:	c3                   	ret    

c001b2c8 <Device::wakeAll()>:
c001b2c8:	53                   	push   ebx
c001b2c9:	83 ec 14             	sub    esp,0x14
c001b2cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b2d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b2d2:	53                   	push   ebx
c001b2d3:	ff 50 14             	call   DWORD PTR [eax+0x14]
c001b2d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b2dc:	83 c4 10             	add    esp,0x10
c001b2df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b2e2:	74 0f                	je     c001b2f3 <Device::wakeAll()+0x2b>
c001b2e4:	83 ec 0c             	sub    esp,0xc
c001b2e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b2ea:	e8 d9 ff ff ff       	call   c001b2c8 <Device::wakeAll()>
c001b2ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b2f1:	eb e9                	jmp    c001b2dc <Device::wakeAll()+0x14>
c001b2f3:	83 c4 08             	add    esp,0x8
c001b2f6:	5b                   	pop    ebx
c001b2f7:	c3                   	ret    

c001b2f8 <Device::detectAll()>:
c001b2f8:	53                   	push   ebx
c001b2f9:	83 ec 14             	sub    esp,0x14
c001b2fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b300:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b302:	53                   	push   ebx
c001b303:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001b306:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b30c:	83 c4 10             	add    esp,0x10
c001b30f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b312:	74 0f                	je     c001b323 <Device::detectAll()+0x2b>
c001b314:	83 ec 0c             	sub    esp,0xc
c001b317:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b31a:	e8 d9 ff ff ff       	call   c001b2f8 <Device::detectAll()>
c001b31f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b321:	eb e9                	jmp    c001b30c <Device::detectAll()+0x14>
c001b323:	83 c4 08             	add    esp,0x8
c001b326:	5b                   	pop    ebx
c001b327:	c3                   	ret    

c001b328 <Device::disableLegacyAll()>:
c001b328:	c3                   	ret    
c001b329:	90                   	nop

c001b32a <Device::loadDriversForAll()>:
c001b32a:	c3                   	ret    
c001b32b:	90                   	nop

c001b32c <Device::powerSavingAll(PowerSavingLevel)>:
c001b32c:	56                   	push   esi
c001b32d:	53                   	push   ebx
c001b32e:	83 ec 0c             	sub    esp,0xc
c001b331:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b335:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b339:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b33b:	56                   	push   esi
c001b33c:	53                   	push   ebx
c001b33d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001b340:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b346:	83 c4 10             	add    esp,0x10
c001b349:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b34c:	74 0f                	je     c001b35d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001b34e:	52                   	push   edx
c001b34f:	52                   	push   edx
c001b350:	56                   	push   esi
c001b351:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b354:	e8 d3 ff ff ff       	call   c001b32c <Device::powerSavingAll(PowerSavingLevel)>
c001b359:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b35b:	eb e9                	jmp    c001b346 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001b35d:	58                   	pop    eax
c001b35e:	5b                   	pop    ebx
c001b35f:	5e                   	pop    esi
c001b360:	c3                   	ret    
c001b361:	90                   	nop

c001b362 <Device::setName(char const*)>:
c001b362:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001b36a:	e9 d1 52 fe ff       	jmp    c0000640 <strcpy>
c001b36f:	90                   	nop

c001b370 <Device::Device(char const*)>:
c001b370:	83 ec 1c             	sub    esp,0x1c
c001b373:	ba fc 1d 03 c0       	mov    edx,0xc0031dfc
c001b378:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b37c:	89 10                	mov    DWORD PTR [eax],edx
c001b37e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b382:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001b38c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b390:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b39a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b39e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b3a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3ac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b3b6:	83 ec 08             	sub    esp,0x8
c001b3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3c1:	e8 9c ff ff ff       	call   c001b362 <Device::setName(char const*)>
c001b3c6:	83 c4 10             	add    esp,0x10
c001b3c9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c001b3d1:	83 ec 0c             	sub    esp,0xc
c001b3d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3d8:	e8 21 af ff ff       	call   c00162fe <malloc>
c001b3dd:	83 c4 10             	add    esp,0x10
c001b3e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b3f1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001b3f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3fb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b401:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b407:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b40b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001b411:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b418:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b41c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001b423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b427:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001b42e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b432:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b43c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b440:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001b44a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b44e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001b458:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b45c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c001b466:	90                   	nop
c001b467:	83 c4 1c             	add    esp,0x1c
c001b46a:	c3                   	ret    
c001b46b:	90                   	nop

c001b46c <Device::getName()>:
c001b46c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b470:	05 d0 00 00 00       	add    eax,0xd0
c001b475:	c3                   	ret    

c001b476 <Device::closeAll()>:
c001b476:	53                   	push   ebx
c001b477:	83 ec 08             	sub    esp,0x8
c001b47a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b47e:	53                   	push   ebx
c001b47f:	e8 e8 ff ff ff       	call   c001b46c <Device::getName()>
c001b484:	52                   	push   edx
c001b485:	50                   	push   eax
c001b486:	68 e8 1d 03 c0       	push   0xc0031de8
c001b48b:	e8 fd dc ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001b490:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b492:	6a 00                	push   0x0
c001b494:	6a 00                	push   0x0
c001b496:	6a 00                	push   0x0
c001b498:	53                   	push   ebx
c001b499:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b49c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b4a2:	83 c4 20             	add    esp,0x20
c001b4a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b4a8:	74 12                	je     c001b4bc <Device::closeAll()+0x46>
c001b4aa:	83 ec 0c             	sub    esp,0xc
c001b4ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b4b0:	e8 c1 ff ff ff       	call   c001b476 <Device::closeAll()>
c001b4b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b4b7:	83 c4 10             	add    esp,0x10
c001b4ba:	eb e9                	jmp    c001b4a5 <Device::closeAll()+0x2f>
c001b4bc:	83 c4 08             	add    esp,0x8
c001b4bf:	5b                   	pop    ebx
c001b4c0:	c3                   	ret    
c001b4c1:	90                   	nop

c001b4c2 <DriverlessDevice::DriverlessDevice(char const*)>:
c001b4c2:	83 ec 0c             	sub    esp,0xc
c001b4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4c9:	83 ec 08             	sub    esp,0x8
c001b4cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4d0:	50                   	push   eax
c001b4d1:	e8 9a fe ff ff       	call   c001b370 <Device::Device(char const*)>
c001b4d6:	83 c4 10             	add    esp,0x10
c001b4d9:	ba 28 1e 03 c0       	mov    edx,0xc0031e28
c001b4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4e2:	89 10                	mov    DWORD PTR [eax],edx
c001b4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4e8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c001b4f2:	90                   	nop
c001b4f3:	83 c4 0c             	add    esp,0xc
c001b4f6:	c3                   	ret    
c001b4f7:	90                   	nop

c001b4f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001b4f8:	57                   	push   edi
c001b4f9:	56                   	push   esi
c001b4fa:	53                   	push   ebx
c001b4fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b503:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b507:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001b50d:	75 0c                	jne    c001b51b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001b50f:	52                   	push   edx
c001b510:	52                   	push   edx
c001b511:	53                   	push   ebx
c001b512:	56                   	push   esi
c001b513:	e8 1a 35 01 00       	call   c002ea32 <LinkedList<Device>::addElement(Device*)>
c001b518:	83 c4 10             	add    esp,0x10
c001b51b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001b521:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001b524:	74 12                	je     c001b538 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c001b526:	50                   	push   eax
c001b527:	57                   	push   edi
c001b528:	56                   	push   esi
c001b529:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001b52c:	e8 c7 ff ff ff       	call   c001b4f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b531:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001b533:	83 c4 10             	add    esp,0x10
c001b536:	eb e9                	jmp    c001b521 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001b538:	5b                   	pop    ebx
c001b539:	5e                   	pop    esi
c001b53a:	5f                   	pop    edi
c001b53b:	c3                   	ret    

c001b53c <getDevicesOfType(DeviceType)>:
c001b53c:	53                   	push   ebx
c001b53d:	83 ec 14             	sub    esp,0x14
c001b540:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b544:	53                   	push   ebx
c001b545:	e8 c4 35 01 00       	call   c002eb0e <LinkedList<Device>::LinkedList()>
c001b54a:	83 c4 0c             	add    esp,0xc
c001b54d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b551:	53                   	push   ebx
c001b552:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001b558:	e8 9b ff ff ff       	call   c001b4f8 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001b55d:	89 d8                	mov    eax,ebx
c001b55f:	83 c4 18             	add    esp,0x18
c001b562:	5b                   	pop    ebx
c001b563:	c2 04 00             	ret    0x4
c001b566:	66 90                	xchg   ax,ax

c001b568 <HardDiskController::HardDiskController(char const*)>:
c001b568:	83 ec 0c             	sub    esp,0xc
c001b56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b56f:	83 ec 08             	sub    esp,0x8
c001b572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b576:	50                   	push   eax
c001b577:	e8 f4 fd ff ff       	call   c001b370 <Device::Device(char const*)>
c001b57c:	83 c4 10             	add    esp,0x10
c001b57f:	ba 54 1e 03 c0       	mov    edx,0xc0031e54
c001b584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b588:	89 10                	mov    DWORD PTR [eax],edx
c001b58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001b598:	90                   	nop
c001b599:	83 c4 0c             	add    esp,0xc
c001b59c:	c3                   	ret    
c001b59d:	90                   	nop
c001b59e:	66 90                	xchg   ax,ax

c001b5a0 <HardDiskController::~HardDiskController()>:
c001b5a0:	83 ec 0c             	sub    esp,0xc
c001b5a3:	ba 54 1e 03 c0       	mov    edx,0xc0031e54
c001b5a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ac:	89 10                	mov    DWORD PTR [eax],edx
c001b5ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b2:	83 ec 0c             	sub    esp,0xc
c001b5b5:	50                   	push   eax
c001b5b6:	e8 55 fb ff ff       	call   c001b110 <Device::~Device()>
c001b5bb:	83 c4 10             	add    esp,0x10
c001b5be:	90                   	nop
c001b5bf:	83 c4 0c             	add    esp,0xc
c001b5c2:	c3                   	ret    
c001b5c3:	90                   	nop

c001b5c4 <HardDiskController::~HardDiskController()>:
c001b5c4:	83 ec 0c             	sub    esp,0xc
c001b5c7:	83 ec 0c             	sub    esp,0xc
c001b5ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5ce:	e8 cd ff ff ff       	call   c001b5a0 <HardDiskController::~HardDiskController()>
c001b5d3:	83 c4 10             	add    esp,0x10
c001b5d6:	83 ec 08             	sub    esp,0x8
c001b5d9:	68 58 01 00 00       	push   0x158
c001b5de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b5e2:	e8 79 da ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001b5e7:	83 c4 10             	add    esp,0x10
c001b5ea:	83 c4 0c             	add    esp,0xc
c001b5ed:	c3                   	ret    

c001b5ee <PhysicalDisk::eject()>:
c001b5ee:	83 c8 ff             	or     eax,0xffffffff
c001b5f1:	c3                   	ret    

c001b5f2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001b5f2:	83 ec 0c             	sub    esp,0xc
c001b5f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f9:	83 ec 08             	sub    esp,0x8
c001b5fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b600:	50                   	push   eax
c001b601:	e8 6a fd ff ff       	call   c001b370 <Device::Device(char const*)>
c001b606:	83 c4 10             	add    esp,0x10
c001b609:	ba 80 1e 03 c0       	mov    edx,0xc0031e80
c001b60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b612:	89 10                	mov    DWORD PTR [eax],edx
c001b614:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b618:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001b61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b623:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c001b62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001b638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b63c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b640:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b654:	90                   	nop
c001b655:	83 c4 0c             	add    esp,0xc
c001b658:	c3                   	ret    
c001b659:	90                   	nop

c001b65a <PhysicalDisk::startCache()>:
c001b65a:	56                   	push   esi
c001b65b:	53                   	push   ebx
c001b65c:	83 ec 10             	sub    esp,0x10
c001b65f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b663:	6a 44                	push   0x44
c001b665:	e8 94 ac ff ff       	call   c00162fe <malloc>
c001b66a:	89 c6                	mov    esi,eax
c001b66c:	58                   	pop    eax
c001b66d:	5a                   	pop    edx
c001b66e:	53                   	push   ebx
c001b66f:	56                   	push   esi
c001b670:	e8 6f 17 00 00       	call   c001cde4 <VCache::VCache(PhysicalDisk*)>
c001b675:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001b67b:	83 c4 14             	add    esp,0x14
c001b67e:	5b                   	pop    ebx
c001b67f:	5e                   	pop    esi
c001b680:	c3                   	ret    
c001b681:	90                   	nop

c001b682 <PhysicalDisk::~PhysicalDisk()>:
c001b682:	83 ec 0c             	sub    esp,0xc
c001b685:	ba 80 1e 03 c0       	mov    edx,0xc0031e80
c001b68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b68e:	89 10                	mov    DWORD PTR [eax],edx
c001b690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b694:	83 ec 0c             	sub    esp,0xc
c001b697:	50                   	push   eax
c001b698:	e8 73 fa ff ff       	call   c001b110 <Device::~Device()>
c001b69d:	83 c4 10             	add    esp,0x10
c001b6a0:	90                   	nop
c001b6a1:	83 c4 0c             	add    esp,0xc
c001b6a4:	c3                   	ret    
c001b6a5:	90                   	nop

c001b6a6 <PhysicalDisk::~PhysicalDisk()>:
c001b6a6:	83 ec 0c             	sub    esp,0xc
c001b6a9:	83 ec 0c             	sub    esp,0xc
c001b6ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6b0:	e8 cd ff ff ff       	call   c001b682 <PhysicalDisk::~PhysicalDisk()>
c001b6b5:	83 c4 10             	add    esp,0x10
c001b6b8:	83 ec 08             	sub    esp,0x8
c001b6bb:	68 6c 01 00 00       	push   0x16c
c001b6c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6c4:	e8 97 d9 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001b6c9:	83 c4 10             	add    esp,0x10
c001b6cc:	83 c4 0c             	add    esp,0xc
c001b6cf:	c3                   	ret    

c001b6d0 <int_handler>:
c001b6d0:	55                   	push   ebp
c001b6d1:	57                   	push   edi
c001b6d2:	56                   	push   esi
c001b6d3:	53                   	push   ebx
c001b6d4:	83 ec 0c             	sub    esp,0xc
c001b6d7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b6db:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b6e2:	74 0b                	je     c001b6ef <int_handler+0x1f>
c001b6e4:	fa                   	cli    
c001b6e5:	f4                   	hlt    
c001b6e6:	80 3d 88 f9 03 c0 00 	cmp    BYTE PTR ds:0xc003f988,0x0
c001b6ed:	75 f5                	jne    c001b6e4 <int_handler+0x14>
c001b6ef:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c001b6f2:	8d 46 e0             	lea    eax,[esi-0x20]
c001b6f5:	83 f8 17             	cmp    eax,0x17
c001b6f8:	76 40                	jbe    c001b73a <int_handler+0x6a>
c001b6fa:	c1 e6 04             	shl    esi,0x4
c001b6fd:	31 db                	xor    ebx,ebx
c001b6ff:	8d ae 20 df 03 c0    	lea    ebp,[esi-0x3ffc20e0]
c001b705:	81 c6 20 cf 03 c0    	add    esi,0xc003cf20
c001b70b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001b70f:	85 c0                	test   eax,eax
c001b711:	74 13                	je     c001b726 <int_handler+0x56>
c001b713:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c001b716:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c001b71a:	74 2c                	je     c001b748 <int_handler+0x78>
c001b71c:	83 ec 08             	sub    esp,0x8
c001b71f:	52                   	push   edx
c001b720:	57                   	push   edi
c001b721:	ff d0                	call   eax
c001b723:	83 c4 10             	add    esp,0x10
c001b726:	83 c3 01             	add    ebx,0x1
c001b729:	83 fb 04             	cmp    ebx,0x4
c001b72c:	75 dd                	jne    c001b70b <int_handler+0x3b>
c001b72e:	83 c4 0c             	add    esp,0xc
c001b731:	31 c0                	xor    eax,eax
c001b733:	5b                   	pop    ebx
c001b734:	31 d2                	xor    edx,edx
c001b736:	5e                   	pop    esi
c001b737:	5f                   	pop    edi
c001b738:	5d                   	pop    ebp
c001b739:	c3                   	ret    
c001b73a:	83 ec 0c             	sub    esp,0xc
c001b73d:	50                   	push   eax
c001b73e:	e8 5d ba 00 00       	call   c00271a0 <HalEndOfInterrupt(int)>
c001b743:	83 c4 10             	add    esp,0x10
c001b746:	eb b2                	jmp    c001b6fa <int_handler+0x2a>
c001b748:	83 ec 08             	sub    esp,0x8
c001b74b:	52                   	push   edx
c001b74c:	57                   	push   edi
c001b74d:	ff d0                	call   eax
c001b74f:	83 c4 10             	add    esp,0x10
c001b752:	83 c4 0c             	add    esp,0xc
c001b755:	5b                   	pop    ebx
c001b756:	5e                   	pop    esi
c001b757:	5f                   	pop    edi
c001b758:	5d                   	pop    ebp
c001b759:	c3                   	ret    

c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>:
c001b75a:	56                   	push   esi
c001b75b:	31 c0                	xor    eax,eax
c001b75d:	53                   	push   ebx
c001b75e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001b762:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b766:	89 ca                	mov    edx,ecx
c001b768:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b76c:	c1 e2 04             	shl    edx,0x4
c001b76f:	83 bc 82 20 df 03 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffc20e0],0x0
c001b777:	74 17                	je     c001b790 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001b779:	83 c0 01             	add    eax,0x1
c001b77c:	83 f8 04             	cmp    eax,0x4
c001b77f:	75 ee                	jne    c001b76f <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001b781:	c7 44 24 0c b0 1e 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031eb0
c001b789:	5b                   	pop    ebx
c001b78a:	5e                   	pop    esi
c001b78b:	e9 16 4a 00 00       	jmp    c00201a6 <KePanic(char const*)>
c001b790:	8d 04 88             	lea    eax,[eax+ecx*4]
c001b793:	89 1c 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],ebx
c001b79a:	89 34 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],esi
c001b7a1:	5b                   	pop    ebx
c001b7a2:	5e                   	pop    esi
c001b7a3:	c3                   	ret    

c001b7a4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001b7a4:	57                   	push   edi
c001b7a5:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b7ab:	56                   	push   esi
c001b7ac:	53                   	push   ebx
c001b7ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b7b5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b7bc:	74 54                	je     c001b812 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c001b7be:	89 c7                	mov    edi,eax
c001b7c0:	84 c0                	test   al,al
c001b7c2:	74 1d                	je     c001b7e1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b7c4:	83 fe 0f             	cmp    esi,0xf
c001b7c7:	0f 8f d5 00 00 00    	jg     c001b8a2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c001b7cd:	0f b6 b6 e8 3a 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffcc518]
c001b7d4:	0f b7 bc 36 c0 f6 03 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffc0940]
c001b7dc:	d1 ef                	shr    edi,1
c001b7de:	83 e7 01             	and    edi,0x1
c001b7e1:	83 ec 08             	sub    esp,0x8
c001b7e4:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b7e9:	31 db                	xor    ebx,ebx
c001b7eb:	50                   	push   eax
c001b7ec:	68 bd 1e 03 c0       	push   0xc0031ebd
c001b7f1:	e8 97 d9 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001b7f6:	83 c4 10             	add    esp,0x10
c001b7f9:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c001b7fe:	85 c0                	test   eax,eax
c001b800:	7f 55                	jg     c001b857 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c001b802:	83 ec 0c             	sub    esp,0xc
c001b805:	68 d4 1e 03 c0       	push   0xc0031ed4
c001b80a:	e8 97 49 00 00       	call   c00201a6 <KePanic(char const*)>
c001b80f:	83 c4 10             	add    esp,0x10
c001b812:	8d 7e 20             	lea    edi,[esi+0x20]
c001b815:	89 f8                	mov    eax,edi
c001b817:	31 d2                	xor    edx,edx
c001b819:	c1 e0 04             	shl    eax,0x4
c001b81c:	8b 8c 90 20 df 03 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffc20e0]
c001b823:	85 c9                	test   ecx,ecx
c001b825:	0f 84 8e 00 00 00    	je     c001b8b9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c001b82b:	83 c2 01             	add    edx,0x1
c001b82e:	83 fa 04             	cmp    edx,0x4
c001b831:	75 e9                	jne    c001b81c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c001b833:	83 ec 0c             	sub    esp,0xc
c001b836:	68 28 1f 03 c0       	push   0xc0031f28
c001b83b:	e8 66 49 00 00       	call   c00201a6 <KePanic(char const*)>
c001b840:	83 c4 10             	add    esp,0x10
c001b843:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b848:	5b                   	pop    ebx
c001b849:	5e                   	pop    esi
c001b84a:	5f                   	pop    edi
c001b84b:	c3                   	ret    
c001b84c:	83 c3 01             	add    ebx,0x1
c001b84f:	39 1d c0 0b 04 c0    	cmp    DWORD PTR ds:0xc0040bc0,ebx
c001b855:	7e ab                	jle    c001b802 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c001b857:	83 ec 08             	sub    esp,0x8
c001b85a:	8b 04 9d e0 0b 04 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffbf420]
c001b861:	56                   	push   esi
c001b862:	50                   	push   eax
c001b863:	e8 18 21 01 00       	call   c002d980 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001b868:	83 c4 10             	add    esp,0x10
c001b86b:	84 c0                	test   al,al
c001b86d:	74 dd                	je     c001b84c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c001b86f:	83 ec 04             	sub    esp,0x4
c001b872:	89 f8                	mov    eax,edi
c001b874:	8b 1c 9d e0 0b 04 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffbf420]
c001b87b:	0f b6 f8             	movzx  edi,al
c001b87e:	57                   	push   edi
c001b87f:	8d 7e 20             	lea    edi,[esi+0x20]
c001b882:	6a 00                	push   0x0
c001b884:	89 f8                	mov    eax,edi
c001b886:	0f b6 c0             	movzx  eax,al
c001b889:	50                   	push   eax
c001b88a:	89 f0                	mov    eax,esi
c001b88c:	6a 00                	push   0x0
c001b88e:	0f b6 c0             	movzx  eax,al
c001b891:	6a 00                	push   0x0
c001b893:	50                   	push   eax
c001b894:	53                   	push   ebx
c001b895:	e8 52 22 01 00       	call   c002daec <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001b89a:	83 c4 20             	add    esp,0x20
c001b89d:	e9 73 ff ff ff       	jmp    c001b815 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c001b8a2:	83 ec 0c             	sub    esp,0xc
c001b8a5:	31 ff                	xor    edi,edi
c001b8a7:	68 f0 1e 03 c0       	push   0xc0031ef0
c001b8ac:	e8 f5 48 00 00       	call   c00201a6 <KePanic(char const*)>
c001b8b1:	83 c4 10             	add    esp,0x10
c001b8b4:	e9 28 ff ff ff       	jmp    c001b7e1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c001b8b9:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b8bc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b8c0:	89 14 85 20 df 03 c0 	mov    DWORD PTR [eax*4-0x3ffc20e0],edx
c001b8c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b8cb:	5b                   	pop    ebx
c001b8cc:	89 14 85 20 cf 03 c0 	mov    DWORD PTR [eax*4-0x3ffc30e0],edx
c001b8d3:	89 f0                	mov    eax,esi
c001b8d5:	5e                   	pop    esi
c001b8d6:	5f                   	pop    edi
c001b8d7:	c3                   	ret    

c001b8d8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c001b8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b8dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b8e0:	c1 e0 04             	shl    eax,0x4
c001b8e3:	8d 50 10             	lea    edx,[eax+0x10]
c001b8e6:	39 88 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ecx
c001b8ec:	74 08                	je     c001b8f6 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001b8ee:	83 c0 04             	add    eax,0x4
c001b8f1:	39 d0                	cmp    eax,edx
c001b8f3:	75 f1                	jne    c001b8e6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001b8f5:	c3                   	ret    
c001b8f6:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b900:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b90a:	eb e2                	jmp    c001b8ee <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001b90c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001b90c:	53                   	push   ebx
c001b90d:	83 ec 08             	sub    esp,0x8
c001b910:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b914:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b919:	74 0e                	je     c001b929 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b91b:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001b920:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c001b927:	75 37                	jne    c001b960 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c001b929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b92d:	83 c0 20             	add    eax,0x20
c001b930:	c1 e0 04             	shl    eax,0x4
c001b933:	8d 50 10             	lea    edx,[eax+0x10]
c001b936:	39 98 20 df 03 c0    	cmp    DWORD PTR [eax-0x3ffc20e0],ebx
c001b93c:	74 0c                	je     c001b94a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c001b93e:	83 c0 04             	add    eax,0x4
c001b941:	39 d0                	cmp    eax,edx
c001b943:	75 f1                	jne    c001b936 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c001b945:	83 c4 08             	add    esp,0x8
c001b948:	5b                   	pop    ebx
c001b949:	c3                   	ret    
c001b94a:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b954:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b95e:	eb de                	jmp    c001b93e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c001b960:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001b965:	7f 11                	jg     c001b978 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c001b967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b96b:	0f b6 80 e8 3a 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc518]
c001b972:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b976:	eb b1                	jmp    c001b929 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001b978:	83 ec 0c             	sub    esp,0xc
c001b97b:	68 e1 1e 03 c0       	push   0xc0031ee1
c001b980:	e8 21 48 00 00       	call   c00201a6 <KePanic(char const*)>
c001b985:	83 c4 10             	add    esp,0x10
c001b988:	eb 9f                	jmp    c001b929 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c001b98a <setupINTS()>:
c001b98a:	31 c0                	xor    eax,eax
c001b98c:	c7 80 20 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20e0],0x0
c001b996:	c7 80 20 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30e0],0x0
c001b9a0:	c7 80 24 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20dc],0x0
c001b9aa:	c7 80 24 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30dc],0x0
c001b9b4:	c7 80 28 df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d8],0x0
c001b9be:	c7 80 28 cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d8],0x0
c001b9c8:	c7 80 2c df 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc20d4],0x0
c001b9d2:	c7 80 2c cf 03 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffc30d4],0x0
c001b9dc:	83 c0 10             	add    eax,0x10
c001b9df:	3d 00 10 00 00       	cmp    eax,0x1000
c001b9e4:	75 a6                	jne    c001b98c <setupINTS()+0x2>
c001b9e6:	c3                   	ret    

c001b9e7 <convertLegacyIRQNumber(int)>:
c001b9e7:	83 ec 0c             	sub    esp,0xc
c001b9ea:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001b9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9f4:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001b9fb:	74 0c                	je     c001ba09 <convertLegacyIRQNumber(int)+0x22>
c001b9fd:	83 f8 0f             	cmp    eax,0xf
c001ba00:	7f 0b                	jg     c001ba0d <convertLegacyIRQNumber(int)+0x26>
c001ba02:	0f b6 80 e8 3a 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffcc518]
c001ba09:	83 c4 0c             	add    esp,0xc
c001ba0c:	c3                   	ret    
c001ba0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ba11:	83 ec 0c             	sub    esp,0xc
c001ba14:	68 f0 1e 03 c0       	push   0xc0031ef0
c001ba19:	e8 88 47 00 00       	call   c00201a6 <KePanic(char const*)>
c001ba1e:	83 c4 10             	add    esp,0x10
c001ba21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba25:	83 c4 0c             	add    esp,0xc
c001ba28:	c3                   	ret    
c001ba29:	90                   	nop

c001ba2a <startGUI(void*)>:
c001ba2a:	55                   	push   ebp
c001ba2b:	89 e5                	mov    ebp,esp
c001ba2d:	53                   	push   ebx
c001ba2e:	83 ec 04             	sub    esp,0x4
c001ba31:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ba36:	83 e8 01             	sub    eax,0x1
c001ba39:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001ba3e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001ba43:	85 c0                	test   eax,eax
c001ba45:	75 01                	jne    c001ba48 <startGUI(void*)+0x1e>
c001ba47:	fb                   	sti    
c001ba48:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ba4e:	83 ec 08             	sub    esp,0x8
c001ba51:	6a 01                	push   0x1
c001ba53:	68 4d 1f 03 c0       	push   0xc0031f4d
c001ba58:	e8 a4 8c 00 00       	call   c0024701 <Thr::loadDLL(char const*, bool)>
c001ba5d:	83 c4 10             	add    esp,0x10
c001ba60:	83 ec 08             	sub    esp,0x8
c001ba63:	53                   	push   ebx
c001ba64:	50                   	push   eax
c001ba65:	e8 e9 8e 00 00       	call   c0024953 <Thr::executeDLL(unsigned long, void*)>
c001ba6a:	83 c4 10             	add    esp,0x10
c001ba6d:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ba73:	83 ec 08             	sub    esp,0x8
c001ba76:	6a 01                	push   0x1
c001ba78:	68 67 1f 03 c0       	push   0xc0031f67
c001ba7d:	e8 7f 8c 00 00       	call   c0024701 <Thr::loadDLL(char const*, bool)>
c001ba82:	83 c4 10             	add    esp,0x10
c001ba85:	83 ec 08             	sub    esp,0x8
c001ba88:	53                   	push   ebx
c001ba89:	50                   	push   eax
c001ba8a:	e8 c4 8e 00 00       	call   c0024953 <Thr::executeDLL(unsigned long, void*)>
c001ba8f:	83 c4 10             	add    esp,0x10
c001ba92:	eb fe                	jmp    c001ba92 <startGUI(void*)+0x68>

c001ba94 <startGUIVESA(void*)>:
c001ba94:	55                   	push   ebp
c001ba95:	89 e5                	mov    ebp,esp
c001ba97:	53                   	push   ebx
c001ba98:	83 ec 04             	sub    esp,0x4
c001ba9b:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001baa0:	83 e8 01             	sub    eax,0x1
c001baa3:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001baa8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001baad:	85 c0                	test   eax,eax
c001baaf:	75 01                	jne    c001bab2 <startGUIVESA(void*)+0x1e>
c001bab1:	fb                   	sti    
c001bab2:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001bab8:	83 ec 08             	sub    esp,0x8
c001babb:	6a 01                	push   0x1
c001babd:	68 85 1f 03 c0       	push   0xc0031f85
c001bac2:	e8 3a 8c 00 00       	call   c0024701 <Thr::loadDLL(char const*, bool)>
c001bac7:	83 c4 10             	add    esp,0x10
c001baca:	83 ec 08             	sub    esp,0x8
c001bacd:	53                   	push   ebx
c001bace:	50                   	push   eax
c001bacf:	e8 7f 8e 00 00       	call   c0024953 <Thr::executeDLL(unsigned long, void*)>
c001bad4:	83 c4 10             	add    esp,0x10
c001bad7:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001badd:	83 ec 08             	sub    esp,0x8
c001bae0:	6a 01                	push   0x1
c001bae2:	68 67 1f 03 c0       	push   0xc0031f67
c001bae7:	e8 15 8c 00 00       	call   c0024701 <Thr::loadDLL(char const*, bool)>
c001baec:	83 c4 10             	add    esp,0x10
c001baef:	83 ec 08             	sub    esp,0x8
c001baf2:	53                   	push   ebx
c001baf3:	50                   	push   eax
c001baf4:	e8 5a 8e 00 00       	call   c0024953 <Thr::executeDLL(unsigned long, void*)>
c001baf9:	83 c4 10             	add    esp,0x10
c001bafc:	eb fe                	jmp    c001bafc <startGUIVESA(void*)+0x68>

c001bafe <sendKeyToTerminal(unsigned char)>:
c001bafe:	55                   	push   ebp
c001baff:	89 e5                	mov    ebp,esp
c001bb01:	83 ec 28             	sub    esp,0x28
c001bb04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bb07:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001bb0a:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c001bb0f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001bb13:	83 ec 08             	sub    esp,0x8
c001bb16:	52                   	push   edx
c001bb17:	50                   	push   eax
c001bb18:	e8 e1 ba ff ff       	call   c00175fe <VgaText::receiveKey(unsigned char)>
c001bb1d:	83 c4 10             	add    esp,0x10
c001bb20:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb24:	83 f8 0a             	cmp    eax,0xa
c001bb27:	74 16                	je     c001bb3f <sendKeyToTerminal(unsigned char)+0x41>
c001bb29:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb2d:	83 f8 03             	cmp    eax,0x3
c001bb30:	74 0d                	je     c001bb3f <sendKeyToTerminal(unsigned char)+0x41>
c001bb32:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001bb36:	83 f8 1c             	cmp    eax,0x1c
c001bb39:	0f 85 97 00 00 00    	jne    c001bbd6 <sendKeyToTerminal(unsigned char)+0xd8>
c001bb3f:	fa                   	cli    
c001bb40:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bb45:	83 c0 01             	add    eax,0x1
c001bb48:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bb4d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bb52:	83 c0 01             	add    eax,0x1
c001bb55:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bb5a:	a1 20 ef 03 c0       	mov    eax,ds:0xc003ef20
c001bb5f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bb62:	c7 05 20 ef 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003ef20,0x0
c001bb6c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001bb70:	74 1f                	je     c001bb91 <sendKeyToTerminal(unsigned char)+0x93>
c001bb72:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001bb75:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001bb78:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001bb7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb7e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001bb81:	83 ec 0c             	sub    esp,0xc
c001bb84:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001bb87:	e8 f0 98 00 00       	call   c002547c <unblockTask(ThreadControlBlock*)>
c001bb8c:	83 c4 10             	add    esp,0x10
c001bb8f:	eb db                	jmp    c001bb6c <sendKeyToTerminal(unsigned char)+0x6e>
c001bb91:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bb96:	83 e8 01             	sub    eax,0x1
c001bb99:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001bb9e:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001bba3:	85 c0                	test   eax,eax
c001bba5:	75 18                	jne    c001bbbf <sendKeyToTerminal(unsigned char)+0xc1>
c001bba7:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c001bbac:	85 c0                	test   eax,eax
c001bbae:	74 0f                	je     c001bbbf <sendKeyToTerminal(unsigned char)+0xc1>
c001bbb0:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001bbba:	e8 c5 95 00 00       	call   c0025184 <schedule()>
c001bbbf:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bbc4:	83 e8 01             	sub    eax,0x1
c001bbc7:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001bbcc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001bbd1:	85 c0                	test   eax,eax
c001bbd3:	75 01                	jne    c001bbd6 <sendKeyToTerminal(unsigned char)+0xd8>
c001bbd5:	fb                   	sti    
c001bbd6:	90                   	nop
c001bbd7:	c9                   	leave  
c001bbd8:	c3                   	ret    

c001bbd9 <sendKeyboardToken(KeyboardToken)>:
c001bbd9:	55                   	push   ebp
c001bbda:	89 e5                	mov    ebp,esp
c001bbdc:	83 ec 18             	sub    esp,0x18
c001bbdf:	e8 12 46 00 00       	call   c00201f6 <KeUserIOReceived()>
c001bbe4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001bbe7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bbea:	0f b7 c0             	movzx  eax,ax
c001bbed:	83 f2 01             	xor    edx,0x1
c001bbf0:	88 90 40 ef 03 c0    	mov    BYTE PTR [eax-0x3ffc10c0],dl
c001bbf6:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001bbfb:	85 c0                	test   eax,eax
c001bbfd:	74 24                	je     c001bc23 <sendKeyboardToken(KeyboardToken)+0x4a>
c001bbff:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001bc05:	83 ec 04             	sub    esp,0x4
c001bc08:	68 40 ef 03 c0       	push   0xc003ef40
c001bc0d:	83 ec 08             	sub    esp,0x8
c001bc10:	89 e2                	mov    edx,esp
c001bc12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc15:	89 02                	mov    DWORD PTR [edx],eax
c001bc17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bc1a:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001bc1e:	ff d1                	call   ecx
c001bc20:	83 c4 10             	add    esp,0x10
c001bc23:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001bc27:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001bc2a:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bc2f:	0f b6 d2             	movzx  edx,dl
c001bc32:	0f b6 c0             	movzx  eax,al
c001bc35:	39 c2                	cmp    edx,eax
c001bc37:	74 1c                	je     c001bc55 <sendKeyboardToken(KeyboardToken)+0x7c>
c001bc39:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c001bc3c:	a2 48 f3 03 c0       	mov    ds:0xc003f348,al
c001bc41:	a0 48 f3 03 c0       	mov    al,ds:0xc003f348
c001bc46:	0f b6 c0             	movzx  eax,al
c001bc49:	83 ec 0c             	sub    esp,0xc
c001bc4c:	50                   	push   eax
c001bc4d:	e8 f8 b0 ff ff       	call   c0016d4a <setTerminalScrollLock(bool)>
c001bc52:	83 c4 10             	add    esp,0x10
c001bc55:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001bc58:	0f b6 c0             	movzx  eax,al
c001bc5b:	85 c0                	test   eax,eax
c001bc5d:	0f 84 da 00 00 00    	je     c001bd3d <sendKeyboardToken(KeyboardToken)+0x164>
c001bc63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc66:	0f b7 c0             	movzx  eax,ax
c001bc69:	3d 18 03 00 00       	cmp    eax,0x318
c001bc6e:	75 06                	jne    c001bc76 <sendKeyboardToken(KeyboardToken)+0x9d>
c001bc70:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001bc76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc79:	0f b7 c0             	movzx  eax,ax
c001bc7c:	3d 19 03 00 00       	cmp    eax,0x319
c001bc81:	75 06                	jne    c001bc89 <sendKeyboardToken(KeyboardToken)+0xb0>
c001bc83:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001bc89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc8c:	0f b7 c0             	movzx  eax,ax
c001bc8f:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bc94:	75 06                	jne    c001bc9c <sendKeyboardToken(KeyboardToken)+0xc3>
c001bc96:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001bc9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bc9f:	0f b7 c0             	movzx  eax,ax
c001bca2:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bca7:	75 06                	jne    c001bcaf <sendKeyboardToken(KeyboardToken)+0xd6>
c001bca9:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001bcaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcb2:	0f b7 c0             	movzx  eax,ax
c001bcb5:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bcba:	75 06                	jne    c001bcc2 <sendKeyboardToken(KeyboardToken)+0xe9>
c001bcbc:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001bcc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcc5:	0f b7 c0             	movzx  eax,ax
c001bcc8:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bccd:	75 06                	jne    c001bcd5 <sendKeyboardToken(KeyboardToken)+0xfc>
c001bccf:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bcd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcd8:	0f b7 c0             	movzx  eax,ax
c001bcdb:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bce0:	75 06                	jne    c001bce8 <sendKeyboardToken(KeyboardToken)+0x10f>
c001bce2:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001bce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bceb:	0f b7 c0             	movzx  eax,ax
c001bcee:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bcf3:	75 06                	jne    c001bcfb <sendKeyboardToken(KeyboardToken)+0x122>
c001bcf5:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001bcfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bcfe:	0f b7 c0             	movzx  eax,ax
c001bd01:	3d 20 03 00 00       	cmp    eax,0x320
c001bd06:	75 06                	jne    c001bd0e <sendKeyboardToken(KeyboardToken)+0x135>
c001bd08:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001bd0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd11:	0f b7 c0             	movzx  eax,ax
c001bd14:	3d 21 03 00 00       	cmp    eax,0x321
c001bd19:	75 06                	jne    c001bd21 <sendKeyboardToken(KeyboardToken)+0x148>
c001bd1b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001bd21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd24:	0f b7 c0             	movzx  eax,ax
c001bd27:	3d 22 03 00 00       	cmp    eax,0x322
c001bd2c:	0f 85 f1 00 00 00    	jne    c001be23 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bd32:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001bd38:	e9 e6 00 00 00       	jmp    c001be23 <sendKeyboardToken(KeyboardToken)+0x24a>
c001bd3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd40:	0f b7 c0             	movzx  eax,ax
c001bd43:	3d 18 03 00 00       	cmp    eax,0x318
c001bd48:	75 0a                	jne    c001bd54 <sendKeyboardToken(KeyboardToken)+0x17b>
c001bd4a:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001bd50:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd57:	0f b7 c0             	movzx  eax,ax
c001bd5a:	3d 19 03 00 00       	cmp    eax,0x319
c001bd5f:	75 0a                	jne    c001bd6b <sendKeyboardToken(KeyboardToken)+0x192>
c001bd61:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001bd67:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd6e:	0f b7 c0             	movzx  eax,ax
c001bd71:	3d 1a 03 00 00       	cmp    eax,0x31a
c001bd76:	75 0a                	jne    c001bd82 <sendKeyboardToken(KeyboardToken)+0x1a9>
c001bd78:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001bd7e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd85:	0f b7 c0             	movzx  eax,ax
c001bd88:	3d 1b 03 00 00       	cmp    eax,0x31b
c001bd8d:	75 0a                	jne    c001bd99 <sendKeyboardToken(KeyboardToken)+0x1c0>
c001bd8f:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001bd95:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bd99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bd9c:	0f b7 c0             	movzx  eax,ax
c001bd9f:	3d 1c 03 00 00       	cmp    eax,0x31c
c001bda4:	75 0a                	jne    c001bdb0 <sendKeyboardToken(KeyboardToken)+0x1d7>
c001bda6:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001bdac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdb3:	0f b7 c0             	movzx  eax,ax
c001bdb6:	3d 1d 03 00 00       	cmp    eax,0x31d
c001bdbb:	75 0a                	jne    c001bdc7 <sendKeyboardToken(KeyboardToken)+0x1ee>
c001bdbd:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001bdc3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdca:	0f b7 c0             	movzx  eax,ax
c001bdcd:	3d 1e 03 00 00       	cmp    eax,0x31e
c001bdd2:	75 0a                	jne    c001bdde <sendKeyboardToken(KeyboardToken)+0x205>
c001bdd4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001bdda:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bde1:	0f b7 c0             	movzx  eax,ax
c001bde4:	3d 1f 03 00 00       	cmp    eax,0x31f
c001bde9:	75 0a                	jne    c001bdf5 <sendKeyboardToken(KeyboardToken)+0x21c>
c001bdeb:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001bdf1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001bdf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bdf8:	0f b7 c0             	movzx  eax,ax
c001bdfb:	3d 20 03 00 00       	cmp    eax,0x320
c001be00:	75 0a                	jne    c001be0c <sendKeyboardToken(KeyboardToken)+0x233>
c001be02:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001be08:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be0f:	0f b7 c0             	movzx  eax,ax
c001be12:	3d 21 03 00 00       	cmp    eax,0x321
c001be17:	75 0a                	jne    c001be23 <sendKeyboardToken(KeyboardToken)+0x24a>
c001be19:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001be1f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001be23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be26:	0f b7 c0             	movzx  eax,ax
c001be29:	3d 00 02 00 00       	cmp    eax,0x200
c001be2e:	75 2f                	jne    c001be5f <sendKeyboardToken(KeyboardToken)+0x286>
c001be30:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001be35:	83 f0 01             	xor    eax,0x1
c001be38:	0f b6 c0             	movzx  eax,al
c001be3b:	85 c0                	test   eax,eax
c001be3d:	74 20                	je     c001be5f <sendKeyboardToken(KeyboardToken)+0x286>
c001be3f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001be44:	6a 01                	push   0x1
c001be46:	6a 00                	push   0x0
c001be48:	68 2a ba 01 c0       	push   0xc001ba2a
c001be4d:	50                   	push   eax
c001be4e:	e8 e1 90 00 00       	call   c0024f34 <Process::createThread(void (*)(void*), void*, int)>
c001be53:	83 c4 10             	add    esp,0x10
c001be56:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001be5d:	eb 3a                	jmp    c001be99 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001be5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be62:	0f b7 c0             	movzx  eax,ax
c001be65:	3d 01 02 00 00       	cmp    eax,0x201
c001be6a:	75 2d                	jne    c001be99 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001be6c:	a0 40 f3 03 c0       	mov    al,ds:0xc003f340
c001be71:	83 f0 01             	xor    eax,0x1
c001be74:	0f b6 c0             	movzx  eax,al
c001be77:	85 c0                	test   eax,eax
c001be79:	74 1e                	je     c001be99 <sendKeyboardToken(KeyboardToken)+0x2c0>
c001be7b:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001be80:	6a 01                	push   0x1
c001be82:	6a 00                	push   0x0
c001be84:	68 94 ba 01 c0       	push   0xc001ba94
c001be89:	50                   	push   eax
c001be8a:	e8 a5 90 00 00       	call   c0024f34 <Process::createThread(void (*)(void*), void*, int)>
c001be8f:	83 c4 10             	add    esp,0x10
c001be92:	c6 05 40 f3 03 c0 01 	mov    BYTE PTR ds:0xc003f340,0x1
c001be99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001be9c:	0f b7 c0             	movzx  eax,ax
c001be9f:	3d 25 03 00 00       	cmp    eax,0x325
c001bea4:	75 06                	jne    c001beac <sendKeyboardToken(KeyboardToken)+0x2d3>
c001bea6:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001beac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001beaf:	0f b7 c0             	movzx  eax,ax
c001beb2:	3d 24 03 00 00       	cmp    eax,0x324
c001beb7:	75 06                	jne    c001bebf <sendKeyboardToken(KeyboardToken)+0x2e6>
c001beb9:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001bebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bec2:	0f b7 c0             	movzx  eax,ax
c001bec5:	3d 23 03 00 00       	cmp    eax,0x323
c001beca:	75 06                	jne    c001bed2 <sendKeyboardToken(KeyboardToken)+0x2f9>
c001becc:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001bed2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bed5:	0f b7 c0             	movzx  eax,ax
c001bed8:	3d 26 03 00 00       	cmp    eax,0x326
c001bedd:	75 06                	jne    c001bee5 <sendKeyboardToken(KeyboardToken)+0x30c>
c001bedf:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001bee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bee8:	0f b7 c0             	movzx  eax,ax
c001beeb:	3d 27 03 00 00       	cmp    eax,0x327
c001bef0:	75 06                	jne    c001bef8 <sendKeyboardToken(KeyboardToken)+0x31f>
c001bef2:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001bef8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001befb:	0f b7 c0             	movzx  eax,ax
c001befe:	3d 22 03 00 00       	cmp    eax,0x322
c001bf03:	75 06                	jne    c001bf0b <sendKeyboardToken(KeyboardToken)+0x332>
c001bf05:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001bf0b:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001bf0f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bf12:	83 f0 01             	xor    eax,0x1
c001bf15:	0f b6 c0             	movzx  eax,al
c001bf18:	85 c0                	test   eax,eax
c001bf1a:	74 7c                	je     c001bf98 <sendKeyboardToken(KeyboardToken)+0x3bf>
c001bf1c:	a0 41 f0 03 c0       	mov    al,ds:0xc003f041
c001bf21:	0f b6 c0             	movzx  eax,al
c001bf24:	85 c0                	test   eax,eax
c001bf26:	74 43                	je     c001bf6b <sendKeyboardToken(KeyboardToken)+0x392>
c001bf28:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bf2c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001bf30:	85 c0                	test   eax,eax
c001bf32:	74 2b                	je     c001bf5f <sendKeyboardToken(KeyboardToken)+0x386>
c001bf34:	8b 15 44 f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f344
c001bf3a:	89 d0                	mov    eax,edx
c001bf3c:	c1 e0 02             	shl    eax,0x2
c001bf3f:	01 d0                	add    eax,edx
c001bf41:	01 c0                	add    eax,eax
c001bf43:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001bf48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf4b:	0f b7 c0             	movzx  eax,ax
c001bf4e:	8d 50 d0             	lea    edx,[eax-0x30]
c001bf51:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf56:	01 d0                	add    eax,edx
c001bf58:	a3 44 f3 03 c0       	mov    ds:0xc003f344,eax
c001bf5d:	eb 71                	jmp    c001bfd0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bf5f:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bf69:	eb 65                	jmp    c001bfd0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bf6b:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf70:	85 c0                	test   eax,eax
c001bf72:	74 18                	je     c001bf8c <sendKeyboardToken(KeyboardToken)+0x3b3>
c001bf74:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bf79:	0f b6 c0             	movzx  eax,al
c001bf7c:	83 ec 0c             	sub    esp,0xc
c001bf7f:	50                   	push   eax
c001bf80:	e8 79 fb ff ff       	call   c001bafe <sendKeyToTerminal(unsigned char)>
c001bf85:	83 c4 10             	add    esp,0x10
c001bf88:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bf8c:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bf96:	eb 38                	jmp    c001bfd0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bf98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf9b:	0f b7 c0             	movzx  eax,ax
c001bf9e:	3d 01 01 00 00       	cmp    eax,0x101
c001bfa3:	75 2b                	jne    c001bfd0 <sendKeyboardToken(KeyboardToken)+0x3f7>
c001bfa5:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bfaa:	85 c0                	test   eax,eax
c001bfac:	74 18                	je     c001bfc6 <sendKeyboardToken(KeyboardToken)+0x3ed>
c001bfae:	a1 44 f3 03 c0       	mov    eax,ds:0xc003f344
c001bfb3:	0f b6 c0             	movzx  eax,al
c001bfb6:	83 ec 0c             	sub    esp,0xc
c001bfb9:	50                   	push   eax
c001bfba:	e8 3f fb ff ff       	call   c001bafe <sendKeyToTerminal(unsigned char)>
c001bfbf:	83 c4 10             	add    esp,0x10
c001bfc2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001bfc6:	c7 05 44 f3 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f344,0x0
c001bfd0:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001bfd3:	83 f0 01             	xor    eax,0x1
c001bfd6:	0f b6 c0             	movzx  eax,al
c001bfd9:	85 c0                	test   eax,eax
c001bfdb:	74 5a                	je     c001c037 <sendKeyboardToken(KeyboardToken)+0x45e>
c001bfdd:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001bfe0:	83 f0 01             	xor    eax,0x1
c001bfe3:	0f b6 c0             	movzx  eax,al
c001bfe6:	85 c0                	test   eax,eax
c001bfe8:	74 4d                	je     c001c037 <sendKeyboardToken(KeyboardToken)+0x45e>
c001bfea:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001bfef:	83 f0 01             	xor    eax,0x1
c001bff2:	0f b6 c0             	movzx  eax,al
c001bff5:	85 c0                	test   eax,eax
c001bff7:	74 3e                	je     c001c037 <sendKeyboardToken(KeyboardToken)+0x45e>
c001bff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bffc:	0f b7 c0             	movzx  eax,ax
c001bfff:	83 f8 1f             	cmp    eax,0x1f
c001c002:	76 0b                	jbe    c001c00f <sendKeyboardToken(KeyboardToken)+0x436>
c001c004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c007:	0f b7 c0             	movzx  eax,ax
c001c00a:	83 f8 7e             	cmp    eax,0x7e
c001c00d:	76 16                	jbe    c001c025 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c00f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c012:	0f b7 c0             	movzx  eax,ax
c001c015:	83 f8 0a             	cmp    eax,0xa
c001c018:	74 0b                	je     c001c025 <sendKeyboardToken(KeyboardToken)+0x44c>
c001c01a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c01d:	0f b7 c0             	movzx  eax,ax
c001c020:	83 f8 08             	cmp    eax,0x8
c001c023:	75 12                	jne    c001c037 <sendKeyboardToken(KeyboardToken)+0x45e>
c001c025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c028:	0f b6 c0             	movzx  eax,al
c001c02b:	83 ec 0c             	sub    esp,0xc
c001c02e:	50                   	push   eax
c001c02f:	e8 ca fa ff ff       	call   c001bafe <sendKeyToTerminal(unsigned char)>
c001c034:	83 c4 10             	add    esp,0x10
c001c037:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001c03a:	83 f0 01             	xor    eax,0x1
c001c03d:	0f b6 c0             	movzx  eax,al
c001c040:	85 c0                	test   eax,eax
c001c042:	74 5d                	je     c001c0a1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c044:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c047:	83 f0 01             	xor    eax,0x1
c001c04a:	0f b6 c0             	movzx  eax,al
c001c04d:	85 c0                	test   eax,eax
c001c04f:	74 50                	je     c001c0a1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c051:	a0 40 f0 03 c0       	mov    al,ds:0xc003f040
c001c056:	0f b6 c0             	movzx  eax,al
c001c059:	85 c0                	test   eax,eax
c001c05b:	74 44                	je     c001c0a1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c05d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c060:	0f b7 c0             	movzx  eax,ax
c001c063:	83 f8 3f             	cmp    eax,0x3f
c001c066:	76 39                	jbe    c001c0a1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c06b:	0f b7 c0             	movzx  eax,ax
c001c06e:	83 f8 7f             	cmp    eax,0x7f
c001c071:	77 2e                	ja     c001c0a1 <sendKeyboardToken(KeyboardToken)+0x4c8>
c001c073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c076:	88 c2                	mov    dl,al
c001c078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c07b:	0f b7 c0             	movzx  eax,ax
c001c07e:	83 f8 5f             	cmp    eax,0x5f
c001c081:	76 04                	jbe    c001c087 <sendKeyboardToken(KeyboardToken)+0x4ae>
c001c083:	b0 20                	mov    al,0x20
c001c085:	eb 02                	jmp    c001c089 <sendKeyboardToken(KeyboardToken)+0x4b0>
c001c087:	b0 00                	mov    al,0x0
c001c089:	89 d1                	mov    ecx,edx
c001c08b:	29 c1                	sub    ecx,eax
c001c08d:	89 c8                	mov    eax,ecx
c001c08f:	83 e8 40             	sub    eax,0x40
c001c092:	0f b6 c0             	movzx  eax,al
c001c095:	83 ec 0c             	sub    esp,0xc
c001c098:	50                   	push   eax
c001c099:	e8 60 fa ff ff       	call   c001bafe <sendKeyToTerminal(unsigned char)>
c001c09e:	83 c4 10             	add    esp,0x10
c001c0a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0a4:	0f b7 c0             	movzx  eax,ax
c001c0a7:	3d 00 03 00 00       	cmp    eax,0x300
c001c0ac:	75 12                	jne    c001c0c0 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c0ae:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001c0b1:	83 f0 01             	xor    eax,0x1
c001c0b4:	0f b6 c0             	movzx  eax,al
c001c0b7:	85 c0                	test   eax,eax
c001c0b9:	74 05                	je     c001c0c0 <sendKeyboardToken(KeyboardToken)+0x4e7>
c001c0bb:	e8 8b ac ff ff       	call   c0016d4b <doTerminalCycle()>
c001c0c0:	90                   	nop
c001c0c1:	c9                   	leave  
c001c0c2:	c3                   	ret    

c001c0c3 <clearInternalKeybuffer(VgaText*)>:
c001c0c3:	55                   	push   ebp
c001c0c4:	89 e5                	mov    ebp,esp
c001c0c6:	83 ec 08             	sub    esp,0x8
c001c0c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c0cc:	05 02 01 00 00       	add    eax,0x102
c001c0d1:	83 ec 0c             	sub    esp,0xc
c001c0d4:	50                   	push   eax
c001c0d5:	e8 96 44 fe ff       	call   c0000570 <strlen>
c001c0da:	83 c4 10             	add    esp,0x10
c001c0dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c0e0:	81 c2 02 01 00 00    	add    edx,0x102
c001c0e6:	83 ec 04             	sub    esp,0x4
c001c0e9:	50                   	push   eax
c001c0ea:	6a 00                	push   0x0
c001c0ec:	52                   	push   edx
c001c0ed:	e8 fe 43 fe ff       	call   c00004f0 <memset>
c001c0f2:	83 c4 10             	add    esp,0x10
c001c0f5:	90                   	nop
c001c0f6:	c9                   	leave  
c001c0f7:	c3                   	ret    

c001c0f8 <readKeyboard(VgaText*, char*, unsigned long)>:
c001c0f8:	55                   	push   ebp
c001c0f9:	89 e5                	mov    ebp,esp
c001c0fb:	83 ec 18             	sub    esp,0x18
c001c0fe:	a1 28 ef 03 c0       	mov    eax,ds:0xc003ef28
c001c103:	85 c0                	test   eax,eax
c001c105:	74 2a                	je     c001c131 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001c107:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001c10d:	8b 0d 28 ef 03 c0    	mov    ecx,DWORD PTR ds:0xc003ef28
c001c113:	83 ec 04             	sub    esp,0x4
c001c116:	68 40 ef 03 c0       	push   0xc003ef40
c001c11b:	83 ec 08             	sub    esp,0x8
c001c11e:	89 e2                	mov    edx,esp
c001c120:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001c123:	89 02                	mov    DWORD PTR [edx],eax
c001c125:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001c128:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001c12c:	ff d1                	call   ecx
c001c12e:	83 c4 10             	add    esp,0x10
c001c131:	fb                   	sti    
c001c132:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001c139:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001c13d:	0f 84 0d 01 00 00    	je     c001c250 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c001c143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c146:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c14c:	0f be c0             	movsx  eax,al
c001c14f:	85 c0                	test   eax,eax
c001c151:	75 2c                	jne    c001c17f <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c001c153:	fa                   	cli    
c001c154:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c159:	83 c0 01             	add    eax,0x1
c001c15c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c161:	e8 1e 90 00 00       	call   c0025184 <schedule()>
c001c166:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c16b:	83 e8 01             	sub    eax,0x1
c001c16e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001c173:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001c178:	85 c0                	test   eax,eax
c001c17a:	75 c7                	jne    c001c143 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c17c:	fb                   	sti    
c001c17d:	eb c4                	jmp    c001c143 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c001c17f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c182:	8d 50 01             	lea    edx,[eax+0x1]
c001c185:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c188:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c18b:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c001c191:	88 10                	mov    BYTE PTR [eax],dl
c001c193:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c196:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c001c19c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001c19f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c1a3:	83 f8 03             	cmp    eax,0x3
c001c1a6:	75 1e                	jne    c001c1c6 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c001c1a8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c1ad:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c1b2:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c1b8:	83 ec 08             	sub    esp,0x8
c001c1bb:	6a 02                	push   0x2
c001c1bd:	50                   	push   eax
c001c1be:	e8 9c 48 00 00       	call   c0020a5f <KeRaiseSignal(SigHandlerBlock*, int)>
c001c1c3:	83 c4 10             	add    esp,0x10
c001c1c6:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c1ca:	83 f8 1c             	cmp    eax,0x1c
c001c1cd:	75 1e                	jne    c001c1ed <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c001c1cf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001c1d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1d6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001c1d9:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c001c1df:	83 ec 08             	sub    esp,0x8
c001c1e2:	6a 09                	push   0x9
c001c1e4:	50                   	push   eax
c001c1e5:	e8 75 48 00 00       	call   c0020a5f <KeRaiseSignal(SigHandlerBlock*, int)>
c001c1ea:	83 c4 10             	add    esp,0x10
c001c1ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c1f0:	05 02 01 00 00       	add    eax,0x102
c001c1f5:	83 ec 0c             	sub    esp,0xc
c001c1f8:	50                   	push   eax
c001c1f9:	e8 72 43 fe ff       	call   c0000570 <strlen>
c001c1fe:	83 c4 10             	add    esp,0x10
c001c201:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c204:	81 c2 02 01 00 00    	add    edx,0x102
c001c20a:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c20d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001c210:	81 c2 02 01 00 00    	add    edx,0x102
c001c216:	83 ec 04             	sub    esp,0x4
c001c219:	50                   	push   eax
c001c21a:	51                   	push   ecx
c001c21b:	52                   	push   edx
c001c21c:	e8 af 41 fe ff       	call   c00003d0 <memmove>
c001c221:	83 c4 10             	add    esp,0x10
c001c224:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c001c228:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c001c22c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c230:	83 f8 0a             	cmp    eax,0xa
c001c233:	74 16                	je     c001c24b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c235:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c239:	83 f8 03             	cmp    eax,0x3
c001c23c:	74 0d                	je     c001c24b <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c001c23e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c001c242:	83 f8 1c             	cmp    eax,0x1c
c001c245:	0f 85 ee fe ff ff    	jne    c001c139 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001c24b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c24e:	eb 03                	jmp    c001c253 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c001c250:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001c253:	c9                   	leave  
c001c254:	c3                   	ret    
c001c255:	90                   	nop

c001c256 <Keyboard::Keyboard(char const*)>:
c001c256:	83 ec 0c             	sub    esp,0xc
c001c259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c25d:	83 ec 08             	sub    esp,0x8
c001c260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c264:	50                   	push   eax
c001c265:	e8 06 f1 ff ff       	call   c001b370 <Device::Device(char const*)>
c001c26a:	83 c4 10             	add    esp,0x10
c001c26d:	ba a8 1f 03 c0       	mov    edx,0xc0031fa8
c001c272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c276:	89 10                	mov    DWORD PTR [eax],edx
c001c278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c27c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001c286:	c6 05 24 ef 03 c0 01 	mov    BYTE PTR ds:0xc003ef24,0x1
c001c28d:	90                   	nop
c001c28e:	83 c4 0c             	add    esp,0xc
c001c291:	c3                   	ret    

c001c292 <Keyboard::~Keyboard()>:
c001c292:	83 ec 0c             	sub    esp,0xc
c001c295:	ba a8 1f 03 c0       	mov    edx,0xc0031fa8
c001c29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c29e:	89 10                	mov    DWORD PTR [eax],edx
c001c2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2a4:	83 ec 0c             	sub    esp,0xc
c001c2a7:	50                   	push   eax
c001c2a8:	e8 63 ee ff ff       	call   c001b110 <Device::~Device()>
c001c2ad:	83 c4 10             	add    esp,0x10
c001c2b0:	90                   	nop
c001c2b1:	83 c4 0c             	add    esp,0xc
c001c2b4:	c3                   	ret    
c001c2b5:	90                   	nop

c001c2b6 <Keyboard::~Keyboard()>:
c001c2b6:	83 ec 0c             	sub    esp,0xc
c001c2b9:	83 ec 0c             	sub    esp,0xc
c001c2bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2c0:	e8 cd ff ff ff       	call   c001c292 <Keyboard::~Keyboard()>
c001c2c5:	83 c4 10             	add    esp,0x10
c001c2c8:	83 ec 08             	sub    esp,0x8
c001c2cb:	68 5c 01 00 00       	push   0x15c
c001c2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2d4:	e8 87 cd ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001c2d9:	83 c4 10             	add    esp,0x10
c001c2dc:	83 c4 0c             	add    esp,0xc
c001c2df:	c3                   	ret    

c001c2e0 <LogicalDisk::close(int, int, void*)>:
c001c2e0:	83 c8 ff             	or     eax,0xffffffff
c001c2e3:	c3                   	ret    

c001c2e4 <LogicalDisk::~LogicalDisk()>:
c001c2e4:	83 ec 0c             	sub    esp,0xc
c001c2e7:	ba 20 20 03 c0       	mov    edx,0xc0032020
c001c2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f0:	89 10                	mov    DWORD PTR [eax],edx
c001c2f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f6:	83 ec 0c             	sub    esp,0xc
c001c2f9:	50                   	push   eax
c001c2fa:	e8 11 ee ff ff       	call   c001b110 <Device::~Device()>
c001c2ff:	83 c4 10             	add    esp,0x10
c001c302:	90                   	nop
c001c303:	83 c4 0c             	add    esp,0xc
c001c306:	c3                   	ret    
c001c307:	90                   	nop

c001c308 <LogicalDisk::~LogicalDisk()>:
c001c308:	83 ec 0c             	sub    esp,0xc
c001c30b:	83 ec 0c             	sub    esp,0xc
c001c30e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c312:	e8 cd ff ff ff       	call   c001c2e4 <LogicalDisk::~LogicalDisk()>
c001c317:	83 c4 10             	add    esp,0x10
c001c31a:	83 ec 08             	sub    esp,0x8
c001c31d:	68 78 01 00 00       	push   0x178
c001c322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c326:	e8 35 cd ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001c32b:	83 c4 10             	add    esp,0x10
c001c32e:	83 c4 0c             	add    esp,0xc
c001c331:	c3                   	ret    

c001c332 <LogicalDisk::open(int, int, void*)>:
c001c332:	83 ec 18             	sub    esp,0x18
c001c335:	68 d4 1f 03 c0       	push   0xc0031fd4
c001c33a:	e8 67 3e 00 00       	call   c00201a6 <KePanic(char const*)>
c001c33f:	83 c8 ff             	or     eax,0xffffffff
c001c342:	83 c4 1c             	add    esp,0x1c
c001c345:	c3                   	ret    

c001c346 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c001c346:	53                   	push   ebx
c001c347:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c34b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c34f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c353:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001c359:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001c35f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001c365:	77 10                	ja     c001c377 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001c367:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001c36d:	89 d3                	mov    ebx,edx
c001c36f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001c375:	72 05                	jb     c001c37c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001c377:	83 c8 ff             	or     eax,0xffffffff
c001c37a:	89 c2                	mov    edx,eax
c001c37c:	5b                   	pop    ebx
c001c37d:	c3                   	ret    

c001c37e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001c37e:	56                   	push   esi
c001c37f:	83 c8 ff             	or     eax,0xffffffff
c001c382:	53                   	push   ebx
c001c383:	89 c2                	mov    edx,eax
c001c385:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c389:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001c38d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c391:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c397:	77 27                	ja     c001c3c0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c399:	89 d8                	mov    eax,ebx
c001c39b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001c3a1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001c3a7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c3ac:	89 c2                	mov    edx,eax
c001c3ae:	73 10                	jae    c001c3c0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001c3b0:	89 c8                	mov    eax,ecx
c001c3b2:	89 da                	mov    edx,ebx
c001c3b4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c3ba:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001c3c0:	5b                   	pop    ebx
c001c3c1:	5e                   	pop    esi
c001c3c2:	c3                   	ret    
c001c3c3:	90                   	nop

c001c3c4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c3c4:	83 ec 1c             	sub    esp,0x1c
c001c3c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c3cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c3d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c3db:	89 04 24             	mov    DWORD PTR [esp],eax
c001c3de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c3e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c3ea:	83 ec 08             	sub    esp,0x8
c001c3ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c3f1:	50                   	push   eax
c001c3f2:	e8 79 ef ff ff       	call   c001b370 <Device::Device(char const*)>
c001c3f7:	83 c4 10             	add    esp,0x10
c001c3fa:	ba 20 20 03 c0       	mov    edx,0xc0032020
c001c3ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c403:	89 10                	mov    DWORD PTR [eax],edx
c001c405:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c409:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c410:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c414:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c41b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c41f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001c426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c42a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001c434:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c43c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c440:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001c446:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001c44c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c450:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c453:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c457:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001c45d:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001c463:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c467:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c46b:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001c471:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c475:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c47f:	90                   	nop
c001c480:	83 c4 1c             	add    esp,0x1c
c001c483:	c3                   	ret    

c001c484 <LogicalDisk::assignDriveLetter()>:
c001c484:	55                   	push   ebp
c001c485:	57                   	push   edi
c001c486:	56                   	push   esi
c001c487:	53                   	push   ebx
c001c488:	83 ec 14             	sub    esp,0x14
c001c48b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c48f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001c495:	b0 41                	mov    al,0x41
c001c497:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c001c49d:	84 d2                	test   dl,dl
c001c49f:	75 02                	jne    c001c4a3 <LogicalDisk::assignDriveLetter()+0x1f>
c001c4a1:	b0 43                	mov    al,0x43
c001c4a3:	8b 3d 60 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f360
c001c4a9:	0f b6 ca             	movzx  ecx,dl
c001c4ac:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c4b0:	0f be e8             	movsx  ebp,al
c001c4b3:	8b 3d 64 f3 03 c0    	mov    edi,DWORD PTR ds:0xc003f364
c001c4b9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c4bd:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001c4c1:	3c 43                	cmp    al,0x43
c001c4c3:	75 10                	jne    c001c4d5 <LogicalDisk::assignDriveLetter()+0x51>
c001c4c5:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001c4cc:	75 5a                	jne    c001c528 <LogicalDisk::assignDriveLetter()+0xa4>
c001c4ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c4d3:	75 53                	jne    c001c528 <LogicalDisk::assignDriveLetter()+0xa4>
c001c4d5:	8d 75 bf             	lea    esi,[ebp-0x41]
c001c4d8:	ba 01 00 00 00       	mov    edx,0x1
c001c4dd:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4e0:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001c4e3:	d3 e2                	shl    edx,cl
c001c4e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c4e9:	89 d7                	mov    edi,edx
c001c4eb:	89 d6                	mov    esi,edx
c001c4ed:	c1 ff 1f             	sar    edi,0x1f
c001c4f0:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c001c4f4:	21 f9                	and    ecx,edi
c001c4f6:	09 d1                	or     ecx,edx
c001c4f8:	75 2e                	jne    c001c528 <LogicalDisk::assignDriveLetter()+0xa4>
c001c4fa:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c4fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c502:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001c508:	09 f2                	or     edx,esi
c001c50a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c50d:	89 15 60 f3 03 c0    	mov    DWORD PTR ds:0xc003f360,edx
c001c513:	89 1c b5 80 f3 03 c0 	mov    DWORD PTR [esi*4-0x3ffc0c80],ebx
c001c51a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c51e:	09 fa                	or     edx,edi
c001c520:	89 15 64 f3 03 c0    	mov    DWORD PTR ds:0xc003f364,edx
c001c526:	eb 0d                	jmp    c001c535 <LogicalDisk::assignDriveLetter()+0xb1>
c001c528:	8d 50 01             	lea    edx,[eax+0x1]
c001c52b:	45                   	inc    ebp
c001c52c:	88 d0                	mov    al,dl
c001c52e:	80 fa 5b             	cmp    dl,0x5b
c001c531:	75 8e                	jne    c001c4c1 <LogicalDisk::assignDriveLetter()+0x3d>
c001c533:	31 c0                	xor    eax,eax
c001c535:	83 c4 14             	add    esp,0x14
c001c538:	5b                   	pop    ebx
c001c539:	5e                   	pop    esi
c001c53a:	5f                   	pop    edi
c001c53b:	5d                   	pop    ebp
c001c53c:	c3                   	ret    
c001c53d:	90                   	nop

c001c53e <LogicalDisk::mount()>:
c001c53e:	56                   	push   esi
c001c53f:	53                   	push   ebx
c001c540:	53                   	push   ebx
c001c541:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c545:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c001c54b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c001c555:	85 db                	test   ebx,ebx
c001c557:	74 27                	je     c001c580 <LogicalDisk::mount()+0x42>
c001c559:	51                   	push   ecx
c001c55a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001c561:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c563:	83 e8 41             	sub    eax,0x41
c001c566:	50                   	push   eax
c001c567:	56                   	push   esi
c001c568:	53                   	push   ebx
c001c569:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001c56c:	83 c4 10             	add    esp,0x10
c001c56f:	84 c0                	test   al,al
c001c571:	74 08                	je     c001c57b <LogicalDisk::mount()+0x3d>
c001c573:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c001c579:	eb 07                	jmp    c001c582 <LogicalDisk::mount()+0x44>
c001c57b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001c57e:	eb d5                	jmp    c001c555 <LogicalDisk::mount()+0x17>
c001c580:	31 c0                	xor    eax,eax
c001c582:	5a                   	pop    edx
c001c583:	5b                   	pop    ebx
c001c584:	5e                   	pop    esi
c001c585:	c3                   	ret    

c001c586 <LogicalDisk::unmount()>:
c001c586:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c58a:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c001c594:	c3                   	ret    
c001c595:	90                   	nop

c001c596 <LogicalDisk::eject()>:
c001c596:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c59a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001c5a0:	8b 10                	mov    edx,DWORD PTR [eax]
c001c5a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c5a6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001c5a9:	90                   	nop

c001c5aa <LogicalDisk::unassignDriveLetter()>:
c001c5aa:	57                   	push   edi
c001c5ab:	56                   	push   esi
c001c5ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c5b0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001c5b7:	85 c9                	test   ecx,ecx
c001c5b9:	75 0f                	jne    c001c5ca <LogicalDisk::unassignDriveLetter()+0x20>
c001c5bb:	c7 44 24 0c f8 1f 03 c0 	mov    DWORD PTR [esp+0xc],0xc0031ff8
c001c5c3:	5e                   	pop    esi
c001c5c4:	5f                   	pop    edi
c001c5c5:	e9 dc 3b 00 00       	jmp    c00201a6 <KePanic(char const*)>
c001c5ca:	83 e9 41             	sub    ecx,0x41
c001c5cd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c001c5d4:	b8 01 00 00 00       	mov    eax,0x1
c001c5d9:	c7 04 8d 80 f3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc0c80],0x0
c001c5e4:	d3 e0                	shl    eax,cl
c001c5e6:	89 c7                	mov    edi,eax
c001c5e8:	f7 d0                	not    eax
c001c5ea:	c1 ff 1f             	sar    edi,0x1f
c001c5ed:	21 05 60 f3 03 c0    	and    DWORD PTR ds:0xc003f360,eax
c001c5f3:	89 fe                	mov    esi,edi
c001c5f5:	f7 d6                	not    esi
c001c5f7:	21 35 64 f3 03 c0    	and    DWORD PTR ds:0xc003f364,esi
c001c5fd:	5e                   	pop    esi
c001c5fe:	5f                   	pop    edi
c001c5ff:	c3                   	ret    

c001c600 <LogicalDisk::read(unsigned long long, int, void*)>:
c001c600:	57                   	push   edi
c001c601:	56                   	push   esi
c001c602:	53                   	push   ebx
c001c603:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c607:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c60b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c60f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c613:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c619:	77 41                	ja     c001c65c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001c61b:	99                   	cdq    
c001c61c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c622:	01 c8                	add    eax,ecx
c001c624:	11 da                	adc    edx,ebx
c001c626:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c62c:	19 d7                	sbb    edi,edx
c001c62e:	72 33                	jb     c001c663 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001c630:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c636:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c63c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c640:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c644:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c64a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c654:	5b                   	pop    ebx
c001c655:	5e                   	pop    esi
c001c656:	5f                   	pop    edi
c001c657:	e9 c8 0a 00 00       	jmp    c001d124 <VCache::read(unsigned long long, int, void*)>
c001c65c:	b8 05 00 00 00       	mov    eax,0x5
c001c661:	eb 05                	jmp    c001c668 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001c663:	b8 07 00 00 00       	mov    eax,0x7
c001c668:	5b                   	pop    ebx
c001c669:	5e                   	pop    esi
c001c66a:	5f                   	pop    edi
c001c66b:	c3                   	ret    

c001c66c <LogicalDisk::write(unsigned long long, int, void*)>:
c001c66c:	57                   	push   edi
c001c66d:	56                   	push   esi
c001c66e:	53                   	push   ebx
c001c66f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c673:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c677:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c67b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c67f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001c685:	77 41                	ja     c001c6c8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001c687:	99                   	cdq    
c001c688:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001c68e:	01 c8                	add    eax,ecx
c001c690:	11 da                	adc    edx,ebx
c001c692:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001c698:	19 d7                	sbb    edi,edx
c001c69a:	72 33                	jb     c001c6cf <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001c69c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001c6a2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001c6a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c6ac:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c6b0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001c6b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c6c0:	5b                   	pop    ebx
c001c6c1:	5e                   	pop    esi
c001c6c2:	5f                   	pop    edi
c001c6c3:	e9 68 09 00 00       	jmp    c001d030 <VCache::write(unsigned long long, int, void*)>
c001c6c8:	b8 05 00 00 00       	mov    eax,0x5
c001c6cd:	eb 05                	jmp    c001c6d4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001c6cf:	b8 07 00 00 00       	mov    eax,0x7
c001c6d4:	5b                   	pop    ebx
c001c6d5:	5e                   	pop    esi
c001c6d6:	5f                   	pop    edi
c001c6d7:	c3                   	ret    

c001c6d8 <Mouse::Mouse(char const*)>:
c001c6d8:	83 ec 0c             	sub    esp,0xc
c001c6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6df:	83 ec 08             	sub    esp,0x8
c001c6e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6e6:	50                   	push   eax
c001c6e7:	e8 84 ec ff ff       	call   c001b370 <Device::Device(char const*)>
c001c6ec:	83 c4 10             	add    esp,0x10
c001c6ef:	ba 4c 20 03 c0       	mov    edx,0xc003204c
c001c6f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f8:	89 10                	mov    DWORD PTR [eax],edx
c001c6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6fe:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001c708:	90                   	nop
c001c709:	83 c4 0c             	add    esp,0xc
c001c70c:	c3                   	ret    
c001c70d:	90                   	nop
c001c70e:	66 90                	xchg   ax,ax

c001c710 <Mouse::~Mouse()>:
c001c710:	83 ec 0c             	sub    esp,0xc
c001c713:	ba 4c 20 03 c0       	mov    edx,0xc003204c
c001c718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71c:	89 10                	mov    DWORD PTR [eax],edx
c001c71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c722:	83 ec 0c             	sub    esp,0xc
c001c725:	50                   	push   eax
c001c726:	e8 e5 e9 ff ff       	call   c001b110 <Device::~Device()>
c001c72b:	83 c4 10             	add    esp,0x10
c001c72e:	90                   	nop
c001c72f:	83 c4 0c             	add    esp,0xc
c001c732:	c3                   	ret    
c001c733:	90                   	nop

c001c734 <Mouse::~Mouse()>:
c001c734:	83 ec 0c             	sub    esp,0xc
c001c737:	83 ec 0c             	sub    esp,0xc
c001c73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c73e:	e8 cd ff ff ff       	call   c001c710 <Mouse::~Mouse()>
c001c743:	83 c4 10             	add    esp,0x10
c001c746:	83 ec 08             	sub    esp,0x8
c001c749:	68 58 01 00 00       	push   0x158
c001c74e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c752:	e8 09 c9 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001c757:	83 c4 10             	add    esp,0x10
c001c75a:	83 c4 0c             	add    esp,0xc
c001c75d:	c3                   	ret    

c001c75e <NIC::getMAC()>:
c001c75e:	31 c0                	xor    eax,eax
c001c760:	31 d2                	xor    edx,edx
c001c762:	c3                   	ret    
c001c763:	90                   	nop

c001c764 <NIC::write(int, unsigned char*, int*)>:
c001c764:	b8 01 00 00 00       	mov    eax,0x1
c001c769:	c3                   	ret    

c001c76a <NIC::NIC(char const*)>:
c001c76a:	83 ec 0c             	sub    esp,0xc
c001c76d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c771:	83 ec 08             	sub    esp,0x8
c001c774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c778:	50                   	push   eax
c001c779:	e8 f2 eb ff ff       	call   c001b370 <Device::Device(char const*)>
c001c77e:	83 c4 10             	add    esp,0x10
c001c781:	ba 78 20 03 c0       	mov    edx,0xc0032078
c001c786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78a:	89 10                	mov    DWORD PTR [eax],edx
c001c78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c790:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001c79a:	90                   	nop
c001c79b:	83 c4 0c             	add    esp,0xc
c001c79e:	c3                   	ret    
c001c79f:	90                   	nop

c001c7a0 <NIC::~NIC()>:
c001c7a0:	83 ec 0c             	sub    esp,0xc
c001c7a3:	ba 78 20 03 c0       	mov    edx,0xc0032078
c001c7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ac:	89 10                	mov    DWORD PTR [eax],edx
c001c7ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b2:	83 ec 0c             	sub    esp,0xc
c001c7b5:	50                   	push   eax
c001c7b6:	e8 55 e9 ff ff       	call   c001b110 <Device::~Device()>
c001c7bb:	83 c4 10             	add    esp,0x10
c001c7be:	90                   	nop
c001c7bf:	83 c4 0c             	add    esp,0xc
c001c7c2:	c3                   	ret    
c001c7c3:	90                   	nop

c001c7c4 <NIC::~NIC()>:
c001c7c4:	83 ec 0c             	sub    esp,0xc
c001c7c7:	83 ec 0c             	sub    esp,0xc
c001c7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ce:	e8 cd ff ff ff       	call   c001c7a0 <NIC::~NIC()>
c001c7d3:	83 c4 10             	add    esp,0x10
c001c7d6:	83 ec 08             	sub    esp,0x8
c001c7d9:	68 58 01 00 00       	push   0x158
c001c7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7e2:	e8 79 c8 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001c7e7:	83 c4 10             	add    esp,0x10
c001c7ea:	83 c4 0c             	add    esp,0xc
c001c7ed:	c3                   	ret    

c001c7ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001c7ee:	55                   	push   ebp
c001c7ef:	57                   	push   edi
c001c7f0:	56                   	push   esi
c001c7f1:	53                   	push   ebx
c001c7f2:	81 ec 28 01 00 00    	sub    esp,0x128
c001c7f8:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c7ff:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001c806:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001c80d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001c814:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c818:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c81c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c823:	e8 44 ec ff ff       	call   c001b46c <Device::getName()>
c001c828:	5a                   	pop    edx
c001c829:	59                   	pop    ecx
c001c82a:	50                   	push   eax
c001c82b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001c82f:	55                   	push   ebp
c001c830:	e8 0b 3e fe ff       	call   c0000640 <strcpy>
c001c835:	5b                   	pop    ebx
c001c836:	58                   	pop    eax
c001c837:	68 a4 20 03 c0       	push   0xc00320a4
c001c83c:	55                   	push   ebp
c001c83d:	e8 fe 3f fe ff       	call   c0000840 <strcat>
c001c842:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c001c849:	e8 b0 9a ff ff       	call   c00162fe <malloc>
c001c84e:	83 c4 0c             	add    esp,0xc
c001c851:	89 c3                	mov    ebx,eax
c001c853:	57                   	push   edi
c001c854:	56                   	push   esi
c001c855:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c859:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c85d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c864:	55                   	push   ebp
c001c865:	50                   	push   eax
c001c866:	e8 59 fb ff ff       	call   c001c3c4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001c86b:	83 c4 14             	add    esp,0x14
c001c86e:	53                   	push   ebx
c001c86f:	e8 10 fc ff ff       	call   c001c484 <LogicalDisk::assignDriveLetter()>
c001c874:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c877:	e8 c2 fc ff ff       	call   c001c53e <LogicalDisk::mount()>
c001c87c:	58                   	pop    eax
c001c87d:	5a                   	pop    edx
c001c87e:	53                   	push   ebx
c001c87f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c886:	e8 83 e9 ff ff       	call   c001b20e <Device::addChild(Device*)>
c001c88b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c891:	5b                   	pop    ebx
c001c892:	5e                   	pop    esi
c001c893:	5f                   	pop    edi
c001c894:	5d                   	pop    ebp
c001c895:	c3                   	ret    

c001c896 <createPartitionsForDisk(PhysicalDisk*)>:
c001c896:	55                   	push   ebp
c001c897:	57                   	push   edi
c001c898:	56                   	push   esi
c001c899:	53                   	push   ebx
c001c89a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001c8a0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001c8a7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c8ad:	3d 00 02 00 00       	cmp    eax,0x200
c001c8b2:	74 27                	je     c001c8db <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001c8b4:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001c8ba:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001c8c0:	83 ec 10             	sub    esp,0x10
c001c8c3:	0f a4 f7 0a          	shld   edi,esi,0xa
c001c8c7:	99                   	cdq    
c001c8c8:	c1 e6 0a             	shl    esi,0xa
c001c8cb:	52                   	push   edx
c001c8cc:	89 fd                	mov    ebp,edi
c001c8ce:	50                   	push   eax
c001c8cf:	55                   	push   ebp
c001c8d0:	56                   	push   esi
c001c8d1:	e8 aa 1c 01 00       	call   c002e580 <__udivdi3>
c001c8d6:	e9 b9 00 00 00       	jmp    c001c994 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c8db:	83 ec 0c             	sub    esp,0xc
c001c8de:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c8e0:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001c8e4:	56                   	push   esi
c001c8e5:	6a 01                	push   0x1
c001c8e7:	6a 00                	push   0x0
c001c8e9:	6a 00                	push   0x0
c001c8eb:	53                   	push   ebx
c001c8ec:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c8ef:	83 c4 20             	add    esp,0x20
c001c8f2:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001c8fa:	75 0a                	jne    c001c906 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c001c8fc:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001c904:	74 2c                	je     c001c932 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001c906:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c90c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c912:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c918:	83 ec 10             	sub    esp,0x10
c001c91b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c91f:	89 f7                	mov    edi,esi
c001c921:	c1 e0 0a             	shl    eax,0xa
c001c924:	c1 ff 1f             	sar    edi,0x1f
c001c927:	57                   	push   edi
c001c928:	56                   	push   esi
c001c929:	52                   	push   edx
c001c92a:	50                   	push   eax
c001c92b:	e8 50 1c 01 00       	call   c002e580 <__udivdi3>
c001c930:	eb 62                	jmp    c001c994 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c001c932:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001c939:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c001c940:	89 cf                	mov    edi,ecx
c001c942:	83 e2 7f             	and    edx,0x7f
c001c945:	83 e7 7f             	and    edi,0x7f
c001c948:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001c94f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c001c952:	83 e0 7f             	and    eax,0x7f
c001c955:	8d 14 01             	lea    edx,[ecx+eax*1]
c001c958:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c001c95f:	83 e0 7f             	and    eax,0x7f
c001c962:	01 d0                	add    eax,edx
c001c964:	89 c5                	mov    ebp,eax
c001c966:	84 c0                	test   al,al
c001c968:	74 41                	je     c001c9ab <createPartitionsForDisk(PhysicalDisk*)+0x115>
c001c96a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001c970:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001c976:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c97c:	83 ec 10             	sub    esp,0x10
c001c97f:	0f a4 c2 0a          	shld   edx,eax,0xa
c001c983:	89 f7                	mov    edi,esi
c001c985:	c1 e0 0a             	shl    eax,0xa
c001c988:	c1 ff 1f             	sar    edi,0x1f
c001c98b:	57                   	push   edi
c001c98c:	56                   	push   esi
c001c98d:	52                   	push   edx
c001c98e:	50                   	push   eax
c001c98f:	e8 ec 1b 01 00       	call   c002e580 <__udivdi3>
c001c994:	83 c4 14             	add    esp,0x14
c001c997:	52                   	push   edx
c001c998:	50                   	push   eax
c001c999:	6a 00                	push   0x0
c001c99b:	6a 00                	push   0x0
c001c99d:	53                   	push   ebx
c001c99e:	e8 4b fe ff ff       	call   c001c7ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001c9a3:	83 c4 20             	add    esp,0x20
c001c9a6:	e9 73 01 00 00       	jmp    c001cb1e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c001c9ab:	89 f0                	mov    eax,esi
c001c9ad:	31 c9                	xor    ecx,ecx
c001c9af:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001c9b6:	75 02                	jne    c001c9ba <createPartitionsForDisk(PhysicalDisk*)+0x124>
c001c9b8:	89 cd                	mov    ebp,ecx
c001c9ba:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001c9c1:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c001c9c8:	c1 e2 08             	shl    edx,0x8
c001c9cb:	c1 e6 10             	shl    esi,0x10
c001c9ce:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c001c9d6:	09 f2                	or     edx,esi
c001c9d8:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c001c9e0:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c001c9e7:	83 c0 10             	add    eax,0x10
c001c9ea:	09 f2                	or     edx,esi
c001c9ec:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c001c9f3:	c1 e6 18             	shl    esi,0x18
c001c9f6:	09 f2                	or     edx,esi
c001c9f8:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c001c9ff:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c001ca03:	c1 e6 10             	shl    esi,0x10
c001ca06:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001ca0d:	c1 e2 08             	shl    edx,0x8
c001ca10:	09 f2                	or     edx,esi
c001ca12:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c001ca19:	09 f2                	or     edx,esi
c001ca1b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c001ca22:	c1 e6 18             	shl    esi,0x18
c001ca25:	09 f2                	or     edx,esi
c001ca27:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c001ca2b:	41                   	inc    ecx
c001ca2c:	83 f9 04             	cmp    ecx,0x4
c001ca2f:	0f 85 7a ff ff ff    	jne    c001c9af <createPartitionsForDisk(PhysicalDisk*)+0x119>
c001ca35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca39:	83 f0 01             	xor    eax,0x1
c001ca3c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001ca40:	75 4f                	jne    c001ca91 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ca42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ca46:	83 f0 01             	xor    eax,0x1
c001ca49:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001ca4d:	75 42                	jne    c001ca91 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001ca4f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ca57:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca5f:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001ca65:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001ca6b:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ca71:	0f a4 c2 0a          	shld   edx,eax,0xa
c001ca75:	89 f7                	mov    edi,esi
c001ca77:	c1 e0 0a             	shl    eax,0xa
c001ca7a:	c1 ff 1f             	sar    edi,0x1f
c001ca7d:	57                   	push   edi
c001ca7e:	56                   	push   esi
c001ca7f:	52                   	push   edx
c001ca80:	50                   	push   eax
c001ca81:	e8 fa 1a 01 00       	call   c002e580 <__udivdi3>
c001ca86:	83 c4 10             	add    esp,0x10
c001ca89:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ca8d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ca91:	89 e8                	mov    eax,ebp
c001ca93:	0f b6 e8             	movzx  ebp,al
c001ca96:	85 ed                	test   ebp,ebp
c001ca98:	74 50                	je     c001caea <createPartitionsForDisk(PhysicalDisk*)+0x254>
c001ca9a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ca9e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001caa2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001caa6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001caaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001caae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cab2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cab6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001caba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cabe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001cac2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cac6:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c001caca:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c001cace:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001cad2:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001cad6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cada:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001cade:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c001cae2:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c001cae6:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c001caea:	31 ed                	xor    ebp,ebp
c001caec:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001caf0:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001caf4:	89 f8                	mov    eax,edi
c001caf6:	09 f0                	or     eax,esi
c001caf8:	74 1e                	je     c001cb18 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cafa:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c001cafe:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001cb02:	89 d1                	mov    ecx,edx
c001cb04:	09 c1                	or     ecx,eax
c001cb06:	74 10                	je     c001cb18 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c001cb08:	83 ec 0c             	sub    esp,0xc
c001cb0b:	57                   	push   edi
c001cb0c:	56                   	push   esi
c001cb0d:	52                   	push   edx
c001cb0e:	50                   	push   eax
c001cb0f:	53                   	push   ebx
c001cb10:	e8 d9 fc ff ff       	call   c001c7ee <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001cb15:	83 c4 20             	add    esp,0x20
c001cb18:	45                   	inc    ebp
c001cb19:	83 fd 04             	cmp    ebp,0x4
c001cb1c:	75 ce                	jne    c001caec <createPartitionsForDisk(PhysicalDisk*)+0x256>
c001cb1e:	81 c4 5c 02 00 00    	add    esp,0x25c
c001cb24:	5b                   	pop    ebx
c001cb25:	5e                   	pop    esi
c001cb26:	5f                   	pop    edi
c001cb27:	5d                   	pop    ebp
c001cb28:	c3                   	ret    
c001cb29:	66 90                	xchg   ax,ax
c001cb2b:	90                   	nop

c001cb2c <Serial::Serial(char const*)>:
c001cb2c:	83 ec 0c             	sub    esp,0xc
c001cb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb33:	83 ec 08             	sub    esp,0x8
c001cb36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb3a:	50                   	push   eax
c001cb3b:	e8 30 e8 ff ff       	call   c001b370 <Device::Device(char const*)>
c001cb40:	83 c4 10             	add    esp,0x10
c001cb43:	ba b8 20 03 c0       	mov    edx,0xc00320b8
c001cb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb4c:	89 10                	mov    DWORD PTR [eax],edx
c001cb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb52:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c001cb5c:	90                   	nop
c001cb5d:	83 c4 0c             	add    esp,0xc
c001cb60:	c3                   	ret    
c001cb61:	90                   	nop
c001cb62:	66 90                	xchg   ax,ax

c001cb64 <Serial::~Serial()>:
c001cb64:	83 ec 0c             	sub    esp,0xc
c001cb67:	ba b8 20 03 c0       	mov    edx,0xc00320b8
c001cb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb70:	89 10                	mov    DWORD PTR [eax],edx
c001cb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb76:	83 ec 0c             	sub    esp,0xc
c001cb79:	50                   	push   eax
c001cb7a:	e8 91 e5 ff ff       	call   c001b110 <Device::~Device()>
c001cb7f:	83 c4 10             	add    esp,0x10
c001cb82:	90                   	nop
c001cb83:	83 c4 0c             	add    esp,0xc
c001cb86:	c3                   	ret    
c001cb87:	90                   	nop

c001cb88 <Serial::~Serial()>:
c001cb88:	83 ec 0c             	sub    esp,0xc
c001cb8b:	83 ec 0c             	sub    esp,0xc
c001cb8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb92:	e8 cd ff ff ff       	call   c001cb64 <Serial::~Serial()>
c001cb97:	83 c4 10             	add    esp,0x10
c001cb9a:	83 ec 08             	sub    esp,0x8
c001cb9d:	68 58 01 00 00       	push   0x158
c001cba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cba6:	e8 b5 c4 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001cbab:	83 c4 10             	add    esp,0x10
c001cbae:	83 c4 0c             	add    esp,0xc
c001cbb1:	c3                   	ret    
c001cbb2:	66 90                	xchg   ax,ax

c001cbb4 <Timer::Timer(char const*)>:
c001cbb4:	83 ec 0c             	sub    esp,0xc
c001cbb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbbb:	83 ec 08             	sub    esp,0x8
c001cbbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbc2:	50                   	push   eax
c001cbc3:	e8 a8 e7 ff ff       	call   c001b370 <Device::Device(char const*)>
c001cbc8:	83 c4 10             	add    esp,0x10
c001cbcb:	ba fc 20 03 c0       	mov    edx,0xc00320fc
c001cbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd4:	89 10                	mov    DWORD PTR [eax],edx
c001cbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbda:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c001cbe4:	90                   	nop
c001cbe5:	83 c4 0c             	add    esp,0xc
c001cbe8:	c3                   	ret    
c001cbe9:	90                   	nop
c001cbea:	66 90                	xchg   ax,ax

c001cbec <Timer::~Timer()>:
c001cbec:	83 ec 0c             	sub    esp,0xc
c001cbef:	ba fc 20 03 c0       	mov    edx,0xc00320fc
c001cbf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf8:	89 10                	mov    DWORD PTR [eax],edx
c001cbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbfe:	83 ec 0c             	sub    esp,0xc
c001cc01:	50                   	push   eax
c001cc02:	e8 09 e5 ff ff       	call   c001b110 <Device::~Device()>
c001cc07:	83 c4 10             	add    esp,0x10
c001cc0a:	90                   	nop
c001cc0b:	83 c4 0c             	add    esp,0xc
c001cc0e:	c3                   	ret    
c001cc0f:	90                   	nop

c001cc10 <Timer::~Timer()>:
c001cc10:	83 ec 0c             	sub    esp,0xc
c001cc13:	83 ec 0c             	sub    esp,0xc
c001cc16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc1a:	e8 cd ff ff ff       	call   c001cbec <Timer::~Timer()>
c001cc1f:	83 c4 10             	add    esp,0x10
c001cc22:	83 ec 08             	sub    esp,0x8
c001cc25:	68 5c 01 00 00       	push   0x15c
c001cc2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc2e:	e8 2d c4 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001cc33:	83 c4 10             	add    esp,0x10
c001cc36:	83 c4 0c             	add    esp,0xc
c001cc39:	c3                   	ret    

c001cc3a <Timer::read()>:
c001cc3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cc3e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cc44:	c3                   	ret    

c001cc45 <setupTimer(int)>:
c001cc45:	53                   	push   ebx
c001cc46:	83 ec 14             	sub    esp,0x14
c001cc49:	68 5c 01 00 00       	push   0x15c
c001cc4e:	e8 ab 96 ff ff       	call   c00162fe <malloc>
c001cc53:	89 04 24             	mov    DWORD PTR [esp],eax
c001cc56:	89 c3                	mov    ebx,eax
c001cc58:	e8 ab 11 01 00       	call   c002de08 <PIT::PIT()>
c001cc5d:	58                   	pop    eax
c001cc5e:	5a                   	pop    edx
c001cc5f:	53                   	push   ebx
c001cc60:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001cc66:	e8 a3 e5 ff ff       	call   c001b20e <Device::addChild(Device*)>
c001cc6b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc6d:	6a 00                	push   0x0
c001cc6f:	6a 00                	push   0x0
c001cc71:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc75:	53                   	push   ebx
c001cc76:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cc79:	89 d8                	mov    eax,ebx
c001cc7b:	83 c4 28             	add    esp,0x28
c001cc7e:	5b                   	pop    ebx
c001cc7f:	c3                   	ret    

c001cc80 <timerHandler(unsigned int)>:
c001cc80:	57                   	push   edi
c001cc81:	56                   	push   esi
c001cc82:	53                   	push   ebx
c001cc83:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001cc87:	01 3d ec f3 03 c0    	add    DWORD PTR ds:0xc003f3ec,edi
c001cc8d:	80 3d c1 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c1,0x0
c001cc94:	0f 84 46 01 00 00    	je     c001cde0 <timerHandler(unsigned int)+0x160>
c001cc9a:	fa                   	cli    
c001cc9b:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cca1:	83 ec 0c             	sub    esp,0xc
c001cca4:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c001ccaa:	68 e0 01 04 c0       	push   0xc00401e0
c001ccaf:	e8 9c 1e 01 00       	call   c002eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ccb4:	83 c4 10             	add    esp,0x10
c001ccb7:	84 c0                	test   al,al
c001ccb9:	0f 85 a1 00 00 00    	jne    c001cd60 <timerHandler(unsigned int)+0xe0>
c001ccbf:	83 ec 0c             	sub    esp,0xc
c001ccc2:	68 e0 01 04 c0       	push   0xc00401e0
c001ccc7:	e8 a0 1e 01 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cccc:	83 c4 10             	add    esp,0x10
c001cccf:	89 c6                	mov    esi,eax
c001ccd1:	8d 76 00             	lea    esi,[esi+0x0]
c001ccd4:	83 ec 0c             	sub    esp,0xc
c001ccd7:	68 e0 01 04 c0       	push   0xc00401e0
c001ccdc:	e8 8b 1e 01 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cce1:	c7 04 24 e0 01 04 c0 	mov    DWORD PTR [esp],0xc00401e0
c001cce8:	89 c3                	mov    ebx,eax
c001ccea:	e8 85 1e 01 00       	call   c002eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ccef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ccf2:	83 c4 10             	add    esp,0x10
c001ccf5:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c001ccfb:	77 23                	ja     c001cd20 <timerHandler(unsigned int)+0xa0>
c001ccfd:	83 ec 0c             	sub    esp,0xc
c001cd00:	53                   	push   ebx
c001cd01:	e8 76 87 00 00       	call   c002547c <unblockTask(ThreadControlBlock*)>
c001cd06:	83 c4 10             	add    esp,0x10
c001cd09:	39 de                	cmp    esi,ebx
c001cd0b:	75 27                	jne    c001cd34 <timerHandler(unsigned int)+0xb4>
c001cd0d:	83 ec 0c             	sub    esp,0xc
c001cd10:	68 e0 01 04 c0       	push   0xc00401e0
c001cd15:	e8 52 1e 01 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd1a:	89 c6                	mov    esi,eax
c001cd1c:	eb 12                	jmp    c001cd30 <timerHandler(unsigned int)+0xb0>
c001cd1e:	66 90                	xchg   ax,ax
c001cd20:	50                   	push   eax
c001cd21:	50                   	push   eax
c001cd22:	53                   	push   ebx
c001cd23:	68 e0 01 04 c0       	push   0xc00401e0
c001cd28:	e8 03 1f 01 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cd2d:	8d 76 00             	lea    esi,[esi+0x0]
c001cd30:	83 c4 10             	add    esp,0x10
c001cd33:	90                   	nop
c001cd34:	83 ec 0c             	sub    esp,0xc
c001cd37:	68 e0 01 04 c0       	push   0xc00401e0
c001cd3c:	e8 0f 1e 01 00       	call   c002eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cd41:	83 c4 10             	add    esp,0x10
c001cd44:	84 c0                	test   al,al
c001cd46:	75 18                	jne    c001cd60 <timerHandler(unsigned int)+0xe0>
c001cd48:	83 ec 0c             	sub    esp,0xc
c001cd4b:	68 e0 01 04 c0       	push   0xc00401e0
c001cd50:	e8 17 1e 01 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001cd55:	83 c4 10             	add    esp,0x10
c001cd58:	39 f0                	cmp    eax,esi
c001cd5a:	0f 85 74 ff ff ff    	jne    c001ccd4 <timerHandler(unsigned int)+0x54>
c001cd60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd65:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c001cd69:	74 3d                	je     c001cda8 <timerHandler(unsigned int)+0x128>
c001cd6b:	80 3d c0 a9 03 c0 00 	cmp    BYTE PTR ds:0xc003a9c0,0x0
c001cd72:	74 34                	je     c001cda8 <timerHandler(unsigned int)+0x128>
c001cd74:	fa                   	cli    
c001cd75:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c001cd7b:	8b 15 ec f3 03 c0    	mov    edx,DWORD PTR ds:0xc003f3ec
c001cd81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd86:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c001cd89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd8e:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c001cd91:	77 05                	ja     c001cd98 <timerHandler(unsigned int)+0x118>
c001cd93:	e8 ec 83 00 00       	call   c0025184 <schedule()>
c001cd98:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cd9d:	48                   	dec    eax
c001cd9e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001cda3:	75 03                	jne    c001cda8 <timerHandler(unsigned int)+0x128>
c001cda5:	fb                   	sti    
c001cda6:	66 90                	xchg   ax,ax
c001cda8:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c001cdad:	48                   	dec    eax
c001cdae:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c001cdb3:	75 1b                	jne    c001cdd0 <timerHandler(unsigned int)+0x150>
c001cdb5:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c001cdbc:	74 12                	je     c001cdd0 <timerHandler(unsigned int)+0x150>
c001cdbe:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c001cdc8:	e8 b7 83 00 00       	call   c0025184 <schedule()>
c001cdcd:	8d 76 00             	lea    esi,[esi+0x0]
c001cdd0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001cdd5:	48                   	dec    eax
c001cdd6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001cddb:	75 03                	jne    c001cde0 <timerHandler(unsigned int)+0x160>
c001cddd:	fb                   	sti    
c001cdde:	66 90                	xchg   ax,ax
c001cde0:	5b                   	pop    ebx
c001cde1:	5e                   	pop    esi
c001cde2:	5f                   	pop    edi
c001cde3:	c3                   	ret    

c001cde4 <VCache::VCache(PhysicalDisk*)>:
c001cde4:	53                   	push   ebx
c001cde5:	83 ec 18             	sub    esp,0x18
c001cde8:	ba 2c 21 03 c0       	mov    edx,0xc003212c
c001cded:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdf1:	89 10                	mov    DWORD PTR [eax],edx
c001cdf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cdf7:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001cdfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce02:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001ce09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce0d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001ce14:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ce1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce1f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ce26:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ce2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce31:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ce38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce3c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001ce40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce44:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001ce4b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001ce52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce56:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001ce5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce5e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001ce62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce66:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001ce6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce6e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001ce75:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001ce7d:	83 ec 0c             	sub    esp,0xc
c001ce80:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce84:	e8 75 94 ff ff       	call   c00162fe <malloc>
c001ce89:	83 c4 10             	add    esp,0x10
c001ce8c:	89 c3                	mov    ebx,eax
c001ce8e:	83 ec 0c             	sub    esp,0xc
c001ce91:	53                   	push   ebx
c001ce92:	e8 f5 32 00 00       	call   c002018c <Mutex::Mutex()>
c001ce97:	83 c4 10             	add    esp,0x10
c001ce9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ce9e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001cea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cea5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001cea9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ceac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ceb0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001ceb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cebb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cec5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cec8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cecc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c001ced2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ced8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001cedc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c001cedf:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c001cee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cee6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001ceea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ceee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001cef4:	05 00 02 00 00       	add    eax,0x200
c001cef9:	c1 e0 03             	shl    eax,0x3
c001cefc:	83 ec 0c             	sub    esp,0xc
c001ceff:	50                   	push   eax
c001cf00:	e8 f9 93 ff ff       	call   c00162fe <malloc>
c001cf05:	83 c4 10             	add    esp,0x10
c001cf08:	89 c2                	mov    edx,eax
c001cf0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf0e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001cf11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf15:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001cf1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf20:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001cf24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf28:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001cf2e:	89 d0                	mov    eax,edx
c001cf30:	c1 e0 02             	shl    eax,0x2
c001cf33:	01 d0                	add    eax,edx
c001cf35:	c1 e0 04             	shl    eax,0x4
c001cf38:	83 ec 0c             	sub    esp,0xc
c001cf3b:	50                   	push   eax
c001cf3c:	e8 bd 93 ff ff       	call   c00162fe <malloc>
c001cf41:	83 c4 10             	add    esp,0x10
c001cf44:	89 c2                	mov    edx,eax
c001cf46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf4a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001cf4d:	90                   	nop
c001cf4e:	83 c4 18             	add    esp,0x18
c001cf51:	5b                   	pop    ebx
c001cf52:	c3                   	ret    
c001cf53:	90                   	nop

c001cf54 <VCache::invalidateReadBuffer()>:
c001cf54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf58:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001cf5e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001cf62:	c3                   	ret    
c001cf63:	90                   	nop

c001cf64 <VCache::writeWriteBuffer()>:
c001cf64:	53                   	push   ebx
c001cf65:	83 ec 08             	sub    esp,0x8
c001cf68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cf6c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001cf70:	74 1e                	je     c001cf90 <VCache::writeWriteBuffer()+0x2c>
c001cf72:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cf75:	83 ec 0c             	sub    esp,0xc
c001cf78:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf7a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001cf7d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001cf80:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001cf83:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001cf86:	50                   	push   eax
c001cf87:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001cf8a:	83 c4 20             	add    esp,0x20
c001cf8d:	8d 76 00             	lea    esi,[esi+0x0]
c001cf90:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001cf97:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001cf9e:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c001cfa2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001cfa9:	83 c4 08             	add    esp,0x8
c001cfac:	5b                   	pop    ebx
c001cfad:	c3                   	ret    
c001cfae:	66 90                	xchg   ax,ax

c001cfb0 <VCache::~VCache()>:
c001cfb0:	83 ec 0c             	sub    esp,0xc
c001cfb3:	ba 2c 21 03 c0       	mov    edx,0xc003212c
c001cfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfbc:	89 10                	mov    DWORD PTR [eax],edx
c001cfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfc2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001cfc5:	0f b6 c0             	movzx  eax,al
c001cfc8:	85 c0                	test   eax,eax
c001cfca:	74 10                	je     c001cfdc <VCache::~VCache()+0x2c>
c001cfcc:	83 ec 0c             	sub    esp,0xc
c001cfcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfd3:	e8 8c ff ff ff       	call   c001cf64 <VCache::writeWriteBuffer()>
c001cfd8:	83 c4 10             	add    esp,0x10
c001cfdb:	90                   	nop
c001cfdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfe0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001cfe3:	83 ec 0c             	sub    esp,0xc
c001cfe6:	50                   	push   eax
c001cfe7:	e8 22 93 ff ff       	call   c001630e <free>
c001cfec:	83 c4 10             	add    esp,0x10
c001cfef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cff3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001cff6:	83 ec 0c             	sub    esp,0xc
c001cff9:	50                   	push   eax
c001cffa:	e8 0f 93 ff ff       	call   c001630e <free>
c001cfff:	83 c4 10             	add    esp,0x10
c001d002:	90                   	nop
c001d003:	83 c4 0c             	add    esp,0xc
c001d006:	c3                   	ret    
c001d007:	90                   	nop

c001d008 <VCache::~VCache()>:
c001d008:	83 ec 0c             	sub    esp,0xc
c001d00b:	83 ec 0c             	sub    esp,0xc
c001d00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d012:	e8 99 ff ff ff       	call   c001cfb0 <VCache::~VCache()>
c001d017:	83 c4 10             	add    esp,0x10
c001d01a:	83 ec 08             	sub    esp,0x8
c001d01d:	6a 44                	push   0x44
c001d01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d023:	e8 38 c0 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001d028:	83 c4 10             	add    esp,0x10
c001d02b:	83 c4 0c             	add    esp,0xc
c001d02e:	c3                   	ret    
c001d02f:	90                   	nop

c001d030 <VCache::write(unsigned long long, int, void*)>:
c001d030:	55                   	push   ebp
c001d031:	57                   	push   edi
c001d032:	56                   	push   esi
c001d033:	53                   	push   ebx
c001d034:	83 ec 1c             	sub    esp,0x1c
c001d037:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d03b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d03f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d043:	e8 a4 7e 00 00       	call   c0024eec <KeDisablePreemption()>
c001d048:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d04c:	74 0e                	je     c001d05c <VCache::write(unsigned long long, int, void*)+0x2c>
c001d04e:	83 ec 0c             	sub    esp,0xc
c001d051:	53                   	push   ebx
c001d052:	e8 fd fe ff ff       	call   c001cf54 <VCache::invalidateReadBuffer()>
c001d057:	83 c4 10             	add    esp,0x10
c001d05a:	66 90                	xchg   ax,ax
c001d05c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d060:	74 5e                	je     c001d0c0 <VCache::write(unsigned long long, int, void*)+0x90>
c001d062:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001d065:	89 e8                	mov    eax,ebp
c001d067:	99                   	cdq    
c001d068:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001d06b:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001d06e:	89 c1                	mov    ecx,eax
c001d070:	89 d0                	mov    eax,edx
c001d072:	31 f1                	xor    ecx,esi
c001d074:	31 f8                	xor    eax,edi
c001d076:	09 c1                	or     ecx,eax
c001d078:	75 3a                	jne    c001d0b4 <VCache::write(unsigned long long, int, void*)+0x84>
c001d07a:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c001d07f:	75 33                	jne    c001d0b4 <VCache::write(unsigned long long, int, void*)+0x84>
c001d081:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d084:	89 ef                	mov    edi,ebp
c001d086:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d08c:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d090:	0f af f9             	imul   edi,ecx
c001d093:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001d096:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d098:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001d09b:	40                   	inc    eax
c001d09c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001d09f:	83 f8 50             	cmp    eax,0x50
c001d0a2:	75 70                	jne    c001d114 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d0a4:	83 ec 0c             	sub    esp,0xc
c001d0a7:	53                   	push   ebx
c001d0a8:	e8 b7 fe ff ff       	call   c001cf64 <VCache::writeWriteBuffer()>
c001d0ad:	83 c4 10             	add    esp,0x10
c001d0b0:	eb 62                	jmp    c001d114 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d0b2:	66 90                	xchg   ax,ax
c001d0b4:	83 ec 0c             	sub    esp,0xc
c001d0b7:	53                   	push   ebx
c001d0b8:	e8 a7 fe ff ff       	call   c001cf64 <VCache::writeWriteBuffer()>
c001d0bd:	83 c4 10             	add    esp,0x10
c001d0c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d0c3:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c001d0c8:	7f 22                	jg     c001d0ec <VCache::write(unsigned long long, int, void*)+0xbc>
c001d0ca:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c001d0cd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001d0d0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d0d4:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001d0d8:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001d0db:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c001d0de:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d0e4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d0e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d0ea:	eb 28                	jmp    c001d114 <VCache::write(unsigned long long, int, void*)+0xe4>
c001d0ec:	83 ec 0c             	sub    esp,0xc
c001d0ef:	8b 10                	mov    edx,DWORD PTR [eax]
c001d0f1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d0f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d0f9:	57                   	push   edi
c001d0fa:	56                   	push   esi
c001d0fb:	50                   	push   eax
c001d0fc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001d0ff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d103:	83 c4 20             	add    esp,0x20
c001d106:	e8 09 7e 00 00       	call   c0024f14 <KeRestorePreemption()>
c001d10b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d10f:	eb 0b                	jmp    c001d11c <VCache::write(unsigned long long, int, void*)+0xec>
c001d111:	8d 76 00             	lea    esi,[esi+0x0]
c001d114:	e8 fb 7d 00 00       	call   c0024f14 <KeRestorePreemption()>
c001d119:	31 c0                	xor    eax,eax
c001d11b:	90                   	nop
c001d11c:	83 c4 1c             	add    esp,0x1c
c001d11f:	5b                   	pop    ebx
c001d120:	5e                   	pop    esi
c001d121:	5f                   	pop    edi
c001d122:	5d                   	pop    ebp
c001d123:	c3                   	ret    

c001d124 <VCache::read(unsigned long long, int, void*)>:
c001d124:	55                   	push   ebp
c001d125:	57                   	push   edi
c001d126:	56                   	push   esi
c001d127:	53                   	push   ebx
c001d128:	83 ec 1c             	sub    esp,0x1c
c001d12b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d12f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d133:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d137:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d13b:	e8 ac 7d 00 00       	call   c0024eec <KeDisablePreemption()>
c001d140:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001d144:	74 0e                	je     c001d154 <VCache::read(unsigned long long, int, void*)+0x30>
c001d146:	83 ec 0c             	sub    esp,0xc
c001d149:	53                   	push   ebx
c001d14a:	e8 15 fe ff ff       	call   c001cf64 <VCache::writeWriteBuffer()>
c001d14f:	83 c4 10             	add    esp,0x10
c001d152:	66 90                	xchg   ax,ax
c001d154:	83 fd 01             	cmp    ebp,0x1
c001d157:	0f 85 97 00 00 00    	jne    c001d1f4 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d15d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d160:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d164:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001d16b:	0f 85 83 00 00 00    	jne    c001d1f4 <VCache::read(unsigned long long, int, void*)+0xd0>
c001d171:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001d174:	89 e9                	mov    ecx,ebp
c001d176:	f7 d9                	neg    ecx
c001d178:	89 c8                	mov    eax,ecx
c001d17a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d17e:	c1 f8 1f             	sar    eax,0x1f
c001d181:	21 f1                	and    ecx,esi
c001d183:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d187:	89 c8                	mov    eax,ecx
c001d189:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d18d:	21 f9                	and    ecx,edi
c001d18f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001d193:	89 ca                	mov    edx,ecx
c001d195:	74 31                	je     c001d1c8 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d197:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c001d19a:	75 2c                	jne    c001d1c8 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d19c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c001d19f:	75 27                	jne    c001d1c8 <VCache::read(unsigned long long, int, void*)+0xa4>
c001d1a1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1a4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d1a7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d1ab:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001d1b1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d1b4:	48                   	dec    eax
c001d1b5:	21 c6                	and    esi,eax
c001d1b7:	0f af f1             	imul   esi,ecx
c001d1ba:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c001d1bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d1bf:	e8 50 7d 00 00       	call   c0024f14 <KeRestorePreemption()>
c001d1c4:	31 c0                	xor    eax,eax
c001d1c6:	eb 58                	jmp    c001d220 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d1c8:	83 ec 0c             	sub    esp,0xc
c001d1cb:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001d1cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d1d3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c001d1d6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c001d1d9:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001d1db:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001d1de:	55                   	push   ebp
c001d1df:	52                   	push   edx
c001d1e0:	50                   	push   eax
c001d1e1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d1e5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c001d1e8:	83 c4 20             	add    esp,0x20
c001d1eb:	85 c0                	test   eax,eax
c001d1ed:	75 31                	jne    c001d220 <VCache::read(unsigned long long, int, void*)+0xfc>
c001d1ef:	eb b3                	jmp    c001d1a4 <VCache::read(unsigned long long, int, void*)+0x80>
c001d1f1:	8d 76 00             	lea    esi,[esi+0x0]
c001d1f4:	83 ec 0c             	sub    esp,0xc
c001d1f7:	53                   	push   ebx
c001d1f8:	e8 57 fd ff ff       	call   c001cf54 <VCache::invalidateReadBuffer()>
c001d1fd:	5a                   	pop    edx
c001d1fe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d201:	8b 10                	mov    edx,DWORD PTR [eax]
c001d203:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d207:	55                   	push   ebp
c001d208:	57                   	push   edi
c001d209:	56                   	push   esi
c001d20a:	50                   	push   eax
c001d20b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001d20e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d212:	83 c4 20             	add    esp,0x20
c001d215:	e8 fa 7c 00 00       	call   c0024f14 <KeRestorePreemption()>
c001d21a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d21e:	66 90                	xchg   ax,ax
c001d220:	83 c4 1c             	add    esp,0x1c
c001d223:	5b                   	pop    ebx
c001d224:	5e                   	pop    esi
c001d225:	5f                   	pop    edi
c001d226:	5d                   	pop    ebp
c001d227:	c3                   	ret    

c001d228 <Video::putrect(int, int, int, int, unsigned int)>:
c001d228:	55                   	push   ebp
c001d229:	57                   	push   edi
c001d22a:	56                   	push   esi
c001d22b:	53                   	push   ebx
c001d22c:	83 ec 1c             	sub    esp,0x1c
c001d22f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d233:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d237:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001d23b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001d23f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d243:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d247:	01 df                	add    edi,ebx
c001d249:	39 fb                	cmp    ebx,edi
c001d24b:	7d 1f                	jge    c001d26c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001d24d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d251:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001d255:	7d 12                	jge    c001d269 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001d257:	8b 16                	mov    edx,DWORD PTR [esi]
c001d259:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d25d:	53                   	push   ebx
c001d25e:	55                   	push   ebp
c001d25f:	45                   	inc    ebp
c001d260:	56                   	push   esi
c001d261:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d264:	83 c4 10             	add    esp,0x10
c001d267:	eb e8                	jmp    c001d251 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001d269:	43                   	inc    ebx
c001d26a:	eb dd                	jmp    c001d249 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001d26c:	83 c4 1c             	add    esp,0x1c
c001d26f:	5b                   	pop    ebx
c001d270:	5e                   	pop    esi
c001d271:	5f                   	pop    edi
c001d272:	5d                   	pop    ebp
c001d273:	c3                   	ret    

c001d274 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001d274:	55                   	push   ebp
c001d275:	57                   	push   edi
c001d276:	31 ff                	xor    edi,edi
c001d278:	56                   	push   esi
c001d279:	53                   	push   ebx
c001d27a:	83 ec 1c             	sub    esp,0x1c
c001d27d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001d281:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d285:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001d28c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c001d291:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d295:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001d299:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d29d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c001d2a0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d2a4:	01 f9                	add    ecx,edi
c001d2a6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001d2aa:	7d 2f                	jge    c001d2db <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001d2ac:	31 f6                	xor    esi,esi
c001d2ae:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d2b2:	01 f2                	add    edx,esi
c001d2b4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001d2b8:	7d 1a                	jge    c001d2d4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001d2ba:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2bd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001d2c0:	46                   	inc    esi
c001d2c1:	51                   	push   ecx
c001d2c2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001d2c6:	52                   	push   edx
c001d2c7:	55                   	push   ebp
c001d2c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d2cb:	83 c4 10             	add    esp,0x10
c001d2ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2d2:	eb da                	jmp    c001d2ae <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001d2d4:	47                   	inc    edi
c001d2d5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001d2d9:	eb c5                	jmp    c001d2a0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001d2db:	83 c4 1c             	add    esp,0x1c
c001d2de:	5b                   	pop    ebx
c001d2df:	5e                   	pop    esi
c001d2e0:	5f                   	pop    edi
c001d2e1:	5d                   	pop    ebp
c001d2e2:	c3                   	ret    
c001d2e3:	90                   	nop

c001d2e4 <Video::blit(unsigned int*, int, int, int, int)>:
c001d2e4:	55                   	push   ebp
c001d2e5:	57                   	push   edi
c001d2e6:	56                   	push   esi
c001d2e7:	53                   	push   ebx
c001d2e8:	83 ec 1c             	sub    esp,0x1c
c001d2eb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d2ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2f3:	85 c0                	test   eax,eax
c001d2f5:	79 02                	jns    c001d2f9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001d2f7:	31 c0                	xor    eax,eax
c001d2f9:	c1 e0 02             	shl    eax,0x2
c001d2fc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d300:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d304:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d308:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001d30c:	39 d8                	cmp    eax,ebx
c001d30e:	7e 49                	jle    c001d359 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d310:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d316:	7c 41                	jl     c001d359 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001d318:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001d31c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d320:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001d324:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001d328:	39 f9                	cmp    ecx,edi
c001d32a:	7e 22                	jle    c001d34e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001d32c:	83 c5 04             	add    ebp,0x4
c001d32f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d335:	7c 14                	jl     c001d34b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001d337:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d339:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001d33c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d340:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d344:	56                   	push   esi
c001d345:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001d348:	83 c4 10             	add    esp,0x10
c001d34b:	47                   	inc    edi
c001d34c:	eb d2                	jmp    c001d320 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001d34e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d352:	43                   	inc    ebx
c001d353:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001d357:	eb ab                	jmp    c001d304 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001d359:	83 c4 1c             	add    esp,0x1c
c001d35c:	5b                   	pop    ebx
c001d35d:	5e                   	pop    esi
c001d35e:	5f                   	pop    edi
c001d35f:	5d                   	pop    ebp
c001d360:	c3                   	ret    
c001d361:	90                   	nop

c001d362 <Video::clearScreen(unsigned int)>:
c001d362:	57                   	push   edi
c001d363:	56                   	push   esi
c001d364:	53                   	push   ebx
c001d365:	31 db                	xor    ebx,ebx
c001d367:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d36b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c001d371:	7e 1f                	jle    c001d392 <Video::clearScreen(unsigned int)+0x30>
c001d373:	31 ff                	xor    edi,edi
c001d375:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001d37b:	7e 12                	jle    c001d38f <Video::clearScreen(unsigned int)+0x2d>
c001d37d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d37f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d383:	53                   	push   ebx
c001d384:	57                   	push   edi
c001d385:	47                   	inc    edi
c001d386:	56                   	push   esi
c001d387:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d38a:	83 c4 10             	add    esp,0x10
c001d38d:	eb e6                	jmp    c001d375 <Video::clearScreen(unsigned int)+0x13>
c001d38f:	43                   	inc    ebx
c001d390:	eb d9                	jmp    c001d36b <Video::clearScreen(unsigned int)+0x9>
c001d392:	5b                   	pop    ebx
c001d393:	5e                   	pop    esi
c001d394:	5f                   	pop    edi
c001d395:	c3                   	ret    

c001d396 <Video::putpixel(int, int, unsigned int)>:
c001d396:	c7 44 24 04 34 21 03 c0 	mov    DWORD PTR [esp+0x4],0xc0032134
c001d39e:	e9 03 2e 00 00       	jmp    c00201a6 <KePanic(char const*)>
c001d3a3:	90                   	nop

c001d3a4 <Video::readPixelApprox(int, int)>:
c001d3a4:	83 ec 18             	sub    esp,0x18
c001d3a7:	68 55 21 03 c0       	push   0xc0032155
c001d3ac:	e8 f5 2d 00 00       	call   c00201a6 <KePanic(char const*)>
c001d3b1:	31 c0                	xor    eax,eax
c001d3b3:	83 c4 1c             	add    esp,0x1c
c001d3b6:	c3                   	ret    
c001d3b7:	90                   	nop

c001d3b8 <Video::Video(char const*)>:
c001d3b8:	83 ec 0c             	sub    esp,0xc
c001d3bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3bf:	83 ec 08             	sub    esp,0x8
c001d3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d3c6:	50                   	push   eax
c001d3c7:	e8 a4 df ff ff       	call   c001b370 <Device::Device(char const*)>
c001d3cc:	83 c4 10             	add    esp,0x10
c001d3cf:	ba f8 21 03 c0       	mov    edx,0xc00321f8
c001d3d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3d8:	89 10                	mov    DWORD PTR [eax],edx
c001d3da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3de:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001d3e8:	90                   	nop
c001d3e9:	83 c4 0c             	add    esp,0xc
c001d3ec:	c3                   	ret    
c001d3ed:	90                   	nop

c001d3ee <Video::~Video()>:
c001d3ee:	83 ec 0c             	sub    esp,0xc
c001d3f1:	ba f8 21 03 c0       	mov    edx,0xc00321f8
c001d3f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3fa:	89 10                	mov    DWORD PTR [eax],edx
c001d3fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d400:	83 ec 0c             	sub    esp,0xc
c001d403:	50                   	push   eax
c001d404:	e8 07 dd ff ff       	call   c001b110 <Device::~Device()>
c001d409:	83 c4 10             	add    esp,0x10
c001d40c:	90                   	nop
c001d40d:	83 c4 0c             	add    esp,0xc
c001d410:	c3                   	ret    
c001d411:	90                   	nop

c001d412 <Video::~Video()>:
c001d412:	83 ec 0c             	sub    esp,0xc
c001d415:	83 ec 0c             	sub    esp,0xc
c001d418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d41c:	e8 cd ff ff ff       	call   c001d3ee <Video::~Video()>
c001d421:	83 c4 10             	add    esp,0x10
c001d424:	83 ec 08             	sub    esp,0x8
c001d427:	68 64 01 00 00       	push   0x164
c001d42c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d430:	e8 2b bc ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c001d435:	83 c4 10             	add    esp,0x10
c001d438:	83 c4 0c             	add    esp,0xc
c001d43b:	c3                   	ret    

c001d43c <Video::isMonochrome()>:
c001d43c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d440:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001d446:	c3                   	ret    
c001d447:	90                   	nop

c001d448 <Video::getWidth()>:
c001d448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d44c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d452:	c3                   	ret    
c001d453:	90                   	nop

c001d454 <Video::getHeight()>:
c001d454:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d458:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d45e:	c3                   	ret    
c001d45f:	90                   	nop

c001d460 <Video::drawCursor(int, int, unsigned int*, int)>:
c001d460:	55                   	push   ebp
c001d461:	57                   	push   edi
c001d462:	56                   	push   esi
c001d463:	53                   	push   ebx
c001d464:	83 ec 2c             	sub    esp,0x2c
c001d467:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d46b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001d46f:	83 f8 01             	cmp    eax,0x1
c001d472:	19 c9                	sbb    ecx,ecx
c001d474:	31 db                	xor    ebx,ebx
c001d476:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001d47a:	89 cd                	mov    ebp,ecx
c001d47c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c001d484:	f7 d5                	not    ebp
c001d486:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001d48c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d490:	01 d8                	add    eax,ebx
c001d492:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d496:	56                   	push   esi
c001d497:	e8 b8 ff ff ff       	call   c001d454 <Video::getHeight()>
c001d49c:	59                   	pop    ecx
c001d49d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001d4a1:	7e 70                	jle    c001d513 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c001d4a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d4a7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001d4ab:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001d4ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d4b2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d4b6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001d4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d4c1:	89 f8                	mov    eax,edi
c001d4c3:	83 c0 20             	add    eax,0x20
c001d4c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d4ca:	56                   	push   esi
c001d4cb:	e8 78 ff ff ff       	call   c001d448 <Video::getWidth()>
c001d4d0:	5a                   	pop    edx
c001d4d1:	39 c7                	cmp    edi,eax
c001d4d3:	7d 34                	jge    c001d509 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c001d4d5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001d4da:	74 05                	je     c001d4e1 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c001d4dc:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4de:	55                   	push   ebp
c001d4df:	eb 0d                	jmp    c001d4ee <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c001d4e1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001d4e6:	74 12                	je     c001d4fa <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c001d4e8:	8b 06                	mov    eax,DWORD PTR [esi]
c001d4ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d4ee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4f2:	57                   	push   edi
c001d4f3:	56                   	push   esi
c001d4f4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001d4f7:	83 c4 10             	add    esp,0x10
c001d4fa:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001d4fe:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001d502:	47                   	inc    edi
c001d503:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001d507:	75 c1                	jne    c001d4ca <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c001d509:	43                   	inc    ebx
c001d50a:	83 fb 20             	cmp    ebx,0x20
c001d50d:	0f 85 79 ff ff ff    	jne    c001d48c <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c001d513:	83 c4 2c             	add    esp,0x2c
c001d516:	5b                   	pop    ebx
c001d517:	5e                   	pop    esi
c001d518:	5f                   	pop    edi
c001d519:	5d                   	pop    ebp
c001d51a:	c3                   	ret    
c001d51b:	90                   	nop

c001d51c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c001d51c:	55                   	push   ebp
c001d51d:	57                   	push   edi
c001d51e:	56                   	push   esi
c001d51f:	53                   	push   ebx
c001d520:	83 ec 48             	sub    esp,0x48
c001d523:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001d527:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c001d52b:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c001d52f:	c1 e0 08             	shl    eax,0x8
c001d532:	01 d0                	add    eax,edx
c001d534:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001d538:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d53c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001d540:	c1 e0 08             	shl    eax,0x8
c001d543:	01 d0                	add    eax,edx
c001d545:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d549:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d54d:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c001d552:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d556:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001d55a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001d561:	50                   	push   eax
c001d562:	e8 97 8d ff ff       	call   c00162fe <malloc>
c001d567:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d56b:	83 c4 10             	add    esp,0x10
c001d56e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d573:	75 10                	jne    c001d585 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c001d575:	83 ec 0c             	sub    esp,0xc
c001d578:	68 80 21 03 c0       	push   0xc0032180
c001d57d:	e8 24 2c 00 00       	call   c00201a6 <KePanic(char const*)>
c001d582:	83 c4 10             	add    esp,0x10
c001d585:	51                   	push   ecx
c001d586:	51                   	push   ecx
c001d587:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d58b:	50                   	push   eax
c001d58c:	68 90 21 03 c0       	push   0xc0032190
c001d591:	e8 f7 bb ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001d596:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c001d599:	83 e0 20             	and    eax,0x20
c001d59c:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001d5a0:	85 c0                	test   eax,eax
c001d5a2:	5e                   	pop    esi
c001d5a3:	0f 94 c0             	sete   al
c001d5a6:	5f                   	pop    edi
c001d5a7:	0f b6 c0             	movzx  eax,al
c001d5aa:	be 12 00 00 00       	mov    esi,0x12
c001d5af:	50                   	push   eax
c001d5b0:	68 9a 21 03 c0       	push   0xc003219a
c001d5b5:	e8 d3 bb ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001d5ba:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c001d5be:	83 c4 10             	add    esp,0x10
c001d5c1:	89 d0                	mov    eax,edx
c001d5c3:	85 d2                	test   edx,edx
c001d5c5:	74 11                	je     c001d5d8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c001d5c7:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001d5cb:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c001d5cf:	c1 fe 03             	sar    esi,0x3
c001d5d2:	0f af f1             	imul   esi,ecx
c001d5d5:	83 c6 12             	add    esi,0x12
c001d5d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d5dd:	74 07                	je     c001d5e6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c001d5df:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d5e4:	75 12                	jne    c001d5f8 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c001d5e6:	83 ec 0c             	sub    esp,0xc
c001d5e9:	68 a8 21 03 c0       	push   0xc00321a8
c001d5ee:	e8 9a bb ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001d5f3:	e9 a0 02 00 00       	jmp    c001d898 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c001d5f8:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c001d5fc:	83 f9 02             	cmp    ecx,0x2
c001d5ff:	74 0e                	je     c001d60f <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c001d601:	83 f9 0a             	cmp    ecx,0xa
c001d604:	0f 84 c8 00 00 00    	je     c001d6d2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c001d60a:	e9 72 02 00 00       	jmp    c001d881 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c001d60f:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d614:	75 0e                	jne    c001d624 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d616:	84 c0                	test   al,al
c001d618:	75 0a                	jne    c001d624 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c001d61a:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d61d:	83 e8 18             	sub    eax,0x18
c001d620:	a8 f7                	test   al,0xf7
c001d622:	74 0d                	je     c001d631 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c001d624:	83 ec 0c             	sub    esp,0xc
c001d627:	68 bd 21 03 c0       	push   0xc00321bd
c001d62c:	e9 58 02 00 00       	jmp    c001d889 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d631:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c001d636:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d63e:	31 c0                	xor    eax,eax
c001d640:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001d644:	89 c7                	mov    edi,eax
c001d646:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d64e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001d653:	75 15                	jne    c001d66a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d655:	99                   	cdq    
c001d656:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d65a:	85 d2                	test   edx,edx
c001d65c:	75 0c                	jne    c001d66a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001d65e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d662:	29 c7                	sub    edi,eax
c001d664:	4f                   	dec    edi
c001d665:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c001d66a:	31 d2                	xor    edx,edx
c001d66c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d670:	75 08                	jne    c001d67a <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c001d672:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c001d677:	c1 e2 18             	shl    edx,0x18
c001d67a:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c001d67f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001d683:	c1 e1 10             	shl    ecx,0x10
c001d686:	8d 47 01             	lea    eax,[edi+0x1]
c001d689:	89 cd                	mov    ebp,ecx
c001d68b:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c001d690:	c1 e1 08             	shl    ecx,0x8
c001d693:	09 e9                	or     ecx,ebp
c001d695:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d699:	09 e9                	or     ecx,ebp
c001d69b:	09 d1                	or     ecx,edx
c001d69d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d6a1:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c001d6a4:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c001d6a8:	c1 fa 03             	sar    edx,0x3
c001d6ab:	01 d6                	add    esi,edx
c001d6ad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d6b1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001d6b5:	7e 04                	jle    c001d6bb <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c001d6b7:	89 c7                	mov    edi,eax
c001d6b9:	eb 93                	jmp    c001d64e <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001d6bb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d6bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6c3:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c001d6c7:	0f 8f 77 ff ff ff    	jg     c001d644 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c001d6cd:	e9 d3 01 00 00       	jmp    c001d8a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d6d2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c001d6d7:	75 0e                	jne    c001d6e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d6d9:	85 d2                	test   edx,edx
c001d6db:	75 0a                	jne    c001d6e7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c001d6dd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001d6e0:	83 e8 18             	sub    eax,0x18
c001d6e3:	a8 f7                	test   al,0xf7
c001d6e5:	74 0d                	je     c001d6f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c001d6e7:	83 ec 0c             	sub    esp,0xc
c001d6ea:	68 cb 21 03 c0       	push   0xc00321cb
c001d6ef:	e9 95 01 00 00       	jmp    c001d889 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c001d6f4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d6fc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d704:	31 c9                	xor    ecx,ecx
c001d706:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001d70a:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c001d70e:	0f 8e 91 01 00 00    	jle    c001d8a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d714:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c001d718:	0f 8d 87 01 00 00    	jge    c001d8a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c001d71e:	8d 46 01             	lea    eax,[esi+0x1]
c001d721:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d725:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d729:	83 fd 7f             	cmp    ebp,0x7f
c001d72c:	89 e8                	mov    eax,ebp
c001d72e:	0f 8e 9d 00 00 00    	jle    c001d7d1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c001d734:	83 e0 7f             	and    eax,0x7f
c001d737:	31 d2                	xor    edx,edx
c001d739:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d73d:	40                   	inc    eax
c001d73e:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d742:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d746:	75 0a                	jne    c001d752 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c001d748:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c001d74d:	89 ea                	mov    edx,ebp
c001d74f:	c1 e2 18             	shl    edx,0x18
c001d752:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001d757:	c1 e0 10             	shl    eax,0x10
c001d75a:	89 c7                	mov    edi,eax
c001d75c:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c001d761:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d765:	c1 e0 08             	shl    eax,0x8
c001d768:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c001d76c:	09 f8                	or     eax,edi
c001d76e:	31 f6                	xor    esi,esi
c001d770:	09 c5                	or     ebp,eax
c001d772:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c001d777:	09 d5                	or     ebp,edx
c001d779:	85 ff                	test   edi,edi
c001d77b:	75 1d                	jne    c001d79a <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001d77d:	89 c8                	mov    eax,ecx
c001d77f:	99                   	cdq    
c001d780:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d784:	85 d2                	test   edx,edx
c001d786:	75 12                	jne    c001d79a <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c001d788:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d78c:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001d790:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d794:	49                   	dec    ecx
c001d795:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001d79a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d79e:	8d 51 01             	lea    edx,[ecx+0x1]
c001d7a1:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c001d7a4:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c001d7a8:	8d 46 01             	lea    eax,[esi+0x1]
c001d7ab:	7e 06                	jle    c001d7b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c001d7ad:	89 c6                	mov    esi,eax
c001d7af:	89 d1                	mov    ecx,edx
c001d7b1:	eb c6                	jmp    c001d779 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c001d7b3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d7b7:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d7bb:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001d7bf:	c1 f8 03             	sar    eax,0x3
c001d7c2:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001d7c6:	89 d1                	mov    ecx,edx
c001d7c8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001d7cc:	e9 35 ff ff ff       	jmp    c001d706 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c001d7d1:	8d 45 01             	lea    eax,[ebp+0x1]
c001d7d4:	31 f6                	xor    esi,esi
c001d7d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d7da:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001d7df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d7e3:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c001d7e8:	75 1d                	jne    c001d807 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001d7ea:	89 c8                	mov    eax,ecx
c001d7ec:	99                   	cdq    
c001d7ed:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c001d7f1:	85 d2                	test   edx,edx
c001d7f3:	75 12                	jne    c001d807 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c001d7f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d7f9:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c001d7fd:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c001d801:	49                   	dec    ecx
c001d802:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c001d807:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c001d80f:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001d813:	75 10                	jne    c001d825 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c001d815:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d819:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c001d81e:	c1 e7 18             	shl    edi,0x18
c001d821:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001d825:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d829:	8d 51 01             	lea    edx,[ecx+0x1]
c001d82c:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c001d831:	c1 e0 10             	shl    eax,0x10
c001d834:	89 c7                	mov    edi,eax
c001d836:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d83a:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c001d83f:	c1 e0 08             	shl    eax,0x8
c001d842:	09 f8                	or     eax,edi
c001d844:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d848:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c001d84c:	09 f8                	or     eax,edi
c001d84e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001d852:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c001d856:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c001d859:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001d85d:	c1 f8 03             	sar    eax,0x3
c001d860:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001d864:	8d 46 01             	lea    eax,[esi+0x1]
c001d867:	39 f5                	cmp    ebp,esi
c001d869:	7e 09                	jle    c001d874 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c001d86b:	89 c6                	mov    esi,eax
c001d86d:	89 d1                	mov    ecx,edx
c001d86f:	e9 6f ff ff ff       	jmp    c001d7e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c001d874:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001d878:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c001d87c:	e9 45 ff ff ff       	jmp    c001d7c6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c001d881:	52                   	push   edx
c001d882:	52                   	push   edx
c001d883:	51                   	push   ecx
c001d884:	68 da 21 03 c0       	push   0xc00321da
c001d889:	e8 ff b8 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001d88e:	58                   	pop    eax
c001d88f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d893:	e8 76 8a ff ff       	call   c001630e <free>
c001d898:	83 c4 10             	add    esp,0x10
c001d89b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d8a3:	eb 14                	jmp    c001d8b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c001d8a5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001d8a9:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d8ad:	89 18                	mov    DWORD PTR [eax],ebx
c001d8af:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001d8b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8b7:	89 18                	mov    DWORD PTR [eax],ebx
c001d8b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8bd:	83 c4 3c             	add    esp,0x3c
c001d8c0:	5b                   	pop    ebx
c001d8c1:	5e                   	pop    esi
c001d8c2:	5f                   	pop    edi
c001d8c3:	5d                   	pop    ebp
c001d8c4:	c3                   	ret    
c001d8c5:	90                   	nop

c001d8c6 <Video::putTGA(int, int, unsigned char*, int)>:
c001d8c6:	55                   	push   ebp
c001d8c7:	57                   	push   edi
c001d8c8:	56                   	push   esi
c001d8c9:	53                   	push   ebx
c001d8ca:	83 ec 28             	sub    esp,0x28
c001d8cd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001d8d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d8d5:	50                   	push   eax
c001d8d6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001d8da:	50                   	push   eax
c001d8db:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d8df:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001d8e3:	57                   	push   edi
c001d8e4:	e8 33 fc ff ff       	call   c001d51c <Video::tgaParse(unsigned char*, int, int*, int*)>
c001d8e9:	83 c4 20             	add    esp,0x20
c001d8ec:	85 c0                	test   eax,eax
c001d8ee:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d8f2:	74 3a                	je     c001d92e <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001d8f4:	89 c6                	mov    esi,eax
c001d8f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001d8fa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001d8fe:	39 d8                	cmp    eax,ebx
c001d900:	7e 2c                	jle    c001d92e <Video::putTGA(int, int, unsigned char*, int)+0x68>
c001d902:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d906:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d90a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d90e:	39 e8                	cmp    eax,ebp
c001d910:	7e 19                	jle    c001d92b <Video::putTGA(int, int, unsigned char*, int)+0x65>
c001d912:	83 c6 04             	add    esi,0x4
c001d915:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c001d918:	85 c0                	test   eax,eax
c001d91a:	79 0c                	jns    c001d928 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c001d91c:	8b 17                	mov    edx,DWORD PTR [edi]
c001d91e:	50                   	push   eax
c001d91f:	53                   	push   ebx
c001d920:	55                   	push   ebp
c001d921:	57                   	push   edi
c001d922:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001d925:	83 c4 10             	add    esp,0x10
c001d928:	45                   	inc    ebp
c001d929:	eb db                	jmp    c001d906 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001d92b:	43                   	inc    ebx
c001d92c:	eb c8                	jmp    c001d8f6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001d92e:	83 c4 1c             	add    esp,0x1c
c001d931:	5b                   	pop    ebx
c001d932:	5e                   	pop    esi
c001d933:	5f                   	pop    edi
c001d934:	5d                   	pop    ebp
c001d935:	c3                   	ret    
c001d936:	66 90                	xchg   ax,ax

c001d938 <ACPI::close(int, int, void*)>:
c001d938:	83 ec 1c             	sub    esp,0x1c
c001d93b:	83 ec 0c             	sub    esp,0xc
c001d93e:	68 3c 22 03 c0       	push   0xc003223c
c001d943:	e8 45 b8 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001d948:	83 c4 10             	add    esp,0x10
c001d94b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001d953:	74 1b                	je     c001d970 <ACPI::close(int, int, void*)+0x38>
c001d955:	83 ec 0c             	sub    esp,0xc
c001d958:	68 4b 22 03 c0       	push   0xc003224b
c001d95d:	e8 2b b8 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001d962:	83 c4 10             	add    esp,0x10
c001d965:	b8 00 00 00 00       	mov    eax,0x0
c001d96a:	e9 01 01 00 00       	jmp    c001da70 <ACPI::close(int, int, void*)+0x138>
c001d96f:	90                   	nop
c001d970:	83 ec 0c             	sub    esp,0xc
c001d973:	68 5c 22 03 c0       	push   0xc003225c
c001d978:	e8 10 b8 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001d97d:	83 c4 10             	add    esp,0x10
c001d980:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001d985:	75 45                	jne    c001d9cc <ACPI::close(int, int, void*)+0x94>
c001d987:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d98c:	83 ec 08             	sub    esp,0x8
c001d98f:	50                   	push   eax
c001d990:	68 6b 22 03 c0       	push   0xc003226b
c001d995:	e8 f3 b7 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001d99a:	83 c4 10             	add    esp,0x10
c001d99d:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d9a2:	85 c0                	test   eax,eax
c001d9a4:	74 0a                	je     c001d9b0 <ACPI::close(int, int, void*)+0x78>
c001d9a6:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d9ab:	ff d0                	call   eax
c001d9ad:	8d 76 00             	lea    esi,[esi+0x0]
c001d9b0:	83 ec 0c             	sub    esp,0xc
c001d9b3:	68 3c 24 03 c0       	push   0xc003243c
c001d9b8:	e8 e9 27 00 00       	call   c00201a6 <KePanic(char const*)>
c001d9bd:	83 c4 10             	add    esp,0x10
c001d9c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d9c5:	e9 a6 00 00 00       	jmp    c001da70 <ACPI::close(int, int, void*)+0x138>
c001d9ca:	66 90                	xchg   ax,ax
c001d9cc:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001d9d1:	0f 85 81 00 00 00    	jne    c001da58 <ACPI::close(int, int, void*)+0x120>
c001d9d7:	a1 08 f4 03 c0       	mov    eax,ds:0xc003f408
c001d9dc:	83 ec 08             	sub    esp,0x8
c001d9df:	50                   	push   eax
c001d9e0:	68 89 22 03 c0       	push   0xc0032289
c001d9e5:	e8 a3 b7 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001d9ea:	83 c4 10             	add    esp,0x10
c001d9ed:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001d9f2:	85 c0                	test   eax,eax
c001d9f4:	74 0a                	je     c001da00 <ACPI::close(int, int, void*)+0xc8>
c001d9f6:	a1 04 f4 03 c0       	mov    eax,ds:0xc003f404
c001d9fb:	ff d0                	call   eax
c001d9fd:	8d 76 00             	lea    esi,[esi+0x0]
c001da00:	83 ec 0c             	sub    esp,0xc
c001da03:	68 a4 22 03 c0       	push   0xc00322a4
c001da08:	e8 80 b7 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001da0d:	83 c4 10             	add    esp,0x10
c001da10:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001da15:	8d 76 00             	lea    esi,[esi+0x0]
c001da18:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001da1d:	83 e0 02             	and    eax,0x2
c001da20:	74 1e                	je     c001da40 <ACPI::close(int, int, void*)+0x108>
c001da22:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001da29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da2d:	89 c2                	mov    edx,eax
c001da2f:	ec                   	in     al,dx
c001da30:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001da34:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001da38:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001da3c:	eb da                	jmp    c001da18 <ACPI::close(int, int, void*)+0xe0>
c001da3e:	66 90                	xchg   ax,ax
c001da40:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001da47:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001da4c:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001da50:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001da54:	ee                   	out    dx,al
c001da55:	8d 76 00             	lea    esi,[esi+0x0]
c001da58:	83 ec 0c             	sub    esp,0xc
c001da5b:	68 b6 22 03 c0       	push   0xc00322b6
c001da60:	e8 28 b7 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001da65:	83 c4 10             	add    esp,0x10
c001da68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001da6d:	8d 76 00             	lea    esi,[esi+0x0]
c001da70:	83 c4 1c             	add    esp,0x1c
c001da73:	c3                   	ret    

c001da74 <findRSDP()>:
c001da74:	83 ec 1c             	sub    esp,0x1c
c001da77:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001da7c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001da82:	83 e0 04             	and    eax,0x4
c001da85:	0f b6 c0             	movzx  eax,al
c001da88:	85 c0                	test   eax,eax
c001da8a:	75 08                	jne    c001da94 <findRSDP()+0x20>
c001da8c:	b8 00 00 00 00       	mov    eax,0x0
c001da91:	eb 75                	jmp    c001db08 <findRSDP()+0x94>
c001da93:	90                   	nop
c001da94:	a1 ec a9 03 c0       	mov    eax,ds:0xc003a9ec
c001da99:	3d ff 07 00 00       	cmp    eax,0x7ff
c001da9e:	7f 1c                	jg     c001dabc <findRSDP()+0x48>
c001daa0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001daa5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001daab:	83 e2 fb             	and    edx,0xfffffffb
c001daae:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dab4:	b8 00 00 00 00       	mov    eax,0x0
c001dab9:	eb 4d                	jmp    c001db08 <findRSDP()+0x94>
c001dabb:	90                   	nop
c001dabc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001dac4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001dacc:	77 32                	ja     c001db00 <findRSDP()+0x8c>
c001dace:	83 ec 04             	sub    esp,0x4
c001dad1:	6a 08                	push   0x8
c001dad3:	68 c5 22 03 c0       	push   0xc00322c5
c001dad8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dadc:	e8 9f 28 fe ff       	call   c0000380 <memcmp>
c001dae1:	83 c4 10             	add    esp,0x10
c001dae4:	85 c0                	test   eax,eax
c001dae6:	0f 94 c0             	sete   al
c001dae9:	0f b6 c0             	movzx  eax,al
c001daec:	85 c0                	test   eax,eax
c001daee:	74 08                	je     c001daf8 <findRSDP()+0x84>
c001daf0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001daf4:	eb 12                	jmp    c001db08 <findRSDP()+0x94>
c001daf6:	66 90                	xchg   ax,ax
c001daf8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001dafd:	eb c5                	jmp    c001dac4 <findRSDP()+0x50>
c001daff:	90                   	nop
c001db00:	b8 00 00 00 00       	mov    eax,0x0
c001db05:	8d 76 00             	lea    esi,[esi+0x0]
c001db08:	83 c4 1c             	add    esp,0x1c
c001db0b:	c3                   	ret    

c001db0c <loadACPITables(unsigned char*)>:
c001db0c:	57                   	push   edi
c001db0d:	56                   	push   esi
c001db0e:	53                   	push   ebx
c001db0f:	83 ec 60             	sub    esp,0x60
c001db12:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001db17:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001db1d:	83 e0 04             	and    eax,0x4
c001db20:	0f b6 c0             	movzx  eax,al
c001db23:	85 c0                	test   eax,eax
c001db25:	0f 84 41 02 00 00    	je     c001dd6c <loadACPITables(unsigned char*)+0x260>
c001db2b:	a0 20 f6 03 c0       	mov    al,ds:0xc003f620
c001db30:	0f b6 c0             	movzx  eax,al
c001db33:	85 c0                	test   eax,eax
c001db35:	74 79                	je     c001dbb0 <loadACPITables(unsigned char*)+0xa4>
c001db37:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001db3b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001db3f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001db43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001db46:	83 e8 24             	sub    eax,0x24
c001db49:	c1 e8 03             	shr    eax,0x3
c001db4c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001db50:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001db58:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001db5c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001db60:	0f 8d ba 00 00 00    	jge    c001dc20 <loadACPITables(unsigned char*)+0x114>
c001db66:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001db6a:	83 c0 24             	add    eax,0x24
c001db6d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001db71:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001db75:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001db79:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001db7d:	c1 e0 03             	shl    eax,0x3
c001db80:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c001db84:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001db88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001db8b:	8b 00                	mov    eax,DWORD PTR [eax]
c001db8d:	89 c1                	mov    ecx,eax
c001db8f:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001db94:	8d 50 01             	lea    edx,[eax+0x1]
c001db97:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001db9d:	89 ca                	mov    edx,ecx
c001db9f:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dba6:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c001dbab:	eb ab                	jmp    c001db58 <loadACPITables(unsigned char*)+0x4c>
c001dbad:	8d 76 00             	lea    esi,[esi+0x0]
c001dbb0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dbb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001dbb8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001dbbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dbbf:	83 e8 24             	sub    eax,0x24
c001dbc2:	c1 e8 02             	shr    eax,0x2
c001dbc5:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dbc9:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001dbd1:	8d 76 00             	lea    esi,[esi+0x0]
c001dbd4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dbd8:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001dbdc:	7d 42                	jge    c001dc20 <loadACPITables(unsigned char*)+0x114>
c001dbde:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001dbe2:	83 c0 24             	add    eax,0x24
c001dbe5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001dbe9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dbed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001dbf1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dbf5:	c1 e0 02             	shl    eax,0x2
c001dbf8:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001dbfc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc00:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dc02:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dc07:	8d 50 01             	lea    edx,[eax+0x1]
c001dc0a:	89 15 0c f4 03 c0    	mov    DWORD PTR ds:0xc003f40c,edx
c001dc10:	89 ca                	mov    edx,ecx
c001dc12:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dc19:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c001dc1e:	eb b4                	jmp    c001dbd4 <loadACPITables(unsigned char*)+0xc8>
c001dc20:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001dc28:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001dc2d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001dc31:	0f 8d 39 01 00 00    	jge    c001dd70 <loadACPITables(unsigned char*)+0x264>
c001dc37:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc3b:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001dc42:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dc46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc4a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001dc4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc52:	25 ff 0f 00 00       	and    eax,0xfff
c001dc57:	89 c6                	mov    esi,eax
c001dc59:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dc5f:	83 ec 0c             	sub    esp,0xc
c001dc62:	6a 01                	push   0x1
c001dc64:	e8 ec a1 ff ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c001dc69:	83 c4 10             	add    esp,0x10
c001dc6c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dc70:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dc76:	83 ec 0c             	sub    esp,0xc
c001dc79:	6a 01                	push   0x1
c001dc7b:	6a 01                	push   0x1
c001dc7d:	50                   	push   eax
c001dc7e:	52                   	push   edx
c001dc7f:	53                   	push   ebx
c001dc80:	e8 dd aa ff ff       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dc85:	83 c4 20             	add    esp,0x20
c001dc88:	09 f0                	or     eax,esi
c001dc8a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dc8e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc92:	c1 e0 03             	shl    eax,0x3
c001dc95:	05 20 f4 03 c0       	add    eax,0xc003f420
c001dc9a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dc9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dca2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dca6:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001dcae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dcb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dcb6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dcba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dcbe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dcc2:	89 c6                	mov    esi,eax
c001dcc4:	89 d7                	mov    edi,edx
c001dcc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dcc8:	89 c8                	mov    eax,ecx
c001dcca:	89 fa                	mov    edx,edi
c001dccc:	89 f3                	mov    ebx,esi
c001dcce:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001dcd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dcd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001dce1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001dce5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001dce9:	05 00 10 00 00       	add    eax,0x1000
c001dcee:	c1 e8 0c             	shr    eax,0xc
c001dcf1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dcf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dcfd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd01:	25 ff 0f 00 00       	and    eax,0xfff
c001dd06:	89 c6                	mov    esi,eax
c001dd08:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001dd0e:	83 ec 0c             	sub    esp,0xc
c001dd11:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dd15:	e8 3b a1 ff ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c001dd1a:	83 c4 10             	add    esp,0x10
c001dd1d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dd21:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001dd27:	83 ec 0c             	sub    esp,0xc
c001dd2a:	6a 01                	push   0x1
c001dd2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dd30:	50                   	push   eax
c001dd31:	52                   	push   edx
c001dd32:	53                   	push   ebx
c001dd33:	e8 2a aa ff ff       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001dd38:	83 c4 20             	add    esp,0x20
c001dd3b:	09 f0                	or     eax,esi
c001dd3d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dd41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dd45:	83 ec 0c             	sub    esp,0xc
c001dd48:	50                   	push   eax
c001dd49:	e8 25 a4 ff ff       	call   c0018173 <Virt::freeKernelVirtualPages(unsigned long)>
c001dd4e:	83 c4 10             	add    esp,0x10
c001dd51:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dd55:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd59:	89 14 c5 24 f4 03 c0 	mov    DWORD PTR [eax*8-0x3ffc0bdc],edx
c001dd60:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c001dd65:	e9 be fe ff ff       	jmp    c001dc28 <loadACPITables(unsigned char*)+0x11c>
c001dd6a:	66 90                	xchg   ax,ax
c001dd6c:	90                   	nop
c001dd6d:	8d 76 00             	lea    esi,[esi+0x0]
c001dd70:	83 c4 60             	add    esp,0x60
c001dd73:	5b                   	pop    ebx
c001dd74:	5e                   	pop    esi
c001dd75:	5f                   	pop    edi
c001dd76:	c3                   	ret    
c001dd77:	90                   	nop

c001dd78 <findRSDT(unsigned char*)>:
c001dd78:	57                   	push   edi
c001dd79:	56                   	push   esi
c001dd7a:	53                   	push   ebx
c001dd7b:	83 ec 50             	sub    esp,0x50
c001dd7e:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dd83:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dd89:	83 e0 04             	and    eax,0x4
c001dd8c:	0f b6 c0             	movzx  eax,al
c001dd8f:	85 c0                	test   eax,eax
c001dd91:	75 0d                	jne    c001dda0 <findRSDT(unsigned char*)+0x28>
c001dd93:	b8 00 00 00 00       	mov    eax,0x0
c001dd98:	e9 2b 01 00 00       	jmp    c001dec8 <findRSDT(unsigned char*)+0x150>
c001dd9d:	8d 76 00             	lea    esi,[esi+0x0]
c001dda0:	89 e0                	mov    eax,esp
c001dda2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001dda6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ddaa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ddae:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001ddb6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ddba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ddbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ddc2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ddc6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ddca:	89 c6                	mov    esi,eax
c001ddcc:	89 d7                	mov    edi,edx
c001ddce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ddd0:	89 c8                	mov    eax,ecx
c001ddd2:	89 fa                	mov    edx,edi
c001ddd4:	89 f3                	mov    ebx,esi
c001ddd6:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001ddda:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ddde:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dde2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dde6:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c001ddea:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c001ddf2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddf6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ddfa:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001ddfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de02:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001de06:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001de0a:	25 ff 0f 00 00       	and    eax,0xfff
c001de0f:	89 c6                	mov    esi,eax
c001de11:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001de17:	83 ec 0c             	sub    esp,0xc
c001de1a:	6a 02                	push   0x2
c001de1c:	e8 34 a0 ff ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c001de21:	83 c4 10             	add    esp,0x10
c001de24:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001de28:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001de2e:	83 ec 0c             	sub    esp,0xc
c001de31:	6a 01                	push   0x1
c001de33:	6a 02                	push   0x2
c001de35:	50                   	push   eax
c001de36:	52                   	push   edx
c001de37:	53                   	push   ebx
c001de38:	e8 25 a9 ff ff       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001de3d:	83 c4 20             	add    esp,0x20
c001de40:	09 f0                	or     eax,esi
c001de42:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001de46:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001de4a:	25 ff 0f 00 00       	and    eax,0xfff
c001de4f:	89 c6                	mov    esi,eax
c001de51:	8b 1d b0 aa 03 c0    	mov    ebx,DWORD PTR ds:0xc003aab0
c001de57:	83 ec 0c             	sub    esp,0xc
c001de5a:	6a 02                	push   0x2
c001de5c:	e8 f4 9f ff ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c001de61:	83 c4 10             	add    esp,0x10
c001de64:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001de68:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001de6e:	83 ec 0c             	sub    esp,0xc
c001de71:	6a 01                	push   0x1
c001de73:	6a 02                	push   0x2
c001de75:	50                   	push   eax
c001de76:	52                   	push   edx
c001de77:	53                   	push   ebx
c001de78:	e8 e5 a8 ff ff       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001de7d:	83 c4 20             	add    esp,0x20
c001de80:	09 f0                	or     eax,esi
c001de82:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001de86:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001de8b:	85 c0                	test   eax,eax
c001de8d:	75 11                	jne    c001dea0 <findRSDT(unsigned char*)+0x128>
c001de8f:	c6 05 20 f6 03 c0 00 	mov    BYTE PTR ds:0xc003f620,0x0
c001de96:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001de9a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001de9e:	eb 24                	jmp    c001dec4 <findRSDT(unsigned char*)+0x14c>
c001dea0:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c001dea5:	83 f8 02             	cmp    eax,0x2
c001dea8:	75 12                	jne    c001debc <findRSDT(unsigned char*)+0x144>
c001deaa:	c6 05 20 f6 03 c0 01 	mov    BYTE PTR ds:0xc003f620,0x1
c001deb1:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001deb5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001deb9:	eb 09                	jmp    c001dec4 <findRSDT(unsigned char*)+0x14c>
c001debb:	90                   	nop
c001debc:	b8 00 00 00 00       	mov    eax,0x0
c001dec1:	eb 05                	jmp    c001dec8 <findRSDT(unsigned char*)+0x150>
c001dec3:	90                   	nop
c001dec4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dec8:	83 c4 50             	add    esp,0x50
c001decb:	5b                   	pop    ebx
c001decc:	5e                   	pop    esi
c001decd:	5f                   	pop    edi
c001dece:	c3                   	ret    
c001decf:	90                   	nop

c001ded0 <findDataTable(unsigned char*, char*)>:
c001ded0:	83 ec 1c             	sub    esp,0x1c
c001ded3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ded8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001dede:	83 e0 04             	and    eax,0x4
c001dee1:	0f b6 c0             	movzx  eax,al
c001dee4:	85 c0                	test   eax,eax
c001dee6:	75 08                	jne    c001def0 <findDataTable(unsigned char*, char*)+0x20>
c001dee8:	b8 00 00 00 00       	mov    eax,0x0
c001deed:	eb 5d                	jmp    c001df4c <findDataTable(unsigned char*, char*)+0x7c>
c001deef:	90                   	nop
c001def0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001def8:	a1 0c f4 03 c0       	mov    eax,ds:0xc003f40c
c001defd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001df01:	7d 41                	jge    c001df44 <findDataTable(unsigned char*, char*)+0x74>
c001df03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df07:	c1 e0 03             	shl    eax,0x3
c001df0a:	05 20 f4 03 c0       	add    eax,0xc003f420
c001df0f:	83 ec 04             	sub    esp,0x4
c001df12:	6a 04                	push   0x4
c001df14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df18:	50                   	push   eax
c001df19:	e8 62 24 fe ff       	call   c0000380 <memcmp>
c001df1e:	83 c4 10             	add    esp,0x10
c001df21:	85 c0                	test   eax,eax
c001df23:	0f 94 c0             	sete   al
c001df26:	0f b6 c0             	movzx  eax,al
c001df29:	85 c0                	test   eax,eax
c001df2b:	74 0f                	je     c001df3c <findDataTable(unsigned char*, char*)+0x6c>
c001df2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001df31:	8b 04 c5 24 f4 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc0bdc]
c001df38:	eb 12                	jmp    c001df4c <findDataTable(unsigned char*, char*)+0x7c>
c001df3a:	66 90                	xchg   ax,ax
c001df3c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001df41:	eb b5                	jmp    c001def8 <findDataTable(unsigned char*, char*)+0x28>
c001df43:	90                   	nop
c001df44:	b8 00 00 00 00       	mov    eax,0x0
c001df49:	8d 76 00             	lea    esi,[esi+0x0]
c001df4c:	83 c4 1c             	add    esp,0x1c
c001df4f:	c3                   	ret    

c001df50 <scanMADT()>:
c001df50:	53                   	push   ebx
c001df51:	83 ec 38             	sub    esp,0x38
c001df54:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001df59:	25 00 04 00 00       	and    eax,0x400
c001df5e:	74 14                	je     c001df74 <scanMADT()+0x24>
c001df60:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df65:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001df6b:	83 e2 fb             	and    edx,0xfffffffb
c001df6e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001df74:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001df79:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001df7f:	83 e0 04             	and    eax,0x4
c001df82:	0f b6 c0             	movzx  eax,al
c001df85:	85 c0                	test   eax,eax
c001df87:	0f 84 6b 04 00 00    	je     c001e3f8 <scanMADT()+0x4a8>
c001df8d:	e8 e2 fa ff ff       	call   c001da74 <findRSDP()>
c001df92:	a3 2c f6 03 c0       	mov    ds:0xc003f62c,eax
c001df97:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001df9c:	85 c0                	test   eax,eax
c001df9e:	75 1c                	jne    c001dfbc <scanMADT()+0x6c>
c001dfa0:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dfa5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dfab:	83 e2 fb             	and    edx,0xfffffffb
c001dfae:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dfb4:	e9 47 04 00 00       	jmp    c001e400 <scanMADT()+0x4b0>
c001dfb9:	8d 76 00             	lea    esi,[esi+0x0]
c001dfbc:	a1 2c f6 03 c0       	mov    eax,ds:0xc003f62c
c001dfc1:	83 ec 0c             	sub    esp,0xc
c001dfc4:	50                   	push   eax
c001dfc5:	e8 ae fd ff ff       	call   c001dd78 <findRSDT(unsigned char*)>
c001dfca:	83 c4 10             	add    esp,0x10
c001dfcd:	a3 28 f6 03 c0       	mov    ds:0xc003f628,eax
c001dfd2:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001dfd7:	85 c0                	test   eax,eax
c001dfd9:	75 19                	jne    c001dff4 <scanMADT()+0xa4>
c001dfdb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001dfe0:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001dfe6:	83 e2 fb             	and    edx,0xfffffffb
c001dfe9:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001dfef:	e9 0c 04 00 00       	jmp    c001e400 <scanMADT()+0x4b0>
c001dff4:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001dff9:	83 ec 0c             	sub    esp,0xc
c001dffc:	50                   	push   eax
c001dffd:	e8 0a fb ff ff       	call   c001db0c <loadACPITables(unsigned char*)>
c001e002:	83 c4 10             	add    esp,0x10
c001e005:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e00a:	83 ec 08             	sub    esp,0x8
c001e00d:	68 ce 22 03 c0       	push   0xc00322ce
c001e012:	50                   	push   eax
c001e013:	e8 b8 fe ff ff       	call   c001ded0 <findDataTable(unsigned char*, char*)>
c001e018:	83 c4 10             	add    esp,0x10
c001e01b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001e01f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c001e024:	75 1a                	jne    c001e040 <scanMADT()+0xf0>
c001e026:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e02b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c001e031:	83 e2 fe             	and    edx,0xfffffffe
c001e034:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001e03a:	e9 c1 03 00 00       	jmp    c001e400 <scanMADT()+0x4b0>
c001e03f:	90                   	nop
c001e040:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001e048:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e04c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e04f:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001e053:	0f 87 a7 03 00 00    	ja     c001e400 <scanMADT()+0x4b0>
c001e059:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c001e061:	0f 87 99 03 00 00    	ja     c001e400 <scanMADT()+0x4b0>
c001e067:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e06b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001e06f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e073:	8d 50 01             	lea    edx,[eax+0x1]
c001e076:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e07a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e07e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e082:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001e086:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e08a:	8d 50 01             	lea    edx,[eax+0x1]
c001e08d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e091:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e095:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e099:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001e09d:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c001e0a2:	83 f8 02             	cmp    eax,0x2
c001e0a5:	0f 86 51 03 00 00    	jbe    c001e3fc <scanMADT()+0x4ac>
c001e0ab:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e0b0:	85 c0                	test   eax,eax
c001e0b2:	75 58                	jne    c001e10c <scanMADT()+0x1bc>
c001e0b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0b8:	8d 50 01             	lea    edx,[eax+0x1]
c001e0bb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e0bf:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e0c5:	0f b6 d2             	movzx  edx,dl
c001e0c8:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e0cc:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e0d0:	88 82 60 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07a0],al
c001e0d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e0da:	8d 50 01             	lea    edx,[eax+0x1]
c001e0dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e0e1:	8a 15 20 f8 03 c0    	mov    dl,BYTE PTR ds:0xc003f820
c001e0e7:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e0ea:	88 0d 20 f8 03 c0    	mov    BYTE PTR ds:0xc003f820,cl
c001e0f0:	0f b6 d2             	movzx  edx,dl
c001e0f3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e0f7:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e0fb:	88 82 40 f8 03 c0    	mov    BYTE PTR [edx-0x3ffc07c0],al
c001e101:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e106:	e9 d9 02 00 00       	jmp    c001e3e4 <scanMADT()+0x494>
c001e10b:	90                   	nop
c001e10c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e111:	83 f8 01             	cmp    eax,0x1
c001e114:	0f 85 1a 01 00 00    	jne    c001e234 <scanMADT()+0x2e4>
c001e11a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e11e:	8d 50 01             	lea    edx,[eax+0x1]
c001e121:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e125:	8a 15 e0 f6 03 c0    	mov    dl,BYTE PTR ds:0xc003f6e0
c001e12b:	0f b6 d2             	movzx  edx,dl
c001e12e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e132:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001e136:	88 82 00 f7 03 c0    	mov    BYTE PTR [edx-0x3ffc0900],al
c001e13c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c001e141:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e145:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e149:	01 d0                	add    eax,edx
c001e14b:	83 c0 2c             	add    eax,0x2c
c001e14e:	8a 00                	mov    al,BYTE PTR [eax]
c001e150:	0f b6 d0             	movzx  edx,al
c001e153:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e157:	8d 48 01             	lea    ecx,[eax+0x1]
c001e15a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e15e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e162:	0f b6 c0             	movzx  eax,al
c001e165:	c1 e0 08             	shl    eax,0x8
c001e168:	89 d1                	mov    ecx,edx
c001e16a:	09 c1                	or     ecx,eax
c001e16c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e170:	8d 50 02             	lea    edx,[eax+0x2]
c001e173:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e177:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e17b:	0f b6 c0             	movzx  eax,al
c001e17e:	c1 e0 10             	shl    eax,0x10
c001e181:	09 c1                	or     ecx,eax
c001e183:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e187:	8d 50 03             	lea    edx,[eax+0x3]
c001e18a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e18e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e192:	0f b6 c0             	movzx  eax,al
c001e195:	c1 e0 18             	shl    eax,0x18
c001e198:	09 c1                	or     ecx,eax
c001e19a:	89 ca                	mov    edx,ecx
c001e19c:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e1a1:	0f b6 c0             	movzx  eax,al
c001e1a4:	89 14 85 20 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc08e0],edx
c001e1ab:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e1b0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e1b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1b8:	01 d0                	add    eax,edx
c001e1ba:	83 c0 2c             	add    eax,0x2c
c001e1bd:	8a 00                	mov    al,BYTE PTR [eax]
c001e1bf:	0f b6 d0             	movzx  edx,al
c001e1c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1c6:	8d 48 01             	lea    ecx,[eax+0x1]
c001e1c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e1cd:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e1d1:	0f b6 c0             	movzx  eax,al
c001e1d4:	c1 e0 08             	shl    eax,0x8
c001e1d7:	89 d1                	mov    ecx,edx
c001e1d9:	09 c1                	or     ecx,eax
c001e1db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1df:	8d 50 02             	lea    edx,[eax+0x2]
c001e1e2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e1e6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e1ea:	0f b6 c0             	movzx  eax,al
c001e1ed:	c1 e0 10             	shl    eax,0x10
c001e1f0:	09 c1                	or     ecx,eax
c001e1f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e1f6:	8d 50 03             	lea    edx,[eax+0x3]
c001e1f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e1fd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e201:	0f b6 c0             	movzx  eax,al
c001e204:	c1 e0 18             	shl    eax,0x18
c001e207:	09 c1                	or     ecx,eax
c001e209:	89 ca                	mov    edx,ecx
c001e20b:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e210:	0f b6 c0             	movzx  eax,al
c001e213:	89 14 85 a0 f7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0860],edx
c001e21a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e21f:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c001e224:	83 c0 01             	add    eax,0x1
c001e227:	a2 e0 f6 03 c0       	mov    ds:0xc003f6e0,al
c001e22c:	e9 b3 01 00 00       	jmp    c001e3e4 <scanMADT()+0x494>
c001e231:	8d 76 00             	lea    esi,[esi+0x0]
c001e234:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e239:	83 f8 02             	cmp    eax,0x2
c001e23c:	0f 85 ea 00 00 00    	jne    c001e32c <scanMADT()+0x3dc>
c001e242:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e246:	8d 50 01             	lea    edx,[eax+0x1]
c001e249:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e24d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e251:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e255:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001e259:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e25d:	8d 50 01             	lea    edx,[eax+0x1]
c001e260:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e264:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e268:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e26c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001e270:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e274:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e278:	01 d0                	add    eax,edx
c001e27a:	83 c0 2c             	add    eax,0x2c
c001e27d:	8a 00                	mov    al,BYTE PTR [eax]
c001e27f:	0f b6 d0             	movzx  edx,al
c001e282:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e286:	8d 48 01             	lea    ecx,[eax+0x1]
c001e289:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e28d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e291:	0f b6 c0             	movzx  eax,al
c001e294:	c1 e0 08             	shl    eax,0x8
c001e297:	89 d1                	mov    ecx,edx
c001e299:	09 c1                	or     ecx,eax
c001e29b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e29f:	8d 50 02             	lea    edx,[eax+0x2]
c001e2a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2aa:	0f b6 c0             	movzx  eax,al
c001e2ad:	c1 e0 10             	shl    eax,0x10
c001e2b0:	09 c1                	or     ecx,eax
c001e2b2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2b6:	8d 50 03             	lea    edx,[eax+0x3]
c001e2b9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e2bd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001e2c1:	0f b6 c0             	movzx  eax,al
c001e2c4:	c1 e0 18             	shl    eax,0x18
c001e2c7:	09 c8                	or     eax,ecx
c001e2c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e2cd:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001e2d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e2d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2da:	01 d0                	add    eax,edx
c001e2dc:	83 c0 2c             	add    eax,0x2c
c001e2df:	8a 00                	mov    al,BYTE PTR [eax]
c001e2e1:	0f b6 c0             	movzx  eax,al
c001e2e4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e2e8:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e2eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e2ef:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001e2f3:	0f b6 d2             	movzx  edx,dl
c001e2f6:	c1 e2 08             	shl    edx,0x8
c001e2f9:	09 d0                	or     eax,edx
c001e2fb:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001e300:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e305:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001e30a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e30e:	88 90 e8 3a 03 c0    	mov    BYTE PTR [eax-0x3ffcc518],dl
c001e314:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001e319:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001e31e:	66 89 84 12 c0 f6 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffc0940],ax
c001e326:	e9 b9 00 00 00       	jmp    c001e3e4 <scanMADT()+0x494>
c001e32b:	90                   	nop
c001e32c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e331:	83 f8 04             	cmp    eax,0x4
c001e334:	0f 85 9a 00 00 00    	jne    c001e3d4 <scanMADT()+0x484>
c001e33a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e33e:	8d 50 01             	lea    edx,[eax+0x1]
c001e341:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e345:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e349:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e34d:	0f b6 c0             	movzx  eax,al
c001e350:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e354:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e358:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e35c:	01 d0                	add    eax,edx
c001e35e:	83 c0 2c             	add    eax,0x2c
c001e361:	8a 00                	mov    al,BYTE PTR [eax]
c001e363:	0f b6 d0             	movzx  edx,al
c001e366:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e36a:	8d 48 01             	lea    ecx,[eax+0x1]
c001e36d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e371:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001e375:	0f b6 c0             	movzx  eax,al
c001e378:	c1 e0 08             	shl    eax,0x8
c001e37b:	09 d0                	or     eax,edx
c001e37d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e381:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001e386:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e38a:	8d 50 01             	lea    edx,[eax+0x1]
c001e38d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e391:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e395:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001e399:	0f b6 c0             	movzx  eax,al
c001e39c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a4:	c1 e0 08             	shl    eax,0x8
c001e3a7:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001e3ab:	89 c1                	mov    ecx,eax
c001e3ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3b1:	c1 e0 18             	shl    eax,0x18
c001e3b4:	89 c3                	mov    ebx,eax
c001e3b6:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c001e3bb:	8d 50 01             	lea    edx,[eax+0x1]
c001e3be:	89 15 30 f6 03 c0    	mov    DWORD PTR ds:0xc003f630,edx
c001e3c4:	09 d9                	or     ecx,ebx
c001e3c6:	89 ca                	mov    edx,ecx
c001e3c8:	89 14 85 40 f6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc09c0],edx
c001e3cf:	eb 13                	jmp    c001e3e4 <scanMADT()+0x494>
c001e3d1:	8d 76 00             	lea    esi,[esi+0x0]
c001e3d4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c001e3d9:	83 f8 05             	cmp    eax,0x5
c001e3dc:	75 06                	jne    c001e3e4 <scanMADT()+0x494>
c001e3de:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001e3e3:	90                   	nop
c001e3e4:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001e3e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e3ed:	01 d0                	add    eax,edx
c001e3ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001e3f3:	e9 50 fc ff ff       	jmp    c001e048 <scanMADT()+0xf8>
c001e3f8:	90                   	nop
c001e3f9:	eb 05                	jmp    c001e400 <scanMADT()+0x4b0>
c001e3fb:	90                   	nop
c001e3fc:	90                   	nop
c001e3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e400:	83 c4 38             	add    esp,0x38
c001e403:	5b                   	pop    ebx
c001e404:	c3                   	ret    
c001e405:	90                   	nop
c001e406:	66 90                	xchg   ax,ax

c001e408 <ACPI::ACPI()>:
c001e408:	83 ec 0c             	sub    esp,0xc
c001e40b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e40f:	83 ec 08             	sub    esp,0x8
c001e412:	68 d3 22 03 c0       	push   0xc00322d3
c001e417:	50                   	push   eax
c001e418:	e8 53 cf ff ff       	call   c001b370 <Device::Device(char const*)>
c001e41d:	83 c4 10             	add    esp,0x10
c001e420:	ba e0 24 03 c0       	mov    edx,0xc00324e0
c001e425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e429:	89 10                	mov    DWORD PTR [eax],edx
c001e42b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e42f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e43a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001e444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e448:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001e452:	e8 f9 fa ff ff       	call   c001df50 <scanMADT()>
c001e457:	90                   	nop
c001e458:	83 c4 0c             	add    esp,0xc
c001e45b:	c3                   	ret    

c001e45c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c001e45c:	83 ec 2c             	sub    esp,0x2c
c001e45f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001e463:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e467:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e46b:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001e46f:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001e474:	88 d0                	mov    al,dl
c001e476:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e47a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e47f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001e487:	90                   	nop
c001e488:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e48c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e492:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001e496:	0f 8d b0 00 00 00    	jge    c001e54c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c001e49c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e4a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e4a4:	83 c2 2a             	add    edx,0x2a
c001e4a7:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001e4ab:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e4b0:	0f b7 c0             	movzx  eax,ax
c001e4b3:	39 c2                	cmp    edx,eax
c001e4b5:	0f 85 85 00 00 00    	jne    c001e540 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e4bb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e4bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e4c3:	83 c2 2a             	add    edx,0x2a
c001e4c6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001e4ca:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c001e4cf:	0f b6 c0             	movzx  eax,al
c001e4d2:	39 c2                	cmp    edx,eax
c001e4d4:	75 6a                	jne    c001e540 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c001e4d6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e4db:	85 c0                	test   eax,eax
c001e4dd:	74 3d                	je     c001e51c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c001e4df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e4e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e4e7:	83 c2 2a             	add    edx,0x2a
c001e4ea:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001e4ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e4f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e4f5:	39 c2                	cmp    edx,eax
c001e4f7:	74 13                	je     c001e50c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c001e4f9:	83 ec 0c             	sub    esp,0xc
c001e4fc:	68 60 24 03 c0       	push   0xc0032460
c001e501:	e8 a0 1c 00 00       	call   c00201a6 <KePanic(char const*)>
c001e506:	83 c4 10             	add    esp,0x10
c001e509:	8d 76 00             	lea    esi,[esi+0x0]
c001e50c:	83 ec 0c             	sub    esp,0xc
c001e50f:	68 d8 22 03 c0       	push   0xc00322d8
c001e514:	e8 8d 1c 00 00       	call   c00201a6 <KePanic(char const*)>
c001e519:	83 c4 10             	add    esp,0x10
c001e51c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e520:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e524:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e528:	83 c2 2a             	add    edx,0x2a
c001e52b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001e52f:	8b 02                	mov    eax,DWORD PTR [edx]
c001e531:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001e534:	89 01                	mov    DWORD PTR [ecx],eax
c001e536:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001e539:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e53e:	66 90                	xchg   ax,ax
c001e540:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001e545:	e9 3e ff ff ff       	jmp    c001e488 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c001e54a:	66 90                	xchg   ax,ax
c001e54c:	90                   	nop
c001e54d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e551:	83 c4 2c             	add    esp,0x2c
c001e554:	c2 04 00             	ret    0x4
c001e557:	90                   	nop

c001e558 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001e558:	83 ec 1c             	sub    esp,0x1c
c001e55b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e55f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001e563:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e567:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001e56c:	88 c8                	mov    al,cl
c001e56e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001e572:	88 d0                	mov    al,dl
c001e574:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001e578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e57c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e582:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e586:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e589:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001e58d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001e591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e595:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e59b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e59f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001e5a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e5a6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001e5ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5af:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e5b5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e5b9:	83 c0 01             	add    eax,0x1
c001e5bc:	88 c1                	mov    cl,al
c001e5be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5c2:	83 c2 2a             	add    edx,0x2a
c001e5c5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001e5c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5cd:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001e5d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5d7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001e5da:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e5de:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001e5e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5e6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e5ec:	8d 50 01             	lea    edx,[eax+0x1]
c001e5ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5f3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001e5f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5fd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001e603:	3d 00 02 00 00       	cmp    eax,0x200
c001e608:	75 12                	jne    c001e61c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c001e60a:	83 ec 0c             	sub    esp,0xc
c001e60d:	68 e7 22 03 c0       	push   0xc00322e7
c001e612:	e8 8f 1b 00 00       	call   c00201a6 <KePanic(char const*)>
c001e617:	83 c4 10             	add    esp,0x10
c001e61a:	66 90                	xchg   ax,ax
c001e61c:	90                   	nop
c001e61d:	83 c4 1c             	add    esp,0x1c
c001e620:	c3                   	ret    
c001e621:	90                   	nop
c001e622:	66 90                	xchg   ax,ax

c001e624 <ACPI::setScreenBrightnessLevel(void*, int)>:
c001e624:	b8 00 00 00 00       	mov    eax,0x0
c001e629:	c3                   	ret    
c001e62a:	66 90                	xchg   ax,ax

c001e62c <ACPI::detectPCI()>:
c001e62c:	53                   	push   ebx
c001e62d:	83 ec 28             	sub    esp,0x28
c001e630:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e635:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001e63a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e63f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e645:	83 e0 04             	and    eax,0x4
c001e648:	0f b6 c0             	movzx  eax,al
c001e64b:	85 c0                	test   eax,eax
c001e64d:	74 2d                	je     c001e67c <ACPI::detectPCI()+0x50>
c001e64f:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001e654:	83 ec 08             	sub    esp,0x8
c001e657:	68 04 23 03 c0       	push   0xc0032304
c001e65c:	50                   	push   eax
c001e65d:	e8 6e f8 ff ff       	call   c001ded0 <findDataTable(unsigned char*, char*)>
c001e662:	83 c4 10             	add    esp,0x10
c001e665:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e669:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001e66e:	74 0c                	je     c001e67c <ACPI::detectPCI()+0x50>
c001e670:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e675:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e67a:	66 90                	xchg   ax,ax
c001e67c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c001e684:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e688:	8a 00                	mov    al,BYTE PTR [eax]
c001e68a:	0f b6 c0             	movzx  eax,al
c001e68d:	83 f8 01             	cmp    eax,0x1
c001e690:	75 0e                	jne    c001e6a0 <ACPI::detectPCI()+0x74>
c001e692:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e697:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e69c:	eb 2e                	jmp    c001e6cc <ACPI::detectPCI()+0xa0>
c001e69e:	66 90                	xchg   ax,ax
c001e6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e6a4:	8a 00                	mov    al,BYTE PTR [eax]
c001e6a6:	0f b6 c0             	movzx  eax,al
c001e6a9:	83 f8 02             	cmp    eax,0x2
c001e6ac:	75 1e                	jne    c001e6cc <ACPI::detectPCI()+0xa0>
c001e6ae:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e6b3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e6b8:	85 c0                	test   eax,eax
c001e6ba:	74 10                	je     c001e6cc <ACPI::detectPCI()+0xa0>
c001e6bc:	83 ec 0c             	sub    esp,0xc
c001e6bf:	68 90 24 03 c0       	push   0xc0032490
c001e6c4:	e8 dd 1a 00 00       	call   c00201a6 <KePanic(char const*)>
c001e6c9:	83 c4 10             	add    esp,0x10
c001e6cc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001e6d0:	83 f0 01             	xor    eax,0x1
c001e6d3:	0f b6 c0             	movzx  eax,al
c001e6d6:	85 c0                	test   eax,eax
c001e6d8:	74 46                	je     c001e720 <ACPI::detectPCI()+0xf4>
c001e6da:	e8 51 1a fe ff       	call   c0000130 <manualPCIProbe>
c001e6df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e6e3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e6e8:	75 0e                	jne    c001e6f8 <ACPI::detectPCI()+0xcc>
c001e6ea:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e6ef:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c001e6f4:	eb 2a                	jmp    c001e720 <ACPI::detectPCI()+0xf4>
c001e6f6:	66 90                	xchg   ax,ax
c001e6f8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c001e6fd:	75 21                	jne    c001e720 <ACPI::detectPCI()+0xf4>
c001e6ff:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001e704:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e709:	85 c0                	test   eax,eax
c001e70b:	74 13                	je     c001e720 <ACPI::detectPCI()+0xf4>
c001e70d:	83 ec 0c             	sub    esp,0xc
c001e710:	68 90 24 03 c0       	push   0xc0032490
c001e715:	e8 8c 1a 00 00       	call   c00201a6 <KePanic(char const*)>
c001e71a:	83 c4 10             	add    esp,0x10
c001e71d:	8d 76 00             	lea    esi,[esi+0x0]
c001e720:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c001e725:	85 c0                	test   eax,eax
c001e727:	0f 84 87 00 00 00    	je     c001e7b4 <ACPI::detectPCI()+0x188>
c001e72d:	83 ec 0c             	sub    esp,0xc
c001e730:	68 09 23 03 c0       	push   0xc0032309
c001e735:	e8 09 13 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c001e73a:	83 c4 10             	add    esp,0x10
c001e73d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c001e745:	83 ec 0c             	sub    esp,0xc
c001e748:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e74c:	e8 ad 7b ff ff       	call   c00162fe <malloc>
c001e751:	83 c4 10             	add    esp,0x10
c001e754:	89 c3                	mov    ebx,eax
c001e756:	83 ec 0c             	sub    esp,0xc
c001e759:	53                   	push   ebx
c001e75a:	e8 51 b8 00 00       	call   c0029fb0 <PCI::PCI()>
c001e75f:	83 c4 10             	add    esp,0x10
c001e762:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001e766:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e76a:	83 ec 08             	sub    esp,0x8
c001e76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e771:	50                   	push   eax
c001e772:	e8 97 ca ff ff       	call   c001b20e <Device::addChild(Device*)>
c001e777:	83 c4 10             	add    esp,0x10
c001e77a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e77e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e780:	83 c0 08             	add    eax,0x8
c001e783:	8b 00                	mov    eax,DWORD PTR [eax]
c001e785:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c001e78a:	85 d2                	test   edx,edx
c001e78c:	74 0a                	je     c001e798 <ACPI::detectPCI()+0x16c>
c001e78e:	ba 01 00 00 00       	mov    edx,0x1
c001e793:	eb 0b                	jmp    c001e7a0 <ACPI::detectPCI()+0x174>
c001e795:	8d 76 00             	lea    esi,[esi+0x0]
c001e798:	ba 02 00 00 00       	mov    edx,0x2
c001e79d:	8d 76 00             	lea    esi,[esi+0x0]
c001e7a0:	6a 00                	push   0x0
c001e7a2:	6a 00                	push   0x0
c001e7a4:	52                   	push   edx
c001e7a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e7a9:	ff d0                	call   eax
c001e7ab:	83 c4 10             	add    esp,0x10
c001e7ae:	e9 91 00 00 00       	jmp    c001e844 <ACPI::detectPCI()+0x218>
c001e7b3:	90                   	nop
c001e7b4:	83 ec 0c             	sub    esp,0xc
c001e7b7:	68 21 23 03 c0       	push   0xc0032321
c001e7bc:	e8 82 12 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c001e7c1:	83 c4 10             	add    esp,0x10
c001e7c4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c001e7cb:	83 ec 0c             	sub    esp,0xc
c001e7ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e7d2:	e8 27 7b ff ff       	call   c00162fe <malloc>
c001e7d7:	83 c4 10             	add    esp,0x10
c001e7da:	89 c3                	mov    ebx,eax
c001e7dc:	83 ec 0c             	sub    esp,0xc
c001e7df:	53                   	push   ebx
c001e7e0:	e8 65 c3 00 00       	call   c002ab4a <IDE::IDE()>
c001e7e5:	83 c4 10             	add    esp,0x10
c001e7e8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e7ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e7f0:	83 ec 08             	sub    esp,0x8
c001e7f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e7f7:	50                   	push   eax
c001e7f8:	e8 11 ca ff ff       	call   c001b20e <Device::addChild(Device*)>
c001e7fd:	83 c4 10             	add    esp,0x10
c001e800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e804:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001e80e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e812:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c001e81b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e81f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c001e828:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e82c:	8b 00                	mov    eax,DWORD PTR [eax]
c001e82e:	83 c0 08             	add    eax,0x8
c001e831:	8b 00                	mov    eax,DWORD PTR [eax]
c001e833:	6a 00                	push   0x0
c001e835:	6a 00                	push   0x0
c001e837:	6a 00                	push   0x0
c001e839:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e83d:	ff d0                	call   eax
c001e83f:	83 c4 10             	add    esp,0x10
c001e842:	66 90                	xchg   ax,ax
c001e844:	90                   	nop
c001e845:	83 c4 28             	add    esp,0x28
c001e848:	5b                   	pop    ebx
c001e849:	c3                   	ret    
c001e84a:	66 90                	xchg   ax,ax

c001e84c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001e84c:	83 ec 1c             	sub    esp,0x1c
c001e84f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e853:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001e856:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e85a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e85f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e864:	83 ec 08             	sub    esp,0x8
c001e867:	52                   	push   edx
c001e868:	50                   	push   eax
c001e869:	e8 52 71 ff ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c001e86e:	83 c4 10             	add    esp,0x10
c001e871:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001e875:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001e87a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001e87f:	83 ec 04             	sub    esp,0x4
c001e882:	6a 01                	push   0x1
c001e884:	52                   	push   edx
c001e885:	50                   	push   eax
c001e886:	e8 4f 72 ff ff       	call   c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>
c001e88b:	83 c4 10             	add    esp,0x10
c001e88e:	90                   	nop
c001e88f:	83 c4 1c             	add    esp,0x1c
c001e892:	c3                   	ret    
c001e893:	90                   	nop

c001e894 <ACPI::sleep()>:
c001e894:	83 ec 0c             	sub    esp,0xc
c001e897:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e89c:	85 c0                	test   eax,eax
c001e89e:	74 08                	je     c001e8a8 <ACPI::sleep()+0x14>
c001e8a0:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c001e8a5:	ff d0                	call   eax
c001e8a7:	90                   	nop
c001e8a8:	90                   	nop
c001e8a9:	83 c4 0c             	add    esp,0xc
c001e8ac:	c3                   	ret    
c001e8ad:	90                   	nop
c001e8ae:	66 90                	xchg   ax,ax

c001e8b0 <ACPI::open(int, int, void*)>:
c001e8b0:	57                   	push   edi
c001e8b1:	56                   	push   esi
c001e8b2:	53                   	push   ebx
c001e8b3:	81 ec 70 01 00 00    	sub    esp,0x170
c001e8b9:	83 ec 0c             	sub    esp,0xc
c001e8bc:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001e8c3:	e8 64 fd ff ff       	call   c001e62c <ACPI::detectPCI()>
c001e8c8:	83 c4 10             	add    esp,0x10
c001e8cb:	83 ec 0c             	sub    esp,0xc
c001e8ce:	68 b8 24 03 c0       	push   0xc00324b8
c001e8d3:	e8 6b 11 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c001e8d8:	83 c4 10             	add    esp,0x10
c001e8db:	b8 4c 05 00 00       	mov    eax,0x54c
c001e8e0:	8a 00                	mov    al,BYTE PTR [eax]
c001e8e2:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c001e8e9:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e8f1:	83 f8 01             	cmp    eax,0x1
c001e8f4:	75 12                	jne    c001e908 <ACPI::open(int, int, void*)+0x58>
c001e8f6:	83 ec 0c             	sub    esp,0xc
c001e8f9:	68 36 23 03 c0       	push   0xc0032336
c001e8fe:	e8 84 53 00 00       	call   c0023c87 <Thr::loadKernelSymbolTable(char const*)>
c001e903:	83 c4 10             	add    esp,0x10
c001e906:	eb 34                	jmp    c001e93c <ACPI::open(int, int, void*)+0x8c>
c001e908:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c001e910:	3d bb 00 00 00       	cmp    eax,0xbb
c001e915:	75 15                	jne    c001e92c <ACPI::open(int, int, void*)+0x7c>
c001e917:	83 ec 0c             	sub    esp,0xc
c001e91a:	68 54 23 03 c0       	push   0xc0032354
c001e91f:	e8 63 53 00 00       	call   c0023c87 <Thr::loadKernelSymbolTable(char const*)>
c001e924:	83 c4 10             	add    esp,0x10
c001e927:	eb 13                	jmp    c001e93c <ACPI::open(int, int, void*)+0x8c>
c001e929:	8d 76 00             	lea    esi,[esi+0x0]
c001e92c:	83 ec 0c             	sub    esp,0xc
c001e92f:	68 72 23 03 c0       	push   0xc0032372
c001e934:	e8 6d 18 00 00       	call   c00201a6 <KePanic(char const*)>
c001e939:	83 c4 10             	add    esp,0x10
c001e93c:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001e944:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001e94f:	83 ec 0c             	sub    esp,0xc
c001e952:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001e959:	e8 a0 79 ff ff       	call   c00162fe <malloc>
c001e95e:	83 c4 10             	add    esp,0x10
c001e961:	89 c3                	mov    ebx,eax
c001e963:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001e968:	83 ec 04             	sub    esp,0x4
c001e96b:	50                   	push   eax
c001e96c:	68 8c 23 03 c0       	push   0xc003238c
c001e971:	53                   	push   ebx
c001e972:	e8 1d ba ff ff       	call   c001a394 <File::File(char const*, Process*)>
c001e977:	83 c4 10             	add    esp,0x10
c001e97a:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001e981:	83 ec 08             	sub    esp,0x8
c001e984:	6a 01                	push   0x1
c001e986:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001e98d:	e8 20 ba ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c001e992:	83 c4 10             	add    esp,0x10
c001e995:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001e99c:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001e9a4:	75 16                	jne    c001e9bc <ACPI::open(int, int, void*)+0x10c>
c001e9a6:	83 ec 0c             	sub    esp,0xc
c001e9a9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001e9b0:	e8 5b ba ff ff       	call   c001a410 <File::close()>
c001e9b5:	83 c4 10             	add    esp,0x10
c001e9b8:	eb 0a                	jmp    c001e9c4 <ACPI::open(int, int, void*)+0x114>
c001e9ba:	66 90                	xchg   ax,ax
c001e9bc:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c001e9c4:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001e9cc:	74 1e                	je     c001e9ec <ACPI::open(int, int, void*)+0x13c>
c001e9ce:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c001e9d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9d7:	83 c0 08             	add    eax,0x8
c001e9da:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9dc:	83 ec 0c             	sub    esp,0xc
c001e9df:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001e9e6:	ff d0                	call   eax
c001e9e8:	83 c4 10             	add    esp,0x10
c001e9eb:	90                   	nop
c001e9ec:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c001e9f3:	83 f0 01             	xor    eax,0x1
c001e9f6:	0f b6 c0             	movzx  eax,al
c001e9f9:	85 c0                	test   eax,eax
c001e9fb:	74 43                	je     c001ea40 <ACPI::open(int, int, void*)+0x190>
c001e9fd:	83 ec 0c             	sub    esp,0xc
c001ea00:	68 aa 23 03 c0       	push   0xc00323aa
c001ea05:	e8 39 10 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c001ea0a:	83 c4 10             	add    esp,0x10
c001ea0d:	83 ec 04             	sub    esp,0x4
c001ea10:	6a 0c                	push   0xc
c001ea12:	68 c5 23 03 c0       	push   0xc00323c5
c001ea17:	68 d6 23 03 c0       	push   0xc00323d6
c001ea1c:	e8 a5 44 00 00       	call   c0022ec6 <Reg::readIntWithDefault(char*, char*, int)>
c001ea21:	83 c4 10             	add    esp,0x10
c001ea24:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c001ea2b:	83 ec 0c             	sub    esp,0xc
c001ea2e:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001ea35:	e8 4a 96 ff ff       	call   c0018084 <Virt::setupPageSwapping(int)>
c001ea3a:	83 c4 10             	add    esp,0x10
c001ea3d:	8d 76 00             	lea    esi,[esi+0x0]
c001ea40:	83 ec 0c             	sub    esp,0xc
c001ea43:	68 04 0e 03 c0       	push   0xc0030e04
c001ea48:	e8 f6 0f 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c001ea4d:	83 c4 10             	add    esp,0x10
c001ea50:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c001ea57:	83 ec 08             	sub    esp,0x8
c001ea5a:	6a 13                	push   0x13
c001ea5c:	50                   	push   eax
c001ea5d:	e8 da ca ff ff       	call   c001b53c <getDevicesOfType(DeviceType)>
c001ea62:	83 c4 0c             	add    esp,0xc
c001ea65:	8d 76 00             	lea    esi,[esi+0x0]
c001ea68:	83 ec 0c             	sub    esp,0xc
c001ea6b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ea72:	50                   	push   eax
c001ea73:	e8 e8 02 01 00       	call   c002ed60 <LinkedList<Device>::isEmpty()>
c001ea78:	83 c4 10             	add    esp,0x10
c001ea7b:	83 f0 01             	xor    eax,0x1
c001ea7e:	0f b6 c0             	movzx  eax,al
c001ea81:	85 c0                	test   eax,eax
c001ea83:	0f 84 47 01 00 00    	je     c001ebd0 <ACPI::open(int, int, void*)+0x320>
c001ea89:	83 ec 0c             	sub    esp,0xc
c001ea8c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ea93:	50                   	push   eax
c001ea94:	e8 e3 02 01 00       	call   c002ed7c <LinkedList<Device>::getFirstElement()>
c001ea99:	83 c4 10             	add    esp,0x10
c001ea9c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c001eaa3:	83 ec 0c             	sub    esp,0xc
c001eaa6:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001eaad:	50                   	push   eax
c001eaae:	e8 d1 02 01 00       	call   c002ed84 <LinkedList<Device>::removeFirst()>
c001eab3:	83 c4 10             	add    esp,0x10
c001eab6:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c001eabd:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c001eac4:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c001eacb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eacf:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001ead5:	ba 09 00 00 00       	mov    edx,0x9
c001eada:	fc                   	cld    
c001eadb:	89 c7                	mov    edi,eax
c001eadd:	89 de                	mov    esi,ebx
c001eadf:	89 d1                	mov    ecx,edx
c001eae1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eae3:	83 ec 08             	sub    esp,0x8
c001eae6:	8d 44 24 38          	lea    eax,[esp+0x38]
c001eaea:	50                   	push   eax
c001eaeb:	83 ec 24             	sub    esp,0x24
c001eaee:	89 e0                	mov    eax,esp
c001eaf0:	89 c3                	mov    ebx,eax
c001eaf2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001eaf6:	ba 09 00 00 00       	mov    edx,0x9
c001eafb:	89 df                	mov    edi,ebx
c001eafd:	89 c6                	mov    esi,eax
c001eaff:	89 d1                	mov    ecx,edx
c001eb01:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001eb03:	e8 92 b9 00 00       	call   c002a49a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001eb08:	83 c4 30             	add    esp,0x30
c001eb0b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001eb12:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c001eb1a:	0f 84 48 ff ff ff    	je     c001ea68 <ACPI::open(int, int, void*)+0x1b8>
c001eb20:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001eb2b:	83 ec 0c             	sub    esp,0xc
c001eb2e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001eb35:	e8 c4 77 ff ff       	call   c00162fe <malloc>
c001eb3a:	83 c4 10             	add    esp,0x10
c001eb3d:	89 c3                	mov    ebx,eax
c001eb3f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001eb44:	83 ec 04             	sub    esp,0x4
c001eb47:	50                   	push   eax
c001eb48:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001eb4f:	53                   	push   ebx
c001eb50:	e8 3f b8 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c001eb55:	83 c4 10             	add    esp,0x10
c001eb58:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c001eb5f:	83 ec 0c             	sub    esp,0xc
c001eb62:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001eb69:	e8 08 bb ff ff       	call   c001a676 <File::exists()>
c001eb6e:	83 c4 10             	add    esp,0x10
c001eb71:	0f b6 c0             	movzx  eax,al
c001eb74:	85 c0                	test   eax,eax
c001eb76:	74 28                	je     c001eba0 <ACPI::open(int, int, void*)+0x2f0>
c001eb78:	83 ec 08             	sub    esp,0x8
c001eb7b:	6a 01                	push   0x1
c001eb7d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001eb84:	e8 78 5b 00 00       	call   c0024701 <Thr::loadDLL(char const*, bool)>
c001eb89:	83 c4 10             	add    esp,0x10
c001eb8c:	83 ec 08             	sub    esp,0x8
c001eb8f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001eb96:	50                   	push   eax
c001eb97:	e8 b7 5d 00 00       	call   c0024953 <Thr::executeDLL(unsigned long, void*)>
c001eb9c:	83 c4 10             	add    esp,0x10
c001eb9f:	90                   	nop
c001eba0:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001eba8:	0f 84 ba fe ff ff    	je     c001ea68 <ACPI::open(int, int, void*)+0x1b8>
c001ebae:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001ebb5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebb7:	83 c0 08             	add    eax,0x8
c001ebba:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebbc:	83 ec 0c             	sub    esp,0xc
c001ebbf:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c001ebc6:	ff d0                	call   eax
c001ebc8:	83 c4 10             	add    esp,0x10
c001ebcb:	e9 98 fe ff ff       	jmp    c001ea68 <ACPI::open(int, int, void*)+0x1b8>
c001ebd0:	83 ec 0c             	sub    esp,0xc
c001ebd3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001ebda:	50                   	push   eax
c001ebdb:	e8 7c 01 01 00       	call   c002ed5c <LinkedList<Device>::~LinkedList()>
c001ebe0:	83 c4 10             	add    esp,0x10
c001ebe3:	8b 1d bc a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9bc
c001ebe9:	83 ec 08             	sub    esp,0x8
c001ebec:	6a 01                	push   0x1
c001ebee:	68 dd 23 03 c0       	push   0xc00323dd
c001ebf3:	e8 09 5b 00 00       	call   c0024701 <Thr::loadDLL(char const*, bool)>
c001ebf8:	83 c4 10             	add    esp,0x10
c001ebfb:	83 ec 08             	sub    esp,0x8
c001ebfe:	53                   	push   ebx
c001ebff:	50                   	push   eax
c001ec00:	e8 4e 5d 00 00       	call   c0024953 <Thr::executeDLL(unsigned long, void*)>
c001ec05:	83 c4 10             	add    esp,0x10
c001ec08:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001ec0d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001ec13:	83 e0 04             	and    eax,0x4
c001ec16:	0f b6 c0             	movzx  eax,al
c001ec19:	85 c0                	test   eax,eax
c001ec1b:	0f 84 1b 01 00 00    	je     c001ed3c <ACPI::open(int, int, void*)+0x48c>
c001ec21:	83 ec 0c             	sub    esp,0xc
c001ec24:	68 fa 23 03 c0       	push   0xc00323fa
c001ec29:	e8 15 0e 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c001ec2e:	83 c4 10             	add    esp,0x10
c001ec31:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001ec3c:	83 ec 0c             	sub    esp,0xc
c001ec3f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001ec46:	e8 b3 76 ff ff       	call   c00162fe <malloc>
c001ec4b:	83 c4 10             	add    esp,0x10
c001ec4e:	89 c3                	mov    ebx,eax
c001ec50:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c001ec55:	83 ec 04             	sub    esp,0x4
c001ec58:	50                   	push   eax
c001ec59:	68 17 24 03 c0       	push   0xc0032417
c001ec5e:	53                   	push   ebx
c001ec5f:	e8 30 b7 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c001ec64:	83 c4 10             	add    esp,0x10
c001ec67:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c001ec6e:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ec76:	74 20                	je     c001ec98 <ACPI::open(int, int, void*)+0x3e8>
c001ec78:	83 ec 0c             	sub    esp,0xc
c001ec7b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001ec82:	e8 ef b9 ff ff       	call   c001a676 <File::exists()>
c001ec87:	83 c4 10             	add    esp,0x10
c001ec8a:	0f b6 c0             	movzx  eax,al
c001ec8d:	85 c0                	test   eax,eax
c001ec8f:	74 07                	je     c001ec98 <ACPI::open(int, int, void*)+0x3e8>
c001ec91:	b0 01                	mov    al,0x1
c001ec93:	eb 07                	jmp    c001ec9c <ACPI::open(int, int, void*)+0x3ec>
c001ec95:	8d 76 00             	lea    esi,[esi+0x0]
c001ec98:	b0 00                	mov    al,0x0
c001ec9a:	66 90                	xchg   ax,ax
c001ec9c:	0f b6 c0             	movzx  eax,al
c001ec9f:	85 c0                	test   eax,eax
c001eca1:	74 25                	je     c001ecc8 <ACPI::open(int, int, void*)+0x418>
c001eca3:	83 ec 08             	sub    esp,0x8
c001eca6:	6a 01                	push   0x1
c001eca8:	68 17 24 03 c0       	push   0xc0032417
c001ecad:	e8 4f 5a 00 00       	call   c0024701 <Thr::loadDLL(char const*, bool)>
c001ecb2:	83 c4 10             	add    esp,0x10
c001ecb5:	83 ec 08             	sub    esp,0x8
c001ecb8:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c001ecbf:	50                   	push   eax
c001ecc0:	e8 8e 5c 00 00       	call   c0024953 <Thr::executeDLL(unsigned long, void*)>
c001ecc5:	83 c4 10             	add    esp,0x10
c001ecc8:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ecd0:	74 2a                	je     c001ecfc <ACPI::open(int, int, void*)+0x44c>
c001ecd2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001ecda:	74 20                	je     c001ecfc <ACPI::open(int, int, void*)+0x44c>
c001ecdc:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001ece3:	8b 00                	mov    eax,DWORD PTR [eax]
c001ece5:	83 c0 08             	add    eax,0x8
c001ece8:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecea:	83 ec 0c             	sub    esp,0xc
c001eced:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001ecf4:	ff d0                	call   eax
c001ecf6:	83 c4 10             	add    esp,0x10
c001ecf9:	8d 76 00             	lea    esi,[esi+0x0]
c001ecfc:	a1 28 f6 03 c0       	mov    eax,ds:0xc003f628
c001ed01:	83 ec 08             	sub    esp,0x8
c001ed04:	68 34 24 03 c0       	push   0xc0032434
c001ed09:	50                   	push   eax
c001ed0a:	e8 c1 f1 ff ff       	call   c001ded0 <findDataTable(unsigned char*, char*)>
c001ed0f:	83 c4 10             	add    esp,0x10
c001ed12:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001ed19:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001ed21:	74 19                	je     c001ed3c <ACPI::open(int, int, void*)+0x48c>
c001ed23:	83 ec 08             	sub    esp,0x8
c001ed26:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001ed2d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001ed34:	e8 13 fb ff ff       	call   c001e84c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001ed39:	83 c4 10             	add    esp,0x10
c001ed3c:	b8 00 00 00 00       	mov    eax,0x0
c001ed41:	81 c4 70 01 00 00    	add    esp,0x170
c001ed47:	5b                   	pop    ebx
c001ed48:	5e                   	pop    esi
c001ed49:	5f                   	pop    edi
c001ed4a:	c3                   	ret    
c001ed4b:	90                   	nop

c001ed4c <CPU::close(int, int, void*)>:
c001ed4c:	31 c0                	xor    eax,eax
c001ed4e:	c3                   	ret    
c001ed4f:	90                   	nop

c001ed50 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001ed50:	60                   	pusha  
c001ed51:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ed55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ed5d:	9c                   	pushf  
c001ed5e:	fa                   	cli    
c001ed5f:	0f 09                	wbinvd 
c001ed61:	0f 30                	wrmsr  
c001ed63:	9d                   	popf   
c001ed64:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ed68:	89 02                	mov    DWORD PTR [edx],eax
c001ed6a:	61                   	popa   
c001ed6b:	c3                   	ret    

c001ed6c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c001ed6c:	60                   	pusha  
c001ed6d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ed71:	9c                   	pushf  
c001ed72:	fa                   	cli    
c001ed73:	0f 09                	wbinvd 
c001ed75:	31 c0                	xor    eax,eax
c001ed77:	31 d2                	xor    edx,edx
c001ed79:	0f 32                	rdmsr  
c001ed7b:	9d                   	popf   
c001ed7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ed80:	89 02                	mov    DWORD PTR [edx],eax
c001ed82:	61                   	popa   
c001ed83:	c3                   	ret    

c001ed84 <CPU::AMD_K6_writeback(int, int, int)>:
c001ed84:	56                   	push   esi
c001ed85:	53                   	push   ebx
c001ed86:	83 ec 10             	sub    esp,0x10
c001ed89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ed8d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001ed92:	75 5d                	jne    c001edf1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001ed94:	83 f8 08             	cmp    eax,0x8
c001ed97:	75 09                	jne    c001eda2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001ed99:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001ed9e:	7e 13                	jle    c001edb3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001eda0:	eb 30                	jmp    c001edd2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001eda2:	83 f8 06             	cmp    eax,0x6
c001eda5:	7c 4a                	jl     c001edf1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001eda7:	83 f8 07             	cmp    eax,0x7
c001edaa:	7e 07                	jle    c001edb3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001edac:	83 f8 09             	cmp    eax,0x9
c001edaf:	74 21                	je     c001edd2 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001edb1:	eb 3e                	jmp    c001edf1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001edb3:	89 e6                	mov    esi,esp
c001edb5:	8b 1d e0 a9 03 c0    	mov    ebx,DWORD PTR ds:0xc003a9e0
c001edbb:	56                   	push   esi
c001edbc:	c1 eb 15             	shr    ebx,0x15
c001edbf:	68 82 00 00 c0       	push   0xc0000082
c001edc4:	83 e3 7e             	and    ebx,0x7e
c001edc7:	e8 a0 ff ff ff       	call   c001ed6c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001edcc:	56                   	push   esi
c001edcd:	6a 00                	push   0x0
c001edcf:	53                   	push   ebx
c001edd0:	eb 12                	jmp    c001ede4 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001edd2:	89 e3                	mov    ebx,esp
c001edd4:	53                   	push   ebx
c001edd5:	68 82 00 00 c0       	push   0xc0000082
c001edda:	e8 8d ff ff ff       	call   c001ed6c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001eddf:	53                   	push   ebx
c001ede0:	6a 00                	push   0x0
c001ede2:	6a 00                	push   0x0
c001ede4:	68 82 00 00 c0       	push   0xc0000082
c001ede9:	e8 62 ff ff ff       	call   c001ed50 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001edee:	83 c4 18             	add    esp,0x18
c001edf1:	83 c4 10             	add    esp,0x10
c001edf4:	5b                   	pop    ebx
c001edf5:	5e                   	pop    esi
c001edf6:	c3                   	ret    
c001edf7:	90                   	nop

c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001edf8:	55                   	push   ebp
c001edf9:	57                   	push   edi
c001edfa:	56                   	push   esi
c001edfb:	53                   	push   ebx
c001edfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee00:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ee04:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ee08:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001ee0c:	39 05 f8 3a 03 c0    	cmp    DWORD PTR ds:0xc0033af8,eax
c001ee12:	75 23                	jne    c001ee37 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001ee14:	a1 8c f8 03 c0       	mov    eax,ds:0xc003f88c
c001ee19:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee1d:	89 06                	mov    DWORD PTR [esi],eax
c001ee1f:	a1 88 f8 03 c0       	mov    eax,ds:0xc003f888
c001ee24:	89 07                	mov    DWORD PTR [edi],eax
c001ee26:	a1 84 f8 03 c0       	mov    eax,ds:0xc003f884
c001ee2b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001ee2e:	a1 80 f8 03 c0       	mov    eax,ds:0xc003f880
c001ee33:	89 02                	mov    DWORD PTR [edx],eax
c001ee35:	eb 3f                	jmp    c001ee76 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001ee37:	31 c9                	xor    ecx,ecx
c001ee39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee3d:	0f a2                	cpuid  
c001ee3f:	89 06                	mov    DWORD PTR [esi],eax
c001ee41:	89 1f                	mov    DWORD PTR [edi],ebx
c001ee43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ee47:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c001ee4a:	89 10                	mov    DWORD PTR [eax],edx
c001ee4c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee50:	a3 f8 3a 03 c0       	mov    ds:0xc0033af8,eax
c001ee55:	8b 06                	mov    eax,DWORD PTR [esi]
c001ee57:	a3 8c f8 03 c0       	mov    ds:0xc003f88c,eax
c001ee5c:	8b 07                	mov    eax,DWORD PTR [edi]
c001ee5e:	a3 88 f8 03 c0       	mov    ds:0xc003f888,eax
c001ee63:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ee66:	a3 84 f8 03 c0       	mov    ds:0xc003f884,eax
c001ee6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ee6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee71:	a3 80 f8 03 c0       	mov    ds:0xc003f880,eax
c001ee76:	5b                   	pop    ebx
c001ee77:	5e                   	pop    esi
c001ee78:	5f                   	pop    edi
c001ee79:	5d                   	pop    ebp
c001ee7a:	c3                   	ret    
c001ee7b:	90                   	nop

c001ee7c <CPU::cpuidCheckEDX(unsigned int)>:
c001ee7c:	83 ec 10             	sub    esp,0x10
c001ee7f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee83:	50                   	push   eax
c001ee84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee88:	50                   	push   eax
c001ee89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee8d:	50                   	push   eax
c001ee8e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ee92:	50                   	push   eax
c001ee93:	6a 01                	push   0x1
c001ee95:	e8 5e ff ff ff       	call   c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ee9a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ee9e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001eea2:	0f 95 c0             	setne  al
c001eea5:	83 c4 24             	add    esp,0x24
c001eea8:	c3                   	ret    
c001eea9:	90                   	nop

c001eeaa <CPU::cpuidCheckECX(unsigned int)>:
c001eeaa:	83 ec 10             	sub    esp,0x10
c001eead:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeb1:	50                   	push   eax
c001eeb2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeb6:	50                   	push   eax
c001eeb7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eebb:	50                   	push   eax
c001eebc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eec0:	50                   	push   eax
c001eec1:	6a 01                	push   0x1
c001eec3:	e8 30 ff ff ff       	call   c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001eec8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eecc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001eed0:	0f 95 c0             	setne  al
c001eed3:	83 c4 24             	add    esp,0x24
c001eed6:	c3                   	ret    
c001eed7:	90                   	nop

c001eed8 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001eed8:	83 ec 10             	sub    esp,0x10
c001eedb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eedf:	50                   	push   eax
c001eee0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eee4:	50                   	push   eax
c001eee5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eee9:	50                   	push   eax
c001eeea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001eeee:	50                   	push   eax
c001eeef:	6a 07                	push   0x7
c001eef1:	e8 02 ff ff ff       	call   c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001eef6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001eefa:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001eefe:	0f 95 c0             	setne  al
c001ef01:	83 c4 24             	add    esp,0x24
c001ef04:	c3                   	ret    
c001ef05:	90                   	nop

c001ef06 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001ef06:	83 ec 10             	sub    esp,0x10
c001ef09:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef0d:	50                   	push   eax
c001ef0e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef12:	50                   	push   eax
c001ef13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef17:	50                   	push   eax
c001ef18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001ef1c:	50                   	push   eax
c001ef1d:	6a 07                	push   0x7
c001ef1f:	e8 d4 fe ff ff       	call   c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001ef24:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ef28:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001ef2c:	0f 95 c0             	setne  al
c001ef2f:	83 c4 24             	add    esp,0x24
c001ef32:	c3                   	ret    
c001ef33:	90                   	nop

c001ef34 <CPU::CPU()>:
c001ef34:	83 ec 0c             	sub    esp,0xc
c001ef37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3b:	83 ec 08             	sub    esp,0x8
c001ef3e:	68 f5 25 03 c0       	push   0xc00325f5
c001ef43:	50                   	push   eax
c001ef44:	e8 27 c4 ff ff       	call   c001b370 <Device::Device(char const*)>
c001ef49:	83 c4 10             	add    esp,0x10
c001ef4c:	ba 88 26 03 c0       	mov    edx,0xc0032688
c001ef51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef55:	89 10                	mov    DWORD PTR [eax],edx
c001ef57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001ef65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef69:	05 78 01 00 00       	add    eax,0x178
c001ef6e:	83 ec 0c             	sub    esp,0xc
c001ef71:	50                   	push   eax
c001ef72:	e8 2d 6c ff ff       	call   c0015ba4 <GDT::GDT()>
c001ef77:	83 c4 10             	add    esp,0x10
c001ef7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef7e:	05 7c 09 00 00       	add    eax,0x97c
c001ef83:	83 ec 0c             	sub    esp,0xc
c001ef86:	50                   	push   eax
c001ef87:	e8 68 6e ff ff       	call   c0015df4 <IDT::IDT()>
c001ef8c:	83 c4 10             	add    esp,0x10
c001ef8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef93:	05 7c 11 00 00       	add    eax,0x117c
c001ef98:	83 ec 0c             	sub    esp,0xc
c001ef9b:	50                   	push   eax
c001ef9c:	e8 eb 87 ff ff       	call   c001778c <TSS::TSS()>
c001efa1:	83 c4 10             	add    esp,0x10
c001efa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa8:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001efaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb3:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001efbd:	90                   	nop
c001efbe:	83 c4 0c             	add    esp,0xc
c001efc1:	c3                   	ret    

c001efc2 <CPU::displayFeatures()>:
c001efc2:	c3                   	ret    
c001efc3:	90                   	nop

c001efc4 <CPU::detectFeatures()>:
c001efc4:	55                   	push   ebp
c001efc5:	57                   	push   edi
c001efc6:	56                   	push   esi
c001efc7:	53                   	push   ebx
c001efc8:	83 ec 30             	sub    esp,0x30
c001efcb:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efcf:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c001efd9:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c001efe0:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001efe6:	6a 0d                	push   0xd
c001efe8:	6a 00                	push   0x0
c001efea:	55                   	push   ebp
c001efeb:	e8 00 15 fe ff       	call   c00004f0 <memset>
c001eff0:	83 c4 10             	add    esp,0x10
c001eff3:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001eff8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001efff:	0f 84 db 05 00 00    	je     c001f5e0 <CPU::detectFeatures()+0x61c>
c001f005:	83 ec 0c             	sub    esp,0xc
c001f008:	89 ef                	mov    edi,ebp
c001f00a:	6a 10                	push   0x10
c001f00c:	e8 6b fe ff ff       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c001f011:	83 e0 01             	and    eax,0x1
c001f014:	8d 14 00             	lea    edx,[eax+eax*1]
c001f017:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f01d:	83 e0 fd             	and    eax,0xfffffffd
c001f020:	09 d0                	or     eax,edx
c001f022:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f028:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001f02f:	e8 48 fe ff ff       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c001f034:	83 e0 01             	and    eax,0x1
c001f037:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f03e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f044:	83 e0 fb             	and    eax,0xfffffffb
c001f047:	09 d0                	or     eax,edx
c001f049:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f04f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001f056:	e8 21 fe ff ff       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c001f05b:	83 e0 01             	and    eax,0x1
c001f05e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f065:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f06b:	83 e0 f7             	and    eax,0xfffffff7
c001f06e:	09 d0                	or     eax,edx
c001f070:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f076:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c001f07d:	e8 fa fd ff ff       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c001f082:	83 e0 01             	and    eax,0x1
c001f085:	c1 e0 04             	shl    eax,0x4
c001f088:	89 c2                	mov    edx,eax
c001f08a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f090:	83 e0 ef             	and    eax,0xffffffef
c001f093:	09 d0                	or     eax,edx
c001f095:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f09b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001f0a2:	e8 d5 fd ff ff       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c001f0a7:	83 e0 01             	and    eax,0x1
c001f0aa:	c1 e0 05             	shl    eax,0x5
c001f0ad:	89 c2                	mov    edx,eax
c001f0af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f0b5:	83 e0 df             	and    eax,0xffffffdf
c001f0b8:	09 d0                	or     eax,edx
c001f0ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f0c0:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001f0c7:	e8 b0 fd ff ff       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c001f0cc:	83 e0 01             	and    eax,0x1
c001f0cf:	8d 14 00             	lea    edx,[eax+eax*1]
c001f0d2:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f0d8:	83 e0 fd             	and    eax,0xfffffffd
c001f0db:	09 d0                	or     eax,edx
c001f0dd:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f0e3:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001f0ea:	e8 8d fd ff ff       	call   c001ee7c <CPU::cpuidCheckEDX(unsigned int)>
c001f0ef:	83 e0 01             	and    eax,0x1
c001f0f2:	c1 e0 06             	shl    eax,0x6
c001f0f5:	89 c2                	mov    edx,eax
c001f0f7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f0fd:	83 e0 bf             	and    eax,0xffffffbf
c001f100:	09 d0                	or     eax,edx
c001f102:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f108:	58                   	pop    eax
c001f109:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f10d:	50                   	push   eax
c001f10e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f112:	50                   	push   eax
c001f113:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f117:	56                   	push   esi
c001f118:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f11c:	50                   	push   eax
c001f11d:	6a 00                	push   0x0
c001f11f:	e8 d4 fc ff ff       	call   c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f124:	b8 04 00 00 00       	mov    eax,0x4
c001f129:	89 c1                	mov    ecx,eax
c001f12b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f12d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001f133:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001f137:	89 c1                	mov    ecx,eax
c001f139:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f13b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001f141:	8d 74 24 38          	lea    esi,[esp+0x38]
c001f145:	89 c1                	mov    ecx,eax
c001f147:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f149:	83 c4 18             	add    esp,0x18
c001f14c:	68 04 25 03 c0       	push   0xc0032504
c001f151:	55                   	push   ebp
c001f152:	e8 f9 15 fe ff       	call   c0000750 <strcmp>
c001f157:	83 c4 10             	add    esp,0x10
c001f15a:	85 c0                	test   eax,eax
c001f15c:	75 0f                	jne    c001f16d <CPU::detectFeatures()+0x1a9>
c001f15e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001f168:	e9 22 02 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f16d:	50                   	push   eax
c001f16e:	50                   	push   eax
c001f16f:	68 11 25 03 c0       	push   0xc0032511
c001f174:	55                   	push   ebp
c001f175:	e8 d6 15 fe ff       	call   c0000750 <strcmp>
c001f17a:	83 c4 10             	add    esp,0x10
c001f17d:	85 c0                	test   eax,eax
c001f17f:	74 dd                	je     c001f15e <CPU::detectFeatures()+0x19a>
c001f181:	50                   	push   eax
c001f182:	50                   	push   eax
c001f183:	68 1e 25 03 c0       	push   0xc003251e
c001f188:	55                   	push   ebp
c001f189:	e8 c2 15 fe ff       	call   c0000750 <strcmp>
c001f18e:	83 c4 10             	add    esp,0x10
c001f191:	85 c0                	test   eax,eax
c001f193:	74 2a                	je     c001f1bf <CPU::detectFeatures()+0x1fb>
c001f195:	50                   	push   eax
c001f196:	50                   	push   eax
c001f197:	68 2b 25 03 c0       	push   0xc003252b
c001f19c:	55                   	push   ebp
c001f19d:	e8 ae 15 fe ff       	call   c0000750 <strcmp>
c001f1a2:	83 c4 10             	add    esp,0x10
c001f1a5:	85 c0                	test   eax,eax
c001f1a7:	74 16                	je     c001f1bf <CPU::detectFeatures()+0x1fb>
c001f1a9:	50                   	push   eax
c001f1aa:	50                   	push   eax
c001f1ab:	68 38 25 03 c0       	push   0xc0032538
c001f1b0:	55                   	push   ebp
c001f1b1:	e8 9a 15 fe ff       	call   c0000750 <strcmp>
c001f1b6:	83 c4 10             	add    esp,0x10
c001f1b9:	85 c0                	test   eax,eax
c001f1bb:	74 48                	je     c001f205 <CPU::detectFeatures()+0x241>
c001f1bd:	eb 0f                	jmp    c001f1ce <CPU::detectFeatures()+0x20a>
c001f1bf:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001f1c9:	e9 c1 01 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f1ce:	50                   	push   eax
c001f1cf:	50                   	push   eax
c001f1d0:	68 45 25 03 c0       	push   0xc0032545
c001f1d5:	55                   	push   ebp
c001f1d6:	e8 75 15 fe ff       	call   c0000750 <strcmp>
c001f1db:	83 c4 10             	add    esp,0x10
c001f1de:	85 c0                	test   eax,eax
c001f1e0:	74 23                	je     c001f205 <CPU::detectFeatures()+0x241>
c001f1e2:	57                   	push   edi
c001f1e3:	57                   	push   edi
c001f1e4:	68 52 25 03 c0       	push   0xc0032552
c001f1e9:	55                   	push   ebp
c001f1ea:	e8 61 15 fe ff       	call   c0000750 <strcmp>
c001f1ef:	83 c4 10             	add    esp,0x10
c001f1f2:	85 c0                	test   eax,eax
c001f1f4:	75 1e                	jne    c001f214 <CPU::detectFeatures()+0x250>
c001f1f6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f200:	e9 8a 01 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f205:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001f20f:	e9 7b 01 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f214:	56                   	push   esi
c001f215:	56                   	push   esi
c001f216:	68 5f 25 03 c0       	push   0xc003255f
c001f21b:	55                   	push   ebp
c001f21c:	e8 2f 15 fe ff       	call   c0000750 <strcmp>
c001f221:	83 c4 10             	add    esp,0x10
c001f224:	85 c0                	test   eax,eax
c001f226:	75 0f                	jne    c001f237 <CPU::detectFeatures()+0x273>
c001f228:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001f232:	e9 58 01 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f237:	51                   	push   ecx
c001f238:	51                   	push   ecx
c001f239:	68 1e 25 03 c0       	push   0xc003251e
c001f23e:	55                   	push   ebp
c001f23f:	e8 0c 15 fe ff       	call   c0000750 <strcmp>
c001f244:	83 c4 10             	add    esp,0x10
c001f247:	85 c0                	test   eax,eax
c001f249:	75 0f                	jne    c001f25a <CPU::detectFeatures()+0x296>
c001f24b:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001f255:	e9 35 01 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f25a:	52                   	push   edx
c001f25b:	52                   	push   edx
c001f25c:	68 6c 25 03 c0       	push   0xc003256c
c001f261:	55                   	push   ebp
c001f262:	e8 e9 14 fe ff       	call   c0000750 <strcmp>
c001f267:	83 c4 10             	add    esp,0x10
c001f26a:	85 c0                	test   eax,eax
c001f26c:	75 0f                	jne    c001f27d <CPU::detectFeatures()+0x2b9>
c001f26e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001f278:	e9 12 01 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f27d:	50                   	push   eax
c001f27e:	50                   	push   eax
c001f27f:	68 79 25 03 c0       	push   0xc0032579
c001f284:	55                   	push   ebp
c001f285:	e8 c6 14 fe ff       	call   c0000750 <strcmp>
c001f28a:	83 c4 10             	add    esp,0x10
c001f28d:	85 c0                	test   eax,eax
c001f28f:	75 0f                	jne    c001f2a0 <CPU::detectFeatures()+0x2dc>
c001f291:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001f29b:	e9 ef 00 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f2a0:	50                   	push   eax
c001f2a1:	50                   	push   eax
c001f2a2:	68 86 25 03 c0       	push   0xc0032586
c001f2a7:	55                   	push   ebp
c001f2a8:	e8 a3 14 fe ff       	call   c0000750 <strcmp>
c001f2ad:	83 c4 10             	add    esp,0x10
c001f2b0:	85 c0                	test   eax,eax
c001f2b2:	75 0f                	jne    c001f2c3 <CPU::detectFeatures()+0x2ff>
c001f2b4:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001f2be:	e9 cc 00 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f2c3:	50                   	push   eax
c001f2c4:	50                   	push   eax
c001f2c5:	68 93 25 03 c0       	push   0xc0032593
c001f2ca:	55                   	push   ebp
c001f2cb:	e8 80 14 fe ff       	call   c0000750 <strcmp>
c001f2d0:	83 c4 10             	add    esp,0x10
c001f2d3:	85 c0                	test   eax,eax
c001f2d5:	75 0f                	jne    c001f2e6 <CPU::detectFeatures()+0x322>
c001f2d7:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001f2e1:	e9 a9 00 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f2e6:	50                   	push   eax
c001f2e7:	50                   	push   eax
c001f2e8:	68 a0 25 03 c0       	push   0xc00325a0
c001f2ed:	55                   	push   ebp
c001f2ee:	e8 5d 14 fe ff       	call   c0000750 <strcmp>
c001f2f3:	83 c4 10             	add    esp,0x10
c001f2f6:	85 c0                	test   eax,eax
c001f2f8:	75 0f                	jne    c001f309 <CPU::detectFeatures()+0x345>
c001f2fa:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001f304:	e9 86 00 00 00       	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f309:	50                   	push   eax
c001f30a:	50                   	push   eax
c001f30b:	68 ad 25 03 c0       	push   0xc00325ad
c001f310:	55                   	push   ebp
c001f311:	e8 3a 14 fe ff       	call   c0000750 <strcmp>
c001f316:	83 c4 10             	add    esp,0x10
c001f319:	85 c0                	test   eax,eax
c001f31b:	75 0c                	jne    c001f329 <CPU::detectFeatures()+0x365>
c001f31d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001f327:	eb 66                	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f329:	50                   	push   eax
c001f32a:	50                   	push   eax
c001f32b:	68 ba 25 03 c0       	push   0xc00325ba
c001f330:	55                   	push   ebp
c001f331:	e8 1a 14 fe ff       	call   c0000750 <strcmp>
c001f336:	83 c4 10             	add    esp,0x10
c001f339:	85 c0                	test   eax,eax
c001f33b:	75 0c                	jne    c001f349 <CPU::detectFeatures()+0x385>
c001f33d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001f347:	eb 46                	jmp    c001f38f <CPU::detectFeatures()+0x3cb>
c001f349:	57                   	push   edi
c001f34a:	57                   	push   edi
c001f34b:	68 c7 25 03 c0       	push   0xc00325c7
c001f350:	55                   	push   ebp
c001f351:	e8 fa 13 fe ff       	call   c0000750 <strcmp>
c001f356:	83 c4 10             	add    esp,0x10
c001f359:	85 c0                	test   eax,eax
c001f35b:	74 e0                	je     c001f33d <CPU::detectFeatures()+0x379>
c001f35d:	56                   	push   esi
c001f35e:	56                   	push   esi
c001f35f:	68 d4 25 03 c0       	push   0xc00325d4
c001f364:	55                   	push   ebp
c001f365:	e8 e6 13 fe ff       	call   c0000750 <strcmp>
c001f36a:	83 c4 10             	add    esp,0x10
c001f36d:	85 c0                	test   eax,eax
c001f36f:	74 cc                	je     c001f33d <CPU::detectFeatures()+0x379>
c001f371:	51                   	push   ecx
c001f372:	51                   	push   ecx
c001f373:	68 e1 25 03 c0       	push   0xc00325e1
c001f378:	55                   	push   ebp
c001f379:	e8 d2 13 fe ff       	call   c0000750 <strcmp>
c001f37e:	83 c4 10             	add    esp,0x10
c001f381:	85 c0                	test   eax,eax
c001f383:	74 b8                	je     c001f33d <CPU::detectFeatures()+0x379>
c001f385:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c001f38f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001f394:	0f 86 be 00 00 00    	jbe    c001f458 <CPU::detectFeatures()+0x494>
c001f39a:	83 ec 0c             	sub    esp,0xc
c001f39d:	68 80 00 00 00       	push   0x80
c001f3a2:	e8 31 fb ff ff       	call   c001eed8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3a7:	83 e0 01             	and    eax,0x1
c001f3aa:	c1 e0 06             	shl    eax,0x6
c001f3ad:	89 c2                	mov    edx,eax
c001f3af:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3b5:	83 e0 bf             	and    eax,0xffffffbf
c001f3b8:	09 d0                	or     eax,edx
c001f3ba:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f3c0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001f3c7:	e8 0c fb ff ff       	call   c001eed8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3cc:	83 e0 01             	and    eax,0x1
c001f3cf:	c1 e0 04             	shl    eax,0x4
c001f3d2:	89 c2                	mov    edx,eax
c001f3d4:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f3da:	83 e0 ef             	and    eax,0xffffffef
c001f3dd:	09 d0                	or     eax,edx
c001f3df:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f3e5:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001f3ec:	e8 e7 fa ff ff       	call   c001eed8 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001f3f1:	89 c2                	mov    edx,eax
c001f3f3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001f3f9:	c1 e2 07             	shl    edx,0x7
c001f3fc:	83 e0 7f             	and    eax,0x7f
c001f3ff:	09 d0                	or     eax,edx
c001f401:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001f407:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001f40e:	e8 f3 fa ff ff       	call   c001ef06 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f413:	83 e0 01             	and    eax,0x1
c001f416:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001f41d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f423:	83 e0 f7             	and    eax,0xfffffff7
c001f426:	09 d0                	or     eax,edx
c001f428:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f42e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001f435:	e8 cc fa ff ff       	call   c001ef06 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001f43a:	83 c4 10             	add    esp,0x10
c001f43d:	83 e0 01             	and    eax,0x1
c001f440:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001f447:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f44d:	83 e0 fb             	and    eax,0xfffffffb
c001f450:	09 d0                	or     eax,edx
c001f452:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f458:	83 ec 0c             	sub    esp,0xc
c001f45b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f45f:	50                   	push   eax
c001f460:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f464:	50                   	push   eax
c001f465:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001f469:	57                   	push   edi
c001f46a:	8d 74 24 28          	lea    esi,[esp+0x28]
c001f46e:	56                   	push   esi
c001f46f:	6a 01                	push   0x1
c001f471:	e8 82 f9 ff ff       	call   c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001f47a:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001f480:	89 c1                	mov    ecx,eax
c001f482:	83 e2 f0             	and    edx,0xfffffff0
c001f485:	83 e1 0f             	and    ecx,0xf
c001f488:	09 ca                	or     edx,ecx
c001f48a:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001f490:	89 c2                	mov    edx,eax
c001f492:	c1 ea 04             	shr    edx,0x4
c001f495:	83 e2 0f             	and    edx,0xf
c001f498:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f49c:	89 d1                	mov    ecx,edx
c001f49e:	83 c4 20             	add    esp,0x20
c001f4a1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001f4a7:	c1 e1 06             	shl    ecx,0x6
c001f4aa:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c001f4b0:	09 ca                	or     edx,ecx
c001f4b2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001f4b9:	89 c2                	mov    edx,eax
c001f4bb:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c001f4c1:	c1 ea 08             	shr    edx,0x8
c001f4c4:	83 e1 3f             	and    ecx,0x3f
c001f4c7:	83 e2 0f             	and    edx,0xf
c001f4ca:	89 d5                	mov    ebp,edx
c001f4cc:	83 e5 03             	and    ebp,0x3
c001f4cf:	c1 e5 06             	shl    ebp,0x6
c001f4d2:	09 e9                	or     ecx,ebp
c001f4d4:	89 d5                	mov    ebp,edx
c001f4d6:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001f4dc:	c1 ed 02             	shr    ebp,0x2
c001f4df:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c001f4e5:	83 e1 c0             	and    ecx,0xffffffc0
c001f4e8:	09 e9                	or     ecx,ebp
c001f4ea:	89 c5                	mov    ebp,eax
c001f4ec:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001f4f2:	c1 ed 08             	shr    ebp,0x8
c001f4f5:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001f4fb:	83 e5 30             	and    ebp,0x30
c001f4fe:	83 e1 cf             	and    ecx,0xffffffcf
c001f501:	09 e9                	or     ecx,ebp
c001f503:	83 fa 06             	cmp    edx,0x6
c001f506:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001f50c:	74 05                	je     c001f513 <CPU::detectFeatures()+0x54f>
c001f50e:	83 fa 0f             	cmp    edx,0xf
c001f511:	75 64                	jne    c001f577 <CPU::detectFeatures()+0x5b3>
c001f513:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001f519:	89 c1                	mov    ecx,eax
c001f51b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c001f521:	c1 e9 10             	shr    ecx,0x10
c001f524:	c1 e1 04             	shl    ecx,0x4
c001f527:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001f52b:	0f b6 c9             	movzx  ecx,cl
c001f52e:	c1 e1 06             	shl    ecx,0x6
c001f531:	09 e9                	or     ecx,ebp
c001f533:	83 fa 0f             	cmp    edx,0xf
c001f536:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001f53d:	75 38                	jne    c001f577 <CPU::detectFeatures()+0x5b3>
c001f53f:	c1 e8 14             	shr    eax,0x14
c001f542:	83 c0 0f             	add    eax,0xf
c001f545:	0f b6 c0             	movzx  eax,al
c001f548:	89 c2                	mov    edx,eax
c001f54a:	c1 e8 02             	shr    eax,0x2
c001f54d:	83 e2 03             	and    edx,0x3
c001f550:	89 d1                	mov    ecx,edx
c001f552:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001f558:	c1 e1 06             	shl    ecx,0x6
c001f55b:	83 e2 3f             	and    edx,0x3f
c001f55e:	09 ca                	or     edx,ecx
c001f560:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001f566:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001f56c:	83 e2 c0             	and    edx,0xffffffc0
c001f56f:	09 d0                	or     eax,edx
c001f571:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001f577:	83 ec 0c             	sub    esp,0xc
c001f57a:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f580:	83 c8 07             	or     eax,0x7
c001f583:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f589:	8d 44 24 28          	lea    eax,[esp+0x28]
c001f58d:	50                   	push   eax
c001f58e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001f592:	55                   	push   ebp
c001f593:	57                   	push   edi
c001f594:	56                   	push   esi
c001f595:	68 00 00 00 80       	push   0x80000000
c001f59a:	e8 59 f8 ff ff       	call   c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f59f:	83 c4 20             	add    esp,0x20
c001f5a2:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001f5aa:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f5ae:	76 1e                	jbe    c001f5ce <CPU::detectFeatures()+0x60a>
c001f5b0:	83 ec 0c             	sub    esp,0xc
c001f5b3:	50                   	push   eax
c001f5b4:	55                   	push   ebp
c001f5b5:	57                   	push   edi
c001f5b6:	56                   	push   esi
c001f5b7:	68 01 00 00 80       	push   0x80000001
c001f5bc:	e8 37 f8 ff ff       	call   c001edf8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001f5c1:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001f5cb:	83 c4 20             	add    esp,0x20
c001f5ce:	52                   	push   edx
c001f5cf:	52                   	push   edx
c001f5d0:	68 ed 25 03 c0       	push   0xc00325ed
c001f5d5:	53                   	push   ebx
c001f5d6:	e8 87 bd ff ff       	call   c001b362 <Device::setName(char const*)>
c001f5db:	83 c4 10             	add    esp,0x10
c001f5de:	eb 69                	jmp    c001f649 <CPU::detectFeatures()+0x685>
c001f5e0:	50                   	push   eax
c001f5e1:	50                   	push   eax
c001f5e2:	68 52 25 03 c0       	push   0xc0032552
c001f5e7:	55                   	push   ebp
c001f5e8:	e8 53 10 fe ff       	call   c0000640 <strcpy>
c001f5ed:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001f5f7:	e8 c7 0b fe ff       	call   c00001c3 <is486>
c001f5fc:	83 c4 10             	add    esp,0x10
c001f5ff:	85 c0                	test   eax,eax
c001f601:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001f607:	74 1f                	je     c001f628 <CPU::detectFeatures()+0x664>
c001f609:	83 c8 07             	or     eax,0x7
c001f60c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001f612:	0f 20 c0             	mov    eax,cr0
c001f615:	83 e0 14             	and    eax,0x14
c001f618:	83 f8 04             	cmp    eax,0x4
c001f61b:	75 10                	jne    c001f62d <CPU::detectFeatures()+0x669>
c001f61d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f623:	83 e0 fd             	and    eax,0xfffffffd
c001f626:	eb 1b                	jmp    c001f643 <CPU::detectFeatures()+0x67f>
c001f628:	83 e0 f8             	and    eax,0xfffffff8
c001f62b:	eb df                	jmp    c001f60c <CPU::detectFeatures()+0x648>
c001f62d:	e8 6c 0b fe ff       	call   c000019e <hasLegacyFPU>
c001f632:	83 e0 01             	and    eax,0x1
c001f635:	8d 14 00             	lea    edx,[eax+eax*1]
c001f638:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f63e:	83 e0 fd             	and    eax,0xfffffffd
c001f641:	09 d0                	or     eax,edx
c001f643:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f649:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c001f650:	74 17                	je     c001f669 <CPU::detectFeatures()+0x6a5>
c001f652:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c001f658:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c001f65e:	83 c8 10             	or     eax,0x10
c001f661:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001f667:	eb 20                	jmp    c001f689 <CPU::detectFeatures()+0x6c5>
c001f669:	e8 30 0b fe ff       	call   c000019e <hasLegacyFPU>
c001f66e:	83 e0 01             	and    eax,0x1
c001f671:	8d 14 00             	lea    edx,[eax+eax*1]
c001f674:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001f67a:	83 e0 fd             	and    eax,0xfffffffd
c001f67d:	09 d0                	or     eax,edx
c001f67f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001f685:	a8 02                	test   al,0x2
c001f687:	75 c9                	jne    c001f652 <CPU::detectFeatures()+0x68e>
c001f689:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c001f690:	83 c4 2c             	add    esp,0x2c
c001f693:	5b                   	pop    ebx
c001f694:	5e                   	pop    esi
c001f695:	5f                   	pop    edi
c001f696:	5d                   	pop    ebp
c001f697:	c3                   	ret    

c001f698 <CPU::setupSMEP()>:
c001f698:	0f 20 e0             	mov    eax,cr4
c001f69b:	0d 00 00 10 00       	or     eax,0x100000
c001f6a0:	0f 22 e0             	mov    cr4,eax
c001f6a3:	c3                   	ret    

c001f6a4 <CPU::setupUMIP()>:
c001f6a4:	0f 20 e0             	mov    eax,cr4
c001f6a7:	80 cc 08             	or     ah,0x8
c001f6aa:	0f 22 e0             	mov    cr4,eax
c001f6ad:	c3                   	ret    

c001f6ae <CPU::setupTSC()>:
c001f6ae:	0f 20 e0             	mov    eax,cr4
c001f6b1:	83 c8 04             	or     eax,0x4
c001f6b4:	0f 22 e0             	mov    cr4,eax
c001f6b7:	c3                   	ret    

c001f6b8 <CPU::setupLargePages()>:
c001f6b8:	0f 20 e0             	mov    eax,cr4
c001f6bb:	83 c8 10             	or     eax,0x10
c001f6be:	0f 22 e0             	mov    cr4,eax
c001f6c1:	c3                   	ret    

c001f6c2 <CPU::setupPAT()>:
c001f6c2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c001f6c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001f6ce:	74 2c                	je     c001f6fc <CPU::setupPAT()+0x3a>
c001f6d0:	53                   	push   ebx
c001f6d1:	83 ec 10             	sub    esp,0x10
c001f6d4:	68 77 02 00 00       	push   0x277
c001f6d9:	50                   	push   eax
c001f6da:	e8 29 62 ff ff       	call   c0015908 <Computer::rdmsr(unsigned int)>
c001f6df:	83 e2 f8             	and    edx,0xfffffff8
c001f6e2:	83 ca 01             	or     edx,0x1
c001f6e5:	52                   	push   edx
c001f6e6:	50                   	push   eax
c001f6e7:	68 77 02 00 00       	push   0x277
c001f6ec:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c001f6f2:	e8 3d 62 ff ff       	call   c0015934 <Computer::wrmsr(unsigned int, unsigned long long)>
c001f6f7:	83 c4 28             	add    esp,0x28
c001f6fa:	5b                   	pop    ebx
c001f6fb:	c3                   	ret    
c001f6fc:	c3                   	ret    
c001f6fd:	90                   	nop

c001f6fe <CPU::setupMTRR()>:
c001f6fe:	c3                   	ret    
c001f6ff:	90                   	nop

c001f700 <CPU::setupGlobalPages()>:
c001f700:	0f 20 e0             	mov    eax,cr4
c001f703:	0c 80                	or     al,0x80
c001f705:	0f 22 e0             	mov    cr4,eax
c001f708:	c3                   	ret    
c001f709:	90                   	nop

c001f70a <CPU::allowUsermodeDataAccess()>:
c001f70a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f70e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f715:	74 03                	je     c001f71a <CPU::allowUsermodeDataAccess()+0x10>
c001f717:	0f 01 cb             	stac   
c001f71a:	c3                   	ret    
c001f71b:	90                   	nop

c001f71c <CPU::prohibitUsermodeDataAccess()>:
c001f71c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f720:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001f727:	74 03                	je     c001f72c <CPU::prohibitUsermodeDataAccess()+0x10>
c001f729:	0f 01 ca             	clac   
c001f72c:	c3                   	ret    
c001f72d:	90                   	nop

c001f72e <CPU::setupSMAP()>:
c001f72e:	0f 20 e0             	mov    eax,cr4
c001f731:	0d 00 00 20 00       	or     eax,0x200000
c001f736:	0f 22 e0             	mov    cr4,eax
c001f739:	eb e1                	jmp    c001f71c <CPU::prohibitUsermodeDataAccess()>
c001f73b:	90                   	nop

c001f73c <CPU::setupFeatures()>:
c001f73c:	53                   	push   ebx
c001f73d:	83 ec 08             	sub    esp,0x8
c001f740:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f744:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c001f74b:	74 18                	je     c001f765 <CPU::setupFeatures()+0x29>
c001f74d:	83 ec 0c             	sub    esp,0xc
c001f750:	68 f9 25 03 c0       	push   0xc00325f9
c001f755:	e8 33 9a ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001f75a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f75d:	e8 42 ff ff ff       	call   c001f6a4 <CPU::setupUMIP()>
c001f762:	83 c4 10             	add    esp,0x10
c001f765:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c001f76c:	74 18                	je     c001f786 <CPU::setupFeatures()+0x4a>
c001f76e:	83 ec 0c             	sub    esp,0xc
c001f771:	68 03 26 03 c0       	push   0xc0032603
c001f776:	e8 12 9a ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001f77b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f77e:	e8 2b ff ff ff       	call   c001f6ae <CPU::setupTSC()>
c001f783:	83 c4 10             	add    esp,0x10
c001f786:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c001f78d:	74 18                	je     c001f7a7 <CPU::setupFeatures()+0x6b>
c001f78f:	83 ec 0c             	sub    esp,0xc
c001f792:	68 0c 26 03 c0       	push   0xc003260c
c001f797:	e8 f1 99 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001f79c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f79f:	e8 14 ff ff ff       	call   c001f6b8 <CPU::setupLargePages()>
c001f7a4:	83 c4 10             	add    esp,0x10
c001f7a7:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001f7ae:	74 18                	je     c001f7c8 <CPU::setupFeatures()+0x8c>
c001f7b0:	83 ec 0c             	sub    esp,0xc
c001f7b3:	68 15 26 03 c0       	push   0xc0032615
c001f7b8:	e8 d0 99 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001f7bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f7c0:	e8 3b ff ff ff       	call   c001f700 <CPU::setupGlobalPages()>
c001f7c5:	83 c4 10             	add    esp,0x10
c001f7c8:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001f7cf:	74 18                	je     c001f7e9 <CPU::setupFeatures()+0xad>
c001f7d1:	83 ec 0c             	sub    esp,0xc
c001f7d4:	68 27 26 03 c0       	push   0xc0032627
c001f7d9:	e8 af 99 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001f7de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f7e1:	e8 dc fe ff ff       	call   c001f6c2 <CPU::setupPAT()>
c001f7e6:	83 c4 10             	add    esp,0x10
c001f7e9:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c001f7f0:	74 11                	je     c001f803 <CPU::setupFeatures()+0xc7>
c001f7f2:	c7 44 24 10 30 26 03 c0 	mov    DWORD PTR [esp+0x10],0xc0032630
c001f7fa:	83 c4 08             	add    esp,0x8
c001f7fd:	5b                   	pop    ebx
c001f7fe:	e9 8a 99 ff ff       	jmp    c001918d <Dbg::kprintf(char const*, ...)>
c001f803:	83 c4 08             	add    esp,0x8
c001f806:	5b                   	pop    ebx
c001f807:	c3                   	ret    

c001f808 <CPU::open(int, int, void*)>:
c001f808:	55                   	push   ebp
c001f809:	57                   	push   edi
c001f80a:	56                   	push   esi
c001f80b:	53                   	push   ebx
c001f80c:	83 ec 18             	sub    esp,0x18
c001f80f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f813:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f817:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001f81b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001f821:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001f827:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001f82d:	50                   	push   eax
c001f82e:	e8 d3 63 ff ff       	call   c0015c06 <GDT::setup()>
c001f833:	83 c4 0c             	add    esp,0xc
c001f836:	6a 00                	push   0x0
c001f838:	68 ef be ad de       	push   0xdeadbeef
c001f83d:	55                   	push   ebp
c001f83e:	e8 8d 7f ff ff       	call   c00177d0 <TSS::setup(unsigned long, unsigned long)>
c001f843:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001f846:	e8 65 7f ff ff       	call   c00177b0 <TSS::flush()>
c001f84b:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001f851:	89 04 24             	mov    DWORD PTR [esp],eax
c001f854:	e8 11 66 ff ff       	call   c0015e6a <IDT::setup()>
c001f859:	b8 00 04 00 00       	mov    eax,0x400
c001f85e:	0f 23 f8             	mov    db7,eax
c001f861:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001f86b:	e8 97 6d ff ff       	call   c0016607 <Phys::allocatePage()>
c001f870:	83 c4 10             	add    esp,0x10
c001f873:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f879:	85 f6                	test   esi,esi
c001f87b:	89 38                	mov    DWORD PTR [eax],edi
c001f87d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f883:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001f886:	74 10                	je     c001f898 <CPU::open(int, int, void*)+0x90>
c001f888:	50                   	push   eax
c001f889:	50                   	push   eax
c001f88a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f890:	56                   	push   esi
c001f891:	e8 60 88 ff ff       	call   c00180f6 <VAS::setCPUSpecific(unsigned long)>
c001f896:	eb 0d                	jmp    c001f8a5 <CPU::open(int, int, void*)+0x9d>
c001f898:	83 ec 0c             	sub    esp,0xc
c001f89b:	68 3a 26 03 c0       	push   0xc003263a
c001f8a0:	e8 01 09 00 00       	call   c00201a6 <KePanic(char const*)>
c001f8a5:	83 c4 10             	add    esp,0x10
c001f8a8:	83 ec 0c             	sub    esp,0xc
c001f8ab:	68 48 26 03 c0       	push   0xc0032648
c001f8b0:	e8 8e 01 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c001f8b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f8b8:	e8 07 f7 ff ff       	call   c001efc4 <CPU::detectFeatures()>
c001f8bd:	c7 04 24 6b 26 03 c0 	mov    DWORD PTR [esp],0xc003266b
c001f8c4:	e8 7a 01 00 00       	call   c001fa43 <KeSetBootMessage(char const*)>
c001f8c9:	e8 df 76 00 00       	call   c0026fad <HalInitialise()>
c001f8ce:	a1 d4 a9 03 c0       	mov    eax,ds:0xc003a9d4
c001f8d3:	83 e0 10             	and    eax,0x10
c001f8d6:	83 f8 01             	cmp    eax,0x1
c001f8d9:	19 c0                	sbb    eax,eax
c001f8db:	83 e0 46             	and    eax,0x46
c001f8de:	83 c0 1e             	add    eax,0x1e
c001f8e1:	89 04 24             	mov    DWORD PTR [esp],eax
c001f8e4:	e8 5c d3 ff ff       	call   c001cc45 <setupTimer(int)>
c001f8e9:	83 c4 10             	add    esp,0x10
c001f8ec:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001f8f2:	f6 05 d4 a9 03 c0 20 	test   BYTE PTR ds:0xc003a9d4,0x20
c001f8f9:	74 0c                	je     c001f907 <CPU::open(int, int, void*)+0xff>
c001f8fb:	83 ec 0c             	sub    esp,0xc
c001f8fe:	53                   	push   ebx
c001f8ff:	e8 38 fe ff ff       	call   c001f73c <CPU::setupFeatures()>
c001f904:	83 c4 10             	add    esp,0x10
c001f907:	83 c4 0c             	add    esp,0xc
c001f90a:	31 c0                	xor    eax,eax
c001f90c:	5b                   	pop    ebx
c001f90d:	5e                   	pop    esi
c001f90e:	5f                   	pop    edi
c001f90f:	5d                   	pop    ebp
c001f910:	c3                   	ret    

c001f911 <KeInitialiseAtexit()>:
c001f911:	83 ec 10             	sub    esp,0x10
c001f914:	c7 05 a0 f8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f8a0,0x0
c001f91e:	6a 60                	push   0x60
c001f920:	6a 00                	push   0x0
c001f922:	68 20 f9 03 c0       	push   0xc003f920
c001f927:	e8 c4 0b fe ff       	call   c00004f0 <memset>
c001f92c:	83 c4 1c             	add    esp,0x1c
c001f92f:	c3                   	ret    

c001f930 <KeRegisterAtexit(void (*)(void*), void*)>:
c001f930:	a1 a0 f8 03 c0       	mov    eax,ds:0xc003f8a0
c001f935:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f939:	89 14 85 20 f9 03 c0 	mov    DWORD PTR [eax*4-0x3ffc06e0],edx
c001f940:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f944:	89 14 85 c0 f8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc0740],edx
c001f94b:	40                   	inc    eax
c001f94c:	a3 a0 f8 03 c0       	mov    ds:0xc003f8a0,eax
c001f951:	83 f8 17             	cmp    eax,0x17
c001f954:	7e 0d                	jle    c001f963 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c001f956:	c7 44 24 04 ac 26 03 c0 	mov    DWORD PTR [esp+0x4],0xc00326ac
c001f95e:	e9 43 08 00 00       	jmp    c00201a6 <KePanic(char const*)>
c001f963:	c3                   	ret    

c001f964 <KeExecuteAtexit()>:
c001f964:	53                   	push   ebx
c001f965:	31 db                	xor    ebx,ebx
c001f967:	83 ec 08             	sub    esp,0x8
c001f96a:	39 1d a0 f8 03 c0    	cmp    DWORD PTR ds:0xc003f8a0,ebx
c001f970:	7e 50                	jle    c001f9c2 <KeExecuteAtexit()+0x5e>
c001f972:	8b 04 9d 20 f9 03 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffc06e0]
c001f979:	85 c0                	test   eax,eax
c001f97b:	74 42                	je     c001f9bf <KeExecuteAtexit()+0x5b>
c001f97d:	51                   	push   ecx
c001f97e:	50                   	push   eax
c001f97f:	53                   	push   ebx
c001f980:	68 c5 26 03 c0       	push   0xc00326c5
c001f985:	e8 03 98 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001f98a:	58                   	pop    eax
c001f98b:	ff 34 9d c0 f8 03 c0 	push   DWORD PTR [ebx*4-0x3ffc0740]
c001f992:	ff 14 9d 20 f9 03 c0 	call   DWORD PTR [ebx*4-0x3ffc06e0]
c001f999:	c7 04 24 e7 26 03 c0 	mov    DWORD PTR [esp],0xc00326e7
c001f9a0:	e8 e8 97 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001f9a5:	c7 04 24 93 38 03 c0 	mov    DWORD PTR [esp],0xc0033893
c001f9ac:	c7 04 9d 20 f9 03 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffc06e0],0x0
c001f9b7:	e8 d1 97 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001f9bc:	83 c4 10             	add    esp,0x10
c001f9bf:	43                   	inc    ebx
c001f9c0:	eb a8                	jmp    c001f96a <KeExecuteAtexit()+0x6>
c001f9c2:	83 c4 08             	add    esp,0x8
c001f9c5:	5b                   	pop    ebx
c001f9c6:	c3                   	ret    

c001f9c7 <KeDisplaySplashScreen()>:
c001f9c7:	55                   	push   ebp
c001f9c8:	bd 05 00 00 00       	mov    ebp,0x5
c001f9cd:	57                   	push   edi
c001f9ce:	bf 0a 00 00 00       	mov    edi,0xa
c001f9d3:	56                   	push   esi
c001f9d4:	31 f6                	xor    esi,esi
c001f9d6:	53                   	push   ebx
c001f9d7:	31 db                	xor    ebx,ebx
c001f9d9:	83 ec 0c             	sub    esp,0xc
c001f9dc:	0f b6 96 00 3b 03 c0 	movzx  edx,BYTE PTR [esi-0x3ffcc500]
c001f9e3:	89 d0                	mov    eax,edx
c001f9e5:	85 d2                	test   edx,edx
c001f9e7:	74 52                	je     c001fa3b <KeDisplaySplashScreen()+0x74>
c001f9e9:	80 bb 36 3b 03 c0 db 	cmp    BYTE PTR [ebx-0x3ffcc4ca],0xdb
c001f9f0:	75 13                	jne    c001fa05 <KeDisplaySplashScreen()+0x3e>
c001f9f2:	0f b6 8b 35 3b 03 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffcc4cb]
c001f9f9:	83 e1 fe             	and    ecx,0xfffffffe
c001f9fc:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c001fa02:	75 01                	jne    c001fa05 <KeDisplaySplashScreen()+0x3e>
c001fa04:	47                   	inc    edi
c001fa05:	83 fa 0d             	cmp    edx,0xd
c001fa08:	74 28                	je     c001fa32 <KeDisplaySplashScreen()+0x6b>
c001fa0a:	83 fa 0a             	cmp    edx,0xa
c001fa0d:	75 0a                	jne    c001fa19 <KeDisplaySplashScreen()+0x52>
c001fa0f:	45                   	inc    ebp
c001fa10:	bf 0a 00 00 00       	mov    edi,0xa
c001fa15:	31 db                	xor    ebx,ebx
c001fa17:	eb 19                	jmp    c001fa32 <KeDisplaySplashScreen()+0x6b>
c001fa19:	83 ec 0c             	sub    esp,0xc
c001fa1c:	8d 14 1f             	lea    edx,[edi+ebx*1]
c001fa1f:	55                   	push   ebp
c001fa20:	0f be c0             	movsx  eax,al
c001fa23:	52                   	push   edx
c001fa24:	43                   	inc    ebx
c001fa25:	6a 00                	push   0x0
c001fa27:	6a 0e                	push   0xe
c001fa29:	50                   	push   eax
c001fa2a:	e8 fd 81 00 00       	call   c0027c2c <HalConsoleWriteCharacter(char, int, int, int, int)>
c001fa2f:	83 c4 20             	add    esp,0x20
c001fa32:	46                   	inc    esi
c001fa33:	81 fe 42 01 00 00    	cmp    esi,0x142
c001fa39:	75 a1                	jne    c001f9dc <KeDisplaySplashScreen()+0x15>
c001fa3b:	83 c4 0c             	add    esp,0xc
c001fa3e:	5b                   	pop    ebx
c001fa3f:	5e                   	pop    esi
c001fa40:	5f                   	pop    edi
c001fa41:	5d                   	pop    ebp
c001fa42:	c3                   	ret    

c001fa43 <KeSetBootMessage(char const*)>:
c001fa43:	57                   	push   edi
c001fa44:	56                   	push   esi
c001fa45:	53                   	push   ebx
c001fa46:	81 ec a4 00 00 00    	sub    esp,0xa4
c001fa4c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c001fa53:	68 9e 00 00 00       	push   0x9e
c001fa58:	6a 00                	push   0x0
c001fa5a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fa5e:	56                   	push   esi
c001fa5f:	e8 8c 0a fe ff       	call   c00004f0 <memset>
c001fa64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fa67:	e8 04 0b fe ff       	call   c0000570 <strlen>
c001fa6c:	ba 50 00 00 00       	mov    edx,0x50
c001fa71:	83 c4 10             	add    esp,0x10
c001fa74:	29 c2                	sub    edx,eax
c001fa76:	31 c9                	xor    ecx,ecx
c001fa78:	83 e2 fe             	and    edx,0xfffffffe
c001fa7b:	01 f2                	add    edx,esi
c001fa7d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c001fa82:	84 c0                	test   al,al
c001fa84:	74 0a                	je     c001fa90 <KeSetBootMessage(char const*)+0x4d>
c001fa86:	80 cc 0f             	or     ah,0xf
c001fa89:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c001fa8d:	41                   	inc    ecx
c001fa8e:	eb ed                	jmp    c001fa7d <KeSetBootMessage(char const*)+0x3a>
c001fa90:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c001fa95:	b9 9e 00 00 00       	mov    ecx,0x9e
c001fa9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fa9c:	81 c4 a0 00 00 00    	add    esp,0xa0
c001faa2:	5b                   	pop    ebx
c001faa3:	5e                   	pop    esi
c001faa4:	5f                   	pop    edi
c001faa5:	c3                   	ret    
c001faa6:	66 90                	xchg   ax,ax

c001faa8 <CUnlockScheduler>:
c001faa8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001faad:	83 e8 01             	sub    eax,0x1
c001fab0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fab5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001faba:	85 c0                	test   eax,eax
c001fabc:	75 02                	jne    c001fac0 <CUnlockScheduler+0x18>
c001fabe:	fb                   	sti    
c001fabf:	90                   	nop
c001fac0:	90                   	nop
c001fac1:	c3                   	ret    
c001fac2:	66 90                	xchg   ax,ax

c001fac4 <CLockScheduler>:
c001fac4:	fa                   	cli    
c001fac5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c001faca:	83 c0 01             	add    eax,0x1
c001facd:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c001fad2:	90                   	nop
c001fad3:	c3                   	ret    

c001fad4 <CPrintf>:
c001fad4:	83 ec 0c             	sub    esp,0xc
c001fad7:	83 ec 08             	sub    esp,0x8
c001fada:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fade:	68 70 f9 02 c0       	push   0xc002f970
c001fae3:	e8 a5 96 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c001fae8:	83 c4 10             	add    esp,0x10
c001faeb:	90                   	nop
c001faec:	83 c4 0c             	add    esp,0xc
c001faef:	c3                   	ret    

c001faf0 <Krnl::handlePowerButton()>:
c001faf0:	83 ec 0c             	sub    esp,0xc
c001faf3:	e8 09 07 00 00       	call   c0020201 <KeHandlePowerButton()>
c001faf8:	90                   	nop
c001faf9:	83 c4 0c             	add    esp,0xc
c001fafc:	c3                   	ret    
c001fafd:	8d 76 00             	lea    esi,[esi+0x0]

c001fb00 <Krnl::handleSleepButton()>:
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	e8 2e 07 00 00       	call   c0020236 <KeHandleSleepButton()>
c001fb08:	90                   	nop
c001fb09:	83 c4 0c             	add    esp,0xc
c001fb0c:	c3                   	ret    

c001fb0d <KeCalculateCRC32(unsigned char*, int)>:
c001fb0d:	53                   	push   ebx
c001fb0e:	83 c8 ff             	or     eax,0xffffffff
c001fb11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb15:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001fb19:	01 cb                	add    ebx,ecx
c001fb1b:	39 d9                	cmp    ecx,ebx
c001fb1d:	74 15                	je     c001fb34 <KeCalculateCRC32(unsigned char*, int)+0x27>
c001fb1f:	41                   	inc    ecx
c001fb20:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c001fb23:	31 c2                	xor    edx,eax
c001fb25:	c1 e8 08             	shr    eax,0x8
c001fb28:	0f b6 d2             	movzx  edx,dl
c001fb2b:	33 04 95 60 3c 03 c0 	xor    eax,DWORD PTR [edx*4-0x3ffcc3a0]
c001fb32:	eb e7                	jmp    c001fb1b <KeCalculateCRC32(unsigned char*, int)+0xe>
c001fb34:	f7 d0                	not    eax
c001fb36:	5b                   	pop    ebx
c001fb37:	c3                   	ret    

c001fb38 <EnvVarContainer::getEnv(char const*)>:
c001fb38:	57                   	push   edi
c001fb39:	56                   	push   esi
c001fb3a:	53                   	push   ebx
c001fb3b:	31 db                	xor    ebx,ebx
c001fb3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fb41:	39 1e                	cmp    DWORD PTR [esi],ebx
c001fb43:	7e 2b                	jle    c001fb70 <EnvVarContainer::getEnv(char const*)+0x38>
c001fb45:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001fb4c:	50                   	push   eax
c001fb4d:	50                   	push   eax
c001fb4e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fb51:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001fb54:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001fb58:	e8 f3 0b fe ff       	call   c0000750 <strcmp>
c001fb5d:	83 c4 10             	add    esp,0x10
c001fb60:	85 c0                	test   eax,eax
c001fb62:	75 09                	jne    c001fb6d <EnvVarContainer::getEnv(char const*)+0x35>
c001fb64:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001fb67:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001fb6b:	eb 05                	jmp    c001fb72 <EnvVarContainer::getEnv(char const*)+0x3a>
c001fb6d:	43                   	inc    ebx
c001fb6e:	eb d1                	jmp    c001fb41 <EnvVarContainer::getEnv(char const*)+0x9>
c001fb70:	31 c0                	xor    eax,eax
c001fb72:	5b                   	pop    ebx
c001fb73:	5e                   	pop    esi
c001fb74:	5f                   	pop    edi
c001fb75:	c3                   	ret    

c001fb76 <EnvVarContainer::setEnv(char const*, char const*)>:
c001fb76:	55                   	push   ebp
c001fb77:	57                   	push   edi
c001fb78:	56                   	push   esi
c001fb79:	53                   	push   ebx
c001fb7a:	83 ec 28             	sub    esp,0x28
c001fb7d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001fb81:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001fb85:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fb89:	56                   	push   esi
c001fb8a:	e8 e1 09 fe ff       	call   c0000570 <strlen>
c001fb8f:	40                   	inc    eax
c001fb90:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb93:	e8 66 67 ff ff       	call   c00162fe <malloc>
c001fb98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fb9b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fb9f:	e8 cc 09 fe ff       	call   c0000570 <strlen>
c001fba4:	40                   	inc    eax
c001fba5:	89 04 24             	mov    DWORD PTR [esp],eax
c001fba8:	e8 51 67 ff ff       	call   c00162fe <malloc>
c001fbad:	89 34 24             	mov    DWORD PTR [esp],esi
c001fbb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fbb4:	e8 b7 09 fe ff       	call   c0000570 <strlen>
c001fbb9:	83 c4 0c             	add    esp,0xc
c001fbbc:	40                   	inc    eax
c001fbbd:	50                   	push   eax
c001fbbe:	6a 00                	push   0x0
c001fbc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001fbc4:	e8 27 09 fe ff       	call   c00004f0 <memset>
c001fbc9:	89 34 24             	mov    DWORD PTR [esp],esi
c001fbcc:	e8 9f 09 fe ff       	call   c0000570 <strlen>
c001fbd1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fbd5:	8d 48 01             	lea    ecx,[eax+0x1]
c001fbd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fbda:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbdd:	89 de                	mov    esi,ebx
c001fbdf:	e8 8c 09 fe ff       	call   c0000570 <strlen>
c001fbe4:	83 c4 0c             	add    esp,0xc
c001fbe7:	40                   	inc    eax
c001fbe8:	50                   	push   eax
c001fbe9:	6a 00                	push   0x0
c001fbeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fbef:	e8 fc 08 fe ff       	call   c00004f0 <memset>
c001fbf4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fbf7:	e8 74 09 fe ff       	call   c0000570 <strlen>
c001fbfc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fc00:	8d 48 01             	lea    ecx,[eax+0x1]
c001fc03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc05:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fc08:	40                   	inc    eax
c001fc09:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fc0c:	c1 e0 03             	shl    eax,0x3
c001fc0f:	5a                   	pop    edx
c001fc10:	59                   	pop    ecx
c001fc11:	50                   	push   eax
c001fc12:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001fc15:	e8 d0 66 ff ff       	call   c00162ea <realloc>
c001fc1a:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fc1e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fc21:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fc24:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fc28:	b9 08 00 00 00       	mov    ecx,0x8
c001fc2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fc2f:	83 c4 2c             	add    esp,0x2c
c001fc32:	5b                   	pop    ebx
c001fc33:	5e                   	pop    esi
c001fc34:	5f                   	pop    edi
c001fc35:	5d                   	pop    ebp
c001fc36:	c3                   	ret    
c001fc37:	90                   	nop

c001fc38 <EnvVarContainer::deleteEnv(char const*)>:
c001fc38:	c3                   	ret    
c001fc39:	90                   	nop

c001fc3a <EnvVarContainer::loadFrom(char const*, char const*)>:
c001fc3a:	55                   	push   ebp
c001fc3b:	57                   	push   edi
c001fc3c:	56                   	push   esi
c001fc3d:	53                   	push   ebx
c001fc3e:	81 ec 38 01 00 00    	sub    esp,0x138
c001fc44:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001fc4b:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001fc52:	68 14 01 00 00       	push   0x114
c001fc57:	e8 a2 66 ff ff       	call   c00162fe <malloc>
c001fc5c:	83 c4 0c             	add    esp,0xc
c001fc5f:	89 c3                	mov    ebx,eax
c001fc61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fc64:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001fc6b:	50                   	push   eax
c001fc6c:	e8 23 a7 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c001fc71:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc74:	e8 fd a9 ff ff       	call   c001a676 <File::exists()>
c001fc79:	83 c4 10             	add    esp,0x10
c001fc7c:	84 c0                	test   al,al
c001fc7e:	75 31                	jne    c001fcb1 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001fc80:	50                   	push   eax
c001fc81:	50                   	push   eax
c001fc82:	6a 12                	push   0x12
c001fc84:	53                   	push   ebx
c001fc85:	e8 28 a7 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c001fc8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fc8c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001fc8f:	89 34 24             	mov    DWORD PTR [esp],esi
c001fc92:	e8 d9 08 fe ff       	call   c0000570 <strlen>
c001fc97:	5a                   	pop    edx
c001fc98:	31 d2                	xor    edx,edx
c001fc9a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fc9e:	51                   	push   ecx
c001fc9f:	56                   	push   esi
c001fca0:	52                   	push   edx
c001fca1:	50                   	push   eax
c001fca2:	53                   	push   ebx
c001fca3:	ff d7                	call   edi
c001fca5:	83 c4 14             	add    esp,0x14
c001fca8:	53                   	push   ebx
c001fca9:	e8 62 a7 ff ff       	call   c001a410 <File::close()>
c001fcae:	83 c4 10             	add    esp,0x10
c001fcb1:	56                   	push   esi
c001fcb2:	31 f6                	xor    esi,esi
c001fcb4:	68 00 01 00 00       	push   0x100
c001fcb9:	6a 00                	push   0x0
c001fcbb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fcbf:	50                   	push   eax
c001fcc0:	e8 2b 08 fe ff       	call   c00004f0 <memset>
c001fcc5:	5f                   	pop    edi
c001fcc6:	58                   	pop    eax
c001fcc7:	6a 01                	push   0x1
c001fcc9:	53                   	push   ebx
c001fcca:	e8 e3 a6 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c001fccf:	83 c4 10             	add    esp,0x10
c001fcd2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fcda:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001fce2:	83 ec 0c             	sub    esp,0xc
c001fce5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fce7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001fceb:	51                   	push   ecx
c001fcec:	8d 54 24 23          	lea    edx,[esp+0x23]
c001fcf0:	52                   	push   edx
c001fcf1:	6a 00                	push   0x0
c001fcf3:	6a 01                	push   0x1
c001fcf5:	53                   	push   ebx
c001fcf6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001fcf9:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001fcfe:	83 c4 20             	add    esp,0x20
c001fd01:	89 c2                	mov    edx,eax
c001fd03:	85 c0                	test   eax,eax
c001fd05:	0f 84 36 01 00 00    	je     c001fe41 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c001fd0b:	83 f8 0d             	cmp    eax,0xd
c001fd0e:	0f 84 22 01 00 00    	je     c001fe36 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fd14:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fd19:	0f 84 f0 00 00 00    	je     c001fe0f <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c001fd1f:	83 f8 0a             	cmp    eax,0xa
c001fd22:	74 13                	je     c001fd37 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fd24:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd29:	74 0c                	je     c001fd37 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c001fd2b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fd31:	0f 8e f6 00 00 00    	jle    c001fe2d <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c001fd37:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd3b:	83 ec 0c             	sub    esp,0xc
c001fd3e:	8d 78 01             	lea    edi,[eax+0x1]
c001fd41:	57                   	push   edi
c001fd42:	e8 b7 65 ff ff       	call   c00162fe <malloc>
c001fd47:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001fd4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001fd4f:	8d 56 04             	lea    edx,[esi+0x4]
c001fd52:	89 14 24             	mov    DWORD PTR [esp],edx
c001fd55:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fd59:	e8 a0 65 ff ff       	call   c00162fe <malloc>
c001fd5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001fd62:	83 c4 0c             	add    esp,0xc
c001fd65:	57                   	push   edi
c001fd66:	6a 00                	push   0x0
c001fd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001fd6c:	e8 7f 07 fe ff       	call   c00004f0 <memset>
c001fd71:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fd75:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001fd79:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fd7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fd7f:	83 c4 0c             	add    esp,0xc
c001fd82:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001fd86:	52                   	push   edx
c001fd87:	6a 00                	push   0x0
c001fd89:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001fd8d:	e8 5e 07 fe ff       	call   c00004f0 <memset>
c001fd92:	8d 74 24 30          	lea    esi,[esp+0x30]
c001fd96:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001fd9a:	89 34 24             	mov    DWORD PTR [esp],esi
c001fd9d:	e8 ce 07 fe ff       	call   c0000570 <strlen>
c001fda2:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001fda6:	89 c1                	mov    ecx,eax
c001fda8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fdaa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001fdad:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001fdb0:	40                   	inc    eax
c001fdb1:	83 c4 10             	add    esp,0x10
c001fdb4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001fdb7:	85 d2                	test   edx,edx
c001fdb9:	75 0c                	jne    c001fdc7 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001fdbb:	83 ec 0c             	sub    esp,0xc
c001fdbe:	6a 08                	push   0x8
c001fdc0:	e8 39 65 ff ff       	call   c00162fe <malloc>
c001fdc5:	eb 0c                	jmp    c001fdd3 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c001fdc7:	c1 e0 03             	shl    eax,0x3
c001fdca:	51                   	push   ecx
c001fdcb:	51                   	push   ecx
c001fdcc:	50                   	push   eax
c001fdcd:	52                   	push   edx
c001fdce:	e8 17 65 ff ff       	call   c00162ea <realloc>
c001fdd3:	83 c4 10             	add    esp,0x10
c001fdd6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001fdd9:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001fddc:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001fddf:	8d 74 24 18          	lea    esi,[esp+0x18]
c001fde3:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001fde7:	b9 08 00 00 00       	mov    ecx,0x8
c001fdec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fdee:	31 f6                	xor    esi,esi
c001fdf0:	50                   	push   eax
c001fdf1:	68 00 01 00 00       	push   0x100
c001fdf6:	6a 00                	push   0x0
c001fdf8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001fdfc:	50                   	push   eax
c001fdfd:	e8 ee 06 fe ff       	call   c00004f0 <memset>
c001fe02:	83 c4 10             	add    esp,0x10
c001fe05:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001fe0d:	eb 27                	jmp    c001fe36 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe0f:	83 f8 3d             	cmp    eax,0x3d
c001fe12:	74 1e                	je     c001fe32 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c001fe14:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001fe1a:	7f 07                	jg     c001fe23 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c001fe1c:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c001fe20:	46                   	inc    esi
c001fe21:	eb 13                	jmp    c001fe36 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe23:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001fe2b:	eb 09                	jmp    c001fe36 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c001fe2d:	83 f8 3d             	cmp    eax,0x3d
c001fe30:	75 ea                	jne    c001fe1c <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c001fe32:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001fe36:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fe3b:	0f 85 99 fe ff ff    	jne    c001fcda <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c001fe41:	83 ec 0c             	sub    esp,0xc
c001fe44:	53                   	push   ebx
c001fe45:	e8 c6 a5 ff ff       	call   c001a410 <File::close()>
c001fe4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001fe4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fe4f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001fe52:	81 c4 3c 01 00 00    	add    esp,0x13c
c001fe58:	5b                   	pop    ebx
c001fe59:	5e                   	pop    esi
c001fe5a:	5f                   	pop    edi
c001fe5b:	5d                   	pop    ebp
c001fe5c:	c3                   	ret    
c001fe5d:	90                   	nop

c001fe5e <EnvVarContainer::__loadSystem()>:
c001fe5e:	83 ec 10             	sub    esp,0x10
c001fe61:	68 60 40 03 c0       	push   0xc0034060
c001fe66:	68 ec 26 03 c0       	push   0xc00326ec
c001fe6b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe6f:	e8 c6 fd ff ff       	call   c001fc3a <EnvVarContainer::loadFrom(char const*, char const*)>
c001fe74:	83 c4 1c             	add    esp,0x1c
c001fe77:	c3                   	ret    

c001fe78 <EnvVarContainer::__loadUser()>:
c001fe78:	c3                   	ret    
c001fe79:	90                   	nop

c001fe7a <EnvVarContainer::EnvVarContainer(Process*)>:
c001fe7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fe8c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe8f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe9a:	90                   	nop
c001fe9b:	c3                   	ret    

c001fe9c <EnvVarContainer::~EnvVarContainer()>:
c001fe9c:	83 ec 0c             	sub    esp,0xc
c001fe9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fea6:	85 c0                	test   eax,eax
c001fea8:	74 1d                	je     c001fec7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001feaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feae:	8b 00                	mov    eax,DWORD PTR [eax]
c001feb0:	85 c0                	test   eax,eax
c001feb2:	74 13                	je     c001fec7 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001feb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001febb:	83 ec 0c             	sub    esp,0xc
c001febe:	50                   	push   eax
c001febf:	e8 4a 64 ff ff       	call   c001630e <free>
c001fec4:	83 c4 10             	add    esp,0x10
c001fec7:	90                   	nop
c001fec8:	83 c4 0c             	add    esp,0xc
c001fecb:	c3                   	ret    

c001fecc <KeGetEnv(Process*, char const*)>:
c001fecc:	53                   	push   ebx
c001fecd:	83 ec 08             	sub    esp,0x8
c001fed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fed8:	39 05 f8 01 04 c0    	cmp    DWORD PTR ds:0xc00401f8,eax
c001fede:	74 04                	je     c001fee4 <KeGetEnv(Process*, char const*)+0x18>
c001fee0:	85 c0                	test   eax,eax
c001fee2:	75 0b                	jne    c001feef <KeGetEnv(Process*, char const*)+0x23>
c001fee4:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001fee9:	85 c0                	test   eax,eax
c001feeb:	75 19                	jne    c001ff06 <KeGetEnv(Process*, char const*)+0x3a>
c001feed:	eb 27                	jmp    c001ff16 <KeGetEnv(Process*, char const*)+0x4a>
c001feef:	52                   	push   edx
c001fef0:	52                   	push   edx
c001fef1:	53                   	push   ebx
c001fef2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001fef8:	e8 3b fc ff ff       	call   c001fb38 <EnvVarContainer::getEnv(char const*)>
c001fefd:	83 c4 10             	add    esp,0x10
c001ff00:	85 c0                	test   eax,eax
c001ff02:	75 28                	jne    c001ff2c <KeGetEnv(Process*, char const*)+0x60>
c001ff04:	eb de                	jmp    c001fee4 <KeGetEnv(Process*, char const*)+0x18>
c001ff06:	52                   	push   edx
c001ff07:	52                   	push   edx
c001ff08:	53                   	push   ebx
c001ff09:	50                   	push   eax
c001ff0a:	e8 29 fc ff ff       	call   c001fb38 <EnvVarContainer::getEnv(char const*)>
c001ff0f:	83 c4 10             	add    esp,0x10
c001ff12:	85 c0                	test   eax,eax
c001ff14:	75 16                	jne    c001ff2c <KeGetEnv(Process*, char const*)+0x60>
c001ff16:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ff1a:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c001ff1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ff23:	83 c4 08             	add    esp,0x8
c001ff26:	5b                   	pop    ebx
c001ff27:	e9 0c fc ff ff       	jmp    c001fb38 <EnvVarContainer::getEnv(char const*)>
c001ff2c:	83 c4 08             	add    esp,0x8
c001ff2f:	5b                   	pop    ebx
c001ff30:	c3                   	ret    

c001ff31 <KeSetEnvSystem(char const*, char const*)>:
c001ff31:	83 ec 10             	sub    esp,0x10
c001ff34:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff3c:	ff 35 84 f9 03 c0    	push   DWORD PTR ds:0xc003f984
c001ff42:	e8 2f fc ff ff       	call   c001fb76 <EnvVarContainer::setEnv(char const*, char const*)>
c001ff47:	83 c4 1c             	add    esp,0x1c
c001ff4a:	c3                   	ret    

c001ff4b <KeSetEnvUser(char const*, char const*)>:
c001ff4b:	a1 80 f9 03 c0       	mov    eax,ds:0xc003f980
c001ff50:	85 c0                	test   eax,eax
c001ff52:	74 15                	je     c001ff69 <KeSetEnvUser(char const*, char const*)+0x1e>
c001ff54:	83 ec 10             	sub    esp,0x10
c001ff57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff5b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ff5f:	50                   	push   eax
c001ff60:	e8 11 fc ff ff       	call   c001fb76 <EnvVarContainer::setEnv(char const*, char const*)>
c001ff65:	83 c4 1c             	add    esp,0x1c
c001ff68:	c3                   	ret    
c001ff69:	c3                   	ret    

c001ff6a <KeSetEnvProcess(Process*, char const*, char const*)>:
c001ff6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff6e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c001ff74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ff78:	e9 f9 fb ff ff       	jmp    c001fb76 <EnvVarContainer::setEnv(char const*, char const*)>

c001ff7d <KeDeleteEnvSystem(char const*)>:
c001ff7d:	c3                   	ret    

c001ff7e <KeDeleteEnvUser(char const*)>:
c001ff7e:	c3                   	ret    

c001ff7f <KeDeleteEnvProcess(Process*, char const*)>:
c001ff7f:	c3                   	ret    

c001ff80 <KeNewProcessEnv(Process*)>:
c001ff80:	83 ec 28             	sub    esp,0x28
c001ff83:	6a 0c                	push   0xc
c001ff85:	e8 74 63 ff ff       	call   c00162fe <malloc>
c001ff8a:	5a                   	pop    edx
c001ff8b:	59                   	pop    ecx
c001ff8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001ff90:	50                   	push   eax
c001ff91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ff95:	e8 e0 fe ff ff       	call   c001fe7a <EnvVarContainer::EnvVarContainer(Process*)>
c001ff9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ff9e:	83 c4 2c             	add    esp,0x2c
c001ffa1:	c3                   	ret    

c001ffa2 <KeCopyProcessEnv(Process*, Process*)>:
c001ffa2:	57                   	push   edi
c001ffa3:	56                   	push   esi
c001ffa4:	53                   	push   ebx
c001ffa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa9:	83 ec 0c             	sub    esp,0xc
c001ffac:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001ffb2:	6a 0c                	push   0xc
c001ffb4:	e8 45 63 ff ff       	call   c00162fe <malloc>
c001ffb9:	89 c3                	mov    ebx,eax
c001ffbb:	58                   	pop    eax
c001ffbc:	5a                   	pop    edx
c001ffbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc1:	53                   	push   ebx
c001ffc2:	e8 b3 fe ff ff       	call   c001fe7a <EnvVarContainer::EnvVarContainer(Process*)>
c001ffc7:	8b 07                	mov    eax,DWORD PTR [edi]
c001ffc9:	89 03                	mov    DWORD PTR [ebx],eax
c001ffcb:	c1 e0 03             	shl    eax,0x3
c001ffce:	89 04 24             	mov    DWORD PTR [esp],eax
c001ffd1:	e8 28 63 ff ff       	call   c00162fe <malloc>
c001ffd6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001ffd9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001ffdb:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001ffde:	c1 e1 03             	shl    ecx,0x3
c001ffe1:	89 c7                	mov    edi,eax
c001ffe3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ffe5:	83 c4 10             	add    esp,0x10
c001ffe8:	89 d8                	mov    eax,ebx
c001ffea:	5b                   	pop    ebx
c001ffeb:	5e                   	pop    esi
c001ffec:	5f                   	pop    edi
c001ffed:	c3                   	ret    

c001ffee <KeLoadSystemEnv()>:
c001ffee:	53                   	push   ebx
c001ffef:	83 ec 14             	sub    esp,0x14
c001fff2:	6a 0c                	push   0xc
c001fff4:	e8 05 63 ff ff       	call   c00162fe <malloc>
c001fff9:	89 c3                	mov    ebx,eax
c001fffb:	58                   	pop    eax
c001fffc:	5a                   	pop    edx
c001fffd:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020003:	53                   	push   ebx
c0020004:	e8 71 fe ff ff       	call   c001fe7a <EnvVarContainer::EnvVarContainer(Process*)>
c0020009:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002000c:	89 1d 84 f9 03 c0    	mov    DWORD PTR ds:0xc003f984,ebx
c0020012:	e8 47 fe ff ff       	call   c001fe5e <EnvVarContainer::__loadSystem()>
c0020017:	83 c4 18             	add    esp,0x18
c002001a:	5b                   	pop    ebx
c002001b:	c3                   	ret    

c002001c <KeLoadUserEnv()>:
c002001c:	53                   	push   ebx
c002001d:	83 ec 14             	sub    esp,0x14
c0020020:	6a 0c                	push   0xc
c0020022:	e8 d7 62 ff ff       	call   c00162fe <malloc>
c0020027:	89 c3                	mov    ebx,eax
c0020029:	58                   	pop    eax
c002002a:	5a                   	pop    edx
c002002b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020031:	53                   	push   ebx
c0020032:	e8 43 fe ff ff       	call   c001fe7a <EnvVarContainer::EnvVarContainer(Process*)>
c0020037:	89 1d 80 f9 03 c0    	mov    DWORD PTR ds:0xc003f980,ebx
c002003d:	83 c4 18             	add    esp,0x18
c0020040:	5b                   	pop    ebx
c0020041:	c3                   	ret    

c0020042 <KeFlushEnv()>:
c0020042:	c3                   	ret    

c0020043 <KeGetProcessTotalEnvCount(Process*)>:
c0020043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020047:	8b 15 80 f9 03 c0    	mov    edx,DWORD PTR ds:0xc003f980
c002004d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0020053:	a1 84 f9 03 c0       	mov    eax,ds:0xc003f984
c0020058:	8b 00                	mov    eax,DWORD PTR [eax]
c002005a:	03 01                	add    eax,DWORD PTR [ecx]
c002005c:	85 d2                	test   edx,edx
c002005e:	74 02                	je     c0020062 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0020060:	03 02                	add    eax,DWORD PTR [edx]
c0020062:	c3                   	ret    

c0020063 <KeGetProcessEnvPair(Process*, int)>:
c0020063:	57                   	push   edi
c0020064:	56                   	push   esi
c0020065:	8b 35 80 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f980
c002006b:	53                   	push   ebx
c002006c:	85 f6                	test   esi,esi
c002006e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020072:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020076:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c002007c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020080:	8b 01                	mov    eax,DWORD PTR [ecx]
c0020082:	75 16                	jne    c002009a <KeGetProcessEnvPair(Process*, int)+0x37>
c0020084:	39 c2                	cmp    edx,eax
c0020086:	7c 16                	jl     c002009e <KeGetProcessEnvPair(Process*, int)+0x3b>
c0020088:	8b 0d 84 f9 03 c0    	mov    ecx,DWORD PTR ds:0xc003f984
c002008e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0020090:	01 c6                	add    esi,eax
c0020092:	39 d6                	cmp    esi,edx
c0020094:	7e 3c                	jle    c00200d2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0020096:	29 c2                	sub    edx,eax
c0020098:	eb 04                	jmp    c002009e <KeGetProcessEnvPair(Process*, int)+0x3b>
c002009a:	39 c2                	cmp    edx,eax
c002009c:	7d 05                	jge    c00200a3 <KeGetProcessEnvPair(Process*, int)+0x40>
c002009e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00200a1:	eb 20                	jmp    c00200c3 <KeGetProcessEnvPair(Process*, int)+0x60>
c00200a3:	8b 3e                	mov    edi,DWORD PTR [esi]
c00200a5:	8d 0c 07             	lea    ecx,[edi+eax*1]
c00200a8:	39 d1                	cmp    ecx,edx
c00200aa:	7e 04                	jle    c00200b0 <KeGetProcessEnvPair(Process*, int)+0x4d>
c00200ac:	29 c2                	sub    edx,eax
c00200ae:	eb 10                	jmp    c00200c0 <KeGetProcessEnvPair(Process*, int)+0x5d>
c00200b0:	8b 35 84 f9 03 c0    	mov    esi,DWORD PTR ds:0xc003f984
c00200b6:	03 0e                	add    ecx,DWORD PTR [esi]
c00200b8:	39 d1                	cmp    ecx,edx
c00200ba:	7e 16                	jle    c00200d2 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00200bc:	29 c2                	sub    edx,eax
c00200be:	29 fa                	sub    edx,edi
c00200c0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00200c3:	8d 14 d0             	lea    edx,[eax+edx*8]
c00200c6:	8b 02                	mov    eax,DWORD PTR [edx]
c00200c8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00200cb:	89 03                	mov    DWORD PTR [ebx],eax
c00200cd:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00200d0:	eb 1d                	jmp    c00200ef <KeGetProcessEnvPair(Process*, int)+0x8c>
c00200d2:	83 ec 0c             	sub    esp,0xc
c00200d5:	68 0e 27 03 c0       	push   0xc003270e
c00200da:	e8 c7 00 00 00       	call   c00201a6 <KePanic(char const*)>
c00200df:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00200e5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00200ec:	83 c4 10             	add    esp,0x10
c00200ef:	89 d8                	mov    eax,ebx
c00200f1:	5b                   	pop    ebx
c00200f2:	5e                   	pop    esi
c00200f3:	5f                   	pop    edi
c00200f4:	c2 04 00             	ret    0x4

c00200f7 <CPU::current()>:
c00200f7:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00200fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020102:	c3                   	ret    

c0020103 <operator new(unsigned long)>:
c0020103:	e9 f6 61 ff ff       	jmp    c00162fe <malloc>

c0020108 <operator delete(void*)>:
c0020108:	e9 11 62 ff ff       	jmp    c001631e <rfree>

c002010d <disableIRQs()>:
c002010d:	fa                   	cli    
c002010e:	c3                   	ret    

c002010f <enableIRQs()>:
c002010f:	fb                   	sti    
c0020110:	c3                   	ret    

c0020111 <lockScheduler()>:
c0020111:	fa                   	cli    
c0020112:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0020118:	c3                   	ret    

c0020119 <unlockScheduler()>:
c0020119:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002011e:	48                   	dec    eax
c002011f:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020124:	75 01                	jne    c0020127 <unlockScheduler()+0xe>
c0020126:	fb                   	sti    
c0020127:	c3                   	ret    

c0020128 <lockStuff()>:
c0020128:	fa                   	cli    
c0020129:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002012f:	ff 05 cc 01 04 c0    	inc    DWORD PTR ds:0xc00401cc
c0020135:	c3                   	ret    

c0020136 <unlockStuff()>:
c0020136:	83 ec 0c             	sub    esp,0xc
c0020139:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002013e:	48                   	dec    eax
c002013f:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020144:	75 18                	jne    c002015e <unlockStuff()+0x28>
c0020146:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c002014d:	74 0f                	je     c002015e <unlockStuff()+0x28>
c002014f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020159:	e8 26 50 00 00       	call   c0025184 <schedule()>
c002015e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020163:	48                   	dec    eax
c0020164:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020169:	75 01                	jne    c002016c <unlockStuff()+0x36>
c002016b:	fb                   	sti    
c002016c:	83 c4 0c             	add    esp,0xc
c002016f:	c3                   	ret    

c0020170 <Virt::getAKernelVAS()>:
c0020170:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c0020175:	c3                   	ret    

c0020176 <__not_memcpy>:
c0020176:	57                   	push   edi
c0020177:	56                   	push   esi
c0020178:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002017c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020180:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020184:	89 c7                	mov    edi,eax
c0020186:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020188:	5e                   	pop    esi
c0020189:	5f                   	pop    edi
c002018a:	c3                   	ret    
c002018b:	90                   	nop

c002018c <Mutex::Mutex()>:
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020193:	83 ec 08             	sub    esp,0x8
c0020196:	6a 01                	push   0x1
c0020198:	50                   	push   eax
c0020199:	e8 b2 03 00 00       	call   c0020550 <Semaphore::Semaphore(int)>
c002019e:	83 c4 10             	add    esp,0x10
c00201a1:	90                   	nop
c00201a2:	83 c4 0c             	add    esp,0xc
c00201a5:	c3                   	ret    

c00201a6 <KePanic(char const*)>:
c00201a6:	c6 05 88 f9 03 c0 01 	mov    BYTE PTR ds:0xc003f988,0x1
c00201ad:	e9 cc 6c 00 00       	jmp    c0026e7e <HalPanic(char const*)>

c00201b2 <KePowerThread(void*)>:
c00201b2:	83 ec 0c             	sub    esp,0xc
c00201b5:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00201ba:	48                   	dec    eax
c00201bb:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00201c0:	75 01                	jne    c00201c3 <KePowerThread(void*)+0x11>
c00201c2:	fb                   	sti    
c00201c3:	83 ec 0c             	sub    esp,0xc
c00201c6:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c00201cd:	6a 0a                	push   0xa
c00201cf:	e8 9c 51 00 00       	call   c0025370 <sleep(unsigned int)>
c00201d4:	83 05 e4 f9 03 c0 0a 	add    DWORD PTR ds:0xc003f9e4,0xa
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	eb e3                	jmp    c00201c3 <KePowerThread(void*)+0x11>

c00201e0 <KeChangePowerSettings(PowerSettings)>:
c00201e0:	57                   	push   edi
c00201e1:	b9 09 00 00 00       	mov    ecx,0x9
c00201e6:	56                   	push   esi
c00201e7:	bf c0 f9 03 c0       	mov    edi,0xc003f9c0
c00201ec:	fc                   	cld    
c00201ed:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00201f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00201f3:	5e                   	pop    esi
c00201f4:	5f                   	pop    edi
c00201f5:	c3                   	ret    

c00201f6 <KeUserIOReceived()>:
c00201f6:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020200:	c3                   	ret    

c0020201 <KeHandlePowerButton()>:
c0020201:	83 ec 0c             	sub    esp,0xc
c0020204:	a1 c0 f9 03 c0       	mov    eax,ds:0xc003f9c0
c0020209:	83 f8 02             	cmp    eax,0x2
c002020c:	75 10                	jne    c002021e <KeHandlePowerButton()+0x1d>
c002020e:	83 ec 0c             	sub    esp,0xc
c0020211:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0020217:	e8 54 57 ff ff       	call   c0015970 <Computer::shutdown()>
c002021c:	eb 11                	jmp    c002022f <KeHandlePowerButton()+0x2e>
c002021e:	48                   	dec    eax
c002021f:	75 11                	jne    c0020232 <KeHandlePowerButton()+0x31>
c0020221:	83 ec 0c             	sub    esp,0xc
c0020224:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002022a:	e8 71 57 ff ff       	call   c00159a0 <Computer::sleep()>
c002022f:	83 c4 10             	add    esp,0x10
c0020232:	83 c4 0c             	add    esp,0xc
c0020235:	c3                   	ret    

c0020236 <KeHandleSleepButton()>:
c0020236:	83 ec 0c             	sub    esp,0xc
c0020239:	a1 c4 f9 03 c0       	mov    eax,ds:0xc003f9c4
c002023e:	83 f8 02             	cmp    eax,0x2
c0020241:	75 10                	jne    c0020253 <KeHandleSleepButton()+0x1d>
c0020243:	83 ec 0c             	sub    esp,0xc
c0020246:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002024c:	e8 1f 57 ff ff       	call   c0015970 <Computer::shutdown()>
c0020251:	eb 11                	jmp    c0020264 <KeHandleSleepButton()+0x2e>
c0020253:	48                   	dec    eax
c0020254:	75 11                	jne    c0020267 <KeHandleSleepButton()+0x31>
c0020256:	83 ec 0c             	sub    esp,0xc
c0020259:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002025f:	e8 3c 57 ff ff       	call   c00159a0 <Computer::sleep()>
c0020264:	83 c4 10             	add    esp,0x10
c0020267:	83 c4 0c             	add    esp,0xc
c002026a:	c3                   	ret    

c002026b <KeSetupPowerManager()>:
c002026b:	83 ec 0c             	sub    esp,0xc
c002026e:	c7 05 e4 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9e4,0x0
c0020278:	68 f0 00 00 00       	push   0xf0
c002027d:	c6 05 a0 f9 03 c0 00 	mov    BYTE PTR ds:0xc003f9a0,0x0
c0020284:	6a 00                	push   0x0
c0020286:	68 b2 01 02 c0       	push   0xc00201b2
c002028b:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0020291:	e8 9e 4c 00 00       	call   c0024f34 <Process::createThread(void (*)(void*), void*, int)>
c0020296:	c7 05 c0 f9 03 c0 02 00 00 00 	mov    DWORD PTR ds:0xc003f9c0,0x2
c00202a0:	c7 05 c4 f9 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003f9c4,0x1
c00202aa:	c7 05 c8 f9 03 c0 03 00 00 00 	mov    DWORD PTR ds:0xc003f9c8,0x3
c00202b4:	c7 05 cc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9cc,0x0
c00202be:	c7 05 d8 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d8,0x0
c00202c8:	c7 05 d0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9d0,0x0
c00202d2:	c7 05 dc f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9dc,0x0
c00202dc:	c7 05 d4 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9d4,0x3c
c00202e6:	c7 05 e0 f9 03 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc003f9e0,0x3c
c00202f0:	83 c4 1c             	add    esp,0x1c
c00202f3:	c3                   	ret    

c00202f4 <KeRand()>:
c00202f4:	69 05 e8 f9 03 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc003f9e8,0x2875
c00202fe:	69 0d ec f9 03 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc003f9ec,0xa2e7b175
c0020308:	53                   	push   ebx
c0020309:	01 c1                	add    ecx,eax
c002030b:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0020310:	f7 25 e8 f9 03 c0    	mul    DWORD PTR ds:0xc003f9e8
c0020316:	01 ca                	add    edx,ecx
c0020318:	05 ef 04 b5 00       	add    eax,0xb504ef
c002031d:	83 d2 00             	adc    edx,0x0
c0020320:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020325:	0f b7 da             	movzx  ebx,dx
c0020328:	89 da                	mov    edx,ebx
c002032a:	89 1d ec f9 03 c0    	mov    DWORD PTR ds:0xc003f9ec,ebx
c0020330:	0f ac d0 0e          	shrd   eax,edx,0xe
c0020334:	5b                   	pop    ebx
c0020335:	c3                   	ret    

c0020336 <KeSeedRand(unsigned int)>:
c0020336:	53                   	push   ebx
c0020337:	83 ec 08             	sub    esp,0x8
c002033a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002033e:	e8 5a 6e 00 00       	call   c002719d <HalGetRand()>
c0020343:	c7 05 ec f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9ec,0x0
c002034d:	31 d8                	xor    eax,ebx
c002034f:	a3 e8 f9 03 c0       	mov    ds:0xc003f9e8,eax
c0020354:	e8 9b ff ff ff       	call   c00202f4 <KeRand()>
c0020359:	83 c4 08             	add    esp,0x8
c002035c:	5b                   	pop    ebx
c002035d:	eb 95                	jmp    c00202f4 <KeRand()>

c002035f <KeInitRand()>:
c002035f:	83 ec 0c             	sub    esp,0xc
c0020362:	e8 2b 6c 00 00       	call   c0026f92 <HalQueryPerformanceCounter()>
c0020367:	0f 20 da             	mov    edx,cr3
c002036a:	0f 22 da             	mov    cr3,edx
c002036d:	0f 20 da             	mov    edx,cr3
c0020370:	0f 22 da             	mov    cr3,edx
c0020373:	0f 20 da             	mov    edx,cr3
c0020376:	0f 22 da             	mov    cr3,edx
c0020379:	0f 20 da             	mov    edx,cr3
c002037c:	0f 22 da             	mov    cr3,edx
c002037f:	83 ec 0c             	sub    esp,0xc
c0020382:	35 03 8a 95 38       	xor    eax,0x38958a03
c0020387:	50                   	push   eax
c0020388:	e8 a9 ff ff ff       	call   c0020336 <KeSeedRand(unsigned int)>
c002038d:	83 c4 1c             	add    esp,0x1c
c0020390:	c3                   	ret    
c0020391:	66 90                	xchg   ax,ax
c0020393:	90                   	nop

c0020394 <KeResolveCompatibilitySymbol(char*)>:
c0020394:	83 ec 0c             	sub    esp,0xc
c0020397:	83 ec 08             	sub    esp,0x8
c002039a:	68 28 27 03 c0       	push   0xc0032728
c002039f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203a3:	e8 a8 03 fe ff       	call   c0000750 <strcmp>
c00203a8:	83 c4 10             	add    esp,0x10
c00203ab:	85 c0                	test   eax,eax
c00203ad:	0f 94 c0             	sete   al
c00203b0:	0f b6 c0             	movzx  eax,al
c00203b3:	85 c0                	test   eax,eax
c00203b5:	74 0d                	je     c00203c4 <KeResolveCompatibilitySymbol(char*)+0x30>
c00203b7:	b8 bc a9 03 c0       	mov    eax,0xc003a9bc
c00203bc:	e9 8b 01 00 00       	jmp    c002054c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203c1:	8d 76 00             	lea    esi,[esi+0x0]
c00203c4:	83 ec 08             	sub    esp,0x8
c00203c7:	68 31 27 03 c0       	push   0xc0032731
c00203cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203d0:	e8 7b 03 fe ff       	call   c0000750 <strcmp>
c00203d5:	83 c4 10             	add    esp,0x10
c00203d8:	85 c0                	test   eax,eax
c00203da:	0f 94 c0             	sete   al
c00203dd:	0f b6 c0             	movzx  eax,al
c00203e0:	85 c0                	test   eax,eax
c00203e2:	74 0c                	je     c00203f0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00203e4:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c00203e9:	e9 5e 01 00 00       	jmp    c002054c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00203ee:	66 90                	xchg   ax,ax
c00203f0:	83 ec 08             	sub    esp,0x8
c00203f3:	68 3b 27 03 c0       	push   0xc003273b
c00203f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203fc:	e8 4f 03 fe ff       	call   c0000750 <strcmp>
c0020401:	83 c4 10             	add    esp,0x10
c0020404:	85 c0                	test   eax,eax
c0020406:	0f 94 c0             	sete   al
c0020409:	0f b6 c0             	movzx  eax,al
c002040c:	85 c0                	test   eax,eax
c002040e:	74 0c                	je     c002041c <KeResolveCompatibilitySymbol(char*)+0x88>
c0020410:	b8 b4 e2 02 c0       	mov    eax,0xc002e2b4
c0020415:	e9 32 01 00 00       	jmp    c002054c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002041a:	66 90                	xchg   ax,ax
c002041c:	83 ec 08             	sub    esp,0x8
c002041f:	68 44 27 03 c0       	push   0xc0032744
c0020424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020428:	e8 23 03 fe ff       	call   c0000750 <strcmp>
c002042d:	83 c4 10             	add    esp,0x10
c0020430:	85 c0                	test   eax,eax
c0020432:	0f 94 c0             	sete   al
c0020435:	0f b6 c0             	movzx  eax,al
c0020438:	85 c0                	test   eax,eax
c002043a:	74 0c                	je     c0020448 <KeResolveCompatibilitySymbol(char*)+0xb4>
c002043c:	b8 a6 01 02 c0       	mov    eax,0xc00201a6
c0020441:	e9 06 01 00 00       	jmp    c002054c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020446:	66 90                	xchg   ax,ax
c0020448:	83 ec 08             	sub    esp,0x8
c002044b:	68 57 27 03 c0       	push   0xc0032757
c0020450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020454:	e8 f7 02 fe ff       	call   c0000750 <strcmp>
c0020459:	83 c4 10             	add    esp,0x10
c002045c:	85 c0                	test   eax,eax
c002045e:	0f 94 c0             	sete   al
c0020461:	0f b6 c0             	movzx  eax,al
c0020464:	85 c0                	test   eax,eax
c0020466:	74 0c                	je     c0020474 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0020468:	b8 43 fa 01 c0       	mov    eax,0xc001fa43
c002046d:	e9 da 00 00 00       	jmp    c002054c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020472:	66 90                	xchg   ax,ax
c0020474:	83 ec 08             	sub    esp,0x8
c0020477:	68 74 27 03 c0       	push   0xc0032774
c002047c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020480:	e8 cb 02 fe ff       	call   c0000750 <strcmp>
c0020485:	83 c4 10             	add    esp,0x10
c0020488:	85 c0                	test   eax,eax
c002048a:	0f 94 c0             	sete   al
c002048d:	0f b6 c0             	movzx  eax,al
c0020490:	85 c0                	test   eax,eax
c0020492:	74 0c                	je     c00204a0 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0020494:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0020499:	e9 ae 00 00 00       	jmp    c002054c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002049e:	66 90                	xchg   ax,ax
c00204a0:	83 ec 08             	sub    esp,0x8
c00204a3:	68 7e 27 03 c0       	push   0xc003277e
c00204a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204ac:	e8 9f 02 fe ff       	call   c0000750 <strcmp>
c00204b1:	83 c4 10             	add    esp,0x10
c00204b4:	85 c0                	test   eax,eax
c00204b6:	0f 94 c0             	sete   al
c00204b9:	0f b6 c0             	movzx  eax,al
c00204bc:	85 c0                	test   eax,eax
c00204be:	74 0c                	je     c00204cc <KeResolveCompatibilitySymbol(char*)+0x138>
c00204c0:	b8 00 e4 02 c0       	mov    eax,0xc002e400
c00204c5:	e9 82 00 00 00       	jmp    c002054c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204ca:	66 90                	xchg   ax,ax
c00204cc:	83 ec 08             	sub    esp,0x8
c00204cf:	68 87 27 03 c0       	push   0xc0032787
c00204d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204d8:	e8 73 02 fe ff       	call   c0000750 <strcmp>
c00204dd:	83 c4 10             	add    esp,0x10
c00204e0:	85 c0                	test   eax,eax
c00204e2:	0f 94 c0             	sete   al
c00204e5:	0f b6 c0             	movzx  eax,al
c00204e8:	85 c0                	test   eax,eax
c00204ea:	74 08                	je     c00204f4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00204ec:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c00204f1:	eb 59                	jmp    c002054c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00204f3:	90                   	nop
c00204f4:	83 ec 08             	sub    esp,0x8
c00204f7:	68 9f 27 03 c0       	push   0xc003279f
c00204fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020500:	e8 4b 02 fe ff       	call   c0000750 <strcmp>
c0020505:	83 c4 10             	add    esp,0x10
c0020508:	85 c0                	test   eax,eax
c002050a:	0f 94 c0             	sete   al
c002050d:	0f b6 c0             	movzx  eax,al
c0020510:	85 c0                	test   eax,eax
c0020512:	74 08                	je     c002051c <KeResolveCompatibilitySymbol(char*)+0x188>
c0020514:	b8 c0 a9 03 c0       	mov    eax,0xc003a9c0
c0020519:	eb 31                	jmp    c002054c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c002051b:	90                   	nop
c002051c:	83 ec 08             	sub    esp,0x8
c002051f:	68 ac 27 03 c0       	push   0xc00327ac
c0020524:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020528:	e8 23 02 fe ff       	call   c0000750 <strcmp>
c002052d:	83 c4 10             	add    esp,0x10
c0020530:	85 c0                	test   eax,eax
c0020532:	0f 94 c0             	sete   al
c0020535:	0f b6 c0             	movzx  eax,al
c0020538:	85 c0                	test   eax,eax
c002053a:	74 08                	je     c0020544 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c002053c:	b8 c1 a9 03 c0       	mov    eax,0xc003a9c1
c0020541:	eb 09                	jmp    c002054c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0020543:	90                   	nop
c0020544:	b8 00 00 00 00       	mov    eax,0x0
c0020549:	8d 76 00             	lea    esi,[esi+0x0]
c002054c:	83 c4 0c             	add    esp,0xc
c002054f:	c3                   	ret    

c0020550 <Semaphore::Semaphore(int)>:
c0020550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020554:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020558:	89 10                	mov    DWORD PTR [eax],edx
c002055a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002055e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0020565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020569:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020574:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002057b:	90                   	nop
c002057c:	c3                   	ret    
c002057d:	90                   	nop
c002057e:	66 90                	xchg   ax,ax

c0020580 <Semaphore::tryAcquire()>:
c0020580:	83 ec 0c             	sub    esp,0xc
c0020583:	fa                   	cli    
c0020584:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020589:	83 c0 01             	add    eax,0x1
c002058c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020591:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020596:	83 c0 01             	add    eax,0x1
c0020599:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002059e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00205a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00205ab:	39 c2                	cmp    edx,eax
c00205ad:	7d 5d                	jge    c002060c <Semaphore::tryAcquire()+0x8c>
c00205af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205b3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00205b6:	8d 50 01             	lea    edx,[eax+0x1]
c00205b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00205c0:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00205c5:	83 e8 01             	sub    eax,0x1
c00205c8:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00205cd:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00205d2:	85 c0                	test   eax,eax
c00205d4:	75 1a                	jne    c00205f0 <Semaphore::tryAcquire()+0x70>
c00205d6:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00205db:	85 c0                	test   eax,eax
c00205dd:	74 11                	je     c00205f0 <Semaphore::tryAcquire()+0x70>
c00205df:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00205e9:	e8 96 4b 00 00       	call   c0025184 <schedule()>
c00205ee:	66 90                	xchg   ax,ax
c00205f0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00205f5:	83 e8 01             	sub    eax,0x1
c00205f8:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00205fd:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020602:	85 c0                	test   eax,eax
c0020604:	75 02                	jne    c0020608 <Semaphore::tryAcquire()+0x88>
c0020606:	fb                   	sti    
c0020607:	90                   	nop
c0020608:	b0 01                	mov    al,0x1
c002060a:	eb 4c                	jmp    c0020658 <Semaphore::tryAcquire()+0xd8>
c002060c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020611:	83 e8 01             	sub    eax,0x1
c0020614:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020619:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002061e:	85 c0                	test   eax,eax
c0020620:	75 1a                	jne    c002063c <Semaphore::tryAcquire()+0xbc>
c0020622:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020627:	85 c0                	test   eax,eax
c0020629:	74 11                	je     c002063c <Semaphore::tryAcquire()+0xbc>
c002062b:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020635:	e8 4a 4b 00 00       	call   c0025184 <schedule()>
c002063a:	66 90                	xchg   ax,ax
c002063c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020641:	83 e8 01             	sub    eax,0x1
c0020644:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020649:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002064e:	85 c0                	test   eax,eax
c0020650:	75 02                	jne    c0020654 <Semaphore::tryAcquire()+0xd4>
c0020652:	fb                   	sti    
c0020653:	90                   	nop
c0020654:	b0 00                	mov    al,0x0
c0020656:	66 90                	xchg   ax,ax
c0020658:	83 c4 0c             	add    esp,0xc
c002065b:	c3                   	ret    

c002065c <Semaphore::assertLocked(char const*)>:
c002065c:	83 ec 0c             	sub    esp,0xc
c002065f:	fa                   	cli    
c0020660:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020665:	83 c0 01             	add    eax,0x1
c0020668:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002066d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020672:	83 c0 01             	add    eax,0x1
c0020675:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002067a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002067e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0020681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020685:	8b 00                	mov    eax,DWORD PTR [eax]
c0020687:	39 c2                	cmp    edx,eax
c0020689:	7d 11                	jge    c002069c <Semaphore::assertLocked(char const*)+0x40>
c002068b:	83 ec 0c             	sub    esp,0xc
c002068e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020692:	e8 0f fb ff ff       	call   c00201a6 <KePanic(char const*)>
c0020697:	83 c4 10             	add    esp,0x10
c002069a:	66 90                	xchg   ax,ax
c002069c:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206a1:	83 e8 01             	sub    eax,0x1
c00206a4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00206a9:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00206ae:	85 c0                	test   eax,eax
c00206b0:	75 1a                	jne    c00206cc <Semaphore::assertLocked(char const*)+0x70>
c00206b2:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00206b7:	85 c0                	test   eax,eax
c00206b9:	74 11                	je     c00206cc <Semaphore::assertLocked(char const*)+0x70>
c00206bb:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00206c5:	e8 ba 4a 00 00       	call   c0025184 <schedule()>
c00206ca:	66 90                	xchg   ax,ax
c00206cc:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206d1:	83 e8 01             	sub    eax,0x1
c00206d4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00206d9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00206de:	85 c0                	test   eax,eax
c00206e0:	75 02                	jne    c00206e4 <Semaphore::assertLocked(char const*)+0x88>
c00206e2:	fb                   	sti    
c00206e3:	90                   	nop
c00206e4:	90                   	nop
c00206e5:	83 c4 0c             	add    esp,0xc
c00206e8:	c3                   	ret    
c00206e9:	90                   	nop
c00206ea:	66 90                	xchg   ax,ax

c00206ec <Semaphore::acquire(int)>:
c00206ec:	83 ec 1c             	sub    esp,0x1c
c00206ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206f4:	0f 84 9a 00 00 00    	je     c0020794 <Semaphore::acquire(int)+0xa8>
c00206fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020702:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0020707:	90                   	nop
c0020708:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c002070d:	85 c0                	test   eax,eax
c002070f:	74 77                	je     c0020788 <Semaphore::acquire(int)+0x9c>
c0020711:	83 ec 0c             	sub    esp,0xc
c0020714:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020718:	e8 63 fe ff ff       	call   c0020580 <Semaphore::tryAcquire()>
c002071d:	83 c4 10             	add    esp,0x10
c0020720:	83 f0 01             	xor    eax,0x1
c0020723:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0020727:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c002072b:	83 f0 01             	xor    eax,0x1
c002072e:	0f b6 c0             	movzx  eax,al
c0020731:	85 c0                	test   eax,eax
c0020733:	75 4f                	jne    c0020784 <Semaphore::acquire(int)+0x98>
c0020735:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c002073a:	7f 2c                	jg     c0020768 <Semaphore::acquire(int)+0x7c>
c002073c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020740:	89 d0                	mov    eax,edx
c0020742:	c1 e0 02             	shl    eax,0x2
c0020745:	01 d0                	add    eax,edx
c0020747:	01 c0                	add    eax,eax
c0020749:	83 ec 0c             	sub    esp,0xc
c002074c:	50                   	push   eax
c002074d:	e8 0a 4c 00 00       	call   c002535c <milliTenthSleep(unsigned int)>
c0020752:	83 c4 10             	add    esp,0x10
c0020755:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0020759:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c002075d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0020765:	eb a1                	jmp    c0020708 <Semaphore::acquire(int)+0x1c>
c0020767:	90                   	nop
c0020768:	83 ec 0c             	sub    esp,0xc
c002076b:	68 90 01 00 00       	push   0x190
c0020770:	e8 e7 4b 00 00       	call   c002535c <milliTenthSleep(unsigned int)>
c0020775:	83 c4 10             	add    esp,0x10
c0020778:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c002077d:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0020782:	eb 84                	jmp    c0020708 <Semaphore::acquire(int)+0x1c>
c0020784:	90                   	nop
c0020785:	8d 76 00             	lea    esi,[esi+0x0]
c0020788:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002078c:	e9 ff 00 00 00       	jmp    c0020890 <Semaphore::acquire(int)+0x1a4>
c0020791:	8d 76 00             	lea    esi,[esi+0x0]
c0020794:	fa                   	cli    
c0020795:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002079a:	83 c0 01             	add    eax,0x1
c002079d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00207a2:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00207a7:	83 c0 01             	add    eax,0x1
c00207aa:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00207af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207b3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00207b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00207bc:	39 c2                	cmp    edx,eax
c00207be:	7d 14                	jge    c00207d4 <Semaphore::acquire(int)+0xe8>
c00207c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207c4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00207c7:	8d 50 01             	lea    edx,[eax+0x1]
c00207ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207ce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00207d1:	eb 6d                	jmp    c0020840 <Semaphore::acquire(int)+0x154>
c00207d3:	90                   	nop
c00207d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00207d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00207db:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00207e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00207e9:	85 c0                	test   eax,eax
c00207eb:	75 13                	jne    c0020800 <Semaphore::acquire(int)+0x114>
c00207ed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00207f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00207f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207f8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00207fb:	eb 17                	jmp    c0020814 <Semaphore::acquire(int)+0x128>
c00207fd:	8d 76 00             	lea    esi,[esi+0x0]
c0020800:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0020805:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020809:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002080c:	8b 12                	mov    edx,DWORD PTR [edx]
c002080e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0020811:	8d 76 00             	lea    esi,[esi+0x0]
c0020814:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0020819:	8b 10                	mov    edx,DWORD PTR [eax]
c002081b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002081f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020822:	83 ec 0c             	sub    esp,0xc
c0020825:	68 bc 27 03 c0       	push   0xc00327bc
c002082a:	e8 5e 89 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002082f:	83 c4 10             	add    esp,0x10
c0020832:	83 ec 0c             	sub    esp,0xc
c0020835:	6a 05                	push   0x5
c0020837:	e8 04 4a 00 00       	call   c0025240 <blockTask(TaskState)>
c002083c:	83 c4 10             	add    esp,0x10
c002083f:	90                   	nop
c0020840:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020845:	83 e8 01             	sub    eax,0x1
c0020848:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002084d:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0020852:	85 c0                	test   eax,eax
c0020854:	75 1a                	jne    c0020870 <Semaphore::acquire(int)+0x184>
c0020856:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c002085b:	85 c0                	test   eax,eax
c002085d:	74 11                	je     c0020870 <Semaphore::acquire(int)+0x184>
c002085f:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020869:	e8 16 49 00 00       	call   c0025184 <schedule()>
c002086e:	66 90                	xchg   ax,ax
c0020870:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020875:	83 e8 01             	sub    eax,0x1
c0020878:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002087d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0020882:	85 c0                	test   eax,eax
c0020884:	75 02                	jne    c0020888 <Semaphore::acquire(int)+0x19c>
c0020886:	fb                   	sti    
c0020887:	90                   	nop
c0020888:	b8 00 00 00 00       	mov    eax,0x0
c002088d:	8d 76 00             	lea    esi,[esi+0x0]
c0020890:	83 c4 1c             	add    esp,0x1c
c0020893:	c3                   	ret    

c0020894 <Semaphore::acquire()>:
c0020894:	83 ec 0c             	sub    esp,0xc
c0020897:	83 ec 08             	sub    esp,0x8
c002089a:	6a 00                	push   0x0
c002089c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00208a0:	e8 47 fe ff ff       	call   c00206ec <Semaphore::acquire(int)>
c00208a5:	83 c4 10             	add    esp,0x10
c00208a8:	90                   	nop
c00208a9:	83 c4 0c             	add    esp,0xc
c00208ac:	c3                   	ret    
c00208ad:	90                   	nop
c00208ae:	66 90                	xchg   ax,ax

c00208b0 <Semaphore::release()>:
c00208b0:	83 ec 1c             	sub    esp,0x1c
c00208b3:	fa                   	cli    
c00208b4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00208b9:	83 c0 01             	add    eax,0x1
c00208bc:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00208c1:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00208c6:	83 c0 01             	add    eax,0x1
c00208c9:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00208ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208d5:	85 c0                	test   eax,eax
c00208d7:	74 2b                	je     c0020904 <Semaphore::release()+0x54>
c00208d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00208e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208e8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00208eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00208f2:	83 ec 0c             	sub    esp,0xc
c00208f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00208f9:	e8 7e 4b 00 00       	call   c002547c <unblockTask(ThreadControlBlock*)>
c00208fe:	83 c4 10             	add    esp,0x10
c0020901:	eb 15                	jmp    c0020918 <Semaphore::release()+0x68>
c0020903:	90                   	nop
c0020904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020908:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002090b:	8d 50 ff             	lea    edx,[eax-0x1]
c002090e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020912:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0020915:	8d 76 00             	lea    esi,[esi+0x0]
c0020918:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002091d:	83 e8 01             	sub    eax,0x1
c0020920:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0020925:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002092a:	85 c0                	test   eax,eax
c002092c:	75 1a                	jne    c0020948 <Semaphore::release()+0x98>
c002092e:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0020933:	85 c0                	test   eax,eax
c0020935:	74 11                	je     c0020948 <Semaphore::release()+0x98>
c0020937:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0020941:	e8 3e 48 00 00       	call   c0025184 <schedule()>
c0020946:	66 90                	xchg   ax,ax
c0020948:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002094d:	83 e8 01             	sub    eax,0x1
c0020950:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0020955:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002095a:	85 c0                	test   eax,eax
c002095c:	75 02                	jne    c0020960 <Semaphore::release()+0xb0>
c002095e:	fb                   	sti    
c002095f:	90                   	nop
c0020960:	90                   	nop
c0020961:	83 c4 1c             	add    esp,0x1c
c0020964:	c3                   	ret    

c0020965 <KiSigKill(int)>:
c0020965:	83 ec 0c             	sub    esp,0xc
c0020968:	6a 00                	push   0x0
c002096a:	6a 00                	push   0x0
c002096c:	6a ff                	push   0xffffffff
c002096e:	6a 01                	push   0x1
c0020970:	e8 dd 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020975:	83 c4 1c             	add    esp,0x1c
c0020978:	c3                   	ret    

c0020979 <KiDefaultSignalHandlerIgnore(int)>:
c0020979:	c3                   	ret    

c002097a <KiDefaultSignalHandlerPause(int)>:
c002097a:	57                   	push   edi
c002097b:	b9 07 00 00 00       	mov    ecx,0x7
c0020980:	56                   	push   esi
c0020981:	be 17 28 03 c0       	mov    esi,0xc0032817
c0020986:	83 ec 24             	sub    esp,0x24
c0020989:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002098d:	fc                   	cld    
c002098e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020990:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020994:	50                   	push   eax
c0020995:	6a 00                	push   0x0
c0020997:	6a 00                	push   0x0
c0020999:	6a 27                	push   0x27
c002099b:	e8 b2 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00209a0:	83 c4 34             	add    esp,0x34
c00209a3:	5e                   	pop    esi
c00209a4:	5f                   	pop    edi
c00209a5:	c3                   	ret    

c00209a6 <KiDefaultSignalHandlerResume(int)>:
c00209a6:	57                   	push   edi
c00209a7:	b9 1d 00 00 00       	mov    ecx,0x1d
c00209ac:	56                   	push   esi
c00209ad:	be 33 28 03 c0       	mov    esi,0xc0032833
c00209b2:	83 ec 24             	sub    esp,0x24
c00209b5:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00209b9:	fc                   	cld    
c00209ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00209bc:	8d 44 24 03          	lea    eax,[esp+0x3]
c00209c0:	50                   	push   eax
c00209c1:	6a 00                	push   0x0
c00209c3:	6a 00                	push   0x0
c00209c5:	6a 27                	push   0x27
c00209c7:	e8 86 46 01 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00209cc:	83 c4 34             	add    esp,0x34
c00209cf:	5e                   	pop    esi
c00209d0:	5f                   	pop    edi
c00209d1:	c3                   	ret    

c00209d2 <KeDeinitSignals(SigHandlerBlock*)>:
c00209d2:	e9 37 59 ff ff       	jmp    c001630e <free>

c00209d7 <KeInitSignals()>:
c00209d7:	53                   	push   ebx
c00209d8:	83 ec 14             	sub    esp,0x14
c00209db:	68 c8 00 00 00       	push   0xc8
c00209e0:	e8 19 59 ff ff       	call   c00162fe <malloc>
c00209e5:	83 c4 0c             	add    esp,0xc
c00209e8:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00209f2:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00209fc:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0020a03:	89 c3                	mov    ebx,eax
c0020a05:	6a 20                	push   0x20
c0020a07:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0020a0d:	6a 00                	push   0x0
c0020a0f:	50                   	push   eax
c0020a10:	e8 db fa fd ff       	call   c00004f0 <memset>
c0020a15:	83 c4 0c             	add    esp,0xc
c0020a18:	6a 44                	push   0x44
c0020a1a:	6a 00                	push   0x0
c0020a1c:	53                   	push   ebx
c0020a1d:	e8 ce fa fd ff       	call   c00004f0 <memset>
c0020a22:	89 d8                	mov    eax,ebx
c0020a24:	83 c4 18             	add    esp,0x18
c0020a27:	5b                   	pop    ebx
c0020a28:	c3                   	ret    

c0020a29 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0020a29:	53                   	push   ebx
c0020a2a:	b8 01 00 00 00       	mov    eax,0x1
c0020a2f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020a33:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020a37:	83 f9 10             	cmp    ecx,0x10
c0020a3a:	7f 21                	jg     c0020a5d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0020a3c:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0020a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a43:	89 03                	mov    DWORD PTR [ebx],eax
c0020a45:	b8 01 00 00 00       	mov    eax,0x1
c0020a4a:	d3 e0                	shl    eax,cl
c0020a4c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0020a50:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0020a53:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0020a5b:	31 c0                	xor    eax,eax
c0020a5d:	5b                   	pop    ebx
c0020a5e:	c3                   	ret    

c0020a5f <KeRaiseSignal(SigHandlerBlock*, int)>:
c0020a5f:	55                   	push   ebp
c0020a60:	57                   	push   edi
c0020a61:	bf 08 00 00 00       	mov    edi,0x8
c0020a66:	56                   	push   esi
c0020a67:	53                   	push   ebx
c0020a68:	83 ec 18             	sub    esp,0x18
c0020a6b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0020a6f:	68 50 28 03 c0       	push   0xc0032850
c0020a74:	e8 14 87 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0020a79:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020a80:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0020a86:	83 c4 10             	add    esp,0x10
c0020a89:	31 c9                	xor    ecx,ecx
c0020a8b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020a8f:	99                   	cdq    
c0020a90:	f7 ff                	idiv   edi
c0020a92:	8d 42 24             	lea    eax,[edx+0x24]
c0020a95:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0020a99:	85 f6                	test   esi,esi
c0020a9b:	75 1a                	jne    c0020ab7 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0020a9d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0020aa1:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0020aa5:	50                   	push   eax
c0020aa6:	50                   	push   eax
c0020aa7:	52                   	push   edx
c0020aa8:	68 61 28 03 c0       	push   0xc0032861
c0020aad:	e8 db 86 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0020ab2:	83 c4 10             	add    esp,0x10
c0020ab5:	eb 1b                	jmp    c0020ad2 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0020ab7:	41                   	inc    ecx
c0020ab8:	83 f9 08             	cmp    ecx,0x8
c0020abb:	75 ce                	jne    c0020a8b <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0020abd:	83 ec 0c             	sub    esp,0xc
c0020ac0:	be 01 00 00 00       	mov    esi,0x1
c0020ac5:	68 82 28 03 c0       	push   0xc0032882
c0020aca:	e8 be 86 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0020acf:	83 c4 10             	add    esp,0x10
c0020ad2:	83 c4 0c             	add    esp,0xc
c0020ad5:	89 f0                	mov    eax,esi
c0020ad7:	5b                   	pop    ebx
c0020ad8:	5e                   	pop    esi
c0020ad9:	5f                   	pop    edi
c0020ada:	5d                   	pop    ebp
c0020adb:	c3                   	ret    

c0020adc <KeCheckSignal(SigHandlerBlock*, int*)>:
c0020adc:	55                   	push   ebp
c0020add:	57                   	push   edi
c0020ade:	56                   	push   esi
c0020adf:	53                   	push   ebx
c0020ae0:	51                   	push   ecx
c0020ae1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020ae5:	85 db                	test   ebx,ebx
c0020ae7:	0f 84 bc 00 00 00    	je     c0020ba9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020aed:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0020af4:	0f 84 af 00 00 00    	je     c0020ba9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020afa:	31 c9                	xor    ecx,ecx
c0020afc:	bf 08 00 00 00       	mov    edi,0x8
c0020b01:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0020b07:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0020b0a:	99                   	cdq    
c0020b0b:	f7 ff                	idiv   edi
c0020b0d:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0020b14:	85 ed                	test   ebp,ebp
c0020b16:	0f 84 9e 00 00 00    	je     c0020bba <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0020b1c:	89 e9                	mov    ecx,ebp
c0020b1e:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0020b24:	bf 01 00 00 00       	mov    edi,0x1
c0020b29:	89 04 24             	mov    DWORD PTR [esp],eax
c0020b2c:	d3 e7                	shl    edi,cl
c0020b2e:	31 c9                	xor    ecx,ecx
c0020b30:	b8 01 00 00 00       	mov    eax,0x1
c0020b35:	d3 e0                	shl    eax,cl
c0020b37:	85 04 24             	test   DWORD PTR [esp],eax
c0020b3a:	74 06                	je     c0020b42 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0020b3c:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0020b40:	75 67                	jne    c0020ba9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020b42:	41                   	inc    ecx
c0020b43:	83 f9 11             	cmp    ecx,0x11
c0020b46:	75 e8                	jne    c0020b30 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0020b48:	46                   	inc    esi
c0020b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020b4c:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020b52:	09 f8                	or     eax,edi
c0020b54:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0020b5f:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0020b65:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0020b6c:	31 c0                	xor    eax,eax
c0020b6e:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0020b76:	74 09                	je     c0020b81 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0020b78:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0020b7f:	eb 06                	jmp    c0020b87 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0020b81:	40                   	inc    eax
c0020b82:	83 f8 08             	cmp    eax,0x8
c0020b85:	75 e7                	jne    c0020b6e <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0020b87:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0020b8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020b8e:	83 fd 09             	cmp    ebp,0x9
c0020b91:	89 2a                	mov    DWORD PTR [edx],ebp
c0020b93:	75 07                	jne    c0020b9c <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0020b95:	b8 65 09 02 c0       	mov    eax,0xc0020965
c0020b9a:	eb 31                	jmp    c0020bcd <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020b9c:	83 f8 01             	cmp    eax,0x1
c0020b9f:	75 0c                	jne    c0020bad <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0020ba1:	f7 d7                	not    edi
c0020ba3:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0020ba9:	31 c0                	xor    eax,eax
c0020bab:	eb 20                	jmp    c0020bcd <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020bad:	85 c0                	test   eax,eax
c0020baf:	75 1c                	jne    c0020bcd <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020bb1:	8b 04 ad c0 40 03 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffcbf40]
c0020bb8:	eb 13                	jmp    c0020bcd <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0020bba:	46                   	inc    esi
c0020bbb:	41                   	inc    ecx
c0020bbc:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0020bc2:	83 f9 08             	cmp    ecx,0x8
c0020bc5:	0f 85 36 ff ff ff    	jne    c0020b01 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0020bcb:	eb dc                	jmp    c0020ba9 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0020bcd:	5a                   	pop    edx
c0020bce:	5b                   	pop    ebx
c0020bcf:	5e                   	pop    esi
c0020bd0:	5f                   	pop    edi
c0020bd1:	5d                   	pop    ebp
c0020bd2:	c3                   	ret    

c0020bd3 <KiCheckSignalZ>:
c0020bd3:	83 ec 10             	sub    esp,0x10
c0020bd6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020bda:	50                   	push   eax
c0020bdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020be0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020be3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020be9:	e8 ee fe ff ff       	call   c0020adc <KeCheckSignal(SigHandlerBlock*, int*)>
c0020bee:	5a                   	pop    edx
c0020bef:	31 d2                	xor    edx,edx
c0020bf1:	59                   	pop    ecx
c0020bf2:	85 c0                	test   eax,eax
c0020bf4:	74 19                	je     c0020c0f <KiCheckSignalZ+0x3c>
c0020bf6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0020bfc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0020bff:	89 02                	mov    DWORD PTR [edx],eax
c0020c01:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0020c08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c0c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0020c0f:	89 d0                	mov    eax,edx
c0020c11:	83 c4 10             	add    esp,0x10
c0020c14:	c3                   	ret    

c0020c15 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0020c15:	56                   	push   esi
c0020c16:	53                   	push   ebx
c0020c17:	bb 01 00 00 00       	mov    ebx,0x1
c0020c1c:	52                   	push   edx
c0020c1d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020c21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020c25:	d3 e3                	shl    ebx,cl
c0020c27:	83 f9 10             	cmp    ecx,0x10
c0020c2a:	7f 08                	jg     c0020c34 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0020c2c:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0020c32:	75 10                	jne    c0020c44 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0020c34:	83 ec 0c             	sub    esp,0xc
c0020c37:	68 93 28 03 c0       	push   0xc0032893
c0020c3c:	e8 65 f5 ff ff       	call   c00201a6 <KePanic(char const*)>
c0020c41:	83 c4 10             	add    esp,0x10
c0020c44:	f7 d3                	not    ebx
c0020c46:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0020c4c:	58                   	pop    eax
c0020c4d:	5b                   	pop    ebx
c0020c4e:	5e                   	pop    esi
c0020c4f:	c3                   	ret    

c0020c50 <KiFinishSignalZ>:
c0020c50:	53                   	push   ebx
c0020c51:	83 ec 10             	sub    esp,0x10
c0020c54:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020c58:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0020c5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020c60:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020c63:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0020c69:	e8 a7 ff ff ff       	call   c0020c15 <KeCompleteSignal(SigHandlerBlock*, int)>
c0020c6e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0020c74:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020c7b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0020c82:	83 c4 18             	add    esp,0x18
c0020c85:	5b                   	pop    ebx
c0020c86:	c3                   	ret    

c0020c87 <SysSeekDir(regs*)>:
c0020c87:	31 c0                	xor    eax,eax
c0020c89:	31 d2                	xor    edx,edx
c0020c8b:	c3                   	ret    

c0020c8c <SysTellDir(regs*)>:
c0020c8c:	31 c0                	xor    eax,eax
c0020c8e:	31 d2                	xor    edx,edx
c0020c90:	c3                   	ret    

c0020c91 <SysVerify(regs*)>:
c0020c91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020c95:	31 d2                	xor    edx,edx
c0020c97:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020c9a:	c3                   	ret    

c0020c9b <SysGetArgc(regs*)>:
c0020c9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020ca0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020ca3:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0020ca9:	89 c2                	mov    edx,eax
c0020cab:	c1 fa 1f             	sar    edx,0x1f
c0020cae:	c3                   	ret    

c0020caf <SysTTYName(regs*)>:
c0020caf:	b8 01 00 00 00       	mov    eax,0x1
c0020cb4:	31 d2                	xor    edx,edx
c0020cb6:	c3                   	ret    

c0020cb7 <SysFormatDisk(regs*)>:
c0020cb7:	56                   	push   esi
c0020cb8:	53                   	push   ebx
c0020cb9:	83 ec 04             	sub    esp,0x4
c0020cbc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0020cc0:	8b 1d 04 cf 03 c0    	mov    ebx,DWORD PTR ds:0xc003cf04
c0020cc6:	eb 28                	jmp    c0020cf0 <SysFormatDisk(regs*)+0x39>
c0020cc8:	83 ec 0c             	sub    esp,0xc
c0020ccb:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0020cce:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0020cd1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0020cd3:	51                   	push   ecx
c0020cd4:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0020cd7:	51                   	push   ecx
c0020cd8:	50                   	push   eax
c0020cd9:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0020ce0:	50                   	push   eax
c0020ce1:	53                   	push   ebx
c0020ce2:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0020ce5:	83 c4 20             	add    esp,0x20
c0020ce8:	83 f8 08             	cmp    eax,0x8
c0020ceb:	75 14                	jne    c0020d01 <SysFormatDisk(regs*)+0x4a>
c0020ced:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0020cf0:	85 db                	test   ebx,ebx
c0020cf2:	75 d4                	jne    c0020cc8 <SysFormatDisk(regs*)+0x11>
c0020cf4:	83 c4 04             	add    esp,0x4
c0020cf7:	b8 03 00 00 00       	mov    eax,0x3
c0020cfc:	31 d2                	xor    edx,edx
c0020cfe:	5b                   	pop    ebx
c0020cff:	5e                   	pop    esi
c0020d00:	c3                   	ret    
c0020d01:	85 c0                	test   eax,eax
c0020d03:	74 1f                	je     c0020d24 <SysFormatDisk(regs*)+0x6d>
c0020d05:	83 f8 09             	cmp    eax,0x9
c0020d08:	74 0d                	je     c0020d17 <SysFormatDisk(regs*)+0x60>
c0020d0a:	83 c4 04             	add    esp,0x4
c0020d0d:	b8 02 00 00 00       	mov    eax,0x2
c0020d12:	31 d2                	xor    edx,edx
c0020d14:	5b                   	pop    ebx
c0020d15:	5e                   	pop    esi
c0020d16:	c3                   	ret    
c0020d17:	83 c4 04             	add    esp,0x4
c0020d1a:	b8 01 00 00 00       	mov    eax,0x1
c0020d1f:	31 d2                	xor    edx,edx
c0020d21:	5b                   	pop    ebx
c0020d22:	5e                   	pop    esi
c0020d23:	c3                   	ret    
c0020d24:	83 c4 04             	add    esp,0x4
c0020d27:	31 c0                	xor    eax,eax
c0020d29:	31 d2                	xor    edx,edx
c0020d2b:	5b                   	pop    ebx
c0020d2c:	5e                   	pop    esi
c0020d2d:	c3                   	ret    

c0020d2e <SysSetDiskVolumeLabel(regs*)>:
c0020d2e:	56                   	push   esi
c0020d2f:	53                   	push   ebx
c0020d30:	83 ec 04             	sub    esp,0x4
c0020d33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020d37:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0020d3a:	83 f8 19             	cmp    eax,0x19
c0020d3d:	77 33                	ja     c0020d72 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d3f:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0020d46:	85 c9                	test   ecx,ecx
c0020d48:	74 28                	je     c0020d72 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d4a:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0020d4d:	85 db                	test   ebx,ebx
c0020d4f:	74 21                	je     c0020d72 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d51:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0020d57:	85 d2                	test   edx,edx
c0020d59:	74 17                	je     c0020d72 <SysSetDiskVolumeLabel(regs*)+0x44>
c0020d5b:	8b 32                	mov    esi,DWORD PTR [edx]
c0020d5d:	53                   	push   ebx
c0020d5e:	50                   	push   eax
c0020d5f:	51                   	push   ecx
c0020d60:	52                   	push   edx
c0020d61:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0020d64:	83 c4 10             	add    esp,0x10
c0020d67:	89 c2                	mov    edx,eax
c0020d69:	83 c4 04             	add    esp,0x4
c0020d6c:	c1 fa 1f             	sar    edx,0x1f
c0020d6f:	5b                   	pop    ebx
c0020d70:	5e                   	pop    esi
c0020d71:	c3                   	ret    
c0020d72:	83 c4 04             	add    esp,0x4
c0020d75:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020d7a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020d7f:	5b                   	pop    ebx
c0020d80:	5e                   	pop    esi
c0020d81:	c3                   	ret    

c0020d82 <SysGetDiskVolumeLabel(regs*)>:
c0020d82:	57                   	push   edi
c0020d83:	56                   	push   esi
c0020d84:	53                   	push   ebx
c0020d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d89:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0020d8c:	83 fa 19             	cmp    edx,0x19
c0020d8f:	77 3c                	ja     c0020dcd <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d91:	8b 0c 95 80 f3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc0c80]
c0020d98:	85 c9                	test   ecx,ecx
c0020d9a:	74 31                	je     c0020dcd <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020d9c:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0020d9f:	85 db                	test   ebx,ebx
c0020da1:	74 2a                	je     c0020dcd <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020da3:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0020da6:	85 f6                	test   esi,esi
c0020da8:	74 23                	je     c0020dcd <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020daa:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0020db0:	85 c0                	test   eax,eax
c0020db2:	74 19                	je     c0020dcd <SysGetDiskVolumeLabel(regs*)+0x4b>
c0020db4:	83 ec 0c             	sub    esp,0xc
c0020db7:	8b 38                	mov    edi,DWORD PTR [eax]
c0020db9:	56                   	push   esi
c0020dba:	53                   	push   ebx
c0020dbb:	52                   	push   edx
c0020dbc:	51                   	push   ecx
c0020dbd:	50                   	push   eax
c0020dbe:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0020dc1:	83 c4 20             	add    esp,0x20
c0020dc4:	89 c2                	mov    edx,eax
c0020dc6:	5b                   	pop    ebx
c0020dc7:	c1 fa 1f             	sar    edx,0x1f
c0020dca:	5e                   	pop    esi
c0020dcb:	5f                   	pop    edi
c0020dcc:	c3                   	ret    
c0020dcd:	5b                   	pop    ebx
c0020dce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0020dd3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020dd8:	5e                   	pop    esi
c0020dd9:	5f                   	pop    edi
c0020dda:	c3                   	ret    

c0020ddb <SysShutdown(regs*)>:
c0020ddb:	83 ec 0c             	sub    esp,0xc
c0020dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020de2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020de5:	85 c0                	test   eax,eax
c0020de7:	74 18                	je     c0020e01 <SysShutdown(regs*)+0x26>
c0020de9:	83 f8 01             	cmp    eax,0x1
c0020dec:	74 38                	je     c0020e26 <SysShutdown(regs*)+0x4b>
c0020dee:	83 f8 02             	cmp    eax,0x2
c0020df1:	74 24                	je     c0020e17 <SysShutdown(regs*)+0x3c>
c0020df3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020df8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020dfd:	83 c4 0c             	add    esp,0xc
c0020e00:	c3                   	ret    
c0020e01:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020e06:	8b 10                	mov    edx,DWORD PTR [eax]
c0020e08:	6a 00                	push   0x0
c0020e0a:	6a 00                	push   0x0
c0020e0c:	6a 00                	push   0x0
c0020e0e:	50                   	push   eax
c0020e0f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020e12:	83 c4 10             	add    esp,0x10
c0020e15:	eb dc                	jmp    c0020df3 <SysShutdown(regs*)+0x18>
c0020e17:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0020e1c:	8b 10                	mov    edx,DWORD PTR [eax]
c0020e1e:	6a 00                	push   0x0
c0020e20:	6a 00                	push   0x0
c0020e22:	6a 01                	push   0x1
c0020e24:	eb e8                	jmp    c0020e0e <SysShutdown(regs*)+0x33>
c0020e26:	a1 00 f4 03 c0       	mov    eax,ds:0xc003f400
c0020e2b:	85 c0                	test   eax,eax
c0020e2d:	74 02                	je     c0020e31 <SysShutdown(regs*)+0x56>
c0020e2f:	ff d0                	call   eax
c0020e31:	31 c0                	xor    eax,eax
c0020e33:	31 d2                	xor    edx,edx
c0020e35:	83 c4 0c             	add    esp,0xc
c0020e38:	c3                   	ret    

c0020e39 <SysRealpath(regs*)>:
c0020e39:	83 ec 0c             	sub    esp,0xc
c0020e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e40:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0020e43:	85 d2                	test   edx,edx
c0020e45:	74 07                	je     c0020e4e <SysRealpath(regs*)+0x15>
c0020e47:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0020e4a:	85 c0                	test   eax,eax
c0020e4c:	75 0b                	jne    c0020e59 <SysRealpath(regs*)+0x20>
c0020e4e:	b8 01 00 00 00       	mov    eax,0x1
c0020e53:	31 d2                	xor    edx,edx
c0020e55:	83 c4 0c             	add    esp,0xc
c0020e58:	c3                   	ret    
c0020e59:	6a 00                	push   0x0
c0020e5b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0020e61:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0020e64:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0020e6a:	51                   	push   ecx
c0020e6b:	52                   	push   edx
c0020e6c:	50                   	push   eax
c0020e6d:	e8 2a 92 ff ff       	call   c001a09c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0020e72:	83 c4 10             	add    esp,0x10
c0020e75:	31 c0                	xor    eax,eax
c0020e77:	31 d2                	xor    edx,edx
c0020e79:	83 c4 0c             	add    esp,0xc
c0020e7c:	c3                   	ret    

c0020e7d <SysReadDir(regs*)>:
c0020e7d:	53                   	push   ebx
c0020e7e:	83 ec 18             	sub    esp,0x18
c0020e81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020e85:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020e88:	83 f8 02             	cmp    eax,0x2
c0020e8b:	76 61                	jbe    c0020eee <SysReadDir(regs*)+0x71>
c0020e8d:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0020e94:	77 49                	ja     c0020edf <SysReadDir(regs*)+0x62>
c0020e96:	83 ec 0c             	sub    esp,0xc
c0020e99:	50                   	push   eax
c0020e9a:	e8 5c 6e ff ff       	call   c0017cfb <KeGetFileFromDescriptor(int)>
c0020e9f:	83 c4 10             	add    esp,0x10
c0020ea2:	85 c0                	test   eax,eax
c0020ea4:	74 39                	je     c0020edf <SysReadDir(regs*)+0x62>
c0020ea6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020eae:	83 ec 0c             	sub    esp,0xc
c0020eb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0020eb3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0020eb7:	51                   	push   ecx
c0020eb8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0020ebb:	51                   	push   ecx
c0020ebc:	6a 00                	push   0x0
c0020ebe:	68 10 01 00 00       	push   0x110
c0020ec3:	50                   	push   eax
c0020ec4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0020ec7:	83 c4 20             	add    esp,0x20
c0020eca:	85 c0                	test   eax,eax
c0020ecc:	74 29                	je     c0020ef7 <SysReadDir(regs*)+0x7a>
c0020ece:	83 f8 07             	cmp    eax,0x7
c0020ed1:	74 1b                	je     c0020eee <SysReadDir(regs*)+0x71>
c0020ed3:	b8 02 00 00 00       	mov    eax,0x2
c0020ed8:	31 d2                	xor    edx,edx
c0020eda:	83 c4 18             	add    esp,0x18
c0020edd:	5b                   	pop    ebx
c0020ede:	c3                   	ret    
c0020edf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020ee4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020ee9:	83 c4 18             	add    esp,0x18
c0020eec:	5b                   	pop    ebx
c0020eed:	c3                   	ret    
c0020eee:	b8 01 00 00 00       	mov    eax,0x1
c0020ef3:	31 d2                	xor    edx,edx
c0020ef5:	eb e3                	jmp    c0020eda <SysReadDir(regs*)+0x5d>
c0020ef7:	31 c0                	xor    eax,eax
c0020ef9:	31 d2                	xor    edx,edx
c0020efb:	eb dd                	jmp    c0020eda <SysReadDir(regs*)+0x5d>

c0020efd <SysIsATTY(regs*)>:
c0020efd:	83 ec 0c             	sub    esp,0xc
c0020f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f04:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020f07:	83 f8 02             	cmp    eax,0x2
c0020f0a:	76 07                	jbe    c0020f13 <SysIsATTY(regs*)+0x16>
c0020f0c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0020f11:	75 26                	jne    c0020f39 <SysIsATTY(regs*)+0x3c>
c0020f13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0020f18:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0020f1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0020f21:	85 c0                	test   eax,eax
c0020f23:	74 24                	je     c0020f49 <SysIsATTY(regs*)+0x4c>
c0020f25:	83 ec 0c             	sub    esp,0xc
c0020f28:	8b 10                	mov    edx,DWORD PTR [eax]
c0020f2a:	50                   	push   eax
c0020f2b:	ff 12                	call   DWORD PTR [edx]
c0020f2d:	31 d2                	xor    edx,edx
c0020f2f:	0f b6 c0             	movzx  eax,al
c0020f32:	83 c4 10             	add    esp,0x10
c0020f35:	83 c4 0c             	add    esp,0xc
c0020f38:	c3                   	ret    
c0020f39:	83 ec 0c             	sub    esp,0xc
c0020f3c:	50                   	push   eax
c0020f3d:	e8 b9 6d ff ff       	call   c0017cfb <KeGetFileFromDescriptor(int)>
c0020f42:	83 c4 10             	add    esp,0x10
c0020f45:	85 c0                	test   eax,eax
c0020f47:	75 dc                	jne    c0020f25 <SysIsATTY(regs*)+0x28>
c0020f49:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020f4e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020f53:	83 c4 0c             	add    esp,0xc
c0020f56:	c3                   	ret    

c0020f57 <SysSeek(regs*)>:
c0020f57:	53                   	push   ebx
c0020f58:	83 ec 08             	sub    esp,0x8
c0020f5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f5f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020f62:	8d 50 fd             	lea    edx,[eax-0x3]
c0020f65:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0020f6b:	77 32                	ja     c0020f9f <SysSeek(regs*)+0x48>
c0020f6d:	83 ec 0c             	sub    esp,0xc
c0020f70:	50                   	push   eax
c0020f71:	e8 85 6d ff ff       	call   c0017cfb <KeGetFileFromDescriptor(int)>
c0020f76:	83 c4 0c             	add    esp,0xc
c0020f79:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0020f7c:	31 db                	xor    ebx,ebx
c0020f7e:	53                   	push   ebx
c0020f7f:	51                   	push   ecx
c0020f80:	50                   	push   eax
c0020f81:	e8 ea 94 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0020f86:	83 c4 10             	add    esp,0x10
c0020f89:	85 c0                	test   eax,eax
c0020f8b:	0f 95 c0             	setne  al
c0020f8e:	31 d2                	xor    edx,edx
c0020f90:	0f b6 c0             	movzx  eax,al
c0020f93:	f7 d8                	neg    eax
c0020f95:	83 d2 00             	adc    edx,0x0
c0020f98:	83 c4 08             	add    esp,0x8
c0020f9b:	f7 da                	neg    edx
c0020f9d:	5b                   	pop    ebx
c0020f9e:	c3                   	ret    
c0020f9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020fa4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0020fa9:	83 c4 08             	add    esp,0x8
c0020fac:	5b                   	pop    ebx
c0020fad:	c3                   	ret    

c0020fae <SysTell(regs*)>:
c0020fae:	53                   	push   ebx
c0020faf:	83 ec 08             	sub    esp,0x8
c0020fb2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020fb6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0020fb9:	83 f8 02             	cmp    eax,0x2
c0020fbc:	76 4e                	jbe    c002100c <SysTell(regs*)+0x5e>
c0020fbe:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0020fc3:	76 19                	jbe    c0020fde <SysTell(regs*)+0x30>
c0020fc5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0020fc8:	31 d2                	xor    edx,edx
c0020fca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020fd0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020fd7:	31 c0                	xor    eax,eax
c0020fd9:	83 c4 08             	add    esp,0x8
c0020fdc:	5b                   	pop    ebx
c0020fdd:	c3                   	ret    
c0020fde:	83 ec 0c             	sub    esp,0xc
c0020fe1:	50                   	push   eax
c0020fe2:	e8 14 6d ff ff       	call   c0017cfb <KeGetFileFromDescriptor(int)>
c0020fe7:	5a                   	pop    edx
c0020fe8:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0020feb:	59                   	pop    ecx
c0020fec:	53                   	push   ebx
c0020fed:	50                   	push   eax
c0020fee:	e8 29 95 ff ff       	call   c001a51c <File::tell(unsigned long long*)>
c0020ff3:	83 c4 10             	add    esp,0x10
c0020ff6:	85 c0                	test   eax,eax
c0020ff8:	0f 95 c0             	setne  al
c0020ffb:	31 d2                	xor    edx,edx
c0020ffd:	0f b6 c0             	movzx  eax,al
c0021000:	f7 d8                	neg    eax
c0021002:	83 d2 00             	adc    edx,0x0
c0021005:	83 c4 08             	add    esp,0x8
c0021008:	f7 da                	neg    edx
c002100a:	5b                   	pop    ebx
c002100b:	c3                   	ret    
c002100c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021011:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021016:	83 c4 08             	add    esp,0x8
c0021019:	5b                   	pop    ebx
c002101a:	c3                   	ret    

c002101b <SysSize(regs*)>:
c002101b:	53                   	push   ebx
c002101c:	83 ec 18             	sub    esp,0x18
c002101f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021023:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021026:	83 f8 02             	cmp    eax,0x2
c0021029:	76 54                	jbe    c002107f <SysSize(regs*)+0x64>
c002102b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021030:	76 19                	jbe    c002104b <SysSize(regs*)+0x30>
c0021032:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0021035:	31 d2                	xor    edx,edx
c0021037:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002103d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021044:	31 c0                	xor    eax,eax
c0021046:	83 c4 18             	add    esp,0x18
c0021049:	5b                   	pop    ebx
c002104a:	c3                   	ret    
c002104b:	83 ec 0c             	sub    esp,0xc
c002104e:	50                   	push   eax
c002104f:	e8 a7 6c ff ff       	call   c0017cfb <KeGetFileFromDescriptor(int)>
c0021054:	83 c4 0c             	add    esp,0xc
c0021057:	8d 54 24 13          	lea    edx,[esp+0x13]
c002105b:	52                   	push   edx
c002105c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c002105f:	52                   	push   edx
c0021060:	50                   	push   eax
c0021061:	e8 4e 96 ff ff       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c0021066:	83 c4 10             	add    esp,0x10
c0021069:	85 c0                	test   eax,eax
c002106b:	0f 95 c0             	setne  al
c002106e:	31 d2                	xor    edx,edx
c0021070:	0f b6 c0             	movzx  eax,al
c0021073:	f7 d8                	neg    eax
c0021075:	83 d2 00             	adc    edx,0x0
c0021078:	83 c4 18             	add    esp,0x18
c002107b:	f7 da                	neg    edx
c002107d:	5b                   	pop    ebx
c002107e:	c3                   	ret    
c002107f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021084:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021089:	83 c4 18             	add    esp,0x18
c002108c:	5b                   	pop    ebx
c002108d:	c3                   	ret    

c002108e <SysSizeFromFilename(regs*)>:
c002108e:	55                   	push   ebp
c002108f:	57                   	push   edi
c0021090:	56                   	push   esi
c0021091:	53                   	push   ebx
c0021092:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0021098:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c002109f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00210a2:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00210a5:	85 f6                	test   esi,esi
c00210a7:	74 34                	je     c00210dd <SysSizeFromFilename(regs*)+0x4f>
c00210a9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00210af:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00210b2:	83 f8 02             	cmp    eax,0x2
c00210b5:	76 2d                	jbe    c00210e4 <SysSizeFromFilename(regs*)+0x56>
c00210b7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00210bc:	76 3b                	jbe    c00210f9 <SysSizeFromFilename(regs*)+0x6b>
c00210be:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00210c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00210c7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00210ce:	81 c4 5c 02 00 00    	add    esp,0x25c
c00210d4:	31 c0                	xor    eax,eax
c00210d6:	5b                   	pop    ebx
c00210d7:	31 d2                	xor    edx,edx
c00210d9:	5e                   	pop    esi
c00210da:	5f                   	pop    edi
c00210db:	5d                   	pop    ebp
c00210dc:	c3                   	ret    
c00210dd:	89 f8                	mov    eax,edi
c00210df:	83 f8 02             	cmp    eax,0x2
c00210e2:	77 d3                	ja     c00210b7 <SysSizeFromFilename(regs*)+0x29>
c00210e4:	81 c4 5c 02 00 00    	add    esp,0x25c
c00210ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00210ef:	5b                   	pop    ebx
c00210f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00210f5:	5e                   	pop    esi
c00210f6:	5f                   	pop    edi
c00210f7:	5d                   	pop    ebp
c00210f8:	c3                   	ret    
c00210f9:	83 ec 0c             	sub    esp,0xc
c00210fc:	68 14 01 00 00       	push   0x114
c0021101:	e8 f8 51 ff ff       	call   c00162fe <malloc>
c0021106:	6a 01                	push   0x1
c0021108:	89 c5                	mov    ebp,eax
c002110a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002110f:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021112:	51                   	push   ecx
c0021113:	57                   	push   edi
c0021114:	55                   	push   ebp
c0021115:	e8 9c 91 ff ff       	call   c001a2b6 <File::File(char const*, Process*, bool)>
c002111a:	83 c4 1c             	add    esp,0x1c
c002111d:	8d 44 24 23          	lea    eax,[esp+0x23]
c0021121:	50                   	push   eax
c0021122:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021125:	53                   	push   ebx
c0021126:	55                   	push   ebp
c0021127:	e8 88 95 ff ff       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c002112c:	83 c4 10             	add    esp,0x10
c002112f:	85 ed                	test   ebp,ebp
c0021131:	74 15                	je     c0021148 <SysSizeFromFilename(regs*)+0xba>
c0021133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021137:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002113a:	83 ec 0c             	sub    esp,0xc
c002113d:	55                   	push   ebp
c002113e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021141:	83 c4 10             	add    esp,0x10
c0021144:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021148:	85 c0                	test   eax,eax
c002114a:	75 98                	jne    c00210e4 <SysSizeFromFilename(regs*)+0x56>
c002114c:	6a 00                	push   0x0
c002114e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021153:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021156:	05 0c 01 00 00       	add    eax,0x10c
c002115b:	50                   	push   eax
c002115c:	57                   	push   edi
c002115d:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0021164:	53                   	push   ebx
c0021165:	e8 32 8f ff ff       	call   c001a09c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002116a:	58                   	pop    eax
c002116b:	5a                   	pop    edx
c002116c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021170:	50                   	push   eax
c0021171:	53                   	push   ebx
c0021172:	e8 8d 89 ff ff       	call   c0019b04 <KeDereferenceSymlink(char const*, char*)>
c0021177:	83 c4 10             	add    esp,0x10
c002117a:	83 f8 01             	cmp    eax,0x1
c002117d:	74 1a                	je     c0021199 <SysSizeFromFilename(regs*)+0x10b>
c002117f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0021184:	74 26                	je     c00211ac <SysSizeFromFilename(regs*)+0x11e>
c0021186:	85 f6                	test   esi,esi
c0021188:	0f 84 40 ff ff ff    	je     c00210ce <SysSizeFromFilename(regs*)+0x40>
c002118e:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0021194:	e9 35 ff ff ff       	jmp    c00210ce <SysSizeFromFilename(regs*)+0x40>
c0021199:	85 f6                	test   esi,esi
c002119b:	0f 84 2d ff ff ff    	je     c00210ce <SysSizeFromFilename(regs*)+0x40>
c00211a1:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00211a7:	e9 22 ff ff ff       	jmp    c00210ce <SysSizeFromFilename(regs*)+0x40>
c00211ac:	85 f6                	test   esi,esi
c00211ae:	0f 84 1a ff ff ff    	je     c00210ce <SysSizeFromFilename(regs*)+0x40>
c00211b4:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00211ba:	e9 0f ff ff ff       	jmp    c00210ce <SysSizeFromFilename(regs*)+0x40>

c00211bf <SysSizeFromFilenameNoSymlink(regs*)>:
c00211bf:	55                   	push   ebp
c00211c0:	57                   	push   edi
c00211c1:	56                   	push   esi
c00211c2:	53                   	push   ebx
c00211c3:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00211c9:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00211d0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00211d3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00211d6:	85 f6                	test   esi,esi
c00211d8:	74 34                	je     c002120e <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c00211da:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00211e0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00211e3:	83 f8 02             	cmp    eax,0x2
c00211e6:	76 2d                	jbe    c0021215 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00211e8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00211ed:	76 3b                	jbe    c002122a <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c00211ef:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00211f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211f8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211ff:	81 c4 5c 02 00 00    	add    esp,0x25c
c0021205:	31 c0                	xor    eax,eax
c0021207:	5b                   	pop    ebx
c0021208:	31 d2                	xor    edx,edx
c002120a:	5e                   	pop    esi
c002120b:	5f                   	pop    edi
c002120c:	5d                   	pop    ebp
c002120d:	c3                   	ret    
c002120e:	89 f8                	mov    eax,edi
c0021210:	83 f8 02             	cmp    eax,0x2
c0021213:	77 d3                	ja     c00211e8 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0021215:	81 c4 5c 02 00 00    	add    esp,0x25c
c002121b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021220:	5b                   	pop    ebx
c0021221:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021226:	5e                   	pop    esi
c0021227:	5f                   	pop    edi
c0021228:	5d                   	pop    ebp
c0021229:	c3                   	ret    
c002122a:	83 ec 0c             	sub    esp,0xc
c002122d:	68 14 01 00 00       	push   0x114
c0021232:	e8 c7 50 ff ff       	call   c00162fe <malloc>
c0021237:	6a 00                	push   0x0
c0021239:	89 c5                	mov    ebp,eax
c002123b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021240:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0021243:	51                   	push   ecx
c0021244:	57                   	push   edi
c0021245:	55                   	push   ebp
c0021246:	e8 6b 90 ff ff       	call   c001a2b6 <File::File(char const*, Process*, bool)>
c002124b:	83 c4 1c             	add    esp,0x1c
c002124e:	8d 44 24 23          	lea    eax,[esp+0x23]
c0021252:	50                   	push   eax
c0021253:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0021256:	53                   	push   ebx
c0021257:	55                   	push   ebp
c0021258:	e8 57 94 ff ff       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c002125d:	83 c4 10             	add    esp,0x10
c0021260:	85 ed                	test   ebp,ebp
c0021262:	74 15                	je     c0021279 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c0021264:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021268:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002126b:	83 ec 0c             	sub    esp,0xc
c002126e:	55                   	push   ebp
c002126f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021272:	83 c4 10             	add    esp,0x10
c0021275:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021279:	85 c0                	test   eax,eax
c002127b:	75 98                	jne    c0021215 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c002127d:	6a 00                	push   0x0
c002127f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021284:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021287:	05 0c 01 00 00       	add    eax,0x10c
c002128c:	50                   	push   eax
c002128d:	57                   	push   edi
c002128e:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c0021295:	53                   	push   ebx
c0021296:	e8 01 8e ff ff       	call   c001a09c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c002129b:	58                   	pop    eax
c002129c:	5a                   	pop    edx
c002129d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00212a1:	50                   	push   eax
c00212a2:	53                   	push   ebx
c00212a3:	e8 5c 88 ff ff       	call   c0019b04 <KeDereferenceSymlink(char const*, char*)>
c00212a8:	83 c4 10             	add    esp,0x10
c00212ab:	83 f8 01             	cmp    eax,0x1
c00212ae:	74 1a                	je     c00212ca <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c00212b0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00212b5:	74 26                	je     c00212dd <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c00212b7:	85 f6                	test   esi,esi
c00212b9:	0f 84 40 ff ff ff    	je     c00211ff <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00212bf:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00212c5:	e9 35 ff ff ff       	jmp    c00211ff <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00212ca:	85 f6                	test   esi,esi
c00212cc:	0f 84 2d ff ff ff    	je     c00211ff <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00212d2:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00212d8:	e9 22 ff ff ff       	jmp    c00211ff <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00212dd:	85 f6                	test   esi,esi
c00212df:	0f 84 1a ff ff ff    	je     c00211ff <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00212e5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00212eb:	e9 0f ff ff ff       	jmp    c00211ff <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c00212f0 <SysClose(regs*)>:
c00212f0:	53                   	push   ebx
c00212f1:	83 ec 08             	sub    esp,0x8
c00212f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00212fb:	83 f8 02             	cmp    eax,0x2
c00212fe:	76 41                	jbe    c0021341 <SysClose(regs*)+0x51>
c0021300:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0021306:	83 fa 01             	cmp    edx,0x1
c0021309:	76 2d                	jbe    c0021338 <SysClose(regs*)+0x48>
c002130b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0021310:	77 2f                	ja     c0021341 <SysClose(regs*)+0x51>
c0021312:	83 ec 0c             	sub    esp,0xc
c0021315:	50                   	push   eax
c0021316:	e8 e0 69 ff ff       	call   c0017cfb <KeGetFileFromDescriptor(int)>
c002131b:	89 c3                	mov    ebx,eax
c002131d:	89 04 24             	mov    DWORD PTR [esp],eax
c0021320:	e8 eb 90 ff ff       	call   c001a410 <File::close()>
c0021325:	83 c4 10             	add    esp,0x10
c0021328:	85 db                	test   ebx,ebx
c002132a:	74 0c                	je     c0021338 <SysClose(regs*)+0x48>
c002132c:	83 ec 0c             	sub    esp,0xc
c002132f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021331:	53                   	push   ebx
c0021332:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021335:	83 c4 10             	add    esp,0x10
c0021338:	31 c0                	xor    eax,eax
c002133a:	31 d2                	xor    edx,edx
c002133c:	83 c4 08             	add    esp,0x8
c002133f:	5b                   	pop    ebx
c0021340:	c3                   	ret    
c0021341:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021346:	ba ff ff ff ff       	mov    edx,0xffffffff
c002134b:	83 c4 08             	add    esp,0x8
c002134e:	5b                   	pop    ebx
c002134f:	c3                   	ret    

c0021350 <SysOpenDir(regs*)>:
c0021350:	56                   	push   esi
c0021351:	53                   	push   ebx
c0021352:	83 ec 04             	sub    esp,0x4
c0021355:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021359:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c002135c:	85 c9                	test   ecx,ecx
c002135e:	74 5d                	je     c00213bd <SysOpenDir(regs*)+0x6d>
c0021360:	83 ec 0c             	sub    esp,0xc
c0021363:	68 14 01 00 00       	push   0x114
c0021368:	e8 91 4f ff ff       	call   c00162fe <malloc>
c002136d:	83 c4 0c             	add    esp,0xc
c0021370:	89 c6                	mov    esi,eax
c0021372:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021377:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002137a:	50                   	push   eax
c002137b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002137e:	52                   	push   edx
c002137f:	56                   	push   esi
c0021380:	e8 ef 94 ff ff       	call   c001a874 <Directory::Directory(char const*, Process*)>
c0021385:	83 c4 10             	add    esp,0x10
c0021388:	85 f6                	test   esi,esi
c002138a:	74 31                	je     c00213bd <SysOpenDir(regs*)+0x6d>
c002138c:	83 ec 0c             	sub    esp,0xc
c002138f:	56                   	push   esi
c0021390:	e8 a7 95 ff ff       	call   c001a93c <Directory::open()>
c0021395:	83 c4 10             	add    esp,0x10
c0021398:	85 c0                	test   eax,eax
c002139a:	75 21                	jne    c00213bd <SysOpenDir(regs*)+0x6d>
c002139c:	83 ec 0c             	sub    esp,0xc
c002139f:	56                   	push   esi
c00213a0:	e8 59 66 ff ff       	call   c00179fe <UnixFile::getFileDescriptor()>
c00213a5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00213a8:	83 c4 10             	add    esp,0x10
c00213ab:	89 02                	mov    DWORD PTR [edx],eax
c00213ad:	c1 f8 1f             	sar    eax,0x1f
c00213b0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00213b3:	83 c4 04             	add    esp,0x4
c00213b6:	31 c0                	xor    eax,eax
c00213b8:	31 d2                	xor    edx,edx
c00213ba:	5b                   	pop    ebx
c00213bb:	5e                   	pop    esi
c00213bc:	c3                   	ret    
c00213bd:	83 c4 04             	add    esp,0x4
c00213c0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00213c5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00213ca:	5b                   	pop    ebx
c00213cb:	5e                   	pop    esi
c00213cc:	c3                   	ret    

c00213cd <SysMakeDir(regs*)>:
c00213cd:	56                   	push   esi
c00213ce:	53                   	push   ebx
c00213cf:	83 ec 10             	sub    esp,0x10
c00213d2:	68 14 01 00 00       	push   0x114
c00213d7:	e8 22 4f ff ff       	call   c00162fe <malloc>
c00213dc:	83 c4 0c             	add    esp,0xc
c00213df:	89 c3                	mov    ebx,eax
c00213e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00213e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00213e9:	50                   	push   eax
c00213ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213ee:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00213f1:	52                   	push   edx
c00213f2:	53                   	push   ebx
c00213f3:	e8 7c 94 ff ff       	call   c001a874 <Directory::Directory(char const*, Process*)>
c00213f8:	83 c4 10             	add    esp,0x10
c00213fb:	85 db                	test   ebx,ebx
c00213fd:	74 2c                	je     c002142b <SysMakeDir(regs*)+0x5e>
c00213ff:	83 ec 0c             	sub    esp,0xc
c0021402:	53                   	push   ebx
c0021403:	e8 14 97 ff ff       	call   c001ab1c <Directory::create()>
c0021408:	89 c6                	mov    esi,eax
c002140a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002140c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002140f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021412:	83 c4 10             	add    esp,0x10
c0021415:	31 c0                	xor    eax,eax
c0021417:	85 f6                	test   esi,esi
c0021419:	0f 95 c0             	setne  al
c002141c:	31 d2                	xor    edx,edx
c002141e:	f7 d8                	neg    eax
c0021420:	83 d2 00             	adc    edx,0x0
c0021423:	83 c4 04             	add    esp,0x4
c0021426:	f7 da                	neg    edx
c0021428:	5b                   	pop    ebx
c0021429:	5e                   	pop    esi
c002142a:	c3                   	ret    
c002142b:	83 c4 04             	add    esp,0x4
c002142e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021433:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021438:	5b                   	pop    ebx
c0021439:	5e                   	pop    esi
c002143a:	c3                   	ret    

c002143b <SysCloseDir(regs*)>:
c002143b:	53                   	push   ebx
c002143c:	83 ec 08             	sub    esp,0x8
c002143f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021443:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021446:	8d 50 fd             	lea    edx,[eax-0x3]
c0021449:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c002144f:	77 2f                	ja     c0021480 <SysCloseDir(regs*)+0x45>
c0021451:	83 ec 0c             	sub    esp,0xc
c0021454:	50                   	push   eax
c0021455:	e8 a1 68 ff ff       	call   c0017cfb <KeGetFileFromDescriptor(int)>
c002145a:	89 c3                	mov    ebx,eax
c002145c:	89 04 24             	mov    DWORD PTR [esp],eax
c002145f:	e8 34 95 ff ff       	call   c001a998 <Directory::close()>
c0021464:	83 c4 10             	add    esp,0x10
c0021467:	85 db                	test   ebx,ebx
c0021469:	74 0c                	je     c0021477 <SysCloseDir(regs*)+0x3c>
c002146b:	83 ec 0c             	sub    esp,0xc
c002146e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021470:	53                   	push   ebx
c0021471:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0021474:	83 c4 10             	add    esp,0x10
c0021477:	31 c0                	xor    eax,eax
c0021479:	31 d2                	xor    edx,edx
c002147b:	83 c4 08             	add    esp,0x8
c002147e:	5b                   	pop    ebx
c002147f:	c3                   	ret    
c0021480:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021485:	ba ff ff ff ff       	mov    edx,0xffffffff
c002148a:	83 c4 08             	add    esp,0x8
c002148d:	5b                   	pop    ebx
c002148e:	c3                   	ret    

c002148f <SysWait(regs*)>:
c002148f:	83 ec 10             	sub    esp,0x10
c0021492:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021496:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0021499:	52                   	push   edx
c002149a:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c002149d:	51                   	push   ecx
c002149e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00214a1:	50                   	push   eax
c00214a2:	e8 d1 3d 00 00       	call   c0025278 <waitTask(int, int*, int)>
c00214a7:	83 c4 1c             	add    esp,0x1c
c00214aa:	89 c2                	mov    edx,eax
c00214ac:	c1 fa 1f             	sar    edx,0x1f
c00214af:	c3                   	ret    

c00214b0 <SysNotImpl(regs*)>:
c00214b0:	83 ec 18             	sub    esp,0x18
c00214b3:	68 a4 28 03 c0       	push   0xc00328a4
c00214b8:	e8 e9 ec ff ff       	call   c00201a6 <KePanic(char const*)>
c00214bd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00214c2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00214c7:	83 c4 1c             	add    esp,0x1c
c00214ca:	c3                   	ret    

c00214cb <SysPanic(regs*)>:
c00214cb:	83 ec 18             	sub    esp,0x18
c00214ce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214d2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00214d5:	50                   	push   eax
c00214d6:	e8 cb ec ff ff       	call   c00201a6 <KePanic(char const*)>
c00214db:	b8 01 00 00 00       	mov    eax,0x1
c00214e0:	31 d2                	xor    edx,edx
c00214e2:	83 c4 1c             	add    esp,0x1c
c00214e5:	c3                   	ret    

c00214e6 <SysRmdir(regs*)>:
c00214e6:	56                   	push   esi
c00214e7:	53                   	push   ebx
c00214e8:	83 ec 20             	sub    esp,0x20
c00214eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00214ef:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00214f2:	68 14 01 00 00       	push   0x114
c00214f7:	e8 02 4e ff ff       	call   c00162fe <malloc>
c00214fc:	6a 00                	push   0x0
c00214fe:	89 c3                	mov    ebx,eax
c0021500:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021505:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021508:	50                   	push   eax
c0021509:	56                   	push   esi
c002150a:	53                   	push   ebx
c002150b:	e8 a6 8d ff ff       	call   c001a2b6 <File::File(char const*, Process*, bool)>
c0021510:	83 c4 14             	add    esp,0x14
c0021513:	53                   	push   ebx
c0021514:	e8 67 90 ff ff       	call   c001a580 <File::unlink()>
c0021519:	83 c4 10             	add    esp,0x10
c002151c:	85 db                	test   ebx,ebx
c002151e:	74 14                	je     c0021534 <SysRmdir(regs*)+0x4e>
c0021520:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021524:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021526:	83 ec 0c             	sub    esp,0xc
c0021529:	53                   	push   ebx
c002152a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002152d:	83 c4 10             	add    esp,0x10
c0021530:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021534:	85 c0                	test   eax,eax
c0021536:	0f 95 c0             	setne  al
c0021539:	31 d2                	xor    edx,edx
c002153b:	0f b6 c0             	movzx  eax,al
c002153e:	f7 d8                	neg    eax
c0021540:	83 d2 00             	adc    edx,0x0
c0021543:	83 c4 14             	add    esp,0x14
c0021546:	f7 da                	neg    edx
c0021548:	5b                   	pop    ebx
c0021549:	5e                   	pop    esi
c002154a:	c3                   	ret    

c002154b <SysUnlink(regs*)>:
c002154b:	56                   	push   esi
c002154c:	53                   	push   ebx
c002154d:	83 ec 20             	sub    esp,0x20
c0021550:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021554:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0021557:	68 14 01 00 00       	push   0x114
c002155c:	e8 9d 4d ff ff       	call   c00162fe <malloc>
c0021561:	6a 00                	push   0x0
c0021563:	89 c3                	mov    ebx,eax
c0021565:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002156a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002156d:	50                   	push   eax
c002156e:	56                   	push   esi
c002156f:	53                   	push   ebx
c0021570:	e8 41 8d ff ff       	call   c001a2b6 <File::File(char const*, Process*, bool)>
c0021575:	83 c4 14             	add    esp,0x14
c0021578:	53                   	push   ebx
c0021579:	e8 02 90 ff ff       	call   c001a580 <File::unlink()>
c002157e:	83 c4 10             	add    esp,0x10
c0021581:	85 db                	test   ebx,ebx
c0021583:	74 14                	je     c0021599 <SysUnlink(regs*)+0x4e>
c0021585:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021589:	8b 13                	mov    edx,DWORD PTR [ebx]
c002158b:	83 ec 0c             	sub    esp,0xc
c002158e:	53                   	push   ebx
c002158f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0021592:	83 c4 10             	add    esp,0x10
c0021595:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021599:	85 c0                	test   eax,eax
c002159b:	0f 95 c0             	setne  al
c002159e:	31 d2                	xor    edx,edx
c00215a0:	0f b6 c0             	movzx  eax,al
c00215a3:	f7 d8                	neg    eax
c00215a5:	83 d2 00             	adc    edx,0x0
c00215a8:	83 c4 14             	add    esp,0x14
c00215ab:	f7 da                	neg    edx
c00215ad:	5b                   	pop    ebx
c00215ae:	5e                   	pop    esi
c00215af:	c3                   	ret    

c00215b0 <SysGetArgv(regs*)>:
c00215b0:	83 ec 0c             	sub    esp,0xc
c00215b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00215b7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00215ba:	85 c0                	test   eax,eax
c00215bc:	78 2c                	js     c00215ea <SysGetArgv(regs*)+0x3a>
c00215be:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00215c4:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00215c7:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00215cd:	7d 1b                	jge    c00215ea <SysGetArgv(regs*)+0x3a>
c00215cf:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00215d6:	85 c0                	test   eax,eax
c00215d8:	74 18                	je     c00215f2 <SysGetArgv(regs*)+0x42>
c00215da:	83 ec 08             	sub    esp,0x8
c00215dd:	50                   	push   eax
c00215de:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00215e1:	50                   	push   eax
c00215e2:	e8 59 f0 fd ff       	call   c0000640 <strcpy>
c00215e7:	83 c4 10             	add    esp,0x10
c00215ea:	31 c0                	xor    eax,eax
c00215ec:	31 d2                	xor    edx,edx
c00215ee:	83 c4 0c             	add    esp,0xc
c00215f1:	c3                   	ret    
c00215f2:	b8 01 00 00 00       	mov    eax,0x1
c00215f7:	31 d2                	xor    edx,edx
c00215f9:	83 c4 0c             	add    esp,0xc
c00215fc:	c3                   	ret    

c00215fd <SysUSleep(regs*)>:
c00215fd:	83 ec 1c             	sub    esp,0x1c
c0021600:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0021604:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0021607:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c002160a:	6a 00                	push   0x0
c002160c:	6a 64                	push   0x64
c002160e:	52                   	push   edx
c002160f:	50                   	push   eax
c0021610:	e8 6b cf 00 00       	call   c002e580 <__udivdi3>
c0021615:	83 c4 14             	add    esp,0x14
c0021618:	50                   	push   eax
c0021619:	e8 3e 3d 00 00       	call   c002535c <milliTenthSleep(unsigned int)>
c002161e:	31 c0                	xor    eax,eax
c0021620:	31 d2                	xor    edx,edx
c0021622:	83 c4 1c             	add    esp,0x1c
c0021625:	c3                   	ret    

c0021626 <SysSpawn(regs*)>:
c0021626:	56                   	push   esi
c0021627:	53                   	push   ebx
c0021628:	83 ec 04             	sub    esp,0x4
c002162b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002162f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0021632:	85 f6                	test   esi,esi
c0021634:	75 0a                	jne    c0021640 <SysSpawn(regs*)+0x1a>
c0021636:	83 c4 04             	add    esp,0x4
c0021639:	31 c0                	xor    eax,eax
c002163b:	31 d2                	xor    edx,edx
c002163d:	5b                   	pop    ebx
c002163e:	5e                   	pop    esi
c002163f:	c3                   	ret    
c0021640:	83 ec 0c             	sub    esp,0xc
c0021643:	68 24 07 00 00       	push   0x724
c0021648:	e8 b1 4c ff ff       	call   c00162fe <malloc>
c002164d:	83 c4 10             	add    esp,0x10
c0021650:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0021653:	89 c6                	mov    esi,eax
c0021655:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0021658:	85 c9                	test   ecx,ecx
c002165a:	75 39                	jne    c0021695 <SysSpawn(regs*)+0x6f>
c002165c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0021661:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0021664:	52                   	push   edx
c0021665:	50                   	push   eax
c0021666:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021669:	50                   	push   eax
c002166a:	56                   	push   esi
c002166b:	e8 90 34 00 00       	call   c0024b00 <Process::Process(char const*, Process*, char**)>
c0021670:	83 c4 10             	add    esp,0x10
c0021673:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c002167a:	75 ba                	jne    c0021636 <SysSpawn(regs*)+0x10>
c002167c:	83 ec 0c             	sub    esp,0xc
c002167f:	56                   	push   esi
c0021680:	e8 bb 39 00 00       	call   c0025040 <Process::createUserThread()>
c0021685:	8b 06                	mov    eax,DWORD PTR [esi]
c0021687:	83 c4 10             	add    esp,0x10
c002168a:	89 c2                	mov    edx,eax
c002168c:	83 c4 04             	add    esp,0x4
c002168f:	c1 fa 1f             	sar    edx,0x1f
c0021692:	5b                   	pop    ebx
c0021693:	5e                   	pop    esi
c0021694:	c3                   	ret    
c0021695:	31 c0                	xor    eax,eax
c0021697:	eb cb                	jmp    c0021664 <SysSpawn(regs*)+0x3e>

c0021699 <SysGetEnv(regs*)>:
c0021699:	57                   	push   edi
c002169a:	56                   	push   esi
c002169b:	53                   	push   ebx
c002169c:	83 ec 1c             	sub    esp,0x1c
c002169f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00216a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00216a8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00216ab:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00216ae:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00216b1:	51                   	push   ecx
c00216b2:	e8 8c e9 ff ff       	call   c0020043 <KeGetProcessTotalEnvCount(Process*)>
c00216b7:	83 c4 10             	add    esp,0x10
c00216ba:	39 c7                	cmp    edi,eax
c00216bc:	7c 14                	jl     c00216d2 <SysGetEnv(regs*)+0x39>
c00216be:	85 f6                	test   esi,esi
c00216c0:	75 0b                	jne    c00216cd <SysGetEnv(regs*)+0x34>
c00216c2:	83 c4 10             	add    esp,0x10
c00216c5:	31 c0                	xor    eax,eax
c00216c7:	5b                   	pop    ebx
c00216c8:	31 d2                	xor    edx,edx
c00216ca:	5e                   	pop    esi
c00216cb:	5f                   	pop    edi
c00216cc:	c3                   	ret    
c00216cd:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00216d0:	eb f0                	jmp    c00216c2 <SysGetEnv(regs*)+0x29>
c00216d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00216d6:	83 ec 04             	sub    esp,0x4
c00216d9:	57                   	push   edi
c00216da:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00216e0:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00216e3:	57                   	push   edi
c00216e4:	50                   	push   eax
c00216e5:	e8 79 e9 ff ff       	call   c0020063 <KeGetProcessEnvPair(Process*, int)>
c00216ea:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00216ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00216f1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00216f5:	83 c4 0c             	add    esp,0xc
c00216f8:	85 d2                	test   edx,edx
c00216fa:	75 23                	jne    c002171f <SysGetEnv(regs*)+0x86>
c00216fc:	83 ec 0c             	sub    esp,0xc
c00216ff:	50                   	push   eax
c0021700:	e8 6b ee fd ff       	call   c0000570 <strlen>
c0021705:	89 3c 24             	mov    DWORD PTR [esp],edi
c0021708:	89 c3                	mov    ebx,eax
c002170a:	e8 61 ee fd ff       	call   c0000570 <strlen>
c002170f:	83 c4 10             	add    esp,0x10
c0021712:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0021716:	83 c4 10             	add    esp,0x10
c0021719:	31 d2                	xor    edx,edx
c002171b:	5b                   	pop    ebx
c002171c:	5e                   	pop    esi
c002171d:	5f                   	pop    edi
c002171e:	c3                   	ret    
c002171f:	83 ec 08             	sub    esp,0x8
c0021722:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021725:	50                   	push   eax
c0021726:	56                   	push   esi
c0021727:	e8 14 ef fd ff       	call   c0000640 <strcpy>
c002172c:	58                   	pop    eax
c002172d:	5a                   	pop    edx
c002172e:	68 be 28 03 c0       	push   0xc00328be
c0021733:	56                   	push   esi
c0021734:	e8 07 f1 fd ff       	call   c0000840 <strcat>
c0021739:	59                   	pop    ecx
c002173a:	5b                   	pop    ebx
c002173b:	57                   	push   edi
c002173c:	56                   	push   esi
c002173d:	e8 fe f0 fd ff       	call   c0000840 <strcat>
c0021742:	83 c4 10             	add    esp,0x10
c0021745:	e9 78 ff ff ff       	jmp    c00216c2 <SysGetEnv(regs*)+0x29>

c002174a <SysSetFatAttrib(regs*)>:
c002174a:	57                   	push   edi
c002174b:	56                   	push   esi
c002174c:	53                   	push   ebx
c002174d:	83 ec 1c             	sub    esp,0x1c
c0021750:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021754:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0021757:	68 14 01 00 00       	push   0x114
c002175c:	e8 9d 4b ff ff       	call   c00162fe <malloc>
c0021761:	83 c4 0c             	add    esp,0xc
c0021764:	89 c3                	mov    ebx,eax
c0021766:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002176b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002176e:	50                   	push   eax
c002176f:	57                   	push   edi
c0021770:	53                   	push   ebx
c0021771:	e8 1e 8c ff ff       	call   c001a394 <File::File(char const*, Process*)>
c0021776:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0021779:	83 c4 0c             	add    esp,0xc
c002177c:	0f b6 d4             	movzx  edx,ah
c002177f:	0f b6 c0             	movzx  eax,al
c0021782:	52                   	push   edx
c0021783:	50                   	push   eax
c0021784:	53                   	push   ebx
c0021785:	e8 90 8e ff ff       	call   c001a61a <File::chfatattr(unsigned char, unsigned char)>
c002178a:	83 c4 10             	add    esp,0x10
c002178d:	85 db                	test   ebx,ebx
c002178f:	74 14                	je     c00217a5 <SysSetFatAttrib(regs*)+0x5b>
c0021791:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021795:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021797:	83 ec 0c             	sub    esp,0xc
c002179a:	53                   	push   ebx
c002179b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002179e:	83 c4 10             	add    esp,0x10
c00217a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00217a5:	85 c0                	test   eax,eax
c00217a7:	0f 95 c0             	setne  al
c00217aa:	31 d2                	xor    edx,edx
c00217ac:	0f b6 c0             	movzx  eax,al
c00217af:	f7 d8                	neg    eax
c00217b1:	83 d2 00             	adc    edx,0x0
c00217b4:	83 c4 10             	add    esp,0x10
c00217b7:	f7 da                	neg    edx
c00217b9:	5b                   	pop    ebx
c00217ba:	5e                   	pop    esi
c00217bb:	5f                   	pop    edi
c00217bc:	c3                   	ret    

c00217bd <SysPipe(regs*)>:
c00217bd:	57                   	push   edi
c00217be:	56                   	push   esi
c00217bf:	53                   	push   ebx
c00217c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217c4:	83 ec 0c             	sub    esp,0xc
c00217c7:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00217ca:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00217cd:	6a 20                	push   0x20
c00217cf:	e8 2a 4b ff ff       	call   c00162fe <malloc>
c00217d4:	89 c3                	mov    ebx,eax
c00217d6:	58                   	pop    eax
c00217d7:	5a                   	pop    edx
c00217d8:	68 00 50 00 00       	push   0x5000
c00217dd:	53                   	push   ebx
c00217de:	e8 8d 54 ff ff       	call   c0016c70 <Pipe::Pipe(int)>
c00217e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217e6:	e8 13 62 ff ff       	call   c00179fe <UnixFile::getFileDescriptor()>
c00217eb:	89 07                	mov    DWORD PTR [edi],eax
c00217ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00217f0:	e8 09 62 ff ff       	call   c00179fe <UnixFile::getFileDescriptor()>
c00217f5:	83 c4 10             	add    esp,0x10
c00217f8:	89 06                	mov    DWORD PTR [esi],eax
c00217fa:	31 d2                	xor    edx,edx
c00217fc:	5b                   	pop    ebx
c00217fd:	31 c0                	xor    eax,eax
c00217ff:	5e                   	pop    esi
c0021800:	5f                   	pop    edi
c0021801:	c3                   	ret    

c0021802 <SysGetUnixTime(regs*)>:
c0021802:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0021807:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002180d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021811:	e9 4c 95 ff ff       	jmp    c001ad62 <Clock::timeInSecondsLocal()>

c0021816 <string_ends_with(char const*, char const*)>:
c0021816:	57                   	push   edi
c0021817:	56                   	push   esi
c0021818:	53                   	push   ebx
c0021819:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002181d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021821:	83 ec 0c             	sub    esp,0xc
c0021824:	53                   	push   ebx
c0021825:	e8 46 ed fd ff       	call   c0000570 <strlen>
c002182a:	89 3c 24             	mov    DWORD PTR [esp],edi
c002182d:	89 c6                	mov    esi,eax
c002182f:	e8 3c ed fd ff       	call   c0000570 <strlen>
c0021834:	83 c4 10             	add    esp,0x10
c0021837:	39 c6                	cmp    esi,eax
c0021839:	7d 06                	jge    c0021841 <string_ends_with(char const*, char const*)+0x2b>
c002183b:	5b                   	pop    ebx
c002183c:	31 c0                	xor    eax,eax
c002183e:	5e                   	pop    esi
c002183f:	5f                   	pop    edi
c0021840:	c3                   	ret    
c0021841:	83 ec 08             	sub    esp,0x8
c0021844:	29 c6                	sub    esi,eax
c0021846:	57                   	push   edi
c0021847:	01 f3                	add    ebx,esi
c0021849:	53                   	push   ebx
c002184a:	e8 01 ef fd ff       	call   c0000750 <strcmp>
c002184f:	83 c4 10             	add    esp,0x10
c0021852:	85 c0                	test   eax,eax
c0021854:	5b                   	pop    ebx
c0021855:	0f 94 c0             	sete   al
c0021858:	5e                   	pop    esi
c0021859:	0f b6 c0             	movzx  eax,al
c002185c:	5f                   	pop    edi
c002185d:	c3                   	ret    

c002185e <SysOpen(regs*)>:
c002185e:	56                   	push   esi
c002185f:	53                   	push   ebx
c0021860:	81 ec 04 01 00 00    	sub    esp,0x104
c0021866:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c002186d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021870:	85 c0                	test   eax,eax
c0021872:	0f 84 bc 01 00 00    	je     c0021a34 <SysOpen(regs*)+0x1d6>
c0021878:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002187b:	85 c0                	test   eax,eax
c002187d:	0f 84 b1 01 00 00    	je     c0021a34 <SysOpen(regs*)+0x1d6>
c0021883:	6a 00                	push   0x0
c0021885:	68 c0 28 03 c0       	push   0xc00328c0
c002188a:	50                   	push   eax
c002188b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002188f:	56                   	push   esi
c0021890:	e8 07 88 ff ff       	call   c001a09c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0021895:	89 34 24             	mov    DWORD PTR [esp],esi
c0021898:	e8 d3 ec fd ff       	call   c0000570 <strlen>
c002189d:	83 c4 10             	add    esp,0x10
c00218a0:	83 e8 01             	sub    eax,0x1
c00218a3:	74 21                	je     c00218c6 <SysOpen(regs*)+0x68>
c00218a5:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00218a9:	eb 12                	jmp    c00218bd <SysOpen(regs*)+0x5f>
c00218ab:	83 fa 3a             	cmp    edx,0x3a
c00218ae:	74 12                	je     c00218c2 <SysOpen(regs*)+0x64>
c00218b0:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00218b4:	83 e8 01             	sub    eax,0x1
c00218b7:	74 0d                	je     c00218c6 <SysOpen(regs*)+0x68>
c00218b9:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00218bd:	83 fa 2e             	cmp    edx,0x2e
c00218c0:	75 e9                	jne    c00218ab <SysOpen(regs*)+0x4d>
c00218c2:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00218c6:	83 ec 08             	sub    esp,0x8
c00218c9:	68 c4 28 03 c0       	push   0xc00328c4
c00218ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00218d1:	50                   	push   eax
c00218d2:	e8 3f ff ff ff       	call   c0021816 <string_ends_with(char const*, char const*)>
c00218d7:	83 c4 10             	add    esp,0x10
c00218da:	85 c0                	test   eax,eax
c00218dc:	74 1d                	je     c00218fb <SysOpen(regs*)+0x9d>
c00218de:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00218e1:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00218e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218ee:	81 c4 04 01 00 00    	add    esp,0x104
c00218f4:	31 c0                	xor    eax,eax
c00218f6:	31 d2                	xor    edx,edx
c00218f8:	5b                   	pop    ebx
c00218f9:	5e                   	pop    esi
c00218fa:	c3                   	ret    
c00218fb:	83 ec 08             	sub    esp,0x8
c00218fe:	68 c9 28 03 c0       	push   0xc00328c9
c0021903:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021906:	50                   	push   eax
c0021907:	e8 0a ff ff ff       	call   c0021816 <string_ends_with(char const*, char const*)>
c002190c:	83 c4 10             	add    esp,0x10
c002190f:	85 c0                	test   eax,eax
c0021911:	75 cb                	jne    c00218de <SysOpen(regs*)+0x80>
c0021913:	83 ec 08             	sub    esp,0x8
c0021916:	68 c5 28 03 c0       	push   0xc00328c5
c002191b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002191e:	50                   	push   eax
c002191f:	e8 2c ee fd ff       	call   c0000750 <strcmp>
c0021924:	83 c4 10             	add    esp,0x10
c0021927:	85 c0                	test   eax,eax
c0021929:	74 b3                	je     c00218de <SysOpen(regs*)+0x80>
c002192b:	83 ec 08             	sub    esp,0x8
c002192e:	68 c4 28 03 c0       	push   0xc00328c4
c0021933:	56                   	push   esi
c0021934:	e8 dd fe ff ff       	call   c0021816 <string_ends_with(char const*, char const*)>
c0021939:	83 c4 10             	add    esp,0x10
c002193c:	85 c0                	test   eax,eax
c002193e:	75 9e                	jne    c00218de <SysOpen(regs*)+0x80>
c0021940:	83 ec 08             	sub    esp,0x8
c0021943:	68 ce 28 03 c0       	push   0xc00328ce
c0021948:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c002194b:	50                   	push   eax
c002194c:	e8 c5 fe ff ff       	call   c0021816 <string_ends_with(char const*, char const*)>
c0021951:	83 c4 10             	add    esp,0x10
c0021954:	85 c0                	test   eax,eax
c0021956:	0f 85 eb 00 00 00    	jne    c0021a47 <SysOpen(regs*)+0x1e9>
c002195c:	83 ec 08             	sub    esp,0x8
c002195f:	68 d3 28 03 c0       	push   0xc00328d3
c0021964:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0021967:	50                   	push   eax
c0021968:	e8 a9 fe ff ff       	call   c0021816 <string_ends_with(char const*, char const*)>
c002196d:	83 c4 10             	add    esp,0x10
c0021970:	85 c0                	test   eax,eax
c0021972:	0f 85 cf 00 00 00    	jne    c0021a47 <SysOpen(regs*)+0x1e9>
c0021978:	83 ec 08             	sub    esp,0x8
c002197b:	68 cf 28 03 c0       	push   0xc00328cf
c0021980:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0021983:	51                   	push   ecx
c0021984:	e8 c7 ed fd ff       	call   c0000750 <strcmp>
c0021989:	83 c4 10             	add    esp,0x10
c002198c:	85 c0                	test   eax,eax
c002198e:	0f 84 b3 00 00 00    	je     c0021a47 <SysOpen(regs*)+0x1e9>
c0021994:	83 ec 08             	sub    esp,0x8
c0021997:	68 ce 28 03 c0       	push   0xc00328ce
c002199c:	56                   	push   esi
c002199d:	e8 74 fe ff ff       	call   c0021816 <string_ends_with(char const*, char const*)>
c00219a2:	83 c4 10             	add    esp,0x10
c00219a5:	85 c0                	test   eax,eax
c00219a7:	0f 85 9a 00 00 00    	jne    c0021a47 <SysOpen(regs*)+0x1e9>
c00219ad:	83 ec 0c             	sub    esp,0xc
c00219b0:	68 14 01 00 00       	push   0x114
c00219b5:	e8 44 49 ff ff       	call   c00162fe <malloc>
c00219ba:	83 c4 0c             	add    esp,0xc
c00219bd:	89 c6                	mov    esi,eax
c00219bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00219c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00219c7:	50                   	push   eax
c00219c8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00219cb:	52                   	push   edx
c00219cc:	56                   	push   esi
c00219cd:	e8 c2 89 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c00219d2:	83 c4 10             	add    esp,0x10
c00219d5:	85 f6                	test   esi,esi
c00219d7:	74 5b                	je     c0021a34 <SysOpen(regs*)+0x1d6>
c00219d9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00219dc:	0f b6 c2             	movzx  eax,dl
c00219df:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00219e2:	89 d0                	mov    eax,edx
c00219e4:	83 e0 01             	and    eax,0x1
c00219e7:	f6 c2 02             	test   dl,0x2
c00219ea:	74 03                	je     c00219ef <SysOpen(regs*)+0x191>
c00219ec:	83 c8 02             	or     eax,0x2
c00219ef:	f6 c2 04             	test   dl,0x4
c00219f2:	74 03                	je     c00219f7 <SysOpen(regs*)+0x199>
c00219f4:	83 c8 04             	or     eax,0x4
c00219f7:	f6 c2 08             	test   dl,0x8
c00219fa:	74 03                	je     c00219ff <SysOpen(regs*)+0x1a1>
c00219fc:	83 c8 0a             	or     eax,0xa
c00219ff:	80 e2 10             	and    dl,0x10
c0021a02:	74 03                	je     c0021a07 <SysOpen(regs*)+0x1a9>
c0021a04:	83 c8 12             	or     eax,0x12
c0021a07:	83 ec 08             	sub    esp,0x8
c0021a0a:	50                   	push   eax
c0021a0b:	56                   	push   esi
c0021a0c:	e8 a1 89 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c0021a11:	83 c4 10             	add    esp,0x10
c0021a14:	85 c0                	test   eax,eax
c0021a16:	75 1c                	jne    c0021a34 <SysOpen(regs*)+0x1d6>
c0021a18:	83 ec 0c             	sub    esp,0xc
c0021a1b:	56                   	push   esi
c0021a1c:	e8 dd 5f ff ff       	call   c00179fe <UnixFile::getFileDescriptor()>
c0021a21:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0021a24:	83 c4 10             	add    esp,0x10
c0021a27:	89 02                	mov    DWORD PTR [edx],eax
c0021a29:	c1 f8 1f             	sar    eax,0x1f
c0021a2c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0021a2f:	e9 ba fe ff ff       	jmp    c00218ee <SysOpen(regs*)+0x90>
c0021a34:	81 c4 04 01 00 00    	add    esp,0x104
c0021a3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021a3f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0021a44:	5b                   	pop    ebx
c0021a45:	5e                   	pop    esi
c0021a46:	c3                   	ret    
c0021a47:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0021a4a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0021a50:	e9 92 fe ff ff       	jmp    c00218e7 <SysOpen(regs*)+0x89>

c0021a55 <KeSystemCall(regs*, void*)>:
c0021a55:	53                   	push   ebx
c0021a56:	83 ec 08             	sub    esp,0x8
c0021a59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021a5d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0021a60:	83 f8 3e             	cmp    eax,0x3e
c0021a63:	77 16                	ja     c0021a7b <KeSystemCall(regs*, void*)+0x26>
c0021a65:	8b 14 85 20 41 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcbee0]
c0021a6c:	85 d2                	test   edx,edx
c0021a6e:	74 0b                	je     c0021a7b <KeSystemCall(regs*, void*)+0x26>
c0021a70:	83 ec 0c             	sub    esp,0xc
c0021a73:	53                   	push   ebx
c0021a74:	ff d2                	call   edx
c0021a76:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0021a79:	eb 0d                	jmp    c0021a88 <KeSystemCall(regs*, void*)+0x33>
c0021a7b:	52                   	push   edx
c0021a7c:	52                   	push   edx
c0021a7d:	50                   	push   eax
c0021a7e:	68 d8 28 03 c0       	push   0xc00328d8
c0021a83:	e8 05 77 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0021a88:	83 c4 10             	add    esp,0x10
c0021a8b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0021a90:	31 d2                	xor    edx,edx
c0021a92:	83 c4 08             	add    esp,0x8
c0021a95:	5b                   	pop    ebx
c0021a96:	c3                   	ret    
c0021a97:	90                   	nop

c0021a98 <KeSwitchEndian16(unsigned short)>:
c0021a98:	83 ec 04             	sub    esp,0x4
c0021a9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a9f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0021aa3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021aa7:	c1 f8 08             	sar    eax,0x8
c0021aaa:	89 c2                	mov    edx,eax
c0021aac:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0021ab0:	c1 e0 08             	shl    eax,0x8
c0021ab3:	09 d0                	or     eax,edx
c0021ab5:	83 c4 04             	add    esp,0x4
c0021ab8:	c3                   	ret    
c0021ab9:	8d 76 00             	lea    esi,[esi+0x0]

c0021abc <KeSwitchEndian32(unsigned int)>:
c0021abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ac0:	c1 e8 18             	shr    eax,0x18
c0021ac3:	89 c2                	mov    edx,eax
c0021ac5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ac9:	c1 e0 08             	shl    eax,0x8
c0021acc:	25 00 00 ff 00       	and    eax,0xff0000
c0021ad1:	09 c2                	or     edx,eax
c0021ad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ad7:	c1 e8 08             	shr    eax,0x8
c0021ada:	25 00 ff 00 00       	and    eax,0xff00
c0021adf:	09 c2                	or     edx,eax
c0021ae1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ae5:	c1 e0 18             	shl    eax,0x18
c0021ae8:	09 d0                	or     eax,edx
c0021aea:	c3                   	ret    
c0021aeb:	90                   	nop

c0021aec <EthernetCRC32(unsigned char*, int)>:
c0021aec:	83 ec 10             	sub    esp,0x10
c0021aef:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021af4:	75 0a                	jne    c0021b00 <EthernetCRC32(unsigned char*, int)+0x14>
c0021af6:	b8 00 00 00 00       	mov    eax,0x0
c0021afb:	e9 8c 00 00 00       	jmp    c0021b8c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021b00:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0021b05:	7f 09                	jg     c0021b10 <EthernetCRC32(unsigned char*, int)+0x24>
c0021b07:	b8 00 00 00 00       	mov    eax,0x0
c0021b0c:	eb 7e                	jmp    c0021b8c <EthernetCRC32(unsigned char*, int)+0xa0>
c0021b0e:	66 90                	xchg   ax,ax
c0021b10:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0021b18:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021b20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b24:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0021b28:	7d 5a                	jge    c0021b84 <EthernetCRC32(unsigned char*, int)+0x98>
c0021b2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021b2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021b32:	01 d0                	add    eax,edx
c0021b34:	8a 00                	mov    al,BYTE PTR [eax]
c0021b36:	0f b6 c0             	movzx  eax,al
c0021b39:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0021b3d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b45:	8d 76 00             	lea    esi,[esi+0x0]
c0021b48:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0021b4d:	7f 2d                	jg     c0021b7c <EthernetCRC32(unsigned char*, int)+0x90>
c0021b4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b53:	83 e0 01             	and    eax,0x1
c0021b56:	74 10                	je     c0021b68 <EthernetCRC32(unsigned char*, int)+0x7c>
c0021b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b5c:	d1 e8                	shr    eax,1
c0021b5e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0021b63:	eb 0b                	jmp    c0021b70 <EthernetCRC32(unsigned char*, int)+0x84>
c0021b65:	8d 76 00             	lea    esi,[esi+0x0]
c0021b68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b6c:	d1 e8                	shr    eax,1
c0021b6e:	66 90                	xchg   ax,ax
c0021b70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021b74:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0021b79:	eb cd                	jmp    c0021b48 <EthernetCRC32(unsigned char*, int)+0x5c>
c0021b7b:	90                   	nop
c0021b7c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0021b81:	eb 9d                	jmp    c0021b20 <EthernetCRC32(unsigned char*, int)+0x34>
c0021b83:	90                   	nop
c0021b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b88:	f7 d0                	not    eax
c0021b8a:	66 90                	xchg   ax,ax
c0021b8c:	83 c4 10             	add    esp,0x10
c0021b8f:	c3                   	ret    

c0021b90 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0021b90:	83 ec 2c             	sub    esp,0x2c
c0021b93:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021b97:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0021b9c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021ba0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021ba4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021ba8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021bab:	0f b7 c0             	movzx  eax,ax
c0021bae:	3d 06 08 00 00       	cmp    eax,0x806
c0021bb3:	75 13                	jne    c0021bc8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0021bb5:	83 ec 0c             	sub    esp,0xc
c0021bb8:	68 ec 28 03 c0       	push   0xc00328ec
c0021bbd:	e8 cb 75 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0021bc2:	83 c4 10             	add    esp,0x10
c0021bc5:	eb 25                	jmp    c0021bec <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021bc7:	90                   	nop
c0021bc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021bcc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021bcf:	0f b7 c0             	movzx  eax,ax
c0021bd2:	3d 00 08 00 00       	cmp    eax,0x800
c0021bd7:	75 13                	jne    c0021bec <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0021bd9:	83 ec 0c             	sub    esp,0xc
c0021bdc:	68 02 29 03 c0       	push   0xc0032902
c0021be1:	e8 a7 75 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0021be6:	83 c4 10             	add    esp,0x10
c0021be9:	8d 76 00             	lea    esi,[esi+0x0]
c0021bec:	90                   	nop
c0021bed:	83 c4 2c             	add    esp,0x2c
c0021bf0:	c3                   	ret    
c0021bf1:	66 90                	xchg   ax,ax
c0021bf3:	90                   	nop

c0021bf4 <KeNetCreateSemaphore>:
c0021bf4:	53                   	push   ebx
c0021bf5:	83 ec 18             	sub    esp,0x18
c0021bf8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0021c00:	83 ec 0c             	sub    esp,0xc
c0021c03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021c07:	e8 f2 46 ff ff       	call   c00162fe <malloc>
c0021c0c:	83 c4 10             	add    esp,0x10
c0021c0f:	89 c3                	mov    ebx,eax
c0021c11:	83 ec 08             	sub    esp,0x8
c0021c14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021c18:	53                   	push   ebx
c0021c19:	e8 32 e9 ff ff       	call   c0020550 <Semaphore::Semaphore(int)>
c0021c1e:	83 c4 10             	add    esp,0x10
c0021c21:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021c25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021c29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021c2d:	89 10                	mov    DWORD PTR [eax],edx
c0021c2f:	90                   	nop
c0021c30:	83 c4 18             	add    esp,0x18
c0021c33:	5b                   	pop    ebx
c0021c34:	c3                   	ret    
c0021c35:	8d 76 00             	lea    esi,[esi+0x0]

c0021c38 <KeNetFreeSemaphore>:
c0021c38:	83 ec 0c             	sub    esp,0xc
c0021c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c41:	83 ec 08             	sub    esp,0x8
c0021c44:	6a 10                	push   0x10
c0021c46:	50                   	push   eax
c0021c47:	e8 14 74 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c0021c4c:	83 c4 10             	add    esp,0x10
c0021c4f:	90                   	nop
c0021c50:	83 c4 0c             	add    esp,0xc
c0021c53:	c3                   	ret    

c0021c54 <KeNetSignalSemaphore>:
c0021c54:	83 ec 0c             	sub    esp,0xc
c0021c57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c5d:	83 ec 0c             	sub    esp,0xc
c0021c60:	50                   	push   eax
c0021c61:	e8 4a ec ff ff       	call   c00208b0 <Semaphore::release()>
c0021c66:	83 c4 10             	add    esp,0x10
c0021c69:	90                   	nop
c0021c6a:	83 c4 0c             	add    esp,0xc
c0021c6d:	c3                   	ret    
c0021c6e:	66 90                	xchg   ax,ax

c0021c70 <KeNetWaitSemaphore>:
c0021c70:	83 ec 0c             	sub    esp,0xc
c0021c73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c77:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c79:	83 ec 08             	sub    esp,0x8
c0021c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c80:	50                   	push   eax
c0021c81:	e8 66 ea ff ff       	call   c00206ec <Semaphore::acquire(int)>
c0021c86:	83 c4 10             	add    esp,0x10
c0021c89:	83 c4 0c             	add    esp,0xc
c0021c8c:	c3                   	ret    
c0021c8d:	8d 76 00             	lea    esi,[esi+0x0]

c0021c90 <KeNetCreateThread>:
c0021c90:	83 ec 0c             	sub    esp,0xc
c0021c93:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0021c98:	68 80 00 00 00       	push   0x80
c0021c9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021ca1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021ca5:	50                   	push   eax
c0021ca6:	e8 89 32 00 00       	call   c0024f34 <Process::createThread(void (*)(void*), void*, int)>
c0021cab:	83 c4 10             	add    esp,0x10
c0021cae:	90                   	nop
c0021caf:	83 c4 0c             	add    esp,0xc
c0021cb2:	c3                   	ret    

c0021cb3 <CmOpen(char const*)>:
c0021cb3:	57                   	push   edi
c0021cb4:	56                   	push   esi
c0021cb5:	53                   	push   ebx
c0021cb6:	83 ec 1c             	sub    esp,0x1c
c0021cb9:	6a 30                	push   0x30
c0021cbb:	e8 3e 46 ff ff       	call   c00162fe <malloc>
c0021cc0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0021cc7:	89 c3                	mov    ebx,eax
c0021cc9:	e8 30 46 ff ff       	call   c00162fe <malloc>
c0021cce:	83 c4 0c             	add    esp,0xc
c0021cd1:	89 c6                	mov    esi,eax
c0021cd3:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0021cd9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021cdd:	50                   	push   eax
c0021cde:	e8 b1 86 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c0021ce3:	83 c4 0c             	add    esp,0xc
c0021ce6:	89 33                	mov    DWORD PTR [ebx],esi
c0021ce8:	8d 44 24 07          	lea    eax,[esp+0x7]
c0021cec:	50                   	push   eax
c0021ced:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021cf1:	50                   	push   eax
c0021cf2:	56                   	push   esi
c0021cf3:	e8 bc 89 ff ff       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c0021cf8:	5a                   	pop    edx
c0021cf9:	59                   	pop    ecx
c0021cfa:	6a 01                	push   0x1
c0021cfc:	ff 33                	push   DWORD PTR [ebx]
c0021cfe:	e8 af 86 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c0021d03:	5e                   	pop    esi
c0021d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021d08:	e8 f1 45 ff ff       	call   c00162fe <malloc>
c0021d0d:	5a                   	pop    edx
c0021d0e:	89 c7                	mov    edi,eax
c0021d10:	8d 74 24 10          	lea    esi,[esp+0x10]
c0021d14:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d16:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d18:	56                   	push   esi
c0021d19:	57                   	push   edi
c0021d1a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d1e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d22:	50                   	push   eax
c0021d23:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021d26:	83 c4 14             	add    esp,0x14
c0021d29:	ff 33                	push   DWORD PTR [ebx]
c0021d2b:	e8 e0 86 ff ff       	call   c001a410 <File::close()>
c0021d30:	59                   	pop    ecx
c0021d31:	58                   	pop    eax
c0021d32:	6a 13                	push   0x13
c0021d34:	ff 33                	push   DWORD PTR [ebx]
c0021d36:	e8 77 86 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c0021d3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d3f:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d42:	57                   	push   edi
c0021d43:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d47:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021d4b:	50                   	push   eax
c0021d4c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021d4f:	83 c4 14             	add    esp,0x14
c0021d52:	57                   	push   edi
c0021d53:	e8 b6 45 ff ff       	call   c001630e <free>
c0021d58:	83 c4 10             	add    esp,0x10
c0021d5b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0021d5e:	75 10                	jne    c0021d70 <CmOpen(char const*)+0xbd>
c0021d60:	83 ec 0c             	sub    esp,0xc
c0021d63:	68 17 29 03 c0       	push   0xc0032917
c0021d68:	e8 39 e4 ff ff       	call   c00201a6 <KePanic(char const*)>
c0021d6d:	83 c4 10             	add    esp,0x10
c0021d70:	8d 7b 05             	lea    edi,[ebx+0x5]
c0021d73:	50                   	push   eax
c0021d74:	6a 00                	push   0x0
c0021d76:	6a 00                	push   0x0
c0021d78:	ff 33                	push   DWORD PTR [ebx]
c0021d7a:	e8 f1 86 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0021d7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021d81:	8b 10                	mov    edx,DWORD PTR [eax]
c0021d83:	89 34 24             	mov    DWORD PTR [esp],esi
c0021d86:	57                   	push   edi
c0021d87:	6a 00                	push   0x0
c0021d89:	6a 2b                	push   0x2b
c0021d8b:	50                   	push   eax
c0021d8c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021d8f:	83 c4 1c             	add    esp,0x1c
c0021d92:	6a 00                	push   0x0
c0021d94:	6a 00                	push   0x0
c0021d96:	ff 33                	push   DWORD PTR [ebx]
c0021d98:	e8 d3 86 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0021d9d:	83 c4 0c             	add    esp,0xc
c0021da0:	6a 08                	push   0x8
c0021da2:	68 28 29 03 c0       	push   0xc0032928
c0021da7:	57                   	push   edi
c0021da8:	e8 d3 e5 fd ff       	call   c0000380 <memcmp>
c0021dad:	83 c4 10             	add    esp,0x10
c0021db0:	85 c0                	test   eax,eax
c0021db2:	74 10                	je     c0021dc4 <CmOpen(char const*)+0x111>
c0021db4:	83 ec 0c             	sub    esp,0xc
c0021db7:	68 31 29 03 c0       	push   0xc0032931
c0021dbc:	e8 e5 e3 ff ff       	call   c00201a6 <KePanic(char const*)>
c0021dc1:	83 c4 10             	add    esp,0x10
c0021dc4:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0021dc8:	89 d8                	mov    eax,ebx
c0021dca:	83 c4 10             	add    esp,0x10
c0021dcd:	5b                   	pop    ebx
c0021dce:	5e                   	pop    esi
c0021dcf:	5f                   	pop    edi
c0021dd0:	c3                   	ret    

c0021dd1 <CmClose(Reghive_Tag*)>:
c0021dd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dd5:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021dd9:	74 0b                	je     c0021de6 <CmClose(Reghive_Tag*)+0x15>
c0021ddb:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ddd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021de1:	e9 2a 86 ff ff       	jmp    c001a410 <File::close()>
c0021de6:	c3                   	ret    

c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0021de7:	53                   	push   ebx
c0021de8:	83 ec 18             	sub    esp,0x18
c0021deb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021def:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021df3:	74 29                	je     c0021e1e <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021df5:	50                   	push   eax
c0021df6:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021dfb:	99                   	cdq    
c0021dfc:	52                   	push   edx
c0021dfd:	50                   	push   eax
c0021dfe:	ff 33                	push   DWORD PTR [ebx]
c0021e00:	e8 6b 86 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0021e05:	5a                   	pop    edx
c0021e06:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021e08:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021e0c:	8b 10                	mov    edx,DWORD PTR [eax]
c0021e0e:	51                   	push   ecx
c0021e0f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021e13:	6a 00                	push   0x0
c0021e15:	6a 2b                	push   0x2b
c0021e17:	50                   	push   eax
c0021e18:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0021e1b:	83 c4 20             	add    esp,0x20
c0021e1e:	83 c4 18             	add    esp,0x18
c0021e21:	5b                   	pop    ebx
c0021e22:	c3                   	ret    

c0021e23 <CmGetString(Reghive_Tag*, int, char*)>:
c0021e23:	55                   	push   ebp
c0021e24:	57                   	push   edi
c0021e25:	56                   	push   esi
c0021e26:	53                   	push   ebx
c0021e27:	31 db                	xor    ebx,ebx
c0021e29:	83 ec 70             	sub    esp,0x70
c0021e2c:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0021e33:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0021e37:	50                   	push   eax
c0021e38:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e3f:	55                   	push   ebp
c0021e40:	e8 a2 ff ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e45:	83 c4 10             	add    esp,0x10
c0021e48:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0021e4d:	c1 e0 08             	shl    eax,0x8
c0021e50:	89 c2                	mov    edx,eax
c0021e52:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0021e57:	09 d0                	or     eax,edx
c0021e59:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0021e5e:	c1 e0 08             	shl    eax,0x8
c0021e61:	09 d0                	or     eax,edx
c0021e63:	74 25                	je     c0021e8a <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0021e65:	6b fb 0d             	imul   edi,ebx,0xd
c0021e68:	52                   	push   edx
c0021e69:	8d 54 24 39          	lea    edx,[esp+0x39]
c0021e6d:	52                   	push   edx
c0021e6e:	50                   	push   eax
c0021e6f:	55                   	push   ebp
c0021e70:	e8 72 ff ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021e75:	8d 74 24 49          	lea    esi,[esp+0x49]
c0021e79:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0021e80:	b9 27 00 00 00       	mov    ecx,0x27
c0021e85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e87:	83 c4 10             	add    esp,0x10
c0021e8a:	83 c3 03             	add    ebx,0x3
c0021e8d:	83 fb 15             	cmp    ebx,0x15
c0021e90:	75 b6                	jne    c0021e48 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0021e92:	83 c4 6c             	add    esp,0x6c
c0021e95:	5b                   	pop    ebx
c0021e96:	5e                   	pop    esi
c0021e97:	5f                   	pop    edi
c0021e98:	5d                   	pop    ebp
c0021e99:	c3                   	ret    

c0021e9a <CmEnterDirectory(Reghive_Tag*, int)>:
c0021e9a:	83 ec 40             	sub    esp,0x40
c0021e9d:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021ea1:	50                   	push   eax
c0021ea2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ea6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021eaa:	e8 38 ff ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021eaf:	83 c4 10             	add    esp,0x10
c0021eb2:	83 c8 ff             	or     eax,0xffffffff
c0021eb5:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0021eba:	75 19                	jne    c0021ed5 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0021ebc:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0021ec1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0021ec6:	c1 e0 08             	shl    eax,0x8
c0021ec9:	09 c2                	or     edx,eax
c0021ecb:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0021ed0:	c1 e0 10             	shl    eax,0x10
c0021ed3:	09 d0                	or     eax,edx
c0021ed5:	83 c4 3c             	add    esp,0x3c
c0021ed8:	c3                   	ret    

c0021ed9 <CmGetNext(Reghive_Tag*, int)>:
c0021ed9:	83 ec 40             	sub    esp,0x40
c0021edc:	8d 44 24 09          	lea    eax,[esp+0x9]
c0021ee0:	50                   	push   eax
c0021ee1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ee5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021ee9:	e8 f9 fe ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0021eee:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0021ef3:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0021ef8:	c1 e0 08             	shl    eax,0x8
c0021efb:	09 c2                	or     edx,eax
c0021efd:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0021f02:	83 c4 4c             	add    esp,0x4c
c0021f05:	c1 e0 10             	shl    eax,0x10
c0021f08:	09 d0                	or     eax,edx
c0021f0a:	c3                   	ret    

c0021f0b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0021f0b:	53                   	push   ebx
c0021f0c:	83 ec 18             	sub    esp,0x18
c0021f0f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021f13:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021f17:	74 29                	je     c0021f42 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0021f19:	50                   	push   eax
c0021f1a:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0021f1f:	99                   	cdq    
c0021f20:	52                   	push   edx
c0021f21:	50                   	push   eax
c0021f22:	ff 33                	push   DWORD PTR [ebx]
c0021f24:	e8 47 85 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0021f29:	5a                   	pop    edx
c0021f2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021f2c:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0021f30:	8b 10                	mov    edx,DWORD PTR [eax]
c0021f32:	51                   	push   ecx
c0021f33:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0021f37:	6a 00                	push   0x0
c0021f39:	6a 2b                	push   0x2b
c0021f3b:	50                   	push   eax
c0021f3c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021f3f:	83 c4 20             	add    esp,0x20
c0021f42:	83 c4 18             	add    esp,0x18
c0021f45:	5b                   	pop    ebx
c0021f46:	c3                   	ret    

c0021f47 <CmFreeExtent(Reghive_Tag*, int)>:
c0021f47:	53                   	push   ebx
c0021f48:	83 ec 3c             	sub    esp,0x3c
c0021f4b:	6a 2b                	push   0x2b
c0021f4d:	6a 00                	push   0x0
c0021f4f:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0021f53:	53                   	push   ebx
c0021f54:	e8 97 e5 fd ff       	call   c00004f0 <memset>
c0021f59:	83 c4 0c             	add    esp,0xc
c0021f5c:	53                   	push   ebx
c0021f5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021f65:	e8 a1 ff ff ff       	call   c0021f0b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021f6a:	83 c4 48             	add    esp,0x48
c0021f6d:	5b                   	pop    ebx
c0021f6e:	c3                   	ret    

c0021f6f <CmUpdateHeader(Reghive_Tag*)>:
c0021f6f:	83 ec 0c             	sub    esp,0xc
c0021f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f76:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0021f7a:	74 10                	je     c0021f8c <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0021f7c:	52                   	push   edx
c0021f7d:	8d 50 05             	lea    edx,[eax+0x5]
c0021f80:	52                   	push   edx
c0021f81:	6a 00                	push   0x0
c0021f83:	50                   	push   eax
c0021f84:	e8 82 ff ff ff       	call   c0021f0b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0021f89:	83 c4 10             	add    esp,0x10
c0021f8c:	83 c4 0c             	add    esp,0xc
c0021f8f:	c3                   	ret    

c0021f90 <CmExpand(Reghive_Tag*, int)>:
c0021f90:	57                   	push   edi
c0021f91:	56                   	push   esi
c0021f92:	83 ce ff             	or     esi,0xffffffff
c0021f95:	53                   	push   ebx
c0021f96:	83 ec 30             	sub    esp,0x30
c0021f99:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0021f9d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0021fa1:	74 5f                	je     c0022002 <CmExpand(Reghive_Tag*, int)+0x72>
c0021fa3:	31 d2                	xor    edx,edx
c0021fa5:	31 f6                	xor    esi,esi
c0021fa7:	50                   	push   eax
c0021fa8:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0021fac:	52                   	push   edx
c0021fad:	50                   	push   eax
c0021fae:	ff 33                	push   DWORD PTR [ebx]
c0021fb0:	e8 bb 84 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0021fb5:	83 c4 0c             	add    esp,0xc
c0021fb8:	6a 2b                	push   0x2b
c0021fba:	6a 00                	push   0x0
c0021fbc:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0021fc0:	57                   	push   edi
c0021fc1:	e8 2a e5 fd ff       	call   c00004f0 <memset>
c0021fc6:	83 c4 10             	add    esp,0x10
c0021fc9:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0021fcd:	7d 1b                	jge    c0021fea <CmExpand(Reghive_Tag*, int)+0x5a>
c0021fcf:	83 ec 0c             	sub    esp,0xc
c0021fd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0021fd4:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0021fd8:	8b 10                	mov    edx,DWORD PTR [eax]
c0021fda:	46                   	inc    esi
c0021fdb:	51                   	push   ecx
c0021fdc:	57                   	push   edi
c0021fdd:	6a 00                	push   0x0
c0021fdf:	6a 2b                	push   0x2b
c0021fe1:	50                   	push   eax
c0021fe2:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0021fe5:	83 c4 20             	add    esp,0x20
c0021fe8:	eb df                	jmp    c0021fc9 <CmExpand(Reghive_Tag*, int)+0x39>
c0021fea:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0021fee:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0021ff1:	83 ec 0c             	sub    esp,0xc
c0021ff4:	01 f2                	add    edx,esi
c0021ff6:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0021ff9:	53                   	push   ebx
c0021ffa:	e8 70 ff ff ff       	call   c0021f6f <CmUpdateHeader(Reghive_Tag*)>
c0021fff:	83 c4 10             	add    esp,0x10
c0022002:	83 c4 30             	add    esp,0x30
c0022005:	89 f0                	mov    eax,esi
c0022007:	5b                   	pop    ebx
c0022008:	5e                   	pop    esi
c0022009:	5f                   	pop    edi
c002200a:	c3                   	ret    

c002200b <CmFindUnusedExtent(Reghive_Tag*)>:
c002200b:	55                   	push   ebp
c002200c:	57                   	push   edi
c002200d:	56                   	push   esi
c002200e:	53                   	push   ebx
c002200f:	83 cb ff             	or     ebx,0xffffffff
c0022012:	83 ec 1c             	sub    esp,0x1c
c0022015:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0022019:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c002201d:	74 68                	je     c0022087 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c002201f:	be 2b 00 00 00       	mov    esi,0x2b
c0022024:	51                   	push   ecx
c0022025:	31 ff                	xor    edi,edi
c0022027:	6a 00                	push   0x0
c0022029:	31 db                	xor    ebx,ebx
c002202b:	6a 00                	push   0x0
c002202d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022030:	e8 3b 84 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0022035:	83 c4 10             	add    esp,0x10
c0022038:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c002203b:	76 3b                	jbe    c0022078 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c002203d:	83 ec 0c             	sub    esp,0xc
c0022040:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022043:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0022047:	8b 10                	mov    edx,DWORD PTR [eax]
c0022049:	51                   	push   ecx
c002204a:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c002204e:	51                   	push   ecx
c002204f:	6a 00                	push   0x0
c0022051:	6a 01                	push   0x1
c0022053:	50                   	push   eax
c0022054:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0022057:	83 c4 20             	add    esp,0x20
c002205a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002205f:	74 26                	je     c0022087 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0022061:	43                   	inc    ebx
c0022062:	52                   	push   edx
c0022063:	57                   	push   edi
c0022064:	56                   	push   esi
c0022065:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0022068:	e8 03 84 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c002206d:	83 c6 2b             	add    esi,0x2b
c0022070:	83 d7 00             	adc    edi,0x0
c0022073:	83 c4 10             	add    esp,0x10
c0022076:	eb c0                	jmp    c0022038 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0022078:	50                   	push   eax
c0022079:	50                   	push   eax
c002207a:	6a 40                	push   0x40
c002207c:	55                   	push   ebp
c002207d:	e8 0e ff ff ff       	call   c0021f90 <CmExpand(Reghive_Tag*, int)>
c0022082:	83 c4 10             	add    esp,0x10
c0022085:	89 c3                	mov    ebx,eax
c0022087:	83 c4 1c             	add    esp,0x1c
c002208a:	89 d8                	mov    eax,ebx
c002208c:	5b                   	pop    ebx
c002208d:	5e                   	pop    esi
c002208e:	5f                   	pop    edi
c002208f:	5d                   	pop    ebp
c0022090:	c3                   	ret    

c0022091 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0022091:	55                   	push   ebp
c0022092:	57                   	push   edi
c0022093:	56                   	push   esi
c0022094:	53                   	push   ebx
c0022095:	81 ec 88 00 00 00    	sub    esp,0x88
c002209b:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c00220a2:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00220a9:	e8 5d ff ff ff       	call   c002200b <CmFindUnusedExtent(Reghive_Tag*)>
c00220ae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00220b2:	83 c4 0c             	add    esp,0xc
c00220b5:	6a 2b                	push   0x2b
c00220b7:	6a 00                	push   0x0
c00220b9:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c00220bd:	55                   	push   ebp
c00220be:	e8 2d e4 fd ff       	call   c00004f0 <memset>
c00220c3:	83 c4 10             	add    esp,0x10
c00220c6:	85 db                	test   ebx,ebx
c00220c8:	74 12                	je     c00220dc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c00220ca:	51                   	push   ecx
c00220cb:	55                   	push   ebp
c00220cc:	53                   	push   ebx
c00220cd:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00220d4:	e8 0e fd ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00220d9:	83 c4 10             	add    esp,0x10
c00220dc:	8d 7c 24 45          	lea    edi,[esp+0x45]
c00220e0:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c00220e7:	b9 2b 00 00 00       	mov    ecx,0x2b
c00220ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00220ee:	85 db                	test   ebx,ebx
c00220f0:	74 49                	je     c002213b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c00220f2:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c00220f7:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c00220fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022100:	c1 e0 08             	shl    eax,0x8
c0022103:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0022109:	09 c8                	or     eax,ecx
c002210b:	74 11                	je     c002211e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c002210d:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0022111:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0022115:	c1 e8 10             	shr    eax,0x10
c0022118:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c002211c:	eb 0f                	jmp    c002212d <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c002211e:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022123:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022128:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002212d:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0022131:	c1 ea 08             	shr    edx,0x8
c0022134:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0022139:	eb 0f                	jmp    c002214a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c002213b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0022140:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0022145:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c002214a:	52                   	push   edx
c002214b:	8d 44 24 49          	lea    eax,[esp+0x49]
c002214f:	50                   	push   eax
c0022150:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022154:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c002215b:	e8 ab fd ff ff       	call   c0021f0b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022160:	83 c4 10             	add    esp,0x10
c0022163:	85 db                	test   ebx,ebx
c0022165:	74 12                	je     c0022179 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0022167:	50                   	push   eax
c0022168:	55                   	push   ebp
c0022169:	53                   	push   ebx
c002216a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022171:	e8 95 fd ff ff       	call   c0021f0b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022176:	83 c4 10             	add    esp,0x10
c0022179:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002217d:	83 c4 7c             	add    esp,0x7c
c0022180:	5b                   	pop    ebx
c0022181:	5e                   	pop    esi
c0022182:	5f                   	pop    edi
c0022183:	5d                   	pop    ebp
c0022184:	c3                   	ret    

c0022185 <CmSetString(Reghive_Tag*, int, char const*)>:
c0022185:	55                   	push   ebp
c0022186:	57                   	push   edi
c0022187:	56                   	push   esi
c0022188:	53                   	push   ebx
c0022189:	bb 27 00 00 00       	mov    ebx,0x27
c002218e:	81 ec 88 00 00 00    	sub    esp,0x88
c0022194:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c002219b:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c00221a2:	e8 c9 e3 fd ff       	call   c0000570 <strlen>
c00221a7:	8d 48 26             	lea    ecx,[eax+0x26]
c00221aa:	89 c8                	mov    eax,ecx
c00221ac:	99                   	cdq    
c00221ad:	f7 fb                	idiv   ebx
c00221af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00221b3:	83 c4 10             	add    esp,0x10
c00221b6:	81 f9 37 01 00 00    	cmp    ecx,0x137
c00221bc:	7e 10                	jle    c00221ce <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c00221be:	83 ec 0c             	sub    esp,0xc
c00221c1:	68 42 29 03 c0       	push   0xc0032942
c00221c6:	e8 db df ff ff       	call   c00201a6 <KePanic(char const*)>
c00221cb:	83 c4 10             	add    esp,0x10
c00221ce:	31 ff                	xor    edi,edi
c00221d0:	50                   	push   eax
c00221d1:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c00221d5:	53                   	push   ebx
c00221d6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00221dd:	56                   	push   esi
c00221de:	e8 04 fc ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00221e3:	83 c4 10             	add    esp,0x10
c00221e6:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c00221ea:	89 d0                	mov    eax,edx
c00221ec:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c00221f0:	c1 e0 08             	shl    eax,0x8
c00221f3:	09 c2                	or     edx,eax
c00221f5:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c00221f9:	c1 e2 08             	shl    edx,0x8
c00221fc:	09 c2                	or     edx,eax
c00221fe:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022202:	7e 76                	jle    c002227a <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0022204:	85 d2                	test   edx,edx
c0022206:	75 25                	jne    c002222d <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0022208:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c002220d:	8d 44 24 45          	lea    eax,[esp+0x45]
c0022211:	50                   	push   eax
c0022212:	6a 00                	push   0x0
c0022214:	6a 00                	push   0x0
c0022216:	56                   	push   esi
c0022217:	e8 75 fe ff ff       	call   c0022091 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c002221c:	83 c4 10             	add    esp,0x10
c002221f:	89 c2                	mov    edx,eax
c0022221:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0022224:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0022227:	c1 f8 10             	sar    eax,0x10
c002222a:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c002222d:	55                   	push   ebp
c002222e:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0022232:	55                   	push   ebp
c0022233:	52                   	push   edx
c0022234:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0022238:	56                   	push   esi
c0022239:	e8 a9 fb ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002223e:	83 c4 0c             	add    esp,0xc
c0022241:	6a 27                	push   0x27
c0022243:	6a 00                	push   0x0
c0022245:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022249:	51                   	push   ecx
c002224a:	e8 a1 e2 fd ff       	call   c00004f0 <memset>
c002224f:	83 c4 0c             	add    esp,0xc
c0022252:	6b c7 27             	imul   eax,edi,0x27
c0022255:	6a 27                	push   0x27
c0022257:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c002225e:	50                   	push   eax
c002225f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0022263:	51                   	push   ecx
c0022264:	e8 17 e4 fd ff       	call   c0000680 <strncpy>
c0022269:	83 c4 0c             	add    esp,0xc
c002226c:	55                   	push   ebp
c002226d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022271:	52                   	push   edx
c0022272:	56                   	push   esi
c0022273:	e8 93 fc ff ff       	call   c0021f0b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022278:	eb 19                	jmp    c0022293 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c002227a:	85 d2                	test   edx,edx
c002227c:	74 18                	je     c0022296 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c002227e:	51                   	push   ecx
c002227f:	51                   	push   ecx
c0022280:	52                   	push   edx
c0022281:	56                   	push   esi
c0022282:	e8 c0 fc ff ff       	call   c0021f47 <CmFreeExtent(Reghive_Tag*, int)>
c0022287:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c002228b:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c002228f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022293:	83 c4 10             	add    esp,0x10
c0022296:	47                   	inc    edi
c0022297:	83 c3 03             	add    ebx,0x3
c002229a:	83 ff 07             	cmp    edi,0x7
c002229d:	0f 85 43 ff ff ff    	jne    c00221e6 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c00222a3:	50                   	push   eax
c00222a4:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c00222a8:	50                   	push   eax
c00222a9:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00222b0:	56                   	push   esi
c00222b1:	e8 55 fc ff ff       	call   c0021f0b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00222b6:	81 c4 8c 00 00 00    	add    esp,0x8c
c00222bc:	5b                   	pop    ebx
c00222bd:	5e                   	pop    esi
c00222be:	5f                   	pop    edi
c00222bf:	5d                   	pop    ebp
c00222c0:	c3                   	ret    

c00222c1 <CmGetMatch(char*, char*, bool, bool*)>:
c00222c1:	56                   	push   esi
c00222c2:	53                   	push   ebx
c00222c3:	50                   	push   eax
c00222c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00222c8:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00222cd:	74 25                	je     c00222f4 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c00222cf:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00222d2:	31 db                	xor    ebx,ebx
c00222d4:	50                   	push   eax
c00222d5:	50                   	push   eax
c00222d6:	8d 04 9d 20 42 03 c0 	lea    eax,[ebx*4-0x3ffcbde0]
c00222dd:	50                   	push   eax
c00222de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00222e2:	e8 69 e4 fd ff       	call   c0000750 <strcmp>
c00222e7:	83 c4 10             	add    esp,0x10
c00222ea:	85 c0                	test   eax,eax
c00222ec:	74 2e                	je     c002231c <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c00222ee:	43                   	inc    ebx
c00222ef:	83 fb 3f             	cmp    ebx,0x3f
c00222f2:	75 e0                	jne    c00222d4 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c00222f4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00222f7:	31 db                	xor    ebx,ebx
c00222f9:	8d 04 9d 20 42 03 c0 	lea    eax,[ebx*4-0x3ffcbde0]
c0022300:	51                   	push   ecx
c0022301:	51                   	push   ecx
c0022302:	50                   	push   eax
c0022303:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022307:	e8 44 e4 fd ff       	call   c0000750 <strcmp>
c002230c:	83 c4 10             	add    esp,0x10
c002230f:	85 c0                	test   eax,eax
c0022311:	74 09                	je     c002231c <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0022313:	43                   	inc    ebx
c0022314:	83 fb 3f             	cmp    ebx,0x3f
c0022317:	75 e0                	jne    c00222f9 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0022319:	83 cb ff             	or     ebx,0xffffffff
c002231c:	89 d8                	mov    eax,ebx
c002231e:	5a                   	pop    edx
c002231f:	5b                   	pop    ebx
c0022320:	5e                   	pop    esi
c0022321:	c3                   	ret    

c0022322 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0022322:	55                   	push   ebp
c0022323:	31 c0                	xor    eax,eax
c0022325:	57                   	push   edi
c0022326:	56                   	push   esi
c0022327:	53                   	push   ebx
c0022328:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002232c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022330:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0022332:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022336:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0022339:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002233d:	83 fd 1f             	cmp    ebp,0x1f
c0022340:	7f 0b                	jg     c002234d <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0022342:	0f b6 c2             	movzx  eax,dl
c0022345:	d3 e0                	shl    eax,cl
c0022347:	09 07                	or     DWORD PTR [edi],eax
c0022349:	b0 01                	mov    al,0x1
c002234b:	01 33                	add    DWORD PTR [ebx],esi
c002234d:	5b                   	pop    ebx
c002234e:	5e                   	pop    esi
c002234f:	5f                   	pop    edi
c0022350:	5d                   	pop    ebp
c0022351:	c3                   	ret    

c0022352 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0022352:	57                   	push   edi
c0022353:	56                   	push   esi
c0022354:	53                   	push   ebx
c0022355:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0022359:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002235d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022361:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022365:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0022367:	7c 17                	jl     c0022380 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0022369:	8b 17                	mov    edx,DWORD PTR [edi]
c002236b:	b8 01 00 00 00       	mov    eax,0x1
c0022370:	d3 e0                	shl    eax,cl
c0022372:	48                   	dec    eax
c0022373:	21 d0                	and    eax,edx
c0022375:	d3 ea                	shr    edx,cl
c0022377:	89 17                	mov    DWORD PTR [edi],edx
c0022379:	29 0b                	sub    DWORD PTR [ebx],ecx
c002237b:	c6 06 01             	mov    BYTE PTR [esi],0x1
c002237e:	eb 05                	jmp    c0022385 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0022380:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022383:	31 c0                	xor    eax,eax
c0022385:	5b                   	pop    ebx
c0022386:	5e                   	pop    esi
c0022387:	5f                   	pop    edi
c0022388:	c3                   	ret    

c0022389 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0022389:	83 ec 40             	sub    esp,0x40
c002238c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0022390:	50                   	push   eax
c0022391:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022395:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022399:	e8 49 fa ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c002239e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00223a2:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c00223a6:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c00223aa:	89 10                	mov    DWORD PTR [eax],edx
c00223ac:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00223af:	83 c4 4c             	add    esp,0x4c
c00223b2:	c3                   	ret    

c00223b3 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c00223b3:	55                   	push   ebp
c00223b4:	57                   	push   edi
c00223b5:	56                   	push   esi
c00223b6:	53                   	push   ebx
c00223b7:	83 ec 40             	sub    esp,0x40
c00223ba:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c00223be:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00223c2:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c00223c6:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c00223ca:	53                   	push   ebx
c00223cb:	56                   	push   esi
c00223cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00223d0:	e8 12 fa ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00223d5:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c00223d9:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c00223dd:	83 c4 0c             	add    esp,0xc
c00223e0:	53                   	push   ebx
c00223e1:	56                   	push   esi
c00223e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00223e6:	e8 20 fb ff ff       	call   c0021f0b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00223eb:	83 c4 4c             	add    esp,0x4c
c00223ee:	5b                   	pop    ebx
c00223ef:	5e                   	pop    esi
c00223f0:	5f                   	pop    edi
c00223f1:	5d                   	pop    ebp
c00223f2:	c3                   	ret    

c00223f3 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c00223f3:	55                   	push   ebp
c00223f4:	57                   	push   edi
c00223f5:	56                   	push   esi
c00223f6:	31 f6                	xor    esi,esi
c00223f8:	53                   	push   ebx
c00223f9:	31 db                	xor    ebx,ebx
c00223fb:	83 ec 40             	sub    esp,0x40
c00223fe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0022406:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002240e:	6a 12                	push   0x12
c0022410:	68 ee 00 00 00       	push   0xee
c0022415:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022419:	e8 d2 e0 fd ff       	call   c00004f0 <memset>
c002241e:	83 c4 10             	add    esp,0x10
c0022421:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0022425:	6a 08                	push   0x8
c0022427:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002242b:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c002242f:	50                   	push   eax
c0022430:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022434:	55                   	push   ebp
c0022435:	57                   	push   edi
c0022436:	e8 e7 fe ff ff       	call   c0022322 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c002243b:	83 c4 10             	add    esp,0x10
c002243e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022442:	50                   	push   eax
c0022443:	6a 06                	push   0x6
c0022445:	55                   	push   ebp
c0022446:	57                   	push   edi
c0022447:	e8 06 ff ff ff       	call   c0022352 <CmGetShift(unsigned int*, int*, int, bool*)>
c002244c:	83 c4 10             	add    esp,0x10
c002244f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0022454:	74 07                	je     c002245d <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0022456:	46                   	inc    esi
c0022457:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c002245b:	eb e1                	jmp    c002243e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c002245d:	43                   	inc    ebx
c002245e:	83 fb 12             	cmp    ebx,0x12
c0022461:	75 c2                	jne    c0022425 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0022463:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0022467:	31 db                	xor    ebx,ebx
c0022469:	c6 00 00             	mov    BYTE PTR [eax],0x0
c002246c:	50                   	push   eax
c002246d:	50                   	push   eax
c002246e:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0022473:	43                   	inc    ebx
c0022474:	8d 04 85 20 42 03 c0 	lea    eax,[eax*4-0x3ffcbde0]
c002247b:	50                   	push   eax
c002247c:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0022480:	e8 bb e3 fd ff       	call   c0000840 <strcat>
c0022485:	83 c4 10             	add    esp,0x10
c0022488:	83 fb 18             	cmp    ebx,0x18
c002248b:	75 df                	jne    c002246c <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c002248d:	83 c4 3c             	add    esp,0x3c
c0022490:	31 c0                	xor    eax,eax
c0022492:	5b                   	pop    ebx
c0022493:	5e                   	pop    esi
c0022494:	5f                   	pop    edi
c0022495:	5d                   	pop    ebp
c0022496:	c3                   	ret    

c0022497 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0022497:	83 ec 40             	sub    esp,0x40
c002249a:	8d 44 24 09          	lea    eax,[esp+0x9]
c002249e:	50                   	push   eax
c002249f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00224a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00224a7:	e8 3b f9 ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00224ac:	58                   	pop    eax
c00224ad:	5a                   	pop    edx
c00224ae:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00224b2:	8d 44 24 15          	lea    eax,[esp+0x15]
c00224b6:	50                   	push   eax
c00224b7:	e8 37 ff ff ff       	call   c00223f3 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c00224bc:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c00224c1:	83 c4 4c             	add    esp,0x4c
c00224c4:	c3                   	ret    

c00224c5 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c00224c5:	55                   	push   ebp
c00224c6:	57                   	push   edi
c00224c7:	56                   	push   esi
c00224c8:	53                   	push   ebx
c00224c9:	31 db                	xor    ebx,ebx
c00224cb:	83 ec 70             	sub    esp,0x70
c00224ce:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c00224d5:	6a 30                	push   0x30
c00224d7:	6a 00                	push   0x0
c00224d9:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c00224dd:	56                   	push   esi
c00224de:	e8 0d e0 fd ff       	call   c00004f0 <memset>
c00224e3:	83 c4 10             	add    esp,0x10
c00224e6:	83 ec 0c             	sub    esp,0xc
c00224e9:	57                   	push   edi
c00224ea:	e8 81 e0 fd ff       	call   c0000570 <strlen>
c00224ef:	83 c4 10             	add    esp,0x10
c00224f2:	39 d8                	cmp    eax,ebx
c00224f4:	76 16                	jbe    c002250c <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c00224f6:	83 ec 0c             	sub    esp,0xc
c00224f9:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00224fd:	50                   	push   eax
c00224fe:	e8 2d e4 fd ff       	call   c0000930 <toupper>
c0022503:	83 c4 10             	add    esp,0x10
c0022506:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022509:	43                   	inc    ebx
c002250a:	eb da                	jmp    c00224e6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c002250c:	31 f6                	xor    esi,esi
c002250e:	52                   	push   edx
c002250f:	31 ff                	xor    edi,edi
c0022511:	6a 18                	push   0x18
c0022513:	6a 3f                	push   0x3f
c0022515:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022519:	50                   	push   eax
c002251a:	e8 d1 df fd ff       	call   c00004f0 <memset>
c002251f:	83 c4 10             	add    esp,0x10
c0022522:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0022526:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c002252a:	84 c0                	test   al,al
c002252c:	0f 84 b0 00 00 00    	je     c00225e2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0022532:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0022536:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c002253b:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c002253f:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0022544:	8d 6e 01             	lea    ebp,[esi+0x1]
c0022547:	83 ec 0c             	sub    esp,0xc
c002254a:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c002254e:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0022552:	53                   	push   ebx
c0022553:	e8 18 e0 fd ff       	call   c0000570 <strlen>
c0022558:	83 c4 10             	add    esp,0x10
c002255b:	85 c0                	test   eax,eax
c002255d:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0022561:	74 0b                	je     c002256e <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0022563:	50                   	push   eax
c0022564:	6a 01                	push   0x1
c0022566:	53                   	push   ebx
c0022567:	8d 44 24 20          	lea    eax,[esp+0x20]
c002256b:	50                   	push   eax
c002256c:	eb 0a                	jmp    c0022578 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c002256e:	50                   	push   eax
c002256f:	6a 00                	push   0x0
c0022571:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022575:	50                   	push   eax
c0022576:	6a 00                	push   0x0
c0022578:	e8 44 fd ff ff       	call   c00222c1 <CmGetMatch(char*, char*, bool, bool*)>
c002257d:	83 c4 10             	add    esp,0x10
c0022580:	83 f8 ff             	cmp    eax,0xffffffff
c0022583:	75 1a                	jne    c002259f <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0022585:	83 ec 0c             	sub    esp,0xc
c0022588:	68 57 29 03 c0       	push   0xc0032957
c002258d:	e8 14 dc ff ff       	call   c00201a6 <KePanic(char const*)>
c0022592:	83 c4 10             	add    esp,0x10
c0022595:	b8 02 00 00 00       	mov    eax,0x2
c002259a:	e9 bc 00 00 00       	jmp    c002265b <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c002259f:	83 ff 18             	cmp    edi,0x18
c00225a2:	75 1a                	jne    c00225be <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c00225a4:	83 ec 0c             	sub    esp,0xc
c00225a7:	68 6c 29 03 c0       	push   0xc003296c
c00225ac:	e8 f5 db ff ff       	call   c00201a6 <KePanic(char const*)>
c00225b1:	83 c4 10             	add    esp,0x10
c00225b4:	b8 01 00 00 00       	mov    eax,0x1
c00225b9:	e9 9d 00 00 00       	jmp    c002265b <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00225be:	47                   	inc    edi
c00225bf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00225c4:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c00225c8:	74 02                	je     c00225cc <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c00225ca:	89 ee                	mov    esi,ebp
c00225cc:	83 ec 0c             	sub    esp,0xc
c00225cf:	53                   	push   ebx
c00225d0:	e8 9b df fd ff       	call   c0000570 <strlen>
c00225d5:	83 c4 10             	add    esp,0x10
c00225d8:	85 c0                	test   eax,eax
c00225da:	74 06                	je     c00225e2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00225dc:	46                   	inc    esi
c00225dd:	e9 40 ff ff ff       	jmp    c0022522 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00225e2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00225ea:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00225f2:	31 f6                	xor    esi,esi
c00225f4:	50                   	push   eax
c00225f5:	31 ff                	xor    edi,edi
c00225f7:	6a 12                	push   0x12
c00225f9:	68 ee 00 00 00       	push   0xee
c00225fe:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022605:	e8 e6 de fd ff       	call   c00004f0 <memset>
c002260a:	83 c4 10             	add    esp,0x10
c002260d:	83 fe 17             	cmp    esi,0x17
c0022610:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0022614:	7e 26                	jle    c002263c <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0022616:	8d 44 24 0f          	lea    eax,[esp+0xf]
c002261a:	50                   	push   eax
c002261b:	6a 08                	push   0x8
c002261d:	55                   	push   ebp
c002261e:	53                   	push   ebx
c002261f:	e8 2e fd ff ff       	call   c0022352 <CmGetShift(unsigned int*, int*, int, bool*)>
c0022624:	83 c4 10             	add    esp,0x10
c0022627:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c002262c:	74 26                	je     c0022654 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c002262e:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0022635:	4e                   	dec    esi
c0022636:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0022639:	47                   	inc    edi
c002263a:	eb 1c                	jmp    c0022658 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c002263c:	6a 06                	push   0x6
c002263e:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0022643:	50                   	push   eax
c0022644:	55                   	push   ebp
c0022645:	53                   	push   ebx
c0022646:	e8 d7 fc ff ff       	call   c0022322 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c002264b:	83 c4 10             	add    esp,0x10
c002264e:	84 c0                	test   al,al
c0022650:	75 06                	jne    c0022658 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0022652:	eb c2                	jmp    c0022616 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0022654:	31 c0                	xor    eax,eax
c0022656:	eb 03                	jmp    c002265b <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0022658:	46                   	inc    esi
c0022659:	eb b2                	jmp    c002260d <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c002265b:	83 c4 6c             	add    esp,0x6c
c002265e:	5b                   	pop    ebx
c002265f:	5e                   	pop    esi
c0022660:	5f                   	pop    edi
c0022661:	5d                   	pop    ebp
c0022662:	c3                   	ret    

c0022663 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0022663:	53                   	push   ebx
c0022664:	83 ec 3c             	sub    esp,0x3c
c0022667:	6a 2b                	push   0x2b
c0022669:	6a 00                	push   0x0
c002266b:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c002266f:	53                   	push   ebx
c0022670:	e8 7b de fd ff       	call   c00004f0 <memset>
c0022675:	58                   	pop    eax
c0022676:	5a                   	pop    edx
c0022677:	8d 44 24 11          	lea    eax,[esp+0x11]
c002267b:	50                   	push   eax
c002267c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022680:	e8 40 fe ff ff       	call   c00224c5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022685:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c002268a:	83 c4 0c             	add    esp,0xc
c002268d:	6a 15                	push   0x15
c002268f:	6a 00                	push   0x0
c0022691:	8d 44 24 27          	lea    eax,[esp+0x27]
c0022695:	50                   	push   eax
c0022696:	e8 55 de fd ff       	call   c00004f0 <memset>
c002269b:	53                   	push   ebx
c002269c:	6a 00                	push   0x0
c002269e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00226a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00226a6:	e8 e6 f9 ff ff       	call   c0022091 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00226ab:	83 c4 58             	add    esp,0x58
c00226ae:	5b                   	pop    ebx
c00226af:	c3                   	ret    

c00226b0 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00226b0:	56                   	push   esi
c00226b1:	53                   	push   ebx
c00226b2:	83 ec 48             	sub    esp,0x48
c00226b5:	6a 12                	push   0x12
c00226b7:	68 ff 00 00 00       	push   0xff
c00226bc:	8d 74 24 0f          	lea    esi,[esp+0xf]
c00226c0:	56                   	push   esi
c00226c1:	e8 2a de fd ff       	call   c00004f0 <memset>
c00226c6:	5a                   	pop    edx
c00226c7:	59                   	pop    ecx
c00226c8:	56                   	push   esi
c00226c9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00226cd:	e8 f3 fd ff ff       	call   c00224c5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00226d2:	83 c4 10             	add    esp,0x10
c00226d5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00226d9:	85 db                	test   ebx,ebx
c00226db:	74 42                	je     c002271f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c00226dd:	50                   	push   eax
c00226de:	8d 44 24 19          	lea    eax,[esp+0x19]
c00226e2:	50                   	push   eax
c00226e3:	53                   	push   ebx
c00226e4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00226e8:	e8 fa f6 ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00226ed:	83 c4 0c             	add    esp,0xc
c00226f0:	6a 12                	push   0x12
c00226f2:	8d 44 24 21          	lea    eax,[esp+0x21]
c00226f6:	50                   	push   eax
c00226f7:	56                   	push   esi
c00226f8:	e8 83 dc fd ff       	call   c0000380 <memcmp>
c00226fd:	83 c4 10             	add    esp,0x10
c0022700:	85 c0                	test   eax,eax
c0022702:	74 1e                	je     c0022722 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0022704:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0022709:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c002270e:	c1 e3 08             	shl    ebx,0x8
c0022711:	09 d8                	or     eax,ebx
c0022713:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0022718:	c1 e3 10             	shl    ebx,0x10
c002271b:	09 c3                	or     ebx,eax
c002271d:	eb ba                	jmp    c00226d9 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c002271f:	83 cb ff             	or     ebx,0xffffffff
c0022722:	89 d8                	mov    eax,ebx
c0022724:	83 c4 44             	add    esp,0x44
c0022727:	5b                   	pop    ebx
c0022728:	5e                   	pop    esi
c0022729:	c3                   	ret    

c002272a <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c002272a:	57                   	push   edi
c002272b:	56                   	push   esi
c002272c:	53                   	push   ebx
c002272d:	83 ec 34             	sub    esp,0x34
c0022730:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0022734:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0022738:	6a 2b                	push   0x2b
c002273a:	6a 00                	push   0x0
c002273c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0022740:	53                   	push   ebx
c0022741:	e8 aa dd fd ff       	call   c00004f0 <memset>
c0022746:	58                   	pop    eax
c0022747:	5a                   	pop    edx
c0022748:	8d 44 24 11          	lea    eax,[esp+0x11]
c002274c:	50                   	push   eax
c002274d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022751:	e8 6f fd ff ff       	call   c00224c5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0022756:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c002275a:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c002275e:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0022762:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0022766:	53                   	push   ebx
c0022767:	6a 00                	push   0x0
c0022769:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c002276d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0022771:	e8 1b f9 ff ff       	call   c0022091 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0022776:	83 c4 50             	add    esp,0x50
c0022779:	5b                   	pop    ebx
c002277a:	5e                   	pop    esi
c002277b:	5f                   	pop    edi
c002277c:	c3                   	ret    

c002277d <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c002277d:	55                   	push   ebp
c002277e:	57                   	push   edi
c002277f:	56                   	push   esi
c0022780:	53                   	push   ebx
c0022781:	83 ec 40             	sub    esp,0x40
c0022784:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0022788:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002278c:	6a 2b                	push   0x2b
c002278e:	6a 00                	push   0x0
c0022790:	8d 74 24 11          	lea    esi,[esp+0x11]
c0022794:	56                   	push   esi
c0022795:	e8 56 dd fd ff       	call   c00004f0 <memset>
c002279a:	5f                   	pop    edi
c002279b:	89 ef                	mov    edi,ebp
c002279d:	58                   	pop    eax
c002279e:	8d 44 24 11          	lea    eax,[esp+0x11]
c00227a2:	50                   	push   eax
c00227a3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00227a7:	e8 19 fd ff ff       	call   c00224c5 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00227ac:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00227b1:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c00227b6:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c00227bb:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c00227c0:	83 c4 10             	add    esp,0x10
c00227c3:	85 ed                	test   ebp,ebp
c00227c5:	74 14                	je     c00227db <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00227c7:	51                   	push   ecx
c00227c8:	51                   	push   ecx
c00227c9:	57                   	push   edi
c00227ca:	53                   	push   ebx
c00227cb:	e8 09 f7 ff ff       	call   c0021ed9 <CmGetNext(Reghive_Tag*, int)>
c00227d0:	83 c4 10             	add    esp,0x10
c00227d3:	85 c0                	test   eax,eax
c00227d5:	74 04                	je     c00227db <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c00227d7:	89 c7                	mov    edi,eax
c00227d9:	eb e8                	jmp    c00227c3 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c00227db:	56                   	push   esi
c00227dc:	6a 00                	push   0x0
c00227de:	57                   	push   edi
c00227df:	53                   	push   ebx
c00227e0:	e8 ac f8 ff ff       	call   c0022091 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00227e5:	83 c4 0c             	add    esp,0xc
c00227e8:	89 c7                	mov    edi,eax
c00227ea:	56                   	push   esi
c00227eb:	50                   	push   eax
c00227ec:	53                   	push   ebx
c00227ed:	e8 f5 f5 ff ff       	call   c0021de7 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00227f2:	58                   	pop    eax
c00227f3:	5a                   	pop    edx
c00227f4:	6a 6c                	push   0x6c
c00227f6:	6a 00                	push   0x0
c00227f8:	6a 00                	push   0x0
c00227fa:	68 7d 29 03 c0       	push   0xc003297d
c00227ff:	57                   	push   edi
c0022800:	53                   	push   ebx
c0022801:	e8 24 ff ff ff       	call   c002272a <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0022806:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c002280a:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c002280e:	c1 e8 10             	shr    eax,0x10
c0022811:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0022815:	83 c4 1c             	add    esp,0x1c
c0022818:	56                   	push   esi
c0022819:	57                   	push   edi
c002281a:	53                   	push   ebx
c002281b:	e8 eb f6 ff ff       	call   c0021f0b <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0022820:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0022825:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002282a:	c1 e0 08             	shl    eax,0x8
c002282d:	09 c2                	or     edx,eax
c002282f:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0022834:	83 c4 4c             	add    esp,0x4c
c0022837:	c1 e0 10             	shl    eax,0x10
c002283a:	5b                   	pop    ebx
c002283b:	09 d0                	or     eax,edx
c002283d:	5e                   	pop    esi
c002283e:	5f                   	pop    edi
c002283f:	5d                   	pop    ebp
c0022840:	c3                   	ret    

c0022841 <zStrtok(char*, char const*)>:
c0022841:	55                   	push   ebp
c0022842:	57                   	push   edi
c0022843:	56                   	push   esi
c0022844:	53                   	push   ebx
c0022845:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0022849:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002284d:	85 db                	test   ebx,ebx
c002284f:	74 2f                	je     c0022880 <zStrtok(char*, char const*)+0x3f>
c0022851:	85 c0                	test   eax,eax
c0022853:	75 09                	jne    c002285e <zStrtok(char*, char const*)+0x1d>
c0022855:	a1 f0 f9 03 c0       	mov    eax,ds:0xc003f9f0
c002285a:	85 c0                	test   eax,eax
c002285c:	74 50                	je     c00228ae <zStrtok(char*, char const*)+0x6d>
c002285e:	31 c9                	xor    ecx,ecx
c0022860:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0022864:	74 03                	je     c0022869 <zStrtok(char*, char const*)+0x28>
c0022866:	41                   	inc    ecx
c0022867:	eb f7                	jmp    c0022860 <zStrtok(char*, char const*)+0x1f>
c0022869:	31 d2                	xor    edx,edx
c002286b:	39 ca                	cmp    edx,ecx
c002286d:	74 15                	je     c0022884 <zStrtok(char*, char const*)+0x43>
c002286f:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0022873:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0022876:	8d 3c 10             	lea    edi,[eax+edx*1]
c0022879:	39 ee                	cmp    esi,ebp
c002287b:	74 13                	je     c0022890 <zStrtok(char*, char const*)+0x4f>
c002287d:	42                   	inc    edx
c002287e:	eb eb                	jmp    c002286b <zStrtok(char*, char const*)+0x2a>
c0022880:	31 c0                	xor    eax,eax
c0022882:	eb 2a                	jmp    c00228ae <zStrtok(char*, char const*)+0x6d>
c0022884:	c7 05 f0 f9 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003f9f0,0x0
c002288e:	eb 1e                	jmp    c00228ae <zStrtok(char*, char const*)+0x6d>
c0022890:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022893:	39 ce                	cmp    esi,ecx
c0022895:	75 0a                	jne    c00228a1 <zStrtok(char*, char const*)+0x60>
c0022897:	40                   	inc    eax
c0022898:	a3 f0 f9 03 c0       	mov    ds:0xc003f9f0,eax
c002289d:	89 d8                	mov    eax,ebx
c002289f:	eb 0d                	jmp    c00228ae <zStrtok(char*, char const*)+0x6d>
c00228a1:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00228a5:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00228a8:	89 15 f0 f9 03 c0    	mov    DWORD PTR ds:0xc003f9f0,edx
c00228ae:	5b                   	pop    ebx
c00228af:	5e                   	pop    esi
c00228b0:	5f                   	pop    edi
c00228b1:	5d                   	pop    ebp
c00228b2:	c3                   	ret    

c00228b3 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00228b3:	57                   	push   edi
c00228b4:	56                   	push   esi
c00228b5:	53                   	push   ebx
c00228b6:	81 ec 08 01 00 00    	sub    esp,0x108
c00228bc:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c00228c3:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c00228ca:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00228ce:	53                   	push   ebx
c00228cf:	e8 6c dd fd ff       	call   c0000640 <strcpy>
c00228d4:	59                   	pop    ecx
c00228d5:	5e                   	pop    esi
c00228d6:	68 1f 2d 03 c0       	push   0xc0032d1f
c00228db:	53                   	push   ebx
c00228dc:	bb 01 00 00 00       	mov    ebx,0x1
c00228e1:	e8 5b ff ff ff       	call   c0022841 <zStrtok(char*, char const*)>
c00228e6:	83 c4 10             	add    esp,0x10
c00228e9:	85 c0                	test   eax,eax
c00228eb:	74 3b                	je     c0022928 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00228ed:	52                   	push   edx
c00228ee:	50                   	push   eax
c00228ef:	6a 01                	push   0x1
c00228f1:	57                   	push   edi
c00228f2:	e8 b9 fd ff ff       	call   c00226b0 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00228f7:	59                   	pop    ecx
c00228f8:	89 c3                	mov    ebx,eax
c00228fa:	5e                   	pop    esi
c00228fb:	68 1f 2d 03 c0       	push   0xc0032d1f
c0022900:	6a 00                	push   0x0
c0022902:	e8 3a ff ff ff       	call   c0022841 <zStrtok(char*, char const*)>
c0022907:	83 c4 10             	add    esp,0x10
c002290a:	89 c6                	mov    esi,eax
c002290c:	85 c0                	test   eax,eax
c002290e:	74 18                	je     c0022928 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022910:	52                   	push   edx
c0022911:	52                   	push   edx
c0022912:	53                   	push   ebx
c0022913:	57                   	push   edi
c0022914:	e8 81 f5 ff ff       	call   c0021e9a <CmEnterDirectory(Reghive_Tag*, int)>
c0022919:	83 c4 10             	add    esp,0x10
c002291c:	89 c3                	mov    ebx,eax
c002291e:	83 f8 ff             	cmp    eax,0xffffffff
c0022921:	74 05                	je     c0022928 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0022923:	50                   	push   eax
c0022924:	56                   	push   esi
c0022925:	53                   	push   ebx
c0022926:	eb c9                	jmp    c00228f1 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0022928:	81 c4 00 01 00 00    	add    esp,0x100
c002292e:	89 d8                	mov    eax,ebx
c0022930:	5b                   	pop    ebx
c0022931:	5e                   	pop    esi
c0022932:	5f                   	pop    edi
c0022933:	c3                   	ret    

c0022934 <CmDisplayTree(Reghive_Tag*, int, int)>:
c0022934:	55                   	push   ebp
c0022935:	57                   	push   edi
c0022936:	56                   	push   esi
c0022937:	53                   	push   ebx
c0022938:	83 ec 5c             	sub    esp,0x5c
c002293b:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c002293f:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0022943:	85 db                	test   ebx,ebx
c0022945:	0f 8e 84 00 00 00    	jle    c00229cf <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c002294b:	31 ed                	xor    ebp,ebp
c002294d:	57                   	push   edi
c002294e:	6a 32                	push   0x32
c0022950:	6a 00                	push   0x0
c0022952:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0022956:	57                   	push   edi
c0022957:	e8 94 db fd ff       	call   c00004f0 <memset>
c002295c:	83 c4 0c             	add    esp,0xc
c002295f:	57                   	push   edi
c0022960:	53                   	push   ebx
c0022961:	56                   	push   esi
c0022962:	e8 30 fb ff ff       	call   c0022497 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0022967:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002296b:	83 c4 10             	add    esp,0x10
c002296e:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0022972:	7d 13                	jge    c0022987 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0022974:	83 ec 0c             	sub    esp,0xc
c0022977:	45                   	inc    ebp
c0022978:	68 a3 30 03 c0       	push   0xc00330a3
c002297d:	e8 0b 68 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0022982:	83 c4 10             	add    esp,0x10
c0022985:	eb e7                	jmp    c002296e <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0022987:	51                   	push   ecx
c0022988:	57                   	push   edi
c0022989:	53                   	push   ebx
c002298a:	68 83 29 03 c0       	push   0xc0032983
c002298f:	e8 f9 67 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0022994:	83 c4 10             	add    esp,0x10
c0022997:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c002299c:	75 1e                	jne    c00229bc <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c002299e:	52                   	push   edx
c002299f:	52                   	push   edx
c00229a0:	53                   	push   ebx
c00229a1:	56                   	push   esi
c00229a2:	e8 f3 f4 ff ff       	call   c0021e9a <CmEnterDirectory(Reghive_Tag*, int)>
c00229a7:	83 c4 0c             	add    esp,0xc
c00229aa:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00229ae:	8d 51 04             	lea    edx,[ecx+0x4]
c00229b1:	52                   	push   edx
c00229b2:	50                   	push   eax
c00229b3:	56                   	push   esi
c00229b4:	e8 7b ff ff ff       	call   c0022934 <CmDisplayTree(Reghive_Tag*, int, int)>
c00229b9:	83 c4 10             	add    esp,0x10
c00229bc:	50                   	push   eax
c00229bd:	50                   	push   eax
c00229be:	53                   	push   ebx
c00229bf:	56                   	push   esi
c00229c0:	e8 14 f5 ff ff       	call   c0021ed9 <CmGetNext(Reghive_Tag*, int)>
c00229c5:	83 c4 10             	add    esp,0x10
c00229c8:	89 c3                	mov    ebx,eax
c00229ca:	e9 74 ff ff ff       	jmp    c0022943 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c00229cf:	83 c4 5c             	add    esp,0x5c
c00229d2:	5b                   	pop    ebx
c00229d3:	5e                   	pop    esi
c00229d4:	5f                   	pop    edi
c00229d5:	5d                   	pop    ebp
c00229d6:	c3                   	ret    

c00229d7 <CmSplitFinalSlashInPlace(char*)>:
c00229d7:	53                   	push   ebx
c00229d8:	83 ec 14             	sub    esp,0x14
c00229db:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00229df:	53                   	push   ebx
c00229e0:	e8 8b db fd ff       	call   c0000570 <strlen>
c00229e5:	83 c4 10             	add    esp,0x10
c00229e8:	48                   	dec    eax
c00229e9:	85 c0                	test   eax,eax
c00229eb:	74 15                	je     c0022a02 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00229ed:	8d 14 03             	lea    edx,[ebx+eax*1]
c00229f0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00229f4:	75 09                	jne    c00229ff <CmSplitFinalSlashInPlace(char*)+0x28>
c00229f6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00229f9:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00229fd:	eb 05                	jmp    c0022a04 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00229ff:	48                   	dec    eax
c0022a00:	eb e7                	jmp    c00229e9 <CmSplitFinalSlashInPlace(char*)+0x12>
c0022a02:	31 c0                	xor    eax,eax
c0022a04:	83 c4 08             	add    esp,0x8
c0022a07:	5b                   	pop    ebx
c0022a08:	c3                   	ret    

c0022a09 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0022a09:	55                   	push   ebp
c0022a0a:	57                   	push   edi
c0022a0b:	56                   	push   esi
c0022a0c:	53                   	push   ebx
c0022a0d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022a13:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0022a1a:	8a 13                	mov    dl,BYTE PTR [ebx]
c0022a1c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0022a1f:	80 fa 40             	cmp    dl,0x40
c0022a22:	75 1c                	jne    c0022a40 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0022a24:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0022a27:	85 c9                	test   ecx,ecx
c0022a29:	0f 84 09 01 00 00    	je     c0022b38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022a2f:	8d 43 01             	lea    eax,[ebx+0x1]
c0022a32:	83 f9 3a             	cmp    ecx,0x3a
c0022a35:	74 04                	je     c0022a3b <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0022a37:	89 c3                	mov    ebx,eax
c0022a39:	eb e9                	jmp    c0022a24 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0022a3b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0022a3e:	89 c3                	mov    ebx,eax
c0022a40:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0022a44:	50                   	push   eax
c0022a45:	6a 40                	push   0x40
c0022a47:	6a 00                	push   0x0
c0022a49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022a4d:	50                   	push   eax
c0022a4e:	e8 9d da fd ff       	call   c00004f0 <memset>
c0022a53:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0022a5a:	31 c0                	xor    eax,eax
c0022a5c:	83 c4 10             	add    esp,0x10
c0022a5f:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0022a64:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0022a67:	89 d1                	mov    ecx,edx
c0022a69:	85 d2                	test   edx,edx
c0022a6b:	0f 84 c7 00 00 00    	je     c0022b38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022a71:	3d c7 00 00 00       	cmp    eax,0xc7
c0022a76:	0f 8f bc 00 00 00    	jg     c0022b38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022a7c:	83 fa 0a             	cmp    edx,0xa
c0022a7f:	0f 85 a4 00 00 00    	jne    c0022b29 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0022a85:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0022a8a:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0022a8f:	89 c8                	mov    eax,ecx
c0022a91:	a8 df                	test   al,0xdf
c0022a93:	0f 94 c2             	sete   dl
c0022a96:	83 f9 23             	cmp    ecx,0x23
c0022a99:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0022a9e:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0022aa2:	80 e2 01             	and    dl,0x1
c0022aa5:	75 4a                	jne    c0022af1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022aa7:	83 e8 09             	sub    eax,0x9
c0022aaa:	3c 01                	cmp    al,0x1
c0022aac:	76 43                	jbe    c0022af1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022aae:	83 f9 5b             	cmp    ecx,0x5b
c0022ab1:	75 42                	jne    c0022af5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0022ab3:	83 fe 40             	cmp    esi,0x40
c0022ab6:	75 39                	jne    c0022af1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022ab8:	83 ec 0c             	sub    esp,0xc
c0022abb:	8d 54 24 65          	lea    edx,[esp+0x65]
c0022abf:	52                   	push   edx
c0022ac0:	e8 ab da fd ff       	call   c0000570 <strlen>
c0022ac5:	83 c4 10             	add    esp,0x10
c0022ac8:	83 f8 3f             	cmp    eax,0x3f
c0022acb:	77 6b                	ja     c0022b38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022acd:	50                   	push   eax
c0022ace:	50                   	push   eax
c0022acf:	8d 54 24 61          	lea    edx,[esp+0x61]
c0022ad3:	52                   	push   edx
c0022ad4:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022ad8:	52                   	push   edx
c0022ad9:	e8 62 db fd ff       	call   c0000640 <strcpy>
c0022ade:	58                   	pop    eax
c0022adf:	8d 54 24 24          	lea    edx,[esp+0x24]
c0022ae3:	52                   	push   edx
c0022ae4:	e8 87 da fd ff       	call   c0000570 <strlen>
c0022ae9:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0022aee:	83 c4 10             	add    esp,0x10
c0022af1:	31 d2                	xor    edx,edx
c0022af3:	eb 3b                	jmp    c0022b30 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0022af5:	83 fe 40             	cmp    esi,0x40
c0022af8:	74 06                	je     c0022b00 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0022afa:	8d 44 24 58          	lea    eax,[esp+0x58]
c0022afe:	eb 20                	jmp    c0022b20 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0022b00:	50                   	push   eax
c0022b01:	50                   	push   eax
c0022b02:	55                   	push   ebp
c0022b03:	8d 44 24 24          	lea    eax,[esp+0x24]
c0022b07:	50                   	push   eax
c0022b08:	e8 43 dc fd ff       	call   c0000750 <strcmp>
c0022b0d:	83 c4 10             	add    esp,0x10
c0022b10:	85 c0                	test   eax,eax
c0022b12:	75 dd                	jne    c0022af1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022b14:	eb e4                	jmp    c0022afa <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0022b16:	8d 50 01             	lea    edx,[eax+0x1]
c0022b19:	83 f9 3d             	cmp    ecx,0x3d
c0022b1c:	74 1e                	je     c0022b3c <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0022b1e:	89 d0                	mov    eax,edx
c0022b20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0022b23:	85 c9                	test   ecx,ecx
c0022b25:	75 ef                	jne    c0022b16 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0022b27:	eb 0f                	jmp    c0022b38 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0022b29:	8d 50 01             	lea    edx,[eax+0x1]
c0022b2c:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0022b30:	47                   	inc    edi
c0022b31:	89 d0                	mov    eax,edx
c0022b33:	e9 2c ff ff ff       	jmp    c0022a64 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0022b38:	31 c0                	xor    eax,eax
c0022b3a:	eb 33                	jmp    c0022b6f <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0022b3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b40:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022b43:	50                   	push   eax
c0022b44:	50                   	push   eax
c0022b45:	8d 44 24 60          	lea    eax,[esp+0x60]
c0022b49:	50                   	push   eax
c0022b4a:	53                   	push   ebx
c0022b4b:	e8 00 dc fd ff       	call   c0000750 <strcmp>
c0022b50:	83 c4 10             	add    esp,0x10
c0022b53:	85 c0                	test   eax,eax
c0022b55:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022b59:	75 96                	jne    c0022af1 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0022b5b:	51                   	push   ecx
c0022b5c:	51                   	push   ecx
c0022b5d:	52                   	push   edx
c0022b5e:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0022b65:	e8 d6 da fd ff       	call   c0000640 <strcpy>
c0022b6a:	83 c4 10             	add    esp,0x10
c0022b6d:	b0 01                	mov    al,0x1
c0022b6f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022b75:	5b                   	pop    ebx
c0022b76:	5e                   	pop    esi
c0022b77:	5f                   	pop    edi
c0022b78:	5d                   	pop    ebp
c0022b79:	c3                   	ret    

c0022b7a <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0022b7a:	57                   	push   edi
c0022b7b:	56                   	push   esi
c0022b7c:	53                   	push   ebx
c0022b7d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0022b83:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0022b8a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022b91:	53                   	push   ebx
c0022b92:	e8 d9 d9 fd ff       	call   c0000570 <strlen>
c0022b97:	89 34 24             	mov    DWORD PTR [esp],esi
c0022b9a:	89 c7                	mov    edi,eax
c0022b9c:	e8 cf d9 fd ff       	call   c0000570 <strlen>
c0022ba1:	83 c4 10             	add    esp,0x10
c0022ba4:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0022ba8:	3d ff 00 00 00       	cmp    eax,0xff
c0022bad:	0f 87 d3 00 00 00    	ja     c0022c86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022bb3:	57                   	push   edi
c0022bb4:	57                   	push   edi
c0022bb5:	56                   	push   esi
c0022bb6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0022bba:	56                   	push   esi
c0022bbb:	e8 80 da fd ff       	call   c0000640 <strcpy>
c0022bc0:	58                   	pop    eax
c0022bc1:	5a                   	pop    edx
c0022bc2:	68 1f 2d 03 c0       	push   0xc0032d1f
c0022bc7:	56                   	push   esi
c0022bc8:	e8 73 dc fd ff       	call   c0000840 <strcat>
c0022bcd:	59                   	pop    ecx
c0022bce:	5f                   	pop    edi
c0022bcf:	53                   	push   ebx
c0022bd0:	56                   	push   esi
c0022bd1:	e8 6a dc fd ff       	call   c0000840 <strcat>
c0022bd6:	58                   	pop    eax
c0022bd7:	5a                   	pop    edx
c0022bd8:	68 8d 29 03 c0       	push   0xc003298d
c0022bdd:	56                   	push   esi
c0022bde:	e8 5d dc fd ff       	call   c0000840 <strcat>
c0022be3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0022bea:	e8 0f 37 ff ff       	call   c00162fe <malloc>
c0022bef:	83 c4 0c             	add    esp,0xc
c0022bf2:	89 c3                	mov    ebx,eax
c0022bf4:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0022bfa:	56                   	push   esi
c0022bfb:	50                   	push   eax
c0022bfc:	e8 93 77 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c0022c01:	83 c4 10             	add    esp,0x10
c0022c04:	85 db                	test   ebx,ebx
c0022c06:	74 7e                	je     c0022c86 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0022c08:	51                   	push   ecx
c0022c09:	51                   	push   ecx
c0022c0a:	6a 01                	push   0x1
c0022c0c:	53                   	push   ebx
c0022c0d:	e8 a0 77 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c0022c12:	83 c4 10             	add    esp,0x10
c0022c15:	85 c0                	test   eax,eax
c0022c17:	74 08                	je     c0022c21 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0022c19:	83 ec 0c             	sub    esp,0xc
c0022c1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c1e:	53                   	push   ebx
c0022c1f:	eb 5f                	jmp    c0022c80 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0022c21:	52                   	push   edx
c0022c22:	8d 44 24 17          	lea    eax,[esp+0x17]
c0022c26:	50                   	push   eax
c0022c27:	8d 44 24 20          	lea    eax,[esp+0x20]
c0022c2b:	50                   	push   eax
c0022c2c:	53                   	push   ebx
c0022c2d:	e8 82 7a ff ff       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c0022c32:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0022c36:	83 c4 10             	add    esp,0x10
c0022c39:	89 c1                	mov    ecx,eax
c0022c3b:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0022c3f:	74 31                	je     c0022c72 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022c41:	83 ec 0c             	sub    esp,0xc
c0022c44:	50                   	push   eax
c0022c45:	e8 b4 36 ff ff       	call   c00162fe <malloc>
c0022c4a:	89 c6                	mov    esi,eax
c0022c4c:	58                   	pop    eax
c0022c4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c4f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0022c53:	52                   	push   edx
c0022c54:	56                   	push   esi
c0022c55:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022c59:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0022c5d:	53                   	push   ebx
c0022c5e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0022c61:	83 c4 20             	add    esp,0x20
c0022c64:	85 c0                	test   eax,eax
c0022c66:	75 0a                	jne    c0022c72 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0022c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c6c:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0022c70:	74 18                	je     c0022c8a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0022c72:	83 ec 0c             	sub    esp,0xc
c0022c75:	53                   	push   ebx
c0022c76:	e8 95 77 ff ff       	call   c001a410 <File::close()>
c0022c7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022c83:	83 c4 10             	add    esp,0x10
c0022c86:	31 c0                	xor    eax,eax
c0022c88:	eb 3b                	jmp    c0022cc5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0022c8a:	83 ec 0c             	sub    esp,0xc
c0022c8d:	53                   	push   ebx
c0022c8e:	e8 7d 77 ff ff       	call   c001a410 <File::close()>
c0022c93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022c95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022c98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022c9b:	83 c4 0c             	add    esp,0xc
c0022c9e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022ca5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022cac:	56                   	push   esi
c0022cad:	e8 57 fd ff ff       	call   c0022a09 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0022cb2:	89 34 24             	mov    DWORD PTR [esp],esi
c0022cb5:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022cb9:	e8 50 36 ff ff       	call   c001630e <free>
c0022cbe:	83 c4 10             	add    esp,0x10
c0022cc1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022cc5:	81 c4 20 01 00 00    	add    esp,0x120
c0022ccb:	5b                   	pop    ebx
c0022ccc:	5e                   	pop    esi
c0022ccd:	5f                   	pop    edi
c0022cce:	c3                   	ret    

c0022ccf <Reg::getLine(char*, char*, char*)>:
c0022ccf:	57                   	push   edi
c0022cd0:	56                   	push   esi
c0022cd1:	53                   	push   ebx
c0022cd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022cd6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022cda:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022cde:	57                   	push   edi
c0022cdf:	56                   	push   esi
c0022ce0:	53                   	push   ebx
c0022ce1:	68 92 29 03 c0       	push   0xc0032992
c0022ce6:	e8 8f fe ff ff       	call   c0022b7a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022ceb:	83 c4 10             	add    esp,0x10
c0022cee:	84 c0                	test   al,al
c0022cf0:	75 10                	jne    c0022d02 <Reg::getLine(char*, char*, char*)+0x33>
c0022cf2:	57                   	push   edi
c0022cf3:	56                   	push   esi
c0022cf4:	53                   	push   ebx
c0022cf5:	68 b7 29 03 c0       	push   0xc00329b7
c0022cfa:	e8 7b fe ff ff       	call   c0022b7a <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0022cff:	83 c4 10             	add    esp,0x10
c0022d02:	5b                   	pop    ebx
c0022d03:	5e                   	pop    esi
c0022d04:	5f                   	pop    edi
c0022d05:	c3                   	ret    

c0022d06 <Reg::readInt(char*, char*, int*)>:
c0022d06:	55                   	push   ebp
c0022d07:	57                   	push   edi
c0022d08:	56                   	push   esi
c0022d09:	53                   	push   ebx
c0022d0a:	81 ec f0 00 00 00    	sub    esp,0xf0
c0022d10:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0022d14:	55                   	push   ebp
c0022d15:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022d1c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0022d23:	e8 a7 ff ff ff       	call   c0022ccf <Reg::getLine(char*, char*, char*)>
c0022d28:	83 c4 10             	add    esp,0x10
c0022d2b:	84 c0                	test   al,al
c0022d2d:	0f 84 b6 00 00 00    	je     c0022de9 <Reg::readInt(char*, char*, int*)+0xe3>
c0022d33:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0022d38:	83 fa 2b             	cmp    edx,0x2b
c0022d3b:	74 0c                	je     c0022d49 <Reg::readInt(char*, char*, int*)+0x43>
c0022d3d:	83 fa 2d             	cmp    edx,0x2d
c0022d40:	75 0e                	jne    c0022d50 <Reg::readInt(char*, char*, int*)+0x4a>
c0022d42:	ba 01 00 00 00       	mov    edx,0x1
c0022d47:	eb 0b                	jmp    c0022d54 <Reg::readInt(char*, char*, int*)+0x4e>
c0022d49:	ba 01 00 00 00       	mov    edx,0x1
c0022d4e:	eb 02                	jmp    c0022d52 <Reg::readInt(char*, char*, int*)+0x4c>
c0022d50:	31 d2                	xor    edx,edx
c0022d52:	31 c0                	xor    eax,eax
c0022d54:	be 0a 00 00 00       	mov    esi,0xa
c0022d59:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0022d5e:	75 21                	jne    c0022d81 <Reg::readInt(char*, char*, int*)+0x7b>
c0022d60:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0022d65:	83 f9 78             	cmp    ecx,0x78
c0022d68:	75 0a                	jne    c0022d74 <Reg::readInt(char*, char*, int*)+0x6e>
c0022d6a:	83 c2 02             	add    edx,0x2
c0022d6d:	be 10 00 00 00       	mov    esi,0x10
c0022d72:	eb 0d                	jmp    c0022d81 <Reg::readInt(char*, char*, int*)+0x7b>
c0022d74:	83 f9 62             	cmp    ecx,0x62
c0022d77:	75 08                	jne    c0022d81 <Reg::readInt(char*, char*, int*)+0x7b>
c0022d79:	83 c2 02             	add    edx,0x2
c0022d7c:	be 02 00 00 00       	mov    esi,0x2
c0022d81:	01 d5                	add    ebp,edx
c0022d83:	31 d2                	xor    edx,edx
c0022d85:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0022d89:	83 f9 0d             	cmp    ecx,0xd
c0022d8c:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0022d90:	0f 94 c3             	sete   bl
c0022d93:	85 c9                	test   ecx,ecx
c0022d95:	89 df                	mov    edi,ebx
c0022d97:	0f 94 c3             	sete   bl
c0022d9a:	09 df                	or     edi,ebx
c0022d9c:	89 fb                	mov    ebx,edi
c0022d9e:	83 e7 01             	and    edi,0x1
c0022da1:	75 35                	jne    c0022dd8 <Reg::readInt(char*, char*, int*)+0xd2>
c0022da3:	0f af d6             	imul   edx,esi
c0022da6:	83 fe 10             	cmp    esi,0x10
c0022da9:	75 26                	jne    c0022dd1 <Reg::readInt(char*, char*, int*)+0xcb>
c0022dab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022daf:	83 ef 41             	sub    edi,0x41
c0022db2:	89 fb                	mov    ebx,edi
c0022db4:	80 fb 05             	cmp    bl,0x5
c0022db7:	77 06                	ja     c0022dbf <Reg::readInt(char*, char*, int*)+0xb9>
c0022db9:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0022dbd:	eb 16                	jmp    c0022dd5 <Reg::readInt(char*, char*, int*)+0xcf>
c0022dbf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022dc3:	83 eb 61             	sub    ebx,0x61
c0022dc6:	80 fb 05             	cmp    bl,0x5
c0022dc9:	77 06                	ja     c0022dd1 <Reg::readInt(char*, char*, int*)+0xcb>
c0022dcb:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0022dcf:	eb 04                	jmp    c0022dd5 <Reg::readInt(char*, char*, int*)+0xcf>
c0022dd1:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0022dd5:	45                   	inc    ebp
c0022dd6:	eb ad                	jmp    c0022d85 <Reg::readInt(char*, char*, int*)+0x7f>
c0022dd8:	84 c0                	test   al,al
c0022dda:	74 02                	je     c0022dde <Reg::readInt(char*, char*, int*)+0xd8>
c0022ddc:	f7 da                	neg    edx
c0022dde:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0022de5:	89 10                	mov    DWORD PTR [eax],edx
c0022de7:	88 d8                	mov    al,bl
c0022de9:	81 c4 ec 00 00 00    	add    esp,0xec
c0022def:	5b                   	pop    ebx
c0022df0:	5e                   	pop    esi
c0022df1:	5f                   	pop    edi
c0022df2:	5d                   	pop    ebp
c0022df3:	c3                   	ret    

c0022df4 <Reg::readString(char*, char*, char*, int)>:
c0022df4:	57                   	push   edi
c0022df5:	56                   	push   esi
c0022df6:	53                   	push   ebx
c0022df7:	81 ec d4 00 00 00    	sub    esp,0xd4
c0022dfd:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0022e04:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0022e08:	57                   	push   edi
c0022e09:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022e10:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0022e17:	e8 b3 fe ff ff       	call   c0022ccf <Reg::getLine(char*, char*, char*)>
c0022e1c:	83 c4 10             	add    esp,0x10
c0022e1f:	89 c6                	mov    esi,eax
c0022e21:	84 c0                	test   al,al
c0022e23:	74 44                	je     c0022e69 <Reg::readString(char*, char*, char*, int)+0x75>
c0022e25:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0022e2c:	31 c0                	xor    eax,eax
c0022e2e:	4a                   	dec    edx
c0022e2f:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0022e32:	84 c9                	test   cl,cl
c0022e34:	74 0f                	je     c0022e45 <Reg::readString(char*, char*, char*, int)+0x51>
c0022e36:	39 c2                	cmp    edx,eax
c0022e38:	7e 0b                	jle    c0022e45 <Reg::readString(char*, char*, char*, int)+0x51>
c0022e3a:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0022e3d:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0022e42:	40                   	inc    eax
c0022e43:	eb ea                	jmp    c0022e2f <Reg::readString(char*, char*, char*, int)+0x3b>
c0022e45:	83 ec 0c             	sub    esp,0xc
c0022e48:	53                   	push   ebx
c0022e49:	e8 22 d7 fd ff       	call   c0000570 <strlen>
c0022e4e:	83 c4 10             	add    esp,0x10
c0022e51:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0022e56:	75 11                	jne    c0022e69 <Reg::readString(char*, char*, char*, int)+0x75>
c0022e58:	83 ec 0c             	sub    esp,0xc
c0022e5b:	53                   	push   ebx
c0022e5c:	e8 0f d7 fd ff       	call   c0000570 <strlen>
c0022e61:	83 c4 10             	add    esp,0x10
c0022e64:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0022e69:	81 c4 d0 00 00 00    	add    esp,0xd0
c0022e6f:	89 f0                	mov    eax,esi
c0022e71:	5b                   	pop    ebx
c0022e72:	5e                   	pop    esi
c0022e73:	5f                   	pop    edi
c0022e74:	c3                   	ret    

c0022e75 <Reg::readBool(char*, char*, bool*)>:
c0022e75:	83 ec 20             	sub    esp,0x20
c0022e78:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022e7c:	50                   	push   eax
c0022e7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e85:	e8 7c fe ff ff       	call   c0022d06 <Reg::readInt(char*, char*, int*)>
c0022e8a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022e8f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0022e93:	0f 95 02             	setne  BYTE PTR [edx]
c0022e96:	83 c4 2c             	add    esp,0x2c
c0022e99:	c3                   	ret    

c0022e9a <Reg::readBoolWithDefault(char*, char*, bool)>:
c0022e9a:	53                   	push   ebx
c0022e9b:	83 ec 1c             	sub    esp,0x1c
c0022e9e:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0022ea2:	8d 44 24 13          	lea    eax,[esp+0x13]
c0022ea6:	50                   	push   eax
c0022ea7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022eab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022eaf:	e8 c1 ff ff ff       	call   c0022e75 <Reg::readBool(char*, char*, bool*)>
c0022eb4:	83 c4 10             	add    esp,0x10
c0022eb7:	84 c0                	test   al,al
c0022eb9:	74 04                	je     c0022ebf <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0022ebb:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0022ebf:	88 d8                	mov    al,bl
c0022ec1:	83 c4 18             	add    esp,0x18
c0022ec4:	5b                   	pop    ebx
c0022ec5:	c3                   	ret    

c0022ec6 <Reg::readIntWithDefault(char*, char*, int)>:
c0022ec6:	53                   	push   ebx
c0022ec7:	83 ec 1c             	sub    esp,0x1c
c0022eca:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022ece:	8d 44 24 10          	lea    eax,[esp+0x10]
c0022ed2:	50                   	push   eax
c0022ed3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ed7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022edb:	e8 26 fe ff ff       	call   c0022d06 <Reg::readInt(char*, char*, int*)>
c0022ee0:	83 c4 10             	add    esp,0x10
c0022ee3:	84 c0                	test   al,al
c0022ee5:	74 04                	je     c0022eeb <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0022ee7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022eeb:	89 d8                	mov    eax,ebx
c0022eed:	83 c4 18             	add    esp,0x18
c0022ef0:	5b                   	pop    ebx
c0022ef1:	c3                   	ret    

c0022ef2 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0022ef2:	57                   	push   edi
c0022ef3:	56                   	push   esi
c0022ef4:	56                   	push   esi
c0022ef5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022ef9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022efd:	56                   	push   esi
c0022efe:	57                   	push   edi
c0022eff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f07:	e8 e8 fe ff ff       	call   c0022df4 <Reg::readString(char*, char*, char*, int)>
c0022f0c:	83 c4 10             	add    esp,0x10
c0022f0f:	84 c0                	test   al,al
c0022f11:	75 1a                	jne    c0022f2d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0022f13:	51                   	push   ecx
c0022f14:	56                   	push   esi
c0022f15:	6a 00                	push   0x0
c0022f17:	57                   	push   edi
c0022f18:	e8 d3 d5 fd ff       	call   c00004f0 <memset>
c0022f1d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0022f20:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022f24:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022f26:	83 c4 10             	add    esp,0x10
c0022f29:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022f2d:	89 f8                	mov    eax,edi
c0022f2f:	5a                   	pop    edx
c0022f30:	5e                   	pop    esi
c0022f31:	5f                   	pop    edi
c0022f32:	c3                   	ret    

c0022f33 <SysEject(regs*)>:
c0022f33:	83 ec 0c             	sub    esp,0xc
c0022f36:	83 ca ff             	or     edx,0xffffffff
c0022f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f3d:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0022f40:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0022f45:	83 e9 41             	sub    ecx,0x41
c0022f48:	83 f9 19             	cmp    ecx,0x19
c0022f4b:	77 18                	ja     c0022f65 <SysEject(regs*)+0x32>
c0022f4d:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c0022f54:	85 c9                	test   ecx,ecx
c0022f56:	74 0d                	je     c0022f65 <SysEject(regs*)+0x32>
c0022f58:	83 ec 0c             	sub    esp,0xc
c0022f5b:	51                   	push   ecx
c0022f5c:	e8 35 96 ff ff       	call   c001c596 <LogicalDisk::eject()>
c0022f61:	83 c4 10             	add    esp,0x10
c0022f64:	99                   	cdq    
c0022f65:	83 c4 0c             	add    esp,0xc
c0022f68:	c3                   	ret    

c0022f69 <SysExit(regs*)>:
c0022f69:	83 ec 18             	sub    esp,0x18
c0022f6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f70:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022f73:	e8 8c 29 00 00       	call   c0025904 <terminateTask(int)>
c0022f78:	83 c8 ff             	or     eax,0xffffffff
c0022f7b:	83 c4 1c             	add    esp,0x1c
c0022f7e:	89 c2                	mov    edx,eax
c0022f80:	c3                   	ret    

c0022f81 <SysGetCwd(regs*)>:
c0022f81:	83 ec 10             	sub    esp,0x10
c0022f84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022f88:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0022f8b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0022f8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022f93:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0022f96:	e8 ad 70 ff ff       	call   c001a048 <Fs::getcwd(Process*, char*, int)>
c0022f9b:	83 c4 1c             	add    esp,0x1c
c0022f9e:	99                   	cdq    
c0022f9f:	c3                   	ret    

c0022fa0 <SysGetPID(regs*)>:
c0022fa0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0022fa5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0022fa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022faa:	99                   	cdq    
c0022fab:	c3                   	ret    

c0022fac <SysGetRAMData(regs*)>:
c0022fac:	8b 0d ec a9 03 c0    	mov    ecx,DWORD PTR ds:0xc003a9ec
c0022fb2:	69 05 e8 a9 03 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc003a9e8,0xc8
c0022fbc:	99                   	cdq    
c0022fbd:	f7 f9                	idiv   ecx
c0022fbf:	c1 e0 18             	shl    eax,0x18
c0022fc2:	09 c8                	or     eax,ecx
c0022fc4:	99                   	cdq    
c0022fc5:	c3                   	ret    

c0022fc6 <SysGetVGAPtr(regs*)>:
c0022fc6:	55                   	push   ebp
c0022fc7:	57                   	push   edi
c0022fc8:	56                   	push   esi
c0022fc9:	53                   	push   ebx
c0022fca:	83 ec 18             	sub    esp,0x18
c0022fcd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0022fd1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022fd4:	e8 f7 23 00 00       	call   c00253d0 <Thr::processFromPID(int)>
c0022fd9:	83 c4 10             	add    esp,0x10
c0022fdc:	89 c1                	mov    ecx,eax
c0022fde:	b8 01 00 00 00       	mov    eax,0x1
c0022fe3:	85 c9                	test   ecx,ecx
c0022fe5:	74 57                	je     c002303e <SysGetVGAPtr(regs*)+0x78>
c0022fe7:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0022fed:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0022ff1:	74 0c                	je     c0022fff <SysGetVGAPtr(regs*)+0x39>
c0022ff3:	83 ec 0c             	sub    esp,0xc
c0022ff6:	55                   	push   ebp
c0022ff7:	e8 a5 3f ff ff       	call   c0016fa1 <setActiveTerminal(VgaText*)>
c0022ffc:	83 c4 10             	add    esp,0x10
c0022fff:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0023002:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0023005:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c002300a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002300c:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002300f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023012:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0023018:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002301b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002301e:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0023024:	50                   	push   eax
c0023025:	50                   	push   eax
c0023026:	68 d2 29 03 c0       	push   0xc00329d2
c002302b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c002302e:	05 a8 0f 00 00       	add    eax,0xfa8
c0023033:	50                   	push   eax
c0023034:	e8 07 d6 fd ff       	call   c0000640 <strcpy>
c0023039:	83 c4 10             	add    esp,0x10
c002303c:	31 c0                	xor    eax,eax
c002303e:	83 c4 0c             	add    esp,0xc
c0023041:	31 d2                	xor    edx,edx
c0023043:	5b                   	pop    ebx
c0023044:	5e                   	pop    esi
c0023045:	5f                   	pop    edi
c0023046:	5d                   	pop    ebp
c0023047:	c3                   	ret    

c0023048 <SysKill(regs*)>:
c0023048:	53                   	push   ebx
c0023049:	83 ec 08             	sub    esp,0x8
c002304c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023050:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0023054:	75 16                	jne    c002306c <SysKill(regs*)+0x24>
c0023056:	83 ec 0c             	sub    esp,0xc
c0023059:	68 dc 29 03 c0       	push   0xc00329dc
c002305e:	e8 43 d1 ff ff       	call   c00201a6 <KePanic(char const*)>
c0023063:	83 c4 10             	add    esp,0x10
c0023066:	e9 89 00 00 00       	jmp    c00230f4 <SysKill(regs*)+0xac>
c002306b:	90                   	nop
c002306c:	83 ec 0c             	sub    esp,0xc
c002306f:	68 ec 01 04 c0       	push   0xc00401ec
c0023074:	e8 f3 ba 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0023079:	8d 76 00             	lea    esi,[esi+0x0]
c002307c:	83 c4 10             	add    esp,0x10
c002307f:	85 c0                	test   eax,eax
c0023081:	74 19                	je     c002309c <SysKill(regs*)+0x54>
c0023083:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0023086:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0023089:	39 0a                	cmp    DWORD PTR [edx],ecx
c002308b:	74 33                	je     c00230c0 <SysKill(regs*)+0x78>
c002308d:	52                   	push   edx
c002308e:	52                   	push   edx
c002308f:	50                   	push   eax
c0023090:	68 ec 01 04 c0       	push   0xc00401ec
c0023095:	e8 f2 bd 00 00       	call   c002ee8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c002309a:	eb e0                	jmp    c002307c <SysKill(regs*)+0x34>
c002309c:	83 ec 0c             	sub    esp,0xc
c002309f:	68 e0 01 04 c0       	push   0xc00401e0
c00230a4:	e8 c3 ba 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00230a9:	8d 76 00             	lea    esi,[esi+0x0]
c00230ac:	83 c4 10             	add    esp,0x10
c00230af:	85 c0                	test   eax,eax
c00230b1:	74 41                	je     c00230f4 <SysKill(regs*)+0xac>
c00230b3:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00230b6:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00230b9:	39 0a                	cmp    DWORD PTR [edx],ecx
c00230bb:	75 27                	jne    c00230e4 <SysKill(regs*)+0x9c>
c00230bd:	8d 76 00             	lea    esi,[esi+0x0]
c00230c0:	51                   	push   ecx
c00230c1:	51                   	push   ecx
c00230c2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00230c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00230ca:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00230cd:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00230d3:	e8 87 d9 ff ff       	call   c0020a5f <KeRaiseSignal(SigHandlerBlock*, int)>
c00230d8:	83 c4 10             	add    esp,0x10
c00230db:	31 c0                	xor    eax,eax
c00230dd:	31 d2                	xor    edx,edx
c00230df:	eb 1b                	jmp    c00230fc <SysKill(regs*)+0xb4>
c00230e1:	8d 76 00             	lea    esi,[esi+0x0]
c00230e4:	52                   	push   edx
c00230e5:	52                   	push   edx
c00230e6:	50                   	push   eax
c00230e7:	68 e0 01 04 c0       	push   0xc00401e0
c00230ec:	e8 9b bd 00 00       	call   c002ee8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00230f1:	eb b9                	jmp    c00230ac <SysKill(regs*)+0x64>
c00230f3:	90                   	nop
c00230f4:	83 c8 ff             	or     eax,0xffffffff
c00230f7:	89 c2                	mov    edx,eax
c00230f9:	8d 76 00             	lea    esi,[esi+0x0]
c00230fc:	83 c4 08             	add    esp,0x8
c00230ff:	5b                   	pop    ebx
c0023100:	c3                   	ret    

c0023101 <SysLoadDLL(regs*)>:
c0023101:	56                   	push   esi
c0023102:	53                   	push   ebx
c0023103:	31 d2                	xor    edx,edx
c0023105:	51                   	push   ecx
c0023106:	b8 01 00 00 00       	mov    eax,0x1
c002310b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002310f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0023113:	0f 84 8c 00 00 00    	je     c00231a5 <SysLoadDLL(regs*)+0xa4>
c0023119:	83 ec 0c             	sub    esp,0xc
c002311c:	68 14 01 00 00       	push   0x114
c0023121:	e8 d8 31 ff ff       	call   c00162fe <malloc>
c0023126:	83 c4 0c             	add    esp,0xc
c0023129:	89 c3                	mov    ebx,eax
c002312b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023130:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0023133:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0023136:	53                   	push   ebx
c0023137:	e8 58 72 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c002313c:	83 c4 10             	add    esp,0x10
c002313f:	31 d2                	xor    edx,edx
c0023141:	b8 02 00 00 00       	mov    eax,0x2
c0023146:	85 db                	test   ebx,ebx
c0023148:	74 5b                	je     c00231a5 <SysLoadDLL(regs*)+0xa4>
c002314a:	83 ec 0c             	sub    esp,0xc
c002314d:	53                   	push   ebx
c002314e:	e8 23 75 ff ff       	call   c001a676 <File::exists()>
c0023153:	83 c4 10             	add    esp,0x10
c0023156:	84 c0                	test   al,al
c0023158:	8b 03                	mov    eax,DWORD PTR [ebx]
c002315a:	75 11                	jne    c002316d <SysLoadDLL(regs*)+0x6c>
c002315c:	83 ec 0c             	sub    esp,0xc
c002315f:	53                   	push   ebx
c0023160:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023163:	83 c4 10             	add    esp,0x10
c0023166:	b8 03 00 00 00       	mov    eax,0x3
c002316b:	eb 36                	jmp    c00231a3 <SysLoadDLL(regs*)+0xa2>
c002316d:	83 ec 0c             	sub    esp,0xc
c0023170:	53                   	push   ebx
c0023171:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023174:	58                   	pop    eax
c0023175:	5a                   	pop    edx
c0023176:	6a 00                	push   0x0
c0023178:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002317b:	e8 81 15 00 00       	call   c0024701 <Thr::loadDLL(char const*, bool)>
c0023180:	83 c4 10             	add    esp,0x10
c0023183:	89 c1                	mov    ecx,eax
c0023185:	31 d2                	xor    edx,edx
c0023187:	b8 04 00 00 00       	mov    eax,0x4
c002318c:	85 c9                	test   ecx,ecx
c002318e:	74 15                	je     c00231a5 <SysLoadDLL(regs*)+0xa4>
c0023190:	53                   	push   ebx
c0023191:	53                   	push   ebx
c0023192:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0023198:	51                   	push   ecx
c0023199:	e8 b5 17 00 00       	call   c0024953 <Thr::executeDLL(unsigned long, void*)>
c002319e:	83 c4 10             	add    esp,0x10
c00231a1:	31 c0                	xor    eax,eax
c00231a3:	31 d2                	xor    edx,edx
c00231a5:	59                   	pop    ecx
c00231a6:	5b                   	pop    ebx
c00231a7:	5e                   	pop    esi
c00231a8:	c3                   	ret    

c00231a9 <SysRead(regs*)>:
c00231a9:	57                   	push   edi
c00231aa:	56                   	push   esi
c00231ab:	53                   	push   ebx
c00231ac:	83 ec 10             	sub    esp,0x10
c00231af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00231b3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00231b6:	83 f8 02             	cmp    eax,0x2
c00231b9:	77 10                	ja     c00231cb <SysRead(regs*)+0x22>
c00231bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00231c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00231c3:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00231c9:	eb 0e                	jmp    c00231d9 <SysRead(regs*)+0x30>
c00231cb:	83 ec 0c             	sub    esp,0xc
c00231ce:	50                   	push   eax
c00231cf:	e8 27 4b ff ff       	call   c0017cfb <KeGetFileFromDescriptor(int)>
c00231d4:	83 c4 10             	add    esp,0x10
c00231d7:	89 c1                	mov    ecx,eax
c00231d9:	83 c8 ff             	or     eax,0xffffffff
c00231dc:	85 c9                	test   ecx,ecx
c00231de:	89 c2                	mov    edx,eax
c00231e0:	74 28                	je     c002320a <SysRead(regs*)+0x61>
c00231e2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00231ea:	31 ff                	xor    edi,edi
c00231ec:	83 ec 0c             	sub    esp,0xc
c00231ef:	8b 01                	mov    eax,DWORD PTR [ecx]
c00231f1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00231f5:	52                   	push   edx
c00231f6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00231f9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00231fc:	57                   	push   edi
c00231fd:	56                   	push   esi
c00231fe:	51                   	push   ecx
c00231ff:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023202:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0023206:	83 c4 20             	add    esp,0x20
c0023209:	99                   	cdq    
c002320a:	83 c4 10             	add    esp,0x10
c002320d:	5b                   	pop    ebx
c002320e:	5e                   	pop    esi
c002320f:	5f                   	pop    edi
c0023210:	c3                   	ret    

c0023211 <SysRegisterSignal(regs*)>:
c0023211:	83 ec 18             	sub    esp,0x18
c0023214:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023218:	6a 00                	push   0x0
c002321a:	6a 00                	push   0x0
c002321c:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002321f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023222:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023227:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c002322a:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0023230:	e8 f4 d7 ff ff       	call   c0020a29 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0023235:	83 c4 2c             	add    esp,0x2c
c0023238:	99                   	cdq    
c0023239:	c3                   	ret    

c002323a <SysRegistryGetTypeFromPath(regs*)>:
c002323a:	57                   	push   edi
c002323b:	56                   	push   esi
c002323c:	53                   	push   ebx
c002323d:	81 ec 38 01 00 00    	sub    esp,0x138
c0023243:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c002324a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002324d:	68 fd 29 03 c0       	push   0xc00329fd
c0023252:	e8 36 5f ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0023257:	5a                   	pop    edx
c0023258:	59                   	pop    ecx
c0023259:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c002325c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002325f:	e8 4f f6 ff ff       	call   c00228b3 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0023264:	5f                   	pop    edi
c0023265:	89 c6                	mov    esi,eax
c0023267:	5a                   	pop    edx
c0023268:	50                   	push   eax
c0023269:	68 1d 2a 03 c0       	push   0xc0032a1d
c002326e:	e8 1a 5f ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0023273:	83 c4 10             	add    esp,0x10
c0023276:	85 f6                	test   esi,esi
c0023278:	74 28                	je     c00232a2 <SysRegistryGetTypeFromPath(regs*)+0x68>
c002327a:	50                   	push   eax
c002327b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c002327f:	57                   	push   edi
c0023280:	56                   	push   esi
c0023281:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023284:	e8 0e f2 ff ff       	call   c0022497 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023289:	83 c4 0c             	add    esp,0xc
c002328c:	89 c3                	mov    ebx,eax
c002328e:	57                   	push   edi
c002328f:	50                   	push   eax
c0023290:	68 25 2a 03 c0       	push   0xc0032a25
c0023295:	e8 f3 5e ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002329a:	89 d8                	mov    eax,ebx
c002329c:	83 c4 10             	add    esp,0x10
c002329f:	99                   	cdq    
c00232a0:	eb 05                	jmp    c00232a7 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c00232a2:	83 c8 ff             	or     eax,0xffffffff
c00232a5:	89 c2                	mov    edx,eax
c00232a7:	81 c4 30 01 00 00    	add    esp,0x130
c00232ad:	5b                   	pop    ebx
c00232ae:	5e                   	pop    esi
c00232af:	5f                   	pop    edi
c00232b0:	c3                   	ret    

c00232b1 <SysRegistryReadExtent(regs*)>:
c00232b1:	83 ec 1c             	sub    esp,0x1c
c00232b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00232b8:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00232bb:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00232be:	85 c0                	test   eax,eax
c00232c0:	79 1f                	jns    c00232e1 <SysRegistryReadExtent(regs*)+0x30>
c00232c2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00232c7:	52                   	push   edx
c00232c8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00232cc:	52                   	push   edx
c00232cd:	50                   	push   eax
c00232ce:	51                   	push   ecx
c00232cf:	e8 b5 f0 ff ff       	call   c0022389 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00232d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232d8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00232dc:	83 c4 10             	add    esp,0x10
c00232df:	eb 14                	jmp    c00232f5 <SysRegistryReadExtent(regs*)+0x44>
c00232e1:	83 ec 04             	sub    esp,0x4
c00232e4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00232e7:	50                   	push   eax
c00232e8:	51                   	push   ecx
c00232e9:	e8 35 eb ff ff       	call   c0021e23 <CmGetString(Reghive_Tag*, int, char*)>
c00232ee:	83 c4 10             	add    esp,0x10
c00232f1:	31 c0                	xor    eax,eax
c00232f3:	31 d2                	xor    edx,edx
c00232f5:	83 c4 1c             	add    esp,0x1c
c00232f8:	c3                   	ret    

c00232f9 <SysRegistryPathToExtentLookup(regs*)>:
c00232f9:	53                   	push   ebx
c00232fa:	83 ec 10             	sub    esp,0x10
c00232fd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023301:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023304:	68 3b 2a 03 c0       	push   0xc0032a3b
c0023309:	e8 7f 5e ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002330e:	58                   	pop    eax
c002330f:	5a                   	pop    edx
c0023310:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0023313:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023316:	e8 98 f5 ff ff       	call   c00228b3 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c002331b:	83 c4 18             	add    esp,0x18
c002331e:	99                   	cdq    
c002331f:	5b                   	pop    ebx
c0023320:	c3                   	ret    

c0023321 <SysRegistryEnterDirectory(regs*)>:
c0023321:	53                   	push   ebx
c0023322:	83 ec 10             	sub    esp,0x10
c0023325:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023329:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002332c:	68 5e 2a 03 c0       	push   0xc0032a5e
c0023331:	e8 57 5e ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0023336:	58                   	pop    eax
c0023337:	5a                   	pop    edx
c0023338:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002333b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c002333e:	e8 57 eb ff ff       	call   c0021e9a <CmEnterDirectory(Reghive_Tag*, int)>
c0023343:	83 c4 18             	add    esp,0x18
c0023346:	99                   	cdq    
c0023347:	5b                   	pop    ebx
c0023348:	c3                   	ret    

c0023349 <SysRegistryGetNext(regs*)>:
c0023349:	53                   	push   ebx
c002334a:	83 ec 10             	sub    esp,0x10
c002334d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0023351:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023354:	68 7c 2a 03 c0       	push   0xc0032a7c
c0023359:	e8 2f 5e ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002335e:	58                   	pop    eax
c002335f:	5a                   	pop    edx
c0023360:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0023363:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023366:	e8 6e eb ff ff       	call   c0021ed9 <CmGetNext(Reghive_Tag*, int)>
c002336b:	83 c4 18             	add    esp,0x18
c002336e:	99                   	cdq    
c002336f:	5b                   	pop    ebx
c0023370:	c3                   	ret    

c0023371 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0023371:	57                   	push   edi
c0023372:	56                   	push   esi
c0023373:	53                   	push   ebx
c0023374:	81 ec 34 01 00 00    	sub    esp,0x134
c002337a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0023381:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0023385:	57                   	push   edi
c0023386:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0023389:	ff 76 20             	push   DWORD PTR [esi+0x20]
c002338c:	e8 06 f1 ff ff       	call   c0022497 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0023391:	89 c3                	mov    ebx,eax
c0023393:	58                   	pop    eax
c0023394:	5a                   	pop    edx
c0023395:	57                   	push   edi
c0023396:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0023399:	e8 a2 d2 fd ff       	call   c0000640 <strcpy>
c002339e:	89 d8                	mov    eax,ebx
c00233a0:	81 c4 40 01 00 00    	add    esp,0x140
c00233a6:	99                   	cdq    
c00233a7:	5b                   	pop    ebx
c00233a8:	5e                   	pop    esi
c00233a9:	5f                   	pop    edi
c00233aa:	c3                   	ret    

c00233ab <SysRegistryOpen(regs*)>:
c00233ab:	83 ec 18             	sub    esp,0x18
c00233ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233b2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00233b5:	e8 f9 e8 ff ff       	call   c0021cb3 <CmOpen(char const*)>
c00233ba:	83 c4 1c             	add    esp,0x1c
c00233bd:	99                   	cdq    
c00233be:	c3                   	ret    

c00233bf <SysRegistryClose(regs*)>:
c00233bf:	83 ec 18             	sub    esp,0x18
c00233c2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00233c6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00233c9:	e8 03 ea ff ff       	call   c0021dd1 <CmClose(Reghive_Tag*)>
c00233ce:	31 c0                	xor    eax,eax
c00233d0:	31 d2                	xor    edx,edx
c00233d2:	83 c4 1c             	add    esp,0x1c
c00233d5:	c3                   	ret    

c00233d6 <SysSbrk(regs*)>:
c00233d6:	56                   	push   esi
c00233d7:	53                   	push   ebx
c00233d8:	50                   	push   eax
c00233d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00233de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00233e2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00233e5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00233e8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00233ee:	85 db                	test   ebx,ebx
c00233f0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00233f3:	74 02                	je     c00233f7 <SysSbrk(regs*)+0x21>
c00233f5:	79 06                	jns    c00233fd <SysSbrk(regs*)+0x27>
c00233f7:	89 f0                	mov    eax,esi
c00233f9:	31 d2                	xor    edx,edx
c00233fb:	eb 2a                	jmp    c0023427 <SysSbrk(regs*)+0x51>
c00233fd:	83 c8 ff             	or     eax,0xffffffff
c0023400:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0023406:	89 c2                	mov    edx,eax
c0023408:	77 1d                	ja     c0023427 <SysSbrk(regs*)+0x51>
c002340a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0023410:	50                   	push   eax
c0023411:	c1 ea 0c             	shr    edx,0xc
c0023414:	68 07 0c 00 00       	push   0xc07
c0023419:	52                   	push   edx
c002341a:	51                   	push   ecx
c002341b:	e8 4c 52 ff ff       	call   c001866c <VAS::allocatePages(int, int)>
c0023420:	89 f0                	mov    eax,esi
c0023422:	31 d2                	xor    edx,edx
c0023424:	83 c4 10             	add    esp,0x10
c0023427:	59                   	pop    ecx
c0023428:	5b                   	pop    ebx
c0023429:	5e                   	pop    esi
c002342a:	c3                   	ret    

c002342b <SysSetCwd(regs*)>:
c002342b:	83 ec 14             	sub    esp,0x14
c002342e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023432:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0023435:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002343a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c002343d:	e8 d3 72 ff ff       	call   c001a715 <Fs::setcwd(Process*, char*)>
c0023442:	83 c4 1c             	add    esp,0x1c
c0023445:	99                   	cdq    
c0023446:	c3                   	ret    

c0023447 <SysSetTime(regs*)>:
c0023447:	55                   	push   ebp
c0023448:	31 c9                	xor    ecx,ecx
c002344a:	57                   	push   edi
c002344b:	bd 0c 00 00 00       	mov    ebp,0xc
c0023450:	56                   	push   esi
c0023451:	53                   	push   ebx
c0023452:	31 db                	xor    ebx,ebx
c0023454:	83 ec 10             	sub    esp,0x10
c0023457:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002345b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c002345e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0023461:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0023464:	89 c2                	mov    edx,eax
c0023466:	81 ef 6c 07 00 00    	sub    edi,0x76c
c002346c:	83 e2 1f             	and    edx,0x1f
c002346f:	c1 e7 10             	shl    edi,0x10
c0023472:	42                   	inc    edx
c0023473:	c1 e8 05             	shr    eax,0x5
c0023476:	88 d1                	mov    cl,dl
c0023478:	31 d2                	xor    edx,edx
c002347a:	f7 f5                	div    ebp
c002347c:	89 dd                	mov    ebp,ebx
c002347e:	88 d5                	mov    ch,dl
c0023480:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0023486:	0f b7 c1             	movzx  eax,cx
c0023489:	31 d2                	xor    edx,edx
c002348b:	09 f8                	or     eax,edi
c002348d:	bf 3c 00 00 00       	mov    edi,0x3c
c0023492:	89 c1                	mov    ecx,eax
c0023494:	89 f0                	mov    eax,esi
c0023496:	f7 f7                	div    edi
c0023498:	c1 e2 10             	shl    edx,0x10
c002349b:	09 d5                	or     ebp,edx
c002349d:	31 d2                	xor    edx,edx
c002349f:	89 eb                	mov    ebx,ebp
c00234a1:	f7 f7                	div    edi
c00234a3:	bf 10 0e 00 00       	mov    edi,0xe10
c00234a8:	88 d7                	mov    bh,dl
c00234aa:	89 f0                	mov    eax,esi
c00234ac:	31 d2                	xor    edx,edx
c00234ae:	f7 f7                	div    edi
c00234b0:	bf 18 00 00 00       	mov    edi,0x18
c00234b5:	31 d2                	xor    edx,edx
c00234b7:	f7 f7                	div    edi
c00234b9:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00234be:	88 d3                	mov    bl,dl
c00234c0:	53                   	push   ebx
c00234c1:	51                   	push   ecx
c00234c2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00234c8:	e8 55 7a ff ff       	call   c001af22 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00234cd:	83 c4 1c             	add    esp,0x1c
c00234d0:	83 f0 01             	xor    eax,0x1
c00234d3:	5b                   	pop    ebx
c00234d4:	0f b6 c0             	movzx  eax,al
c00234d7:	5e                   	pop    esi
c00234d8:	31 d2                	xor    edx,edx
c00234da:	5f                   	pop    edi
c00234db:	5d                   	pop    ebp
c00234dc:	c3                   	ret    

c00234dd <SysSymlink(regs*)>:
c00234dd:	56                   	push   esi
c00234de:	83 c8 ff             	or     eax,0xffffffff
c00234e1:	53                   	push   ebx
c00234e2:	89 c2                	mov    edx,eax
c00234e4:	81 ec 34 02 00 00    	sub    esp,0x234
c00234ea:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c00234f1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00234f5:	74 50                	je     c0023547 <SysSymlink(regs*)+0x6a>
c00234f7:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00234fa:	85 c9                	test   ecx,ecx
c00234fc:	74 49                	je     c0023547 <SysSymlink(regs*)+0x6a>
c00234fe:	6a 01                	push   0x1
c0023500:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023505:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023508:	05 0c 01 00 00       	add    eax,0x10c
c002350d:	50                   	push   eax
c002350e:	51                   	push   ecx
c002350f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0023513:	56                   	push   esi
c0023514:	e8 83 6b ff ff       	call   c001a09c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023519:	6a 01                	push   0x1
c002351b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023520:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023523:	05 0c 01 00 00       	add    eax,0x10c
c0023528:	50                   	push   eax
c0023529:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002352c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0023533:	53                   	push   ebx
c0023534:	e8 63 6b ff ff       	call   c001a09c <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0023539:	83 c4 18             	add    esp,0x18
c002353c:	56                   	push   esi
c002353d:	53                   	push   ebx
c002353e:	e8 68 67 ff ff       	call   c0019cab <KeCreateSymlink(char const*, char const*)>
c0023543:	83 c4 10             	add    esp,0x10
c0023546:	99                   	cdq    
c0023547:	81 c4 34 02 00 00    	add    esp,0x234
c002354d:	5b                   	pop    ebx
c002354e:	5e                   	pop    esi
c002354f:	c3                   	ret    

c0023550 <SysTimezone(regs*)>:
c0023550:	53                   	push   ebx
c0023551:	83 ec 08             	sub    esp,0x8
c0023554:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023558:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c002355c:	75 17                	jne    c0023575 <SysTimezone(regs*)+0x25>
c002355e:	83 ec 0c             	sub    esp,0xc
c0023561:	68 93 2a 03 c0       	push   0xc0032a93
c0023566:	e8 22 5c ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002356b:	83 c8 ff             	or     eax,0xffffffff
c002356e:	83 c4 10             	add    esp,0x10
c0023571:	89 c2                	mov    edx,eax
c0023573:	eb 20                	jmp    c0023595 <SysTimezone(regs*)+0x45>
c0023575:	83 ec 0c             	sub    esp,0xc
c0023578:	68 a8 2a 03 c0       	push   0xc0032aa8
c002357d:	e8 0b 5c ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0023582:	58                   	pop    eax
c0023583:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0023586:	e8 01 77 ff ff       	call   c001ac8c <User::loadClockSettings(int)>
c002358b:	83 c4 10             	add    esp,0x10
c002358e:	b8 01 00 00 00       	mov    eax,0x1
c0023593:	31 d2                	xor    edx,edx
c0023595:	83 c4 08             	add    esp,0x8
c0023598:	5b                   	pop    ebx
c0023599:	c3                   	ret    

c002359a <SysTruncate(regs*)>:
c002359a:	55                   	push   ebp
c002359b:	57                   	push   edi
c002359c:	31 ff                	xor    edi,edi
c002359e:	56                   	push   esi
c002359f:	53                   	push   ebx
c00235a0:	83 ec 0c             	sub    esp,0xc
c00235a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00235a7:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00235aa:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00235ad:	89 ce                	mov    esi,ecx
c00235af:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00235b3:	0f 84 9a 00 00 00    	je     c0023653 <SysTruncate(regs*)+0xb9>
c00235b9:	83 ec 0c             	sub    esp,0xc
c00235bc:	68 14 01 00 00       	push   0x114
c00235c1:	e8 38 2d ff ff       	call   c00162fe <malloc>
c00235c6:	83 c4 0c             	add    esp,0xc
c00235c9:	89 c3                	mov    ebx,eax
c00235cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00235d0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00235d3:	55                   	push   ebp
c00235d4:	53                   	push   ebx
c00235d5:	e8 ba 6d ff ff       	call   c001a394 <File::File(char const*, Process*)>
c00235da:	83 c4 10             	add    esp,0x10
c00235dd:	31 d2                	xor    edx,edx
c00235df:	b8 03 00 00 00       	mov    eax,0x3
c00235e4:	85 db                	test   ebx,ebx
c00235e6:	0f 84 a2 00 00 00    	je     c002368e <SysTruncate(regs*)+0xf4>
c00235ec:	51                   	push   ecx
c00235ed:	51                   	push   ecx
c00235ee:	6a 02                	push   0x2
c00235f0:	53                   	push   ebx
c00235f1:	e8 bc 6d ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c00235f6:	83 c4 10             	add    esp,0x10
c00235f9:	85 c0                	test   eax,eax
c00235fb:	74 13                	je     c0023610 <SysTruncate(regs*)+0x76>
c00235fd:	83 ec 0c             	sub    esp,0xc
c0023600:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023602:	53                   	push   ebx
c0023603:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023606:	83 c4 10             	add    esp,0x10
c0023609:	b8 04 00 00 00       	mov    eax,0x4
c002360e:	eb 7c                	jmp    c002368c <SysTruncate(regs*)+0xf2>
c0023610:	52                   	push   edx
c0023611:	57                   	push   edi
c0023612:	56                   	push   esi
c0023613:	53                   	push   ebx
c0023614:	e8 ad 6e ff ff       	call   c001a4c6 <File::truncate(unsigned long long)>
c0023619:	83 c4 10             	add    esp,0x10
c002361c:	85 c0                	test   eax,eax
c002361e:	74 1b                	je     c002363b <SysTruncate(regs*)+0xa1>
c0023620:	83 ec 0c             	sub    esp,0xc
c0023623:	53                   	push   ebx
c0023624:	e8 e7 6d ff ff       	call   c001a410 <File::close()>
c0023629:	8b 03                	mov    eax,DWORD PTR [ebx]
c002362b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002362e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023631:	83 c4 10             	add    esp,0x10
c0023634:	b8 05 00 00 00       	mov    eax,0x5
c0023639:	eb 51                	jmp    c002368c <SysTruncate(regs*)+0xf2>
c002363b:	83 ec 0c             	sub    esp,0xc
c002363e:	53                   	push   ebx
c002363f:	e8 cc 6d ff ff       	call   c001a410 <File::close()>
c0023644:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023646:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023649:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002364c:	83 c4 10             	add    esp,0x10
c002364f:	31 c0                	xor    eax,eax
c0023651:	eb 39                	jmp    c002368c <SysTruncate(regs*)+0xf2>
c0023653:	31 d2                	xor    edx,edx
c0023655:	b8 01 00 00 00       	mov    eax,0x1
c002365a:	83 fd 02             	cmp    ebp,0x2
c002365d:	7e 2f                	jle    c002368e <SysTruncate(regs*)+0xf4>
c002365f:	83 ec 0c             	sub    esp,0xc
c0023662:	51                   	push   ecx
c0023663:	e8 93 46 ff ff       	call   c0017cfb <KeGetFileFromDescriptor(int)>
c0023668:	83 c4 10             	add    esp,0x10
c002366b:	89 c1                	mov    ecx,eax
c002366d:	31 d2                	xor    edx,edx
c002366f:	b8 02 00 00 00       	mov    eax,0x2
c0023674:	85 c9                	test   ecx,ecx
c0023676:	74 16                	je     c002368e <SysTruncate(regs*)+0xf4>
c0023678:	50                   	push   eax
c0023679:	57                   	push   edi
c002367a:	56                   	push   esi
c002367b:	51                   	push   ecx
c002367c:	e8 45 6e ff ff       	call   c001a4c6 <File::truncate(unsigned long long)>
c0023681:	83 c4 10             	add    esp,0x10
c0023684:	85 c0                	test   eax,eax
c0023686:	0f 95 c0             	setne  al
c0023689:	0f b6 c0             	movzx  eax,al
c002368c:	31 d2                	xor    edx,edx
c002368e:	83 c4 0c             	add    esp,0xc
c0023691:	5b                   	pop    ebx
c0023692:	5e                   	pop    esi
c0023693:	5f                   	pop    edi
c0023694:	5d                   	pop    ebp
c0023695:	c3                   	ret    

c0023696 <SysWrite(regs*)>:
c0023696:	57                   	push   edi
c0023697:	56                   	push   esi
c0023698:	53                   	push   ebx
c0023699:	83 ec 10             	sub    esp,0x10
c002369c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00236a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00236a3:	83 f8 02             	cmp    eax,0x2
c00236a6:	77 10                	ja     c00236b8 <SysWrite(regs*)+0x22>
c00236a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00236ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00236b0:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00236b6:	eb 0e                	jmp    c00236c6 <SysWrite(regs*)+0x30>
c00236b8:	83 ec 0c             	sub    esp,0xc
c00236bb:	50                   	push   eax
c00236bc:	e8 3a 46 ff ff       	call   c0017cfb <KeGetFileFromDescriptor(int)>
c00236c1:	83 c4 10             	add    esp,0x10
c00236c4:	89 c1                	mov    ecx,eax
c00236c6:	83 c8 ff             	or     eax,0xffffffff
c00236c9:	85 c9                	test   ecx,ecx
c00236cb:	89 c2                	mov    edx,eax
c00236cd:	74 28                	je     c00236f7 <SysWrite(regs*)+0x61>
c00236cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00236d7:	31 ff                	xor    edi,edi
c00236d9:	83 ec 0c             	sub    esp,0xc
c00236dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00236de:	8d 54 24 18          	lea    edx,[esp+0x18]
c00236e2:	52                   	push   edx
c00236e3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00236e6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00236e9:	57                   	push   edi
c00236ea:	56                   	push   esi
c00236eb:	51                   	push   ecx
c00236ec:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00236ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00236f3:	83 c4 20             	add    esp,0x20
c00236f6:	99                   	cdq    
c00236f7:	83 c4 10             	add    esp,0x10
c00236fa:	5b                   	pop    ebx
c00236fb:	5e                   	pop    esi
c00236fc:	5f                   	pop    edi
c00236fd:	c3                   	ret    

c00236fe <SysWsbe(regs*)>:
c00236fe:	57                   	push   edi
c00236ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0023704:	56                   	push   esi
c0023705:	be e7 2a 03 c0       	mov    esi,0xc0032ae7
c002370a:	53                   	push   ebx
c002370b:	83 ec 30             	sub    esp,0x30
c002370e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023712:	fc                   	cld    
c0023713:	83 ec 0c             	sub    esp,0xc
c0023716:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023718:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002371c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0023721:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023724:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c002372a:	8b 06                	mov    eax,DWORD PTR [esi]
c002372c:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002372f:	57                   	push   edi
c0023730:	e8 3b ce fd ff       	call   c0000570 <strlen>
c0023735:	5a                   	pop    edx
c0023736:	8d 54 24 0c          	lea    edx,[esp+0xc]
c002373a:	52                   	push   edx
c002373b:	31 d2                	xor    edx,edx
c002373d:	57                   	push   edi
c002373e:	52                   	push   edx
c002373f:	50                   	push   eax
c0023740:	56                   	push   esi
c0023741:	ff d3                	call   ebx
c0023743:	83 c4 14             	add    esp,0x14
c0023746:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002374a:	ff 70 24             	push   DWORD PTR [eax+0x24]
c002374d:	e8 b2 21 00 00       	call   c0025904 <terminateTask(int)>
c0023752:	83 c4 40             	add    esp,0x40
c0023755:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002375a:	5b                   	pop    ebx
c002375b:	31 d2                	xor    edx,edx
c002375d:	5e                   	pop    esi
c002375e:	5f                   	pop    edi
c002375f:	c3                   	ret    

c0023760 <SysYield(regs*)>:
c0023760:	83 ec 0c             	sub    esp,0xc
c0023763:	fa                   	cli    
c0023764:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002376a:	e8 15 1a 00 00       	call   c0025184 <schedule()>
c002376f:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0023774:	48                   	dec    eax
c0023775:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002377a:	75 01                	jne    c002377d <SysYield(regs*)+0x1d>
c002377c:	fb                   	sti    
c002377d:	31 c0                	xor    eax,eax
c002377f:	31 d2                	xor    edx,edx
c0023781:	83 c4 0c             	add    esp,0xc
c0023784:	c3                   	ret    

c0023785 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0023785:	55                   	push   ebp
c0023786:	57                   	push   edi
c0023787:	56                   	push   esi
c0023788:	53                   	push   ebx
c0023789:	81 ec 2c 10 00 00    	sub    esp,0x102c
c002378f:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0023797:	0f 95 c0             	setne  al
c002379a:	31 d2                	xor    edx,edx
c002379c:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00237a4:	0f 94 c2             	sete   dl
c00237a7:	85 c2                	test   edx,eax
c00237a9:	74 34                	je     c00237df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00237ab:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00237b6:	74 27                	je     c00237df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00237b8:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00237bf:	05 00 10 00 00       	add    eax,0x1000
c00237c4:	89 c1                	mov    ecx,eax
c00237c6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00237cb:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00237d1:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00237d8:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00237df:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00237e6:	83 ec 0c             	sub    esp,0xc
c00237e9:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00237ef:	6a 01                	push   0x1
c00237f1:	e8 5f 46 ff ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c00237f6:	83 c4 10             	add    esp,0x10
c00237f9:	89 c3                	mov    ebx,eax
c00237fb:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023801:	0f 86 25 01 00 00    	jbe    c002392c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0023807:	c1 ee 0c             	shr    esi,0xc
c002380a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023811:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0023815:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002381d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0023824:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0023828:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c002382f:	29 ef                	sub    edi,ebp
c0023831:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0023835:	0f 83 f8 00 00 00    	jae    c0023933 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c002383b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0023841:	76 05                	jbe    c0023848 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0023843:	bf 00 10 00 00       	mov    edi,0x1000
c0023848:	83 ec 0c             	sub    esp,0xc
c002384b:	31 d2                	xor    edx,edx
c002384d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0023854:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023856:	8d 44 24 28          	lea    eax,[esp+0x28]
c002385a:	50                   	push   eax
c002385b:	8d 74 24 30          	lea    esi,[esp+0x30]
c002385f:	56                   	push   esi
c0023860:	52                   	push   edx
c0023861:	57                   	push   edi
c0023862:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0023869:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002386c:	83 c4 20             	add    esp,0x20
c002386f:	85 c0                	test   eax,eax
c0023871:	75 06                	jne    c0023879 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0023873:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0023877:	74 13                	je     c002388c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0023879:	83 ec 0c             	sub    esp,0xc
c002387c:	53                   	push   ebx
c002387d:	e8 f1 48 ff ff       	call   c0018173 <Virt::freeKernelVirtualPages(unsigned long)>
c0023882:	83 c4 10             	add    esp,0x10
c0023885:	31 c0                	xor    eax,eax
c0023887:	e9 7c 01 00 00       	jmp    c0023a08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c002388c:	fa                   	cli    
c002388d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023893:	e8 6f 2d ff ff       	call   c0016607 <Phys::allocatePage()>
c0023898:	6a 07                	push   0x7
c002389a:	89 c7                	mov    edi,eax
c002389c:	53                   	push   ebx
c002389d:	50                   	push   eax
c002389e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238a3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00238a6:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238ac:	e8 b7 4c ff ff       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c00238b1:	83 c4 0c             	add    esp,0xc
c00238b4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00238bb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238c1:	6a 00                	push   0x0
c00238c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238c8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00238cb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238d1:	e8 f8 4a ff ff       	call   c00183ce <VAS::mapOtherVASIn(bool, VAS*)>
c00238d6:	58                   	pop    eax
c00238d7:	5a                   	pop    edx
c00238d8:	68 07 0c 00 00       	push   0xc07
c00238dd:	55                   	push   ebp
c00238de:	57                   	push   edi
c00238df:	89 df                	mov    edi,ebx
c00238e1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00238e8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238ee:	6a 00                	push   0x0
c00238f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00238f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00238f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00238fe:	e8 b7 4e ff ff       	call   c00187ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0023903:	b9 00 10 00 00       	mov    ecx,0x1000
c0023908:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002390a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002390f:	83 c4 20             	add    esp,0x20
c0023912:	48                   	dec    eax
c0023913:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0023918:	85 c0                	test   eax,eax
c002391a:	75 01                	jne    c002391d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c002391c:	fb                   	sti    
c002391d:	81 c5 00 10 00 00    	add    ebp,0x1000
c0023923:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0023927:	e9 f1 fe ff ff       	jmp    c002381d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c002392c:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0023933:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c002393a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0023940:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0023946:	0f 86 ae 00 00 00    	jbe    c00239fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c002394c:	fa                   	cli    
c002394d:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0023953:	c1 ee 0c             	shr    esi,0xc
c0023956:	51                   	push   ecx
c0023957:	31 ff                	xor    edi,edi
c0023959:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0023960:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023966:	6a 00                	push   0x0
c0023968:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002396d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0023970:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0023976:	e8 53 4a ff ff       	call   c00183ce <VAS::mapOtherVASIn(bool, VAS*)>
c002397b:	83 c4 10             	add    esp,0x10
c002397e:	e8 84 2c ff ff       	call   c0016607 <Phys::allocatePage()>
c0023983:	47                   	inc    edi
c0023984:	6a 07                	push   0x7
c0023986:	53                   	push   ebx
c0023987:	50                   	push   eax
c0023988:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002398c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0023992:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0023995:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c002399b:	e8 c8 4b ff ff       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c00239a0:	58                   	pop    eax
c00239a1:	5a                   	pop    edx
c00239a2:	68 07 0c 00 00       	push   0xc07
c00239a7:	55                   	push   ebp
c00239a8:	81 c5 00 10 00 00    	add    ebp,0x1000
c00239ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239b2:	50                   	push   eax
c00239b3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00239ba:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239c0:	6a 00                	push   0x0
c00239c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00239c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00239ca:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00239d0:	e8 e5 4d ff ff       	call   c00187ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00239d5:	83 c4 1c             	add    esp,0x1c
c00239d8:	68 00 10 00 00       	push   0x1000
c00239dd:	6a 00                	push   0x0
c00239df:	53                   	push   ebx
c00239e0:	e8 0b cb fd ff       	call   c00004f0 <memset>
c00239e5:	83 c4 10             	add    esp,0x10
c00239e8:	39 fe                	cmp    esi,edi
c00239ea:	77 92                	ja     c002397e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00239ec:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00239f1:	48                   	dec    eax
c00239f2:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00239f7:	75 01                	jne    c00239fa <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00239f9:	fb                   	sti    
c00239fa:	83 ec 0c             	sub    esp,0xc
c00239fd:	53                   	push   ebx
c00239fe:	e8 70 47 ff ff       	call   c0018173 <Virt::freeKernelVirtualPages(unsigned long)>
c0023a03:	83 c4 10             	add    esp,0x10
c0023a06:	b0 01                	mov    al,0x1
c0023a08:	81 c4 2c 10 00 00    	add    esp,0x102c
c0023a0e:	5b                   	pop    ebx
c0023a0f:	5e                   	pop    esi
c0023a10:	5f                   	pop    edi
c0023a11:	5d                   	pop    ebp
c0023a12:	c3                   	ret    

c0023a13 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0023a13:	55                   	push   ebp
c0023a14:	57                   	push   edi
c0023a15:	56                   	push   esi
c0023a16:	53                   	push   ebx
c0023a17:	83 ec 48             	sub    esp,0x48
c0023a1a:	68 14 01 00 00       	push   0x114
c0023a1f:	e8 da 28 ff ff       	call   c00162fe <malloc>
c0023a24:	83 c4 0c             	add    esp,0xc
c0023a27:	89 c6                	mov    esi,eax
c0023a29:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0023a2d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0023a31:	50                   	push   eax
c0023a32:	e8 5d 69 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c0023a37:	58                   	pop    eax
c0023a38:	5a                   	pop    edx
c0023a39:	6a 01                	push   0x1
c0023a3b:	56                   	push   esi
c0023a3c:	e8 71 69 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c0023a41:	83 c4 10             	add    esp,0x10
c0023a44:	85 c0                	test   eax,eax
c0023a46:	0f 85 43 01 00 00    	jne    c0023b8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023a4c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0023a54:	83 ec 0c             	sub    esp,0xc
c0023a57:	6a 34                	push   0x34
c0023a59:	e8 a0 28 ff ff       	call   c00162fe <malloc>
c0023a5e:	89 c3                	mov    ebx,eax
c0023a60:	58                   	pop    eax
c0023a61:	8b 06                	mov    eax,DWORD PTR [esi]
c0023a63:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0023a67:	57                   	push   edi
c0023a68:	53                   	push   ebx
c0023a69:	6a 00                	push   0x0
c0023a6b:	6a 34                	push   0x34
c0023a6d:	56                   	push   esi
c0023a6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023a71:	83 c4 20             	add    esp,0x20
c0023a74:	85 c0                	test   eax,eax
c0023a76:	0f 85 13 01 00 00    	jne    c0023b8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023a7c:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0023a82:	0f 85 07 01 00 00    	jne    c0023b8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023a88:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0023a8b:	85 c0                	test   eax,eax
c0023a8d:	0f 84 fc 00 00 00    	je     c0023b8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023a93:	31 d2                	xor    edx,edx
c0023a95:	55                   	push   ebp
c0023a96:	52                   	push   edx
c0023a97:	50                   	push   eax
c0023a98:	56                   	push   esi
c0023a99:	e8 d2 69 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0023a9e:	83 c4 10             	add    esp,0x10
c0023aa1:	85 c0                	test   eax,eax
c0023aa3:	0f 85 e6 00 00 00    	jne    c0023b8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023aa9:	83 ec 0c             	sub    esp,0xc
c0023aac:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0023aaf:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023ab3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0023ab7:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023abb:	0f af c2             	imul   eax,edx
c0023abe:	50                   	push   eax
c0023abf:	e8 3a 28 ff ff       	call   c00162fe <malloc>
c0023ac4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023ac6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0023aca:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023acd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023ad1:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0023ad5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0023ad9:	0f af c2             	imul   eax,edx
c0023adc:	99                   	cdq    
c0023add:	52                   	push   edx
c0023ade:	50                   	push   eax
c0023adf:	56                   	push   esi
c0023ae0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023ae3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0023ae6:	83 c4 20             	add    esp,0x20
c0023ae9:	85 c0                	test   eax,eax
c0023aeb:	0f 84 9e 00 00 00    	je     c0023b8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023af1:	31 d2                	xor    edx,edx
c0023af3:	51                   	push   ecx
c0023af4:	52                   	push   edx
c0023af5:	50                   	push   eax
c0023af6:	56                   	push   esi
c0023af7:	e8 74 69 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0023afc:	83 c4 10             	add    esp,0x10
c0023aff:	85 c0                	test   eax,eax
c0023b01:	0f 85 88 00 00 00    	jne    c0023b8f <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0023b07:	83 ec 0c             	sub    esp,0xc
c0023b0a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023b0e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023b12:	31 ed                	xor    ebp,ebp
c0023b14:	0f af c2             	imul   eax,edx
c0023b17:	50                   	push   eax
c0023b18:	e8 e1 27 ff ff       	call   c00162fe <malloc>
c0023b1d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0023b1f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023b23:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023b2a:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0023b2e:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0023b32:	0f af c2             	imul   eax,edx
c0023b35:	99                   	cdq    
c0023b36:	52                   	push   edx
c0023b37:	50                   	push   eax
c0023b38:	56                   	push   esi
c0023b39:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023b3c:	83 c4 20             	add    esp,0x20
c0023b3f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0023b47:	0f b7 fd             	movzx  edi,bp
c0023b4a:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0023b4e:	73 7d                	jae    c0023bcd <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0023b50:	c1 e7 05             	shl    edi,0x5
c0023b53:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0023b57:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0023b5a:	75 6b                	jne    c0023bc7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023b5c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0023b5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023b63:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0023b66:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023b6a:	52                   	push   edx
c0023b6b:	31 d2                	xor    edx,edx
c0023b6d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0023b70:	52                   	push   edx
c0023b71:	50                   	push   eax
c0023b72:	56                   	push   esi
c0023b73:	e8 f8 68 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0023b78:	83 c4 10             	add    esp,0x10
c0023b7b:	85 c0                	test   eax,eax
c0023b7d:	74 17                	je     c0023b96 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0023b7f:	83 ec 0c             	sub    esp,0xc
c0023b82:	68 13 2b 03 c0       	push   0xc0032b13
c0023b87:	e8 01 56 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0023b8c:	83 c4 10             	add    esp,0x10
c0023b8f:	31 c0                	xor    eax,eax
c0023b91:	e9 87 00 00 00       	jmp    c0023c1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0023b96:	83 ec 0c             	sub    esp,0xc
c0023b99:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0023b9c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0023b9f:	50                   	push   eax
c0023ba0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023ba4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023ba8:	56                   	push   esi
c0023ba9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0023bad:	e8 d3 fb ff ff       	call   c0023785 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0023bb2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0023bb6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0023bba:	83 c4 20             	add    esp,0x20
c0023bbd:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0023bc1:	73 04                	jae    c0023bc7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0023bc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023bc7:	45                   	inc    ebp
c0023bc8:	e9 7a ff ff ff       	jmp    c0023b47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0023bcd:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0023bd1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023bd5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023bd9:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0023bdf:	83 ec 0c             	sub    esp,0xc
c0023be2:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0023be8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0023bed:	05 00 10 00 00       	add    eax,0x1000
c0023bf2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0023bf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023bf9:	e8 10 27 ff ff       	call   c001630e <free>
c0023bfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023c01:	e8 08 27 ff ff       	call   c001630e <free>
c0023c06:	58                   	pop    eax
c0023c07:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c0b:	e8 fe 26 ff ff       	call   c001630e <free>
c0023c10:	89 34 24             	mov    DWORD PTR [esp],esi
c0023c13:	e8 f8 67 ff ff       	call   c001a410 <File::close()>
c0023c18:	83 c4 10             	add    esp,0x10
c0023c1b:	b0 01                	mov    al,0x1
c0023c1d:	83 c4 3c             	add    esp,0x3c
c0023c20:	5b                   	pop    ebx
c0023c21:	5e                   	pop    esi
c0023c22:	5f                   	pop    edi
c0023c23:	5d                   	pop    ebp
c0023c24:	c3                   	ret    

c0023c25 <Thr::runtimeReferenceHelper()>:
c0023c25:	83 ec 18             	sub    esp,0x18
c0023c28:	68 1b 2b 03 c0       	push   0xc0032b1b
c0023c2d:	e8 5b 55 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0023c32:	fa                   	cli    
c0023c33:	83 c4 10             	add    esp,0x10
c0023c36:	eb fe                	jmp    c0023c36 <Thr::runtimeReferenceHelper()+0x11>

c0023c38 <Thr::getAddressOfKernelSymbol(char const*)>:
c0023c38:	57                   	push   edi
c0023c39:	56                   	push   esi
c0023c3a:	53                   	push   ebx
c0023c3b:	31 db                	xor    ebx,ebx
c0023c3d:	39 1d a0 01 04 c0    	cmp    DWORD PTR ds:0xc00401a0,ebx
c0023c43:	7e 3c                	jle    c0023c81 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0023c45:	8b 34 9d 20 01 04 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffbfee0]
c0023c4c:	31 ff                	xor    edi,edi
c0023c4e:	39 3c 9d 20 00 04 c0 	cmp    DWORD PTR [ebx*4-0x3ffbffe0],edi
c0023c55:	7e 27                	jle    c0023c7e <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0023c57:	50                   	push   eax
c0023c58:	50                   	push   eax
c0023c59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023c5d:	8b 06                	mov    eax,DWORD PTR [esi]
c0023c5f:	03 04 9d a0 00 04 c0 	add    eax,DWORD PTR [ebx*4-0x3ffbff60]
c0023c66:	50                   	push   eax
c0023c67:	e8 e4 ca fd ff       	call   c0000750 <strcmp>
c0023c6c:	83 c4 10             	add    esp,0x10
c0023c6f:	85 c0                	test   eax,eax
c0023c71:	75 05                	jne    c0023c78 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0023c73:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0023c76:	eb 0b                	jmp    c0023c83 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0023c78:	83 c6 10             	add    esi,0x10
c0023c7b:	47                   	inc    edi
c0023c7c:	eb d0                	jmp    c0023c4e <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0023c7e:	43                   	inc    ebx
c0023c7f:	eb bc                	jmp    c0023c3d <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0023c81:	31 c0                	xor    eax,eax
c0023c83:	5b                   	pop    ebx
c0023c84:	5e                   	pop    esi
c0023c85:	5f                   	pop    edi
c0023c86:	c3                   	ret    

c0023c87 <Thr::loadKernelSymbolTable(char const*)>:
c0023c87:	55                   	push   ebp
c0023c88:	57                   	push   edi
c0023c89:	56                   	push   esi
c0023c8a:	53                   	push   ebx
c0023c8b:	83 ec 68             	sub    esp,0x68
c0023c8e:	8b 35 f8 01 04 c0    	mov    esi,DWORD PTR ds:0xc00401f8
c0023c94:	68 14 01 00 00       	push   0x114
c0023c99:	e8 60 26 ff ff       	call   c00162fe <malloc>
c0023c9e:	83 c4 0c             	add    esp,0xc
c0023ca1:	89 c3                	mov    ebx,eax
c0023ca3:	56                   	push   esi
c0023ca4:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0023ca8:	50                   	push   eax
c0023ca9:	e8 e6 66 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c0023cae:	5e                   	pop    esi
c0023caf:	5f                   	pop    edi
c0023cb0:	6a 01                	push   0x1
c0023cb2:	53                   	push   ebx
c0023cb3:	e8 fa 66 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c0023cb8:	83 c4 10             	add    esp,0x10
c0023cbb:	85 c0                	test   eax,eax
c0023cbd:	74 0a                	je     c0023cc9 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0023cbf:	83 ec 0c             	sub    esp,0xc
c0023cc2:	68 3d 2b 03 c0       	push   0xc0032b3d
c0023cc7:	eb 34                	jmp    c0023cfd <Thr::loadKernelSymbolTable(char const*)+0x76>
c0023cc9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0023cd1:	83 ec 0c             	sub    esp,0xc
c0023cd4:	6a 34                	push   0x34
c0023cd6:	e8 23 26 ff ff       	call   c00162fe <malloc>
c0023cdb:	59                   	pop    ecx
c0023cdc:	89 c7                	mov    edi,eax
c0023cde:	8d 74 24 34          	lea    esi,[esp+0x34]
c0023ce2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023ce4:	56                   	push   esi
c0023ce5:	57                   	push   edi
c0023ce6:	6a 00                	push   0x0
c0023ce8:	6a 34                	push   0x34
c0023cea:	53                   	push   ebx
c0023ceb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023cee:	83 c4 20             	add    esp,0x20
c0023cf1:	85 c0                	test   eax,eax
c0023cf3:	74 17                	je     c0023d0c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0023cf5:	83 ec 0c             	sub    esp,0xc
c0023cf8:	68 54 2b 03 c0       	push   0xc0032b54
c0023cfd:	e8 a4 c4 ff ff       	call   c00201a6 <KePanic(char const*)>
c0023d02:	83 c4 10             	add    esp,0x10
c0023d05:	31 c0                	xor    eax,eax
c0023d07:	e9 31 02 00 00       	jmp    c0023f3d <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0023d0c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023d12:	75 e1                	jne    c0023cf5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023d14:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023d17:	85 c0                	test   eax,eax
c0023d19:	74 da                	je     c0023cf5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023d1b:	52                   	push   edx
c0023d1c:	31 d2                	xor    edx,edx
c0023d1e:	52                   	push   edx
c0023d1f:	50                   	push   eax
c0023d20:	53                   	push   ebx
c0023d21:	e8 4a 67 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0023d26:	83 c4 10             	add    esp,0x10
c0023d29:	85 c0                	test   eax,eax
c0023d2b:	75 c8                	jne    c0023cf5 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0023d2d:	83 ec 0c             	sub    esp,0xc
c0023d30:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023d34:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023d38:	31 ed                	xor    ebp,ebp
c0023d3a:	0f af c2             	imul   eax,edx
c0023d3d:	50                   	push   eax
c0023d3e:	e8 bb 25 ff ff       	call   c00162fe <malloc>
c0023d43:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023d45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023d49:	89 34 24             	mov    DWORD PTR [esp],esi
c0023d4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023d50:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023d54:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0023d58:	0f af c2             	imul   eax,edx
c0023d5b:	99                   	cdq    
c0023d5c:	52                   	push   edx
c0023d5d:	50                   	push   eax
c0023d5e:	53                   	push   ebx
c0023d5f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023d62:	83 c4 20             	add    esp,0x20
c0023d65:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0023d6d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0023d75:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023d7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0023d85:	0f b7 f5             	movzx  esi,bp
c0023d88:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0023d8c:	0f 83 a7 00 00 00    	jae    c0023e39 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0023d92:	6b f6 28             	imul   esi,esi,0x28
c0023d95:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0023d99:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0023d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023da0:	50                   	push   eax
c0023da1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0023da5:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0023da9:	8b 16                	mov    edx,DWORD PTR [esi]
c0023dab:	6b c0 28             	imul   eax,eax,0x28
c0023dae:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0023db2:	89 d0                	mov    eax,edx
c0023db4:	31 d2                	xor    edx,edx
c0023db6:	52                   	push   edx
c0023db7:	50                   	push   eax
c0023db8:	53                   	push   ebx
c0023db9:	e8 b2 66 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0023dbe:	83 c4 0c             	add    esp,0xc
c0023dc1:	6a 20                	push   0x20
c0023dc3:	6a 00                	push   0x0
c0023dc5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023dc9:	52                   	push   edx
c0023dca:	e8 21 c7 fd ff       	call   c00004f0 <memset>
c0023dcf:	58                   	pop    eax
c0023dd0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dd2:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0023dd6:	51                   	push   ecx
c0023dd7:	8d 54 24 40          	lea    edx,[esp+0x40]
c0023ddb:	52                   	push   edx
c0023ddc:	6a 00                	push   0x0
c0023dde:	6a 1f                	push   0x1f
c0023de0:	53                   	push   ebx
c0023de1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023de4:	83 c4 18             	add    esp,0x18
c0023de7:	68 6b 2b 03 c0       	push   0xc0032b6b
c0023dec:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0023df0:	52                   	push   edx
c0023df1:	e8 5a c9 fd ff       	call   c0000750 <strcmp>
c0023df6:	83 c4 10             	add    esp,0x10
c0023df9:	85 c0                	test   eax,eax
c0023dfb:	75 0f                	jne    c0023e0c <Thr::loadKernelSymbolTable(char const*)+0x185>
c0023dfd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023e00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e0c:	50                   	push   eax
c0023e0d:	50                   	push   eax
c0023e0e:	68 73 2b 03 c0       	push   0xc0032b73
c0023e13:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0023e17:	50                   	push   eax
c0023e18:	e8 33 c9 fd ff       	call   c0000750 <strcmp>
c0023e1d:	83 c4 10             	add    esp,0x10
c0023e20:	85 c0                	test   eax,eax
c0023e22:	75 0f                	jne    c0023e33 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0023e24:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0023e27:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023e2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0023e33:	45                   	inc    ebp
c0023e34:	e9 4c ff ff ff       	jmp    c0023d85 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0023e39:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0023e3e:	75 10                	jne    c0023e50 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0023e40:	83 ec 0c             	sub    esp,0xc
c0023e43:	68 7b 2b 03 c0       	push   0xc0032b7b
c0023e48:	e8 59 c3 ff ff       	call   c00201a6 <KePanic(char const*)>
c0023e4d:	83 c4 10             	add    esp,0x10
c0023e50:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0023e55:	75 10                	jne    c0023e67 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0023e57:	83 ec 0c             	sub    esp,0xc
c0023e5a:	68 7b 2b 03 c0       	push   0xc0032b7b
c0023e5f:	e8 42 c3 ff ff       	call   c00201a6 <KePanic(char const*)>
c0023e64:	83 c4 10             	add    esp,0x10
c0023e67:	31 d2                	xor    edx,edx
c0023e69:	50                   	push   eax
c0023e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023e6e:	52                   	push   edx
c0023e6f:	50                   	push   eax
c0023e70:	53                   	push   ebx
c0023e71:	e8 fa 65 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0023e76:	5a                   	pop    edx
c0023e77:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0023e7b:	e8 7e 24 ff ff       	call   c00162fe <malloc>
c0023e80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0023e84:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023e88:	31 c9                	xor    ecx,ecx
c0023e8a:	5e                   	pop    esi
c0023e8b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e8d:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0023e91:	55                   	push   ebp
c0023e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023e96:	51                   	push   ecx
c0023e97:	52                   	push   edx
c0023e98:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0023e9c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0023ea0:	53                   	push   ebx
c0023ea1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ea4:	83 c4 14             	add    esp,0x14
c0023ea7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023eab:	e8 4e 24 ff ff       	call   c00162fe <malloc>
c0023eb0:	89 c6                	mov    esi,eax
c0023eb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023eb4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023eb7:	56                   	push   esi
c0023eb8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0023ebc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023ec0:	51                   	push   ecx
c0023ec1:	52                   	push   edx
c0023ec2:	53                   	push   ebx
c0023ec3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023ec6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023eca:	8b 15 a0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401a0
c0023ed0:	83 c4 1c             	add    esp,0x1c
c0023ed3:	c1 e8 04             	shr    eax,0x4
c0023ed6:	89 04 95 20 00 04 c0 	mov    DWORD PTR [edx*4-0x3ffbffe0],eax
c0023edd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ee1:	31 d2                	xor    edx,edx
c0023ee3:	52                   	push   edx
c0023ee4:	50                   	push   eax
c0023ee5:	53                   	push   ebx
c0023ee6:	e8 85 65 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0023eeb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0023eed:	31 d2                	xor    edx,edx
c0023eef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0023ef2:	56                   	push   esi
c0023ef3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023ef7:	52                   	push   edx
c0023ef8:	50                   	push   eax
c0023ef9:	53                   	push   ebx
c0023efa:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0023efd:	83 c4 14             	add    esp,0x14
c0023f00:	53                   	push   ebx
c0023f01:	e8 0a 65 ff ff       	call   c001a410 <File::close()>
c0023f06:	5d                   	pop    ebp
c0023f07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f0b:	e8 fe 23 ff ff       	call   c001630e <free>
c0023f10:	89 3c 24             	mov    DWORD PTR [esp],edi
c0023f13:	e8 f6 23 ff ff       	call   c001630e <free>
c0023f18:	a1 a0 01 04 c0       	mov    eax,ds:0xc00401a0
c0023f1d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023f21:	8d 50 01             	lea    edx,[eax+0x1]
c0023f24:	89 0c 85 20 01 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfee0],ecx
c0023f2b:	89 34 85 a0 00 04 c0 	mov    DWORD PTR [eax*4-0x3ffbff60],esi
c0023f32:	89 15 a0 01 04 c0    	mov    DWORD PTR ds:0xc00401a0,edx
c0023f38:	83 c4 10             	add    esp,0x10
c0023f3b:	b0 01                	mov    al,0x1
c0023f3d:	83 c4 5c             	add    esp,0x5c
c0023f40:	5b                   	pop    ebx
c0023f41:	5e                   	pop    esi
c0023f42:	5f                   	pop    edi
c0023f43:	5d                   	pop    ebp
c0023f44:	c3                   	ret    

c0023f45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0023f45:	55                   	push   ebp
c0023f46:	57                   	push   edi
c0023f47:	56                   	push   esi
c0023f48:	53                   	push   ebx
c0023f49:	81 ec 68 03 00 00    	sub    esp,0x368
c0023f4f:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0023f56:	8b 1d f8 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401f8
c0023f5c:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0023f60:	68 14 01 00 00       	push   0x114
c0023f65:	e8 94 23 ff ff       	call   c00162fe <malloc>
c0023f6a:	83 c4 0c             	add    esp,0xc
c0023f6d:	89 c5                	mov    ebp,eax
c0023f6f:	53                   	push   ebx
c0023f70:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0023f77:	50                   	push   eax
c0023f78:	e8 17 64 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c0023f7d:	5e                   	pop    esi
c0023f7e:	5f                   	pop    edi
c0023f7f:	6a 01                	push   0x1
c0023f81:	55                   	push   ebp
c0023f82:	e8 2b 64 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c0023f87:	83 c4 10             	add    esp,0x10
c0023f8a:	85 c0                	test   eax,eax
c0023f8c:	0f 85 aa 06 00 00    	jne    c002463c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023f92:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0023f9a:	83 ec 0c             	sub    esp,0xc
c0023f9d:	6a 34                	push   0x34
c0023f9f:	e8 5a 23 ff ff       	call   c00162fe <malloc>
c0023fa4:	5b                   	pop    ebx
c0023fa5:	89 c7                	mov    edi,eax
c0023fa7:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0023fab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023fae:	53                   	push   ebx
c0023faf:	57                   	push   edi
c0023fb0:	6a 00                	push   0x0
c0023fb2:	6a 34                	push   0x34
c0023fb4:	55                   	push   ebp
c0023fb5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0023fb8:	83 c4 20             	add    esp,0x20
c0023fbb:	85 c0                	test   eax,eax
c0023fbd:	0f 85 79 06 00 00    	jne    c002463c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023fc3:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0023fc9:	0f 85 6d 06 00 00    	jne    c002463c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023fcf:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0023fd2:	85 c0                	test   eax,eax
c0023fd4:	0f 84 62 06 00 00    	je     c002463c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023fda:	31 d2                	xor    edx,edx
c0023fdc:	51                   	push   ecx
c0023fdd:	52                   	push   edx
c0023fde:	50                   	push   eax
c0023fdf:	55                   	push   ebp
c0023fe0:	e8 8b 64 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0023fe5:	83 c4 10             	add    esp,0x10
c0023fe8:	85 c0                	test   eax,eax
c0023fea:	0f 85 4c 06 00 00    	jne    c002463c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0023ff0:	83 ec 0c             	sub    esp,0xc
c0023ff3:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0023ff6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0023ffa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023ffe:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024002:	0f af c2             	imul   eax,edx
c0024005:	50                   	push   eax
c0024006:	e8 f3 22 ff ff       	call   c00162fe <malloc>
c002400b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c002400e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024012:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024015:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024019:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c002401d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0024021:	0f af c2             	imul   eax,edx
c0024024:	99                   	cdq    
c0024025:	52                   	push   edx
c0024026:	50                   	push   eax
c0024027:	55                   	push   ebp
c0024028:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c002402b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c002402e:	83 c4 20             	add    esp,0x20
c0024031:	85 c0                	test   eax,eax
c0024033:	0f 84 03 06 00 00    	je     c002463c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0024039:	52                   	push   edx
c002403a:	31 d2                	xor    edx,edx
c002403c:	52                   	push   edx
c002403d:	50                   	push   eax
c002403e:	55                   	push   ebp
c002403f:	e8 2c 64 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0024044:	83 c4 10             	add    esp,0x10
c0024047:	85 c0                	test   eax,eax
c0024049:	0f 85 ed 05 00 00    	jne    c002463c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002404f:	83 ec 0c             	sub    esp,0xc
c0024052:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0024056:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c002405a:	31 f6                	xor    esi,esi
c002405c:	0f af c2             	imul   eax,edx
c002405f:	50                   	push   eax
c0024060:	e8 99 22 ff ff       	call   c00162fe <malloc>
c0024065:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024068:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002406c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002406f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0024073:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0024077:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c002407b:	0f af c2             	imul   eax,edx
c002407e:	99                   	cdq    
c002407f:	52                   	push   edx
c0024080:	50                   	push   eax
c0024081:	55                   	push   ebp
c0024082:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024085:	83 c4 20             	add    esp,0x20
c0024088:	0f b7 de             	movzx  ebx,si
c002408b:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c002408f:	0f 83 87 00 00 00    	jae    c002411c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0024095:	c1 e3 05             	shl    ebx,0x5
c0024098:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c002409c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c002409f:	75 75                	jne    c0024116 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00240a1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00240a4:	31 d2                	xor    edx,edx
c00240a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00240aa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00240ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00240b1:	50                   	push   eax
c00240b2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00240b5:	52                   	push   edx
c00240b6:	50                   	push   eax
c00240b7:	55                   	push   ebp
c00240b8:	e8 b3 63 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c00240bd:	83 c4 10             	add    esp,0x10
c00240c0:	85 c0                	test   eax,eax
c00240c2:	0f 85 74 05 00 00    	jne    c002463c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00240c8:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00240cf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00240d2:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00240d6:	31 d2                	xor    edx,edx
c00240d8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00240dc:	83 ec 0c             	sub    esp,0xc
c00240df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00240e3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00240ea:	50                   	push   eax
c00240eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00240ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00240f3:	52                   	push   edx
c00240f4:	50                   	push   eax
c00240f5:	55                   	push   ebp
c00240f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00240f9:	83 c4 1c             	add    esp,0x1c
c00240fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00240ff:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0024102:	50                   	push   eax
c0024103:	6a 00                	push   0x0
c0024105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024109:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c002410d:	50                   	push   eax
c002410e:	e8 dd c3 fd ff       	call   c00004f0 <memset>
c0024113:	83 c4 10             	add    esp,0x10
c0024116:	46                   	inc    esi
c0024117:	e9 6c ff ff ff       	jmp    c0024088 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c002411c:	53                   	push   ebx
c002411d:	31 db                	xor    ebx,ebx
c002411f:	68 00 01 00 00       	push   0x100
c0024124:	6a 00                	push   0x0
c0024126:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002412a:	50                   	push   eax
c002412b:	e8 c0 c3 fd ff       	call   c00004f0 <memset>
c0024130:	83 c4 0c             	add    esp,0xc
c0024133:	68 00 01 00 00       	push   0x100
c0024138:	6a 00                	push   0x0
c002413a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0024141:	50                   	push   eax
c0024142:	e8 a9 c3 fd ff       	call   c00004f0 <memset>
c0024147:	83 c4 10             	add    esp,0x10
c002414a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0024152:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c002415a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0024162:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c002416a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0024172:	0f b7 f3             	movzx  esi,bx
c0024175:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0024179:	0f 83 2d 01 00 00    	jae    c00242ac <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c002417f:	6b f6 28             	imul   esi,esi,0x28
c0024182:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024186:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0024189:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002418d:	52                   	push   edx
c002418e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0024192:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0024196:	8b 06                	mov    eax,DWORD PTR [esi]
c0024198:	6b d2 28             	imul   edx,edx,0x28
c002419b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c002419f:	31 d2                	xor    edx,edx
c00241a1:	52                   	push   edx
c00241a2:	50                   	push   eax
c00241a3:	55                   	push   ebp
c00241a4:	e8 c7 62 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c00241a9:	83 c4 0c             	add    esp,0xc
c00241ac:	6a 20                	push   0x20
c00241ae:	6a 00                	push   0x0
c00241b0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00241b7:	51                   	push   ecx
c00241b8:	e8 33 c3 fd ff       	call   c00004f0 <memset>
c00241bd:	59                   	pop    ecx
c00241be:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00241c1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00241c5:	52                   	push   edx
c00241c6:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00241cd:	51                   	push   ecx
c00241ce:	6a 00                	push   0x0
c00241d0:	6a 1f                	push   0x1f
c00241d2:	55                   	push   ebp
c00241d3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00241d6:	83 c4 1c             	add    esp,0x1c
c00241d9:	6a 09                	push   0x9
c00241db:	68 95 2b 03 c0       	push   0xc0032b95
c00241e0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00241e7:	51                   	push   ecx
c00241e8:	e8 93 c1 fd ff       	call   c0000380 <memcmp>
c00241ed:	83 c4 10             	add    esp,0x10
c00241f0:	85 c0                	test   eax,eax
c00241f2:	75 21                	jne    c0024215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00241f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00241f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00241fc:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0024200:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024204:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024207:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c002420e:	89 d0                	mov    eax,edx
c0024210:	40                   	inc    eax
c0024211:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024215:	50                   	push   eax
c0024216:	6a 09                	push   0x9
c0024218:	68 9f 2b 03 c0       	push   0xc0032b9f
c002421d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024224:	50                   	push   eax
c0024225:	e8 56 c1 fd ff       	call   c0000380 <memcmp>
c002422a:	83 c4 10             	add    esp,0x10
c002422d:	85 c0                	test   eax,eax
c002422f:	75 21                	jne    c0024252 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0024231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024235:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024239:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002423d:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0024241:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024244:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c002424b:	89 d0                	mov    eax,edx
c002424d:	40                   	inc    eax
c002424e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024252:	50                   	push   eax
c0024253:	50                   	push   eax
c0024254:	68 6b 2b 03 c0       	push   0xc0032b6b
c0024259:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024260:	50                   	push   eax
c0024261:	e8 ea c4 fd ff       	call   c0000750 <strcmp>
c0024266:	83 c4 10             	add    esp,0x10
c0024269:	85 c0                	test   eax,eax
c002426b:	75 0f                	jne    c002427c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c002426d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0024270:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024274:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024278:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002427c:	50                   	push   eax
c002427d:	50                   	push   eax
c002427e:	68 73 2b 03 c0       	push   0xc0032b73
c0024283:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002428a:	50                   	push   eax
c002428b:	e8 c0 c4 fd ff       	call   c0000750 <strcmp>
c0024290:	83 c4 10             	add    esp,0x10
c0024293:	85 c0                	test   eax,eax
c0024295:	75 0f                	jne    c00242a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0024297:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c002429a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002429e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00242a2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00242a6:	43                   	inc    ebx
c00242a7:	e9 c6 fe ff ff       	jmp    c0024172 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00242ac:	31 d2                	xor    edx,edx
c00242ae:	50                   	push   eax
c00242af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00242b3:	52                   	push   edx
c00242b4:	50                   	push   eax
c00242b5:	55                   	push   ebp
c00242b6:	e8 b5 61 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c00242bb:	58                   	pop    eax
c00242bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00242c0:	e8 39 20 ff ff       	call   c00162fe <malloc>
c00242c5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00242c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00242cc:	31 d2                	xor    edx,edx
c00242ce:	58                   	pop    eax
c00242cf:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00242d3:	53                   	push   ebx
c00242d4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00242d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00242dc:	52                   	push   edx
c00242dd:	50                   	push   eax
c00242de:	55                   	push   ebp
c00242df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00242e2:	83 c4 14             	add    esp,0x14
c00242e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00242e9:	e8 10 20 ff ff       	call   c00162fe <malloc>
c00242ee:	31 d2                	xor    edx,edx
c00242f0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00242f4:	83 c4 0c             	add    esp,0xc
c00242f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00242fb:	52                   	push   edx
c00242fc:	50                   	push   eax
c00242fd:	55                   	push   ebp
c00242fe:	e8 6d 61 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0024303:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024306:	31 d2                	xor    edx,edx
c0024308:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002430b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002430f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0024313:	52                   	push   edx
c0024314:	50                   	push   eax
c0024315:	55                   	push   ebp
c0024316:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024319:	83 c4 20             	add    esp,0x20
c002431c:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0024321:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0024329:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002432d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024331:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0024335:	0f 84 05 03 00 00    	je     c0024640 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c002433b:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0024342:	31 d2                	xor    edx,edx
c0024344:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024348:	c1 e8 03             	shr    eax,0x3
c002434b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c002434f:	51                   	push   ecx
c0024350:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024354:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0024358:	52                   	push   edx
c0024359:	50                   	push   eax
c002435a:	55                   	push   ebp
c002435b:	e8 10 61 ff ff       	call   c001a470 <File::seek(unsigned long long)>
c0024360:	5b                   	pop    ebx
c0024361:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024365:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c002436c:	e8 8d 1f ff ff       	call   c00162fe <malloc>
c0024371:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0024374:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024378:	31 d2                	xor    edx,edx
c002437a:	5e                   	pop    esi
c002437b:	8d 44 24 58          	lea    eax,[esp+0x58]
c002437f:	50                   	push   eax
c0024380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024384:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024388:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c002438f:	52                   	push   edx
c0024390:	50                   	push   eax
c0024391:	55                   	push   ebp
c0024392:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0024395:	83 c4 20             	add    esp,0x20
c0024398:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00243a0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00243a4:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00243a8:	0f 8d 76 02 00 00    	jge    c0024624 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00243ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00243b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243b6:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00243bb:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00243be:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00243c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00243c6:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00243ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00243ce:	c1 e8 08             	shr    eax,0x8
c00243d1:	89 c6                	mov    esi,eax
c00243d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00243d7:	c1 e6 04             	shl    esi,0x4
c00243da:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00243de:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c00243e1:	85 db                	test   ebx,ebx
c00243e3:	0f 85 b3 00 00 00    	jne    c002449c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00243e9:	83 ec 0c             	sub    esp,0xc
c00243ec:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00243f0:	03 06                	add    eax,DWORD PTR [esi]
c00243f2:	50                   	push   eax
c00243f3:	e8 40 f8 ff ff       	call   c0023c38 <Thr::getAddressOfKernelSymbol(char const*)>
c00243f8:	83 c4 10             	add    esp,0x10
c00243fb:	89 c3                	mov    ebx,eax
c00243fd:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0024402:	85 c0                	test   eax,eax
c0024404:	0f 85 92 00 00 00    	jne    c002449c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c002440a:	83 ec 0c             	sub    esp,0xc
c002440d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024411:	03 06                	add    eax,DWORD PTR [esi]
c0024413:	50                   	push   eax
c0024414:	e8 7b bf ff ff       	call   c0020394 <KeResolveCompatibilitySymbol(char*)>
c0024419:	83 c4 10             	add    esp,0x10
c002441c:	89 c3                	mov    ebx,eax
c002441e:	85 c0                	test   eax,eax
c0024420:	75 7a                	jne    c002449c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0024422:	51                   	push   ecx
c0024423:	51                   	push   ecx
c0024424:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024428:	03 06                	add    eax,DWORD PTR [esi]
c002442a:	50                   	push   eax
c002442b:	68 a9 2b 03 c0       	push   0xc0032ba9
c0024430:	e8 58 4d ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0024435:	58                   	pop    eax
c0024436:	5a                   	pop    edx
c0024437:	68 c3 2b 03 c0       	push   0xc0032bc3
c002443c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024443:	50                   	push   eax
c0024444:	e8 f7 c1 fd ff       	call   c0000640 <strcpy>
c0024449:	59                   	pop    ecx
c002444a:	58                   	pop    eax
c002444b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002444f:	03 06                	add    eax,DWORD PTR [esi]
c0024451:	50                   	push   eax
c0024452:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0024459:	50                   	push   eax
c002445a:	e8 e1 c3 fd ff       	call   c0000840 <strcat>
c002445f:	58                   	pop    eax
c0024460:	5a                   	pop    edx
c0024461:	68 5d 2c 03 c0       	push   0xc0032c5d
c0024466:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002446d:	50                   	push   eax
c002446e:	e8 cd c3 fd ff       	call   c0000840 <strcat>
c0024473:	83 c4 10             	add    esp,0x10
c0024476:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002447b:	0f 84 5d 01 00 00    	je     c00245de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0024481:	83 ec 0c             	sub    esp,0xc
c0024484:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c002448b:	50                   	push   eax
c002448c:	e8 15 bd ff ff       	call   c00201a6 <KePanic(char const*)>
c0024491:	83 c4 10             	add    esp,0x10
c0024494:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0024498:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c002449c:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00244a1:	83 f8 01             	cmp    eax,0x1
c00244a4:	0f 85 8f 00 00 00    	jne    c0024539 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00244aa:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00244b1:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00244b5:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00244b9:	01 ce                	add    esi,ecx
c00244bb:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00244c3:	0f 94 c0             	sete   al
c00244c6:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00244ce:	0f 94 c2             	sete   dl
c00244d1:	09 c2                	or     edx,eax
c00244d3:	8b 06                	mov    eax,DWORD PTR [esi]
c00244d5:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00244da:	0f b6 d2             	movzx  edx,dl
c00244dd:	74 41                	je     c0024520 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c00244df:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c00244e2:	85 d2                	test   edx,edx
c00244e4:	75 15                	jne    c00244fb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c00244e6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00244ea:	66 83 f8 0c          	cmp    ax,0xc
c00244ee:	76 05                	jbe    c00244f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c00244f0:	b8 0c 00 00 00       	mov    eax,0xc
c00244f5:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00244f9:	76 37                	jbe    c0024532 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00244fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00244ff:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0024504:	0f 84 d4 00 00 00    	je     c00245de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c002450a:	83 ec 0c             	sub    esp,0xc
c002450d:	68 da 2b 03 c0       	push   0xc0032bda
c0024512:	e8 8f bc ff ff       	call   c00201a6 <KePanic(char const*)>
c0024517:	83 c4 10             	add    esp,0x10
c002451a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002451e:	eb 12                	jmp    c0024532 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024520:	01 c1                	add    ecx,eax
c0024522:	85 d2                	test   edx,edx
c0024524:	75 0c                	jne    c0024532 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024526:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c002452a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c002452e:	77 02                	ja     c0024532 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0024530:	01 d9                	add    ecx,ebx
c0024532:	89 0e                	mov    DWORD PTR [esi],ecx
c0024534:	e9 e2 00 00 00       	jmp    c002461b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0024539:	83 f8 02             	cmp    eax,0x2
c002453c:	75 77                	jne    c00245b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c002453e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0024545:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0024549:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c002454d:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0024555:	74 21                	je     c0024578 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024557:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c002455f:	74 17                	je     c0024578 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0024561:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0024565:	b8 0a 00 00 00       	mov    eax,0xa
c002456a:	83 fa 0e             	cmp    edx,0xe
c002456d:	77 03                	ja     c0024572 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c002456f:	8d 42 fc             	lea    eax,[edx-0x4]
c0024572:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0024576:	76 17                	jbe    c002458f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0024578:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002457d:	74 5f                	je     c00245de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c002457f:	83 ec 0c             	sub    esp,0xc
c0024582:	68 f6 2b 03 c0       	push   0xc0032bf6
c0024587:	e8 1a bc ff ff       	call   c00201a6 <KePanic(char const*)>
c002458c:	83 c4 10             	add    esp,0x10
c002458f:	8b 06                	mov    eax,DWORD PTR [esi]
c0024591:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0024596:	74 13                	je     c00245ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0024598:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002459c:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00245a3:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00245a7:	01 d0                	add    eax,edx
c00245a9:	eb 04                	jmp    c00245af <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00245ab:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00245af:	01 c3                	add    ebx,eax
c00245b1:	89 1e                	mov    DWORD PTR [esi],ebx
c00245b3:	eb 66                	jmp    c002461b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00245b5:	52                   	push   edx
c00245b6:	52                   	push   edx
c00245b7:	50                   	push   eax
c00245b8:	68 12 2c 03 c0       	push   0xc0032c12
c00245bd:	e8 cb 4b ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00245c2:	83 c4 10             	add    esp,0x10
c00245c5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00245ca:	74 12                	je     c00245de <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00245cc:	83 ec 0c             	sub    esp,0xc
c00245cf:	68 1d 2c 03 c0       	push   0xc0032c1d
c00245d4:	e8 cd bb ff ff       	call   c00201a6 <KePanic(char const*)>
c00245d9:	83 c4 10             	add    esp,0x10
c00245dc:	eb 3d                	jmp    c002461b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00245de:	83 ec 0c             	sub    esp,0xc
c00245e1:	55                   	push   ebp
c00245e2:	e8 29 5e ff ff       	call   c001a410 <File::close()>
c00245e7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00245ea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00245ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00245f0:	59                   	pop    ecx
c00245f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00245f5:	e8 14 1d ff ff       	call   c001630e <free>
c00245fa:	5b                   	pop    ebx
c00245fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00245ff:	e8 0a 1d ff ff       	call   c001630e <free>
c0024604:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024607:	e8 02 1d ff ff       	call   c001630e <free>
c002460c:	5e                   	pop    esi
c002460d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024611:	e8 f8 1c ff ff       	call   c001630e <free>
c0024616:	83 c4 10             	add    esp,0x10
c0024619:	eb 21                	jmp    c002463c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c002461b:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c002461f:	e9 7c fd ff ff       	jmp    c00243a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0024624:	83 ec 0c             	sub    esp,0xc
c0024627:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002462b:	e8 de 1c ff ff       	call   c001630e <free>
c0024630:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0024634:	83 c4 10             	add    esp,0x10
c0024637:	e9 f1 fc ff ff       	jmp    c002432d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c002463c:	31 c0                	xor    eax,eax
c002463e:	eb 33                	jmp    c0024673 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0024640:	83 ec 0c             	sub    esp,0xc
c0024643:	55                   	push   ebp
c0024644:	e8 c7 5d ff ff       	call   c001a410 <File::close()>
c0024649:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002464c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002464f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024652:	58                   	pop    eax
c0024653:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024657:	e8 b2 1c ff ff       	call   c001630e <free>
c002465c:	89 3c 24             	mov    DWORD PTR [esp],edi
c002465f:	e8 aa 1c ff ff       	call   c001630e <free>
c0024664:	5a                   	pop    edx
c0024665:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024669:	e8 a0 1c ff ff       	call   c001630e <free>
c002466e:	83 c4 10             	add    esp,0x10
c0024671:	b0 01                	mov    al,0x1
c0024673:	81 c4 5c 03 00 00    	add    esp,0x35c
c0024679:	5b                   	pop    ebx
c002467a:	5e                   	pop    esi
c002467b:	5f                   	pop    edi
c002467c:	5d                   	pop    ebp
c002467d:	c3                   	ret    

c002467e <Thr::getDriverBaseFromAddress(unsigned long)>:
c002467e:	56                   	push   esi
c002467f:	31 d2                	xor    edx,edx
c0024681:	53                   	push   ebx
c0024682:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c0024688:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002468c:	39 d3                	cmp    ebx,edx
c002468e:	7e 1b                	jle    c00246ab <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0024690:	8b 04 95 20 fc 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc03e0]
c0024697:	39 c8                	cmp    eax,ecx
c0024699:	77 0d                	ja     c00246a8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c002469b:	8b 34 95 20 fa 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffc05e0]
c00246a2:	01 c6                	add    esi,eax
c00246a4:	39 ce                	cmp    esi,ecx
c00246a6:	77 05                	ja     c00246ad <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00246a8:	42                   	inc    edx
c00246a9:	eb e1                	jmp    c002468c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00246ab:	31 c0                	xor    eax,eax
c00246ad:	5b                   	pop    ebx
c00246ae:	5e                   	pop    esi
c00246af:	c3                   	ret    

c00246b0 <Thr::getDriverNameFromAddress(unsigned long)>:
c00246b0:	53                   	push   ebx
c00246b1:	31 c0                	xor    eax,eax
c00246b3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00246b7:	8b 1d 00 fa 03 c0    	mov    ebx,DWORD PTR ds:0xc003fa00
c00246bd:	39 c3                	cmp    ebx,eax
c00246bf:	7e 22                	jle    c00246e3 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00246c1:	8b 14 85 20 fc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc03e0]
c00246c8:	39 ca                	cmp    edx,ecx
c00246ca:	77 14                	ja     c00246e0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00246cc:	03 14 85 20 fa 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffc05e0]
c00246d3:	39 ca                	cmp    edx,ecx
c00246d5:	76 09                	jbe    c00246e0 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00246d7:	8b 04 85 20 fe 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc01e0]
c00246de:	eb 05                	jmp    c00246e5 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00246e0:	40                   	inc    eax
c00246e1:	eb da                	jmp    c00246bd <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00246e3:	31 c0                	xor    eax,eax
c00246e5:	5b                   	pop    ebx
c00246e6:	c3                   	ret    

c00246e7 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00246e7:	53                   	push   ebx
c00246e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00246ec:	53                   	push   ebx
c00246ed:	e8 8c ff ff ff       	call   c002467e <Thr::getDriverBaseFromAddress(unsigned long)>
c00246f2:	5a                   	pop    edx
c00246f3:	31 d2                	xor    edx,edx
c00246f5:	85 c0                	test   eax,eax
c00246f7:	74 04                	je     c00246fd <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00246f9:	89 da                	mov    edx,ebx
c00246fb:	29 c2                	sub    edx,eax
c00246fd:	89 d0                	mov    eax,edx
c00246ff:	5b                   	pop    ebx
c0024700:	c3                   	ret    

c0024701 <Thr::loadDLL(char const*, bool)>:
c0024701:	55                   	push   ebp
c0024702:	57                   	push   edi
c0024703:	56                   	push   esi
c0024704:	53                   	push   ebx
c0024705:	81 ec 34 01 00 00    	sub    esp,0x134
c002470b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0024712:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0024719:	56                   	push   esi
c002471a:	68 35 2c 03 c0       	push   0xc0032c35
c002471f:	e8 69 4a ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0024724:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c002472b:	e8 ce 1b ff ff       	call   c00162fe <malloc>
c0024730:	83 c4 0c             	add    esp,0xc
c0024733:	89 c3                	mov    ebx,eax
c0024735:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002473b:	56                   	push   esi
c002473c:	50                   	push   eax
c002473d:	e8 52 5c ff ff       	call   c001a394 <File::File(char const*, Process*)>
c0024742:	83 c4 10             	add    esp,0x10
c0024745:	85 db                	test   ebx,ebx
c0024747:	75 3c                	jne    c0024785 <Thr::loadDLL(char const*, bool)+0x84>
c0024749:	89 f8                	mov    eax,edi
c002474b:	84 c0                	test   al,al
c002474d:	0f 84 f3 01 00 00    	je     c0024946 <Thr::loadDLL(char const*, bool)+0x245>
c0024753:	55                   	push   ebp
c0024754:	55                   	push   ebp
c0024755:	68 46 2c 03 c0       	push   0xc0032c46
c002475a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c002475e:	55                   	push   ebp
c002475f:	e8 dc be fd ff       	call   c0000640 <strcpy>
c0024764:	58                   	pop    eax
c0024765:	5a                   	pop    edx
c0024766:	56                   	push   esi
c0024767:	55                   	push   ebp
c0024768:	e8 d3 c0 fd ff       	call   c0000840 <strcat>
c002476d:	59                   	pop    ecx
c002476e:	58                   	pop    eax
c002476f:	68 5d 2c 03 c0       	push   0xc0032c5d
c0024774:	55                   	push   ebp
c0024775:	e8 c6 c0 fd ff       	call   c0000840 <strcat>
c002477a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c002477d:	e8 24 ba ff ff       	call   c00201a6 <KePanic(char const*)>
c0024782:	83 c4 10             	add    esp,0x10
c0024785:	51                   	push   ecx
c0024786:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c002478a:	50                   	push   eax
c002478b:	8d 44 24 20          	lea    eax,[esp+0x20]
c002478f:	50                   	push   eax
c0024790:	53                   	push   ebx
c0024791:	e8 1e 5f ff ff       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c0024796:	83 c4 10             	add    esp,0x10
c0024799:	89 c5                	mov    ebp,eax
c002479b:	85 db                	test   ebx,ebx
c002479d:	74 0c                	je     c00247ab <Thr::loadDLL(char const*, bool)+0xaa>
c002479f:	83 ec 0c             	sub    esp,0xc
c00247a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00247a4:	53                   	push   ebx
c00247a5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00247a8:	83 c4 10             	add    esp,0x10
c00247ab:	83 ec 0c             	sub    esp,0xc
c00247ae:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c00247b3:	50                   	push   eax
c00247b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00247b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00247bc:	55                   	push   ebp
c00247bd:	68 5f 2c 03 c0       	push   0xc0032c5f
c00247c2:	e8 c6 49 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00247c7:	83 c4 20             	add    esp,0x20
c00247ca:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00247cf:	75 0a                	jne    c00247db <Thr::loadDLL(char const*, bool)+0xda>
c00247d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00247d5:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00247d9:	75 3c                	jne    c0024817 <Thr::loadDLL(char const*, bool)+0x116>
c00247db:	89 f8                	mov    eax,edi
c00247dd:	84 c0                	test   al,al
c00247df:	0f 84 49 01 00 00    	je     c002492e <Thr::loadDLL(char const*, bool)+0x22d>
c00247e5:	51                   	push   ecx
c00247e6:	51                   	push   ecx
c00247e7:	68 80 2c 03 c0       	push   0xc0032c80
c00247ec:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00247f0:	53                   	push   ebx
c00247f1:	e8 4a be fd ff       	call   c0000640 <strcpy>
c00247f6:	5d                   	pop    ebp
c00247f7:	58                   	pop    eax
c00247f8:	56                   	push   esi
c00247f9:	53                   	push   ebx
c00247fa:	e8 41 c0 fd ff       	call   c0000840 <strcat>
c00247ff:	58                   	pop    eax
c0024800:	5a                   	pop    edx
c0024801:	68 5d 2c 03 c0       	push   0xc0032c5d
c0024806:	53                   	push   ebx
c0024807:	e8 34 c0 fd ff       	call   c0000840 <strcat>
c002480c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002480f:	e8 92 b9 ff ff       	call   c00201a6 <KePanic(char const*)>
c0024814:	83 c4 10             	add    esp,0x10
c0024817:	52                   	push   edx
c0024818:	6a 03                	push   0x3
c002481a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002481e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024822:	05 ff 0f 00 00       	add    eax,0xfff
c0024827:	83 d2 00             	adc    edx,0x0
c002482a:	0f ac d0 0c          	shrd   eax,edx,0xc
c002482e:	50                   	push   eax
c002482f:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c0024835:	e8 32 3e ff ff       	call   c001866c <VAS::allocatePages(int, int)>
c002483a:	59                   	pop    ecx
c002483b:	89 c3                	mov    ebx,eax
c002483d:	5d                   	pop    ebp
c002483e:	50                   	push   eax
c002483f:	68 a2 10 03 c0       	push   0xc00310a2
c0024844:	e8 44 49 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0024849:	89 34 24             	mov    DWORD PTR [esp],esi
c002484c:	e8 1f bd fd ff       	call   c0000570 <strlen>
c0024851:	8b 2d 00 fa 03 c0    	mov    ebp,DWORD PTR ds:0xc003fa00
c0024857:	40                   	inc    eax
c0024858:	89 04 24             	mov    DWORD PTR [esp],eax
c002485b:	e8 9e 1a ff ff       	call   c00162fe <malloc>
c0024860:	89 04 ad 20 fe 03 c0 	mov    DWORD PTR [ebp*4-0x3ffc01e0],eax
c0024867:	58                   	pop    eax
c0024868:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c002486d:	5a                   	pop    edx
c002486e:	56                   	push   esi
c002486f:	ff 34 85 20 fe 03 c0 	push   DWORD PTR [eax*4-0x3ffc01e0]
c0024876:	e8 c5 bd fd ff       	call   c0000640 <strcpy>
c002487b:	a1 00 fa 03 c0       	mov    eax,ds:0xc003fa00
c0024880:	8d 50 01             	lea    edx,[eax+0x1]
c0024883:	89 1c 85 20 fc 03 c0 	mov    DWORD PTR [eax*4-0x3ffc03e0],ebx
c002488a:	89 15 00 fa 03 c0    	mov    DWORD PTR ds:0xc003fa00,edx
c0024890:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024894:	83 c4 0c             	add    esp,0xc
c0024897:	89 14 85 20 fa 03 c0 	mov    DWORD PTR [eax*4-0x3ffc05e0],edx
c002489e:	6a 01                	push   0x1
c00248a0:	53                   	push   ebx
c00248a1:	56                   	push   esi
c00248a2:	e8 9e f6 ff ff       	call   c0023f45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00248a7:	83 c4 10             	add    esp,0x10
c00248aa:	0f b6 c0             	movzx  eax,al
c00248ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00248b1:	85 c0                	test   eax,eax
c00248b3:	0f 85 89 00 00 00    	jne    c0024942 <Thr::loadDLL(char const*, bool)+0x241>
c00248b9:	89 f8                	mov    eax,edi
c00248bb:	84 c0                	test   al,al
c00248bd:	74 73                	je     c0024932 <Thr::loadDLL(char const*, bool)+0x231>
c00248bf:	83 ec 0c             	sub    esp,0xc
c00248c2:	68 99 2c 03 c0       	push   0xc0032c99
c00248c7:	e8 da b8 ff ff       	call   c00201a6 <KePanic(char const*)>
c00248cc:	83 c4 10             	add    esp,0x10
c00248cf:	eb 61                	jmp    c0024932 <Thr::loadDLL(char const*, bool)+0x231>
c00248d1:	50                   	push   eax
c00248d2:	50                   	push   eax
c00248d3:	89 e8                	mov    eax,ebp
c00248d5:	c1 e0 0c             	shl    eax,0xc
c00248d8:	01 d8                	add    eax,ebx
c00248da:	50                   	push   eax
c00248db:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c00248e1:	e8 6e 38 ff ff       	call   c0018154 <VAS::getPageTableEntry(unsigned long)>
c00248e6:	83 c4 10             	add    esp,0x10
c00248e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00248eb:	a8 60                	test   al,0x60
c00248ed:	75 11                	jne    c0024900 <Thr::loadDLL(char const*, bool)+0x1ff>
c00248ef:	83 ec 0c             	sub    esp,0xc
c00248f2:	25 00 f0 ff ff       	and    eax,0xfffff000
c00248f7:	50                   	push   eax
c00248f8:	e8 a1 1c ff ff       	call   c001659e <Phys::freePage(unsigned long)>
c00248fd:	83 c4 10             	add    esp,0x10
c0024900:	45                   	inc    ebp
c0024901:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024905:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024909:	05 ff 0f 00 00       	add    eax,0xfff
c002490e:	bf 00 00 00 00       	mov    edi,0x0
c0024913:	83 d2 00             	adc    edx,0x0
c0024916:	0f ac d0 0c          	shrd   eax,edx,0xc
c002491a:	c1 ea 0c             	shr    edx,0xc
c002491d:	39 c5                	cmp    ebp,eax
c002491f:	89 d1                	mov    ecx,edx
c0024921:	89 f8                	mov    eax,edi
c0024923:	19 c8                	sbb    eax,ecx
c0024925:	72 aa                	jb     c00248d1 <Thr::loadDLL(char const*, bool)+0x1d0>
c0024927:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002492c:	75 18                	jne    c0024946 <Thr::loadDLL(char const*, bool)+0x245>
c002492e:	31 db                	xor    ebx,ebx
c0024930:	eb 14                	jmp    c0024946 <Thr::loadDLL(char const*, bool)+0x245>
c0024932:	83 ec 0c             	sub    esp,0xc
c0024935:	68 b8 2c 03 c0       	push   0xc0032cb8
c002493a:	e8 67 b8 ff ff       	call   c00201a6 <KePanic(char const*)>
c002493f:	83 c4 10             	add    esp,0x10
c0024942:	31 ed                	xor    ebp,ebp
c0024944:	eb bb                	jmp    c0024901 <Thr::loadDLL(char const*, bool)+0x200>
c0024946:	81 c4 2c 01 00 00    	add    esp,0x12c
c002494c:	89 d8                	mov    eax,ebx
c002494e:	5b                   	pop    ebx
c002494f:	5e                   	pop    esi
c0024950:	5f                   	pop    edi
c0024951:	5d                   	pop    ebp
c0024952:	c3                   	ret    

c0024953 <Thr::executeDLL(unsigned long, void*)>:
c0024953:	56                   	push   esi
c0024954:	53                   	push   ebx
c0024955:	52                   	push   edx
c0024956:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002495a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002495e:	85 db                	test   ebx,ebx
c0024960:	75 10                	jne    c0024972 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0024962:	83 ec 0c             	sub    esp,0xc
c0024965:	68 d4 2c 03 c0       	push   0xc0032cd4
c002496a:	e8 37 b8 ff ff       	call   c00201a6 <KePanic(char const*)>
c002496f:	83 c4 10             	add    esp,0x10
c0024972:	50                   	push   eax
c0024973:	50                   	push   eax
c0024974:	53                   	push   ebx
c0024975:	68 fe 2c 03 c0       	push   0xc0032cfe
c002497a:	e8 0e 48 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002497f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0024983:	89 d8                	mov    eax,ebx
c0024985:	83 c4 14             	add    esp,0x14
c0024988:	5b                   	pop    ebx
c0024989:	5e                   	pop    esi
c002498a:	ff e0                	jmp    eax

c002498c <userModeEntryPoint(void*)>:
c002498c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0024991:	83 e8 01             	sub    eax,0x1
c0024994:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0024999:	75 01                	jne    c002499c <userModeEntryPoint(void*)+0x10>
c002499b:	fb                   	sti    
c002499c:	fb                   	sti    
c002499d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00249a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00249a5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00249ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00249af:	e9 8b b8 fd ff       	jmp    c000023f <goToUsermode>

c00249b4 <changeTSS>:
c00249b4:	83 ec 14             	sub    esp,0x14
c00249b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00249bc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00249bf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00249c4:	c1 e2 15             	shl    edx,0x15
c00249c7:	29 d0                	sub    eax,edx
c00249c9:	50                   	push   eax
c00249ca:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00249cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00249d5:	05 7c 11 00 00       	add    eax,0x117c
c00249da:	50                   	push   eax
c00249db:	e8 bc 2d ff ff       	call   c001779c <TSS::setESP(unsigned long)>
c00249e0:	83 c4 1c             	add    esp,0x1c
c00249e3:	c3                   	ret    

c00249e4 <switchToThread(ThreadControlBlock*)>:
c00249e4:	57                   	push   edi
c00249e5:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00249eb:	56                   	push   esi
c00249ec:	85 c9                	test   ecx,ecx
c00249ee:	53                   	push   ebx
c00249ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00249f3:	0f 85 8b 00 00 00    	jne    c0024a84 <switchToThread(ThreadControlBlock*)+0xa0>
c00249f9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00249fd:	81 fa ff 00 00 00    	cmp    edx,0xff
c0024a03:	74 7b                	je     c0024a80 <switchToThread(ThreadControlBlock*)+0x9c>
c0024a05:	b8 00 04 00 00       	mov    eax,0x400
c0024a0a:	29 d0                	sub    eax,edx
c0024a0c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0024a0f:	d1 f8                	sar    eax,1
c0024a11:	01 d0                	add    eax,edx
c0024a13:	90                   	nop
c0024a14:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0024a17:	e8 76 25 00 00       	call   c0026f92 <HalQueryPerformanceCounter()>
c0024a1c:	a3 10 02 04 c0       	mov    ds:0xc0040210,eax
c0024a21:	89 15 14 02 04 c0    	mov    DWORD PTR ds:0xc0040214,edx
c0024a27:	89 c6                	mov    esi,eax
c0024a29:	89 d7                	mov    edi,edx
c0024a2b:	2b 35 00 02 04 c0    	sub    esi,DWORD PTR ds:0xc0040200
c0024a31:	a3 00 02 04 c0       	mov    ds:0xc0040200,eax
c0024a36:	1b 3d 04 02 04 c0    	sbb    edi,DWORD PTR ds:0xc0040204
c0024a3c:	89 35 08 02 04 c0    	mov    DWORD PTR ds:0xc0040208,esi
c0024a42:	89 3d 0c 02 04 c0    	mov    DWORD PTR ds:0xc004020c,edi
c0024a48:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0024a4e:	89 15 04 02 04 c0    	mov    DWORD PTR ds:0xc0040204,edx
c0024a54:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0024a57:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0024a5a:	01 c6                	add    esi,eax
c0024a5c:	11 d7                	adc    edi,edx
c0024a5e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0024a61:	83 ec 0c             	sub    esp,0xc
c0024a64:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0024a67:	53                   	push   ebx
c0024a68:	e8 0a b8 fd ff       	call   c0000277 <switchToThreadASM>
c0024a6d:	0f 20 c0             	mov    eax,cr0
c0024a70:	83 c8 08             	or     eax,0x8
c0024a73:	0f 22 c0             	mov    cr0,eax
c0024a76:	83 c4 10             	add    esp,0x10
c0024a79:	5b                   	pop    ebx
c0024a7a:	5e                   	pop    esi
c0024a7b:	5f                   	pop    edi
c0024a7c:	c3                   	ret    
c0024a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0024a80:	31 c0                	xor    eax,eax
c0024a82:	eb 90                	jmp    c0024a14 <switchToThread(ThreadControlBlock*)+0x30>
c0024a84:	5b                   	pop    ebx
c0024a85:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0024a8f:	5e                   	pop    esi
c0024a90:	5f                   	pop    edi
c0024a91:	c3                   	ret    
c0024a92:	66 90                	xchg   ax,ax

c0024a94 <Process::addArgs(char**)>:
c0024a94:	57                   	push   edi
c0024a95:	56                   	push   esi
c0024a96:	53                   	push   ebx
c0024a97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024a9b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0024a9f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0024aa9:	85 ff                	test   edi,edi
c0024aab:	74 4f                	je     c0024afc <Process::addArgs(char**)+0x68>
c0024aad:	8b 07                	mov    eax,DWORD PTR [edi]
c0024aaf:	85 c0                	test   eax,eax
c0024ab1:	74 49                	je     c0024afc <Process::addArgs(char**)+0x68>
c0024ab3:	31 db                	xor    ebx,ebx
c0024ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0024ab8:	83 ec 0c             	sub    esp,0xc
c0024abb:	50                   	push   eax
c0024abc:	e8 af ba fd ff       	call   c0000570 <strlen>
c0024ac1:	83 c0 01             	add    eax,0x1
c0024ac4:	89 04 24             	mov    DWORD PTR [esp],eax
c0024ac7:	e8 32 18 ff ff       	call   c00162fe <malloc>
c0024acc:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0024ad3:	5a                   	pop    edx
c0024ad4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0024ad7:	59                   	pop    ecx
c0024ad8:	83 c3 01             	add    ebx,0x1
c0024adb:	52                   	push   edx
c0024adc:	50                   	push   eax
c0024add:	e8 5e bb fd ff       	call   c0000640 <strcpy>
c0024ae2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0024ae8:	83 c4 10             	add    esp,0x10
c0024aeb:	83 c1 01             	add    ecx,0x1
c0024aee:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0024af4:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0024af7:	85 c0                	test   eax,eax
c0024af9:	75 bd                	jne    c0024ab8 <Process::addArgs(char**)+0x24>
c0024afb:	90                   	nop
c0024afc:	5b                   	pop    ebx
c0024afd:	5e                   	pop    esi
c0024afe:	5f                   	pop    edi
c0024aff:	c3                   	ret    

c0024b00 <Process::Process(char const*, Process*, char**)>:
c0024b00:	56                   	push   esi
c0024b01:	53                   	push   ebx
c0024b02:	83 ec 14             	sub    esp,0x14
c0024b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b09:	05 0c 02 00 00       	add    eax,0x20c
c0024b0e:	bb 07 00 00 00       	mov    ebx,0x7
c0024b13:	89 c6                	mov    esi,eax
c0024b15:	8d 76 00             	lea    esi,[esi+0x0]
c0024b18:	85 db                	test   ebx,ebx
c0024b1a:	78 14                	js     c0024b30 <Process::Process(char const*, Process*, char**)+0x30>
c0024b1c:	83 ec 0c             	sub    esp,0xc
c0024b1f:	56                   	push   esi
c0024b20:	e8 73 a3 00 00       	call   c002ee98 <ThreadControlBlock::ThreadControlBlock()>
c0024b25:	83 c4 10             	add    esp,0x10
c0024b28:	83 c6 5f             	add    esi,0x5f
c0024b2b:	83 eb 01             	sub    ebx,0x1
c0024b2e:	eb e8                	jmp    c0024b18 <Process::Process(char const*, Process*, char**)+0x18>
c0024b30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b34:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024b3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b3f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024b46:	83 ec 0c             	sub    esp,0xc
c0024b49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024b4d:	e8 2e b4 ff ff       	call   c001ff80 <KeNewProcessEnv(Process*)>
c0024b52:	83 c4 10             	add    esp,0x10
c0024b55:	89 c2                	mov    edx,eax
c0024b57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b5b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024b61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024b65:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024b6e:	a1 20 43 03 c0       	mov    eax,ds:0xc0034320
c0024b73:	8d 50 01             	lea    edx,[eax+0x1]
c0024b76:	89 15 20 43 03 c0    	mov    DWORD PTR ds:0xc0034320,edx
c0024b7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0024b80:	89 02                	mov    DWORD PTR [edx],eax
c0024b82:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0024b8a:	83 ec 0c             	sub    esp,0xc
c0024b8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024b91:	e8 68 17 ff ff       	call   c00162fe <malloc>
c0024b96:	83 c4 10             	add    esp,0x10
c0024b99:	89 c3                	mov    ebx,eax
c0024b9b:	83 ec 08             	sub    esp,0x8
c0024b9e:	6a 00                	push   0x0
c0024ba0:	53                   	push   ebx
c0024ba1:	e8 0a 3d ff ff       	call   c00188b0 <VAS::VAS(bool)>
c0024ba6:	83 c4 10             	add    esp,0x10
c0024ba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bad:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024bb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bb7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024bc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024bc9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024bcf:	e8 03 be ff ff       	call   c00209d7 <KeInitSignals()>
c0024bd4:	89 c2                	mov    edx,eax
c0024bd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bda:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024be4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024bea:	85 c0                	test   eax,eax
c0024bec:	74 42                	je     c0024c30 <Process::Process(char const*, Process*, char**)+0x130>
c0024bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024bf2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024bf8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024bfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c02:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024c08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024c12:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024c18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c1c:	05 0c 01 00 00       	add    eax,0x10c
c0024c21:	83 ec 08             	sub    esp,0x8
c0024c24:	52                   	push   edx
c0024c25:	50                   	push   eax
c0024c26:	e8 15 ba fd ff       	call   c0000640 <strcpy>
c0024c2b:	83 c4 10             	add    esp,0x10
c0024c2e:	eb 64                	jmp    c0024c94 <Process::Process(char const*, Process*, char**)+0x194>
c0024c30:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0024c38:	83 ec 0c             	sub    esp,0xc
c0024c3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0024c3f:	e8 ba 16 ff ff       	call   c00162fe <malloc>
c0024c44:	83 c4 10             	add    esp,0x10
c0024c47:	89 c3                	mov    ebx,eax
c0024c49:	83 ec 08             	sub    esp,0x8
c0024c4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c50:	53                   	push   ebx
c0024c51:	e8 58 28 ff ff       	call   c00174ae <VgaText::VgaText(char const*)>
c0024c56:	83 c4 10             	add    esp,0x10
c0024c59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c5d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024c63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c67:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024c6d:	83 ec 0c             	sub    esp,0xc
c0024c70:	50                   	push   eax
c0024c71:	e8 d6 20 ff ff       	call   c0016d4c <addToTerminalCycle(VgaText*)>
c0024c76:	83 c4 10             	add    esp,0x10
c0024c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c7d:	05 0c 01 00 00       	add    eax,0x10c
c0024c82:	83 ec 08             	sub    esp,0x8
c0024c85:	68 1d 2d 03 c0       	push   0xc0032d1d
c0024c8a:	50                   	push   eax
c0024c8b:	e8 b0 b9 fd ff       	call   c0000640 <strcpy>
c0024c90:	83 c4 10             	add    esp,0x10
c0024c93:	90                   	nop
c0024c94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c98:	83 c0 0c             	add    eax,0xc
c0024c9b:	83 ec 08             	sub    esp,0x8
c0024c9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ca2:	50                   	push   eax
c0024ca3:	e8 98 b9 fd ff       	call   c0000640 <strcpy>
c0024ca8:	83 c4 10             	add    esp,0x10
c0024cab:	83 ec 08             	sub    esp,0x8
c0024cae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0024cb2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cb6:	e8 d9 fd ff ff       	call   c0024a94 <Process::addArgs(char**)>
c0024cbb:	83 c4 10             	add    esp,0x10
c0024cbe:	83 ec 08             	sub    esp,0x8
c0024cc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cc9:	e8 45 ed ff ff       	call   c0023a13 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0024cce:	83 c4 10             	add    esp,0x10
c0024cd1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024cd5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0024cd9:	83 f0 01             	xor    eax,0x1
c0024cdc:	88 c2                	mov    dl,al
c0024cde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024ce2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0024ce8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0024ced:	83 ec 04             	sub    esp,0x4
c0024cf0:	50                   	push   eax
c0024cf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024cf5:	68 74 2d 03 c0       	push   0xc0032d74
c0024cfa:	e8 8e 44 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0024cff:	83 c4 10             	add    esp,0x10
c0024d02:	90                   	nop
c0024d03:	83 c4 14             	add    esp,0x14
c0024d06:	5b                   	pop    ebx
c0024d07:	5e                   	pop    esi
c0024d08:	c3                   	ret    
c0024d09:	90                   	nop
c0024d0a:	66 90                	xchg   ax,ax

c0024d0c <Process::Process(bool, char const*, Process*, char**)>:
c0024d0c:	56                   	push   esi
c0024d0d:	53                   	push   ebx
c0024d0e:	83 ec 24             	sub    esp,0x24
c0024d11:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0024d15:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0024d19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d1d:	05 0c 02 00 00       	add    eax,0x20c
c0024d22:	bb 07 00 00 00       	mov    ebx,0x7
c0024d27:	89 c6                	mov    esi,eax
c0024d29:	8d 76 00             	lea    esi,[esi+0x0]
c0024d2c:	85 db                	test   ebx,ebx
c0024d2e:	78 14                	js     c0024d44 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0024d30:	83 ec 0c             	sub    esp,0xc
c0024d33:	56                   	push   esi
c0024d34:	e8 5f a1 00 00       	call   c002ee98 <ThreadControlBlock::ThreadControlBlock()>
c0024d39:	83 c4 10             	add    esp,0x10
c0024d3c:	83 c6 5f             	add    esi,0x5f
c0024d3f:	83 eb 01             	sub    ebx,0x1
c0024d42:	eb e8                	jmp    c0024d2c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0024d44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d48:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0024d4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d53:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0024d5a:	83 ec 0c             	sub    esp,0xc
c0024d5d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d61:	e8 1a b2 ff ff       	call   c001ff80 <KeNewProcessEnv(Process*)>
c0024d66:	83 c4 10             	add    esp,0x10
c0024d69:	89 c2                	mov    edx,eax
c0024d6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d6f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0024d75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d79:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0024d82:	a1 20 43 03 c0       	mov    eax,ds:0xc0034320
c0024d87:	8d 50 01             	lea    edx,[eax+0x1]
c0024d8a:	89 15 20 43 03 c0    	mov    DWORD PTR ds:0xc0034320,edx
c0024d90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024d94:	89 02                	mov    DWORD PTR [edx],eax
c0024d96:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0024d9e:	83 ec 0c             	sub    esp,0xc
c0024da1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0024da5:	e8 54 15 ff ff       	call   c00162fe <malloc>
c0024daa:	83 c4 10             	add    esp,0x10
c0024dad:	89 c3                	mov    ebx,eax
c0024daf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0024db4:	83 ec 08             	sub    esp,0x8
c0024db7:	50                   	push   eax
c0024db8:	53                   	push   ebx
c0024db9:	e8 f2 3a ff ff       	call   c00188b0 <VAS::VAS(bool)>
c0024dbe:	83 c4 10             	add    esp,0x10
c0024dc1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024dc5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0024dcb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024dcf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0024dd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024ddd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0024de1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0024de7:	e8 eb bb ff ff       	call   c00209d7 <KeInitSignals()>
c0024dec:	89 c2                	mov    edx,eax
c0024dee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024df2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0024df8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024dfc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024e02:	85 c0                	test   eax,eax
c0024e04:	74 42                	je     c0024e48 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0024e06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e0a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024e10:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0024e16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e1a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0024e20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e24:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0024e2a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0024e30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e34:	05 0c 01 00 00       	add    eax,0x10c
c0024e39:	83 ec 08             	sub    esp,0x8
c0024e3c:	52                   	push   edx
c0024e3d:	50                   	push   eax
c0024e3e:	e8 fd b7 fd ff       	call   c0000640 <strcpy>
c0024e43:	83 c4 10             	add    esp,0x10
c0024e46:	eb 64                	jmp    c0024eac <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0024e48:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0024e50:	83 ec 0c             	sub    esp,0xc
c0024e53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0024e57:	e8 a2 14 ff ff       	call   c00162fe <malloc>
c0024e5c:	83 c4 10             	add    esp,0x10
c0024e5f:	89 c3                	mov    ebx,eax
c0024e61:	83 ec 08             	sub    esp,0x8
c0024e64:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024e68:	53                   	push   ebx
c0024e69:	e8 40 26 ff ff       	call   c00174ae <VgaText::VgaText(char const*)>
c0024e6e:	83 c4 10             	add    esp,0x10
c0024e71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e75:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0024e7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e7f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0024e85:	83 ec 0c             	sub    esp,0xc
c0024e88:	50                   	push   eax
c0024e89:	e8 be 1e ff ff       	call   c0016d4c <addToTerminalCycle(VgaText*)>
c0024e8e:	83 c4 10             	add    esp,0x10
c0024e91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024e95:	05 0c 01 00 00       	add    eax,0x10c
c0024e9a:	83 ec 08             	sub    esp,0x8
c0024e9d:	68 1d 2d 03 c0       	push   0xc0032d1d
c0024ea2:	50                   	push   eax
c0024ea3:	e8 98 b7 fd ff       	call   c0000640 <strcpy>
c0024ea8:	83 c4 10             	add    esp,0x10
c0024eab:	90                   	nop
c0024eac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024eb0:	83 c0 0c             	add    eax,0xc
c0024eb3:	83 ec 08             	sub    esp,0x8
c0024eb6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0024eba:	50                   	push   eax
c0024ebb:	e8 80 b7 fd ff       	call   c0000640 <strcpy>
c0024ec0:	83 c4 10             	add    esp,0x10
c0024ec3:	83 ec 08             	sub    esp,0x8
c0024ec6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0024eca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ece:	e8 c1 fb ff ff       	call   c0024a94 <Process::addArgs(char**)>
c0024ed3:	83 c4 10             	add    esp,0x10
c0024ed6:	90                   	nop
c0024ed7:	83 c4 24             	add    esp,0x24
c0024eda:	5b                   	pop    ebx
c0024edb:	5e                   	pop    esi
c0024edc:	c3                   	ret    
c0024edd:	8d 76 00             	lea    esi,[esi+0x0]

c0024ee0 <taskStartupFunction>:
c0024ee0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0024ee5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0024ee8:	c3                   	ret    
c0024ee9:	8d 76 00             	lea    esi,[esi+0x0]

c0024eec <KeDisablePreemption()>:
c0024eec:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024ef1:	85 c0                	test   eax,eax
c0024ef3:	75 13                	jne    c0024f08 <KeDisablePreemption()+0x1c>
c0024ef5:	8a 15 c0 a9 03 c0    	mov    dl,BYTE PTR ds:0xc003a9c0
c0024efb:	c6 05 c0 a9 03 c0 00 	mov    BYTE PTR ds:0xc003a9c0,0x0
c0024f02:	88 15 a8 01 04 c0    	mov    BYTE PTR ds:0xc00401a8,dl
c0024f08:	83 c0 01             	add    eax,0x1
c0024f0b:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024f10:	c3                   	ret    
c0024f11:	8d 76 00             	lea    esi,[esi+0x0]

c0024f14 <KeRestorePreemption()>:
c0024f14:	a1 ac 01 04 c0       	mov    eax,ds:0xc00401ac
c0024f19:	83 e8 01             	sub    eax,0x1
c0024f1c:	a3 ac 01 04 c0       	mov    ds:0xc00401ac,eax
c0024f21:	75 0d                	jne    c0024f30 <KeRestorePreemption()+0x1c>
c0024f23:	a0 a8 01 04 c0       	mov    al,ds:0xc00401a8
c0024f28:	a2 c0 a9 03 c0       	mov    ds:0xc003a9c0,al
c0024f2d:	8d 76 00             	lea    esi,[esi+0x0]
c0024f30:	c3                   	ret    
c0024f31:	90                   	nop
c0024f32:	66 90                	xchg   ax,ax

c0024f34 <Process::createThread(void (*)(void*), void*, int)>:
c0024f34:	57                   	push   edi
c0024f35:	31 c9                	xor    ecx,ecx
c0024f37:	56                   	push   esi
c0024f38:	53                   	push   ebx
c0024f39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024f3d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0024f44:	89 f2                	mov    edx,esi
c0024f46:	66 90                	xchg   ax,ax
c0024f48:	0f b7 c2             	movzx  eax,dx
c0024f4b:	80 e2 01             	and    dl,0x1
c0024f4e:	74 14                	je     c0024f64 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0024f50:	d1 f8                	sar    eax,1
c0024f52:	83 c1 01             	add    ecx,0x1
c0024f55:	89 c2                	mov    edx,eax
c0024f57:	83 f9 10             	cmp    ecx,0x10
c0024f5a:	75 ec                	jne    c0024f48 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0024f5c:	31 db                	xor    ebx,ebx
c0024f5e:	89 d8                	mov    eax,ebx
c0024f60:	5b                   	pop    ebx
c0024f61:	5e                   	pop    esi
c0024f62:	5f                   	pop    edi
c0024f63:	c3                   	ret    
c0024f64:	b8 01 00 00 00       	mov    eax,0x1
c0024f69:	d3 e0                	shl    eax,cl
c0024f6b:	09 c6                	or     esi,eax
c0024f6d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0024f70:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0024f77:	01 c0                	add    eax,eax
c0024f79:	01 c8                	add    eax,ecx
c0024f7b:	8d 04 80             	lea    eax,[eax+eax*4]
c0024f7e:	01 d8                	add    eax,ebx
c0024f80:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0024f87:	75 0b                	jne    c0024f94 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0024f89:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0024f93:	90                   	nop
c0024f94:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0024f9a:	83 ec 0c             	sub    esp,0xc
c0024f9d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0024fa0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0024fa3:	01 c0                	add    eax,eax
c0024fa5:	01 c8                	add    eax,ecx
c0024fa7:	8d 3c 80             	lea    edi,[eax+eax*4]
c0024faa:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0024fad:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0024fb3:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0024fb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024fbd:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0024fc3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0024fc9:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0024fcf:	89 ca                	mov    edx,ecx
c0024fd1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0024fd8:	f7 da                	neg    edx
c0024fda:	c1 e2 15             	shl    edx,0x15
c0024fdd:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0024fe3:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0024fe9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0024fed:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0024ff7:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0024ffd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0025001:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0025007:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0025011:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c002501b:	68 00 01 00 00       	push   0x100
c0025020:	e8 d9 12 ff ff       	call   c00162fe <malloc>
c0025025:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0025028:	58                   	pop    eax
c0025029:	5a                   	pop    edx
c002502a:	53                   	push   ebx
c002502b:	68 ec 01 04 c0       	push   0xc00401ec
c0025030:	e8 fb 9b 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025035:	83 c4 10             	add    esp,0x10
c0025038:	89 d8                	mov    eax,ebx
c002503a:	5b                   	pop    ebx
c002503b:	5e                   	pop    esi
c002503c:	5f                   	pop    edi
c002503d:	c3                   	ret    
c002503e:	66 90                	xchg   ax,ax

c0025040 <Process::createUserThread()>:
c0025040:	83 ec 0c             	sub    esp,0xc
c0025043:	68 80 00 00 00       	push   0x80
c0025048:	6a 00                	push   0x0
c002504a:	68 8c 49 02 c0       	push   0xc002498c
c002504f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025053:	50                   	push   eax
c0025054:	e8 db fe ff ff       	call   c0024f34 <Process::createThread(void (*)(void*), void*, int)>
c0025059:	83 c4 1c             	add    esp,0x1c
c002505c:	c3                   	ret    
c002505d:	8d 76 00             	lea    esi,[esi+0x0]

c0025060 <setupMultitasking(void (*)())>:
c0025060:	56                   	push   esi
c0025061:	53                   	push   ebx
c0025062:	83 ec 04             	sub    esp,0x4
c0025065:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025069:	eb 11                	jmp    c002507c <setupMultitasking(void (*)())+0x1c>
c002506b:	90                   	nop
c002506c:	83 ec 0c             	sub    esp,0xc
c002506f:	68 ec 01 04 c0       	push   0xc00401ec
c0025074:	e8 fb 9a 00 00       	call   c002eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0025079:	83 c4 10             	add    esp,0x10
c002507c:	83 ec 0c             	sub    esp,0xc
c002507f:	68 ec 01 04 c0       	push   0xc00401ec
c0025084:	e8 c7 9a 00 00       	call   c002eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0025089:	83 c4 10             	add    esp,0x10
c002508c:	84 c0                	test   al,al
c002508e:	74 dc                	je     c002506c <setupMultitasking(void (*)())+0xc>
c0025090:	83 ec 0c             	sub    esp,0xc
c0025093:	68 24 07 00 00       	push   0x724
c0025098:	e8 61 12 ff ff       	call   c00162fe <malloc>
c002509d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00250a4:	89 c3                	mov    ebx,eax
c00250a6:	6a 00                	push   0x0
c00250a8:	68 21 2d 03 c0       	push   0xc0032d21
c00250ad:	6a 01                	push   0x1
c00250af:	50                   	push   eax
c00250b0:	e8 57 fc ff ff       	call   c0024d0c <Process::Process(bool, char const*, Process*, char**)>
c00250b5:	83 c4 14             	add    esp,0x14
c00250b8:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00250be:	89 1d f8 01 04 c0    	mov    DWORD PTR ds:0xc00401f8,ebx
c00250c4:	50                   	push   eax
c00250c5:	e8 d7 1e ff ff       	call   c0016fa1 <setActiveTerminal(VgaText*)>
c00250ca:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00250d1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00250db:	83 c8 01             	or     eax,0x1
c00250de:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00250e5:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00250eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00250ee:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00250f8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00250fe:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0025104:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c002510e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0025118:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0025122:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0025128:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0025132:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0025138:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0025142:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0025149:	e8 b0 11 ff ff       	call   c00162fe <malloc>
c002514e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0025154:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c002515a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0025160:	5a                   	pop    edx
c0025161:	59                   	pop    ecx
c0025162:	68 1d 2d 03 c0       	push   0xc0032d1d
c0025167:	50                   	push   eax
c0025168:	e8 d3 b4 fd ff       	call   c0000640 <strcpy>
c002516d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0025174:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0025178:	83 c4 14             	add    esp,0x14
c002517b:	5b                   	pop    ebx
c002517c:	5e                   	pop    esi
c002517d:	e9 e7 b0 fd ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0025182:	66 90                	xchg   ax,ax

c0025184 <schedule()>:
c0025184:	8b 15 cc 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401cc
c002518a:	85 d2                	test   edx,edx
c002518c:	74 0e                	je     c002519c <schedule()+0x18>
c002518e:	c7 05 c8 01 04 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x1
c0025198:	c3                   	ret    
c0025199:	8d 76 00             	lea    esi,[esi+0x0]
c002519c:	53                   	push   ebx
c002519d:	83 ec 14             	sub    esp,0x14
c00251a0:	68 ec 01 04 c0       	push   0xc00401ec
c00251a5:	e8 a6 99 00 00       	call   c002eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00251aa:	83 c4 10             	add    esp,0x10
c00251ad:	84 c0                	test   al,al
c00251af:	75 3f                	jne    c00251f0 <schedule()+0x6c>
c00251b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00251b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00251b9:	83 fa 01             	cmp    edx,0x1
c00251bc:	74 3a                	je     c00251f8 <schedule()+0x74>
c00251be:	66 90                	xchg   ax,ax
c00251c0:	83 ec 0c             	sub    esp,0xc
c00251c3:	68 ec 01 04 c0       	push   0xc00401ec
c00251c8:	e8 9f 99 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00251cd:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00251d4:	89 c3                	mov    ebx,eax
c00251d6:	e8 99 99 00 00       	call   c002eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00251db:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00251e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251e5:	e8 fa f7 ff ff       	call   c00249e4 <switchToThread(ThreadControlBlock*)>
c00251ea:	83 c4 10             	add    esp,0x10
c00251ed:	8d 76 00             	lea    esi,[esi+0x0]
c00251f0:	83 c4 08             	add    esp,0x8
c00251f3:	5b                   	pop    ebx
c00251f4:	c3                   	ret    
c00251f5:	8d 76 00             	lea    esi,[esi+0x0]
c00251f8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00251ff:	83 ec 08             	sub    esp,0x8
c0025202:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025207:	50                   	push   eax
c0025208:	68 ec 01 04 c0       	push   0xc00401ec
c002520d:	e8 1e 9a 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025212:	83 c4 10             	add    esp,0x10
c0025215:	eb a9                	jmp    c00251c0 <schedule()+0x3c>
c0025217:	90                   	nop

c0025218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0025218:	83 ec 0c             	sub    esp,0xc
c002521b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025220:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0025224:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0025227:	e8 58 ff ff ff       	call   c0025184 <schedule()>
c002522c:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025231:	83 e8 01             	sub    eax,0x1
c0025234:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025239:	75 01                	jne    c002523c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c002523b:	fb                   	sti    
c002523c:	83 c4 0c             	add    esp,0xc
c002523f:	c3                   	ret    

c0025240 <blockTask(TaskState)>:
c0025240:	83 ec 0c             	sub    esp,0xc
c0025243:	fa                   	cli    
c0025244:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025249:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002524d:	83 c0 01             	add    eax,0x1
c0025250:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025255:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002525a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002525d:	e8 22 ff ff ff       	call   c0025184 <schedule()>
c0025262:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025267:	83 e8 01             	sub    eax,0x1
c002526a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002526f:	75 03                	jne    c0025274 <blockTask(TaskState)+0x34>
c0025271:	fb                   	sti    
c0025272:	66 90                	xchg   ax,ax
c0025274:	83 c4 0c             	add    esp,0xc
c0025277:	c3                   	ret    

c0025278 <waitTask(int, int*, int)>:
c0025278:	83 ec 18             	sub    esp,0x18
c002527b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025280:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025284:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0025287:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002528b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025290:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0025293:	6a 07                	push   0x7
c0025295:	e8 a6 ff ff ff       	call   c0025240 <blockTask(TaskState)>
c002529a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002529f:	83 c4 10             	add    esp,0x10
c00252a2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00252a5:	85 d2                	test   edx,edx
c00252a7:	74 0b                	je     c00252b4 <waitTask(int, int*, int)+0x3c>
c00252a9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00252ac:	89 02                	mov    DWORD PTR [edx],eax
c00252ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00252b3:	90                   	nop
c00252b4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00252b7:	83 c4 0c             	add    esp,0xc
c00252ba:	c3                   	ret    
c00252bb:	90                   	nop

c00252bc <milliTenthSleepUntil(unsigned int)>:
c00252bc:	83 ec 0c             	sub    esp,0xc
c00252bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252c3:	39 05 ec f3 03 c0    	cmp    DWORD PTR ds:0xc003f3ec,eax
c00252c9:	76 05                	jbe    c00252d0 <milliTenthSleepUntil(unsigned int)+0x14>
c00252cb:	90                   	nop
c00252cc:	83 c4 0c             	add    esp,0xc
c00252cf:	c3                   	ret    
c00252d0:	fa                   	cli    
c00252d1:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c00252d7:	83 ec 08             	sub    esp,0x8
c00252da:	83 c2 01             	add    edx,0x1
c00252dd:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c00252e3:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c00252e9:	83 c1 01             	add    ecx,0x1
c00252ec:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c00252f2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00252f8:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00252fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025300:	50                   	push   eax
c0025301:	68 e0 01 04 c0       	push   0xc00401e0
c0025306:	e8 25 99 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002530b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0025312:	e8 29 ff ff ff       	call   c0025240 <blockTask(TaskState)>
c0025317:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c002531c:	83 c4 10             	add    esp,0x10
c002531f:	83 e8 01             	sub    eax,0x1
c0025322:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c0025327:	85 c0                	test   eax,eax
c0025329:	75 09                	jne    c0025334 <milliTenthSleepUntil(unsigned int)+0x78>
c002532b:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c0025330:	85 c0                	test   eax,eax
c0025332:	75 14                	jne    c0025348 <milliTenthSleepUntil(unsigned int)+0x8c>
c0025334:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025339:	83 e8 01             	sub    eax,0x1
c002533c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025341:	75 89                	jne    c00252cc <milliTenthSleepUntil(unsigned int)+0x10>
c0025343:	fb                   	sti    
c0025344:	83 c4 0c             	add    esp,0xc
c0025347:	c3                   	ret    
c0025348:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c0025352:	e8 2d fe ff ff       	call   c0025184 <schedule()>
c0025357:	eb db                	jmp    c0025334 <milliTenthSleepUntil(unsigned int)+0x78>
c0025359:	8d 76 00             	lea    esi,[esi+0x0]

c002535c <milliTenthSleep(unsigned int)>:
c002535c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025360:	a1 ec f3 03 c0       	mov    eax,ds:0xc003f3ec
c0025365:	01 c2                	add    edx,eax
c0025367:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002536b:	e9 4c ff ff ff       	jmp    c00252bc <milliTenthSleepUntil(unsigned int)>

c0025370 <sleep(unsigned int)>:
c0025370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025374:	8d 04 80             	lea    eax,[eax+eax*4]
c0025377:	8d 04 80             	lea    eax,[eax+eax*4]
c002537a:	8d 04 80             	lea    eax,[eax+eax*4]
c002537d:	8d 04 80             	lea    eax,[eax+eax*4]
c0025380:	c1 e0 04             	shl    eax,0x4
c0025383:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0025387:	eb d3                	jmp    c002535c <milliTenthSleep(unsigned int)>
c0025389:	8d 76 00             	lea    esi,[esi+0x0]

c002538c <taskReturned>:
c002538c:	83 ec 18             	sub    esp,0x18
c002538f:	68 a0 2d 03 c0       	push   0xc0032da0
c0025394:	e8 0d ae ff ff       	call   c00201a6 <KePanic(char const*)>
c0025399:	83 c4 10             	add    esp,0x10
c002539c:	83 ec 0c             	sub    esp,0xc
c002539f:	6a 02                	push   0x2
c00253a1:	e8 9a fe ff ff       	call   c0025240 <blockTask(TaskState)>
c00253a6:	fa                   	cli    
c00253a7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00253ac:	83 c0 01             	add    eax,0x1
c00253af:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00253b4:	e8 cb fd ff ff       	call   c0025184 <schedule()>
c00253b9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00253be:	83 c4 10             	add    esp,0x10
c00253c1:	83 e8 01             	sub    eax,0x1
c00253c4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00253c9:	85 c0                	test   eax,eax
c00253cb:	75 cf                	jne    c002539c <taskReturned+0x10>
c00253cd:	fb                   	sti    
c00253ce:	eb cc                	jmp    c002539c <taskReturned+0x10>

c00253d0 <Thr::processFromPID(int)>:
c00253d0:	57                   	push   edi
c00253d1:	56                   	push   esi
c00253d2:	53                   	push   ebx
c00253d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00253d7:	fa                   	cli    
c00253d8:	8b 0d d0 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401d0
c00253de:	83 ec 0c             	sub    esp,0xc
c00253e1:	83 c1 01             	add    ecx,0x1
c00253e4:	68 ec 01 04 c0       	push   0xc00401ec
c00253e9:	89 0d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ecx
c00253ef:	e8 78 97 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00253f4:	83 c4 10             	add    esp,0x10
c00253f7:	89 c7                	mov    edi,eax
c00253f9:	eb 15                	jmp    c0025410 <Thr::processFromPID(int)+0x40>
c00253fb:	90                   	nop
c00253fc:	83 ec 0c             	sub    esp,0xc
c00253ff:	68 ec 01 04 c0       	push   0xc00401ec
c0025404:	e8 63 97 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025409:	83 c4 10             	add    esp,0x10
c002540c:	39 f8                	cmp    eax,edi
c002540e:	74 50                	je     c0025460 <Thr::processFromPID(int)+0x90>
c0025410:	83 ec 0c             	sub    esp,0xc
c0025413:	68 ec 01 04 c0       	push   0xc00401ec
c0025418:	e8 4f 97 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002541d:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025424:	89 c3                	mov    ebx,eax
c0025426:	e8 49 97 00 00       	call   c002eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002542b:	58                   	pop    eax
c002542c:	5a                   	pop    edx
c002542d:	53                   	push   ebx
c002542e:	68 ec 01 04 c0       	push   0xc00401ec
c0025433:	e8 f8 97 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025438:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002543b:	83 c4 10             	add    esp,0x10
c002543e:	39 30                	cmp    DWORD PTR [eax],esi
c0025440:	75 ba                	jne    c00253fc <Thr::processFromPID(int)+0x2c>
c0025442:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025447:	83 e8 01             	sub    eax,0x1
c002544a:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002544f:	74 0b                	je     c002545c <Thr::processFromPID(int)+0x8c>
c0025451:	8d 76 00             	lea    esi,[esi+0x0]
c0025454:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025457:	5b                   	pop    ebx
c0025458:	5e                   	pop    esi
c0025459:	5f                   	pop    edi
c002545a:	c3                   	ret    
c002545b:	90                   	nop
c002545c:	fb                   	sti    
c002545d:	eb f5                	jmp    c0025454 <Thr::processFromPID(int)+0x84>
c002545f:	90                   	nop
c0025460:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025465:	83 e8 01             	sub    eax,0x1
c0025468:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002546d:	75 05                	jne    c0025474 <Thr::processFromPID(int)+0xa4>
c002546f:	fb                   	sti    
c0025470:	5b                   	pop    ebx
c0025471:	5e                   	pop    esi
c0025472:	5f                   	pop    edi
c0025473:	c3                   	ret    
c0025474:	5b                   	pop    ebx
c0025475:	31 c0                	xor    eax,eax
c0025477:	5e                   	pop    esi
c0025478:	5f                   	pop    edi
c0025479:	c3                   	ret    
c002547a:	66 90                	xchg   ax,ax

c002547c <unblockTask(ThreadControlBlock*)>:
c002547c:	53                   	push   ebx
c002547d:	83 ec 08             	sub    esp,0x8
c0025480:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025484:	fa                   	cli    
c0025485:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002548a:	83 c0 01             	add    eax,0x1
c002548d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025492:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0025495:	85 c0                	test   eax,eax
c0025497:	74 67                	je     c0025500 <unblockTask(ThreadControlBlock*)+0x84>
c0025499:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c002549c:	83 f8 01             	cmp    eax,0x1
c002549f:	74 37                	je     c00254d8 <unblockTask(ThreadControlBlock*)+0x5c>
c00254a1:	83 ec 0c             	sub    esp,0xc
c00254a4:	68 ec 01 04 c0       	push   0xc00401ec
c00254a9:	e8 be 96 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00254ae:	83 c4 10             	add    esp,0x10
c00254b1:	85 c0                	test   eax,eax
c00254b3:	75 1b                	jne    c00254d0 <unblockTask(ThreadControlBlock*)+0x54>
c00254b5:	eb 5d                	jmp    c0025514 <unblockTask(ThreadControlBlock*)+0x98>
c00254b7:	90                   	nop
c00254b8:	83 ec 08             	sub    esp,0x8
c00254bb:	50                   	push   eax
c00254bc:	68 ec 01 04 c0       	push   0xc00401ec
c00254c1:	e8 c6 99 00 00       	call   c002ee8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00254c6:	83 c4 10             	add    esp,0x10
c00254c9:	85 c0                	test   eax,eax
c00254cb:	74 47                	je     c0025514 <unblockTask(ThreadControlBlock*)+0x98>
c00254cd:	8d 76 00             	lea    esi,[esi+0x0]
c00254d0:	39 c3                	cmp    ebx,eax
c00254d2:	75 e4                	jne    c00254b8 <unblockTask(ThreadControlBlock*)+0x3c>
c00254d4:	eb 12                	jmp    c00254e8 <unblockTask(ThreadControlBlock*)+0x6c>
c00254d6:	66 90                	xchg   ax,ax
c00254d8:	83 ec 0c             	sub    esp,0xc
c00254db:	68 3f 2d 03 c0       	push   0xc0032d3f
c00254e0:	e8 a8 3c ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00254e5:	83 c4 10             	add    esp,0x10
c00254e8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00254ed:	83 e8 01             	sub    eax,0x1
c00254f0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00254f5:	75 01                	jne    c00254f8 <unblockTask(ThreadControlBlock*)+0x7c>
c00254f7:	fb                   	sti    
c00254f8:	83 c4 08             	add    esp,0x8
c00254fb:	5b                   	pop    ebx
c00254fc:	c3                   	ret    
c00254fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025500:	83 ec 0c             	sub    esp,0xc
c0025503:	68 28 2d 03 c0       	push   0xc0032d28
c0025508:	e8 80 3c ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002550d:	83 c4 10             	add    esp,0x10
c0025510:	eb d6                	jmp    c00254e8 <unblockTask(ThreadControlBlock*)+0x6c>
c0025512:	66 90                	xchg   ax,ax
c0025514:	83 ec 08             	sub    esp,0x8
c0025517:	53                   	push   ebx
c0025518:	68 ec 01 04 c0       	push   0xc00401ec
c002551d:	e8 0e 97 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025522:	83 c4 10             	add    esp,0x10
c0025525:	eb c1                	jmp    c00254e8 <unblockTask(ThreadControlBlock*)+0x6c>
c0025527:	90                   	nop

c0025528 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0025528:	55                   	push   ebp
c0025529:	57                   	push   edi
c002552a:	56                   	push   esi
c002552b:	53                   	push   ebx
c002552c:	83 ec 1c             	sub    esp,0x1c
c002552f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0025533:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025536:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c002553c:	85 ed                	test   ebp,ebp
c002553e:	7e 28                	jle    c0025568 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0025540:	31 f6                	xor    esi,esi
c0025542:	66 90                	xchg   ax,ax
c0025544:	83 ec 0c             	sub    esp,0xc
c0025547:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c002554e:	83 c6 01             	add    esi,0x1
c0025551:	57                   	push   edi
c0025552:	e8 b7 0d ff ff       	call   c001630e <free>
c0025557:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002555a:	83 c4 10             	add    esp,0x10
c002555d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0025563:	7f df                	jg     c0025544 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0025565:	8d 76 00             	lea    esi,[esi+0x0]
c0025568:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0025572:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0025577:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c002557a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c002557d:	d3 c0                	rol    eax,cl
c002557f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0025586:	21 c8                	and    eax,ecx
c0025588:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c002558f:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025592:	89 f7                	mov    edi,esi
c0025594:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c002559c:	0f 85 72 01 00 00    	jne    c0025714 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00255a2:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00255a8:	85 ed                	test   ebp,ebp
c00255aa:	74 1c                	je     c00255c8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00255ac:	83 ec 0c             	sub    esp,0xc
c00255af:	55                   	push   ebp
c00255b0:	e8 e7 a8 ff ff       	call   c001fe9c <EnvVarContainer::~EnvVarContainer()>
c00255b5:	59                   	pop    ecx
c00255b6:	5e                   	pop    esi
c00255b7:	6a 0c                	push   0xc
c00255b9:	55                   	push   ebp
c00255ba:	e8 a1 3a ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c00255bf:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00255c2:	83 c4 10             	add    esp,0x10
c00255c5:	89 f7                	mov    edi,esi
c00255c7:	90                   	nop
c00255c8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00255ce:	85 c0                	test   eax,eax
c00255d0:	0f 84 b2 00 00 00    	je     c0025688 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00255d6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00255d9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00255dd:	31 c9                	xor    ecx,ecx
c00255df:	eb 17                	jmp    c00255f8 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00255e1:	8d 76 00             	lea    esi,[esi+0x0]
c00255e4:	83 c1 01             	add    ecx,0x1
c00255e7:	83 f9 10             	cmp    ecx,0x10
c00255ea:	0f 84 98 00 00 00    	je     c0025688 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00255f0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00255f6:	66 90                	xchg   ax,ax
c00255f8:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00255ff:	d3 fa                	sar    edx,cl
c0025601:	80 e2 01             	and    dl,0x1
c0025604:	74 de                	je     c00255e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025606:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0025609:	01 d2                	add    edx,edx
c002560b:	01 ca                	add    edx,ecx
c002560d:	8d 14 92             	lea    edx,[edx+edx*4]
c0025610:	01 d0                	add    eax,edx
c0025612:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0025618:	83 fd 07             	cmp    ebp,0x7
c002561b:	75 c7                	jne    c00255e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002561d:	05 40 02 00 00       	add    eax,0x240
c0025622:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0025625:	83 fd ff             	cmp    ebp,0xffffffff
c0025628:	0f 8c ee 00 00 00    	jl     c002571c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c002562e:	0f 84 ac 01 00 00    	je     c00257e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0025634:	85 ed                	test   ebp,ebp
c0025636:	0f 84 90 01 00 00    	je     c00257cc <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c002563c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c002563e:	75 a4                	jne    c00255e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0025640:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0025646:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002564a:	01 d0                	add    eax,edx
c002564c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0025650:	83 ec 0c             	sub    esp,0xc
c0025653:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0025659:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c002565c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0025662:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0025669:	50                   	push   eax
c002566a:	e8 0d fe ff ff       	call   c002547c <unblockTask(ThreadControlBlock*)>
c002566f:	83 c4 10             	add    esp,0x10
c0025672:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025675:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025679:	89 f7                	mov    edi,esi
c002567b:	83 c1 01             	add    ecx,0x1
c002567e:	83 f9 10             	cmp    ecx,0x10
c0025681:	0f 85 69 ff ff ff    	jne    c00255f0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c0025687:	90                   	nop
c0025688:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c002568e:	85 c0                	test   eax,eax
c0025690:	74 62                	je     c00256f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0025692:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0025698:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c002569e:	74 54                	je     c00256f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00256a0:	83 ec 0c             	sub    esp,0xc
c00256a3:	68 ec 01 04 c0       	push   0xc00401ec
c00256a8:	e8 bf 94 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00256ad:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00256b4:	89 c7                	mov    edi,eax
c00256b6:	e8 95 94 00 00       	call   c002eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00256bb:	83 c4 10             	add    esp,0x10
c00256be:	84 c0                	test   al,al
c00256c0:	0f 84 ce 00 00 00    	je     c0025794 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00256c6:	66 90                	xchg   ax,ax
c00256c8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00256cb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00256d1:	85 d2                	test   edx,edx
c00256d3:	74 0f                	je     c00256e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00256d5:	83 ec 0c             	sub    esp,0xc
c00256d8:	8b 02                	mov    eax,DWORD PTR [edx]
c00256da:	52                   	push   edx
c00256db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00256de:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00256e1:	83 c4 10             	add    esp,0x10
c00256e4:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00256ee:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00256f1:	8d 76 00             	lea    esi,[esi+0x0]
c00256f4:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00256fa:	85 db                	test   ebx,ebx
c00256fc:	74 16                	je     c0025714 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00256fe:	83 ec 0c             	sub    esp,0xc
c0025701:	53                   	push   ebx
c0025702:	e8 f3 2c ff ff       	call   c00183fa <VAS::~VAS()>
c0025707:	58                   	pop    eax
c0025708:	5a                   	pop    edx
c0025709:	6a 14                	push   0x14
c002570b:	53                   	push   ebx
c002570c:	e8 4f 39 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c0025711:	83 c4 10             	add    esp,0x10
c0025714:	83 c4 1c             	add    esp,0x1c
c0025717:	5b                   	pop    ebx
c0025718:	5e                   	pop    esi
c0025719:	5f                   	pop    edi
c002571a:	5d                   	pop    ebp
c002571b:	c3                   	ret    
c002571c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025720:	83 ec 0c             	sub    esp,0xc
c0025723:	68 d4 2d 03 c0       	push   0xc0032dd4
c0025728:	e8 79 aa ff ff       	call   c00201a6 <KePanic(char const*)>
c002572d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0025730:	83 c4 10             	add    esp,0x10
c0025733:	89 f7                	mov    edi,esi
c0025735:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025739:	e9 a6 fe ff ff       	jmp    c00255e4 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c002573e:	66 90                	xchg   ax,ax
c0025740:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0025746:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c002574c:	75 1e                	jne    c002576c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c002574e:	83 ec 0c             	sub    esp,0xc
c0025751:	68 3c 2e 03 c0       	push   0xc0032e3c
c0025756:	e8 32 3a ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002575b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0025762:	e8 d9 fa ff ff       	call   c0025240 <blockTask(TaskState)>
c0025767:	83 c4 10             	add    esp,0x10
c002576a:	66 90                	xchg   ax,ax
c002576c:	83 ec 08             	sub    esp,0x8
c002576f:	56                   	push   esi
c0025770:	68 ec 01 04 c0       	push   0xc00401ec
c0025775:	e8 b6 94 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c002577a:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c0025781:	e8 e6 93 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0025786:	83 c4 10             	add    esp,0x10
c0025789:	39 f8                	cmp    eax,edi
c002578b:	0f 84 37 ff ff ff    	je     c00256c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0025791:	8d 76 00             	lea    esi,[esi+0x0]
c0025794:	83 ec 0c             	sub    esp,0xc
c0025797:	68 ec 01 04 c0       	push   0xc00401ec
c002579c:	e8 cb 93 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00257a1:	c7 04 24 ec 01 04 c0 	mov    DWORD PTR [esp],0xc00401ec
c00257a8:	89 c6                	mov    esi,eax
c00257aa:	e8 c5 93 00 00       	call   c002eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00257af:	83 c4 10             	add    esp,0x10
c00257b2:	39 f3                	cmp    ebx,esi
c00257b4:	74 b6                	je     c002576c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00257b6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00257b9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257bc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00257c2:	75 a8                	jne    c002576c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00257c4:	e9 77 ff ff ff       	jmp    c0025740 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00257c9:	8d 76 00             	lea    esi,[esi+0x0]
c00257cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00257d0:	83 ec 0c             	sub    esp,0xc
c00257d3:	68 08 2e 03 c0       	push   0xc0032e08
c00257d8:	e9 4b ff ff ff       	jmp    c0025728 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00257dd:	8d 76 00             	lea    esi,[esi+0x0]
c00257e0:	8b 36                	mov    esi,DWORD PTR [esi]
c00257e2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00257e6:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00257e9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00257ec:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00257f2:	01 d7                	add    edi,edx
c00257f4:	89 f8                	mov    eax,edi
c00257f6:	e9 51 fe ff ff       	jmp    c002564c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00257fb:	90                   	nop

c00257fc <cleanerTaskFunction(void*)>:
c00257fc:	53                   	push   ebx
c00257fd:	83 ec 08             	sub    esp,0x8
c0025800:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025805:	83 e8 01             	sub    eax,0x1
c0025808:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002580d:	75 01                	jne    c0025810 <cleanerTaskFunction(void*)+0x14>
c002580f:	fb                   	sti    
c0025810:	fa                   	cli    
c0025811:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025816:	80 3d b4 01 04 c0 00 	cmp    BYTE PTR ds:0xc00401b4,0x0
c002581d:	8d 50 01             	lea    edx,[eax+0x1]
c0025820:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025826:	0f 84 c4 00 00 00    	je     c00258f0 <cleanerTaskFunction(void*)+0xf4>
c002582c:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025831:	85 c0                	test   eax,eax
c0025833:	75 03                	jne    c0025838 <cleanerTaskFunction(void*)+0x3c>
c0025835:	fb                   	sti    
c0025836:	66 90                	xchg   ax,ax
c0025838:	c6 05 b4 01 04 c0 00 	mov    BYTE PTR ds:0xc00401b4,0x0
c002583f:	fa                   	cli    
c0025840:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c0025846:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c002584c:	83 c2 01             	add    edx,0x1
c002584f:	83 c1 01             	add    ecx,0x1
c0025852:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025858:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c002585e:	fa                   	cli    
c002585f:	8b 1d d0 01 04 c0    	mov    ebx,DWORD PTR ds:0xc00401d0
c0025865:	83 c3 01             	add    ebx,0x1
c0025868:	89 1d d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,ebx
c002586e:	eb 28                	jmp    c0025898 <cleanerTaskFunction(void*)+0x9c>
c0025870:	83 ec 0c             	sub    esp,0xc
c0025873:	68 d4 01 04 c0       	push   0xc00401d4
c0025878:	e8 ef 92 00 00       	call   c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c002587d:	c7 04 24 d4 01 04 c0 	mov    DWORD PTR [esp],0xc00401d4
c0025884:	89 c3                	mov    ebx,eax
c0025886:	e8 e9 92 00 00       	call   c002eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c002588b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002588e:	e8 95 fc ff ff       	call   c0025528 <cleanupTerminatedTask(ThreadControlBlock*)>
c0025893:	83 c4 10             	add    esp,0x10
c0025896:	66 90                	xchg   ax,ax
c0025898:	83 ec 0c             	sub    esp,0xc
c002589b:	68 d4 01 04 c0       	push   0xc00401d4
c00258a0:	e8 ab 92 00 00       	call   c002eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00258a5:	83 c4 10             	add    esp,0x10
c00258a8:	84 c0                	test   al,al
c00258aa:	74 c4                	je     c0025870 <cleanerTaskFunction(void*)+0x74>
c00258ac:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00258b1:	83 e8 01             	sub    eax,0x1
c00258b4:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00258b9:	75 01                	jne    c00258bc <cleanerTaskFunction(void*)+0xc0>
c00258bb:	fb                   	sti    
c00258bc:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c00258c1:	83 e8 01             	sub    eax,0x1
c00258c4:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c00258c9:	0f 85 31 ff ff ff    	jne    c0025800 <cleanerTaskFunction(void*)+0x4>
c00258cf:	a1 c8 01 04 c0       	mov    eax,ds:0xc00401c8
c00258d4:	85 c0                	test   eax,eax
c00258d6:	0f 84 24 ff ff ff    	je     c0025800 <cleanerTaskFunction(void*)+0x4>
c00258dc:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00258e6:	e8 99 f8 ff ff       	call   c0025184 <schedule()>
c00258eb:	e9 10 ff ff ff       	jmp    c0025800 <cleanerTaskFunction(void*)+0x4>
c00258f0:	83 ec 0c             	sub    esp,0xc
c00258f3:	6a 02                	push   0x2
c00258f5:	e8 1e f9 ff ff       	call   c0025218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00258fa:	83 c4 10             	add    esp,0x10
c00258fd:	e9 36 ff ff ff       	jmp    c0025838 <cleanerTaskFunction(void*)+0x3c>
c0025902:	66 90                	xchg   ax,ax

c0025904 <terminateTask(int)>:
c0025904:	83 ec 14             	sub    esp,0x14
c0025907:	fa                   	cli    
c0025908:	8b 15 d0 01 04 c0    	mov    edx,DWORD PTR ds:0xc00401d0
c002590e:	8b 0d cc 01 04 c0    	mov    ecx,DWORD PTR ds:0xc00401cc
c0025914:	83 c2 01             	add    edx,0x1
c0025917:	83 c1 01             	add    ecx,0x1
c002591a:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025920:	89 0d cc 01 04 c0    	mov    DWORD PTR ds:0xc00401cc,ecx
c0025926:	fa                   	cli    
c0025927:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002592c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0025930:	83 c0 01             	add    eax,0x1
c0025933:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025938:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002593d:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0025940:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025945:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0025948:	50                   	push   eax
c0025949:	68 d4 01 04 c0       	push   0xc00401d4
c002594e:	e8 dd 92 00 00       	call   c002ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0025953:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025958:	83 c4 10             	add    esp,0x10
c002595b:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0025962:	a1 b0 01 04 c0       	mov    eax,ds:0xc00401b0
c0025967:	85 c0                	test   eax,eax
c0025969:	74 65                	je     c00259d0 <terminateTask(int)+0xcc>
c002596b:	83 ec 0c             	sub    esp,0xc
c002596e:	c6 05 b4 01 04 c0 01 	mov    BYTE PTR ds:0xc00401b4,0x1
c0025975:	50                   	push   eax
c0025976:	e8 01 fb ff ff       	call   c002547c <unblockTask(ThreadControlBlock*)>
c002597b:	83 c4 10             	add    esp,0x10
c002597e:	66 90                	xchg   ax,ax
c0025980:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025985:	83 e8 01             	sub    eax,0x1
c0025988:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002598d:	75 01                	jne    c0025990 <terminateTask(int)+0x8c>
c002598f:	fb                   	sti    
c0025990:	a1 cc 01 04 c0       	mov    eax,ds:0xc00401cc
c0025995:	83 e8 01             	sub    eax,0x1
c0025998:	a3 cc 01 04 c0       	mov    ds:0xc00401cc,eax
c002599d:	75 09                	jne    c00259a8 <terminateTask(int)+0xa4>
c002599f:	83 3d c8 01 04 c0 00 	cmp    DWORD PTR ds:0xc00401c8,0x0
c00259a6:	75 3c                	jne    c00259e4 <terminateTask(int)+0xe0>
c00259a8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259ad:	83 e8 01             	sub    eax,0x1
c00259b0:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259b5:	75 01                	jne    c00259b8 <terminateTask(int)+0xb4>
c00259b7:	fb                   	sti    
c00259b8:	fa                   	cli    
c00259b9:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c00259be:	83 c0 01             	add    eax,0x1
c00259c1:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c00259c6:	66 90                	xchg   ax,ax
c00259c8:	e8 b7 f7 ff ff       	call   c0025184 <schedule()>
c00259cd:	eb d9                	jmp    c00259a8 <terminateTask(int)+0xa4>
c00259cf:	90                   	nop
c00259d0:	83 ec 0c             	sub    esp,0xc
c00259d3:	68 56 2d 03 c0       	push   0xc0032d56
c00259d8:	e8 b0 37 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00259dd:	83 c4 10             	add    esp,0x10
c00259e0:	eb 9e                	jmp    c0025980 <terminateTask(int)+0x7c>
c00259e2:	66 90                	xchg   ax,ax
c00259e4:	c7 05 c8 01 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00401c8,0x0
c00259ee:	eb d8                	jmp    c00259c8 <terminateTask(int)+0xc4>

c00259f0 <Thr::terminateFromIRQ(int)>:
c00259f0:	83 ec 18             	sub    esp,0x18
c00259f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00259f7:	50                   	push   eax
c00259f8:	e8 07 ff ff ff       	call   c0025904 <terminateTask(int)>
c00259fd:	8d 76 00             	lea    esi,[esi+0x0]

c0025a00 <__static_initialization_and_destruction_0(int, int)>:
c0025a00:	83 ec 0c             	sub    esp,0xc
c0025a03:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0025a08:	0f 85 8e 00 00 00    	jne    c0025a9c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025a0e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0025a16:	0f 85 80 00 00 00    	jne    c0025a9c <__static_initialization_and_destruction_0(int, int)+0x9c>
c0025a1c:	83 ec 0c             	sub    esp,0xc
c0025a1f:	68 ec 01 04 c0       	push   0xc00401ec
c0025a24:	e8 bb 94 00 00       	call   c002eee4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a29:	83 c4 10             	add    esp,0x10
c0025a2c:	83 ec 04             	sub    esp,0x4
c0025a2f:	68 18 3a 03 c0       	push   0xc0033a18
c0025a34:	68 ec 01 04 c0       	push   0xc00401ec
c0025a39:	68 94 ee 02 c0       	push   0xc002ee94
c0025a3e:	e8 cd 35 ff ff       	call   c0019010 <__cxa_atexit>
c0025a43:	83 c4 10             	add    esp,0x10
c0025a46:	83 ec 0c             	sub    esp,0xc
c0025a49:	68 e0 01 04 c0       	push   0xc00401e0
c0025a4e:	e8 91 94 00 00       	call   c002eee4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a53:	83 c4 10             	add    esp,0x10
c0025a56:	83 ec 04             	sub    esp,0x4
c0025a59:	68 18 3a 03 c0       	push   0xc0033a18
c0025a5e:	68 e0 01 04 c0       	push   0xc00401e0
c0025a63:	68 94 ee 02 c0       	push   0xc002ee94
c0025a68:	e8 a3 35 ff ff       	call   c0019010 <__cxa_atexit>
c0025a6d:	83 c4 10             	add    esp,0x10
c0025a70:	83 ec 0c             	sub    esp,0xc
c0025a73:	68 d4 01 04 c0       	push   0xc00401d4
c0025a78:	e8 67 94 00 00       	call   c002eee4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0025a7d:	83 c4 10             	add    esp,0x10
c0025a80:	83 ec 04             	sub    esp,0x4
c0025a83:	68 18 3a 03 c0       	push   0xc0033a18
c0025a88:	68 d4 01 04 c0       	push   0xc00401d4
c0025a8d:	68 94 ee 02 c0       	push   0xc002ee94
c0025a92:	e8 79 35 ff ff       	call   c0019010 <__cxa_atexit>
c0025a97:	83 c4 10             	add    esp,0x10
c0025a9a:	66 90                	xchg   ax,ax
c0025a9c:	90                   	nop
c0025a9d:	83 c4 0c             	add    esp,0xc
c0025aa0:	c3                   	ret    
c0025aa1:	8d 76 00             	lea    esi,[esi+0x0]

c0025aa4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0025aa4:	83 ec 0c             	sub    esp,0xc
c0025aa7:	83 ec 08             	sub    esp,0x8
c0025aaa:	68 ff ff 00 00       	push   0xffff
c0025aaf:	6a 01                	push   0x1
c0025ab1:	e8 4a ff ff ff       	call   c0025a00 <__static_initialization_and_destruction_0(int, int)>
c0025ab6:	83 c4 10             	add    esp,0x10
c0025ab9:	83 c4 0c             	add    esp,0xc
c0025abc:	c3                   	ret    

c0025abd <Vm::inbv(unsigned short)>:
c0025abd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025ac1:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025ac6:	75 06                	jne    c0025ace <Vm::inbv(unsigned short)+0x11>
c0025ac8:	a0 2c 02 04 c0       	mov    al,ds:0xc004022c
c0025acd:	c3                   	ret    
c0025ace:	ec                   	in     al,dx
c0025acf:	c3                   	ret    

c0025ad0 <Vm::outbv(unsigned short, unsigned char)>:
c0025ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025ad4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025ad8:	66 81 fa fe fe       	cmp    dx,0xfefe
c0025add:	75 25                	jne    c0025b04 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0025adf:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025ae5:	8d 51 01             	lea    edx,[ecx+0x1]
c0025ae8:	88 81 40 02 04 c0    	mov    BYTE PTR [ecx-0x3ffbfdc0],al
c0025aee:	89 15 2c 02 04 c0    	mov    DWORD PTR ds:0xc004022c,edx
c0025af4:	83 fa 20             	cmp    edx,0x20
c0025af7:	75 0c                	jne    c0025b05 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0025af9:	c7 05 2c 02 04 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x1f
c0025b03:	c3                   	ret    
c0025b04:	ee                   	out    dx,al
c0025b05:	c3                   	ret    

c0025b06 <Vm::realToLinear(unsigned short, unsigned short)>:
c0025b06:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025b0b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025b10:	c1 e0 04             	shl    eax,0x4
c0025b13:	01 d0                	add    eax,edx
c0025b15:	c3                   	ret    

c0025b16 <Vm::getSegment(unsigned int)>:
c0025b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b1a:	c1 e8 10             	shr    eax,0x10
c0025b1d:	c3                   	ret    

c0025b1e <Vm::getOffset(unsigned int)>:
c0025b1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0025b22:	c3                   	ret    

c0025b23 <Vm::mainloop2()>:
c0025b23:	83 ec 18             	sub    esp,0x18
c0025b26:	fa                   	cli    
c0025b27:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025b2d:	6a 02                	push   0x2
c0025b2f:	c6 05 25 02 04 c0 01 	mov    BYTE PTR ds:0xc0040225,0x1
c0025b36:	e8 dd f6 ff ff       	call   c0025218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025b3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025b40:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0025b44:	52                   	push   edx
c0025b45:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0025b49:	52                   	push   edx
c0025b4a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0025b4e:	52                   	push   edx
c0025b4f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0025b53:	50                   	push   eax
c0025b54:	e8 b6 a6 fd ff       	call   c000020f <goToVM86>
c0025b59:	83 c4 2c             	add    esp,0x2c
c0025b5c:	c3                   	ret    

c0025b5d <Vm::mainVm8086Loop(void*)>:
c0025b5d:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025b62:	48                   	dec    eax
c0025b63:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025b68:	75 01                	jne    c0025b6b <Vm::mainVm8086Loop(void*)+0xe>
c0025b6a:	fb                   	sti    
c0025b6b:	eb b6                	jmp    c0025b23 <Vm::mainloop2()>

c0025b6d <Vm::mainloop3(unsigned long)>:
c0025b6d:	83 ec 18             	sub    esp,0x18
c0025b70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b74:	fa                   	cli    
c0025b75:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025b7b:	6a 02                	push   0x2
c0025b7d:	c6 05 24 02 04 c0 01 	mov    BYTE PTR ds:0xc0040224,0x1
c0025b84:	a3 20 02 04 c0       	mov    ds:0xc0040220,eax
c0025b89:	e8 8a f6 ff ff       	call   c0025218 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0025b8e:	83 c4 1c             	add    esp,0x1c
c0025b91:	eb 90                	jmp    c0025b23 <Vm::mainloop2()>

c0025b93 <Vm::initialise8086()>:
c0025b93:	83 ec 0c             	sub    esp,0xc
c0025b96:	68 80 00 00 00       	push   0x80
c0025b9b:	6a 00                	push   0x0
c0025b9d:	68 5d 5b 02 c0       	push   0xc0025b5d
c0025ba2:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025ba8:	e8 87 f3 ff ff       	call   c0024f34 <Process::createThread(void (*)(void*), void*, int)>
c0025bad:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0025bb4:	a3 28 02 04 c0       	mov    ds:0xc0040228,eax
c0025bb9:	68 00 01 00 00       	push   0x100
c0025bbe:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0025bc3:	6a 00                	push   0x0
c0025bc5:	6a 00                	push   0x0
c0025bc7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0025bcd:	e8 90 2b ff ff       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0025bd2:	83 c4 2c             	add    esp,0x2c
c0025bd5:	c3                   	ret    

c0025bd6 <Vm::finish8086()>:
c0025bd6:	53                   	push   ebx
c0025bd7:	83 ec 08             	sub    esp,0x8
c0025bda:	fa                   	cli    
c0025bdb:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025be1:	80 3d 24 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040224,0x0
c0025be8:	75 15                	jne    c0025bff <Vm::finish8086()+0x29>
c0025bea:	e8 95 f5 ff ff       	call   c0025184 <schedule()>
c0025bef:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025bf4:	48                   	dec    eax
c0025bf5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025bfa:	75 de                	jne    c0025bda <Vm::finish8086()+0x4>
c0025bfc:	fb                   	sti    
c0025bfd:	eb db                	jmp    c0025bda <Vm::finish8086()+0x4>
c0025bff:	83 ec 0c             	sub    esp,0xc
c0025c02:	8b 1d 20 02 04 c0    	mov    ebx,DWORD PTR ds:0xc0040220
c0025c08:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025c0e:	c6 05 24 02 04 c0 00 	mov    BYTE PTR ds:0xc0040224,0x0
c0025c15:	e8 62 f8 ff ff       	call   c002547c <unblockTask(ThreadControlBlock*)>
c0025c1a:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c1f:	83 c4 10             	add    esp,0x10
c0025c22:	8d 50 ff             	lea    edx,[eax-0x1]
c0025c25:	89 15 d0 01 04 c0    	mov    DWORD PTR ds:0xc00401d0,edx
c0025c2b:	85 d2                	test   edx,edx
c0025c2d:	75 01                	jne    c0025c30 <Vm::finish8086()+0x5a>
c0025c2f:	fb                   	sti    
c0025c30:	89 d8                	mov    eax,ebx
c0025c32:	83 c4 08             	add    esp,0x8
c0025c35:	5b                   	pop    ebx
c0025c36:	c3                   	ret    

c0025c37 <Vm::getOutput8086(unsigned char*)>:
c0025c37:	57                   	push   edi
c0025c38:	8b 0d 2c 02 04 c0    	mov    ecx,DWORD PTR ds:0xc004022c
c0025c3e:	56                   	push   esi
c0025c3f:	be 40 02 04 c0       	mov    esi,0xc0040240
c0025c44:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0025c48:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025c4a:	a1 2c 02 04 c0       	mov    eax,ds:0xc004022c
c0025c4f:	5e                   	pop    esi
c0025c50:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025c5a:	5f                   	pop    edi
c0025c5b:	c3                   	ret    

c0025c5c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025c5c:	55                   	push   ebp
c0025c5d:	57                   	push   edi
c0025c5e:	56                   	push   esi
c0025c5f:	53                   	push   ebx
c0025c60:	83 ec 0c             	sub    esp,0xc
c0025c63:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025c67:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0025c6b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c6f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c73:	fa                   	cli    
c0025c74:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025c7a:	80 3d 25 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040225,0x0
c0025c81:	75 15                	jne    c0025c98 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0025c83:	e8 fc f4 ff ff       	call   c0025184 <schedule()>
c0025c88:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025c8d:	48                   	dec    eax
c0025c8e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025c93:	75 de                	jne    c0025c73 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025c95:	fb                   	sti    
c0025c96:	eb db                	jmp    c0025c73 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0025c98:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025c9d:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025ca7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025cab:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025caf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025cb3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0025cb7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025cbb:	0f b7 ff             	movzx  edi,di
c0025cbe:	0f b7 f6             	movzx  esi,si
c0025cc1:	50                   	push   eax
c0025cc2:	6a 20                	push   0x20
c0025cc4:	6a 00                	push   0x0
c0025cc6:	68 40 02 04 c0       	push   0xc0040240
c0025ccb:	e8 20 a8 fd ff       	call   c00004f0 <memset>
c0025cd0:	5a                   	pop    edx
c0025cd1:	59                   	pop    ecx
c0025cd2:	57                   	push   edi
c0025cd3:	56                   	push   esi
c0025cd4:	e8 2d fe ff ff       	call   c0025b06 <Vm::realToLinear(unsigned short, unsigned short)>
c0025cd9:	83 c4 10             	add    esp,0x10
c0025cdc:	89 c7                	mov    edi,eax
c0025cde:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025ce2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0025ce6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025ce8:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025ced:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025cf4:	48                   	dec    eax
c0025cf5:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025cfa:	75 01                	jne    c0025cfd <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0025cfc:	fb                   	sti    
c0025cfd:	83 ec 0c             	sub    esp,0xc
c0025d00:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025d06:	e8 71 f7 ff ff       	call   c002547c <unblockTask(ThreadControlBlock*)>
c0025d0b:	83 c4 1c             	add    esp,0x1c
c0025d0e:	b0 01                	mov    al,0x1
c0025d10:	5b                   	pop    ebx
c0025d11:	5e                   	pop    esi
c0025d12:	5f                   	pop    edi
c0025d13:	5d                   	pop    ebp
c0025d14:	c3                   	ret    

c0025d15 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0025d15:	55                   	push   ebp
c0025d16:	57                   	push   edi
c0025d17:	56                   	push   esi
c0025d18:	53                   	push   ebx
c0025d19:	83 ec 34             	sub    esp,0x34
c0025d1c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025d20:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0025d24:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025d28:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0025d2c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025d30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025d34:	68 64 2e 03 c0       	push   0xc0032e64
c0025d39:	e8 4f 34 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0025d3e:	83 c4 10             	add    esp,0x10
c0025d41:	fa                   	cli    
c0025d42:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c0025d48:	8a 1d 25 02 04 c0    	mov    bl,BYTE PTR ds:0xc0040225
c0025d4e:	84 db                	test   bl,bl
c0025d50:	75 15                	jne    c0025d67 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0025d52:	e8 2d f4 ff ff       	call   c0025184 <schedule()>
c0025d57:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025d5c:	48                   	dec    eax
c0025d5d:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025d62:	75 dd                	jne    c0025d41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025d64:	fb                   	sti    
c0025d65:	eb da                	jmp    c0025d41 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0025d67:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025d6b:	a1 28 02 04 c0       	mov    eax,ds:0xc0040228
c0025d70:	c7 05 2c 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc004022c,0x0
c0025d7a:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0025d7e:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0025d82:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0025d86:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0025d8a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0025d8e:	50                   	push   eax
c0025d8f:	6a 20                	push   0x20
c0025d91:	6a 00                	push   0x0
c0025d93:	68 40 02 04 c0       	push   0xc0040240
c0025d98:	e8 53 a7 fd ff       	call   c00004f0 <memset>
c0025d9d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0025da4:	e8 55 05 ff ff       	call   c00162fe <malloc>
c0025da9:	83 c4 0c             	add    esp,0xc
c0025dac:	89 c5                	mov    ebp,eax
c0025dae:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c0025db4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025db8:	50                   	push   eax
c0025db9:	e8 d6 45 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c0025dbe:	83 c4 10             	add    esp,0x10
c0025dc1:	85 ed                	test   ebp,ebp
c0025dc3:	75 0a                	jne    c0025dcf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0025dc5:	83 ec 0c             	sub    esp,0xc
c0025dc8:	68 86 2e 03 c0       	push   0xc0032e86
c0025dcd:	eb 2b                	jmp    c0025dfa <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0025dcf:	50                   	push   eax
c0025dd0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0025dd4:	50                   	push   eax
c0025dd5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0025dd9:	50                   	push   eax
c0025dda:	55                   	push   ebp
c0025ddb:	e8 d4 48 ff ff       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c0025de0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0025de4:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0025de8:	83 c4 10             	add    esp,0x10
c0025deb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025df0:	74 27                	je     c0025e19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0025df2:	83 ec 0c             	sub    esp,0xc
c0025df5:	68 9a 2e 03 c0       	push   0xc0032e9a
c0025dfa:	e8 a7 a3 ff ff       	call   c00201a6 <KePanic(char const*)>
c0025dff:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e04:	83 c4 10             	add    esp,0x10
c0025e07:	48                   	dec    eax
c0025e08:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e0d:	85 c0                	test   eax,eax
c0025e0f:	75 01                	jne    c0025e12 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025e11:	fb                   	sti    
c0025e12:	31 db                	xor    ebx,ebx
c0025e14:	e9 90 00 00 00       	jmp    c0025ea9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025e19:	51                   	push   ecx
c0025e1a:	51                   	push   ecx
c0025e1b:	6a 01                	push   0x1
c0025e1d:	55                   	push   ebp
c0025e1e:	e8 8f 45 ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c0025e23:	83 c4 10             	add    esp,0x10
c0025e26:	85 c0                	test   eax,eax
c0025e28:	74 26                	je     c0025e50 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0025e2a:	83 ec 0c             	sub    esp,0xc
c0025e2d:	68 b3 2e 03 c0       	push   0xc0032eb3
c0025e32:	e8 6f a3 ff ff       	call   c00201a6 <KePanic(char const*)>
c0025e37:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e3c:	83 c4 10             	add    esp,0x10
c0025e3f:	48                   	dec    eax
c0025e40:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e45:	85 c0                	test   eax,eax
c0025e47:	75 c9                	jne    c0025e12 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0025e49:	fb                   	sti    
c0025e4a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0025e4e:	eb 59                	jmp    c0025ea9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0025e50:	0f b7 ff             	movzx  edi,di
c0025e53:	50                   	push   eax
c0025e54:	0f b7 f6             	movzx  esi,si
c0025e57:	50                   	push   eax
c0025e58:	57                   	push   edi
c0025e59:	56                   	push   esi
c0025e5a:	e8 a7 fc ff ff       	call   c0025b06 <Vm::realToLinear(unsigned short, unsigned short)>
c0025e5f:	5a                   	pop    edx
c0025e60:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0025e63:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0025e67:	51                   	push   ecx
c0025e68:	50                   	push   eax
c0025e69:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025e6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0025e71:	55                   	push   ebp
c0025e72:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0025e75:	83 c4 14             	add    esp,0x14
c0025e78:	55                   	push   ebp
c0025e79:	e8 92 45 ff ff       	call   c001a410 <File::close()>
c0025e7e:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0025e83:	83 c4 10             	add    esp,0x10
c0025e86:	48                   	dec    eax
c0025e87:	c6 05 25 02 04 c0 00 	mov    BYTE PTR ds:0xc0040225,0x0
c0025e8e:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0025e93:	85 c0                	test   eax,eax
c0025e95:	75 01                	jne    c0025e98 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0025e97:	fb                   	sti    
c0025e98:	83 ec 0c             	sub    esp,0xc
c0025e9b:	ff 35 28 02 04 c0    	push   DWORD PTR ds:0xc0040228
c0025ea1:	e8 d6 f5 ff ff       	call   c002547c <unblockTask(ThreadControlBlock*)>
c0025ea6:	83 c4 10             	add    esp,0x10
c0025ea9:	83 c4 2c             	add    esp,0x2c
c0025eac:	88 d8                	mov    al,bl
c0025eae:	5b                   	pop    ebx
c0025eaf:	5e                   	pop    esi
c0025eb0:	5f                   	pop    edi
c0025eb1:	5d                   	pop    ebp
c0025eb2:	c3                   	ret    

c0025eb3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0025eb3:	57                   	push   edi
c0025eb4:	56                   	push   esi
c0025eb5:	53                   	push   ebx
c0025eb6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025eba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025ebe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0025ec2:	83 e8 06             	sub    eax,0x6
c0025ec5:	0f b7 c0             	movzx  eax,ax
c0025ec8:	50                   	push   eax
c0025ec9:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0025ece:	50                   	push   eax
c0025ecf:	e8 32 fc ff ff       	call   c0025b06 <Vm::realToLinear(unsigned short, unsigned short)>
c0025ed4:	5a                   	pop    edx
c0025ed5:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0025ed8:	59                   	pop    ecx
c0025ed9:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0025edc:	8d 51 fa             	lea    edx,[ecx-0x6]
c0025edf:	81 e2 ff ff 00 00    	and    edx,0xffff
c0025ee5:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0025ee8:	8d 56 02             	lea    edx,[esi+0x2]
c0025eeb:	66 89 10             	mov    WORD PTR [eax],dx
c0025eee:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0025ef2:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0025ef6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0025ef9:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0025efd:	0f b6 f1             	movzx  esi,cl
c0025f00:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025f04:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0025f0a:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0025f0e:	0f b6 d5             	movzx  edx,ch
c0025f11:	74 0a                	je     c0025f1d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0025f13:	c1 e2 08             	shl    edx,0x8
c0025f16:	09 f2                	or     edx,esi
c0025f18:	80 ce 02             	or     dh,0x2
c0025f1b:	eb 08                	jmp    c0025f25 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0025f1d:	c1 e2 08             	shl    edx,0x8
c0025f20:	09 f2                	or     edx,esi
c0025f22:	80 e6 fd             	and    dh,0xfd
c0025f25:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0025f29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0025f2e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0025f32:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0025f3a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0025f3d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0025f45:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0025f48:	5b                   	pop    ebx
c0025f49:	5e                   	pop    esi
c0025f4a:	5f                   	pop    edi
c0025f4b:	c3                   	ret    

c0025f4c <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0025f4c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f51:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f56:	c1 e0 04             	shl    eax,0x4
c0025f59:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0025f5c:	c3                   	ret    

c0025f5d <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0025f5d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f62:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f67:	c1 e0 04             	shl    eax,0x4
c0025f6a:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0025f6e:	c3                   	ret    

c0025f6f <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0025f6f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f74:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f79:	c1 e0 04             	shl    eax,0x4
c0025f7c:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0025f7f:	c3                   	ret    

c0025f80 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0025f80:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f85:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f8a:	c1 e0 04             	shl    eax,0x4
c0025f8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025f91:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0025f94:	c3                   	ret    

c0025f95 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0025f95:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025f9a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025f9f:	c1 e0 04             	shl    eax,0x4
c0025fa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025fa6:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0025faa:	c3                   	ret    

c0025fab <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0025fab:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0025fb0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0025fb5:	c1 e0 04             	shl    eax,0x4
c0025fb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0025fbc:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0025fbf:	c3                   	ret    

c0025fc0 <Vm::faultHandler(regs*)>:
c0025fc0:	55                   	push   ebp
c0025fc1:	57                   	push   edi
c0025fc2:	56                   	push   esi
c0025fc3:	53                   	push   ebx
c0025fc4:	83 ec 2c             	sub    esp,0x2c
c0025fc7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0025fcb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0025fce:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0025fd2:	0f b7 f8             	movzx  edi,ax
c0025fd5:	52                   	push   edx
c0025fd6:	0f b7 c0             	movzx  eax,ax
c0025fd9:	50                   	push   eax
c0025fda:	e8 27 fb ff ff       	call   c0025b06 <Vm::realToLinear(unsigned short, unsigned short)>
c0025fdf:	5a                   	pop    edx
c0025fe0:	59                   	pop    ecx
c0025fe1:	89 c1                	mov    ecx,eax
c0025fe3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0025fe6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025fea:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0025fef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025ff3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0025ff6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025ffa:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0025fff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026003:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026007:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002600b:	e8 f6 fa ff ff       	call   c0025b06 <Vm::realToLinear(unsigned short, unsigned short)>
c0026010:	5e                   	pop    esi
c0026011:	be 06 00 00 00       	mov    esi,0x6
c0026016:	5d                   	pop    ebp
c0026017:	31 ed                	xor    ebp,ebp
c0026019:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002601e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0026021:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0026027:	0f 84 74 02 00 00    	je     c00262a1 <Vm::faultHandler(regs*)+0x2e1>
c002602d:	0f 87 94 00 00 00    	ja     c00260c7 <Vm::faultHandler(regs*)+0x107>
c0026033:	83 fa 66             	cmp    edx,0x66
c0026036:	0f 84 e2 01 00 00    	je     c002621e <Vm::faultHandler(regs*)+0x25e>
c002603c:	77 47                	ja     c0026085 <Vm::faultHandler(regs*)+0xc5>
c002603e:	83 fa 36             	cmp    edx,0x36
c0026041:	0f 84 ca 01 00 00    	je     c0026211 <Vm::faultHandler(regs*)+0x251>
c0026047:	77 1a                	ja     c0026063 <Vm::faultHandler(regs*)+0xa3>
c0026049:	83 fa 26             	cmp    edx,0x26
c002604c:	0f 84 98 01 00 00    	je     c00261ea <Vm::faultHandler(regs*)+0x22a>
c0026052:	83 fa 2e             	cmp    edx,0x2e
c0026055:	0f 85 21 06 00 00    	jne    c002667c <Vm::faultHandler(regs*)+0x6bc>
c002605b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002605e:	31 f6                	xor    esi,esi
c0026060:	41                   	inc    ecx
c0026061:	eb bb                	jmp    c002601e <Vm::faultHandler(regs*)+0x5e>
c0026063:	83 fa 64             	cmp    edx,0x64
c0026066:	0f 84 8b 01 00 00    	je     c00261f7 <Vm::faultHandler(regs*)+0x237>
c002606c:	0f 87 92 01 00 00    	ja     c0026204 <Vm::faultHandler(regs*)+0x244>
c0026072:	83 fa 3e             	cmp    edx,0x3e
c0026075:	0f 85 01 06 00 00    	jne    c002667c <Vm::faultHandler(regs*)+0x6bc>
c002607b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002607e:	be 01 00 00 00       	mov    esi,0x1
c0026083:	eb db                	jmp    c0026060 <Vm::faultHandler(regs*)+0xa0>
c0026085:	83 fa 6d             	cmp    edx,0x6d
c0026088:	0f 84 34 03 00 00    	je     c00263c2 <Vm::faultHandler(regs*)+0x402>
c002608e:	77 17                	ja     c00260a7 <Vm::faultHandler(regs*)+0xe7>
c0026090:	83 fa 67             	cmp    edx,0x67
c0026093:	0f 84 92 01 00 00    	je     c002622b <Vm::faultHandler(regs*)+0x26b>
c0026099:	83 fa 6c             	cmp    edx,0x6c
c002609c:	0f 84 b1 02 00 00    	je     c0026353 <Vm::faultHandler(regs*)+0x393>
c00260a2:	e9 d5 05 00 00       	jmp    c002667c <Vm::faultHandler(regs*)+0x6bc>
c00260a7:	83 fa 6f             	cmp    edx,0x6f
c00260aa:	0f 84 3d 04 00 00    	je     c00264ed <Vm::faultHandler(regs*)+0x52d>
c00260b0:	0f 82 9f 03 00 00    	jb     c0026455 <Vm::faultHandler(regs*)+0x495>
c00260b6:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00260bc:	0f 84 76 01 00 00    	je     c0026238 <Vm::faultHandler(regs*)+0x278>
c00260c2:	e9 b5 05 00 00       	jmp    c002667c <Vm::faultHandler(regs*)+0x6bc>
c00260c7:	81 fa ec 00 00 00    	cmp    edx,0xec
c00260cd:	0f 84 51 05 00 00    	je     c0026624 <Vm::faultHandler(regs*)+0x664>
c00260d3:	0f 87 a9 00 00 00    	ja     c0026182 <Vm::faultHandler(regs*)+0x1c2>
c00260d9:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00260df:	0f 84 d0 04 00 00    	je     c00265b5 <Vm::faultHandler(regs*)+0x5f5>
c00260e5:	77 78                	ja     c002615f <Vm::faultHandler(regs*)+0x19f>
c00260e7:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00260ed:	0f 84 0e 02 00 00    	je     c0026301 <Vm::faultHandler(regs*)+0x341>
c00260f3:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00260f9:	0f 85 7d 05 00 00    	jne    c002667c <Vm::faultHandler(regs*)+0x6bc>
c00260ff:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0026103:	89 d1                	mov    ecx,edx
c0026105:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0026108:	c1 e1 08             	shl    ecx,0x8
c002610b:	09 ca                	or     edx,ecx
c002610d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0026110:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0026114:	89 d1                	mov    ecx,edx
c0026116:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c002611a:	c1 e1 08             	shl    ecx,0x8
c002611d:	09 ca                	or     edx,ecx
c002611f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0026122:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0026126:	89 d1                	mov    ecx,edx
c0026128:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c002612c:	c1 e1 08             	shl    ecx,0x8
c002612f:	09 ca                	or     edx,ecx
c0026131:	81 ca 00 02 02 00    	or     edx,0x20200
c0026137:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c002613a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c002613e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0026144:	d1 e8                	shr    eax,1
c0026146:	83 e0 01             	and    eax,0x1
c0026149:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c002614c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c002614f:	83 c0 06             	add    eax,0x6
c0026152:	25 ff ff 00 00       	and    eax,0xffff
c0026157:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c002615a:	e9 19 05 00 00       	jmp    c0026678 <Vm::faultHandler(regs*)+0x6b8>
c002615f:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0026165:	0f 84 8f 04 00 00    	je     c00265fa <Vm::faultHandler(regs*)+0x63a>
c002616b:	0f 82 60 04 00 00    	jb     c00265d1 <Vm::faultHandler(regs*)+0x611>
c0026171:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0026177:	0f 84 94 04 00 00    	je     c0026611 <Vm::faultHandler(regs*)+0x651>
c002617d:	e9 fa 04 00 00       	jmp    c002667c <Vm::faultHandler(regs*)+0x6bc>
c0026182:	81 fa ef 00 00 00    	cmp    edx,0xef
c0026188:	0f 84 d7 04 00 00    	je     c0026665 <Vm::faultHandler(regs*)+0x6a5>
c002618e:	77 2e                	ja     c00261be <Vm::faultHandler(regs*)+0x1fe>
c0026190:	81 fa ed 00 00 00    	cmp    edx,0xed
c0026196:	0f 84 a4 04 00 00    	je     c0026640 <Vm::faultHandler(regs*)+0x680>
c002619c:	81 fa ee 00 00 00    	cmp    edx,0xee
c00261a2:	0f 85 d4 04 00 00    	jne    c002667c <Vm::faultHandler(regs*)+0x6bc>
c00261a8:	50                   	push   eax
c00261a9:	50                   	push   eax
c00261aa:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00261ae:	50                   	push   eax
c00261af:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00261b3:	50                   	push   eax
c00261b4:	e8 17 f9 ff ff       	call   c0025ad0 <Vm::outbv(unsigned short, unsigned char)>
c00261b9:	e9 9f 04 00 00       	jmp    c002665d <Vm::faultHandler(regs*)+0x69d>
c00261be:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00261c4:	0f 84 6d 01 00 00    	je     c0026337 <Vm::faultHandler(regs*)+0x377>
c00261ca:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00261d0:	0f 84 6f 01 00 00    	je     c0026345 <Vm::faultHandler(regs*)+0x385>
c00261d6:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00261dc:	0f 85 9a 04 00 00    	jne    c002667c <Vm::faultHandler(regs*)+0x6bc>
c00261e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261e5:	e9 76 fe ff ff       	jmp    c0026060 <Vm::faultHandler(regs*)+0xa0>
c00261ea:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261ed:	be 02 00 00 00       	mov    esi,0x2
c00261f2:	e9 69 fe ff ff       	jmp    c0026060 <Vm::faultHandler(regs*)+0xa0>
c00261f7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00261fa:	be 03 00 00 00       	mov    esi,0x3
c00261ff:	e9 5c fe ff ff       	jmp    c0026060 <Vm::faultHandler(regs*)+0xa0>
c0026204:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026207:	be 04 00 00 00       	mov    esi,0x4
c002620c:	e9 4f fe ff ff       	jmp    c0026060 <Vm::faultHandler(regs*)+0xa0>
c0026211:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026214:	be 05 00 00 00       	mov    esi,0x5
c0026219:	e9 42 fe ff ff       	jmp    c0026060 <Vm::faultHandler(regs*)+0xa0>
c002621e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026221:	bd 01 00 00 00       	mov    ebp,0x1
c0026226:	e9 35 fe ff ff       	jmp    c0026060 <Vm::faultHandler(regs*)+0xa0>
c002622b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c002622e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0026233:	e9 28 fe ff ff       	jmp    c0026060 <Vm::faultHandler(regs*)+0xa0>
c0026238:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c002623b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002623f:	83 e5 01             	and    ebp,0x1
c0026242:	74 30                	je     c0026274 <Vm::faultHandler(regs*)+0x2b4>
c0026244:	83 e9 04             	sub    ecx,0x4
c0026247:	81 e2 ff 0d 00 00    	and    edx,0xdff
c002624d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0026253:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026256:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0026259:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002625f:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0026263:	0f 84 0c 04 00 00    	je     c0026675 <Vm::faultHandler(regs*)+0x6b5>
c0026269:	80 ce 02             	or     dh,0x2
c002626c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c002626f:	e9 01 04 00 00       	jmp    c0026675 <Vm::faultHandler(regs*)+0x6b5>
c0026274:	83 e9 02             	sub    ecx,0x2
c0026277:	81 e1 ff ff 00 00    	and    ecx,0xffff
c002627d:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0026280:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0026284:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c002628a:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c002628e:	74 05                	je     c0026295 <Vm::faultHandler(regs*)+0x2d5>
c0026290:	80 ce 02             	or     dh,0x2
c0026293:	eb 03                	jmp    c0026298 <Vm::faultHandler(regs*)+0x2d8>
c0026295:	80 e6 fd             	and    dh,0xfd
c0026298:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c002629c:	e9 d4 03 00 00       	jmp    c0026675 <Vm::faultHandler(regs*)+0x6b5>
c00262a1:	83 e5 01             	and    ebp,0x1
c00262a4:	74 2a                	je     c00262d0 <Vm::faultHandler(regs*)+0x310>
c00262a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00262a8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00262ae:	81 ca 00 02 02 00    	or     edx,0x20200
c00262b4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00262b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00262b9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00262bf:	c1 e8 09             	shr    eax,0x9
c00262c2:	83 e0 01             	and    eax,0x1
c00262c5:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00262c8:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00262cb:	83 c0 04             	add    eax,0x4
c00262ce:	eb 24                	jmp    c00262f4 <Vm::faultHandler(regs*)+0x334>
c00262d0:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00262d3:	81 ca 00 02 02 00    	or     edx,0x20200
c00262d9:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00262dc:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00262df:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00262e5:	c1 e8 09             	shr    eax,0x9
c00262e8:	83 e0 01             	and    eax,0x1
c00262eb:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00262ee:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00262f1:	83 c0 02             	add    eax,0x2
c00262f4:	25 ff ff 00 00       	and    eax,0xffff
c00262f9:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00262fc:	e9 74 03 00 00       	jmp    c0026675 <Vm::faultHandler(regs*)+0x6b5>
c0026301:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026305:	3d ee 00 00 00       	cmp    eax,0xee
c002630a:	75 10                	jne    c002631c <Vm::faultHandler(regs*)+0x35c>
c002630c:	83 ec 0c             	sub    esp,0xc
c002630f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0026312:	e8 56 f8 ff ff       	call   c0025b6d <Vm::mainloop3(unsigned long)>
c0026317:	e9 44 03 00 00       	jmp    c0026660 <Vm::faultHandler(regs*)+0x6a0>
c002631c:	83 ec 0c             	sub    esp,0xc
c002631f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0026323:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026327:	51                   	push   ecx
c0026328:	50                   	push   eax
c0026329:	53                   	push   ebx
c002632a:	e8 84 fb ff ff       	call   c0025eb3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c002632f:	83 c4 20             	add    esp,0x20
c0026332:	e9 41 03 00 00       	jmp    c0026678 <Vm::faultHandler(regs*)+0x6b8>
c0026337:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002633c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0026340:	e9 30 03 00 00       	jmp    c0026675 <Vm::faultHandler(regs*)+0x6b5>
c0026345:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c002634a:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c002634e:	e9 22 03 00 00       	jmp    c0026675 <Vm::faultHandler(regs*)+0x6b5>
c0026353:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0026356:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002635b:	74 2b                	je     c0026388 <Vm::faultHandler(regs*)+0x3c8>
c002635d:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0026364:	76 22                	jbe    c0026388 <Vm::faultHandler(regs*)+0x3c8>
c0026366:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002636a:	50                   	push   eax
c002636b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002636f:	50                   	push   eax
c0026370:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026374:	50                   	push   eax
c0026375:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0026379:	50                   	push   eax
c002637a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c002637e:	50                   	push   eax
c002637f:	6a 6c                	push   0x6c
c0026381:	6a 6c                	push   0x6c
c0026383:	e9 bd 01 00 00       	jmp    c0026545 <Vm::faultHandler(regs*)+0x585>
c0026388:	83 ec 0c             	sub    esp,0xc
c002638b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c002638f:	0f b7 f6             	movzx  esi,si
c0026392:	50                   	push   eax
c0026393:	e8 25 f7 ff ff       	call   c0025abd <Vm::inbv(unsigned short)>
c0026398:	83 c4 0c             	add    esp,0xc
c002639b:	0f b6 c0             	movzx  eax,al
c002639e:	50                   	push   eax
c002639f:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00263a3:	50                   	push   eax
c00263a4:	56                   	push   esi
c00263a5:	e8 d6 fb ff ff       	call   c0025f80 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00263aa:	83 c4 10             	add    esp,0x10
c00263ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00263b0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00263b4:	74 03                	je     c00263b9 <Vm::faultHandler(regs*)+0x3f9>
c00263b6:	48                   	dec    eax
c00263b7:	eb 01                	jmp    c00263ba <Vm::faultHandler(regs*)+0x3fa>
c00263b9:	40                   	inc    eax
c00263ba:	0f b7 c0             	movzx  eax,ax
c00263bd:	e9 8b 00 00 00       	jmp    c002644d <Vm::faultHandler(regs*)+0x48d>
c00263c2:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00263c5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00263c8:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00263cd:	74 29                	je     c00263f8 <Vm::faultHandler(regs*)+0x438>
c00263cf:	3d ff ff 00 00       	cmp    eax,0xffff
c00263d4:	76 22                	jbe    c00263f8 <Vm::faultHandler(regs*)+0x438>
c00263d6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00263da:	50                   	push   eax
c00263db:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00263df:	50                   	push   eax
c00263e0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00263e4:	50                   	push   eax
c00263e5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00263e9:	50                   	push   eax
c00263ea:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00263ee:	50                   	push   eax
c00263ef:	6a 6d                	push   0x6d
c00263f1:	6a 6d                	push   0x6d
c00263f3:	e9 4d 01 00 00       	jmp    c0026545 <Vm::faultHandler(regs*)+0x585>
c00263f8:	0f b7 c8             	movzx  ecx,ax
c00263fb:	0f b7 f6             	movzx  esi,si
c00263fe:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026401:	83 e5 01             	and    ebp,0x1
c0026404:	74 20                	je     c0026426 <Vm::faultHandler(regs*)+0x466>
c0026406:	ed                   	in     eax,dx
c0026407:	55                   	push   ebp
c0026408:	50                   	push   eax
c0026409:	51                   	push   ecx
c002640a:	56                   	push   esi
c002640b:	e8 9b fb ff ff       	call   c0025fab <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0026410:	83 c4 10             	add    esp,0x10
c0026413:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0026416:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002641a:	74 05                	je     c0026421 <Vm::faultHandler(regs*)+0x461>
c002641c:	83 e8 04             	sub    eax,0x4
c002641f:	eb 27                	jmp    c0026448 <Vm::faultHandler(regs*)+0x488>
c0026421:	83 c0 04             	add    eax,0x4
c0026424:	eb 22                	jmp    c0026448 <Vm::faultHandler(regs*)+0x488>
c0026426:	66 ed                	in     ax,dx
c0026428:	0f b7 c0             	movzx  eax,ax
c002642b:	57                   	push   edi
c002642c:	50                   	push   eax
c002642d:	51                   	push   ecx
c002642e:	56                   	push   esi
c002642f:	e8 61 fb ff ff       	call   c0025f95 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0026434:	83 c4 10             	add    esp,0x10
c0026437:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002643a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c002643e:	74 05                	je     c0026445 <Vm::faultHandler(regs*)+0x485>
c0026440:	83 e8 02             	sub    eax,0x2
c0026443:	eb 03                	jmp    c0026448 <Vm::faultHandler(regs*)+0x488>
c0026445:	83 c0 02             	add    eax,0x2
c0026448:	25 ff ff 00 00       	and    eax,0xffff
c002644d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0026450:	e9 20 02 00 00       	jmp    c0026675 <Vm::faultHandler(regs*)+0x6b5>
c0026455:	8d 46 ff             	lea    eax,[esi-0x1]
c0026458:	0f b6 f0             	movzx  esi,al
c002645b:	83 fe 05             	cmp    esi,0x5
c002645e:	77 23                	ja     c0026483 <Vm::faultHandler(regs*)+0x4c3>
c0026460:	ff 24 b5 28 2f 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd0d8]
c0026467:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c002646c:	eb 15                	jmp    c0026483 <Vm::faultHandler(regs*)+0x4c3>
c002646e:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0026472:	eb 0f                	jmp    c0026483 <Vm::faultHandler(regs*)+0x4c3>
c0026474:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0026478:	eb 09                	jmp    c0026483 <Vm::faultHandler(regs*)+0x4c3>
c002647a:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c002647e:	eb 03                	jmp    c0026483 <Vm::faultHandler(regs*)+0x4c3>
c0026480:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0026483:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0026486:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002648b:	74 29                	je     c00264b6 <Vm::faultHandler(regs*)+0x4f6>
c002648d:	3d ff ff 00 00       	cmp    eax,0xffff
c0026492:	76 22                	jbe    c00264b6 <Vm::faultHandler(regs*)+0x4f6>
c0026494:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026498:	50                   	push   eax
c0026499:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c002649d:	50                   	push   eax
c002649e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00264a2:	50                   	push   eax
c00264a3:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00264a7:	50                   	push   eax
c00264a8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00264ac:	50                   	push   eax
c00264ad:	6a 6e                	push   0x6e
c00264af:	6a 6e                	push   0x6e
c00264b1:	e9 8f 00 00 00       	jmp    c0026545 <Vm::faultHandler(regs*)+0x585>
c00264b6:	0f b7 c0             	movzx  eax,ax
c00264b9:	52                   	push   edx
c00264ba:	52                   	push   edx
c00264bb:	50                   	push   eax
c00264bc:	57                   	push   edi
c00264bd:	e8 8a fa ff ff       	call   c0025f4c <Vm::readByteFromReal(unsigned short, unsigned short)>
c00264c2:	59                   	pop    ecx
c00264c3:	0f b6 c0             	movzx  eax,al
c00264c6:	5e                   	pop    esi
c00264c7:	50                   	push   eax
c00264c8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00264cc:	50                   	push   eax
c00264cd:	e8 fe f5 ff ff       	call   c0025ad0 <Vm::outbv(unsigned short, unsigned char)>
c00264d2:	83 c4 10             	add    esp,0x10
c00264d5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00264d8:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00264dc:	74 03                	je     c00264e1 <Vm::faultHandler(regs*)+0x521>
c00264de:	48                   	dec    eax
c00264df:	eb 01                	jmp    c00264e2 <Vm::faultHandler(regs*)+0x522>
c00264e1:	40                   	inc    eax
c00264e2:	0f b7 c0             	movzx  eax,ax
c00264e5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00264e8:	e9 88 01 00 00       	jmp    c0026675 <Vm::faultHandler(regs*)+0x6b5>
c00264ed:	8d 46 ff             	lea    eax,[esi-0x1]
c00264f0:	0f b6 f0             	movzx  esi,al
c00264f3:	83 fe 05             	cmp    esi,0x5
c00264f6:	77 1e                	ja     c0026516 <Vm::faultHandler(regs*)+0x556>
c00264f8:	ff 24 b5 40 2f 03 c0 	jmp    DWORD PTR [esi*4-0x3ffcd0c0]
c00264ff:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0026503:	eb 11                	jmp    c0026516 <Vm::faultHandler(regs*)+0x556>
c0026505:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0026508:	eb 0c                	jmp    c0026516 <Vm::faultHandler(regs*)+0x556>
c002650a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c002650d:	eb 07                	jmp    c0026516 <Vm::faultHandler(regs*)+0x556>
c002650f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0026512:	eb 02                	jmp    c0026516 <Vm::faultHandler(regs*)+0x556>
c0026514:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0026516:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0026519:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c002651e:	74 37                	je     c0026557 <Vm::faultHandler(regs*)+0x597>
c0026520:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0026526:	76 2f                	jbe    c0026557 <Vm::faultHandler(regs*)+0x597>
c0026528:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c002652c:	50                   	push   eax
c002652d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026531:	50                   	push   eax
c0026532:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0026536:	50                   	push   eax
c0026537:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002653b:	50                   	push   eax
c002653c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026540:	50                   	push   eax
c0026541:	6a 6f                	push   0x6f
c0026543:	6a 6f                	push   0x6f
c0026545:	68 cc 2e 03 c0       	push   0xc0032ecc
c002654a:	e8 3e 2c ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002654f:	83 c4 20             	add    esp,0x20
c0026552:	e9 83 01 00 00       	jmp    c00266da <Vm::faultHandler(regs*)+0x71a>
c0026557:	0f b7 d7             	movzx  edx,di
c002655a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c002655d:	0f b7 c6             	movzx  eax,si
c0026560:	81 e1 00 04 00 00    	and    ecx,0x400
c0026566:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0026569:	83 e5 01             	and    ebp,0x1
c002656c:	74 1d                	je     c002658b <Vm::faultHandler(regs*)+0x5cb>
c002656e:	55                   	push   ebp
c002656f:	55                   	push   ebp
c0026570:	50                   	push   eax
c0026571:	52                   	push   edx
c0026572:	e8 f8 f9 ff ff       	call   c0025f6f <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0026577:	83 c4 10             	add    esp,0x10
c002657a:	89 fa                	mov    edx,edi
c002657c:	ef                   	out    dx,eax
c002657d:	85 c9                	test   ecx,ecx
c002657f:	74 05                	je     c0026586 <Vm::faultHandler(regs*)+0x5c6>
c0026581:	83 ee 04             	sub    esi,0x4
c0026584:	eb 21                	jmp    c00265a7 <Vm::faultHandler(regs*)+0x5e7>
c0026586:	83 c6 04             	add    esi,0x4
c0026589:	eb 1c                	jmp    c00265a7 <Vm::faultHandler(regs*)+0x5e7>
c002658b:	55                   	push   ebp
c002658c:	55                   	push   ebp
c002658d:	50                   	push   eax
c002658e:	52                   	push   edx
c002658f:	e8 c9 f9 ff ff       	call   c0025f5d <Vm::readWordFromReal(unsigned short, unsigned short)>
c0026594:	83 c4 10             	add    esp,0x10
c0026597:	89 fa                	mov    edx,edi
c0026599:	66 ef                	out    dx,ax
c002659b:	85 c9                	test   ecx,ecx
c002659d:	74 05                	je     c00265a4 <Vm::faultHandler(regs*)+0x5e4>
c002659f:	83 ee 02             	sub    esi,0x2
c00265a2:	eb 03                	jmp    c00265a7 <Vm::faultHandler(regs*)+0x5e7>
c00265a4:	83 c6 02             	add    esi,0x2
c00265a7:	81 e6 ff ff 00 00    	and    esi,0xffff
c00265ad:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00265b0:	e9 c0 00 00 00       	jmp    c0026675 <Vm::faultHandler(regs*)+0x6b5>
c00265b5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00265bc:	83 ec 0c             	sub    esp,0xc
c00265bf:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00265c3:	50                   	push   eax
c00265c4:	e8 f4 f4 ff ff       	call   c0025abd <Vm::inbv(unsigned short)>
c00265c9:	0f b6 c0             	movzx  eax,al
c00265cc:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00265cf:	eb 3a                	jmp    c002660b <Vm::faultHandler(regs*)+0x64b>
c00265d1:	83 e5 01             	and    ebp,0x1
c00265d4:	74 07                	je     c00265dd <Vm::faultHandler(regs*)+0x61d>
c00265d6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00265da:	ed                   	in     eax,dx
c00265db:	eb 14                	jmp    c00265f1 <Vm::faultHandler(regs*)+0x631>
c00265dd:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00265e0:	66 31 f6             	xor    si,si
c00265e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00265e6:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00265ea:	66 ed                	in     ax,dx
c00265ec:	0f b7 c0             	movzx  eax,ax
c00265ef:	09 f0                	or     eax,esi
c00265f1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00265f4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00265f8:	eb 7e                	jmp    c0026678 <Vm::faultHandler(regs*)+0x6b8>
c00265fa:	52                   	push   edx
c00265fb:	52                   	push   edx
c00265fc:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0026600:	50                   	push   eax
c0026601:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026605:	50                   	push   eax
c0026606:	e8 c5 f4 ff ff       	call   c0025ad0 <Vm::outbv(unsigned short, unsigned char)>
c002660b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002660f:	eb 4f                	jmp    c0026660 <Vm::faultHandler(regs*)+0x6a0>
c0026611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026614:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0026618:	83 e5 01             	and    ebp,0x1
c002661b:	74 03                	je     c0026620 <Vm::faultHandler(regs*)+0x660>
c002661d:	ef                   	out    dx,eax
c002661e:	eb d4                	jmp    c00265f4 <Vm::faultHandler(regs*)+0x634>
c0026620:	66 ef                	out    dx,ax
c0026622:	eb d0                	jmp    c00265f4 <Vm::faultHandler(regs*)+0x634>
c0026624:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c002662b:	83 ec 0c             	sub    esp,0xc
c002662e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0026632:	50                   	push   eax
c0026633:	e8 85 f4 ff ff       	call   c0025abd <Vm::inbv(unsigned short)>
c0026638:	0f b6 c0             	movzx  eax,al
c002663b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c002663e:	eb 1d                	jmp    c002665d <Vm::faultHandler(regs*)+0x69d>
c0026640:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0026643:	83 e5 01             	and    ebp,0x1
c0026646:	74 03                	je     c002664b <Vm::faultHandler(regs*)+0x68b>
c0026648:	ed                   	in     eax,dx
c0026649:	eb 0d                	jmp    c0026658 <Vm::faultHandler(regs*)+0x698>
c002664b:	66 ed                	in     ax,dx
c002664d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0026650:	0f b7 c0             	movzx  eax,ax
c0026653:	66 31 d2             	xor    dx,dx
c0026656:	09 d0                	or     eax,edx
c0026658:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c002665b:	eb 18                	jmp    c0026675 <Vm::faultHandler(regs*)+0x6b5>
c002665d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026660:	83 c4 10             	add    esp,0x10
c0026663:	eb 13                	jmp    c0026678 <Vm::faultHandler(regs*)+0x6b8>
c0026665:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0026668:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c002666b:	83 e5 01             	and    ebp,0x1
c002666e:	74 03                	je     c0026673 <Vm::faultHandler(regs*)+0x6b3>
c0026670:	ef                   	out    dx,eax
c0026671:	eb 02                	jmp    c0026675 <Vm::faultHandler(regs*)+0x6b5>
c0026673:	66 ef                	out    dx,ax
c0026675:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0026678:	b0 01                	mov    al,0x1
c002667a:	eb 60                	jmp    c00266dc <Vm::faultHandler(regs*)+0x71c>
c002667c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0026680:	50                   	push   eax
c0026681:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0026685:	50                   	push   eax
c0026686:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c002668a:	50                   	push   eax
c002668b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c002668f:	50                   	push   eax
c0026690:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0026694:	50                   	push   eax
c0026695:	52                   	push   edx
c0026696:	52                   	push   edx
c0026697:	68 f9 2e 03 c0       	push   0xc0032ef9
c002669c:	e8 ec 2a ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00266a1:	83 c4 20             	add    esp,0x20
c00266a4:	83 ec 0c             	sub    esp,0xc
c00266a7:	6a 60                	push   0x60
c00266a9:	e8 0f f4 ff ff       	call   c0025abd <Vm::inbv(unsigned short)>
c00266ae:	83 c4 10             	add    esp,0x10
c00266b1:	0f b6 d0             	movzx  edx,al
c00266b4:	83 fa 1c             	cmp    edx,0x1c
c00266b7:	74 05                	je     c00266be <Vm::faultHandler(regs*)+0x6fe>
c00266b9:	83 fa 5a             	cmp    edx,0x5a
c00266bc:	75 e6                	jne    c00266a4 <Vm::faultHandler(regs*)+0x6e4>
c00266be:	0f b6 c0             	movzx  eax,al
c00266c1:	83 f8 1c             	cmp    eax,0x1c
c00266c4:	74 05                	je     c00266cb <Vm::faultHandler(regs*)+0x70b>
c00266c6:	83 f8 5a             	cmp    eax,0x5a
c00266c9:	75 0f                	jne    c00266da <Vm::faultHandler(regs*)+0x71a>
c00266cb:	83 ec 0c             	sub    esp,0xc
c00266ce:	6a 60                	push   0x60
c00266d0:	e8 e8 f3 ff ff       	call   c0025abd <Vm::inbv(unsigned short)>
c00266d5:	83 c4 10             	add    esp,0x10
c00266d8:	eb e4                	jmp    c00266be <Vm::faultHandler(regs*)+0x6fe>
c00266da:	31 c0                	xor    eax,eax
c00266dc:	83 c4 2c             	add    esp,0x2c
c00266df:	5b                   	pop    ebx
c00266e0:	5e                   	pop    esi
c00266e1:	5f                   	pop    edi
c00266e2:	5d                   	pop    ebp
c00266e3:	c3                   	ret    

c00266e4 <noCopro(unsigned long)>:
c00266e4:	c3                   	ret    

c00266e5 <nmiHandler(regs*, void*)>:
c00266e5:	83 ec 0c             	sub    esp,0xc
c00266e8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c00266ed:	83 ec 0c             	sub    esp,0xc
c00266f0:	50                   	push   eax
c00266f1:	e8 08 f4 fe ff       	call   c0015afe <Computer::handleNMI()>
c00266f6:	83 c4 10             	add    esp,0x10
c00266f9:	90                   	nop
c00266fa:	83 c4 0c             	add    esp,0xc
c00266fd:	c3                   	ret    

c00266fe <doubleFault(regs*, void*)>:
c00266fe:	55                   	push   ebp
c00266ff:	89 e5                	mov    ebp,esp
c0026701:	83 ec 08             	sub    esp,0x8
c0026704:	83 ec 0c             	sub    esp,0xc
c0026707:	68 58 2f 03 c0       	push   0xc0032f58
c002670c:	e8 95 9a ff ff       	call   c00201a6 <KePanic(char const*)>
c0026711:	83 c4 10             	add    esp,0x10
c0026714:	90                   	nop
c0026715:	c9                   	leave  
c0026716:	c3                   	ret    

c0026717 <displayDebugInfo(regs*)>:
c0026717:	83 ec 1c             	sub    esp,0x1c
c002671a:	0f 20 c0             	mov    eax,cr0
c002671d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026721:	0f 20 d0             	mov    eax,cr2
c0026724:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026728:	0f 20 d8             	mov    eax,cr3
c002672b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002672f:	0f 20 e0             	mov    eax,cr4
c0026732:	89 04 24             	mov    DWORD PTR [esp],eax
c0026735:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026739:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002673c:	83 ec 08             	sub    esp,0x8
c002673f:	50                   	push   eax
c0026740:	68 74 2f 03 c0       	push   0xc0032f74
c0026745:	e8 43 2a ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002674a:	83 c4 10             	add    esp,0x10
c002674d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026751:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0026754:	83 ec 08             	sub    esp,0x8
c0026757:	50                   	push   eax
c0026758:	68 65 2f 03 c0       	push   0xc0032f65
c002675d:	e8 2b 2a ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0026762:	83 c4 10             	add    esp,0x10
c0026765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026769:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c002676c:	83 ec 08             	sub    esp,0x8
c002676f:	50                   	push   eax
c0026770:	68 70 2f 03 c0       	push   0xc0032f70
c0026775:	e8 13 2a ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002677a:	83 c4 10             	add    esp,0x10
c002677d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026781:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026784:	83 ec 08             	sub    esp,0x8
c0026787:	50                   	push   eax
c0026788:	68 7f 2f 03 c0       	push   0xc0032f7f
c002678d:	e8 fb 29 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0026792:	83 c4 10             	add    esp,0x10
c0026795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026799:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c002679c:	83 ec 08             	sub    esp,0x8
c002679f:	50                   	push   eax
c00267a0:	68 8a 2f 03 c0       	push   0xc0032f8a
c00267a5:	e8 e3 29 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00267aa:	83 c4 10             	add    esp,0x10
c00267ad:	83 ec 08             	sub    esp,0x8
c00267b0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00267b4:	68 95 2f 03 c0       	push   0xc0032f95
c00267b9:	e8 cf 29 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00267be:	83 c4 10             	add    esp,0x10
c00267c1:	83 ec 08             	sub    esp,0x8
c00267c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00267c8:	68 a0 2f 03 c0       	push   0xc0032fa0
c00267cd:	e8 bb 29 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00267d2:	83 c4 10             	add    esp,0x10
c00267d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267d9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00267dc:	c1 e0 05             	shl    eax,0x5
c00267df:	8d 90 40 43 03 c0    	lea    edx,[eax-0x3ffcbcc0]
c00267e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00267e9:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00267ec:	83 ec 04             	sub    esp,0x4
c00267ef:	52                   	push   edx
c00267f0:	50                   	push   eax
c00267f1:	68 ab 2f 03 c0       	push   0xc0032fab
c00267f6:	e8 92 29 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00267fb:	83 c4 10             	add    esp,0x10
c00267fe:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026803:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026809:	83 ec 0c             	sub    esp,0xc
c002680c:	50                   	push   eax
c002680d:	e8 8f 07 ff ff       	call   c0016fa1 <setActiveTerminal(VgaText*)>
c0026812:	83 c4 10             	add    esp,0x10
c0026815:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002681a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026820:	83 ec 08             	sub    esp,0x8
c0026823:	68 ba 2f 03 c0       	push   0xc0032fba
c0026828:	50                   	push   eax
c0026829:	e8 c0 0a ff ff       	call   c00172ee <VgaText::puts(char const*)>
c002682e:	83 c4 10             	add    esp,0x10
c0026831:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026836:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002683c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026840:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0026843:	83 ec 08             	sub    esp,0x8
c0026846:	52                   	push   edx
c0026847:	50                   	push   eax
c0026848:	e8 5b 0a ff ff       	call   c00172a8 <VgaText::putx(unsigned int)>
c002684d:	83 c4 10             	add    esp,0x10
c0026850:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026855:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002685b:	83 ec 08             	sub    esp,0x8
c002685e:	68 c8 2f 03 c0       	push   0xc0032fc8
c0026863:	50                   	push   eax
c0026864:	e8 85 0a ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026869:	83 c4 10             	add    esp,0x10
c002686c:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026871:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026877:	ba 00 20 00 c2       	mov    edx,0xc2002000
c002687c:	8b 12                	mov    edx,DWORD PTR [edx]
c002687e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026881:	83 c2 0c             	add    edx,0xc
c0026884:	83 ec 08             	sub    esp,0x8
c0026887:	52                   	push   edx
c0026888:	50                   	push   eax
c0026889:	e8 60 0a ff ff       	call   c00172ee <VgaText::puts(char const*)>
c002688e:	83 c4 10             	add    esp,0x10
c0026891:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026896:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002689c:	83 ec 08             	sub    esp,0x8
c002689f:	68 d1 2f 03 c0       	push   0xc0032fd1
c00268a4:	50                   	push   eax
c00268a5:	e8 44 0a ff ff       	call   c00172ee <VgaText::puts(char const*)>
c00268aa:	83 c4 10             	add    esp,0x10
c00268ad:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00268bc:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00268bf:	83 ec 08             	sub    esp,0x8
c00268c2:	52                   	push   edx
c00268c3:	50                   	push   eax
c00268c4:	e8 df 09 ff ff       	call   c00172a8 <VgaText::putx(unsigned int)>
c00268c9:	83 c4 10             	add    esp,0x10
c00268cc:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268d7:	83 ec 08             	sub    esp,0x8
c00268da:	68 d9 2f 03 c0       	push   0xc0032fd9
c00268df:	50                   	push   eax
c00268e0:	e8 09 0a ff ff       	call   c00172ee <VgaText::puts(char const*)>
c00268e5:	83 c4 10             	add    esp,0x10
c00268e8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00268ed:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00268f3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00268f7:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00268fa:	83 ec 08             	sub    esp,0x8
c00268fd:	52                   	push   edx
c00268fe:	50                   	push   eax
c00268ff:	e8 a4 09 ff ff       	call   c00172a8 <VgaText::putx(unsigned int)>
c0026904:	83 c4 10             	add    esp,0x10
c0026907:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002690c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026912:	83 ec 08             	sub    esp,0x8
c0026915:	68 e1 2f 03 c0       	push   0xc0032fe1
c002691a:	50                   	push   eax
c002691b:	e8 ce 09 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026920:	83 c4 10             	add    esp,0x10
c0026923:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026928:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002692e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0026932:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0026935:	83 ec 08             	sub    esp,0x8
c0026938:	52                   	push   edx
c0026939:	50                   	push   eax
c002693a:	e8 69 09 ff ff       	call   c00172a8 <VgaText::putx(unsigned int)>
c002693f:	83 c4 10             	add    esp,0x10
c0026942:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026947:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c002694d:	83 ec 08             	sub    esp,0x8
c0026950:	68 e9 2f 03 c0       	push   0xc0032fe9
c0026955:	50                   	push   eax
c0026956:	e8 93 09 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c002695b:	83 c4 10             	add    esp,0x10
c002695e:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026963:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026969:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002696d:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0026970:	83 ec 08             	sub    esp,0x8
c0026973:	52                   	push   edx
c0026974:	50                   	push   eax
c0026975:	e8 2e 09 ff ff       	call   c00172a8 <VgaText::putx(unsigned int)>
c002697a:	83 c4 10             	add    esp,0x10
c002697d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026982:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026988:	83 ec 08             	sub    esp,0x8
c002698b:	68 f1 2f 03 c0       	push   0xc0032ff1
c0026990:	50                   	push   eax
c0026991:	e8 58 09 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026996:	83 c4 10             	add    esp,0x10
c0026999:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002699e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269a4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269a8:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c00269ab:	83 ec 08             	sub    esp,0x8
c00269ae:	52                   	push   edx
c00269af:	50                   	push   eax
c00269b0:	e8 f3 08 ff ff       	call   c00172a8 <VgaText::putx(unsigned int)>
c00269b5:	83 c4 10             	add    esp,0x10
c00269b8:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269bd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269c3:	83 ec 08             	sub    esp,0x8
c00269c6:	68 f9 2f 03 c0       	push   0xc0032ff9
c00269cb:	50                   	push   eax
c00269cc:	e8 1d 09 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c00269d1:	83 c4 10             	add    esp,0x10
c00269d4:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269d9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269df:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00269e3:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00269e6:	83 ec 08             	sub    esp,0x8
c00269e9:	52                   	push   edx
c00269ea:	50                   	push   eax
c00269eb:	e8 b8 08 ff ff       	call   c00172a8 <VgaText::putx(unsigned int)>
c00269f0:	83 c4 10             	add    esp,0x10
c00269f3:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00269f8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00269fe:	83 ec 08             	sub    esp,0x8
c0026a01:	68 01 30 03 c0       	push   0xc0033001
c0026a06:	50                   	push   eax
c0026a07:	e8 e2 08 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026a0c:	83 c4 10             	add    esp,0x10
c0026a0f:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a14:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a1a:	83 ec 08             	sub    esp,0x8
c0026a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0026a21:	50                   	push   eax
c0026a22:	e8 81 08 ff ff       	call   c00172a8 <VgaText::putx(unsigned int)>
c0026a27:	83 c4 10             	add    esp,0x10
c0026a2a:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a2f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a35:	83 ec 08             	sub    esp,0x8
c0026a38:	68 0a 30 03 c0       	push   0xc003300a
c0026a3d:	50                   	push   eax
c0026a3e:	e8 ab 08 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026a43:	83 c4 10             	add    esp,0x10
c0026a46:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a51:	83 ec 08             	sub    esp,0x8
c0026a54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026a58:	50                   	push   eax
c0026a59:	e8 4a 08 ff ff       	call   c00172a8 <VgaText::putx(unsigned int)>
c0026a5e:	83 c4 10             	add    esp,0x10
c0026a61:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a66:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a6c:	83 ec 08             	sub    esp,0x8
c0026a6f:	68 12 30 03 c0       	push   0xc0033012
c0026a74:	50                   	push   eax
c0026a75:	e8 74 08 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026a7a:	83 c4 10             	add    esp,0x10
c0026a7d:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0026a82:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026a88:	83 ec 08             	sub    esp,0x8
c0026a8b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0026a8f:	50                   	push   eax
c0026a90:	e8 13 08 ff ff       	call   c00172a8 <VgaText::putx(unsigned int)>
c0026a95:	83 c4 10             	add    esp,0x10
c0026a98:	fa                   	cli    
c0026a99:	f4                   	hlt    
c0026a9a:	eb fe                	jmp    c0026a9a <displayDebugInfo(regs*)+0x383>

c0026a9c <HalSystemIdle()>:
c0026a9c:	56                   	push   esi
c0026a9d:	53                   	push   ebx
c0026a9e:	83 ec 14             	sub    esp,0x14
c0026aa1:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026aa6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026aac:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0026ab2:	83 e0 04             	and    eax,0x4
c0026ab5:	0f b6 c0             	movzx  eax,al
c0026ab8:	85 c0                	test   eax,eax
c0026aba:	0f 95 c0             	setne  al
c0026abd:	0f b6 c0             	movzx  eax,al
c0026ac0:	85 c0                	test   eax,eax
c0026ac2:	74 4c                	je     c0026b10 <HalSystemIdle()+0x74>
c0026ac4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026ac9:	83 ec 08             	sub    esp,0x8
c0026acc:	68 e1 00 00 00       	push   0xe1
c0026ad1:	50                   	push   eax
c0026ad2:	e8 31 ee fe ff       	call   c0015908 <Computer::rdmsr(unsigned int)>
c0026ad7:	83 c4 10             	add    esp,0x10
c0026ada:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026ade:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026ae2:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026ae7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026aeb:	83 e2 02             	and    edx,0x2
c0026aee:	89 d3                	mov    ebx,edx
c0026af0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026af4:	83 e2 00             	and    edx,0x0
c0026af7:	89 d6                	mov    esi,edx
c0026af9:	56                   	push   esi
c0026afa:	53                   	push   ebx
c0026afb:	68 e1 00 00 00       	push   0xe1
c0026b00:	50                   	push   eax
c0026b01:	e8 2e ee fe ff       	call   c0015934 <Computer::wrmsr(unsigned int, unsigned long long)>
c0026b06:	83 c4 10             	add    esp,0x10
c0026b09:	e8 86 96 fd ff       	call   c0000194 <doTPAUSE>
c0026b0e:	eb 01                	jmp    c0026b11 <HalSystemIdle()+0x75>
c0026b10:	f4                   	hlt    
c0026b11:	90                   	nop
c0026b12:	83 c4 14             	add    esp,0x14
c0026b15:	5b                   	pop    ebx
c0026b16:	5e                   	pop    esi
c0026b17:	c3                   	ret    

c0026b18 <displayProgramFault(char const*)>:
c0026b18:	83 ec 0c             	sub    esp,0xc
c0026b1b:	83 ec 0c             	sub    esp,0xc
c0026b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b22:	e8 66 26 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0026b27:	83 c4 10             	add    esp,0x10
c0026b2a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026b2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b31:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026b34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b3a:	85 c0                	test   eax,eax
c0026b3c:	74 21                	je     c0026b5f <displayProgramFault(char const*)+0x47>
c0026b3e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026b43:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026b48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0026b4e:	6a 04                	push   0x4
c0026b50:	6a 0f                	push   0xf
c0026b52:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0026b56:	50                   	push   eax
c0026b57:	e8 04 08 ff ff       	call   c0017360 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0026b5c:	83 c4 10             	add    esp,0x10
c0026b5f:	90                   	nop
c0026b60:	83 c4 0c             	add    esp,0xc
c0026b63:	c3                   	ret    

c0026b64 <gpFault(regs*, void*)>:
c0026b64:	83 ec 1c             	sub    esp,0x1c
c0026b67:	c7 05 74 02 04 c0 c0 5f 02 c0 	mov    DWORD PTR ds:0xc0040274,0xc0025fc0
c0026b71:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026b76:	85 c0                	test   eax,eax
c0026b78:	74 1e                	je     c0026b98 <gpFault(regs*, void*)+0x34>
c0026b7a:	a1 74 02 04 c0       	mov    eax,ds:0xc0040274
c0026b7f:	83 ec 0c             	sub    esp,0xc
c0026b82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026b86:	ff d0                	call   eax
c0026b88:	83 c4 10             	add    esp,0x10
c0026b8b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026b8f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026b94:	85 c0                	test   eax,eax
c0026b96:	75 2e                	jne    c0026bc6 <gpFault(regs*, void*)+0x62>
c0026b98:	83 ec 0c             	sub    esp,0xc
c0026b9b:	68 1a 30 03 c0       	push   0xc003301a
c0026ba0:	e8 73 ff ff ff       	call   c0026b18 <displayProgramFault(char const*)>
c0026ba5:	83 c4 10             	add    esp,0x10
c0026ba8:	83 ec 0c             	sub    esp,0xc
c0026bab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026baf:	e8 63 fb ff ff       	call   c0026717 <displayDebugInfo(regs*)>
c0026bb4:	83 c4 10             	add    esp,0x10
c0026bb7:	83 ec 0c             	sub    esp,0xc
c0026bba:	6a 00                	push   0x0
c0026bbc:	e8 2f ee ff ff       	call   c00259f0 <Thr::terminateFromIRQ(int)>
c0026bc1:	83 c4 10             	add    esp,0x10
c0026bc4:	eb 01                	jmp    c0026bc7 <gpFault(regs*, void*)+0x63>
c0026bc6:	90                   	nop
c0026bc7:	83 c4 1c             	add    esp,0x1c
c0026bca:	c3                   	ret    

c0026bcb <pgFault(regs*, void*)>:
c0026bcb:	83 ec 1c             	sub    esp,0x1c
c0026bce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026bd2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0026bd5:	0f 20 d0             	mov    eax,cr2
c0026bd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026bdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026be0:	83 ec 04             	sub    esp,0x4
c0026be3:	52                   	push   edx
c0026be4:	50                   	push   eax
c0026be5:	68 f8 30 03 c0       	push   0xc00330f8
c0026bea:	e8 9e 25 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0026bef:	83 c4 10             	add    esp,0x10
c0026bf2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0026bf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0026bf9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0026bfc:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0026c02:	0f 20 d2             	mov    edx,cr2
c0026c05:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026c09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026c0d:	83 ec 08             	sub    esp,0x8
c0026c10:	52                   	push   edx
c0026c11:	50                   	push   eax
c0026c12:	e8 c1 1f ff ff       	call   c0018bd8 <VAS::tryLoadBackOffDisk(unsigned long)>
c0026c17:	83 c4 10             	add    esp,0x10
c0026c1a:	0f b6 c0             	movzx  eax,al
c0026c1d:	85 c0                	test   eax,eax
c0026c1f:	75 2e                	jne    c0026c4f <pgFault(regs*, void*)+0x84>
c0026c21:	83 ec 0c             	sub    esp,0xc
c0026c24:	68 33 30 03 c0       	push   0xc0033033
c0026c29:	e8 ea fe ff ff       	call   c0026b18 <displayProgramFault(char const*)>
c0026c2e:	83 c4 10             	add    esp,0x10
c0026c31:	83 ec 0c             	sub    esp,0xc
c0026c34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0026c38:	e8 da fa ff ff       	call   c0026717 <displayDebugInfo(regs*)>
c0026c3d:	83 c4 10             	add    esp,0x10
c0026c40:	83 ec 0c             	sub    esp,0xc
c0026c43:	6a 00                	push   0x0
c0026c45:	e8 a6 ed ff ff       	call   c00259f0 <Thr::terminateFromIRQ(int)>
c0026c4a:	83 c4 10             	add    esp,0x10
c0026c4d:	eb 01                	jmp    c0026c50 <pgFault(regs*, void*)+0x85>
c0026c4f:	90                   	nop
c0026c50:	83 c4 1c             	add    esp,0x1c
c0026c53:	c3                   	ret    

c0026c54 <otherISRHandler(regs*, void*)>:
c0026c54:	83 ec 0c             	sub    esp,0xc
c0026c57:	83 ec 0c             	sub    esp,0xc
c0026c5a:	68 20 31 03 c0       	push   0xc0033120
c0026c5f:	e8 b4 fe ff ff       	call   c0026b18 <displayProgramFault(char const*)>
c0026c64:	83 c4 10             	add    esp,0x10
c0026c67:	83 ec 0c             	sub    esp,0xc
c0026c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026c6e:	e8 a4 fa ff ff       	call   c0026717 <displayDebugInfo(regs*)>
c0026c73:	83 c4 10             	add    esp,0x10
c0026c76:	83 ec 0c             	sub    esp,0xc
c0026c79:	6a 00                	push   0x0
c0026c7b:	e8 70 ed ff ff       	call   c00259f0 <Thr::terminateFromIRQ(int)>
c0026c80:	83 c4 10             	add    esp,0x10
c0026c83:	90                   	nop
c0026c84:	83 c4 0c             	add    esp,0xc
c0026c87:	c3                   	ret    

c0026c88 <opcodeFault(regs*, void*)>:
c0026c88:	55                   	push   ebp
c0026c89:	89 e5                	mov    ebp,esp
c0026c8b:	83 ec 08             	sub    esp,0x8
c0026c8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c91:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026c94:	83 ec 08             	sub    esp,0x8
c0026c97:	50                   	push   eax
c0026c98:	68 3e 30 03 c0       	push   0xc003303e
c0026c9d:	e8 eb 24 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0026ca2:	83 c4 10             	add    esp,0x10
c0026ca5:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026caa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026cb0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0026cb6:	0f b6 c0             	movzx  eax,al
c0026cb9:	85 c0                	test   eax,eax
c0026cbb:	74 21                	je     c0026cde <opcodeFault(regs*, void*)+0x56>
c0026cbd:	83 ec 0c             	sub    esp,0xc
c0026cc0:	68 48 31 03 c0       	push   0xc0033148
c0026cc5:	e8 c3 24 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0026cca:	83 c4 10             	add    esp,0x10
c0026ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026cd0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0026cd3:	8d 50 19             	lea    edx,[eax+0x19]
c0026cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026cd9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0026cdc:	eb 2b                	jmp    c0026d09 <opcodeFault(regs*, void*)+0x81>
c0026cde:	83 ec 0c             	sub    esp,0xc
c0026ce1:	68 4c 30 03 c0       	push   0xc003304c
c0026ce6:	e8 2d fe ff ff       	call   c0026b18 <displayProgramFault(char const*)>
c0026ceb:	83 c4 10             	add    esp,0x10
c0026cee:	83 ec 0c             	sub    esp,0xc
c0026cf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026cf4:	e8 1e fa ff ff       	call   c0026717 <displayDebugInfo(regs*)>
c0026cf9:	83 c4 10             	add    esp,0x10
c0026cfc:	83 ec 0c             	sub    esp,0xc
c0026cff:	6a 00                	push   0x0
c0026d01:	e8 ea ec ff ff       	call   c00259f0 <Thr::terminateFromIRQ(int)>
c0026d06:	83 c4 10             	add    esp,0x10
c0026d09:	c9                   	leave  
c0026d0a:	c3                   	ret    

c0026d0b <i386SaveCoprocessor(void*)>:
c0026d0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d0f:	83 c0 3f             	add    eax,0x3f
c0026d12:	83 e0 c0             	and    eax,0xffffffc0
c0026d15:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026d19:	ff 25 70 02 04 c0    	jmp    DWORD PTR ds:0xc0040270

c0026d1f <i386LoadCoprocessor(void*)>:
c0026d1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0026d23:	83 c0 3f             	add    eax,0x3f
c0026d26:	83 e0 c0             	and    eax,0xffffffc0
c0026d29:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0026d2d:	ff 25 6c 02 04 c0    	jmp    DWORD PTR ds:0xc004026c

c0026d33 <x87EmulHandler(regs*, void*)>:
c0026d33:	53                   	push   ebx
c0026d34:	83 ec 08             	sub    esp,0x8
c0026d37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026d3c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0026d40:	74 10                	je     c0026d52 <x87EmulHandler(regs*, void*)+0x1f>
c0026d42:	83 ec 0c             	sub    esp,0xc
c0026d45:	68 59 30 03 c0       	push   0xc0033059
c0026d4a:	e8 57 94 ff ff       	call   c00201a6 <KePanic(char const*)>
c0026d4f:	83 c4 10             	add    esp,0x10
c0026d52:	0f 20 c0             	mov    eax,cr0
c0026d55:	a8 08                	test   al,0x8
c0026d57:	74 59                	je     c0026db2 <x87EmulHandler(regs*, void*)+0x7f>
c0026d59:	0f 06                	clts   
c0026d5b:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026d60:	85 c0                	test   eax,eax
c0026d62:	74 0e                	je     c0026d72 <x87EmulHandler(regs*, void*)+0x3f>
c0026d64:	83 ec 0c             	sub    esp,0xc
c0026d67:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026d6a:	e8 9c ff ff ff       	call   c0026d0b <i386SaveCoprocessor(void*)>
c0026d6f:	83 c4 10             	add    esp,0x10
c0026d72:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0026d78:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0026d7c:	75 12                	jne    c0026d90 <x87EmulHandler(regs*, void*)+0x5d>
c0026d7e:	83 ec 0c             	sub    esp,0xc
c0026d81:	68 40 02 00 00       	push   0x240
c0026d86:	e8 73 f5 fe ff       	call   c00162fe <malloc>
c0026d8b:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0026d8e:	eb 10                	jmp    c0026da0 <x87EmulHandler(regs*, void*)+0x6d>
c0026d90:	83 ec 0c             	sub    esp,0xc
c0026d93:	a1 68 02 04 c0       	mov    eax,ds:0xc0040268
c0026d98:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0026d9b:	e8 7f ff ff ff       	call   c0026d1f <i386LoadCoprocessor(void*)>
c0026da0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0026da5:	83 c4 10             	add    esp,0x10
c0026da8:	a3 68 02 04 c0       	mov    ds:0xc0040268,eax
c0026dad:	83 c4 08             	add    esp,0x8
c0026db0:	5b                   	pop    ebx
c0026db1:	c3                   	ret    
c0026db2:	83 ec 0c             	sub    esp,0xc
c0026db5:	68 6d 30 03 c0       	push   0xc003306d
c0026dba:	e8 ce 23 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0026dbf:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0026dc7:	83 c4 18             	add    esp,0x18
c0026dca:	5b                   	pop    ebx
c0026dcb:	e9 20 ec ff ff       	jmp    c00259f0 <Thr::terminateFromIRQ(int)>

c0026dd0 <HalInitialiseCoprocessor()>:
c0026dd0:	83 ec 10             	sub    esp,0x10
c0026dd3:	c7 05 68 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040268,0x0
c0026ddd:	6a 00                	push   0x0
c0026ddf:	68 33 6d 02 c0       	push   0xc0026d33
c0026de4:	6a 07                	push   0x7
c0026de6:	e8 6f 49 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0026deb:	e8 a0 70 00 00       	call   c002de90 <avxDetect>
c0026df0:	83 c4 10             	add    esp,0x10
c0026df3:	85 c0                	test   eax,eax
c0026df5:	74 1c                	je     c0026e13 <HalInitialiseCoprocessor()+0x43>
c0026df7:	c7 05 70 02 04 c0 ba de 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002deba
c0026e01:	c7 05 6c 02 04 c0 cb de 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002decb
c0026e0b:	83 c4 0c             	add    esp,0xc
c0026e0e:	e9 c9 70 00 00       	jmp    c002dedc <avxInit>
c0026e13:	e8 e8 73 00 00       	call   c002e200 <sseDetect>
c0026e18:	85 c0                	test   eax,eax
c0026e1a:	74 1c                	je     c0026e38 <HalInitialiseCoprocessor()+0x68>
c0026e1c:	c7 05 70 02 04 c0 18 e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e218
c0026e26:	c7 05 6c 02 04 c0 20 e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e220
c0026e30:	83 c4 0c             	add    esp,0xc
c0026e33:	e9 f0 73 00 00       	jmp    c002e228 <sseInit>
c0026e38:	e8 09 74 00 00       	call   c002e246 <x87Detect>
c0026e3d:	85 c0                	test   eax,eax
c0026e3f:	74 1c                	je     c0026e5d <HalInitialiseCoprocessor()+0x8d>
c0026e41:	c7 05 70 02 04 c0 61 e2 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc002e261
c0026e4b:	c7 05 6c 02 04 c0 68 e2 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc002e268
c0026e55:	83 c4 0c             	add    esp,0xc
c0026e58:	e9 12 74 00 00       	jmp    c002e26f <x87Init>
c0026e5d:	c7 05 70 02 04 c0 e4 66 02 c0 	mov    DWORD PTR ds:0xc0040270,0xc00266e4
c0026e67:	c7 05 6c 02 04 c0 e4 66 02 c0 	mov    DWORD PTR ds:0xc004026c,0xc00266e4
c0026e71:	0f 20 c0             	mov    eax,cr0
c0026e74:	83 c8 04             	or     eax,0x4
c0026e77:	0f 22 c0             	mov    cr0,eax
c0026e7a:	83 c4 0c             	add    esp,0xc
c0026e7d:	c3                   	ret    

c0026e7e <HalPanic(char const*)>:
c0026e7e:	53                   	push   ebx
c0026e7f:	83 ec 10             	sub    esp,0x10
c0026e82:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026e86:	fa                   	cli    
c0026e87:	53                   	push   ebx
c0026e88:	68 83 30 03 c0       	push   0xc0033083
c0026e8d:	e8 fb 22 ff ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0026e92:	a1 64 02 04 c0       	mov    eax,ds:0xc0040264
c0026e97:	83 c4 10             	add    esp,0x10
c0026e9a:	85 c0                	test   eax,eax
c0026e9c:	74 09                	je     c0026ea7 <HalPanic(char const*)+0x29>
c0026e9e:	83 ec 0c             	sub    esp,0xc
c0026ea1:	53                   	push   ebx
c0026ea2:	ff d0                	call   eax
c0026ea4:	83 c4 10             	add    esp,0x10
c0026ea7:	a1 08 aa 03 c0       	mov    eax,ds:0xc003aa08
c0026eac:	85 c0                	test   eax,eax
c0026eae:	0f 84 dc 00 00 00    	je     c0026f90 <HalPanic(char const*)+0x112>
c0026eb4:	52                   	push   edx
c0026eb5:	6a 01                	push   0x1
c0026eb7:	6a 0f                	push   0xf
c0026eb9:	50                   	push   eax
c0026eba:	e8 3d ff fe ff       	call   c0016dfc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026ebf:	59                   	pop    ecx
c0026ec0:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ec6:	e8 21 01 ff ff       	call   c0016fec <VgaText::clearScreen()>
c0026ecb:	58                   	pop    eax
c0026ecc:	5a                   	pop    edx
c0026ecd:	68 54 11 03 c0       	push   0xc0031154
c0026ed2:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026ed8:	e8 57 ff fe ff       	call   c0016e34 <VgaText::setTitle(char*)>
c0026edd:	83 c4 0c             	add    esp,0xc
c0026ee0:	6a 01                	push   0x1
c0026ee2:	6a 0f                	push   0xf
c0026ee4:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026eea:	e8 0d ff fe ff       	call   c0016dfc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026eef:	59                   	pop    ecx
c0026ef0:	58                   	pop    eax
c0026ef1:	68 9c 30 03 c0       	push   0xc003309c
c0026ef6:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026efc:	e8 ed 03 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026f01:	83 c4 0c             	add    esp,0xc
c0026f04:	6a 0f                	push   0xf
c0026f06:	6a 01                	push   0x1
c0026f08:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f0e:	e8 e9 fe fe ff       	call   c0016dfc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026f13:	58                   	pop    eax
c0026f14:	5a                   	pop    edx
c0026f15:	68 a5 30 03 c0       	push   0xc00330a5
c0026f1a:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f20:	e8 c9 03 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026f25:	83 c4 0c             	add    esp,0xc
c0026f28:	6a 01                	push   0x1
c0026f2a:	6a 0f                	push   0xf
c0026f2c:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f32:	e8 c5 fe fe ff       	call   c0016dfc <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0026f37:	59                   	pop    ecx
c0026f38:	58                   	pop    eax
c0026f39:	68 e9 30 03 c0       	push   0xc00330e9
c0026f3e:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f44:	e8 a5 03 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026f49:	58                   	pop    eax
c0026f4a:	5a                   	pop    edx
c0026f4b:	68 b2 30 03 c0       	push   0xc00330b2
c0026f50:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f56:	e8 93 03 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026f5b:	59                   	pop    ecx
c0026f5c:	58                   	pop    eax
c0026f5d:	68 ec 30 03 c0       	push   0xc00330ec
c0026f62:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f68:	e8 81 03 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026f6d:	58                   	pop    eax
c0026f6e:	5a                   	pop    edx
c0026f6f:	53                   	push   ebx
c0026f70:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f76:	e8 73 03 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026f7b:	59                   	pop    ecx
c0026f7c:	5b                   	pop    ebx
c0026f7d:	68 e9 30 03 c0       	push   0xc00330e9
c0026f82:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c0026f88:	e8 61 03 ff ff       	call   c00172ee <VgaText::puts(char const*)>
c0026f8d:	83 c4 10             	add    esp,0x10
c0026f90:	eb fe                	jmp    c0026f90 <HalPanic(char const*)+0x112>

c0026f92 <HalQueryPerformanceCounter()>:
c0026f92:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026f97:	31 d2                	xor    edx,edx
c0026f99:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0026f9f:	31 c0                	xor    eax,eax
c0026fa1:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0026fa8:	74 02                	je     c0026fac <HalQueryPerformanceCounter()+0x1a>
c0026faa:	0f 31                	rdtsc  
c0026fac:	c3                   	ret    

c0026fad <HalInitialise()>:
c0026fad:	53                   	push   ebx
c0026fae:	83 ec 08             	sub    esp,0x8
c0026fb1:	e8 d4 49 ff ff       	call   c001b98a <setupINTS()>
c0026fb6:	80 3d e0 f6 03 c0 00 	cmp    BYTE PTR ds:0xc003f6e0,0x0
c0026fbd:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0026fc2:	75 0f                	jne    c0026fd3 <HalInitialise()+0x26>
c0026fc4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026fca:	83 e2 fe             	and    edx,0xfffffffe
c0026fcd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026fd3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0026fd9:	c6 05 60 02 04 c0 00 	mov    BYTE PTR ds:0xc0040260,0x0
c0026fe0:	83 e2 fe             	and    edx,0xfffffffe
c0026fe3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0026fe9:	e8 9e 02 00 00       	call   c002728c <picOpen()>
c0026fee:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c0026ff5:	74 0a                	je     c0027001 <HalInitialise()+0x54>
c0026ff7:	e8 e0 01 00 00       	call   c00271dc <picDisable()>
c0026ffc:	e8 03 68 00 00       	call   c002d804 <apicOpen()>
c0027001:	bb 0f 00 00 00       	mov    ebx,0xf
c0027006:	50                   	push   eax
c0027007:	6a 00                	push   0x0
c0027009:	68 54 6c 02 c0       	push   0xc0026c54
c002700e:	6a 00                	push   0x0
c0027010:	e8 45 47 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027015:	83 c4 0c             	add    esp,0xc
c0027018:	6a 00                	push   0x0
c002701a:	68 54 6c 02 c0       	push   0xc0026c54
c002701f:	6a 01                	push   0x1
c0027021:	e8 34 47 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027026:	83 c4 0c             	add    esp,0xc
c0027029:	6a 00                	push   0x0
c002702b:	68 e5 66 02 c0       	push   0xc00266e5
c0027030:	6a 02                	push   0x2
c0027032:	e8 23 47 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027037:	83 c4 0c             	add    esp,0xc
c002703a:	6a 00                	push   0x0
c002703c:	68 54 6c 02 c0       	push   0xc0026c54
c0027041:	6a 03                	push   0x3
c0027043:	e8 12 47 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027048:	83 c4 0c             	add    esp,0xc
c002704b:	6a 00                	push   0x0
c002704d:	68 54 6c 02 c0       	push   0xc0026c54
c0027052:	6a 04                	push   0x4
c0027054:	e8 01 47 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c0027059:	83 c4 0c             	add    esp,0xc
c002705c:	6a 00                	push   0x0
c002705e:	68 54 6c 02 c0       	push   0xc0026c54
c0027063:	6a 05                	push   0x5
c0027065:	e8 f0 46 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002706a:	83 c4 0c             	add    esp,0xc
c002706d:	6a 00                	push   0x0
c002706f:	68 88 6c 02 c0       	push   0xc0026c88
c0027074:	6a 06                	push   0x6
c0027076:	e8 df 46 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002707b:	83 c4 0c             	add    esp,0xc
c002707e:	6a 00                	push   0x0
c0027080:	68 fe 66 02 c0       	push   0xc00266fe
c0027085:	6a 08                	push   0x8
c0027087:	e8 ce 46 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002708c:	83 c4 0c             	add    esp,0xc
c002708f:	6a 00                	push   0x0
c0027091:	68 54 6c 02 c0       	push   0xc0026c54
c0027096:	6a 09                	push   0x9
c0027098:	e8 bd 46 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002709d:	83 c4 0c             	add    esp,0xc
c00270a0:	6a 00                	push   0x0
c00270a2:	68 54 6c 02 c0       	push   0xc0026c54
c00270a7:	6a 0a                	push   0xa
c00270a9:	e8 ac 46 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270ae:	83 c4 0c             	add    esp,0xc
c00270b1:	6a 00                	push   0x0
c00270b3:	68 54 6c 02 c0       	push   0xc0026c54
c00270b8:	6a 0b                	push   0xb
c00270ba:	e8 9b 46 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270bf:	83 c4 0c             	add    esp,0xc
c00270c2:	6a 00                	push   0x0
c00270c4:	68 64 6b 02 c0       	push   0xc0026b64
c00270c9:	6a 0d                	push   0xd
c00270cb:	e8 8a 46 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270d0:	83 c4 0c             	add    esp,0xc
c00270d3:	6a 00                	push   0x0
c00270d5:	68 cb 6b 02 c0       	push   0xc0026bcb
c00270da:	6a 0e                	push   0xe
c00270dc:	e8 79 46 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270e1:	83 c4 10             	add    esp,0x10
c00270e4:	50                   	push   eax
c00270e5:	6a 00                	push   0x0
c00270e7:	68 54 6c 02 c0       	push   0xc0026c54
c00270ec:	53                   	push   ebx
c00270ed:	43                   	inc    ebx
c00270ee:	e8 67 46 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c00270f3:	83 c4 10             	add    esp,0x10
c00270f6:	83 fb 1e             	cmp    ebx,0x1e
c00270f9:	75 e9                	jne    c00270e4 <HalInitialise()+0x137>
c00270fb:	50                   	push   eax
c00270fc:	6a 00                	push   0x0
c00270fe:	68 55 1a 02 c0       	push   0xc0021a55
c0027103:	6a 60                	push   0x60
c0027105:	e8 50 46 ff ff       	call   c001b75a <installISRHandler(int, void (*)(regs*, void*), void*)>
c002710a:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002710f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0027119:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0027120:	e8 d9 f1 fe ff       	call   c00162fe <malloc>
c0027125:	89 04 24             	mov    DWORD PTR [esp],eax
c0027128:	89 c3                	mov    ebx,eax
c002712a:	e8 3b 09 00 00       	call   c0027a6a <RTC::RTC()>
c002712f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0027139:	5a                   	pop    edx
c002713a:	59                   	pop    ecx
c002713b:	53                   	push   ebx
c002713c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027142:	e8 c7 40 ff ff       	call   c001b20e <Device::addChild(Device*)>
c0027147:	8b 03                	mov    eax,DWORD PTR [ebx]
c0027149:	6a 00                	push   0x0
c002714b:	6a 00                	push   0x0
c002714d:	6a 00                	push   0x0
c002714f:	53                   	push   ebx
c0027150:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0027153:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027158:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c002715e:	83 c4 28             	add    esp,0x28
c0027161:	5b                   	pop    ebx
c0027162:	c3                   	ret    

c0027163 <HalMakeBeep(int)>:
c0027163:	53                   	push   ebx
c0027164:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0027168:	85 db                	test   ebx,ebx
c002716a:	75 07                	jne    c0027173 <HalMakeBeep(int)+0x10>
c002716c:	e4 61                	in     al,0x61
c002716e:	83 e0 fc             	and    eax,0xfffffffc
c0027171:	eb 26                	jmp    c0027199 <HalMakeBeep(int)+0x36>
c0027173:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0027178:	99                   	cdq    
c0027179:	f7 fb                	idiv   ebx
c002717b:	89 c1                	mov    ecx,eax
c002717d:	b0 b6                	mov    al,0xb6
c002717f:	e6 43                	out    0x43,al
c0027181:	88 c8                	mov    al,cl
c0027183:	e6 42                	out    0x42,al
c0027185:	89 c8                	mov    eax,ecx
c0027187:	c1 e8 08             	shr    eax,0x8
c002718a:	e6 42                	out    0x42,al
c002718c:	e4 61                	in     al,0x61
c002718e:	89 c2                	mov    edx,eax
c0027190:	83 ca 03             	or     edx,0x3
c0027193:	38 d0                	cmp    al,dl
c0027195:	74 04                	je     c002719b <HalMakeBeep(int)+0x38>
c0027197:	88 d0                	mov    al,dl
c0027199:	e6 61                	out    0x61,al
c002719b:	5b                   	pop    ebx
c002719c:	c3                   	ret    

c002719d <HalGetRand()>:
c002719d:	31 c0                	xor    eax,eax
c002719f:	c3                   	ret    

c00271a0 <HalEndOfInterrupt(int)>:
c00271a0:	80 3d 60 02 04 c0 00 	cmp    BYTE PTR ds:0xc0040260,0x0
c00271a7:	74 23                	je     c00271cc <HalEndOfInterrupt(int)+0x2c>
c00271a9:	83 ec 14             	sub    esp,0x14
c00271ac:	6a 1b                	push   0x1b
c00271ae:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00271b4:	e8 4f e7 fe ff       	call   c0015908 <Computer::rdmsr(unsigned int)>
c00271b9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00271be:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c00271c8:	83 c4 1c             	add    esp,0x1c
c00271cb:	c3                   	ret    
c00271cc:	e9 3f 02 00 00       	jmp    c0027410 <picEOI(int)>

c00271d1 <HalRestart()>:
c00271d1:	c3                   	ret    

c00271d2 <HalShutdown()>:
c00271d2:	c3                   	ret    

c00271d3 <HalSleep()>:
c00271d3:	c3                   	ret    

c00271d4 <picIoWait()>:
c00271d4:	eb 00                	jmp    c00271d6 <picIoWait()+0x2>
c00271d6:	eb 00                	jmp    c00271d8 <picIoWait()+0x4>
c00271d8:	90                   	nop
c00271d9:	c3                   	ret    
c00271da:	66 90                	xchg   ax,ax

c00271dc <picDisable()>:
c00271dc:	83 ec 10             	sub    esp,0x10
c00271df:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00271e6:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00271eb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00271ef:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00271f4:	ee                   	out    dx,al
c00271f5:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00271fc:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0027201:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027205:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c002720a:	ee                   	out    dx,al
c002720b:	90                   	nop
c002720c:	83 c4 10             	add    esp,0x10
c002720f:	c3                   	ret    

c0027210 <picGetIRQReg(int)>:
c0027210:	83 ec 10             	sub    esp,0x10
c0027213:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027217:	0f b6 c0             	movzx  eax,al
c002721a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027221:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0027225:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0027229:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002722e:	ee                   	out    dx,al
c002722f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027233:	0f b6 c0             	movzx  eax,al
c0027236:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c002723d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027241:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027245:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002724a:	ee                   	out    dx,al
c002724b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0027252:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0027257:	89 c2                	mov    edx,eax
c0027259:	ec                   	in     al,dx
c002725a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002725e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027262:	0f b6 c0             	movzx  eax,al
c0027265:	c1 e0 08             	shl    eax,0x8
c0027268:	89 c1                	mov    ecx,eax
c002726a:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0027271:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0027276:	89 c2                	mov    edx,eax
c0027278:	ec                   	in     al,dx
c0027279:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002727d:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0027281:	0f b6 c0             	movzx  eax,al
c0027284:	09 c8                	or     eax,ecx
c0027286:	83 c4 10             	add    esp,0x10
c0027289:	c3                   	ret    
c002728a:	66 90                	xchg   ax,ax

c002728c <picOpen()>:
c002728c:	83 ec 50             	sub    esp,0x50
c002728f:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0027296:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002729b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002729f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00272a3:	ee                   	out    dx,al
c00272a4:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c00272ab:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00272b0:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00272b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00272b8:	ee                   	out    dx,al
c00272b9:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c00272c1:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00272c9:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00272d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00272d4:	89 c2                	mov    edx,eax
c00272d6:	ec                   	in     al,dx
c00272d7:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00272db:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00272df:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00272e3:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00272ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00272ee:	89 c2                	mov    edx,eax
c00272f0:	ec                   	in     al,dx
c00272f1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00272f5:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00272f9:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00272fd:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0027304:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0027309:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c002730d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027311:	ee                   	out    dx,al
c0027312:	e8 bd fe ff ff       	call   c00271d4 <picIoWait()>
c0027317:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c002731e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0027323:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0027327:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002732b:	ee                   	out    dx,al
c002732c:	e8 a3 fe ff ff       	call   c00271d4 <picIoWait()>
c0027331:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0027335:	0f b6 c0             	movzx  eax,al
c0027338:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c002733f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0027343:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0027347:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002734b:	ee                   	out    dx,al
c002734c:	e8 83 fe ff ff       	call   c00271d4 <picIoWait()>
c0027351:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027355:	0f b6 c0             	movzx  eax,al
c0027358:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c002735f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0027363:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0027367:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002736b:	ee                   	out    dx,al
c002736c:	e8 63 fe ff ff       	call   c00271d4 <picIoWait()>
c0027371:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0027378:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c002737d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0027381:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0027385:	ee                   	out    dx,al
c0027386:	e8 49 fe ff ff       	call   c00271d4 <picIoWait()>
c002738b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0027392:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0027397:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c002739b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002739f:	ee                   	out    dx,al
c00273a0:	e8 2f fe ff ff       	call   c00271d4 <picIoWait()>
c00273a5:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c00273ac:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c00273b1:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c00273b5:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00273b9:	ee                   	out    dx,al
c00273ba:	e8 15 fe ff ff       	call   c00271d4 <picIoWait()>
c00273bf:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00273c6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00273cb:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00273cf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00273d3:	ee                   	out    dx,al
c00273d4:	e8 fb fd ff ff       	call   c00271d4 <picIoWait()>
c00273d9:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00273de:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00273e5:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00273e9:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00273ed:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00273f1:	ee                   	out    dx,al
c00273f2:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00273f7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00273fe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0027402:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0027406:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c002740a:	ee                   	out    dx,al
c002740b:	90                   	nop
c002740c:	83 c4 50             	add    esp,0x50
c002740f:	c3                   	ret    

c0027410 <picEOI(int)>:
c0027410:	83 ec 10             	sub    esp,0x10
c0027413:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027418:	75 1e                	jne    c0027438 <picEOI(int)+0x28>
c002741a:	6a 0b                	push   0xb
c002741c:	e8 ef fd ff ff       	call   c0027210 <picGetIRQReg(int)>
c0027421:	83 c4 04             	add    esp,0x4
c0027424:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0027429:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c002742e:	25 80 00 00 00       	and    eax,0x80
c0027433:	74 73                	je     c00274a8 <picEOI(int)+0x98>
c0027435:	8d 76 00             	lea    esi,[esi+0x0]
c0027438:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c002743d:	75 31                	jne    c0027470 <picEOI(int)+0x60>
c002743f:	6a 0b                	push   0xb
c0027441:	e8 ca fd ff ff       	call   c0027210 <picGetIRQReg(int)>
c0027446:	83 c4 04             	add    esp,0x4
c0027449:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c002744e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027452:	98                   	cwde   
c0027453:	85 c0                	test   eax,eax
c0027455:	78 19                	js     c0027470 <picEOI(int)+0x60>
c0027457:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c002745e:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0027463:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027467:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002746c:	ee                   	out    dx,al
c002746d:	eb 3d                	jmp    c00274ac <picEOI(int)+0x9c>
c002746f:	90                   	nop
c0027470:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0027475:	7e 19                	jle    c0027490 <picEOI(int)+0x80>
c0027477:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c002747e:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0027483:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027487:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002748c:	ee                   	out    dx,al
c002748d:	8d 76 00             	lea    esi,[esi+0x0]
c0027490:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0027497:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c002749c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00274a0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00274a5:	ee                   	out    dx,al
c00274a6:	eb 04                	jmp    c00274ac <picEOI(int)+0x9c>
c00274a8:	90                   	nop
c00274a9:	8d 76 00             	lea    esi,[esi+0x0]
c00274ac:	83 c4 10             	add    esp,0x10
c00274af:	c3                   	ret    

c00274b0 <RTC::open(int, int, void*)>:
c00274b0:	31 c0                	xor    eax,eax
c00274b2:	c3                   	ret    
c00274b3:	90                   	nop

c00274b4 <RTC::close(int, int, void*)>:
c00274b4:	31 c0                	xor    eax,eax
c00274b6:	c3                   	ret    
c00274b7:	90                   	nop

c00274b8 <RTC::timeInSecondsUTC()>:
c00274b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00274bc:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00274c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00274c8:	c3                   	ret    
c00274c9:	90                   	nop

c00274ca <RTC::timeInDatetimeUTC()>:
c00274ca:	53                   	push   ebx
c00274cb:	83 ec 14             	sub    esp,0x14
c00274ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00274d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00274d6:	8b 10                	mov    edx,DWORD PTR [eax]
c00274d8:	50                   	push   eax
c00274d9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00274dc:	83 c4 0c             	add    esp,0xc
c00274df:	52                   	push   edx
c00274e0:	50                   	push   eax
c00274e1:	53                   	push   ebx
c00274e2:	e8 9b 3a ff ff       	call   c001af82 <secondsToDatetime(unsigned long long)>
c00274e7:	89 d8                	mov    eax,ebx
c00274e9:	83 c4 14             	add    esp,0x14
c00274ec:	5b                   	pop    ebx
c00274ed:	c2 04 00             	ret    0x4

c00274f0 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00274f0:	56                   	push   esi
c00274f1:	53                   	push   ebx
c00274f2:	83 ec 14             	sub    esp,0x14
c00274f5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00274f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00274fb:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00274fe:	8d 44 24 08          	lea    eax,[esp+0x8]
c0027502:	52                   	push   edx
c0027503:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027507:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002750b:	50                   	push   eax
c002750c:	e8 71 3a ff ff       	call   c001af82 <secondsToDatetime(unsigned long long)>
c0027511:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027515:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027519:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002751d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0027521:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0027525:	89 f0                	mov    eax,esi
c0027527:	83 c4 20             	add    esp,0x20
c002752a:	5b                   	pop    ebx
c002752b:	5e                   	pop    esi
c002752c:	ff e0                	jmp    eax

c002752e <RTC::~RTC()>:
c002752e:	83 ec 0c             	sub    esp,0xc
c0027531:	ba 88 31 03 c0       	mov    edx,0xc0033188
c0027536:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002753a:	89 10                	mov    DWORD PTR [eax],edx
c002753c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027540:	83 ec 0c             	sub    esp,0xc
c0027543:	50                   	push   eax
c0027544:	e8 cb 37 ff ff       	call   c001ad14 <Clock::~Clock()>
c0027549:	83 c4 10             	add    esp,0x10
c002754c:	90                   	nop
c002754d:	83 c4 0c             	add    esp,0xc
c0027550:	c3                   	ret    
c0027551:	90                   	nop

c0027552 <RTC::~RTC()>:
c0027552:	83 ec 0c             	sub    esp,0xc
c0027555:	83 ec 0c             	sub    esp,0xc
c0027558:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002755c:	e8 cd ff ff ff       	call   c002752e <RTC::~RTC()>
c0027561:	83 c4 10             	add    esp,0x10
c0027564:	83 ec 08             	sub    esp,0x8
c0027567:	68 60 01 00 00       	push   0x160
c002756c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027570:	e8 eb 1a ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c0027575:	83 c4 10             	add    esp,0x10
c0027578:	83 c4 0c             	add    esp,0xc
c002757b:	c3                   	ret    

c002757c <RTC::get_update_in_progress_flag()>:
c002757c:	83 ec 14             	sub    esp,0x14
c002757f:	6a 0a                	push   0xa
c0027581:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027587:	e8 34 e4 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c002758c:	83 c4 1c             	add    esp,0x1c
c002758f:	0f b6 c0             	movzx  eax,al
c0027592:	c1 e8 07             	shr    eax,0x7
c0027595:	c3                   	ret    

c0027596 <RTC::completeRTCRefresh()>:
c0027596:	55                   	push   ebp
c0027597:	57                   	push   edi
c0027598:	56                   	push   esi
c0027599:	53                   	push   ebx
c002759a:	83 ec 3c             	sub    esp,0x3c
c002759d:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c00275a3:	83 ec 0c             	sub    esp,0xc
c00275a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00275aa:	e8 cd ff ff ff       	call   c002757c <RTC::get_update_in_progress_flag()>
c00275af:	83 c4 10             	add    esp,0x10
c00275b2:	84 c0                	test   al,al
c00275b4:	74 0e                	je     c00275c4 <RTC::completeRTCRefresh()+0x2e>
c00275b6:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00275bc:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c00275c2:	73 df                	jae    c00275a3 <RTC::completeRTCRefresh()+0xd>
c00275c4:	51                   	push   ecx
c00275c5:	51                   	push   ecx
c00275c6:	6a 00                	push   0x0
c00275c8:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275ce:	e8 ed e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c00275d3:	5b                   	pop    ebx
c00275d4:	89 c7                	mov    edi,eax
c00275d6:	5e                   	pop    esi
c00275d7:	6a 02                	push   0x2
c00275d9:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275df:	e8 dc e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c00275e4:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00275e8:	5d                   	pop    ebp
c00275e9:	58                   	pop    eax
c00275ea:	6a 04                	push   0x4
c00275ec:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00275f2:	e8 c9 e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c00275f7:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00275fb:	58                   	pop    eax
c00275fc:	5a                   	pop    edx
c00275fd:	6a 07                	push   0x7
c00275ff:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027605:	e8 b6 e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c002760a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002760e:	59                   	pop    ecx
c002760f:	5b                   	pop    ebx
c0027610:	6a 08                	push   0x8
c0027612:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027618:	e8 a3 e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c002761d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0027621:	5e                   	pop    esi
c0027622:	5d                   	pop    ebp
c0027623:	6a 09                	push   0x9
c0027625:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002762b:	e8 90 e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c0027630:	0f b6 c0             	movzx  eax,al
c0027633:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0027637:	83 c4 10             	add    esp,0x10
c002763a:	8b 1d ec f3 03 c0    	mov    ebx,DWORD PTR ds:0xc003f3ec
c0027640:	83 ec 0c             	sub    esp,0xc
c0027643:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0027647:	e8 30 ff ff ff       	call   c002757c <RTC::get_update_in_progress_flag()>
c002764c:	83 c4 10             	add    esp,0x10
c002764f:	84 c0                	test   al,al
c0027651:	74 0e                	je     c0027661 <RTC::completeRTCRefresh()+0xcb>
c0027653:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0027659:	3b 05 ec f3 03 c0    	cmp    eax,DWORD PTR ds:0xc003f3ec
c002765f:	73 df                	jae    c0027640 <RTC::completeRTCRefresh()+0xaa>
c0027661:	51                   	push   ecx
c0027662:	51                   	push   ecx
c0027663:	6a 00                	push   0x0
c0027665:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002766b:	e8 50 e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c0027670:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027674:	5b                   	pop    ebx
c0027675:	5e                   	pop    esi
c0027676:	6a 02                	push   0x2
c0027678:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002767e:	e8 3d e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c0027683:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0027687:	5d                   	pop    ebp
c0027688:	58                   	pop    eax
c0027689:	6a 04                	push   0x4
c002768b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027691:	e8 2a e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c0027696:	88 c3                	mov    bl,al
c0027698:	58                   	pop    eax
c0027699:	5a                   	pop    edx
c002769a:	6a 07                	push   0x7
c002769c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276a2:	e8 19 e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c00276a7:	59                   	pop    ecx
c00276a8:	89 c6                	mov    esi,eax
c00276aa:	5d                   	pop    ebp
c00276ab:	6a 08                	push   0x8
c00276ad:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276b3:	e8 08 e3 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c00276b8:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00276bc:	58                   	pop    eax
c00276bd:	5a                   	pop    edx
c00276be:	6a 09                	push   0x9
c00276c0:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00276c6:	e8 f5 e2 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c00276cb:	89 f9                	mov    ecx,edi
c00276cd:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00276d1:	0f b6 e8             	movzx  ebp,al
c00276d4:	83 c4 10             	add    esp,0x10
c00276d7:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00276db:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00276e0:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00276e5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00276e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00276ed:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00276f1:	0f 94 c0             	sete   al
c00276f4:	0f b6 fb             	movzx  edi,bl
c00276f7:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00276fb:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0027700:	0f 94 c2             	sete   dl
c0027703:	21 d0                	and    eax,edx
c0027705:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0027709:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c002770d:	0f 94 c2             	sete   dl
c0027710:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0027714:	21 c2                	and    edx,eax
c0027716:	89 f0                	mov    eax,esi
c0027718:	0f b6 c0             	movzx  eax,al
c002771b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002771f:	89 f0                	mov    eax,esi
c0027721:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0027725:	0f 94 c0             	sete   al
c0027728:	21 d0                	and    eax,edx
c002772a:	31 d2                	xor    edx,edx
c002772c:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0027730:	0f 94 c2             	sete   dl
c0027733:	85 c2                	test   edx,eax
c0027735:	75 27                	jne    c002775e <RTC::completeRTCRefresh()+0x1c8>
c0027737:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002773b:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c002773f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0027743:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0027747:	89 f0                	mov    eax,esi
c0027749:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c002774d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0027751:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027755:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0027759:	e9 dc fe ff ff       	jmp    c002763a <RTC::completeRTCRefresh()+0xa4>
c002775e:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0027762:	75 d3                	jne    c0027737 <RTC::completeRTCRefresh()+0x1a1>
c0027764:	52                   	push   edx
c0027765:	52                   	push   edx
c0027766:	6a 0b                	push   0xb
c0027768:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002776e:	e8 4d e2 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c0027773:	83 c4 10             	add    esp,0x10
c0027776:	a8 04                	test   al,0x4
c0027778:	75 7a                	jne    c00277f4 <RTC::completeRTCRefresh()+0x25e>
c002777a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002777e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027782:	83 e1 0f             	and    ecx,0xf
c0027785:	c1 ea 04             	shr    edx,0x4
c0027788:	c1 ef 04             	shr    edi,0x4
c002778b:	6b d2 0a             	imul   edx,edx,0xa
c002778e:	83 e6 0f             	and    esi,0xf
c0027791:	01 d1                	add    ecx,edx
c0027793:	c1 ed 04             	shr    ebp,0x4
c0027796:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c002779a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002779e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00277a2:	c1 ea 04             	shr    edx,0x4
c00277a5:	83 e1 0f             	and    ecx,0xf
c00277a8:	6b d2 0a             	imul   edx,edx,0xa
c00277ab:	6b ed 0a             	imul   ebp,ebp,0xa
c00277ae:	01 d1                	add    ecx,edx
c00277b0:	89 fa                	mov    edx,edi
c00277b2:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00277b6:	83 e2 07             	and    edx,0x7
c00277b9:	89 d9                	mov    ecx,ebx
c00277bb:	6b d2 0a             	imul   edx,edx,0xa
c00277be:	83 e1 0f             	and    ecx,0xf
c00277c1:	83 e3 80             	and    ebx,0xffffff80
c00277c4:	01 d1                	add    ecx,edx
c00277c6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00277ca:	09 cb                	or     ebx,ecx
c00277cc:	c1 ea 04             	shr    edx,0x4
c00277cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00277d3:	6b d2 0a             	imul   edx,edx,0xa
c00277d6:	83 e1 0f             	and    ecx,0xf
c00277d9:	01 d6                	add    esi,edx
c00277db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00277df:	c1 ea 04             	shr    edx,0x4
c00277e2:	6b d2 0a             	imul   edx,edx,0xa
c00277e5:	01 d1                	add    ecx,edx
c00277e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00277eb:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00277ef:	83 e2 0f             	and    edx,0xf
c00277f2:	01 d5                	add    ebp,edx
c00277f4:	a8 02                	test   al,0x2
c00277f6:	75 15                	jne    c002780d <RTC::completeRTCRefresh()+0x277>
c00277f8:	f6 c3 80             	test   bl,0x80
c00277fb:	74 10                	je     c002780d <RTC::completeRTCRefresh()+0x277>
c00277fd:	83 e3 7f             	and    ebx,0x7f
c0027800:	b9 18 00 00 00       	mov    ecx,0x18
c0027805:	8d 43 0c             	lea    eax,[ebx+0xc]
c0027808:	99                   	cdq    
c0027809:	f7 f9                	idiv   ecx
c002780b:	88 d3                	mov    bl,dl
c002780d:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0027813:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0027819:	77 06                	ja     c0027821 <RTC::completeRTCRefresh()+0x28b>
c002781b:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0027821:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027826:	31 c9                	xor    ecx,ecx
c0027828:	c1 e0 10             	shl    eax,0x10
c002782b:	89 cd                	mov    ebp,ecx
c002782d:	c1 e7 10             	shl    edi,0x10
c0027830:	31 d2                	xor    edx,edx
c0027832:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0027838:	09 c5                	or     ebp,eax
c002783a:	89 f0                	mov    eax,esi
c002783c:	89 e9                	mov    ecx,ebp
c002783e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0027842:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c0027846:	88 c2                	mov    dl,al
c0027848:	88 d9                	mov    cl,bl
c002784a:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c002784e:	0f b7 c2             	movzx  eax,dx
c0027851:	09 f8                	or     eax,edi
c0027853:	89 c2                	mov    edx,eax
c0027855:	50                   	push   eax
c0027856:	50                   	push   eax
c0027857:	51                   	push   ecx
c0027858:	52                   	push   edx
c0027859:	e8 a5 35 ff ff       	call   c001ae03 <datetimeToSeconds(datetime_t)>
c002785e:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0027862:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0027868:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c002786e:	83 c4 4c             	add    esp,0x4c
c0027871:	5b                   	pop    ebx
c0027872:	5e                   	pop    esi
c0027873:	5f                   	pop    edi
c0027874:	5d                   	pop    ebp
c0027875:	c3                   	ret    

c0027876 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0027876:	55                   	push   ebp
c0027877:	57                   	push   edi
c0027878:	56                   	push   esi
c0027879:	53                   	push   ebx
c002787a:	83 ec 30             	sub    esp,0x30
c002787d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0027881:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0027885:	6a 00                	push   0x0
c0027887:	6a 00                	push   0x0
c0027889:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c002788f:	e8 46 e2 fe ff       	call   c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>
c0027894:	83 c4 0c             	add    esp,0xc
c0027897:	6a 00                	push   0x0
c0027899:	6a 02                	push   0x2
c002789b:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278a1:	e8 34 e2 fe ff       	call   c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>
c00278a6:	31 d2                	xor    edx,edx
c00278a8:	89 f9                	mov    ecx,edi
c00278aa:	89 f8                	mov    eax,edi
c00278ac:	c1 e9 10             	shr    ecx,0x10
c00278af:	0f b6 c4             	movzx  eax,ah
c00278b2:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c00278b6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00278ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00278be:	b9 64 00 00 00       	mov    ecx,0x64
c00278c3:	89 f0                	mov    eax,esi
c00278c5:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00278c9:	89 f0                	mov    eax,esi
c00278cb:	0f b6 c4             	movzx  eax,ah
c00278ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00278d2:	89 f0                	mov    eax,esi
c00278d4:	c1 e8 10             	shr    eax,0x10
c00278d7:	f7 f1                	div    ecx
c00278d9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00278dd:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00278e1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00278e5:	59                   	pop    ecx
c00278e6:	5b                   	pop    ebx
c00278e7:	89 fb                	mov    ebx,edi
c00278e9:	6a 0b                	push   0xb
c00278eb:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00278f1:	e8 ca e0 fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c00278f6:	83 c4 10             	add    esp,0x10
c00278f9:	89 c5                	mov    ebp,eax
c00278fb:	a8 04                	test   al,0x4
c00278fd:	75 6e                	jne    c002796d <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00278ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0027903:	31 d2                	xor    edx,edx
c0027905:	0f b6 c1             	movzx  eax,cl
c0027908:	b9 0a 00 00 00       	mov    ecx,0xa
c002790d:	f7 f1                	div    ecx
c002790f:	c1 e0 04             	shl    eax,0x4
c0027912:	09 d0                	or     eax,edx
c0027914:	31 d2                	xor    edx,edx
c0027916:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002791a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002791f:	f7 f1                	div    ecx
c0027921:	c1 e0 04             	shl    eax,0x4
c0027924:	09 d0                	or     eax,edx
c0027926:	31 d2                	xor    edx,edx
c0027928:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002792c:	0f b6 c3             	movzx  eax,bl
c002792f:	f7 f1                	div    ecx
c0027931:	c1 e0 04             	shl    eax,0x4
c0027934:	09 d0                	or     eax,edx
c0027936:	31 d2                	xor    edx,edx
c0027938:	89 c3                	mov    ebx,eax
c002793a:	89 f0                	mov    eax,esi
c002793c:	0f b6 c0             	movzx  eax,al
c002793f:	f7 f1                	div    ecx
c0027941:	c1 e0 04             	shl    eax,0x4
c0027944:	09 d0                	or     eax,edx
c0027946:	31 d2                	xor    edx,edx
c0027948:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002794c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0027951:	f7 f1                	div    ecx
c0027953:	c1 e0 04             	shl    eax,0x4
c0027956:	09 d0                	or     eax,edx
c0027958:	31 d2                	xor    edx,edx
c002795a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002795e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027962:	f7 f1                	div    ecx
c0027964:	c1 e0 04             	shl    eax,0x4
c0027967:	09 d0                	or     eax,edx
c0027969:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002796d:	83 e5 02             	and    ebp,0x2
c0027970:	75 1e                	jne    c0027990 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0027972:	0f b6 c3             	movzx  eax,bl
c0027975:	83 f8 0b             	cmp    eax,0xb
c0027978:	76 10                	jbe    c002798a <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c002797a:	8d 53 f4             	lea    edx,[ebx-0xc]
c002797d:	88 d3                	mov    bl,dl
c002797f:	84 d2                	test   dl,dl
c0027981:	75 02                	jne    c0027985 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0027983:	b3 0c                	mov    bl,0xc
c0027985:	83 cb 80             	or     ebx,0xffffff80
c0027988:	eb 06                	jmp    c0027990 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c002798a:	85 c0                	test   eax,eax
c002798c:	75 02                	jne    c0027990 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c002798e:	b3 0c                	mov    bl,0xc
c0027990:	0f b6 db             	movzx  ebx,bl
c0027993:	50                   	push   eax
c0027994:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0027999:	52                   	push   edx
c002799a:	6a 00                	push   0x0
c002799c:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279a2:	e8 33 e1 fe ff       	call   c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>
c00279a7:	83 c4 0c             	add    esp,0xc
c00279aa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00279af:	50                   	push   eax
c00279b0:	6a 02                	push   0x2
c00279b2:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279b8:	e8 1d e1 fe ff       	call   c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>
c00279bd:	83 c4 0c             	add    esp,0xc
c00279c0:	53                   	push   ebx
c00279c1:	6a 04                	push   0x4
c00279c3:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279c9:	e8 0c e1 fe ff       	call   c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>
c00279ce:	83 c4 0c             	add    esp,0xc
c00279d1:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00279d6:	52                   	push   edx
c00279d7:	6a 07                	push   0x7
c00279d9:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279df:	e8 f6 e0 fe ff       	call   c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>
c00279e4:	83 c4 0c             	add    esp,0xc
c00279e7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00279ec:	50                   	push   eax
c00279ed:	6a 08                	push   0x8
c00279ef:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c00279f5:	e8 e0 e0 fe ff       	call   c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>
c00279fa:	83 c4 0c             	add    esp,0xc
c00279fd:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0027a02:	55                   	push   ebp
c0027a03:	6a 09                	push   0x9
c0027a05:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a0b:	e8 ca e0 fe ff       	call   c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>
c0027a10:	5a                   	pop    edx
c0027a11:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0027a15:	e8 7c fb ff ff       	call   c0027596 <RTC::completeRTCRefresh()>
c0027a1a:	83 c4 3c             	add    esp,0x3c
c0027a1d:	b0 01                	mov    al,0x1
c0027a1f:	5b                   	pop    ebx
c0027a20:	5e                   	pop    esi
c0027a21:	5f                   	pop    edi
c0027a22:	5d                   	pop    ebp
c0027a23:	c3                   	ret    

c0027a24 <rtcIRQHandler(regs*, void*)>:
c0027a24:	53                   	push   ebx
c0027a25:	83 ec 10             	sub    esp,0x10
c0027a28:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027a2c:	6a 0c                	push   0xc
c0027a2e:	ff 35 bc a9 03 c0    	push   DWORD PTR ds:0xc003a9bc
c0027a34:	e8 87 df fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c0027a39:	83 c4 10             	add    esp,0x10
c0027a3c:	a8 80                	test   al,0x80
c0027a3e:	74 24                	je     c0027a64 <rtcIRQHandler(regs*, void*)+0x40>
c0027a40:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0027a47:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0027a4e:	66 ff 05 78 02 04 c0 	inc    WORD PTR ds:0xc0040278
c0027a55:	75 0d                	jne    c0027a64 <rtcIRQHandler(regs*, void*)+0x40>
c0027a57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0027a5b:	83 c4 08             	add    esp,0x8
c0027a5e:	5b                   	pop    ebx
c0027a5f:	e9 32 fb ff ff       	jmp    c0027596 <RTC::completeRTCRefresh()>
c0027a64:	83 c4 08             	add    esp,0x8
c0027a67:	5b                   	pop    ebx
c0027a68:	c3                   	ret    
c0027a69:	90                   	nop

c0027a6a <RTC::RTC()>:
c0027a6a:	83 ec 1c             	sub    esp,0x1c
c0027a6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a71:	83 ec 08             	sub    esp,0x8
c0027a74:	68 6b 31 03 c0       	push   0xc003316b
c0027a79:	50                   	push   eax
c0027a7a:	e8 5f 32 ff ff       	call   c001acde <Clock::Clock(char const*)>
c0027a7f:	83 c4 10             	add    esp,0x10
c0027a82:	ba 88 31 03 c0       	mov    edx,0xc0033188
c0027a87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a8b:	89 10                	mov    DWORD PTR [eax],edx
c0027a8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027a91:	83 ec 0c             	sub    esp,0xc
c0027a94:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027a98:	6a 01                	push   0x1
c0027a9a:	68 24 7a 02 c0       	push   0xc0027a24
c0027a9f:	6a 08                	push   0x8
c0027aa1:	50                   	push   eax
c0027aa2:	e8 13 37 ff ff       	call   c001b1ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027aa7:	83 c4 20             	add    esp,0x20
c0027aaa:	89 c2                	mov    edx,eax
c0027aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0027ab0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027ab6:	fa                   	cli    
c0027ab7:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027abc:	83 c0 01             	add    eax,0x1
c0027abf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027ac4:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027ac9:	83 ec 08             	sub    esp,0x8
c0027acc:	6a 0b                	push   0xb
c0027ace:	50                   	push   eax
c0027acf:	e8 ec de fe ff       	call   c00159c0 <Computer::readCMOS(unsigned char)>
c0027ad4:	83 c4 10             	add    esp,0x10
c0027ad7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0027adb:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c0027ae0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0027ae4:	83 ca 10             	or     edx,0x10
c0027ae7:	0f b6 d2             	movzx  edx,dl
c0027aea:	83 ec 04             	sub    esp,0x4
c0027aed:	52                   	push   edx
c0027aee:	6a 0b                	push   0xb
c0027af0:	50                   	push   eax
c0027af1:	e8 e4 df fe ff       	call   c0015ada <Computer::writeCMOS(unsigned char, unsigned char)>
c0027af6:	83 c4 10             	add    esp,0x10
c0027af9:	83 ec 0c             	sub    esp,0xc
c0027afc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0027b00:	e8 91 fa ff ff       	call   c0027596 <RTC::completeRTCRefresh()>
c0027b05:	83 c4 10             	add    esp,0x10
c0027b08:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027b0d:	83 e8 01             	sub    eax,0x1
c0027b10:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c0027b15:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c0027b1a:	85 c0                	test   eax,eax
c0027b1c:	75 01                	jne    c0027b1f <RTC::RTC()+0xb5>
c0027b1e:	fb                   	sti    
c0027b1f:	90                   	nop
c0027b20:	83 c4 1c             	add    esp,0x1c
c0027b23:	c3                   	ret    

c0027b24 <HalConsoleScroll(int, int)>:
c0027b24:	83 ec 10             	sub    esp,0x10
c0027b27:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0027b2f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0027b37:	90                   	nop
c0027b38:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027b3d:	0f 8f e1 00 00 00    	jg     c0027c24 <HalConsoleScroll(int, int)+0x100>
c0027b43:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027b4b:	90                   	nop
c0027b4c:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0027b54:	0f 8f be 00 00 00    	jg     c0027c18 <HalConsoleScroll(int, int)+0xf4>
c0027b5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027b5e:	89 d0                	mov    eax,edx
c0027b60:	c1 e0 02             	shl    eax,0x2
c0027b63:	01 d0                	add    eax,edx
c0027b65:	c1 e0 05             	shl    eax,0x5
c0027b68:	89 c2                	mov    edx,eax
c0027b6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027b6e:	01 d0                	add    eax,edx
c0027b70:	89 c2                	mov    edx,eax
c0027b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b76:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0027b79:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027b7d:	89 d0                	mov    eax,edx
c0027b7f:	c1 e0 02             	shl    eax,0x2
c0027b82:	01 d0                	add    eax,edx
c0027b84:	c1 e0 05             	shl    eax,0x5
c0027b87:	89 c2                	mov    edx,eax
c0027b89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027b8d:	01 d0                	add    eax,edx
c0027b8f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0027b95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027b99:	01 c2                	add    edx,eax
c0027b9b:	8a 01                	mov    al,BYTE PTR [ecx]
c0027b9d:	88 02                	mov    BYTE PTR [edx],al
c0027b9f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0027ba4:	75 66                	jne    c0027c0c <HalConsoleScroll(int, int)+0xe8>
c0027ba6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027baa:	83 e0 01             	and    eax,0x1
c0027bad:	74 39                	je     c0027be8 <HalConsoleScroll(int, int)+0xc4>
c0027baf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027bb3:	83 e0 0f             	and    eax,0xf
c0027bb6:	88 c2                	mov    dl,al
c0027bb8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027bbc:	c1 e0 04             	shl    eax,0x4
c0027bbf:	09 d0                	or     eax,edx
c0027bc1:	88 c1                	mov    cl,al
c0027bc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027bc7:	89 d0                	mov    eax,edx
c0027bc9:	c1 e0 02             	shl    eax,0x2
c0027bcc:	01 d0                	add    eax,edx
c0027bce:	c1 e0 05             	shl    eax,0x5
c0027bd1:	89 c2                	mov    edx,eax
c0027bd3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027bd7:	01 d0                	add    eax,edx
c0027bd9:	89 c2                	mov    edx,eax
c0027bdb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027bdf:	01 d0                	add    eax,edx
c0027be1:	88 ca                	mov    dl,cl
c0027be3:	88 10                	mov    BYTE PTR [eax],dl
c0027be5:	eb 25                	jmp    c0027c0c <HalConsoleScroll(int, int)+0xe8>
c0027be7:	90                   	nop
c0027be8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027bec:	89 d0                	mov    eax,edx
c0027bee:	c1 e0 02             	shl    eax,0x2
c0027bf1:	01 d0                	add    eax,edx
c0027bf3:	c1 e0 05             	shl    eax,0x5
c0027bf6:	89 c2                	mov    edx,eax
c0027bf8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027bfc:	01 d0                	add    eax,edx
c0027bfe:	89 c2                	mov    edx,eax
c0027c00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027c04:	01 d0                	add    eax,edx
c0027c06:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0027c09:	8d 76 00             	lea    esi,[esi+0x0]
c0027c0c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0027c11:	e9 36 ff ff ff       	jmp    c0027b4c <HalConsoleScroll(int, int)+0x28>
c0027c16:	66 90                	xchg   ax,ax
c0027c18:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0027c1d:	e9 16 ff ff ff       	jmp    c0027b38 <HalConsoleScroll(int, int)+0x14>
c0027c22:	66 90                	xchg   ax,ax
c0027c24:	90                   	nop
c0027c25:	83 c4 10             	add    esp,0x10
c0027c28:	c3                   	ret    
c0027c29:	8d 76 00             	lea    esi,[esi+0x0]

c0027c2c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0027c2c:	83 ec 14             	sub    esp,0x14
c0027c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0027c33:	88 04 24             	mov    BYTE PTR [esp],al
c0027c36:	8a 04 24             	mov    al,BYTE PTR [esp]
c0027c39:	0f b6 c0             	movzx  eax,al
c0027c3c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027c40:	89 d1                	mov    ecx,edx
c0027c42:	83 e1 0f             	and    ecx,0xf
c0027c45:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0027c49:	c1 e2 04             	shl    edx,0x4
c0027c4c:	0f b6 d2             	movzx  edx,dl
c0027c4f:	09 ca                	or     edx,ecx
c0027c51:	c1 e2 08             	shl    edx,0x8
c0027c54:	09 d0                	or     eax,edx
c0027c56:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0027c5b:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0027c63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027c67:	89 d0                	mov    eax,edx
c0027c69:	c1 e0 02             	shl    eax,0x2
c0027c6c:	01 d0                	add    eax,edx
c0027c6e:	c1 e0 04             	shl    eax,0x4
c0027c71:	89 c2                	mov    edx,eax
c0027c73:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027c77:	01 d0                	add    eax,edx
c0027c79:	01 c0                	add    eax,eax
c0027c7b:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0027c7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027c83:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0027c88:	66 89 02             	mov    WORD PTR [edx],ax
c0027c8b:	90                   	nop
c0027c8c:	83 c4 14             	add    esp,0x14
c0027c8f:	c3                   	ret    

c0027c90 <HalConsoleCursorUpdate(int, int)>:
c0027c90:	83 ec 20             	sub    esp,0x20
c0027c93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027c97:	89 c2                	mov    edx,eax
c0027c99:	c1 e2 02             	shl    edx,0x2
c0027c9c:	01 d0                	add    eax,edx
c0027c9e:	c1 e0 04             	shl    eax,0x4
c0027ca1:	89 c2                	mov    edx,eax
c0027ca3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0027ca7:	01 d0                	add    eax,edx
c0027ca9:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0027cae:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0027cb5:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0027cba:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0027cbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027cc2:	ee                   	out    dx,al
c0027cc3:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0027cc8:	0f b6 c0             	movzx  eax,al
c0027ccb:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0027cd2:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0027cd6:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0027cda:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027cde:	ee                   	out    dx,al
c0027cdf:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0027ce6:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0027ceb:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0027cef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027cf3:	ee                   	out    dx,al
c0027cf4:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0027cf9:	c1 e8 08             	shr    eax,0x8
c0027cfc:	0f b6 c0             	movzx  eax,al
c0027cff:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0027d06:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0027d0a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0027d0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0027d12:	ee                   	out    dx,al
c0027d13:	90                   	nop
c0027d14:	83 c4 20             	add    esp,0x20
c0027d17:	c3                   	ret    

c0027d18 <FAT::getName()>:
c0027d18:	b8 bc 31 03 c0       	mov    eax,0xc00331bc
c0027d1d:	c3                   	ret    
c0027d1e:	66 90                	xchg   ax,ax

c0027d20 <FAT::tell(void*, unsigned long long*)>:
c0027d20:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027d25:	75 09                	jne    c0027d30 <FAT::tell(void*, unsigned long long*)+0x10>
c0027d27:	b8 04 00 00 00       	mov    eax,0x4
c0027d2c:	c3                   	ret    
c0027d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0027d30:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027d35:	75 09                	jne    c0027d40 <FAT::tell(void*, unsigned long long*)+0x20>
c0027d37:	b8 04 00 00 00       	mov    eax,0x4
c0027d3c:	c3                   	ret    
c0027d3d:	8d 76 00             	lea    esi,[esi+0x0]
c0027d40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d44:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0027d47:	ba 00 00 00 00       	mov    edx,0x0
c0027d4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027d50:	89 01                	mov    DWORD PTR [ecx],eax
c0027d52:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027d55:	b8 00 00 00 00       	mov    eax,0x0
c0027d5a:	c3                   	ret    
c0027d5b:	90                   	nop

c0027d5c <FAT::stat(void*, unsigned long long*)>:
c0027d5c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0027d61:	75 09                	jne    c0027d6c <FAT::stat(void*, unsigned long long*)+0x10>
c0027d63:	b8 04 00 00 00       	mov    eax,0x4
c0027d68:	c3                   	ret    
c0027d69:	8d 76 00             	lea    esi,[esi+0x0]
c0027d6c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027d71:	75 09                	jne    c0027d7c <FAT::stat(void*, unsigned long long*)+0x20>
c0027d73:	b8 04 00 00 00       	mov    eax,0x4
c0027d78:	c3                   	ret    
c0027d79:	8d 76 00             	lea    esi,[esi+0x0]
c0027d7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027d80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0027d83:	ba 00 00 00 00       	mov    edx,0x0
c0027d88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0027d8c:	89 01                	mov    DWORD PTR [ecx],eax
c0027d8e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0027d91:	b8 00 00 00 00       	mov    eax,0x0
c0027d96:	c3                   	ret    
c0027d97:	90                   	nop

c0027d98 <FAT::~FAT()>:
c0027d98:	83 ec 0c             	sub    esp,0xc
c0027d9b:	ba 08 32 03 c0       	mov    edx,0xc0033208
c0027da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027da4:	89 10                	mov    DWORD PTR [eax],edx
c0027da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027daa:	83 ec 0c             	sub    esp,0xc
c0027dad:	50                   	push   eax
c0027dae:	e8 63 22 ff ff       	call   c001a016 <Filesystem::~Filesystem()>
c0027db3:	83 c4 10             	add    esp,0x10
c0027db6:	90                   	nop
c0027db7:	83 c4 0c             	add    esp,0xc
c0027dba:	c3                   	ret    
c0027dbb:	90                   	nop

c0027dbc <FAT::~FAT()>:
c0027dbc:	83 ec 0c             	sub    esp,0xc
c0027dbf:	83 ec 0c             	sub    esp,0xc
c0027dc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dc6:	e8 cd ff ff ff       	call   c0027d98 <FAT::~FAT()>
c0027dcb:	83 c4 10             	add    esp,0x10
c0027dce:	83 ec 08             	sub    esp,0x8
c0027dd1:	6a 08                	push   0x8
c0027dd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027dd7:	e8 84 12 ff ff       	call   c0019060 <operator delete(void*, unsigned long)>
c0027ddc:	83 c4 10             	add    esp,0x10
c0027ddf:	83 c4 0c             	add    esp,0xc
c0027de2:	c3                   	ret    
c0027de3:	90                   	nop

c0027de4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0027de4:	83 ec 1c             	sub    esp,0x1c
c0027de7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0027dee:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0027df3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027df7:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027dfe:	83 f8 ff             	cmp    eax,0xffffffff
c0027e01:	75 35                	jne    c0027e38 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0027e03:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027e07:	88 c2                	mov    dl,al
c0027e09:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027e0e:	01 d0                	add    eax,edx
c0027e10:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027e14:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027e1a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027e1e:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027e25:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027e2a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0027e2e:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027e35:	eb 19                	jmp    c0027e50 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0027e37:	90                   	nop
c0027e38:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027e3c:	88 c2                	mov    dl,al
c0027e3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0027e42:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027e49:	01 d0                	add    eax,edx
c0027e4b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027e4f:	90                   	nop
c0027e50:	83 ec 04             	sub    esp,0x4
c0027e53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027e57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0027e5b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0027e5f:	50                   	push   eax
c0027e60:	e8 62 d2 fd ff       	call   c00050c7 <f_getlabel>
c0027e65:	83 c4 10             	add    esp,0x10
c0027e68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027e6c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0027e71:	75 09                	jne    c0027e7c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0027e73:	b8 00 00 00 00       	mov    eax,0x0
c0027e78:	eb 0a                	jmp    c0027e84 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0027e7a:	66 90                	xchg   ax,ax
c0027e7c:	b8 01 00 00 00       	mov    eax,0x1
c0027e81:	8d 76 00             	lea    esi,[esi+0x0]
c0027e84:	83 c4 1c             	add    esp,0x1c
c0027e87:	c3                   	ret    

c0027e88 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0027e88:	57                   	push   edi
c0027e89:	83 ec 58             	sub    esp,0x58
c0027e8c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0027e94:	8d 54 24 10          	lea    edx,[esp+0x10]
c0027e98:	b8 00 00 00 00       	mov    eax,0x0
c0027e9d:	b9 0f 00 00 00       	mov    ecx,0xf
c0027ea2:	fc                   	cld    
c0027ea3:	89 d7                	mov    edi,edx
c0027ea5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0027ea7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027eab:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027eb2:	83 f8 ff             	cmp    eax,0xffffffff
c0027eb5:	75 35                	jne    c0027eec <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0027eb7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027ebb:	88 c2                	mov    dl,al
c0027ebd:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ec2:	01 d0                	add    eax,edx
c0027ec4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027ec8:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0027ece:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027ed2:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0027ed9:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0027ede:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0027ee2:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0027ee9:	eb 19                	jmp    c0027f04 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0027eeb:	90                   	nop
c0027eec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0027ef0:	88 c2                	mov    dl,al
c0027ef2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0027ef6:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0027efd:	01 d0                	add    eax,edx
c0027eff:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0027f03:	90                   	nop
c0027f04:	83 ec 08             	sub    esp,0x8
c0027f07:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0027f0b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027f0f:	50                   	push   eax
c0027f10:	e8 2b 89 fd ff       	call   c0000840 <strcat>
c0027f15:	83 c4 10             	add    esp,0x10
c0027f18:	83 ec 0c             	sub    esp,0xc
c0027f1b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0027f1f:	50                   	push   eax
c0027f20:	e8 f3 d2 fd ff       	call   c0005218 <f_setlabel>
c0027f25:	83 c4 10             	add    esp,0x10
c0027f28:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0027f2c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0027f31:	75 09                	jne    c0027f3c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0027f33:	b8 00 00 00 00       	mov    eax,0x0
c0027f38:	eb 0a                	jmp    c0027f44 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0027f3a:	66 90                	xchg   ax,ax
c0027f3c:	b8 01 00 00 00       	mov    eax,0x1
c0027f41:	8d 76 00             	lea    esi,[esi+0x0]
c0027f44:	83 c4 58             	add    esp,0x58
c0027f47:	5f                   	pop    edi
c0027f48:	c3                   	ret    
c0027f49:	90                   	nop
c0027f4a:	66 90                	xchg   ax,ax

c0027f4c <FAT::format(LogicalDisk*, int, char const*, int)>:
c0027f4c:	83 ec 2c             	sub    esp,0x2c
c0027f4f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0027f57:	83 ec 08             	sub    esp,0x8
c0027f5a:	68 e0 31 03 c0       	push   0xc00331e0
c0027f5f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027f63:	e8 e8 87 fd ff       	call   c0000750 <strcmp>
c0027f68:	83 c4 10             	add    esp,0x10
c0027f6b:	85 c0                	test   eax,eax
c0027f6d:	0f 94 c0             	sete   al
c0027f70:	0f b6 c0             	movzx  eax,al
c0027f73:	85 c0                	test   eax,eax
c0027f75:	74 0d                	je     c0027f84 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0027f77:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027f7f:	e9 c0 00 00 00       	jmp    c0028044 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027f84:	83 ec 08             	sub    esp,0x8
c0027f87:	68 d2 31 03 c0       	push   0xc00331d2
c0027f8c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027f90:	e8 bb 87 fd ff       	call   c0000750 <strcmp>
c0027f95:	83 c4 10             	add    esp,0x10
c0027f98:	85 c0                	test   eax,eax
c0027f9a:	0f 94 c0             	sete   al
c0027f9d:	0f b6 c0             	movzx  eax,al
c0027fa0:	85 c0                	test   eax,eax
c0027fa2:	74 10                	je     c0027fb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0027fa4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027fac:	e9 93 00 00 00       	jmp    c0028044 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0027fb4:	83 ec 08             	sub    esp,0x8
c0027fb7:	68 d8 31 03 c0       	push   0xc00331d8
c0027fbc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027fc0:	e8 8b 87 fd ff       	call   c0000750 <strcmp>
c0027fc5:	83 c4 10             	add    esp,0x10
c0027fc8:	85 c0                	test   eax,eax
c0027fca:	0f 94 c0             	sete   al
c0027fcd:	0f b6 c0             	movzx  eax,al
c0027fd0:	85 c0                	test   eax,eax
c0027fd2:	74 0c                	je     c0027fe0 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0027fd4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0027fdc:	eb 66                	jmp    c0028044 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0027fde:	66 90                	xchg   ax,ax
c0027fe0:	83 ec 08             	sub    esp,0x8
c0027fe3:	68 7c f3 02 c0       	push   0xc002f37c
c0027fe8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0027fec:	e8 5f 87 fd ff       	call   c0000750 <strcmp>
c0027ff1:	83 c4 10             	add    esp,0x10
c0027ff4:	85 c0                	test   eax,eax
c0027ff6:	0f 94 c0             	sete   al
c0027ff9:	0f b6 c0             	movzx  eax,al
c0027ffc:	85 c0                	test   eax,eax
c0027ffe:	74 0c                	je     c002800c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0028000:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0028008:	eb 3a                	jmp    c0028044 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c002800a:	66 90                	xchg   ax,ax
c002800c:	83 ec 08             	sub    esp,0x8
c002800f:	68 de 31 03 c0       	push   0xc00331de
c0028014:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0028018:	e8 33 87 fd ff       	call   c0000750 <strcmp>
c002801d:	83 c4 10             	add    esp,0x10
c0028020:	85 c0                	test   eax,eax
c0028022:	0f 94 c0             	sete   al
c0028025:	0f b6 c0             	movzx  eax,al
c0028028:	85 c0                	test   eax,eax
c002802a:	74 0c                	je     c0028038 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c002802c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0028034:	eb 0e                	jmp    c0028044 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0028036:	66 90                	xchg   ax,ax
c0028038:	b8 08 00 00 00       	mov    eax,0x8
c002803d:	e9 ea 00 00 00       	jmp    c002812c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028042:	66 90                	xchg   ax,ax
c0028044:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002804b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0028050:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028054:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c002805b:	83 f8 ff             	cmp    eax,0xffffffff
c002805e:	75 34                	jne    c0028094 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0028060:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028064:	88 c2                	mov    dl,al
c0028066:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002806b:	01 d0                	add    eax,edx
c002806d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0028071:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c0028077:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002807b:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c0028082:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028087:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002808b:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c0028092:	eb 18                	jmp    c00280ac <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0028094:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0028098:	88 c2                	mov    dl,al
c002809a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002809e:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c00280a5:	01 d0                	add    eax,edx
c00280a7:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00280ab:	90                   	nop
c00280ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00280b0:	88 04 24             	mov    BYTE PTR [esp],al
c00280b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00280b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00280bb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00280c3:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00280c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00280d0:	83 ec 0c             	sub    esp,0xc
c00280d3:	68 00 20 00 00       	push   0x2000
c00280d8:	e8 21 e2 fe ff       	call   c00162fe <malloc>
c00280dd:	83 c4 10             	add    esp,0x10
c00280e0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00280e4:	68 00 20 00 00       	push   0x2000
c00280e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00280ed:	8d 44 24 08          	lea    eax,[esp+0x8]
c00280f1:	50                   	push   eax
c00280f2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00280f6:	50                   	push   eax
c00280f7:	e8 19 d4 fd ff       	call   c0005515 <f_mkfs>
c00280fc:	83 c4 10             	add    esp,0x10
c00280ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028103:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028108:	75 0a                	jne    c0028114 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c002810a:	b8 00 00 00 00       	mov    eax,0x0
c002810f:	eb 1b                	jmp    c002812c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028111:	8d 76 00             	lea    esi,[esi+0x0]
c0028114:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0028119:	75 09                	jne    c0028124 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c002811b:	b8 09 00 00 00       	mov    eax,0x9
c0028120:	eb 0a                	jmp    c002812c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0028122:	66 90                	xchg   ax,ax
c0028124:	b8 01 00 00 00       	mov    eax,0x1
c0028129:	8d 76 00             	lea    esi,[esi+0x0]
c002812c:	83 c4 2c             	add    esp,0x2c
c002812f:	c3                   	ret    

c0028130 <FAT::tryMount(LogicalDisk*, int)>:
c0028130:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0028136:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c002813b:	83 f8 14             	cmp    eax,0x14
c002813e:	75 18                	jne    c0028158 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0028140:	83 ec 0c             	sub    esp,0xc
c0028143:	68 e4 31 03 c0       	push   0xc00331e4
c0028148:	e8 59 80 ff ff       	call   c00201a6 <KePanic(char const*)>
c002814d:	83 c4 10             	add    esp,0x10
c0028150:	b0 00                	mov    al,0x0
c0028152:	e9 ed 01 00 00       	jmp    c0028344 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028157:	90                   	nop
c0028158:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002815f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028165:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002816b:	3d 00 02 00 00       	cmp    eax,0x200
c0028170:	74 0a                	je     c002817c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0028172:	b0 00                	mov    al,0x0
c0028174:	e9 cb 01 00 00       	jmp    c0028344 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028179:	8d 76 00             	lea    esi,[esi+0x0]
c002817c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0028184:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c002818b:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028192:	83 f8 ff             	cmp    eax,0xffffffff
c0028195:	74 09                	je     c00281a0 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0028197:	b0 01                	mov    al,0x1
c0028199:	e9 a6 01 00 00       	jmp    c0028344 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002819e:	66 90                	xchg   ax,ax
c00281a0:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c00281aa:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c00281b2:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c00281b9:	88 c2                	mov    dl,al
c00281bb:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281c0:	01 d0                	add    eax,edx
c00281c2:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c00281c9:	8b 15 80 02 04 c0    	mov    edx,DWORD PTR ds:0xc0040280
c00281cf:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c00281d6:	89 14 85 a0 02 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfd60],edx
c00281dd:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c00281e2:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00281e9:	89 14 85 20 03 04 c0 	mov    DWORD PTR [eax*4-0x3ffbfce0],edx
c00281f0:	83 ec 0c             	sub    esp,0xc
c00281f3:	68 34 02 00 00       	push   0x234
c00281f8:	e8 01 e1 fe ff       	call   c00162fe <malloc>
c00281fd:	83 c4 10             	add    esp,0x10
c0028200:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0028207:	83 ec 04             	sub    esp,0x4
c002820a:	6a 00                	push   0x0
c002820c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028213:	50                   	push   eax
c0028214:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002821b:	e8 d0 ba fd ff       	call   c0003cf0 <f_mount>
c0028220:	83 c4 10             	add    esp,0x10
c0028223:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c002822a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0028232:	74 1c                	je     c0028250 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0028234:	83 ec 0c             	sub    esp,0xc
c0028237:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c002823e:	e8 db e0 fe ff       	call   c001631e <rfree>
c0028243:	83 c4 10             	add    esp,0x10
c0028246:	b0 00                	mov    al,0x0
c0028248:	e9 f7 00 00 00       	jmp    c0028344 <FAT::tryMount(LogicalDisk*, int)+0x214>
c002824d:	8d 76 00             	lea    esi,[esi+0x0]
c0028250:	83 ec 04             	sub    esp,0x4
c0028253:	68 00 01 00 00       	push   0x100
c0028258:	6a 00                	push   0x0
c002825a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028261:	50                   	push   eax
c0028262:	e8 89 82 fd ff       	call   c00004f0 <memset>
c0028267:	83 c4 10             	add    esp,0x10
c002826a:	83 ec 08             	sub    esp,0x8
c002826d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0028274:	50                   	push   eax
c0028275:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c002827c:	50                   	push   eax
c002827d:	e8 be 85 fd ff       	call   c0000840 <strcat>
c0028282:	83 c4 10             	add    esp,0x10
c0028285:	83 ec 08             	sub    esp,0x8
c0028288:	68 f2 31 03 c0       	push   0xc00331f2
c002828d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0028294:	50                   	push   eax
c0028295:	e8 a6 85 fd ff       	call   c0000840 <strcat>
c002829a:	83 c4 10             	add    esp,0x10
c002829d:	83 ec 04             	sub    esp,0x4
c00282a0:	6a 01                	push   0x1
c00282a2:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c00282a9:	50                   	push   eax
c00282aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00282ae:	50                   	push   eax
c00282af:	e8 9e ba fd ff       	call   c0003d52 <f_open>
c00282b4:	83 c4 10             	add    esp,0x10
c00282b7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00282be:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c00282c5:	85 c0                	test   eax,eax
c00282c7:	74 0b                	je     c00282d4 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c00282c9:	78 31                	js     c00282fc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00282cb:	83 e8 04             	sub    eax,0x4
c00282ce:	83 f8 01             	cmp    eax,0x1
c00282d1:	77 29                	ja     c00282fc <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c00282d3:	90                   	nop
c00282d4:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00282dc:	83 ec 0c             	sub    esp,0xc
c00282df:	8d 44 24 14          	lea    eax,[esp+0x14]
c00282e3:	50                   	push   eax
c00282e4:	e8 38 c2 fd ff       	call   c0004521 <f_close>
c00282e9:	83 c4 10             	add    esp,0x10
c00282ec:	90                   	nop
c00282ed:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00282f5:	85 c0                	test   eax,eax
c00282f7:	74 43                	je     c002833c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00282f9:	eb 31                	jmp    c002832c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00282fb:	90                   	nop
c00282fc:	83 ec 0c             	sub    esp,0xc
c00282ff:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0028306:	e8 13 e0 fe ff       	call   c001631e <rfree>
c002830b:	83 c4 10             	add    esp,0x10
c002830e:	83 ec 04             	sub    esp,0x4
c0028311:	6a 00                	push   0x0
c0028313:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c002831a:	50                   	push   eax
c002831b:	6a 00                	push   0x0
c002831d:	e8 ce b9 fd ff       	call   c0003cf0 <f_mount>
c0028322:	83 c4 10             	add    esp,0x10
c0028325:	b0 00                	mov    al,0x0
c0028327:	eb 1b                	jmp    c0028344 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0028329:	8d 76 00             	lea    esi,[esi+0x0]
c002832c:	a1 80 02 04 c0       	mov    eax,ds:0xc0040280
c0028331:	83 c0 01             	add    eax,0x1
c0028334:	a3 80 02 04 c0       	mov    ds:0xc0040280,eax
c0028339:	8d 76 00             	lea    esi,[esi+0x0]
c002833c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0028343:	90                   	nop
c0028344:	81 c4 4c 03 00 00    	add    esp,0x34c
c002834a:	c3                   	ret    
c002834b:	90                   	nop

c002834c <FAT::allocateSwapfile(char const*, int)>:
c002834c:	55                   	push   ebp
c002834d:	57                   	push   edi
c002834e:	56                   	push   esi
c002834f:	53                   	push   ebx
c0028350:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0028356:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0028361:	83 ec 0c             	sub    esp,0xc
c0028364:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c002836b:	e8 8e df fe ff       	call   c00162fe <malloc>
c0028370:	83 c4 10             	add    esp,0x10
c0028373:	89 c7                	mov    edi,eax
c0028375:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002837a:	83 ec 04             	sub    esp,0x4
c002837d:	50                   	push   eax
c002837e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0028385:	57                   	push   edi
c0028386:	e8 09 20 ff ff       	call   c001a394 <File::File(char const*, Process*)>
c002838b:	83 c4 10             	add    esp,0x10
c002838e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0028395:	83 ec 04             	sub    esp,0x4
c0028398:	8d 44 24 13          	lea    eax,[esp+0x13]
c002839c:	50                   	push   eax
c002839d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00283a1:	50                   	push   eax
c00283a2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00283a9:	e8 06 23 ff ff       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c00283ae:	83 c4 10             	add    esp,0x10
c00283b1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00283b8:	c1 e0 14             	shl    eax,0x14
c00283bb:	89 c7                	mov    edi,eax
c00283bd:	89 c5                	mov    ebp,eax
c00283bf:	c1 fd 1f             	sar    ebp,0x1f
c00283c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283ca:	89 f9                	mov    ecx,edi
c00283cc:	31 c1                	xor    ecx,eax
c00283ce:	89 cb                	mov    ebx,ecx
c00283d0:	89 e9                	mov    ecx,ebp
c00283d2:	31 d1                	xor    ecx,edx
c00283d4:	89 ce                	mov    esi,ecx
c00283d6:	89 f0                	mov    eax,esi
c00283d8:	09 d8                	or     eax,ebx
c00283da:	0f 84 9c 00 00 00    	je     c002847c <FAT::allocateSwapfile(char const*, int)+0x130>
c00283e0:	83 ec 0c             	sub    esp,0xc
c00283e3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00283ea:	e8 91 21 ff ff       	call   c001a580 <File::unlink()>
c00283ef:	83 c4 10             	add    esp,0x10
c00283f2:	83 ec 08             	sub    esp,0x8
c00283f5:	6a 12                	push   0x12
c00283f7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00283fe:	e8 af 1f ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c0028403:	83 c4 10             	add    esp,0x10
c0028406:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c002840d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0028413:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c002841a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0028421:	c1 e0 14             	shl    eax,0x14
c0028424:	83 ec 04             	sub    esp,0x4
c0028427:	6a 01                	push   0x1
c0028429:	50                   	push   eax
c002842a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0028431:	e8 72 cf fd ff       	call   c00053a8 <f_expand>
c0028436:	83 c4 10             	add    esp,0x10
c0028439:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028440:	8b 00                	mov    eax,DWORD PTR [eax]
c0028442:	83 c0 10             	add    eax,0x10
c0028445:	8b 00                	mov    eax,DWORD PTR [eax]
c0028447:	83 ec 0c             	sub    esp,0xc
c002844a:	8d 54 24 24          	lea    edx,[esp+0x24]
c002844e:	52                   	push   edx
c002844f:	8d 54 24 30          	lea    edx,[esp+0x30]
c0028453:	52                   	push   edx
c0028454:	6a 00                	push   0x0
c0028456:	68 00 04 00 00       	push   0x400
c002845b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0028462:	ff d0                	call   eax
c0028464:	83 c4 20             	add    esp,0x20
c0028467:	83 ec 0c             	sub    esp,0xc
c002846a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028471:	e8 9a 1f ff ff       	call   c001a410 <File::close()>
c0028476:	83 c4 10             	add    esp,0x10
c0028479:	8d 76 00             	lea    esi,[esi+0x0]
c002847c:	83 ec 08             	sub    esp,0x8
c002847f:	6a 01                	push   0x1
c0028481:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0028488:	e8 25 1f ff ff       	call   c001a3b2 <File::open(FileOpenMode)>
c002848d:	83 c4 10             	add    esp,0x10
c0028490:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0028497:	8b 00                	mov    eax,DWORD PTR [eax]
c0028499:	83 c0 0c             	add    eax,0xc
c002849c:	8b 00                	mov    eax,DWORD PTR [eax]
c002849e:	83 ec 0c             	sub    esp,0xc
c00284a1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00284a5:	52                   	push   edx
c00284a6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00284aa:	52                   	push   edx
c00284ab:	6a 00                	push   0x0
c00284ad:	6a 04                	push   0x4
c00284af:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00284b6:	ff d0                	call   eax
c00284b8:	83 c4 20             	add    esp,0x20
c00284bb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00284c2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00284c8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00284cf:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00284d6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00284d9:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00284e0:	83 ec 0c             	sub    esp,0xc
c00284e3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00284ea:	e8 21 1f ff ff       	call   c001a410 <File::close()>
c00284ef:	83 c4 10             	add    esp,0x10
c00284f2:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00284f9:	ba 00 00 00 00       	mov    edx,0x0
c00284fe:	81 c4 3c 04 00 00    	add    esp,0x43c
c0028504:	5b                   	pop    ebx
c0028505:	5e                   	pop    esi
c0028506:	5f                   	pop    edi
c0028507:	5d                   	pop    ebp
c0028508:	c3                   	ret    
c0028509:	90                   	nop
c002850a:	66 90                	xchg   ax,ax

c002850c <FAT::readDir(void*, unsigned long, void*, int*)>:
c002850c:	57                   	push   edi
c002850d:	56                   	push   esi
c002850e:	53                   	push   ebx
c002850f:	81 ec 50 02 00 00    	sub    esp,0x250
c0028515:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c002851d:	74 0d                	je     c002852c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c002851f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0028527:	75 0f                	jne    c0028538 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0028529:	8d 76 00             	lea    esi,[esi+0x0]
c002852c:	b8 04 00 00 00       	mov    eax,0x4
c0028531:	e9 3a 01 00 00       	jmp    c0028670 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028536:	66 90                	xchg   ax,ax
c0028538:	83 ec 08             	sub    esp,0x8
c002853b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0028542:	50                   	push   eax
c0028543:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002854a:	e8 9f c2 fd ff       	call   c00047ee <f_readdir>
c002854f:	83 c4 10             	add    esp,0x10
c0028552:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0028559:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0028560:	83 ec 0c             	sub    esp,0xc
c0028563:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002856a:	83 c0 16             	add    eax,0x16
c002856d:	50                   	push   eax
c002856e:	e8 fd 7f fd ff       	call   c0000570 <strlen>
c0028573:	83 c4 10             	add    esp,0x10
c0028576:	ba 00 00 00 00       	mov    edx,0x0
c002857b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002857f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0028583:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c002858a:	0f b6 c0             	movzx  eax,al
c002858d:	83 e0 10             	and    eax,0x10
c0028590:	74 0a                	je     c002859c <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0028592:	b8 02 00 00 00       	mov    eax,0x2
c0028597:	eb 0b                	jmp    c00285a4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0028599:	8d 76 00             	lea    esi,[esi+0x0]
c002859c:	b8 01 00 00 00       	mov    eax,0x1
c00285a1:	8d 76 00             	lea    esi,[esi+0x0]
c00285a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00285a8:	83 ec 08             	sub    esp,0x8
c00285ab:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00285b2:	83 c0 16             	add    eax,0x16
c00285b5:	50                   	push   eax
c00285b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00285ba:	83 c0 10             	add    eax,0x10
c00285bd:	50                   	push   eax
c00285be:	e8 7d 80 fd ff       	call   c0000640 <strcpy>
c00285c3:	83 c4 10             	add    esp,0x10
c00285c6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00285cd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00285d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00285d8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00285df:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00285e6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00285ed:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00285f4:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00285fb:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0028602:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0028609:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0028610:	89 c6                	mov    esi,eax
c0028612:	89 d7                	mov    edi,edx
c0028614:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0028616:	89 c8                	mov    eax,ecx
c0028618:	89 fa                	mov    edx,edi
c002861a:	89 f3                	mov    ebx,esi
c002861c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0028623:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c002862a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0028631:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0028638:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002863e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0028645:	0f be c0             	movsx  eax,al
c0028648:	85 c0                	test   eax,eax
c002864a:	75 08                	jne    c0028654 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c002864c:	b8 07 00 00 00       	mov    eax,0x7
c0028651:	eb 1d                	jmp    c0028670 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028653:	90                   	nop
c0028654:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c002865b:	85 c0                	test   eax,eax
c002865d:	75 09                	jne    c0028668 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c002865f:	b8 00 00 00 00       	mov    eax,0x0
c0028664:	eb 0a                	jmp    c0028670 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0028666:	66 90                	xchg   ax,ax
c0028668:	b8 01 00 00 00       	mov    eax,0x1
c002866d:	8d 76 00             	lea    esi,[esi+0x0]
c0028670:	81 c4 50 02 00 00    	add    esp,0x250
c0028676:	5b                   	pop    ebx
c0028677:	5e                   	pop    esi
c0028678:	5f                   	pop    edi
c0028679:	c3                   	ret    
c002867a:	66 90                	xchg   ax,ax

c002867c <FAT::read(void*, unsigned long, void*, int*)>:
c002867c:	83 ec 1c             	sub    esp,0x1c
c002867f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028684:	74 0a                	je     c0028690 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0028686:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c002868b:	75 0b                	jne    c0028698 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c002868d:	8d 76 00             	lea    esi,[esi+0x0]
c0028690:	b8 04 00 00 00       	mov    eax,0x4
c0028695:	eb 41                	jmp    c00286d8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0028697:	90                   	nop
c0028698:	8d 44 24 08          	lea    eax,[esp+0x8]
c002869c:	50                   	push   eax
c002869d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00286a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00286a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00286a9:	e8 67 b9 fd ff       	call   c0004015 <f_read>
c00286ae:	83 c4 10             	add    esp,0x10
c00286b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00286b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00286b9:	89 c2                	mov    edx,eax
c00286bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00286bf:	89 10                	mov    DWORD PTR [eax],edx
c00286c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00286c5:	85 c0                	test   eax,eax
c00286c7:	75 07                	jne    c00286d0 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00286c9:	b8 00 00 00 00       	mov    eax,0x0
c00286ce:	eb 08                	jmp    c00286d8 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00286d0:	b8 01 00 00 00       	mov    eax,0x1
c00286d5:	8d 76 00             	lea    esi,[esi+0x0]
c00286d8:	83 c4 1c             	add    esp,0x1c
c00286db:	c3                   	ret    

c00286dc <FAT::write(void*, unsigned long, void*, int*)>:
c00286dc:	83 ec 1c             	sub    esp,0x1c
c00286df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00286e4:	74 0a                	je     c00286f0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00286e6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00286eb:	75 0b                	jne    c00286f8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00286ed:	8d 76 00             	lea    esi,[esi+0x0]
c00286f0:	b8 04 00 00 00       	mov    eax,0x4
c00286f5:	eb 41                	jmp    c0028738 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00286f7:	90                   	nop
c00286f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00286fc:	50                   	push   eax
c00286fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0028701:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0028705:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028709:	e8 06 bb fd ff       	call   c0004214 <f_write>
c002870e:	83 c4 10             	add    esp,0x10
c0028711:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028719:	89 c2                	mov    edx,eax
c002871b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002871f:	89 10                	mov    DWORD PTR [eax],edx
c0028721:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028725:	85 c0                	test   eax,eax
c0028727:	75 07                	jne    c0028730 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0028729:	b8 00 00 00 00       	mov    eax,0x0
c002872e:	eb 08                	jmp    c0028738 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0028730:	b8 01 00 00 00       	mov    eax,0x1
c0028735:	8d 76 00             	lea    esi,[esi+0x0]
c0028738:	83 c4 1c             	add    esp,0x1c
c002873b:	c3                   	ret    

c002873c <FAT::close(void*)>:
c002873c:	83 ec 1c             	sub    esp,0x1c
c002873f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028744:	75 0a                	jne    c0028750 <FAT::close(void*)+0x14>
c0028746:	b8 04 00 00 00       	mov    eax,0x4
c002874b:	eb 3f                	jmp    c002878c <FAT::close(void*)+0x50>
c002874d:	8d 76 00             	lea    esi,[esi+0x0]
c0028750:	83 ec 0c             	sub    esp,0xc
c0028753:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028757:	e8 c5 bd fd ff       	call   c0004521 <f_close>
c002875c:	83 c4 10             	add    esp,0x10
c002875f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028763:	83 ec 0c             	sub    esp,0xc
c0028766:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002876a:	e8 9f db fe ff       	call   c001630e <free>
c002876f:	83 c4 10             	add    esp,0x10
c0028772:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028776:	85 c0                	test   eax,eax
c0028778:	75 0a                	jne    c0028784 <FAT::close(void*)+0x48>
c002877a:	b8 00 00 00 00       	mov    eax,0x0
c002877f:	eb 0b                	jmp    c002878c <FAT::close(void*)+0x50>
c0028781:	8d 76 00             	lea    esi,[esi+0x0]
c0028784:	b8 01 00 00 00       	mov    eax,0x1
c0028789:	8d 76 00             	lea    esi,[esi+0x0]
c002878c:	83 c4 1c             	add    esp,0x1c
c002878f:	c3                   	ret    

c0028790 <FAT::closeDir(void*)>:
c0028790:	83 ec 1c             	sub    esp,0x1c
c0028793:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0028798:	75 0a                	jne    c00287a4 <FAT::closeDir(void*)+0x14>
c002879a:	b8 04 00 00 00       	mov    eax,0x4
c002879f:	eb 3f                	jmp    c00287e0 <FAT::closeDir(void*)+0x50>
c00287a1:	8d 76 00             	lea    esi,[esi+0x0]
c00287a4:	83 ec 0c             	sub    esp,0xc
c00287a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00287ab:	e8 1c c0 fd ff       	call   c00047cc <f_closedir>
c00287b0:	83 c4 10             	add    esp,0x10
c00287b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00287b7:	83 ec 0c             	sub    esp,0xc
c00287ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00287be:	e8 4b db fe ff       	call   c001630e <free>
c00287c3:	83 c4 10             	add    esp,0x10
c00287c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00287ca:	85 c0                	test   eax,eax
c00287cc:	75 0a                	jne    c00287d8 <FAT::closeDir(void*)+0x48>
c00287ce:	b8 00 00 00 00       	mov    eax,0x0
c00287d3:	eb 0b                	jmp    c00287e0 <FAT::closeDir(void*)+0x50>
c00287d5:	8d 76 00             	lea    esi,[esi+0x0]
c00287d8:	b8 01 00 00 00       	mov    eax,0x1
c00287dd:	8d 76 00             	lea    esi,[esi+0x0]
c00287e0:	83 c4 1c             	add    esp,0x1c
c00287e3:	c3                   	ret    

c00287e4 <FAT::truncate(void*, unsigned long long)>:
c00287e4:	83 ec 2c             	sub    esp,0x2c
c00287e7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00287eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00287ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00287f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00287f7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00287fc:	75 0a                	jne    c0028808 <FAT::truncate(void*, unsigned long long)+0x24>
c00287fe:	b8 04 00 00 00       	mov    eax,0x4
c0028803:	eb 47                	jmp    c002884c <FAT::truncate(void*, unsigned long long)+0x68>
c0028805:	8d 76 00             	lea    esi,[esi+0x0]
c0028808:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002880c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002880f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0028813:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002881b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002881f:	83 ec 08             	sub    esp,0x8
c0028822:	50                   	push   eax
c0028823:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028827:	e8 24 bd fd ff       	call   c0004550 <f_lseek>
c002882c:	83 c4 10             	add    esp,0x10
c002882f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028833:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028837:	85 c0                	test   eax,eax
c0028839:	75 09                	jne    c0028844 <FAT::truncate(void*, unsigned long long)+0x60>
c002883b:	b8 00 00 00 00       	mov    eax,0x0
c0028840:	eb 0a                	jmp    c002884c <FAT::truncate(void*, unsigned long long)+0x68>
c0028842:	66 90                	xchg   ax,ax
c0028844:	b8 01 00 00 00       	mov    eax,0x1
c0028849:	8d 76 00             	lea    esi,[esi+0x0]
c002884c:	83 c4 2c             	add    esp,0x2c
c002884f:	c3                   	ret    

c0028850 <FAT::seek(void*, unsigned long long)>:
c0028850:	83 ec 2c             	sub    esp,0x2c
c0028853:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028857:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002885b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002885f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0028863:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0028868:	75 0a                	jne    c0028874 <FAT::seek(void*, unsigned long long)+0x24>
c002886a:	b8 04 00 00 00       	mov    eax,0x4
c002886f:	eb 33                	jmp    c00288a4 <FAT::seek(void*, unsigned long long)+0x54>
c0028871:	8d 76 00             	lea    esi,[esi+0x0]
c0028874:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028878:	83 ec 08             	sub    esp,0x8
c002887b:	50                   	push   eax
c002887c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0028880:	e8 cb bc fd ff       	call   c0004550 <f_lseek>
c0028885:	83 c4 10             	add    esp,0x10
c0028888:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002888c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0028890:	85 c0                	test   eax,eax
c0028892:	75 08                	jne    c002889c <FAT::seek(void*, unsigned long long)+0x4c>
c0028894:	b8 00 00 00 00       	mov    eax,0x0
c0028899:	eb 09                	jmp    c00288a4 <FAT::seek(void*, unsigned long long)+0x54>
c002889b:	90                   	nop
c002889c:	b8 01 00 00 00       	mov    eax,0x1
c00288a1:	8d 76 00             	lea    esi,[esi+0x0]
c00288a4:	83 c4 2c             	add    esp,0x2c
c00288a7:	c3                   	ret    

c00288a8 <fatWrapperReadDisk>:
c00288a8:	53                   	push   ebx
c00288a9:	83 ec 18             	sub    esp,0x18
c00288ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00288b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00288b9:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c00288c0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00288c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00288c8:	ba 00 00 00 00       	mov    edx,0x0
c00288cd:	83 ec 0c             	sub    esp,0xc
c00288d0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00288d4:	53                   	push   ebx
c00288d5:	52                   	push   edx
c00288d6:	50                   	push   eax
c00288d7:	51                   	push   ecx
c00288d8:	e8 23 3d ff ff       	call   c001c600 <LogicalDisk::read(unsigned long long, int, void*)>
c00288dd:	83 c4 20             	add    esp,0x20
c00288e0:	83 c4 18             	add    esp,0x18
c00288e3:	5b                   	pop    ebx
c00288e4:	c3                   	ret    
c00288e5:	8d 76 00             	lea    esi,[esi+0x0]

c00288e8 <fatWrapperWriteDisk>:
c00288e8:	53                   	push   ebx
c00288e9:	83 ec 18             	sub    esp,0x18
c00288ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00288f0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00288f4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00288f9:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0028900:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0028904:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0028908:	ba 00 00 00 00       	mov    edx,0x0
c002890d:	83 ec 0c             	sub    esp,0xc
c0028910:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0028914:	53                   	push   ebx
c0028915:	52                   	push   edx
c0028916:	50                   	push   eax
c0028917:	51                   	push   ecx
c0028918:	e8 4f 3d ff ff       	call   c001c66c <LogicalDisk::write(unsigned long long, int, void*)>
c002891d:	83 c4 20             	add    esp,0x20
c0028920:	83 c4 18             	add    esp,0x18
c0028923:	5b                   	pop    ebx
c0028924:	c3                   	ret    
c0028925:	8d 76 00             	lea    esi,[esi+0x0]

c0028928 <fatWrapperIoctl>:
c0028928:	53                   	push   ebx
c0028929:	83 ec 28             	sub    esp,0x28
c002892c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0028930:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0028934:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028938:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002893c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028941:	83 f8 02             	cmp    eax,0x2
c0028944:	75 32                	jne    c0028978 <fatWrapperIoctl+0x50>
c0028946:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002894a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002894e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028953:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c002895a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0028960:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0028966:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002896a:	66 89 02             	mov    WORD PTR [edx],ax
c002896d:	b8 00 00 00 00       	mov    eax,0x0
c0028972:	e9 c5 00 00 00       	jmp    c0028a3c <fatWrapperIoctl+0x114>
c0028977:	90                   	nop
c0028978:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002897d:	83 f8 01             	cmp    eax,0x1
c0028980:	75 6a                	jne    c00289ec <fatWrapperIoctl+0xc4>
c0028982:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028986:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002898a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002898f:	8b 04 85 80 f3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0c80]
c0028996:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002899c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00289a2:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00289a8:	89 c8                	mov    eax,ecx
c00289aa:	89 da                	mov    edx,ebx
c00289ac:	0f a4 c2 0a          	shld   edx,eax,0xa
c00289b0:	c1 e0 0a             	shl    eax,0xa
c00289b3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00289b8:	8b 0c 8d 80 f3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc0c80]
c00289bf:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00289c5:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00289cb:	89 cb                	mov    ebx,ecx
c00289cd:	c1 fb 1f             	sar    ebx,0x1f
c00289d0:	53                   	push   ebx
c00289d1:	51                   	push   ecx
c00289d2:	52                   	push   edx
c00289d3:	50                   	push   eax
c00289d4:	e8 a7 5b 00 00       	call   c002e580 <__udivdi3>
c00289d9:	83 c4 10             	add    esp,0x10
c00289dc:	89 c2                	mov    edx,eax
c00289de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00289e2:	89 10                	mov    DWORD PTR [eax],edx
c00289e4:	b8 00 00 00 00       	mov    eax,0x0
c00289e9:	eb 51                	jmp    c0028a3c <fatWrapperIoctl+0x114>
c00289eb:	90                   	nop
c00289ec:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00289f1:	85 c0                	test   eax,eax
c00289f3:	75 07                	jne    c00289fc <fatWrapperIoctl+0xd4>
c00289f5:	b8 00 00 00 00       	mov    eax,0x0
c00289fa:	eb 40                	jmp    c0028a3c <fatWrapperIoctl+0x114>
c00289fc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a01:	83 f8 03             	cmp    eax,0x3
c0028a04:	75 1a                	jne    c0028a20 <fatWrapperIoctl+0xf8>
c0028a06:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0028a0a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0028a0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028a12:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0028a18:	b8 00 00 00 00       	mov    eax,0x0
c0028a1d:	eb 1d                	jmp    c0028a3c <fatWrapperIoctl+0x114>
c0028a1f:	90                   	nop
c0028a20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028a25:	83 f8 04             	cmp    eax,0x4
c0028a28:	75 0a                	jne    c0028a34 <fatWrapperIoctl+0x10c>
c0028a2a:	b8 00 00 00 00       	mov    eax,0x0
c0028a2f:	eb 0b                	jmp    c0028a3c <fatWrapperIoctl+0x114>
c0028a31:	8d 76 00             	lea    esi,[esi+0x0]
c0028a34:	b8 04 00 00 00       	mov    eax,0x4
c0028a39:	8d 76 00             	lea    esi,[esi+0x0]
c0028a3c:	83 c4 28             	add    esp,0x28
c0028a3f:	5b                   	pop    ebx
c0028a40:	c3                   	ret    
c0028a41:	90                   	nop
c0028a42:	66 90                	xchg   ax,ax

c0028a44 <FAT::FAT()>:
c0028a44:	83 ec 1c             	sub    esp,0x1c
c0028a47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a4b:	83 ec 0c             	sub    esp,0xc
c0028a4e:	50                   	push   eax
c0028a4f:	e8 9e 15 ff ff       	call   c0019ff2 <Filesystem::Filesystem()>
c0028a54:	83 c4 10             	add    esp,0x10
c0028a57:	ba 08 32 03 c0       	mov    edx,0xc0033208
c0028a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0028a60:	89 10                	mov    DWORD PTR [eax],edx
c0028a62:	c7 05 80 02 04 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0040280,0x0
c0028a6c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0028a74:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0028a79:	7f 19                	jg     c0028a94 <FAT::FAT()+0x50>
c0028a7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0028a7f:	c7 04 85 a0 02 04 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffbfd60],0xffffffff
c0028a8a:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0028a8f:	eb e3                	jmp    c0028a74 <FAT::FAT()+0x30>
c0028a91:	8d 76 00             	lea    esi,[esi+0x0]
c0028a94:	90                   	nop
c0028a95:	83 c4 1c             	add    esp,0x1c
c0028a98:	c3                   	ret    
c0028a99:	90                   	nop
c0028a9a:	66 90                	xchg   ax,ax

c0028a9c <FAT::fixFilepath(char*)>:
c0028a9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028aa0:	8a 00                	mov    al,BYTE PTR [eax]
c0028aa2:	0f be c0             	movsx  eax,al
c0028aa5:	83 f8 40             	cmp    eax,0x40
c0028aa8:	7e 2e                	jle    c0028ad8 <FAT::fixFilepath(char*)+0x3c>
c0028aaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028aae:	8a 00                	mov    al,BYTE PTR [eax]
c0028ab0:	83 e8 41             	sub    eax,0x41
c0028ab3:	88 c2                	mov    dl,al
c0028ab5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ab9:	88 10                	mov    BYTE PTR [eax],dl
c0028abb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028abf:	8a 00                	mov    al,BYTE PTR [eax]
c0028ac1:	0f be c0             	movsx  eax,al
c0028ac4:	8b 04 85 a0 02 04 c0 	mov    eax,DWORD PTR [eax*4-0x3ffbfd60]
c0028acb:	83 c0 30             	add    eax,0x30
c0028ace:	88 c2                	mov    dl,al
c0028ad0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028ad4:	88 10                	mov    BYTE PTR [eax],dl
c0028ad6:	66 90                	xchg   ax,ax
c0028ad8:	90                   	nop
c0028ad9:	c3                   	ret    
c0028ada:	66 90                	xchg   ax,ax

c0028adc <FAT::open(char const*, void**, FileOpenMode)>:
c0028adc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028ae2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028aea:	74 0c                	je     c0028af8 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0028aec:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028af4:	75 0e                	jne    c0028b04 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0028af6:	66 90                	xchg   ax,ax
c0028af8:	b8 04 00 00 00       	mov    eax,0x4
c0028afd:	e9 46 01 00 00       	jmp    c0028c48 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028b02:	66 90                	xchg   ax,ax
c0028b04:	83 ec 08             	sub    esp,0x8
c0028b07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028b12:	50                   	push   eax
c0028b13:	e8 28 7b fd ff       	call   c0000640 <strcpy>
c0028b18:	83 c4 10             	add    esp,0x10
c0028b1b:	83 ec 08             	sub    esp,0x8
c0028b1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0028b22:	50                   	push   eax
c0028b23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028b2a:	e8 6d ff ff ff       	call   c0028a9c <FAT::fixFilepath(char*)>
c0028b2f:	83 c4 10             	add    esp,0x10
c0028b32:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0028b3a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b41:	83 e0 01             	and    eax,0x1
c0028b44:	74 12                	je     c0028b58 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0028b46:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b4d:	83 c8 01             	or     eax,0x1
c0028b50:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028b57:	90                   	nop
c0028b58:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b5f:	83 e0 04             	and    eax,0x4
c0028b62:	74 24                	je     c0028b88 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0028b64:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b6b:	83 c8 30             	or     eax,0x30
c0028b6e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028b75:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b7c:	83 c8 02             	or     eax,0x2
c0028b7f:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028b86:	66 90                	xchg   ax,ax
c0028b88:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028b8f:	83 e0 02             	and    eax,0x2
c0028b92:	74 14                	je     c0028ba8 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0028b94:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028b9b:	83 c8 02             	or     eax,0x2
c0028b9e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0028ba8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028baf:	83 e0 08             	and    eax,0x8
c0028bb2:	74 14                	je     c0028bc8 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0028bb4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028bbb:	83 c8 04             	or     eax,0x4
c0028bbe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0028bc8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0028bcf:	83 e0 10             	and    eax,0x10
c0028bd2:	74 14                	je     c0028be8 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0028bd4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0028bdb:	83 c8 08             	or     eax,0x8
c0028bde:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0028be5:	8d 76 00             	lea    esi,[esi+0x0]
c0028be8:	83 ec 0c             	sub    esp,0xc
c0028beb:	68 28 02 00 00       	push   0x228
c0028bf0:	e8 09 d7 fe ff       	call   c00162fe <malloc>
c0028bf5:	83 c4 10             	add    esp,0x10
c0028bf8:	89 c2                	mov    edx,eax
c0028bfa:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028c01:	89 10                	mov    DWORD PTR [eax],edx
c0028c03:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0028c0b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c14:	83 ec 04             	sub    esp,0x4
c0028c17:	52                   	push   edx
c0028c18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0028c1c:	52                   	push   edx
c0028c1d:	50                   	push   eax
c0028c1e:	e8 2f b1 fd ff       	call   c0003d52 <f_open>
c0028c23:	83 c4 10             	add    esp,0x10
c0028c26:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0028c2d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0028c35:	74 09                	je     c0028c40 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0028c37:	b8 01 00 00 00       	mov    eax,0x1
c0028c3c:	eb 0a                	jmp    c0028c48 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0028c3e:	66 90                	xchg   ax,ax
c0028c40:	b8 00 00 00 00       	mov    eax,0x0
c0028c45:	8d 76 00             	lea    esi,[esi+0x0]
c0028c48:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028c4e:	c3                   	ret    
c0028c4f:	90                   	nop

c0028c50 <FAT::openDir(char const*, void**)>:
c0028c50:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028c56:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028c5e:	74 0c                	je     c0028c6c <FAT::openDir(char const*, void**)+0x1c>
c0028c60:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0028c68:	75 0e                	jne    c0028c78 <FAT::openDir(char const*, void**)+0x28>
c0028c6a:	66 90                	xchg   ax,ax
c0028c6c:	b8 04 00 00 00       	mov    eax,0x4
c0028c71:	e9 82 00 00 00       	jmp    c0028cf8 <FAT::openDir(char const*, void**)+0xa8>
c0028c76:	66 90                	xchg   ax,ax
c0028c78:	83 ec 08             	sub    esp,0x8
c0028c7b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c82:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028c86:	50                   	push   eax
c0028c87:	e8 b4 79 fd ff       	call   c0000640 <strcpy>
c0028c8c:	83 c4 10             	add    esp,0x10
c0028c8f:	83 ec 08             	sub    esp,0x8
c0028c92:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028c96:	50                   	push   eax
c0028c97:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028c9e:	e8 f9 fd ff ff       	call   c0028a9c <FAT::fixFilepath(char*)>
c0028ca3:	83 c4 10             	add    esp,0x10
c0028ca6:	83 ec 0c             	sub    esp,0xc
c0028ca9:	6a 30                	push   0x30
c0028cab:	e8 4e d6 fe ff       	call   c00162fe <malloc>
c0028cb0:	83 c4 10             	add    esp,0x10
c0028cb3:	89 c2                	mov    edx,eax
c0028cb5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028cbc:	89 10                	mov    DWORD PTR [eax],edx
c0028cbe:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0028cc5:	8b 00                	mov    eax,DWORD PTR [eax]
c0028cc7:	83 ec 08             	sub    esp,0x8
c0028cca:	8d 54 24 14          	lea    edx,[esp+0x14]
c0028cce:	52                   	push   edx
c0028ccf:	50                   	push   eax
c0028cd0:	e8 2c ba fd ff       	call   c0004701 <f_opendir>
c0028cd5:	83 c4 10             	add    esp,0x10
c0028cd8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028cdf:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0028ce7:	74 07                	je     c0028cf0 <FAT::openDir(char const*, void**)+0xa0>
c0028ce9:	b8 01 00 00 00       	mov    eax,0x1
c0028cee:	eb 08                	jmp    c0028cf8 <FAT::openDir(char const*, void**)+0xa8>
c0028cf0:	b8 00 00 00 00       	mov    eax,0x0
c0028cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0028cf8:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028cfe:	c3                   	ret    
c0028cff:	90                   	nop

c0028d00 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0028d00:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0028d06:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0028d0e:	75 0c                	jne    c0028d1c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0028d10:	b8 04 00 00 00       	mov    eax,0x4
c0028d15:	e9 d6 00 00 00       	jmp    c0028df0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d1a:	66 90                	xchg   ax,ax
c0028d1c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0028d24:	75 0a                	jne    c0028d30 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0028d26:	b8 04 00 00 00       	mov    eax,0x4
c0028d2b:	e9 c0 00 00 00       	jmp    c0028df0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d30:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0028d38:	75 0a                	jne    c0028d44 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0028d3a:	b8 04 00 00 00       	mov    eax,0x4
c0028d3f:	e9 ac 00 00 00       	jmp    c0028df0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028d44:	83 ec 08             	sub    esp,0x8
c0028d47:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028d4e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028d55:	50                   	push   eax
c0028d56:	e8 e5 78 fd ff       	call   c0000640 <strcpy>
c0028d5b:	83 c4 10             	add    esp,0x10
c0028d5e:	83 ec 08             	sub    esp,0x8
c0028d61:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0028d68:	50                   	push   eax
c0028d69:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0028d70:	e8 27 fd ff ff       	call   c0028a9c <FAT::fixFilepath(char*)>
c0028d75:	83 c4 10             	add    esp,0x10
c0028d78:	83 ec 08             	sub    esp,0x8
c0028d7b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0028d7f:	50                   	push   eax
c0028d80:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0028d87:	50                   	push   eax
c0028d88:	e8 f3 ba fd ff       	call   c0004880 <f_stat>
c0028d8d:	83 c4 10             	add    esp,0x10
c0028d90:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0028d97:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0028d9e:	85 c0                	test   eax,eax
c0028da0:	74 0a                	je     c0028dac <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0028da2:	83 f8 04             	cmp    eax,0x4
c0028da5:	74 39                	je     c0028de0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0028da7:	eb 3f                	jmp    c0028de8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0028da9:	8d 76 00             	lea    esi,[esi+0x0]
c0028dac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0028db0:	0f b6 c0             	movzx  eax,al
c0028db3:	83 e0 10             	and    eax,0x10
c0028db6:	0f 95 c2             	setne  dl
c0028db9:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0028dc0:	88 10                	mov    BYTE PTR [eax],dl
c0028dc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dc6:	ba 00 00 00 00       	mov    edx,0x0
c0028dcb:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0028dd2:	89 01                	mov    DWORD PTR [ecx],eax
c0028dd4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0028dd7:	b8 00 00 00 00       	mov    eax,0x0
c0028ddc:	eb 12                	jmp    c0028df0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028dde:	66 90                	xchg   ax,ax
c0028de0:	b8 02 00 00 00       	mov    eax,0x2
c0028de5:	eb 09                	jmp    c0028df0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0028de7:	90                   	nop
c0028de8:	b8 01 00 00 00       	mov    eax,0x1
c0028ded:	8d 76 00             	lea    esi,[esi+0x0]
c0028df0:	81 c4 2c 02 00 00    	add    esp,0x22c
c0028df6:	c3                   	ret    
c0028df7:	90                   	nop

c0028df8 <FAT::unlink(char const*)>:
c0028df8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0028dfe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0028e06:	75 08                	jne    c0028e10 <FAT::unlink(char const*)+0x18>
c0028e08:	b8 04 00 00 00       	mov    eax,0x4
c0028e0d:	eb 61                	jmp    c0028e70 <FAT::unlink(char const*)+0x78>
c0028e0f:	90                   	nop
c0028e10:	83 ec 08             	sub    esp,0x8
c0028e13:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e1a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028e1e:	50                   	push   eax
c0028e1f:	e8 1c 78 fd ff       	call   c0000640 <strcpy>
c0028e24:	83 c4 10             	add    esp,0x10
c0028e27:	83 ec 08             	sub    esp,0x8
c0028e2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0028e2e:	50                   	push   eax
c0028e2f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0028e36:	e8 61 fc ff ff       	call   c0028a9c <FAT::fixFilepath(char*)>
c0028e3b:	83 c4 10             	add    esp,0x10
c0028e3e:	83 ec 0c             	sub    esp,0xc
c0028e41:	8d 44 24 18          	lea    eax,[esp+0x18]
c0028e45:	50                   	push   eax
c0028e46:	e8 a7 bc fd ff       	call   c0004af2 <f_unlink>
c0028e4b:	83 c4 10             	add    esp,0x10
c0028e4e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0028e55:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0028e5c:	85 c0                	test   eax,eax
c0028e5e:	75 08                	jne    c0028e68 <FAT::unlink(char const*)+0x70>
c0028e60:	b8 00 00 00 00       	mov    eax,0x0
c0028e65:	eb 09                	jmp    c0028e70 <FAT::unlink(char const*)+0x78>
c0028e67:	90                   	nop
c0028e68:	b8 01 00 00 00       	mov    eax,0x1
c0028e6d:	8d 76 00             	lea    esi,[esi+0x0]
c0028e70:	81 c4 1c 01 00 00    	add    esp,0x11c
c0028e76:	c3                   	ret    
c0028e77:	90                   	nop

c0028e78 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0028e78:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0028e7e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0028e85:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0028e8c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0028e90:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0028e94:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0028e9c:	75 0a                	jne    c0028ea8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0028e9e:	b8 04 00 00 00       	mov    eax,0x4
c0028ea3:	e9 7c 01 00 00       	jmp    c0029024 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0028ea8:	83 ec 08             	sub    esp,0x8
c0028eab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028eb2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028eb6:	50                   	push   eax
c0028eb7:	e8 84 77 fd ff       	call   c0000640 <strcpy>
c0028ebc:	83 c4 10             	add    esp,0x10
c0028ebf:	83 ec 08             	sub    esp,0x8
c0028ec2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0028ec6:	50                   	push   eax
c0028ec7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0028ece:	e8 c9 fb ff ff       	call   c0028a9c <FAT::fixFilepath(char*)>
c0028ed3:	83 c4 10             	add    esp,0x10
c0028ed6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0028ede:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0028ee6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028eeb:	83 e0 01             	and    eax,0x1
c0028eee:	74 14                	je     c0028f04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0028ef0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028ef7:	83 c8 01             	or     eax,0x1
c0028efa:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f01:	8d 76 00             	lea    esi,[esi+0x0]
c0028f04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f09:	83 e0 02             	and    eax,0x2
c0028f0c:	74 12                	je     c0028f20 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0028f0e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f15:	83 c8 20             	or     eax,0x20
c0028f18:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f1f:	90                   	nop
c0028f20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f25:	83 e0 04             	and    eax,0x4
c0028f28:	74 12                	je     c0028f3c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0028f2a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f31:	83 c8 04             	or     eax,0x4
c0028f34:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f3b:	90                   	nop
c0028f3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0028f41:	83 e0 08             	and    eax,0x8
c0028f44:	74 12                	je     c0028f58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0028f46:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028f4d:	83 c8 02             	or     eax,0x2
c0028f50:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0028f57:	90                   	nop
c0028f58:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f5d:	83 e0 01             	and    eax,0x1
c0028f60:	74 12                	je     c0028f74 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0028f62:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028f69:	83 c8 01             	or     eax,0x1
c0028f6c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028f73:	90                   	nop
c0028f74:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f79:	83 e0 02             	and    eax,0x2
c0028f7c:	74 12                	je     c0028f90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0028f7e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028f85:	83 c8 20             	or     eax,0x20
c0028f88:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028f8f:	90                   	nop
c0028f90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028f95:	83 e0 04             	and    eax,0x4
c0028f98:	74 12                	je     c0028fac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0028f9a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028fa1:	83 c8 04             	or     eax,0x4
c0028fa4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fab:	90                   	nop
c0028fac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0028fb1:	83 e0 08             	and    eax,0x8
c0028fb4:	74 12                	je     c0028fc8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0028fb6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0028fbd:	83 c8 02             	or     eax,0x2
c0028fc0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fc7:	90                   	nop
c0028fc8:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0028fcf:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0028fd6:	09 d0                	or     eax,edx
c0028fd8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0028fdf:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0028fe7:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0028fef:	83 ec 04             	sub    esp,0x4
c0028ff2:	52                   	push   edx
c0028ff3:	50                   	push   eax
c0028ff4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0028ff8:	50                   	push   eax
c0028ff9:	e8 69 bf fd ff       	call   c0004f67 <f_chmod>
c0028ffe:	83 c4 10             	add    esp,0x10
c0029001:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0029008:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002900f:	85 c0                	test   eax,eax
c0029011:	75 09                	jne    c002901c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0029013:	b8 00 00 00 00       	mov    eax,0x0
c0029018:	eb 0a                	jmp    c0029024 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c002901a:	66 90                	xchg   ax,ax
c002901c:	b8 01 00 00 00       	mov    eax,0x1
c0029021:	8d 76 00             	lea    esi,[esi+0x0]
c0029024:	81 c4 2c 01 00 00    	add    esp,0x12c
c002902a:	c3                   	ret    
c002902b:	90                   	nop

c002902c <FAT::rename(char const*, char const*)>:
c002902c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0029032:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002903a:	74 0c                	je     c0029048 <FAT::rename(char const*, char const*)+0x1c>
c002903c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0029044:	75 0e                	jne    c0029054 <FAT::rename(char const*, char const*)+0x28>
c0029046:	66 90                	xchg   ax,ax
c0029048:	b8 04 00 00 00       	mov    eax,0x4
c002904d:	e9 9e 00 00 00       	jmp    c00290f0 <FAT::rename(char const*, char const*)+0xc4>
c0029052:	66 90                	xchg   ax,ax
c0029054:	83 ec 08             	sub    esp,0x8
c0029057:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002905e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0029065:	50                   	push   eax
c0029066:	e8 d5 75 fd ff       	call   c0000640 <strcpy>
c002906b:	83 c4 10             	add    esp,0x10
c002906e:	83 ec 08             	sub    esp,0x8
c0029071:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0029078:	50                   	push   eax
c0029079:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0029080:	e8 17 fa ff ff       	call   c0028a9c <FAT::fixFilepath(char*)>
c0029085:	83 c4 10             	add    esp,0x10
c0029088:	83 ec 08             	sub    esp,0x8
c002908b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0029092:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029096:	50                   	push   eax
c0029097:	e8 a4 75 fd ff       	call   c0000640 <strcpy>
c002909c:	83 c4 10             	add    esp,0x10
c002909f:	83 ec 08             	sub    esp,0x8
c00290a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00290a6:	50                   	push   eax
c00290a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00290ae:	e8 e9 f9 ff ff       	call   c0028a9c <FAT::fixFilepath(char*)>
c00290b3:	83 c4 10             	add    esp,0x10
c00290b6:	83 ec 08             	sub    esp,0x8
c00290b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00290bd:	50                   	push   eax
c00290be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00290c5:	50                   	push   eax
c00290c6:	e8 e4 bc fd ff       	call   c0004daf <f_rename>
c00290cb:	83 c4 10             	add    esp,0x10
c00290ce:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00290d5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00290dc:	85 c0                	test   eax,eax
c00290de:	75 08                	jne    c00290e8 <FAT::rename(char const*, char const*)+0xbc>
c00290e0:	b8 00 00 00 00       	mov    eax,0x0
c00290e5:	eb 09                	jmp    c00290f0 <FAT::rename(char const*, char const*)+0xc4>
c00290e7:	90                   	nop
c00290e8:	b8 01 00 00 00       	mov    eax,0x1
c00290ed:	8d 76 00             	lea    esi,[esi+0x0]
c00290f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00290f6:	c3                   	ret    
c00290f7:	90                   	nop

c00290f8 <FAT::mkdir(char const*)>:
c00290f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00290fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0029106:	75 08                	jne    c0029110 <FAT::mkdir(char const*)+0x18>
c0029108:	b8 04 00 00 00       	mov    eax,0x4
c002910d:	eb 61                	jmp    c0029170 <FAT::mkdir(char const*)+0x78>
c002910f:	90                   	nop
c0029110:	83 ec 08             	sub    esp,0x8
c0029113:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002911a:	8d 44 24 18          	lea    eax,[esp+0x18]
c002911e:	50                   	push   eax
c002911f:	e8 1c 75 fd ff       	call   c0000640 <strcpy>
c0029124:	83 c4 10             	add    esp,0x10
c0029127:	83 ec 08             	sub    esp,0x8
c002912a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002912e:	50                   	push   eax
c002912f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0029136:	e8 61 f9 ff ff       	call   c0028a9c <FAT::fixFilepath(char*)>
c002913b:	83 c4 10             	add    esp,0x10
c002913e:	83 ec 0c             	sub    esp,0xc
c0029141:	8d 44 24 18          	lea    eax,[esp+0x18]
c0029145:	50                   	push   eax
c0029146:	e8 c9 ba fd ff       	call   c0004c14 <f_mkdir>
c002914b:	83 c4 10             	add    esp,0x10
c002914e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0029155:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002915c:	85 c0                	test   eax,eax
c002915e:	75 08                	jne    c0029168 <FAT::mkdir(char const*)+0x70>
c0029160:	b8 00 00 00 00       	mov    eax,0x0
c0029165:	eb 09                	jmp    c0029170 <FAT::mkdir(char const*)+0x78>
c0029167:	90                   	nop
c0029168:	b8 01 00 00 00       	mov    eax,0x1
c002916d:	8d 76 00             	lea    esi,[esi+0x0]
c0029170:	81 c4 1c 01 00 00    	add    esp,0x11c
c0029176:	c3                   	ret    
c0029177:	90                   	nop

c0029178 <FAT::exists(char const*)>:
c0029178:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002917e:	83 ec 08             	sub    esp,0x8
c0029181:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0029188:	8d 44 24 10          	lea    eax,[esp+0x10]
c002918c:	50                   	push   eax
c002918d:	e8 ae 74 fd ff       	call   c0000640 <strcpy>
c0029192:	83 c4 10             	add    esp,0x10
c0029195:	83 ec 08             	sub    esp,0x8
c0029198:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002919c:	50                   	push   eax
c002919d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00291a4:	e8 f3 f8 ff ff       	call   c0028a9c <FAT::fixFilepath(char*)>
c00291a9:	83 c4 10             	add    esp,0x10
c00291ac:	83 ec 08             	sub    esp,0x8
c00291af:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00291b6:	50                   	push   eax
c00291b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00291bb:	50                   	push   eax
c00291bc:	e8 bf b6 fd ff       	call   c0004880 <f_stat>
c00291c1:	83 c4 10             	add    esp,0x10
c00291c4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00291cb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00291d2:	85 c0                	test   eax,eax
c00291d4:	75 06                	jne    c00291dc <FAT::exists(char const*)+0x64>
c00291d6:	b0 01                	mov    al,0x1
c00291d8:	eb 06                	jmp    c00291e0 <FAT::exists(char const*)+0x68>
c00291da:	66 90                	xchg   ax,ax
c00291dc:	b0 00                	mov    al,0x0
c00291de:	66 90                	xchg   ax,ax
c00291e0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00291e6:	c3                   	ret    
c00291e7:	90                   	nop

c00291e8 <isoReadDiscSectorHelper>:
c00291e8:	83 ec 2c             	sub    esp,0x2c
c00291eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00291ef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00291f3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00291f8:	83 e8 41             	sub    eax,0x41
c00291fb:	8b 0c 85 80 f3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc0c80]
c0029202:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0029206:	ba 00 00 00 00       	mov    edx,0x0
c002920b:	83 ec 0c             	sub    esp,0xc
c002920e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0029212:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0029216:	52                   	push   edx
c0029217:	50                   	push   eax
c0029218:	51                   	push   ecx
c0029219:	e8 e2 33 ff ff       	call   c001c600 <LogicalDisk::read(unsigned long long, int, void*)>
c002921e:	83 c4 20             	add    esp,0x20
c0029221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0029225:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002922a:	74 0c                	je     c0029238 <isoReadDiscSectorHelper+0x50>
c002922c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0029230:	c1 e0 0b             	shl    eax,0xb
c0029233:	eb 0b                	jmp    c0029240 <isoReadDiscSectorHelper+0x58>
c0029235:	8d 76 00             	lea    esi,[esi+0x0]
c0029238:	b8 00 00 00 00       	mov    eax,0x0
c002923d:	8d 76 00             	lea    esi,[esi+0x0]
c0029240:	83 c4 2c             	add    esp,0x2c
c0029243:	c3                   	ret    

c0029244 <iso_kprintf>:
c0029244:	83 ec 0c             	sub    esp,0xc
c0029247:	83 ec 08             	sub    esp,0x8
c002924a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002924e:	68 b6 2f 03 c0       	push   0xc0032fb6
c0029253:	e8 35 ff fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0029258:	83 c4 10             	add    esp,0x10
c002925b:	90                   	nop
c002925c:	83 c4 0c             	add    esp,0xc
c002925f:	c3                   	ret    

c0029260 <iso_kprintfd>:
c0029260:	83 ec 0c             	sub    esp,0xc
c0029263:	83 ec 08             	sub    esp,0x8
c0029266:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002926a:	68 ea 15 03 c0       	push   0xc00315ea
c002926f:	e8 19 ff fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0029274:	83 c4 10             	add    esp,0x10
c0029277:	90                   	nop
c0029278:	83 c4 0c             	add    esp,0xc
c002927b:	c3                   	ret    

c002927c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c002927c:	b8 08 00 00 00       	mov    eax,0x8
c0029281:	c3                   	ret    

c0029282 <ISO9660::truncate(void*, unsigned long long)>:
c0029282:	b8 01 00 00 00       	mov    eax,0x1
c0029287:	c3                   	ret    

c0029288 <ISO9660::getName()>:
c0029288:	b8 6c 32 03 c0       	mov    eax,0xc003326c
c002928d:	c3                   	ret    

c002928e <ISO9660::closeDir(void*)>:
c002928e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029292:	8b 00                	mov    eax,DWORD PTR [eax]
c0029294:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0029297:	90                   	nop

c0029298 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0029298:	b8 01 00 00 00       	mov    eax,0x1
c002929d:	c3                   	ret    

c002929e <ISO9660::unlink(char const*)>:
c002929e:	b8 01 00 00 00       	mov    eax,0x1
c00292a3:	c3                   	ret    

c00292a4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00292a4:	b8 03 00 00 00       	mov    eax,0x3
c00292a9:	c3                   	ret    

c00292aa <ISO9660::rename(char const*, char const*)>:
c00292aa:	b8 01 00 00 00       	mov    eax,0x1
c00292af:	c3                   	ret    

c00292b0 <ISO9660::mkdir(char const*)>:
c00292b0:	b8 01 00 00 00       	mov    eax,0x1
c00292b5:	c3                   	ret    

c00292b6 <ISO9660::~ISO9660()>:
c00292b6:	83 ec 0c             	sub    esp,0xc
c00292b9:	ba ac 33 03 c0       	mov    edx,0xc00333ac
c00292be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c2:	89 10                	mov    DWORD PTR [eax],edx
c00292c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c8:	83 ec 0c             	sub    esp,0xc
c00292cb:	50                   	push   eax
c00292cc:	e8 45 0d ff ff       	call   c001a016 <Filesystem::~Filesystem()>
c00292d1:	83 c4 10             	add    esp,0x10
c00292d4:	90                   	nop
c00292d5:	83 c4 0c             	add    esp,0xc
c00292d8:	c3                   	ret    
c00292d9:	90                   	nop

c00292da <ISO9660::~ISO9660()>:
c00292da:	83 ec 0c             	sub    esp,0xc
c00292dd:	83 ec 0c             	sub    esp,0xc
c00292e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292e4:	e8 cd ff ff ff       	call   c00292b6 <ISO9660::~ISO9660()>
c00292e9:	83 c4 10             	add    esp,0x10
c00292ec:	83 ec 08             	sub    esp,0x8
c00292ef:	6a 08                	push   0x8
c00292f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292f5:	e8 66 fd fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c00292fa:	83 c4 10             	add    esp,0x10
c00292fd:	83 c4 0c             	add    esp,0xc
c0029300:	c3                   	ret    
c0029301:	90                   	nop

c0029302 <ISO9660::exists(char const*)>:
c0029302:	83 ec 18             	sub    esp,0x18
c0029305:	68 87 32 03 c0       	push   0xc0033287
c002930a:	e8 97 6e ff ff       	call   c00201a6 <KePanic(char const*)>
c002930f:	31 c0                	xor    eax,eax
c0029311:	83 c4 1c             	add    esp,0x1c
c0029314:	c3                   	ret    
c0029315:	90                   	nop

c0029316 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0029316:	56                   	push   esi
c0029317:	53                   	push   ebx
c0029318:	53                   	push   ebx
c0029319:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002931d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029321:	85 db                	test   ebx,ebx
c0029323:	0f 84 ca 00 00 00    	je     c00293f3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029329:	85 f6                	test   esi,esi
c002932b:	0f 84 c2 00 00 00    	je     c00293f3 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0029331:	b8 03 00 00 00       	mov    eax,0x3
c0029336:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c002933b:	0f 85 b7 00 00 00    	jne    c00293f8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0029341:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0029343:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c002934a:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029350:	74 1b                	je     c002936d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0029352:	85 c0                	test   eax,eax
c0029354:	74 10                	je     c0029366 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0029356:	83 ec 0c             	sub    esp,0xc
c0029359:	68 a5 32 03 c0       	push   0xc00332a5
c002935e:	e8 43 6e ff ff       	call   c00201a6 <KePanic(char const*)>
c0029363:	83 c4 10             	add    esp,0x10
c0029366:	8a 03                	mov    al,BYTE PTR [ebx]
c0029368:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002936d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029370:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029377:	85 c0                	test   eax,eax
c0029379:	74 09                	je     c0029384 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c002937b:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0029382:	74 48                	je     c00293cc <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0029384:	83 ec 0c             	sub    esp,0xc
c0029387:	68 b5 32 03 c0       	push   0xc00332b5
c002938c:	e8 fc fd fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0029391:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029394:	83 c4 10             	add    esp,0x10
c0029397:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c002939e:	85 c0                	test   eax,eax
c00293a0:	74 17                	je     c00293b9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c00293a2:	83 ec 0c             	sub    esp,0xc
c00293a5:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00293ac:	68 d5 32 03 c0       	push   0xc00332d5
c00293b1:	e8 d7 fd fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00293b6:	83 c4 10             	add    esp,0x10
c00293b9:	83 ec 0c             	sub    esp,0xc
c00293bc:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00293c3:	50                   	push   eax
c00293c4:	e8 75 d7 fd ff       	call   c0006b3e <init_percd>
c00293c9:	83 c4 10             	add    esp,0x10
c00293cc:	83 c3 03             	add    ebx,0x3
c00293cf:	51                   	push   ecx
c00293d0:	51                   	push   ecx
c00293d1:	6a 00                	push   0x0
c00293d3:	53                   	push   ebx
c00293d4:	e8 2c d2 fd ff       	call   c0006605 <iso_open>
c00293d9:	83 c4 10             	add    esp,0x10
c00293dc:	89 c2                	mov    edx,eax
c00293de:	b8 01 00 00 00       	mov    eax,0x1
c00293e3:	83 fa ff             	cmp    edx,0xffffffff
c00293e6:	74 10                	je     c00293f8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00293e8:	83 c2 32             	add    edx,0x32
c00293eb:	31 c0                	xor    eax,eax
c00293ed:	01 d2                	add    edx,edx
c00293ef:	89 16                	mov    DWORD PTR [esi],edx
c00293f1:	eb 05                	jmp    c00293f8 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c00293f3:	b8 04 00 00 00       	mov    eax,0x4
c00293f8:	5a                   	pop    edx
c00293f9:	5b                   	pop    ebx
c00293fa:	5e                   	pop    esi
c00293fb:	c3                   	ret    

c00293fc <ISO9660::read(void*, unsigned long, void*, int*)>:
c00293fc:	53                   	push   ebx
c00293fd:	83 ec 08             	sub    esp,0x8
c0029400:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0029404:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0029408:	85 c0                	test   eax,eax
c002940a:	74 2d                	je     c0029439 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c002940c:	85 db                	test   ebx,ebx
c002940e:	74 29                	je     c0029439 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0029410:	b9 02 00 00 00       	mov    ecx,0x2
c0029415:	52                   	push   edx
c0029416:	99                   	cdq    
c0029417:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002941b:	f7 f9                	idiv   ecx
c002941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0029421:	83 e8 32             	sub    eax,0x32
c0029424:	50                   	push   eax
c0029425:	e8 83 d2 fd ff       	call   c00066ad <iso_read>
c002942a:	83 c4 10             	add    esp,0x10
c002942d:	89 03                	mov    DWORD PTR [ebx],eax
c002942f:	09 d0                	or     eax,edx
c0029431:	0f 94 c0             	sete   al
c0029434:	0f b6 c0             	movzx  eax,al
c0029437:	eb 05                	jmp    c002943e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c0029439:	b8 04 00 00 00       	mov    eax,0x4
c002943e:	83 c4 08             	add    esp,0x8
c0029441:	5b                   	pop    ebx
c0029442:	c3                   	ret    
c0029443:	90                   	nop

c0029444 <ISO9660::seek(void*, unsigned long long)>:
c0029444:	57                   	push   edi
c0029445:	56                   	push   esi
c0029446:	b8 04 00 00 00       	mov    eax,0x4
c002944b:	51                   	push   ecx
c002944c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029450:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029454:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029458:	85 d2                	test   edx,edx
c002945a:	74 26                	je     c0029482 <ISO9660::seek(void*, unsigned long long)+0x3e>
c002945c:	6a 00                	push   0x0
c002945e:	b9 02 00 00 00       	mov    ecx,0x2
c0029463:	57                   	push   edi
c0029464:	89 d0                	mov    eax,edx
c0029466:	56                   	push   esi
c0029467:	99                   	cdq    
c0029468:	f7 f9                	idiv   ecx
c002946a:	83 e8 32             	sub    eax,0x32
c002946d:	50                   	push   eax
c002946e:	e8 50 d3 fd ff       	call   c00067c3 <iso_seek>
c0029473:	83 c4 10             	add    esp,0x10
c0029476:	31 f0                	xor    eax,esi
c0029478:	31 fa                	xor    edx,edi
c002947a:	09 d0                	or     eax,edx
c002947c:	0f 95 c0             	setne  al
c002947f:	0f b6 c0             	movzx  eax,al
c0029482:	5a                   	pop    edx
c0029483:	5e                   	pop    esi
c0029484:	5f                   	pop    edi
c0029485:	c3                   	ret    

c0029486 <ISO9660::tell(void*, unsigned long long*)>:
c0029486:	53                   	push   ebx
c0029487:	83 ec 08             	sub    esp,0x8
c002948a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002948e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029492:	85 c0                	test   eax,eax
c0029494:	74 24                	je     c00294ba <ISO9660::tell(void*, unsigned long long*)+0x34>
c0029496:	85 db                	test   ebx,ebx
c0029498:	74 20                	je     c00294ba <ISO9660::tell(void*, unsigned long long*)+0x34>
c002949a:	83 ec 0c             	sub    esp,0xc
c002949d:	b9 02 00 00 00       	mov    ecx,0x2
c00294a2:	99                   	cdq    
c00294a3:	f7 f9                	idiv   ecx
c00294a5:	83 e8 32             	sub    eax,0x32
c00294a8:	50                   	push   eax
c00294a9:	e8 99 d3 fd ff       	call   c0006847 <iso_tell>
c00294ae:	83 c4 10             	add    esp,0x10
c00294b1:	89 03                	mov    DWORD PTR [ebx],eax
c00294b3:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00294b6:	31 c0                	xor    eax,eax
c00294b8:	eb 05                	jmp    c00294bf <ISO9660::tell(void*, unsigned long long*)+0x39>
c00294ba:	b8 04 00 00 00       	mov    eax,0x4
c00294bf:	83 c4 08             	add    esp,0x8
c00294c2:	5b                   	pop    ebx
c00294c3:	c3                   	ret    

c00294c4 <ISO9660::stat(void*, unsigned long long*)>:
c00294c4:	53                   	push   ebx
c00294c5:	83 ec 14             	sub    esp,0x14
c00294c8:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00294cc:	68 f9 32 03 c0       	push   0xc00332f9
c00294d1:	e8 b7 fc fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00294d6:	83 c4 10             	add    esp,0x10
c00294d9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00294de:	74 2c                	je     c002950c <ISO9660::stat(void*, unsigned long long*)+0x48>
c00294e0:	85 db                	test   ebx,ebx
c00294e2:	74 28                	je     c002950c <ISO9660::stat(void*, unsigned long long*)+0x48>
c00294e4:	83 ec 0c             	sub    esp,0xc
c00294e7:	b9 02 00 00 00       	mov    ecx,0x2
c00294ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00294f0:	99                   	cdq    
c00294f1:	f7 f9                	idiv   ecx
c00294f3:	83 e8 32             	sub    eax,0x32
c00294f6:	50                   	push   eax
c00294f7:	e8 7c d3 fd ff       	call   c0006878 <iso_total>
c00294fc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0029503:	89 03                	mov    DWORD PTR [ebx],eax
c0029505:	83 c4 10             	add    esp,0x10
c0029508:	31 c0                	xor    eax,eax
c002950a:	eb 05                	jmp    c0029511 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c002950c:	b8 04 00 00 00       	mov    eax,0x4
c0029511:	83 c4 08             	add    esp,0x8
c0029514:	5b                   	pop    ebx
c0029515:	c3                   	ret    

c0029516 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0029516:	55                   	push   ebp
c0029517:	57                   	push   edi
c0029518:	56                   	push   esi
c0029519:	53                   	push   ebx
c002951a:	83 ec 18             	sub    esp,0x18
c002951d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0029521:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0029525:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0029529:	68 01 33 03 c0       	push   0xc0033301
c002952e:	e8 5a fc fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c0029533:	83 c4 10             	add    esp,0x10
c0029536:	85 ff                	test   edi,edi
c0029538:	0f 94 c0             	sete   al
c002953b:	85 f6                	test   esi,esi
c002953d:	0f 94 c2             	sete   dl
c0029540:	09 d0                	or     eax,edx
c0029542:	a8 01                	test   al,0x1
c0029544:	0f 85 dd 00 00 00    	jne    c0029627 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c002954a:	85 db                	test   ebx,ebx
c002954c:	0f 84 d5 00 00 00    	je     c0029627 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c0029552:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0029555:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c002955b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c0029562:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c0029569:	8a 0b                	mov    cl,BYTE PTR [ebx]
c002956b:	38 0d 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,cl
c0029571:	74 1b                	je     c002958e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c0029573:	85 c0                	test   eax,eax
c0029575:	74 10                	je     c0029587 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c0029577:	83 ec 0c             	sub    esp,0xc
c002957a:	68 a5 32 03 c0       	push   0xc00332a5
c002957f:	e8 22 6c ff ff       	call   c00201a6 <KePanic(char const*)>
c0029584:	83 c4 10             	add    esp,0x10
c0029587:	8a 03                	mov    al,BYTE PTR [ebx]
c0029589:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c002958e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0029591:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c0029598:	85 c0                	test   eax,eax
c002959a:	74 09                	je     c00295a5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c002959c:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00295a3:	74 51                	je     c00295f6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c00295a5:	83 ec 0c             	sub    esp,0xc
c00295a8:	68 09 33 03 c0       	push   0xc0033309
c00295ad:	e8 db fb fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00295b2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00295b5:	83 c4 10             	add    esp,0x10
c00295b8:	83 3c 85 7c f2 03 c0 00 	cmp    DWORD PTR [eax*4-0x3ffc0d84],0x0
c00295c0:	74 21                	je     c00295e3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c00295c2:	83 ec 0c             	sub    esp,0xc
c00295c5:	68 29 33 03 c0       	push   0xc0033329
c00295ca:	e8 be fb fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c00295cf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00295d2:	83 c4 10             	add    esp,0x10
c00295d5:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00295dc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00295e3:	83 ec 0c             	sub    esp,0xc
c00295e6:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00295ed:	50                   	push   eax
c00295ee:	e8 4b d5 fd ff       	call   c0006b3e <init_percd>
c00295f3:	83 c4 10             	add    esp,0x10
c00295f6:	83 c3 03             	add    ebx,0x3
c00295f9:	52                   	push   edx
c00295fa:	52                   	push   edx
c00295fb:	6a 00                	push   0x0
c00295fd:	53                   	push   ebx
c00295fe:	e8 02 d0 fd ff       	call   c0006605 <iso_open>
c0029603:	83 c4 10             	add    esp,0x10
c0029606:	89 c5                	mov    ebp,eax
c0029608:	83 f8 ff             	cmp    eax,0xffffffff
c002960b:	75 21                	jne    c002962e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c002960d:	50                   	push   eax
c002960e:	50                   	push   eax
c002960f:	6a 01                	push   0x1
c0029611:	53                   	push   ebx
c0029612:	e8 ee cf fd ff       	call   c0006605 <iso_open>
c0029617:	83 c4 10             	add    esp,0x10
c002961a:	ba 02 00 00 00       	mov    edx,0x2
c002961f:	40                   	inc    eax
c0029620:	74 2b                	je     c002964d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c0029622:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0029625:	eb 24                	jmp    c002964b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c0029627:	ba 04 00 00 00       	mov    edx,0x4
c002962c:	eb 1f                	jmp    c002964d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c002962e:	83 ec 0c             	sub    esp,0xc
c0029631:	50                   	push   eax
c0029632:	e8 41 d2 fd ff       	call   c0006878 <iso_total>
c0029637:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c002963e:	89 07                	mov    DWORD PTR [edi],eax
c0029640:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0029643:	e8 47 d0 fd ff       	call   c000668f <iso_close>
c0029648:	83 c4 10             	add    esp,0x10
c002964b:	31 d2                	xor    edx,edx
c002964d:	83 c4 0c             	add    esp,0xc
c0029650:	89 d0                	mov    eax,edx
c0029652:	5b                   	pop    ebx
c0029653:	5e                   	pop    esi
c0029654:	5f                   	pop    edi
c0029655:	5d                   	pop    ebp
c0029656:	c3                   	ret    
c0029657:	90                   	nop

c0029658 <ISO9660::close(void*)>:
c0029658:	83 ec 0c             	sub    esp,0xc
c002965b:	b8 04 00 00 00       	mov    eax,0x4
c0029660:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029664:	85 d2                	test   edx,edx
c0029666:	74 1b                	je     c0029683 <ISO9660::close(void*)+0x2b>
c0029668:	83 ec 0c             	sub    esp,0xc
c002966b:	b9 02 00 00 00       	mov    ecx,0x2
c0029670:	89 d0                	mov    eax,edx
c0029672:	99                   	cdq    
c0029673:	f7 f9                	idiv   ecx
c0029675:	83 e8 32             	sub    eax,0x32
c0029678:	50                   	push   eax
c0029679:	e8 11 d0 fd ff       	call   c000668f <iso_close>
c002967e:	83 c4 10             	add    esp,0x10
c0029681:	31 c0                	xor    eax,eax
c0029683:	83 c4 0c             	add    esp,0xc
c0029686:	c3                   	ret    
c0029687:	90                   	nop

c0029688 <ISO9660::openDir(char const*, void**)>:
c0029688:	56                   	push   esi
c0029689:	53                   	push   ebx
c002968a:	50                   	push   eax
c002968b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002968f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0029693:	85 db                	test   ebx,ebx
c0029695:	0f 84 bd 00 00 00    	je     c0029758 <ISO9660::openDir(char const*, void**)+0xd0>
c002969b:	85 f6                	test   esi,esi
c002969d:	0f 84 b5 00 00 00    	je     c0029758 <ISO9660::openDir(char const*, void**)+0xd0>
c00296a3:	8a 13                	mov    dl,BYTE PTR [ebx]
c00296a5:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296ac:	38 15 80 03 04 c0    	cmp    BYTE PTR ds:0xc0040380,dl
c00296b2:	74 1b                	je     c00296cf <ISO9660::openDir(char const*, void**)+0x47>
c00296b4:	85 c0                	test   eax,eax
c00296b6:	74 10                	je     c00296c8 <ISO9660::openDir(char const*, void**)+0x40>
c00296b8:	83 ec 0c             	sub    esp,0xc
c00296bb:	68 a5 32 03 c0       	push   0xc00332a5
c00296c0:	e8 e1 6a ff ff       	call   c00201a6 <KePanic(char const*)>
c00296c5:	83 c4 10             	add    esp,0x10
c00296c8:	8a 03                	mov    al,BYTE PTR [ebx]
c00296ca:	a2 80 03 04 c0       	mov    ds:0xc0040380,al
c00296cf:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00296d2:	8b 04 85 7c f2 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc0d84]
c00296d9:	85 c0                	test   eax,eax
c00296db:	74 10                	je     c00296ed <ISO9660::openDir(char const*, void**)+0x65>
c00296dd:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c00296e4:	74 1a                	je     c0029700 <ISO9660::openDir(char const*, void**)+0x78>
c00296e6:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c00296ed:	83 ec 0c             	sub    esp,0xc
c00296f0:	0f be 05 80 03 04 c0 	movsx  eax,BYTE PTR ds:0xc0040380
c00296f7:	50                   	push   eax
c00296f8:	e8 41 d4 fd ff       	call   c0006b3e <init_percd>
c00296fd:	83 c4 10             	add    esp,0x10
c0029700:	83 c3 03             	add    ebx,0x3
c0029703:	50                   	push   eax
c0029704:	50                   	push   eax
c0029705:	6a 01                	push   0x1
c0029707:	53                   	push   ebx
c0029708:	e8 f8 ce fd ff       	call   c0006605 <iso_open>
c002970d:	83 c4 10             	add    esp,0x10
c0029710:	89 c3                	mov    ebx,eax
c0029712:	83 f8 ff             	cmp    eax,0xffffffff
c0029715:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c002971a:	75 1c                	jne    c0029738 <ISO9660::openDir(char const*, void**)+0xb0>
c002971c:	53                   	push   ebx
c002971d:	53                   	push   ebx
c002971e:	68 4d 33 03 c0       	push   0xc003334d
c0029723:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029729:	e8 c0 db fe ff       	call   c00172ee <VgaText::puts(char const*)>
c002972e:	83 c4 10             	add    esp,0x10
c0029731:	b8 01 00 00 00       	mov    eax,0x1
c0029736:	eb 25                	jmp    c002975d <ISO9660::openDir(char const*, void**)+0xd5>
c0029738:	01 db                	add    ebx,ebx
c002973a:	51                   	push   ecx
c002973b:	83 c3 65             	add    ebx,0x65
c002973e:	51                   	push   ecx
c002973f:	68 60 33 03 c0       	push   0xc0033360
c0029744:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c002974a:	e8 9f db fe ff       	call   c00172ee <VgaText::puts(char const*)>
c002974f:	89 1e                	mov    DWORD PTR [esi],ebx
c0029751:	83 c4 10             	add    esp,0x10
c0029754:	31 c0                	xor    eax,eax
c0029756:	eb 05                	jmp    c002975d <ISO9660::openDir(char const*, void**)+0xd5>
c0029758:	b8 04 00 00 00       	mov    eax,0x4
c002975d:	5a                   	pop    edx
c002975e:	5b                   	pop    ebx
c002975f:	5e                   	pop    esi
c0029760:	c3                   	ret    
c0029761:	90                   	nop

c0029762 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0029762:	55                   	push   ebp
c0029763:	57                   	push   edi
c0029764:	56                   	push   esi
c0029765:	53                   	push   ebx
c0029766:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002976c:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0029773:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002977a:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0029782:	0f 84 e7 00 00 00    	je     c002986f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029788:	85 db                	test   ebx,ebx
c002978a:	0f 84 df 00 00 00    	je     c002986f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c0029790:	83 ec 0c             	sub    esp,0xc
c0029793:	68 73 33 03 c0       	push   0xc0033373
c0029798:	e8 f0 f9 fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002979d:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00297a4:	b9 02 00 00 00       	mov    ecx,0x2
c00297a9:	99                   	cdq    
c00297aa:	f7 f9                	idiv   ecx
c00297ac:	83 e8 32             	sub    eax,0x32
c00297af:	89 04 24             	mov    DWORD PTR [esp],eax
c00297b2:	e8 13 d1 fd ff       	call   c00068ca <iso_readdir>
c00297b7:	83 c4 10             	add    esp,0x10
c00297ba:	89 c6                	mov    esi,eax
c00297bc:	85 c0                	test   eax,eax
c00297be:	75 37                	jne    c00297f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c00297c0:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c00297c5:	56                   	push   esi
c00297c6:	56                   	push   esi
c00297c7:	68 7e 33 03 c0       	push   0xc003337e
c00297cc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00297d2:	e8 17 db fe ff       	call   c00172ee <VgaText::puts(char const*)>
c00297d7:	83 c4 0c             	add    esp,0xc
c00297da:	68 10 01 00 00       	push   0x110
c00297df:	6a 00                	push   0x0
c00297e1:	57                   	push   edi
c00297e2:	e8 09 6d fd ff       	call   c00004f0 <memset>
c00297e7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00297ed:	83 c4 10             	add    esp,0x10
c00297f0:	b8 01 00 00 00       	mov    eax,0x1
c00297f5:	eb 7d                	jmp    c0029874 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c00297f7:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00297fd:	8d 68 08             	lea    ebp,[eax+0x8]
c0029800:	83 ec 0c             	sub    esp,0xc
c0029803:	55                   	push   ebp
c0029804:	e8 67 6d fd ff       	call   c0000570 <strlen>
c0029809:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0029811:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0029815:	83 c4 10             	add    esp,0x10
c0029818:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c002981c:	75 0a                	jne    c0029828 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c002981e:	b8 02 00 00 00       	mov    eax,0x2
c0029823:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0029826:	74 05                	je     c002982d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c0029828:	b8 01 00 00 00       	mov    eax,0x1
c002982d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0029831:	50                   	push   eax
c0029832:	50                   	push   eax
c0029833:	55                   	push   ebp
c0029834:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0029838:	8d 74 24 0c          	lea    esi,[esp+0xc]
c002983c:	50                   	push   eax
c002983d:	e8 fe 6d fd ff       	call   c0000640 <strcpy>
c0029842:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0029849:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002984b:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0029851:	5a                   	pop    edx
c0029852:	a1 f8 01 04 c0       	mov    eax,ds:0xc00401f8
c0029857:	59                   	pop    ecx
c0029858:	68 91 33 03 c0       	push   0xc0033391
c002985d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0029863:	e8 86 da fe ff       	call   c00172ee <VgaText::puts(char const*)>
c0029868:	83 c4 10             	add    esp,0x10
c002986b:	31 c0                	xor    eax,eax
c002986d:	eb 05                	jmp    c0029874 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c002986f:	b8 04 00 00 00       	mov    eax,0x4
c0029874:	81 c4 1c 01 00 00    	add    esp,0x11c
c002987a:	5b                   	pop    ebx
c002987b:	5e                   	pop    esi
c002987c:	5f                   	pop    edi
c002987d:	5d                   	pop    ebp
c002987e:	c3                   	ret    

c002987f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002987f:	57                   	push   edi
c0029880:	56                   	push   esi
c0029881:	53                   	push   ebx
c0029882:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029886:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002988a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c002988e:	39 35 84 03 04 c0    	cmp    DWORD PTR ds:0xc0040384,esi
c0029894:	0f be cb             	movsx  ecx,bl
c0029897:	75 0b                	jne    c00298a4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c0029899:	0f be 05 e0 45 03 c0 	movsx  eax,BYTE PTR ds:0xc00345e0
c00298a0:	39 c8                	cmp    eax,ecx
c00298a2:	74 47                	je     c00298eb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00298a4:	83 ec 0c             	sub    esp,0xc
c00298a7:	31 d2                	xor    edx,edx
c00298a9:	68 a0 03 04 c0       	push   0xc00403a0
c00298ae:	6a 01                	push   0x1
c00298b0:	52                   	push   edx
c00298b1:	56                   	push   esi
c00298b2:	ff 34 8d 7c f2 03 c0 	push   DWORD PTR [ecx*4-0x3ffc0d84]
c00298b9:	e8 42 2d ff ff       	call   c001c600 <LogicalDisk::read(unsigned long long, int, void*)>
c00298be:	83 c4 20             	add    esp,0x20
c00298c1:	85 c0                	test   eax,eax
c00298c3:	75 0e                	jne    c00298d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c00298c5:	89 35 84 03 04 c0    	mov    DWORD PTR ds:0xc0040384,esi
c00298cb:	88 1d e0 45 03 c0    	mov    BYTE PTR ds:0xc00345e0,bl
c00298d1:	eb 18                	jmp    c00298eb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c00298d3:	50                   	push   eax
c00298d4:	68 00 08 00 00       	push   0x800
c00298d9:	6a 00                	push   0x0
c00298db:	57                   	push   edi
c00298dc:	e8 0f 6c fd ff       	call   c00004f0 <memset>
c00298e1:	83 c4 10             	add    esp,0x10
c00298e4:	b8 01 00 00 00       	mov    eax,0x1
c00298e9:	eb 0e                	jmp    c00298f9 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c00298eb:	be a0 03 04 c0       	mov    esi,0xc00403a0
c00298f0:	b9 00 08 00 00       	mov    ecx,0x800
c00298f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00298f7:	31 c0                	xor    eax,eax
c00298f9:	5b                   	pop    ebx
c00298fa:	5e                   	pop    esi
c00298fb:	5f                   	pop    edi
c00298fc:	c3                   	ret    
c00298fd:	90                   	nop

c00298fe <ISO9660::tryMount(LogicalDisk*, int)>:
c00298fe:	53                   	push   ebx
c00298ff:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0029905:	c7 05 84 03 04 c0 ef be ad de 	mov    DWORD PTR ds:0xc0040384,0xdeadbeef
c002990f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c0029916:	8d 58 41             	lea    ebx,[eax+0x41]
c0029919:	0f be db             	movsx  ebx,bl
c002991c:	53                   	push   ebx
c002991d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0029921:	50                   	push   eax
c0029922:	6a 10                	push   0x10
c0029924:	e8 56 ff ff ff       	call   c002987f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0029929:	83 c4 10             	add    esp,0x10
c002992c:	31 d2                	xor    edx,edx
c002992e:	85 c0                	test   eax,eax
c0029930:	75 33                	jne    c0029965 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029932:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0029937:	75 2c                	jne    c0029965 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029939:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002993e:	75 25                	jne    c0029965 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029940:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0029945:	75 1e                	jne    c0029965 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029947:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c002994c:	75 17                	jne    c0029965 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c002994e:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0029953:	75 10                	jne    c0029965 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0029955:	83 ec 0c             	sub    esp,0xc
c0029958:	53                   	push   ebx
c0029959:	e8 e0 d1 fd ff       	call   c0006b3e <init_percd>
c002995e:	83 c4 10             	add    esp,0x10
c0029961:	40                   	inc    eax
c0029962:	0f 95 c2             	setne  dl
c0029965:	88 d0                	mov    al,dl
c0029967:	81 c4 08 08 00 00    	add    esp,0x808
c002996d:	5b                   	pop    ebx
c002996e:	c3                   	ret    
c002996f:	90                   	nop

c0029970 <ISO9660::ISO9660()>:
c0029970:	83 ec 0c             	sub    esp,0xc
c0029973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029977:	83 ec 0c             	sub    esp,0xc
c002997a:	50                   	push   eax
c002997b:	e8 72 06 ff ff       	call   c0019ff2 <Filesystem::Filesystem()>
c0029980:	83 c4 10             	add    esp,0x10
c0029983:	ba ac 33 03 c0       	mov    edx,0xc00333ac
c0029988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002998c:	89 10                	mov    DWORD PTR [eax],edx
c002998e:	e8 bd d2 fd ff       	call   c0006c50 <fs_iso9660_init>
c0029993:	90                   	nop
c0029994:	83 c4 0c             	add    esp,0xc
c0029997:	c3                   	ret    

c0029998 <SoundCard::beginPlayback()>:
c0029998:	c7 44 24 04 10 34 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033410
c00299a0:	e9 01 68 ff ff       	jmp    c00201a6 <KePanic(char const*)>
c00299a5:	90                   	nop

c00299a6 <SoundCard::stopPlayback()>:
c00299a6:	c7 44 24 04 10 34 03 c0 	mov    DWORD PTR [esp+0x4],0xc0033410
c00299ae:	e9 f3 67 ff ff       	jmp    c00201a6 <KePanic(char const*)>
c00299b3:	90                   	nop

c00299b4 <SoundCard::SoundCard(char const*)>:
c00299b4:	83 ec 1c             	sub    esp,0x1c
c00299b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299bb:	83 ec 08             	sub    esp,0x8
c00299be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00299c2:	50                   	push   eax
c00299c3:	e8 a8 19 ff ff       	call   c001b370 <Device::Device(char const*)>
c00299c8:	83 c4 10             	add    esp,0x10
c00299cb:	ba 5c 34 03 c0       	mov    edx,0xc003345c
c00299d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299d4:	89 10                	mov    DWORD PTR [eax],edx
c00299d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299da:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00299e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299e5:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c00299ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00299f3:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c00299fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a01:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0029a0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a0f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0029a19:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0029a21:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0029a26:	7f 1a                	jg     c0029a42 <SoundCard::SoundCard(char const*)+0x8e>
c0029a28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0029a30:	83 c2 54             	add    edx,0x54
c0029a33:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0029a3b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0029a40:	eb df                	jmp    c0029a21 <SoundCard::SoundCard(char const*)+0x6d>
c0029a42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029a46:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0029a4d:	90                   	nop
c0029a4e:	83 c4 1c             	add    esp,0x1c
c0029a51:	c3                   	ret    

c0029a52 <SoundCard::~SoundCard()>:
c0029a52:	83 ec 0c             	sub    esp,0xc
c0029a55:	ba 5c 34 03 c0       	mov    edx,0xc003345c
c0029a5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a5e:	89 10                	mov    DWORD PTR [eax],edx
c0029a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a64:	83 ec 0c             	sub    esp,0xc
c0029a67:	50                   	push   eax
c0029a68:	e8 a3 16 ff ff       	call   c001b110 <Device::~Device()>
c0029a6d:	83 c4 10             	add    esp,0x10
c0029a70:	90                   	nop
c0029a71:	83 c4 0c             	add    esp,0xc
c0029a74:	c3                   	ret    
c0029a75:	90                   	nop

c0029a76 <SoundCard::~SoundCard()>:
c0029a76:	83 ec 0c             	sub    esp,0xc
c0029a79:	83 ec 0c             	sub    esp,0xc
c0029a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a80:	e8 cd ff ff ff       	call   c0029a52 <SoundCard::~SoundCard()>
c0029a85:	83 c4 10             	add    esp,0x10
c0029a88:	83 ec 08             	sub    esp,0x8
c0029a8b:	68 e8 01 00 00       	push   0x1e8
c0029a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a94:	e8 c7 f5 fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c0029a99:	83 c4 10             	add    esp,0x10
c0029a9c:	83 c4 0c             	add    esp,0xc
c0029a9f:	c3                   	ret    

c0029aa0 <SoundCard::configureRates(int, int, int)>:
c0029aa0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0029aa4:	31 c0                	xor    eax,eax
c0029aa6:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0029aad:	75 20                	jne    c0029acf <SoundCard::configureRates(int, int, int)+0x2f>
c0029aaf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029ab3:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0029ab9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0029abd:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0029ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ac7:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0029acd:	b0 01                	mov    al,0x1
c0029acf:	c3                   	ret    

c0029ad0 <SoundCard::getSamples16(int, short*)>:
c0029ad0:	55                   	push   ebp
c0029ad1:	57                   	push   edi
c0029ad2:	31 ff                	xor    edi,edi
c0029ad4:	56                   	push   esi
c0029ad5:	53                   	push   ebx
c0029ad6:	31 db                	xor    ebx,ebx
c0029ad8:	83 ec 10             	sub    esp,0x10
c0029adb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0029adf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029ae3:	8d 04 36             	lea    eax,[esi+esi*1]
c0029ae6:	50                   	push   eax
c0029ae7:	6a 00                	push   0x0
c0029ae9:	55                   	push   ebp
c0029aea:	e8 01 6a fd ff       	call   c00004f0 <memset>
c0029aef:	83 c4 10             	add    esp,0x10
c0029af2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029af6:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0029afd:	85 c0                	test   eax,eax
c0029aff:	74 1b                	je     c0029b1c <SoundCard::getSamples16(int, short*)+0x4c>
c0029b01:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029b05:	75 15                	jne    c0029b1c <SoundCard::getSamples16(int, short*)+0x4c>
c0029b07:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0029b0b:	55                   	push   ebp
c0029b0c:	56                   	push   esi
c0029b0d:	50                   	push   eax
c0029b0e:	e8 f1 02 00 00       	call   c0029e04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0029b13:	83 c4 10             	add    esp,0x10
c0029b16:	39 c7                	cmp    edi,eax
c0029b18:	7d 02                	jge    c0029b1c <SoundCard::getSamples16(int, short*)+0x4c>
c0029b1a:	89 c7                	mov    edi,eax
c0029b1c:	43                   	inc    ebx
c0029b1d:	83 fb 20             	cmp    ebx,0x20
c0029b20:	75 d0                	jne    c0029af2 <SoundCard::getSamples16(int, short*)+0x22>
c0029b22:	83 c4 0c             	add    esp,0xc
c0029b25:	89 f8                	mov    eax,edi
c0029b27:	5b                   	pop    ebx
c0029b28:	5e                   	pop    esi
c0029b29:	5f                   	pop    edi
c0029b2a:	5d                   	pop    ebp
c0029b2b:	c3                   	ret    

c0029b2c <SoundCard::getSamples32(int, int*)>:
c0029b2c:	55                   	push   ebp
c0029b2d:	57                   	push   edi
c0029b2e:	31 ff                	xor    edi,edi
c0029b30:	56                   	push   esi
c0029b31:	31 f6                	xor    esi,esi
c0029b33:	53                   	push   ebx
c0029b34:	83 ec 10             	sub    esp,0x10
c0029b37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0029b3b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0029b3f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0029b43:	c1 e0 02             	shl    eax,0x2
c0029b46:	50                   	push   eax
c0029b47:	6a 00                	push   0x0
c0029b49:	55                   	push   ebp
c0029b4a:	e8 a1 69 fd ff       	call   c00004f0 <memset>
c0029b4f:	83 c4 10             	add    esp,0x10
c0029b52:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0029b59:	85 c0                	test   eax,eax
c0029b5b:	74 1b                	je     c0029b78 <SoundCard::getSamples32(int, int*)+0x4c>
c0029b5d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0029b61:	75 15                	jne    c0029b78 <SoundCard::getSamples32(int, int*)+0x4c>
c0029b63:	53                   	push   ebx
c0029b64:	55                   	push   ebp
c0029b65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0029b69:	50                   	push   eax
c0029b6a:	e8 61 03 00 00       	call   c0029ed0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0029b6f:	83 c4 10             	add    esp,0x10
c0029b72:	39 c6                	cmp    esi,eax
c0029b74:	7d 02                	jge    c0029b78 <SoundCard::getSamples32(int, int*)+0x4c>
c0029b76:	89 c6                	mov    esi,eax
c0029b78:	47                   	inc    edi
c0029b79:	83 ff 20             	cmp    edi,0x20
c0029b7c:	75 d4                	jne    c0029b52 <SoundCard::getSamples32(int, int*)+0x26>
c0029b7e:	85 f6                	test   esi,esi
c0029b80:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c0029b87:	75 0f                	jne    c0029b98 <SoundCard::getSamples32(int, int*)+0x6c>
c0029b89:	85 c0                	test   eax,eax
c0029b8b:	74 1b                	je     c0029ba8 <SoundCard::getSamples32(int, int*)+0x7c>
c0029b8d:	83 ec 0c             	sub    esp,0xc
c0029b90:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029b92:	53                   	push   ebx
c0029b93:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0029b96:	eb 0d                	jmp    c0029ba5 <SoundCard::getSamples32(int, int*)+0x79>
c0029b98:	85 c0                	test   eax,eax
c0029b9a:	75 0c                	jne    c0029ba8 <SoundCard::getSamples32(int, int*)+0x7c>
c0029b9c:	83 ec 0c             	sub    esp,0xc
c0029b9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0029ba1:	53                   	push   ebx
c0029ba2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0029ba5:	83 c4 10             	add    esp,0x10
c0029ba8:	83 c4 0c             	add    esp,0xc
c0029bab:	89 f0                	mov    eax,esi
c0029bad:	5b                   	pop    ebx
c0029bae:	5e                   	pop    esi
c0029baf:	5f                   	pop    edi
c0029bb0:	5d                   	pop    ebp
c0029bb1:	c3                   	ret    

c0029bb2 <SoundCard::addChannel(SoundPort*)>:
c0029bb2:	83 ec 0c             	sub    esp,0xc
c0029bb5:	31 c0                	xor    eax,eax
c0029bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0029bbb:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0029bc3:	74 1b                	je     c0029be0 <SoundCard::addChannel(SoundPort*)+0x2e>
c0029bc5:	40                   	inc    eax
c0029bc6:	83 f8 20             	cmp    eax,0x20
c0029bc9:	75 f0                	jne    c0029bbb <SoundCard::addChannel(SoundPort*)+0x9>
c0029bcb:	83 ec 0c             	sub    esp,0xc
c0029bce:	68 35 34 03 c0       	push   0xc0033435
c0029bd3:	e8 ce 65 ff ff       	call   c00201a6 <KePanic(char const*)>
c0029bd8:	83 c4 10             	add    esp,0x10
c0029bdb:	83 c8 ff             	or     eax,0xffffffff
c0029bde:	eb 0b                	jmp    c0029beb <SoundCard::addChannel(SoundPort*)+0x39>
c0029be0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0029be4:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0029beb:	83 c4 0c             	add    esp,0xc
c0029bee:	c3                   	ret    
c0029bef:	90                   	nop

c0029bf0 <SoundCard::removeChannel(int)>:
c0029bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029bf4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0029bf8:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0029c03:	c3                   	ret    

c0029c04 <SoundPort::SoundPort(int, int, int, int)>:
c0029c04:	83 ec 0c             	sub    esp,0xc
c0029c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c0b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c16:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029c22:	89 10                	mov    DWORD PTR [eax],edx
c0029c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029c2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c33:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0029c37:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029c3a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0029c3f:	75 13                	jne    c0029c54 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0029c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c45:	8b 00                	mov    eax,DWORD PTR [eax]
c0029c47:	05 a0 0f 00 00       	add    eax,0xfa0
c0029c4c:	01 c0                	add    eax,eax
c0029c4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0029c52:	66 90                	xchg   ax,ax
c0029c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c58:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029c5c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0029c5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c63:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0029c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c6e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029c71:	c1 e0 02             	shl    eax,0x2
c0029c74:	83 ec 0c             	sub    esp,0xc
c0029c77:	50                   	push   eax
c0029c78:	e8 81 c6 fe ff       	call   c00162fe <malloc>
c0029c7d:	83 c4 10             	add    esp,0x10
c0029c80:	89 c2                	mov    edx,eax
c0029c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c86:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0029c89:	90                   	nop
c0029c8a:	83 c4 0c             	add    esp,0xc
c0029c8d:	c3                   	ret    
c0029c8e:	66 90                	xchg   ax,ax

c0029c90 <SoundPort::~SoundPort()>:
c0029c90:	83 ec 0c             	sub    esp,0xc
c0029c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029c9a:	85 c0                	test   eax,eax
c0029c9c:	74 1e                	je     c0029cbc <SoundPort::~SoundPort()+0x2c>
c0029c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ca2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0029ca5:	83 ec 0c             	sub    esp,0xc
c0029ca8:	50                   	push   eax
c0029ca9:	e8 60 c6 fe ff       	call   c001630e <free>
c0029cae:	83 c4 10             	add    esp,0x10
c0029cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cb5:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0029cbc:	90                   	nop
c0029cbd:	83 c4 0c             	add    esp,0xc
c0029cc0:	c3                   	ret    
c0029cc1:	90                   	nop
c0029cc2:	66 90                	xchg   ax,ax

c0029cc4 <SoundPort::unpause()>:
c0029cc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cc8:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0029ccc:	c3                   	ret    
c0029ccd:	90                   	nop
c0029cce:	66 90                	xchg   ax,ax

c0029cd0 <SoundPort::pause()>:
c0029cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029cd4:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0029cd8:	c3                   	ret    
c0029cd9:	90                   	nop
c0029cda:	66 90                	xchg   ax,ax

c0029cdc <SoundPort::getBufferUsed()>:
c0029cdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ce0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0029ce3:	c3                   	ret    

c0029ce4 <SoundPort::getBufferSize()>:
c0029ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029ce8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0029ceb:	c3                   	ret    

c0029cec <SoundPort::buffer16(short*, int)>:
c0029cec:	55                   	push   ebp
c0029ced:	57                   	push   edi
c0029cee:	56                   	push   esi
c0029cef:	53                   	push   ebx
c0029cf0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029cf4:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0029cf8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0029cfb:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0029cfe:	74 68                	je     c0029d68 <SoundPort::buffer16(short*, int)+0x7c>
c0029d00:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0029d04:	85 c9                	test   ecx,ecx
c0029d06:	7e 60                	jle    c0029d68 <SoundPort::buffer16(short*, int)+0x7c>
c0029d08:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0029d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029d0f:	c1 e1 0f             	shl    ecx,0xf
c0029d12:	8d 70 01             	lea    esi,[eax+0x1]
c0029d15:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029d18:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0029d1b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d1e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029d21:	74 4d                	je     c0029d70 <SoundPort::buffer16(short*, int)+0x84>
c0029d23:	31 f6                	xor    esi,esi
c0029d25:	eb 21                	jmp    c0029d48 <SoundPort::buffer16(short*, int)+0x5c>
c0029d27:	90                   	nop
c0029d28:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0029d2d:	8d 79 01             	lea    edi,[ecx+0x1]
c0029d30:	c1 e3 0f             	shl    ebx,0xf
c0029d33:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0029d36:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0029d39:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0029d3c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d3f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029d42:	74 1c                	je     c0029d60 <SoundPort::buffer16(short*, int)+0x74>
c0029d44:	89 c6                	mov    esi,eax
c0029d46:	66 90                	xchg   ax,ax
c0029d48:	8d 46 01             	lea    eax,[esi+0x1]
c0029d4b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0029d4f:	75 d7                	jne    c0029d28 <SoundPort::buffer16(short*, int)+0x3c>
c0029d51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029d55:	8d 76 00             	lea    esi,[esi+0x0]
c0029d58:	5b                   	pop    ebx
c0029d59:	5e                   	pop    esi
c0029d5a:	5f                   	pop    edi
c0029d5b:	5d                   	pop    ebp
c0029d5c:	c3                   	ret    
c0029d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0029d60:	5b                   	pop    ebx
c0029d61:	8d 46 02             	lea    eax,[esi+0x2]
c0029d64:	5e                   	pop    esi
c0029d65:	5f                   	pop    edi
c0029d66:	5d                   	pop    ebp
c0029d67:	c3                   	ret    
c0029d68:	5b                   	pop    ebx
c0029d69:	31 c0                	xor    eax,eax
c0029d6b:	5e                   	pop    esi
c0029d6c:	5f                   	pop    edi
c0029d6d:	5d                   	pop    ebp
c0029d6e:	c3                   	ret    
c0029d6f:	90                   	nop
c0029d70:	b8 01 00 00 00       	mov    eax,0x1
c0029d75:	eb e1                	jmp    c0029d58 <SoundPort::buffer16(short*, int)+0x6c>
c0029d77:	90                   	nop

c0029d78 <SoundPort::buffer32(int*, int)>:
c0029d78:	55                   	push   ebp
c0029d79:	57                   	push   edi
c0029d7a:	56                   	push   esi
c0029d7b:	53                   	push   ebx
c0029d7c:	83 ec 04             	sub    esp,0x4
c0029d7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029d83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0029d87:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029d8a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029d8e:	89 04 24             	mov    DWORD PTR [esp],eax
c0029d91:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029d94:	74 5a                	je     c0029df0 <SoundPort::buffer32(int*, int)+0x78>
c0029d96:	85 c0                	test   eax,eax
c0029d98:	7e 56                	jle    c0029df0 <SoundPort::buffer32(int*, int)+0x78>
c0029d9a:	8d 71 01             	lea    esi,[ecx+0x1]
c0029d9d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0029da0:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0029da3:	8b 37                	mov    esi,DWORD PTR [edi]
c0029da5:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0029da8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029dab:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029dae:	74 4c                	je     c0029dfc <SoundPort::buffer32(int*, int)+0x84>
c0029db0:	31 f6                	xor    esi,esi
c0029db2:	eb 1c                	jmp    c0029dd0 <SoundPort::buffer32(int*, int)+0x58>
c0029db4:	8d 69 01             	lea    ebp,[ecx+0x1]
c0029db7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0029dba:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0029dbd:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0029dc0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0029dc4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0029dc7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0029dca:	74 18                	je     c0029de4 <SoundPort::buffer32(int*, int)+0x6c>
c0029dcc:	89 de                	mov    esi,ebx
c0029dce:	66 90                	xchg   ax,ax
c0029dd0:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029dd3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0029dd6:	75 dc                	jne    c0029db4 <SoundPort::buffer32(int*, int)+0x3c>
c0029dd8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0029ddb:	90                   	nop
c0029ddc:	83 c4 04             	add    esp,0x4
c0029ddf:	5b                   	pop    ebx
c0029de0:	5e                   	pop    esi
c0029de1:	5f                   	pop    edi
c0029de2:	5d                   	pop    ebp
c0029de3:	c3                   	ret    
c0029de4:	83 c4 04             	add    esp,0x4
c0029de7:	8d 46 02             	lea    eax,[esi+0x2]
c0029dea:	5b                   	pop    ebx
c0029deb:	5e                   	pop    esi
c0029dec:	5f                   	pop    edi
c0029ded:	5d                   	pop    ebp
c0029dee:	c3                   	ret    
c0029def:	90                   	nop
c0029df0:	83 c4 04             	add    esp,0x4
c0029df3:	31 c0                	xor    eax,eax
c0029df5:	5b                   	pop    ebx
c0029df6:	5e                   	pop    esi
c0029df7:	5f                   	pop    edi
c0029df8:	5d                   	pop    ebp
c0029df9:	c3                   	ret    
c0029dfa:	66 90                	xchg   ax,ax
c0029dfc:	b8 01 00 00 00       	mov    eax,0x1
c0029e01:	eb d9                	jmp    c0029ddc <SoundPort::buffer32(int*, int)+0x64>
c0029e03:	90                   	nop

c0029e04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0029e04:	57                   	push   edi
c0029e05:	56                   	push   esi
c0029e06:	53                   	push   ebx
c0029e07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0029e0b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0029e0f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0029e15:	39 03                	cmp    DWORD PTR [ebx],eax
c0029e17:	74 13                	je     c0029e2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0029e19:	83 ec 0c             	sub    esp,0xc
c0029e1c:	68 88 34 03 c0       	push   0xc0033488
c0029e21:	e8 80 63 ff ff       	call   c00201a6 <KePanic(char const*)>
c0029e26:	83 c4 10             	add    esp,0x10
c0029e29:	8d 76 00             	lea    esi,[esi+0x0]
c0029e2c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0029e32:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0029e35:	74 11                	je     c0029e48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0029e37:	83 ec 0c             	sub    esp,0xc
c0029e3a:	68 c7 34 03 c0       	push   0xc00334c7
c0029e3f:	e8 62 63 ff ff       	call   c00201a6 <KePanic(char const*)>
c0029e44:	83 c4 10             	add    esp,0x10
c0029e47:	90                   	nop
c0029e48:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0029e4e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0029e51:	74 11                	je     c0029e64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0029e53:	83 ec 0c             	sub    esp,0xc
c0029e56:	68 c7 34 03 c0       	push   0xc00334c7
c0029e5b:	e8 46 63 ff ff       	call   c00201a6 <KePanic(char const*)>
c0029e60:	83 c4 10             	add    esp,0x10
c0029e63:	90                   	nop
c0029e64:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0029e67:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0029e6b:	7e 07                	jle    c0029e74 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0029e6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0029e71:	8d 76 00             	lea    esi,[esi+0x0]
c0029e74:	85 f6                	test   esi,esi
c0029e76:	7e 2c                	jle    c0029ea4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0029e78:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0029e7c:	8d 3c 36             	lea    edi,[esi+esi*1]
c0029e7f:	31 c9                	xor    ecx,ecx
c0029e81:	01 d7                	add    edi,edx
c0029e83:	90                   	nop
c0029e84:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0029e87:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0029e8a:	85 c0                	test   eax,eax
c0029e8c:	79 06                	jns    c0029e94 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0029e8e:	05 ff 7f 00 00       	add    eax,0x7fff
c0029e93:	90                   	nop
c0029e94:	c1 f8 0f             	sar    eax,0xf
c0029e97:	83 c1 04             	add    ecx,0x4
c0029e9a:	66 01 02             	add    WORD PTR [edx],ax
c0029e9d:	83 c2 02             	add    edx,0x2
c0029ea0:	39 d7                	cmp    edi,edx
c0029ea2:	75 e0                	jne    c0029e84 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0029ea4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0029ea7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0029eaa:	83 ec 04             	sub    esp,0x4
c0029ead:	29 f0                	sub    eax,esi
c0029eaf:	c1 e0 02             	shl    eax,0x2
c0029eb2:	50                   	push   eax
c0029eb3:	8d 04 b2             	lea    eax,[edx+esi*4]
c0029eb6:	50                   	push   eax
c0029eb7:	52                   	push   edx
c0029eb8:	e8 13 65 fd ff       	call   c00003d0 <memmove>
c0029ebd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0029ec0:	83 c4 10             	add    esp,0x10
c0029ec3:	29 f0                	sub    eax,esi
c0029ec5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0029ec8:	89 f0                	mov    eax,esi
c0029eca:	5b                   	pop    ebx
c0029ecb:	5e                   	pop    esi
c0029ecc:	5f                   	pop    edi
c0029ecd:	c3                   	ret    
c0029ece:	66 90                	xchg   ax,ax

c0029ed0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0029ed0:	57                   	push   edi
c0029ed1:	56                   	push   esi
c0029ed2:	53                   	push   ebx
c0029ed3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0029ed7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0029edb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0029edf:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0029ee5:	39 06                	cmp    DWORD PTR [esi],eax
c0029ee7:	74 13                	je     c0029efc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0029ee9:	83 ec 0c             	sub    esp,0xc
c0029eec:	68 a8 34 03 c0       	push   0xc00334a8
c0029ef1:	e8 b0 62 ff ff       	call   c00201a6 <KePanic(char const*)>
c0029ef6:	83 c4 10             	add    esp,0x10
c0029ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0029efc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0029f02:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0029f05:	74 11                	je     c0029f18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0029f07:	83 ec 0c             	sub    esp,0xc
c0029f0a:	68 e3 34 03 c0       	push   0xc00334e3
c0029f0f:	e8 92 62 ff ff       	call   c00201a6 <KePanic(char const*)>
c0029f14:	83 c4 10             	add    esp,0x10
c0029f17:	90                   	nop
c0029f18:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0029f1e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0029f21:	74 11                	je     c0029f34 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0029f23:	83 ec 0c             	sub    esp,0xc
c0029f26:	68 e3 34 03 c0       	push   0xc00334e3
c0029f2b:	e8 76 62 ff ff       	call   c00201a6 <KePanic(char const*)>
c0029f30:	83 c4 10             	add    esp,0x10
c0029f33:	90                   	nop
c0029f34:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0029f37:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0029f3b:	7e 07                	jle    c0029f44 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0029f3d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0029f41:	8d 76 00             	lea    esi,[esi+0x0]
c0029f44:	85 ff                	test   edi,edi
c0029f46:	7e 1c                	jle    c0029f64 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0029f48:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0029f4f:	31 c0                	xor    eax,eax
c0029f51:	8d 76 00             	lea    esi,[esi+0x0]
c0029f54:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0029f57:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0029f5a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0029f5d:	83 c0 04             	add    eax,0x4
c0029f60:	39 c1                	cmp    ecx,eax
c0029f62:	75 f0                	jne    c0029f54 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0029f64:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0029f67:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0029f6a:	83 ec 04             	sub    esp,0x4
c0029f6d:	29 f8                	sub    eax,edi
c0029f6f:	c1 e0 02             	shl    eax,0x2
c0029f72:	50                   	push   eax
c0029f73:	8d 04 ba             	lea    eax,[edx+edi*4]
c0029f76:	50                   	push   eax
c0029f77:	52                   	push   edx
c0029f78:	e8 53 64 fd ff       	call   c00003d0 <memmove>
c0029f7d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0029f80:	83 c4 10             	add    esp,0x10
c0029f83:	29 f8                	sub    eax,edi
c0029f85:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0029f88:	89 f8                	mov    eax,edi
c0029f8a:	5b                   	pop    ebx
c0029f8b:	5e                   	pop    esi
c0029f8c:	5f                   	pop    edi
c0029f8d:	c3                   	ret    

c0029f8e <PCI::open(int, int, void*)>:
c0029f8e:	83 ec 18             	sub    esp,0x18
c0029f91:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0029f95:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0029f99:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0029f9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0029fa1:	50                   	push   eax
c0029fa2:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0029fa5:	31 c0                	xor    eax,eax
c0029fa7:	83 c4 1c             	add    esp,0x1c
c0029faa:	c3                   	ret    
c0029fab:	90                   	nop

c0029fac <PCI::close(int, int, void*)>:
c0029fac:	31 c0                	xor    eax,eax
c0029fae:	c3                   	ret    
c0029faf:	90                   	nop

c0029fb0 <PCI::PCI()>:
c0029fb0:	83 ec 0c             	sub    esp,0xc
c0029fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fb7:	83 ec 08             	sub    esp,0x8
c0029fba:	68 ff 34 03 c0       	push   0xc00334ff
c0029fbf:	50                   	push   eax
c0029fc0:	e8 ab 0b ff ff       	call   c001ab70 <Bus::Bus(char const*)>
c0029fc5:	83 c4 10             	add    esp,0x10
c0029fc8:	ba a8 35 03 c0       	mov    edx,0xc00335a8
c0029fcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fd1:	89 10                	mov    DWORD PTR [eax],edx
c0029fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fd7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0029fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fe5:	a3 a0 0b 04 c0       	mov    ds:0xc0040ba0,eax
c0029fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029fee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0029ff4:	0f b6 d0             	movzx  edx,al
c0029ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ffb:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c002a002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a006:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a00c:	0f b6 d0             	movzx  edx,al
c002a00f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a013:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002a018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a01c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002a022:	8d 50 01             	lea    edx,[eax+0x1]
c002a025:	88 d1                	mov    cl,dl
c002a027:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002a02b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002a031:	0f b6 d0             	movzx  edx,al
c002a034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002a038:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002a03c:	83 c9 c0             	or     ecx,0xffffffc0
c002a03f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002a043:	90                   	nop
c002a044:	83 c4 0c             	add    esp,0xc
c002a047:	c3                   	ret    

c002a048 <PCI::readBAR8(unsigned int, int)>:
c002a048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a04c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a050:	f6 c2 01             	test   dl,0x1
c002a053:	74 07                	je     c002a05c <PCI::readBAR8(unsigned int, int)+0x14>
c002a055:	83 e2 fc             	and    edx,0xfffffffc
c002a058:	01 c2                	add    edx,eax
c002a05a:	ec                   	in     al,dx
c002a05b:	c3                   	ret    
c002a05c:	83 e2 f0             	and    edx,0xfffffff0
c002a05f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c002a062:	c3                   	ret    
c002a063:	90                   	nop

c002a064 <PCI::readBAR16(unsigned int, int)>:
c002a064:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a068:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a06c:	f6 c2 01             	test   dl,0x1
c002a06f:	74 08                	je     c002a079 <PCI::readBAR16(unsigned int, int)+0x15>
c002a071:	83 e2 fc             	and    edx,0xfffffffc
c002a074:	01 c2                	add    edx,eax
c002a076:	66 ed                	in     ax,dx
c002a078:	c3                   	ret    
c002a079:	83 e2 f0             	and    edx,0xfffffff0
c002a07c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002a080:	c3                   	ret    
c002a081:	90                   	nop

c002a082 <PCI::readBAR32(unsigned int, int)>:
c002a082:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a086:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a08a:	f6 c2 01             	test   dl,0x1
c002a08d:	74 07                	je     c002a096 <PCI::readBAR32(unsigned int, int)+0x14>
c002a08f:	83 e2 fc             	and    edx,0xfffffffc
c002a092:	01 c2                	add    edx,eax
c002a094:	ed                   	in     eax,dx
c002a095:	c3                   	ret    
c002a096:	83 e2 f0             	and    edx,0xfffffff0
c002a099:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002a09c:	c3                   	ret    
c002a09d:	90                   	nop

c002a09e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002a09e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a0a6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a0aa:	f6 c2 01             	test   dl,0x1
c002a0ad:	74 07                	je     c002a0b6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002a0af:	83 e2 fc             	and    edx,0xfffffffc
c002a0b2:	01 ca                	add    edx,ecx
c002a0b4:	ee                   	out    dx,al
c002a0b5:	c3                   	ret    
c002a0b6:	83 e2 f0             	and    edx,0xfffffff0
c002a0b9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002a0bc:	c3                   	ret    
c002a0bd:	90                   	nop

c002a0be <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002a0be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a0c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a0ca:	f6 c2 01             	test   dl,0x1
c002a0cd:	74 08                	je     c002a0d7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002a0cf:	83 e2 fc             	and    edx,0xfffffffc
c002a0d2:	01 ca                	add    edx,ecx
c002a0d4:	66 ef                	out    dx,ax
c002a0d6:	c3                   	ret    
c002a0d7:	83 e2 f0             	and    edx,0xfffffff0
c002a0da:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002a0de:	c3                   	ret    
c002a0df:	90                   	nop

c002a0e0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002a0e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002a0e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a0e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002a0ec:	f6 c2 01             	test   dl,0x1
c002a0ef:	74 07                	je     c002a0f8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002a0f1:	83 e2 fc             	and    edx,0xfffffffc
c002a0f4:	01 ca                	add    edx,ecx
c002a0f6:	ef                   	out    dx,eax
c002a0f7:	c3                   	ret    
c002a0f8:	83 e2 f0             	and    edx,0xfffffff0
c002a0fb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002a0fe:	c3                   	ret    
c002a0ff:	90                   	nop

c002a100 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a100:	55                   	push   ebp
c002a101:	57                   	push   edi
c002a102:	56                   	push   esi
c002a103:	53                   	push   ebx
c002a104:	83 ec 0c             	sub    esp,0xc
c002a107:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c002a10c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002a110:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002a114:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002a118:	83 fe 07             	cmp    esi,0x7
c002a11b:	76 10                	jbe    c002a12d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c002a11d:	83 ec 0c             	sub    esp,0xc
c002a120:	68 07 35 03 c0       	push   0xc0033507
c002a125:	e8 7c 60 ff ff       	call   c00201a6 <KePanic(char const*)>
c002a12a:	83 c4 10             	add    esp,0x10
c002a12d:	0f b6 db             	movzx  ebx,bl
c002a130:	83 fb 0f             	cmp    ebx,0xf
c002a133:	76 10                	jbe    c002a145 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c002a135:	83 ec 0c             	sub    esp,0xc
c002a138:	68 37 35 03 c0       	push   0xc0033537
c002a13d:	e8 64 60 ff ff       	call   c00201a6 <KePanic(char const*)>
c002a142:	83 c4 10             	add    esp,0x10
c002a145:	8d 04 36             	lea    eax,[esi+esi*1]
c002a148:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a14d:	83 c8 f0             	or     eax,0xfffffff0
c002a150:	ee                   	out    dx,al
c002a151:	ba fa 0c 00 00       	mov    edx,0xcfa
c002a156:	89 e8                	mov    eax,ebp
c002a158:	ee                   	out    dx,al
c002a159:	83 c4 0c             	add    esp,0xc
c002a15c:	89 d8                	mov    eax,ebx
c002a15e:	89 f9                	mov    ecx,edi
c002a160:	c1 e0 08             	shl    eax,0x8
c002a163:	0f b6 d9             	movzx  ebx,cl
c002a166:	83 e3 fc             	and    ebx,0xfffffffc
c002a169:	09 d8                	or     eax,ebx
c002a16b:	5b                   	pop    ebx
c002a16c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c002a171:	5e                   	pop    esi
c002a172:	5f                   	pop    edi
c002a173:	5d                   	pop    ebp
c002a174:	c3                   	ret    
c002a175:	90                   	nop

c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a176:	57                   	push   edi
c002a177:	56                   	push   esi
c002a178:	53                   	push   ebx
c002a179:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002a17d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002a181:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002a187:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002a18b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a18f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002a193:	83 ff 01             	cmp    edi,0x1
c002a196:	75 3f                	jne    c002a1d7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c002a198:	89 de                	mov    esi,ebx
c002a19a:	0f b6 c0             	movzx  eax,al
c002a19d:	81 e6 fc 00 00 00    	and    esi,0xfc
c002a1a3:	c1 e0 10             	shl    eax,0x10
c002a1a6:	0f b6 c9             	movzx  ecx,cl
c002a1a9:	09 f0                	or     eax,esi
c002a1ab:	c1 e1 08             	shl    ecx,0x8
c002a1ae:	0f b6 d2             	movzx  edx,dl
c002a1b1:	09 c8                	or     eax,ecx
c002a1b3:	c1 e2 0b             	shl    edx,0xb
c002a1b6:	09 d0                	or     eax,edx
c002a1b8:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a1bd:	0d 00 00 00 80       	or     eax,0x80000000
c002a1c2:	ef                   	out    dx,eax
c002a1c3:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a1c8:	ed                   	in     eax,dx
c002a1c9:	83 e3 02             	and    ebx,0x2
c002a1cc:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a1d3:	d3 e8                	shr    eax,cl
c002a1d5:	eb 44                	jmp    c002a21b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a1d7:	83 ff 02             	cmp    edi,0x2
c002a1da:	75 2d                	jne    c002a209 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c002a1dc:	83 ec 0c             	sub    esp,0xc
c002a1df:	0f b6 c9             	movzx  ecx,cl
c002a1e2:	0f b6 d2             	movzx  edx,dl
c002a1e5:	0f b6 fb             	movzx  edi,bl
c002a1e8:	0f b6 c0             	movzx  eax,al
c002a1eb:	57                   	push   edi
c002a1ec:	51                   	push   ecx
c002a1ed:	52                   	push   edx
c002a1ee:	50                   	push   eax
c002a1ef:	56                   	push   esi
c002a1f0:	e8 0b ff ff ff       	call   c002a100 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a1f5:	89 c2                	mov    edx,eax
c002a1f7:	ed                   	in     eax,dx
c002a1f8:	83 e3 02             	and    ebx,0x2
c002a1fb:	83 c4 20             	add    esp,0x20
c002a1fe:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c002a205:	d3 e8                	shr    eax,cl
c002a207:	eb 12                	jmp    c002a21b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c002a209:	83 ec 0c             	sub    esp,0xc
c002a20c:	68 67 35 03 c0       	push   0xc0033567
c002a211:	e8 90 5f ff ff       	call   c00201a6 <KePanic(char const*)>
c002a216:	83 c4 10             	add    esp,0x10
c002a219:	31 c0                	xor    eax,eax
c002a21b:	5b                   	pop    ebx
c002a21c:	5e                   	pop    esi
c002a21d:	5f                   	pop    edi
c002a21e:	c3                   	ret    
c002a21f:	90                   	nop

c002a220 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002a220:	83 ec 18             	sub    esp,0x18
c002a223:	6a 00                	push   0x0
c002a225:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a22a:	50                   	push   eax
c002a22b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a230:	50                   	push   eax
c002a231:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a236:	50                   	push   eax
c002a237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a23b:	e8 36 ff ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a240:	83 c4 2c             	add    esp,0x2c
c002a243:	c3                   	ret    

c002a244 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c002a244:	83 ec 18             	sub    esp,0x18
c002a247:	6a 0e                	push   0xe
c002a249:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a24e:	50                   	push   eax
c002a24f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a254:	50                   	push   eax
c002a255:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a25a:	50                   	push   eax
c002a25b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a25f:	e8 12 ff ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a264:	83 c4 2c             	add    esp,0x2c
c002a267:	0f b6 c0             	movzx  eax,al
c002a26a:	c3                   	ret    
c002a26b:	90                   	nop

c002a26c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002a26c:	55                   	push   ebp
c002a26d:	57                   	push   edi
c002a26e:	56                   	push   esi
c002a26f:	53                   	push   ebx
c002a270:	83 ec 18             	sub    esp,0x18
c002a273:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c002a278:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c002a27d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c002a282:	6a 0a                	push   0xa
c002a284:	56                   	push   esi
c002a285:	55                   	push   ebp
c002a286:	57                   	push   edi
c002a287:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a28b:	e8 e6 fe ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a290:	83 c4 14             	add    esp,0x14
c002a293:	89 c3                	mov    ebx,eax
c002a295:	6a 0a                	push   0xa
c002a297:	0f b6 db             	movzx  ebx,bl
c002a29a:	56                   	push   esi
c002a29b:	55                   	push   ebp
c002a29c:	57                   	push   edi
c002a29d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002a2a1:	e8 d0 fe ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2a6:	83 c4 2c             	add    esp,0x2c
c002a2a9:	25 00 ff 00 00       	and    eax,0xff00
c002a2ae:	09 d8                	or     eax,ebx
c002a2b0:	5b                   	pop    ebx
c002a2b1:	5e                   	pop    esi
c002a2b2:	5f                   	pop    edi
c002a2b3:	5d                   	pop    ebp
c002a2b4:	c3                   	ret    
c002a2b5:	90                   	nop

c002a2b6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002a2b6:	83 ec 18             	sub    esp,0x18
c002a2b9:	6a 08                	push   0x8
c002a2bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2c0:	50                   	push   eax
c002a2c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2c6:	50                   	push   eax
c002a2c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2cc:	50                   	push   eax
c002a2cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a2d1:	e8 a0 fe ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2d6:	83 c4 2c             	add    esp,0x2c
c002a2d9:	0f b6 c4             	movzx  eax,ah
c002a2dc:	c3                   	ret    
c002a2dd:	90                   	nop

c002a2de <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002a2de:	83 ec 18             	sub    esp,0x18
c002a2e1:	6a 08                	push   0x8
c002a2e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2e8:	50                   	push   eax
c002a2e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2ee:	50                   	push   eax
c002a2ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a2f4:	50                   	push   eax
c002a2f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a2f9:	e8 78 fe ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a2fe:	83 c4 2c             	add    esp,0x2c
c002a301:	c3                   	ret    

c002a302 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002a302:	83 ec 18             	sub    esp,0x18
c002a305:	6a 3c                	push   0x3c
c002a307:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a30c:	50                   	push   eax
c002a30d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a312:	50                   	push   eax
c002a313:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a318:	50                   	push   eax
c002a319:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a31d:	e8 54 fe ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a322:	83 c4 2c             	add    esp,0x2c
c002a325:	c3                   	ret    

c002a326 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002a326:	83 ec 18             	sub    esp,0x18
c002a329:	6a 18                	push   0x18
c002a32b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a330:	50                   	push   eax
c002a331:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a336:	50                   	push   eax
c002a337:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002a33c:	50                   	push   eax
c002a33d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002a341:	e8 30 fe ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a346:	83 c4 2c             	add    esp,0x2c
c002a349:	0f b6 c4             	movzx  eax,ah
c002a34c:	c3                   	ret    
c002a34d:	90                   	nop

c002a34e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002a34e:	55                   	push   ebp
c002a34f:	57                   	push   edi
c002a350:	56                   	push   esi
c002a351:	53                   	push   ebx
c002a352:	83 ec 28             	sub    esp,0x28
c002a355:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002a359:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c002a35e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c002a363:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002a368:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002a36f:	8d 43 12             	lea    eax,[ebx+0x12]
c002a372:	83 c3 10             	add    ebx,0x10
c002a375:	0f b6 c0             	movzx  eax,al
c002a378:	0f b6 db             	movzx  ebx,bl
c002a37b:	50                   	push   eax
c002a37c:	51                   	push   ecx
c002a37d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c002a381:	57                   	push   edi
c002a382:	55                   	push   ebp
c002a383:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a387:	e8 ea fd ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a38c:	83 c4 14             	add    esp,0x14
c002a38f:	89 c6                	mov    esi,eax
c002a391:	53                   	push   ebx
c002a392:	c1 e6 10             	shl    esi,0x10
c002a395:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002a399:	51                   	push   ecx
c002a39a:	57                   	push   edi
c002a39b:	55                   	push   ebp
c002a39c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002a3a0:	e8 d1 fd ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a3a5:	83 c4 3c             	add    esp,0x3c
c002a3a8:	0f b7 c0             	movzx  eax,ax
c002a3ab:	5b                   	pop    ebx
c002a3ac:	09 f0                	or     eax,esi
c002a3ae:	5e                   	pop    esi
c002a3af:	5f                   	pop    edi
c002a3b0:	5d                   	pop    ebp
c002a3b1:	c3                   	ret    

c002a3b2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002a3b2:	55                   	push   ebp
c002a3b3:	57                   	push   edi
c002a3b4:	56                   	push   esi
c002a3b5:	53                   	push   ebx
c002a3b6:	83 ec 0c             	sub    esp,0xc
c002a3b9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002a3bd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002a3c1:	89 f5                	mov    ebp,esi
c002a3c3:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002a3c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002a3cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002a3d1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002a3d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002a3d9:	83 f9 01             	cmp    ecx,0x1
c002a3dc:	75 5d                	jne    c002a43b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c002a3de:	0f b6 c8             	movzx  ecx,al
c002a3e1:	0f b6 d2             	movzx  edx,dl
c002a3e4:	c1 e1 10             	shl    ecx,0x10
c002a3e7:	c1 e2 0b             	shl    edx,0xb
c002a3ea:	89 f0                	mov    eax,esi
c002a3ec:	25 fc 00 00 00       	and    eax,0xfc
c002a3f1:	09 c1                	or     ecx,eax
c002a3f3:	89 e8                	mov    eax,ebp
c002a3f5:	0f b6 c0             	movzx  eax,al
c002a3f8:	c1 e0 08             	shl    eax,0x8
c002a3fb:	09 c1                	or     ecx,eax
c002a3fd:	09 d1                	or     ecx,edx
c002a3ff:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a404:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002a40a:	89 c8                	mov    eax,ecx
c002a40c:	ef                   	out    dx,eax
c002a40d:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a412:	ed                   	in     eax,dx
c002a413:	0f b7 db             	movzx  ebx,bx
c002a416:	83 e6 02             	and    esi,0x2
c002a419:	74 0a                	je     c002a425 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c002a41b:	0f b7 d0             	movzx  edx,ax
c002a41e:	c1 e3 10             	shl    ebx,0x10
c002a421:	09 d3                	or     ebx,edx
c002a423:	eb 05                	jmp    c002a42a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c002a425:	66 31 c0             	xor    ax,ax
c002a428:	09 c3                	or     ebx,eax
c002a42a:	ba f8 0c 00 00       	mov    edx,0xcf8
c002a42f:	89 c8                	mov    eax,ecx
c002a431:	ef                   	out    dx,eax
c002a432:	ba fc 0c 00 00       	mov    edx,0xcfc
c002a437:	89 d8                	mov    eax,ebx
c002a439:	eb 41                	jmp    c002a47c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a43b:	83 f9 02             	cmp    ecx,0x2
c002a43e:	75 45                	jne    c002a485 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c002a440:	83 ec 0c             	sub    esp,0xc
c002a443:	0f b6 d2             	movzx  edx,dl
c002a446:	89 f1                	mov    ecx,esi
c002a448:	0f b6 c0             	movzx  eax,al
c002a44b:	0f b6 f1             	movzx  esi,cl
c002a44e:	89 e9                	mov    ecx,ebp
c002a450:	56                   	push   esi
c002a451:	0f b6 c9             	movzx  ecx,cl
c002a454:	51                   	push   ecx
c002a455:	52                   	push   edx
c002a456:	50                   	push   eax
c002a457:	57                   	push   edi
c002a458:	e8 a3 fc ff ff       	call   c002a100 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a45d:	89 c2                	mov    edx,eax
c002a45f:	ed                   	in     eax,dx
c002a460:	83 c4 20             	add    esp,0x20
c002a463:	0f b7 db             	movzx  ebx,bx
c002a466:	f6 c2 02             	test   dl,0x2
c002a469:	74 0c                	je     c002a477 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002a46b:	0f b7 c8             	movzx  ecx,ax
c002a46e:	89 d8                	mov    eax,ebx
c002a470:	c1 e0 10             	shl    eax,0x10
c002a473:	09 c8                	or     eax,ecx
c002a475:	eb 05                	jmp    c002a47c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c002a477:	66 31 c0             	xor    ax,ax
c002a47a:	09 d8                	or     eax,ebx
c002a47c:	ef                   	out    dx,eax
c002a47d:	83 c4 0c             	add    esp,0xc
c002a480:	5b                   	pop    ebx
c002a481:	5e                   	pop    esi
c002a482:	5f                   	pop    edi
c002a483:	5d                   	pop    ebp
c002a484:	c3                   	ret    
c002a485:	c7 44 24 20 67 35 03 c0 	mov    DWORD PTR [esp+0x20],0xc0033567
c002a48d:	83 c4 0c             	add    esp,0xc
c002a490:	5b                   	pop    ebx
c002a491:	5e                   	pop    esi
c002a492:	5f                   	pop    edi
c002a493:	5d                   	pop    ebp
c002a494:	e9 0d 5d ff ff       	jmp    c00201a6 <KePanic(char const*)>
c002a499:	90                   	nop

c002a49a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002a49a:	55                   	push   ebp
c002a49b:	57                   	push   edi
c002a49c:	56                   	push   esi
c002a49d:	53                   	push   ebx
c002a49e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c002a4a4:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c002a4ab:	80 3d ac 0b 04 c0 00 	cmp    BYTE PTR ds:0xc0040bac,0x0
c002a4b2:	0f 85 bd 00 00 00    	jne    c002a575 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c002a4b8:	83 ec 0c             	sub    esp,0xc
c002a4bb:	68 14 01 00 00       	push   0x114
c002a4c0:	e8 39 be fe ff       	call   c00162fe <malloc>
c002a4c5:	83 c4 0c             	add    esp,0xc
c002a4c8:	89 c3                	mov    ebx,eax
c002a4ca:	ff 35 f8 01 04 c0    	push   DWORD PTR ds:0xc00401f8
c002a4d0:	68 6d 35 03 c0       	push   0xc003356d
c002a4d5:	50                   	push   eax
c002a4d6:	e8 b9 fe fe ff       	call   c001a394 <File::File(char const*, Process*)>
c002a4db:	83 c4 10             	add    esp,0x10
c002a4de:	85 db                	test   ebx,ebx
c002a4e0:	0f 84 67 02 00 00    	je     c002a74d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a4e6:	56                   	push   esi
c002a4e7:	56                   	push   esi
c002a4e8:	6a 01                	push   0x1
c002a4ea:	53                   	push   ebx
c002a4eb:	e8 c2 fe fe ff       	call   c001a3b2 <File::open(FileOpenMode)>
c002a4f0:	83 c4 10             	add    esp,0x10
c002a4f3:	85 c0                	test   eax,eax
c002a4f5:	0f 85 52 02 00 00    	jne    c002a74d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a4fb:	52                   	push   edx
c002a4fc:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c002a500:	50                   	push   eax
c002a501:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a505:	50                   	push   eax
c002a506:	53                   	push   ebx
c002a507:	e8 a8 01 ff ff       	call   c001a6b4 <File::stat(unsigned long long*, bool*)>
c002a50c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a510:	40                   	inc    eax
c002a511:	89 04 24             	mov    DWORD PTR [esp],eax
c002a514:	e8 e5 bd fe ff       	call   c00162fe <malloc>
c002a519:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c002a51d:	a3 a8 0b 04 c0       	mov    ds:0xc0040ba8,eax
c002a522:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c002a526:	59                   	pop    ecx
c002a527:	8b 13                	mov    edx,DWORD PTR [ebx]
c002a529:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c002a52d:	51                   	push   ecx
c002a52e:	50                   	push   eax
c002a52f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a533:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002a537:	53                   	push   ebx
c002a538:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c002a53b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c002a53f:	83 c4 20             	add    esp,0x20
c002a542:	89 c8                	mov    eax,ecx
c002a544:	99                   	cdq    
c002a545:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c002a549:	0f 85 fe 01 00 00    	jne    c002a74d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a54f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c002a553:	0f 85 f4 01 00 00    	jne    c002a74d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a559:	83 ec 0c             	sub    esp,0xc
c002a55c:	53                   	push   ebx
c002a55d:	e8 ae fe fe ff       	call   c001a410 <File::close()>
c002a562:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002a566:	c6 05 ac 0b 04 c0 01 	mov    BYTE PTR ds:0xc0040bac,0x1
c002a56d:	a3 a4 0b 04 c0       	mov    ds:0xc0040ba4,eax
c002a572:	83 c4 10             	add    esp,0x10
c002a575:	a1 a4 0b 04 c0       	mov    eax,ds:0xc0040ba4
c002a57a:	8b 1d a8 0b 04 c0    	mov    ebx,DWORD PTR ds:0xc0040ba8
c002a580:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002a584:	31 f6                	xor    esi,esi
c002a586:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c002a58e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c002a595:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c002a59a:	31 c9                	xor    ecx,ecx
c002a59c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c002a5a4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c002a5a9:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c002a5b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a5b5:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c002a5bd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c002a5c1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a5c5:	0f 8e 82 01 00 00    	jle    c002a74d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c002a5cb:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c002a5ce:	d4 40                	aam    0x40
c002a5d0:	d5 39                	aad    0x39
c002a5d2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c002a5d6:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c002a5da:	d4 40                	aam    0x40
c002a5dc:	d5 39                	aad    0x39
c002a5de:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002a5e2:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c002a5e6:	d4 40                	aam    0x40
c002a5e8:	d5 39                	aad    0x39
c002a5ea:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c002a5ee:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c002a5f2:	d4 40                	aam    0x40
c002a5f4:	d5 39                	aad    0x39
c002a5f6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c002a5fa:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c002a5fe:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c002a602:	3c 56                	cmp    al,0x56
c002a604:	74 43                	je     c002a649 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c002a606:	d4 40                	aam    0x40
c002a608:	d5 39                	aad    0x39
c002a60a:	8d 48 d0             	lea    ecx,[eax-0x30]
c002a60d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c002a611:	0f b6 c9             	movzx  ecx,cl
c002a614:	c1 e1 04             	shl    ecx,0x4
c002a617:	d4 40                	aam    0x40
c002a619:	d5 39                	aad    0x39
c002a61b:	83 e8 30             	sub    eax,0x30
c002a61e:	0f b6 c0             	movzx  eax,al
c002a621:	09 c1                	or     ecx,eax
c002a623:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c002a627:	c1 e1 04             	shl    ecx,0x4
c002a62a:	d4 40                	aam    0x40
c002a62c:	d5 39                	aad    0x39
c002a62e:	83 e8 30             	sub    eax,0x30
c002a631:	0f b6 c0             	movzx  eax,al
c002a634:	09 c1                	or     ecx,eax
c002a636:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c002a63a:	c1 e1 04             	shl    ecx,0x4
c002a63d:	d4 40                	aam    0x40
c002a63f:	d5 39                	aad    0x39
c002a641:	83 e8 30             	sub    eax,0x30
c002a644:	0f b6 c0             	movzx  eax,al
c002a647:	09 c1                	or     ecx,eax
c002a649:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c002a64d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002a651:	3c 58                	cmp    al,0x58
c002a653:	74 47                	je     c002a69c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c002a655:	d4 40                	aam    0x40
c002a657:	d5 39                	aad    0x39
c002a659:	8d 50 d0             	lea    edx,[eax-0x30]
c002a65c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c002a660:	0f b6 d2             	movzx  edx,dl
c002a663:	c1 e2 04             	shl    edx,0x4
c002a666:	d4 40                	aam    0x40
c002a668:	d5 39                	aad    0x39
c002a66a:	83 e8 30             	sub    eax,0x30
c002a66d:	0f b6 c0             	movzx  eax,al
c002a670:	09 c2                	or     edx,eax
c002a672:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c002a676:	c1 e2 04             	shl    edx,0x4
c002a679:	d4 40                	aam    0x40
c002a67b:	d5 39                	aad    0x39
c002a67d:	83 e8 30             	sub    eax,0x30
c002a680:	0f b6 c0             	movzx  eax,al
c002a683:	09 c2                	or     edx,eax
c002a685:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c002a689:	c1 e2 04             	shl    edx,0x4
c002a68c:	d4 40                	aam    0x40
c002a68e:	d5 39                	aad    0x39
c002a690:	83 e8 30             	sub    eax,0x30
c002a693:	0f b6 c0             	movzx  eax,al
c002a696:	09 c2                	or     edx,eax
c002a698:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002a69c:	83 c6 10             	add    esi,0x10
c002a69f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c002a6a3:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c002a6a7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c002a6ab:	83 fa 0a             	cmp    edx,0xa
c002a6ae:	74 0b                	je     c002a6bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c002a6b0:	47                   	inc    edi
c002a6b1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c002a6b5:	75 19                	jne    c002a6d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c002a6b7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002a6bb:	31 c0                	xor    eax,eax
c002a6bd:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c002a6c2:	0f 94 c0             	sete   al
c002a6c5:	01 c6                	add    esi,eax
c002a6c7:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c002a6cc:	75 0b                	jne    c002a6d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c002a6ce:	eb 14                	jmp    c002a6e4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c002a6d0:	46                   	inc    esi
c002a6d1:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c002a6d4:	c6 07 00             	mov    BYTE PTR [edi],0x0
c002a6d7:	eb ca                	jmp    c002a6a3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c002a6d9:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c002a6de:	0f 85 dd fe ff ff    	jne    c002a5c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a6e4:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c002a6e9:	74 10                	je     c002a6fb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c002a6eb:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c002a6f0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c002a6f5:	0f 85 c6 fe ff ff    	jne    c002a5c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a6fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002a6ff:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002a703:	83 e8 30             	sub    eax,0x30
c002a706:	83 ef 30             	sub    edi,0x30
c002a709:	c1 e0 04             	shl    eax,0x4
c002a70c:	09 f8                	or     eax,edi
c002a70e:	0f b6 c0             	movzx  eax,al
c002a711:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c002a715:	0f 85 a6 fe ff ff    	jne    c002a5c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a71b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002a71f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c002a723:	83 e8 30             	sub    eax,0x30
c002a726:	83 ef 30             	sub    edi,0x30
c002a729:	c1 e0 04             	shl    eax,0x4
c002a72c:	09 f8                	or     eax,edi
c002a72e:	0f b6 c0             	movzx  eax,al
c002a731:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c002a735:	0f 85 86 fe ff ff    	jne    c002a5c1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c002a73b:	50                   	push   eax
c002a73c:	50                   	push   eax
c002a73d:	8d 44 24 48          	lea    eax,[esp+0x48]
c002a741:	50                   	push   eax
c002a742:	55                   	push   ebp
c002a743:	e8 f8 5e fd ff       	call   c0000640 <strcpy>
c002a748:	83 c4 10             	add    esp,0x10
c002a74b:	eb 06                	jmp    c002a753 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c002a74d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c002a751:	31 ed                	xor    ebp,ebp
c002a753:	81 c4 4c 01 00 00    	add    esp,0x14c
c002a759:	89 e8                	mov    eax,ebp
c002a75b:	5b                   	pop    ebx
c002a75c:	5e                   	pop    esi
c002a75d:	5f                   	pop    edi
c002a75e:	5d                   	pop    ebp
c002a75f:	c3                   	ret    

c002a760 <PCI::checkBus(unsigned char)>:
c002a760:	56                   	push   esi
c002a761:	53                   	push   ebx
c002a762:	31 db                	xor    ebx,ebx
c002a764:	51                   	push   ecx
c002a765:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002a76a:	52                   	push   edx
c002a76b:	53                   	push   ebx
c002a76c:	43                   	inc    ebx
c002a76d:	56                   	push   esi
c002a76e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002a772:	e8 03 03 00 00       	call   c002aa7a <PCI::checkDevice(unsigned char, unsigned char)>
c002a777:	83 c4 10             	add    esp,0x10
c002a77a:	83 fb 20             	cmp    ebx,0x20
c002a77d:	75 eb                	jne    c002a76a <PCI::checkBus(unsigned char)+0xa>
c002a77f:	58                   	pop    eax
c002a780:	5b                   	pop    ebx
c002a781:	5e                   	pop    esi
c002a782:	c3                   	ret    
c002a783:	90                   	nop

c002a784 <PCI::foundDevice(PCIDeviceInfo)>:
c002a784:	55                   	push   ebp
c002a785:	57                   	push   edi
c002a786:	56                   	push   esi
c002a787:	53                   	push   ebx
c002a788:	83 ec 1c             	sub    esp,0x1c
c002a78b:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c002a790:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002a794:	3d ff ff 00 00       	cmp    eax,0xffff
c002a799:	0f 84 57 01 00 00    	je     c002a8f6 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a79f:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c002a7a4:	66 3d 06 04          	cmp    ax,0x406
c002a7a8:	75 2c                	jne    c002a7d6 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c002a7aa:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002a7af:	50                   	push   eax
c002a7b0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c002a7b5:	50                   	push   eax
c002a7b6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002a7bb:	50                   	push   eax
c002a7bc:	53                   	push   ebx
c002a7bd:	e8 64 fb ff ff       	call   c002a326 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002a7c2:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c002a7c6:	0f b6 c0             	movzx  eax,al
c002a7c9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c002a7cd:	83 c4 2c             	add    esp,0x2c
c002a7d0:	5b                   	pop    ebx
c002a7d1:	5e                   	pop    esi
c002a7d2:	5f                   	pop    edi
c002a7d3:	5d                   	pop    ebp
c002a7d4:	eb 8a                	jmp    c002a760 <PCI::checkBus(unsigned char)>
c002a7d6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002a7da:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c002a7e0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002a7e4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002a7e8:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c002a7ed:	85 d2                	test   edx,edx
c002a7ef:	74 36                	je     c002a827 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c002a7f1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c002a7f4:	85 c9                	test   ecx,ecx
c002a7f6:	74 2b                	je     c002a823 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a7f8:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c002a7fe:	31 ee                	xor    esi,ebp
c002a800:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c002a806:	75 1b                	jne    c002a823 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a808:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c002a80c:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c002a812:	75 0f                	jne    c002a823 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c002a814:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c002a81b:	39 f9                	cmp    ecx,edi
c002a81d:	0f 84 d3 00 00 00    	je     c002a8f6 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c002a823:	8b 12                	mov    edx,DWORD PTR [edx]
c002a825:	eb c6                	jmp    c002a7ed <PCI::foundDevice(PCIDeviceInfo)+0x69>
c002a827:	3d 01 06 00 00       	cmp    eax,0x601
c002a82c:	75 19                	jne    c002a847 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c002a82e:	83 ec 0c             	sub    esp,0xc
c002a831:	68 64 01 00 00       	push   0x164
c002a836:	e8 c3 ba fe ff       	call   c00162fe <malloc>
c002a83b:	89 c5                	mov    ebp,eax
c002a83d:	89 04 24             	mov    DWORD PTR [esp],eax
c002a840:	e8 a1 0e 00 00       	call   c002b6e6 <SATABus::SATABus()>
c002a845:	eb 1e                	jmp    c002a865 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c002a847:	3d 01 01 00 00       	cmp    eax,0x101
c002a84c:	75 62                	jne    c002a8b0 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c002a84e:	83 ec 0c             	sub    esp,0xc
c002a851:	68 70 02 00 00       	push   0x270
c002a856:	e8 a3 ba fe ff       	call   c00162fe <malloc>
c002a85b:	89 c5                	mov    ebp,eax
c002a85d:	89 04 24             	mov    DWORD PTR [esp],eax
c002a860:	e8 e5 02 00 00       	call   c002ab4a <IDE::IDE()>
c002a865:	5f                   	pop    edi
c002a866:	58                   	pop    eax
c002a867:	55                   	push   ebp
c002a868:	53                   	push   ebx
c002a869:	e8 a0 09 ff ff       	call   c001b20e <Device::addChild(Device*)>
c002a86e:	83 ec 1c             	sub    esp,0x1c
c002a871:	b9 09 00 00 00       	mov    ecx,0x9
c002a876:	fc                   	cld    
c002a877:	89 e7                	mov    edi,esp
c002a879:	8d 74 24 60          	lea    esi,[esp+0x60]
c002a87d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a87f:	55                   	push   ebp
c002a880:	e8 cf 08 ff ff       	call   c001b154 <Device::preOpenPCI(PCIDeviceInfo)>
c002a885:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002a888:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c002a88c:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c002a894:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c002a89c:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c002a8a4:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c002a8a7:	83 c4 4c             	add    esp,0x4c
c002a8aa:	5b                   	pop    ebx
c002a8ab:	5e                   	pop    esi
c002a8ac:	5f                   	pop    edi
c002a8ad:	5d                   	pop    ebp
c002a8ae:	ff e0                	jmp    eax
c002a8b0:	83 ec 0c             	sub    esp,0xc
c002a8b3:	68 58 01 00 00       	push   0x158
c002a8b8:	e8 41 ba fe ff       	call   c00162fe <malloc>
c002a8bd:	89 c5                	mov    ebp,eax
c002a8bf:	58                   	pop    eax
c002a8c0:	5a                   	pop    edx
c002a8c1:	68 86 35 03 c0       	push   0xc0033586
c002a8c6:	55                   	push   ebp
c002a8c7:	e8 f6 0b ff ff       	call   c001b4c2 <DriverlessDevice::DriverlessDevice(char const*)>
c002a8cc:	59                   	pop    ecx
c002a8cd:	5e                   	pop    esi
c002a8ce:	55                   	push   ebp
c002a8cf:	53                   	push   ebx
c002a8d0:	e8 39 09 ff ff       	call   c001b20e <Device::addChild(Device*)>
c002a8d5:	83 c4 10             	add    esp,0x10
c002a8d8:	b9 09 00 00 00       	mov    ecx,0x9
c002a8dd:	fc                   	cld    
c002a8de:	8d 7c 24 34          	lea    edi,[esp+0x34]
c002a8e2:	89 fe                	mov    esi,edi
c002a8e4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002a8e6:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c002a8ea:	83 c4 1c             	add    esp,0x1c
c002a8ed:	5b                   	pop    ebx
c002a8ee:	5e                   	pop    esi
c002a8ef:	5f                   	pop    edi
c002a8f0:	5d                   	pop    ebp
c002a8f1:	e9 5e 08 ff ff       	jmp    c001b154 <Device::preOpenPCI(PCIDeviceInfo)>
c002a8f6:	83 c4 1c             	add    esp,0x1c
c002a8f9:	5b                   	pop    ebx
c002a8fa:	5e                   	pop    esi
c002a8fb:	5f                   	pop    edi
c002a8fc:	5d                   	pop    ebp
c002a8fd:	c3                   	ret    

c002a8fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002a8fe:	55                   	push   ebp
c002a8ff:	57                   	push   edi
c002a900:	56                   	push   esi
c002a901:	53                   	push   ebx
c002a902:	83 ec 68             	sub    esp,0x68
c002a905:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c002a909:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c002a910:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002a914:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002a91b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002a920:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a924:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002a92b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c002a930:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c002a934:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c002a939:	6a 0c                	push   0xc
c002a93b:	57                   	push   edi
c002a93c:	53                   	push   ebx
c002a93d:	56                   	push   esi
c002a93e:	55                   	push   ebp
c002a93f:	e8 32 f8 ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a944:	83 c4 20             	add    esp,0x20
c002a947:	57                   	push   edi
c002a948:	53                   	push   ebx
c002a949:	56                   	push   esi
c002a94a:	55                   	push   ebp
c002a94b:	e8 1c f9 ff ff       	call   c002a26c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002a950:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c002a955:	57                   	push   edi
c002a956:	53                   	push   ebx
c002a957:	56                   	push   esi
c002a958:	55                   	push   ebp
c002a959:	e8 a4 f9 ff ff       	call   c002a302 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002a95e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c002a962:	83 c4 14             	add    esp,0x14
c002a965:	6a 3c                	push   0x3c
c002a967:	57                   	push   edi
c002a968:	53                   	push   ebx
c002a969:	56                   	push   esi
c002a96a:	55                   	push   ebp
c002a96b:	e8 06 f8 ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a970:	0f b6 c4             	movzx  eax,ah
c002a973:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002a977:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002a97b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c002a97f:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002a984:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c002a98a:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c002a990:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002a994:	83 c4 20             	add    esp,0x20
c002a997:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c002a99c:	74 30                	je     c002a9ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a99e:	31 c0                	xor    eax,eax
c002a9a0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c002a9a4:	7e 28                	jle    c002a9ce <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c002a9a6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c002a9ae:	39 cb                	cmp    ebx,ecx
c002a9b0:	75 19                	jne    c002a9cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002a9b2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c002a9ba:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002a9be:	75 0b                	jne    c002a9cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c002a9c0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c002a9c7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c002a9cb:	40                   	inc    eax
c002a9cc:	eb d2                	jmp    c002a9a0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c002a9ce:	31 d2                	xor    edx,edx
c002a9d0:	83 ec 0c             	sub    esp,0xc
c002a9d3:	57                   	push   edi
c002a9d4:	53                   	push   ebx
c002a9d5:	56                   	push   esi
c002a9d6:	52                   	push   edx
c002a9d7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c002a9db:	55                   	push   ebp
c002a9dc:	e8 6d f9 ff ff       	call   c002a34e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002a9e1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002a9e5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002a9e9:	42                   	inc    edx
c002a9ea:	83 c4 20             	add    esp,0x20
c002a9ed:	83 fa 06             	cmp    edx,0x6
c002a9f0:	75 de                	jne    c002a9d0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c002a9f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002a9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002a9fa:	c1 e2 08             	shl    edx,0x8
c002a9fd:	83 ec 0c             	sub    esp,0xc
c002aa00:	0f b6 c4             	movzx  eax,ah
c002aa03:	09 d0                	or     eax,edx
c002aa05:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c002aa0a:	6a 02                	push   0x2
c002aa0c:	57                   	push   edi
c002aa0d:	53                   	push   ebx
c002aa0e:	56                   	push   esi
c002aa0f:	55                   	push   ebp
c002aa10:	e8 61 f7 ff ff       	call   c002a176 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002aa15:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c002aa1a:	83 c4 20             	add    esp,0x20
c002aa1d:	57                   	push   edi
c002aa1e:	53                   	push   ebx
c002aa1f:	56                   	push   esi
c002aa20:	55                   	push   ebp
c002aa21:	e8 90 f8 ff ff       	call   c002a2b6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c002aa26:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c002aa2a:	57                   	push   edi
c002aa2b:	53                   	push   ebx
c002aa2c:	56                   	push   esi
c002aa2d:	55                   	push   ebp
c002aa2e:	e8 ed f7 ff ff       	call   c002a220 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aa33:	b9 09 00 00 00       	mov    ecx,0x9
c002aa38:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c002aa3d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c002aa41:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c002aa45:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c002aa49:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c002aa4d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c002aa51:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c002aa55:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c002aa59:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c002aa5d:	83 ec 0c             	sub    esp,0xc
c002aa60:	fc                   	cld    
c002aa61:	89 e7                	mov    edi,esp
c002aa63:	8d 74 24 58          	lea    esi,[esp+0x58]
c002aa67:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002aa69:	55                   	push   ebp
c002aa6a:	e8 15 fd ff ff       	call   c002a784 <PCI::foundDevice(PCIDeviceInfo)>
c002aa6f:	81 c4 8c 00 00 00    	add    esp,0x8c
c002aa75:	5b                   	pop    ebx
c002aa76:	5e                   	pop    esi
c002aa77:	5f                   	pop    edi
c002aa78:	5d                   	pop    ebp
c002aa79:	c3                   	ret    

c002aa7a <PCI::checkDevice(unsigned char, unsigned char)>:
c002aa7a:	55                   	push   ebp
c002aa7b:	57                   	push   edi
c002aa7c:	56                   	push   esi
c002aa7d:	53                   	push   ebx
c002aa7e:	83 ec 0c             	sub    esp,0xc
c002aa81:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c002aa85:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c002aa8a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002aa8f:	6a 00                	push   0x0
c002aa91:	56                   	push   esi
c002aa92:	57                   	push   edi
c002aa93:	55                   	push   ebp
c002aa94:	e8 87 f7 ff ff       	call   c002a220 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aa99:	6a 00                	push   0x0
c002aa9b:	56                   	push   esi
c002aa9c:	57                   	push   edi
c002aa9d:	55                   	push   ebp
c002aa9e:	e8 5b fe ff ff       	call   c002a8fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002aaa3:	83 c4 20             	add    esp,0x20
c002aaa6:	6a 00                	push   0x0
c002aaa8:	56                   	push   esi
c002aaa9:	57                   	push   edi
c002aaaa:	55                   	push   ebp
c002aaab:	e8 94 f7 ff ff       	call   c002a244 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002aab0:	83 c4 10             	add    esp,0x10
c002aab3:	a8 80                	test   al,0x80
c002aab5:	74 2d                	je     c002aae4 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c002aab7:	bb 01 00 00 00       	mov    ebx,0x1
c002aabc:	53                   	push   ebx
c002aabd:	56                   	push   esi
c002aabe:	57                   	push   edi
c002aabf:	55                   	push   ebp
c002aac0:	e8 5b f7 ff ff       	call   c002a220 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002aac5:	83 c4 10             	add    esp,0x10
c002aac8:	0f b7 c0             	movzx  eax,ax
c002aacb:	3d ff ff 00 00       	cmp    eax,0xffff
c002aad0:	74 0c                	je     c002aade <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c002aad2:	53                   	push   ebx
c002aad3:	56                   	push   esi
c002aad4:	57                   	push   edi
c002aad5:	55                   	push   ebp
c002aad6:	e8 23 fe ff ff       	call   c002a8fe <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002aadb:	83 c4 10             	add    esp,0x10
c002aade:	43                   	inc    ebx
c002aadf:	83 fb 08             	cmp    ebx,0x8
c002aae2:	75 d8                	jne    c002aabc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002aae4:	83 c4 0c             	add    esp,0xc
c002aae7:	5b                   	pop    ebx
c002aae8:	5e                   	pop    esi
c002aae9:	5f                   	pop    edi
c002aaea:	5d                   	pop    ebp
c002aaeb:	c3                   	ret    

c002aaec <PCI::detect()>:
c002aaec:	56                   	push   esi
c002aaed:	53                   	push   ebx
c002aaee:	53                   	push   ebx
c002aaef:	31 db                	xor    ebx,ebx
c002aaf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002aaf5:	6a 00                	push   0x0
c002aaf7:	6a 00                	push   0x0
c002aaf9:	6a 00                	push   0x0
c002aafb:	56                   	push   esi
c002aafc:	e8 43 f7 ff ff       	call   c002a244 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002ab01:	83 c4 10             	add    esp,0x10
c002ab04:	a8 80                	test   al,0x80
c002ab06:	75 21                	jne    c002ab29 <PCI::detect()+0x3d>
c002ab08:	51                   	push   ecx
c002ab09:	51                   	push   ecx
c002ab0a:	6a 00                	push   0x0
c002ab0c:	56                   	push   esi
c002ab0d:	e8 4e fc ff ff       	call   c002a760 <PCI::checkBus(unsigned char)>
c002ab12:	83 c4 10             	add    esp,0x10
c002ab15:	eb 2a                	jmp    c002ab41 <PCI::detect()+0x55>
c002ab17:	52                   	push   edx
c002ab18:	52                   	push   edx
c002ab19:	53                   	push   ebx
c002ab1a:	43                   	inc    ebx
c002ab1b:	56                   	push   esi
c002ab1c:	e8 3f fc ff ff       	call   c002a760 <PCI::checkBus(unsigned char)>
c002ab21:	83 c4 10             	add    esp,0x10
c002ab24:	83 fb 08             	cmp    ebx,0x8
c002ab27:	74 18                	je     c002ab41 <PCI::detect()+0x55>
c002ab29:	53                   	push   ebx
c002ab2a:	6a 00                	push   0x0
c002ab2c:	6a 00                	push   0x0
c002ab2e:	56                   	push   esi
c002ab2f:	e8 ec f6 ff ff       	call   c002a220 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002ab34:	83 c4 10             	add    esp,0x10
c002ab37:	0f b7 c0             	movzx  eax,ax
c002ab3a:	3d ff ff 00 00       	cmp    eax,0xffff
c002ab3f:	74 d6                	je     c002ab17 <PCI::detect()+0x2b>
c002ab41:	58                   	pop    eax
c002ab42:	5b                   	pop    ebx
c002ab43:	5e                   	pop    esi
c002ab44:	c3                   	ret    
c002ab45:	90                   	nop

c002ab46 <IDE::close(int, int, void*)>:
c002ab46:	83 c8 ff             	or     eax,0xffffffff
c002ab49:	c3                   	ret    

c002ab4a <IDE::IDE()>:
c002ab4a:	83 ec 0c             	sub    esp,0xc
c002ab4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ab51:	83 ec 08             	sub    esp,0x8
c002ab54:	68 cc 35 03 c0       	push   0xc00335cc
c002ab59:	50                   	push   eax
c002ab5a:	e8 09 0a ff ff       	call   c001b568 <HardDiskController::HardDiskController(char const*)>
c002ab5f:	83 c4 10             	add    esp,0x10
c002ab62:	ba 5c 36 03 c0       	mov    edx,0xc003365c
c002ab67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ab6b:	89 10                	mov    DWORD PTR [eax],edx
c002ab6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ab71:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c002ab78:	90                   	nop
c002ab79:	83 c4 0c             	add    esp,0xc
c002ab7c:	c3                   	ret    
c002ab7d:	90                   	nop

c002ab7e <IDE::prepareInterrupt(unsigned char)>:
c002ab7e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002ab83:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002ab87:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002ab8f:	c3                   	ret    

c002ab90 <selectDrive(unsigned char, unsigned char)>:
c002ab90:	c3                   	ret    
c002ab91:	90                   	nop

c002ab92 <IDE::getBase(unsigned char)>:
c002ab92:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c002ab97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ab9b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002aba3:	c3                   	ret    

c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c002aba4:	55                   	push   ebp
c002aba5:	57                   	push   edi
c002aba6:	56                   	push   esi
c002aba7:	53                   	push   ebx
c002aba8:	83 ec 1c             	sub    esp,0x1c
c002abab:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002abaf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002abb3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c002abb6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002abba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002abbe:	80 f9 03             	cmp    cl,0x3
c002abc1:	77 4f                	ja     c002ac12 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c002abc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002abc7:	0f b6 fa             	movzx  edi,dl
c002abca:	0f b6 db             	movzx  ebx,bl
c002abcd:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002abd0:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002abd5:	80 ca 80             	or     dl,0x80
c002abd8:	52                   	push   edx
c002abd9:	6a 0c                	push   0xc
c002abdb:	57                   	push   edi
c002abdc:	56                   	push   esi
c002abdd:	e8 c2 ff ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002abe2:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002abe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002abeb:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c002abef:	ee                   	out    dx,al
c002abf0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002abf5:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c002abf9:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002abfd:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002ac01:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002ac09:	83 c4 2c             	add    esp,0x2c
c002ac0c:	5b                   	pop    ebx
c002ac0d:	5e                   	pop    esi
c002ac0e:	5f                   	pop    edi
c002ac0f:	5d                   	pop    ebp
c002ac10:	eb 92                	jmp    c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ac12:	0f b6 cb             	movzx  ecx,bl
c002ac15:	83 f9 07             	cmp    ecx,0x7
c002ac18:	77 12                	ja     c002ac2c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c002ac1a:	0f b6 d2             	movzx  edx,dl
c002ac1d:	0f b6 db             	movzx  ebx,bl
c002ac20:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c002ac28:	01 da                	add    edx,ebx
c002ac2a:	eb 2f                	jmp    c002ac5b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ac2c:	83 f9 0d             	cmp    ecx,0xd
c002ac2f:	77 13                	ja     c002ac44 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c002ac31:	0f b6 d2             	movzx  edx,dl
c002ac34:	0f b6 db             	movzx  ebx,bl
c002ac37:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c002ac3e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002ac42:	eb 17                	jmp    c002ac5b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002ac44:	83 f9 15             	cmp    ecx,0x15
c002ac47:	77 13                	ja     c002ac5c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c002ac49:	0f b6 d2             	movzx  edx,dl
c002ac4c:	0f b6 db             	movzx  ebx,bl
c002ac4f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c002ac57:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002ac5b:	ee                   	out    dx,al
c002ac5c:	83 c4 1c             	add    esp,0x1c
c002ac5f:	5b                   	pop    ebx
c002ac60:	5e                   	pop    esi
c002ac61:	5f                   	pop    edi
c002ac62:	5d                   	pop    ebp
c002ac63:	c3                   	ret    

c002ac64 <IDE::read(unsigned char, unsigned char)>:
c002ac64:	55                   	push   ebp
c002ac65:	57                   	push   edi
c002ac66:	56                   	push   esi
c002ac67:	53                   	push   ebx
c002ac68:	83 ec 1c             	sub    esp,0x1c
c002ac6b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002ac6f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002ac73:	8d 43 f8             	lea    eax,[ebx-0x8]
c002ac76:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002ac7a:	3c 03                	cmp    al,0x3
c002ac7c:	77 40                	ja     c002acbe <IDE::read(unsigned char, unsigned char)+0x5a>
c002ac7e:	0f b6 f9             	movzx  edi,cl
c002ac81:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c002ac84:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002ac89:	0c 80                	or     al,0x80
c002ac8b:	50                   	push   eax
c002ac8c:	6a 0c                	push   0xc
c002ac8e:	57                   	push   edi
c002ac8f:	56                   	push   esi
c002ac90:	e8 0f ff ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002ac95:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002ac9a:	0f b6 d3             	movzx  edx,bl
c002ac9d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002aca1:	ec                   	in     al,dx
c002aca2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002aca6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c002acab:	52                   	push   edx
c002acac:	6a 0c                	push   0xc
c002acae:	57                   	push   edi
c002acaf:	56                   	push   esi
c002acb0:	e8 ef fe ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002acb5:	83 c4 20             	add    esp,0x20
c002acb8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002acbc:	eb 4c                	jmp    c002ad0a <IDE::read(unsigned char, unsigned char)+0xa6>
c002acbe:	0f b6 d3             	movzx  edx,bl
c002acc1:	83 fa 07             	cmp    edx,0x7
c002acc4:	77 12                	ja     c002acd8 <IDE::read(unsigned char, unsigned char)+0x74>
c002acc6:	0f b6 c9             	movzx  ecx,cl
c002acc9:	0f b6 d3             	movzx  edx,bl
c002accc:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c002acd4:	01 c2                	add    edx,eax
c002acd6:	eb 31                	jmp    c002ad09 <IDE::read(unsigned char, unsigned char)+0xa5>
c002acd8:	83 fa 0d             	cmp    edx,0xd
c002acdb:	77 13                	ja     c002acf0 <IDE::read(unsigned char, unsigned char)+0x8c>
c002acdd:	0f b6 c9             	movzx  ecx,cl
c002ace0:	0f b6 d3             	movzx  edx,bl
c002ace3:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c002acea:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002acee:	eb 19                	jmp    c002ad09 <IDE::read(unsigned char, unsigned char)+0xa5>
c002acf0:	31 c0                	xor    eax,eax
c002acf2:	83 fa 15             	cmp    edx,0x15
c002acf5:	77 13                	ja     c002ad0a <IDE::read(unsigned char, unsigned char)+0xa6>
c002acf7:	0f b6 c9             	movzx  ecx,cl
c002acfa:	0f b6 d3             	movzx  edx,bl
c002acfd:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c002ad05:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002ad09:	ec                   	in     al,dx
c002ad0a:	83 c4 1c             	add    esp,0x1c
c002ad0d:	5b                   	pop    ebx
c002ad0e:	5e                   	pop    esi
c002ad0f:	5f                   	pop    edi
c002ad10:	5d                   	pop    ebp
c002ad11:	c3                   	ret    

c002ad12 <IDE::waitInterrupt(unsigned char)>:
c002ad12:	55                   	push   ebp
c002ad13:	57                   	push   edi
c002ad14:	56                   	push   esi
c002ad15:	53                   	push   ebx
c002ad16:	31 db                	xor    ebx,ebx
c002ad18:	83 ec 0c             	sub    esp,0xc
c002ad1b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002ad1f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c002ad24:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002ad2c:	89 e8                	mov    eax,ebp
c002ad2e:	84 c0                	test   al,al
c002ad30:	75 30                	jne    c002ad62 <IDE::waitInterrupt(unsigned char)+0x50>
c002ad32:	50                   	push   eax
c002ad33:	6a 0c                	push   0xc
c002ad35:	56                   	push   esi
c002ad36:	57                   	push   edi
c002ad37:	e8 28 ff ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002ad3c:	83 c4 10             	add    esp,0x10
c002ad3f:	a8 01                	test   al,0x1
c002ad41:	75 27                	jne    c002ad6a <IDE::waitInterrupt(unsigned char)+0x58>
c002ad43:	f6 c3 04             	test   bl,0x4
c002ad46:	75 12                	jne    c002ad5a <IDE::waitInterrupt(unsigned char)+0x48>
c002ad48:	83 fb 32             	cmp    ebx,0x32
c002ad4b:	7e 0d                	jle    c002ad5a <IDE::waitInterrupt(unsigned char)+0x48>
c002ad4d:	83 ec 0c             	sub    esp,0xc
c002ad50:	6a 64                	push   0x64
c002ad52:	e8 05 a6 ff ff       	call   c002535c <milliTenthSleep(unsigned int)>
c002ad57:	83 c4 10             	add    esp,0x10
c002ad5a:	83 fb 3c             	cmp    ebx,0x3c
c002ad5d:	74 0b                	je     c002ad6a <IDE::waitInterrupt(unsigned char)+0x58>
c002ad5f:	43                   	inc    ebx
c002ad60:	eb c2                	jmp    c002ad24 <IDE::waitInterrupt(unsigned char)+0x12>
c002ad62:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002ad6a:	83 c4 0c             	add    esp,0xc
c002ad6d:	89 e8                	mov    eax,ebp
c002ad6f:	5b                   	pop    ebx
c002ad70:	5e                   	pop    esi
c002ad71:	5f                   	pop    edi
c002ad72:	5d                   	pop    ebp
c002ad73:	c3                   	ret    

c002ad74 <ideChannel0IRQHandler(regs*, void*)>:
c002ad74:	83 ec 10             	sub    esp,0x10
c002ad77:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ad7b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c002ad82:	6a 07                	push   0x7
c002ad84:	6a 00                	push   0x0
c002ad86:	50                   	push   eax
c002ad87:	e8 d8 fe ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002ad8c:	83 c4 1c             	add    esp,0x1c
c002ad8f:	c3                   	ret    

c002ad90 <ideChannel1IRQHandler(regs*, void*)>:
c002ad90:	83 ec 10             	sub    esp,0x10
c002ad93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002ad97:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002ad9e:	6a 07                	push   0x7
c002ada0:	6a 01                	push   0x1
c002ada2:	50                   	push   eax
c002ada3:	e8 bc fe ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002ada8:	83 c4 1c             	add    esp,0x1c
c002adab:	c3                   	ret    

c002adac <IDE::enableIRQs(unsigned char, bool)>:
c002adac:	57                   	push   edi
c002adad:	b8 02 00 00 00       	mov    eax,0x2
c002adb2:	56                   	push   esi
c002adb3:	53                   	push   ebx
c002adb4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002adb8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002adbc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002adc1:	74 02                	je     c002adc5 <IDE::enableIRQs(unsigned char, bool)+0x19>
c002adc3:	31 c0                	xor    eax,eax
c002adc5:	0f b6 db             	movzx  ebx,bl
c002adc8:	bf 04 00 00 00       	mov    edi,0x4
c002adcd:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c002add4:	50                   	push   eax
c002add5:	6a 0c                	push   0xc
c002add7:	53                   	push   ebx
c002add8:	56                   	push   esi
c002add9:	e8 c6 fd ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002adde:	83 c4 10             	add    esp,0x10
c002ade1:	50                   	push   eax
c002ade2:	6a 0c                	push   0xc
c002ade4:	53                   	push   ebx
c002ade5:	56                   	push   esi
c002ade6:	e8 79 fe ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002adeb:	83 c4 10             	add    esp,0x10
c002adee:	4f                   	dec    edi
c002adef:	75 f0                	jne    c002ade1 <IDE::enableIRQs(unsigned char, bool)+0x35>
c002adf1:	5b                   	pop    ebx
c002adf2:	5e                   	pop    esi
c002adf3:	5f                   	pop    edi
c002adf4:	c3                   	ret    
c002adf5:	90                   	nop

c002adf6 <IDE::open(int, int, void*)>:
c002adf6:	55                   	push   ebp
c002adf7:	57                   	push   edi
c002adf8:	56                   	push   esi
c002adf9:	53                   	push   ebx
c002adfa:	83 ec 1c             	sub    esp,0x1c
c002adfd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002ae01:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002ae0a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002ae13:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002ae1a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002ae21:	0f 85 de 02 00 00    	jne    c002b105 <IDE::open(int, int, void*)+0x30f>
c002ae27:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002ae2d:	88 04 24             	mov    BYTE PTR [esp],al
c002ae30:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002ae33:	83 e0 7f             	and    eax,0x7f
c002ae36:	83 f8 05             	cmp    eax,0x5
c002ae39:	74 05                	je     c002ae40 <IDE::open(int, int, void*)+0x4a>
c002ae3b:	83 f8 0f             	cmp    eax,0xf
c002ae3e:	75 32                	jne    c002ae72 <IDE::open(int, int, void*)+0x7c>
c002ae40:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002ae46:	83 e0 fc             	and    eax,0xfffffffc
c002ae49:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002ae50:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002ae56:	83 e0 fc             	and    eax,0xfffffffc
c002ae59:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002ae60:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002ae66:	83 e0 fc             	and    eax,0xfffffffc
c002ae69:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002ae70:	eb 14                	jmp    c002ae86 <IDE::open(int, int, void*)+0x90>
c002ae72:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002ae7c:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002ae86:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002ae8d:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002ae94:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002ae98:	89 c6                	mov    esi,eax
c002ae9a:	bf f8 0c 00 00       	mov    edi,0xcf8
c002ae9f:	c1 e6 10             	shl    esi,0x10
c002aea2:	89 e8                	mov    eax,ebp
c002aea4:	89 fa                	mov    edx,edi
c002aea6:	c1 e0 0b             	shl    eax,0xb
c002aea9:	09 f0                	or     eax,esi
c002aeab:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c002aeb2:	c1 e6 08             	shl    esi,0x8
c002aeb5:	09 c6                	or     esi,eax
c002aeb7:	89 f0                	mov    eax,esi
c002aeb9:	0d 08 00 00 80       	or     eax,0x80000008
c002aebe:	ef                   	out    dx,eax
c002aebf:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c002aec4:	89 ca                	mov    edx,ecx
c002aec6:	ed                   	in     eax,dx
c002aec7:	c1 e8 10             	shr    eax,0x10
c002aeca:	3d ff ff 00 00       	cmp    eax,0xffff
c002aecf:	0f 84 f9 00 00 00    	je     c002afce <IDE::open(int, int, void*)+0x1d8>
c002aed5:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c002aedb:	89 fa                	mov    edx,edi
c002aedd:	89 f0                	mov    eax,esi
c002aedf:	ef                   	out    dx,eax
c002aee0:	b0 fe                	mov    al,0xfe
c002aee2:	89 ca                	mov    edx,ecx
c002aee4:	ee                   	out    dx,al
c002aee5:	89 f0                	mov    eax,esi
c002aee7:	89 fa                	mov    edx,edi
c002aee9:	ef                   	out    dx,eax
c002aeea:	89 ca                	mov    edx,ecx
c002aeec:	ed                   	in     eax,dx
c002aeed:	3c fe                	cmp    al,0xfe
c002aeef:	0f 85 a9 00 00 00    	jne    c002af9e <IDE::open(int, int, void*)+0x1a8>
c002aef5:	8b 15 bc a9 03 c0    	mov    edx,DWORD PTR ds:0xc003a9bc
c002aefb:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c002af02:	74 33                	je     c002af37 <IDE::open(int, int, void*)+0x141>
c002af04:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c002af0a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002af0e:	40                   	inc    eax
c002af0f:	83 ec 0c             	sub    esp,0xc
c002af12:	0f b6 c0             	movzx  eax,al
c002af15:	50                   	push   eax
c002af16:	55                   	push   ebp
c002af17:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002af1b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c002af21:	51                   	push   ecx
c002af22:	e8 35 35 ff ff       	call   c001e45c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002af27:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002af2c:	83 c4 1c             	add    esp,0x1c
c002af2f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002af35:	eb 0a                	jmp    c002af41 <IDE::open(int, int, void*)+0x14b>
c002af37:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002af41:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c002af48:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002af4f:	c1 e1 10             	shl    ecx,0x10
c002af52:	c1 e0 08             	shl    eax,0x8
c002af55:	bf f8 0c 00 00       	mov    edi,0xcf8
c002af5a:	09 c1                	or     ecx,eax
c002af5c:	89 fa                	mov    edx,edi
c002af5e:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002af65:	c1 e0 0b             	shl    eax,0xb
c002af68:	09 c1                	or     ecx,eax
c002af6a:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002af70:	89 c8                	mov    eax,ecx
c002af72:	ef                   	out    dx,eax
c002af73:	be fc 0c 00 00       	mov    esi,0xcfc
c002af78:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002af7e:	89 f2                	mov    edx,esi
c002af80:	ee                   	out    dx,al
c002af81:	89 c8                	mov    eax,ecx
c002af83:	89 fa                	mov    edx,edi
c002af85:	ef                   	out    dx,eax
c002af86:	89 f2                	mov    edx,esi
c002af88:	ed                   	in     eax,dx
c002af89:	0f b6 c0             	movzx  eax,al
c002af8c:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002af92:	74 4a                	je     c002afde <IDE::open(int, int, void*)+0x1e8>
c002af94:	83 ec 0c             	sub    esp,0xc
c002af97:	68 e4 35 03 c0       	push   0xc00335e4
c002af9c:	eb 38                	jmp    c002afd6 <IDE::open(int, int, void*)+0x1e0>
c002af9e:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002afa7:	75 1b                	jne    c002afc4 <IDE::open(int, int, void*)+0x1ce>
c002afa9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c002afad:	3d 80 00 00 00       	cmp    eax,0x80
c002afb2:	74 07                	je     c002afbb <IDE::open(int, int, void*)+0x1c5>
c002afb4:	3d 8a 00 00 00       	cmp    eax,0x8a
c002afb9:	75 09                	jne    c002afc4 <IDE::open(int, int, void*)+0x1ce>
c002afbb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002afc2:	eb 1a                	jmp    c002afde <IDE::open(int, int, void*)+0x1e8>
c002afc4:	83 ec 0c             	sub    esp,0xc
c002afc7:	68 ec 35 03 c0       	push   0xc00335ec
c002afcc:	eb 08                	jmp    c002afd6 <IDE::open(int, int, void*)+0x1e0>
c002afce:	83 ec 0c             	sub    esp,0xc
c002afd1:	68 1d 36 03 c0       	push   0xc003361d
c002afd6:	e8 cb 51 ff ff       	call   c00201a6 <KePanic(char const*)>
c002afdb:	83 c4 10             	add    esp,0x10
c002afde:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c002afe5:	74 1a                	je     c002b001 <IDE::open(int, int, void*)+0x20b>
c002afe7:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c002afed:	83 e0 fc             	and    eax,0xfffffffc
c002aff0:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002aff7:	83 c0 08             	add    eax,0x8
c002affa:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002b001:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002b007:	89 c2                	mov    edx,eax
c002b009:	83 e2 0f             	and    edx,0xf
c002b00c:	83 fa 08             	cmp    edx,0x8
c002b00f:	75 0a                	jne    c002b01b <IDE::open(int, int, void*)+0x225>
c002b011:	83 e8 02             	sub    eax,0x2
c002b014:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b01b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002b021:	89 c2                	mov    edx,eax
c002b023:	83 e2 0f             	and    edx,0xf
c002b026:	83 fa 08             	cmp    edx,0x8
c002b029:	75 0a                	jne    c002b035 <IDE::open(int, int, void*)+0x23f>
c002b02b:	83 e8 02             	sub    eax,0x2
c002b02e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b035:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c002b03c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002b043:	89 d0                	mov    eax,edx
c002b045:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b048:	8d 7a 01             	lea    edi,[edx+0x1]
c002b04b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b04f:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002b053:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b057:	83 e1 3f             	and    ecx,0x3f
c002b05a:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b05e:	89 f9                	mov    ecx,edi
c002b060:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002b067:	0f b6 c9             	movzx  ecx,cl
c002b06a:	8d 78 02             	lea    edi,[eax+0x2]
c002b06d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b070:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b074:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c002b078:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b07c:	83 e2 3f             	and    edx,0x3f
c002b07f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b083:	89 f9                	mov    ecx,edi
c002b085:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002b08b:	0f b6 d1             	movzx  edx,cl
c002b08e:	8d 78 03             	lea    edi,[eax+0x3]
c002b091:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b094:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b098:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002b09c:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c002b0a0:	83 e1 3f             	and    ecx,0x3f
c002b0a3:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c002b0a7:	89 f9                	mov    ecx,edi
c002b0a9:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c002b0af:	0f b6 c9             	movzx  ecx,cl
c002b0b2:	8d 78 04             	lea    edi,[eax+0x4]
c002b0b5:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002b0b8:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002b0bc:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002b0c0:	89 fa                	mov    edx,edi
c002b0c2:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002b0c8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c002b0cc:	83 e2 3f             	and    edx,0x3f
c002b0cf:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c002b0d3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c002b0da:	66 85 f6             	test   si,si
c002b0dd:	74 65                	je     c002b144 <IDE::open(int, int, void*)+0x34e>
c002b0df:	89 f9                	mov    ecx,edi
c002b0e1:	83 c0 05             	add    eax,0x5
c002b0e4:	0f b6 d1             	movzx  edx,cl
c002b0e7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002b0ea:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002b0ee:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002b0f2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002b0f8:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c002b0fc:	83 e0 3f             	and    eax,0x3f
c002b0ff:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c002b103:	eb 3f                	jmp    c002b144 <IDE::open(int, int, void*)+0x34e>
c002b105:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002b10b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002b112:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002b119:	05 06 02 00 00       	add    eax,0x206
c002b11e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002b125:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002b12c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002b133:	05 06 02 00 00       	add    eax,0x206
c002b138:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002b13f:	e9 bd fe ff ff       	jmp    c002b001 <IDE::open(int, int, void*)+0x20b>
c002b144:	50                   	push   eax
c002b145:	50                   	push   eax
c002b146:	6a 00                	push   0x0
c002b148:	53                   	push   ebx
c002b149:	e8 30 fa ff ff       	call   c002ab7e <IDE::prepareInterrupt(unsigned char)>
c002b14e:	5a                   	pop    edx
c002b14f:	59                   	pop    ecx
c002b150:	6a 01                	push   0x1
c002b152:	53                   	push   ebx
c002b153:	e8 26 fa ff ff       	call   c002ab7e <IDE::prepareInterrupt(unsigned char)>
c002b158:	83 c4 0c             	add    esp,0xc
c002b15b:	6a 00                	push   0x0
c002b15d:	6a 00                	push   0x0
c002b15f:	53                   	push   ebx
c002b160:	e8 47 fc ff ff       	call   c002adac <IDE::enableIRQs(unsigned char, bool)>
c002b165:	83 c4 0c             	add    esp,0xc
c002b168:	6a 00                	push   0x0
c002b16a:	6a 01                	push   0x1
c002b16c:	53                   	push   ebx
c002b16d:	e8 3a fc ff ff       	call   c002adac <IDE::enableIRQs(unsigned char, bool)>
c002b172:	83 c4 10             	add    esp,0x10
c002b175:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002b17c:	74 34                	je     c002b1b2 <IDE::open(int, int, void*)+0x3bc>
c002b17e:	83 ec 0c             	sub    esp,0xc
c002b181:	53                   	push   ebx
c002b182:	6a 01                	push   0x1
c002b184:	68 74 ad 02 c0       	push   0xc002ad74
c002b189:	6a 0e                	push   0xe
c002b18b:	53                   	push   ebx
c002b18c:	e8 29 00 ff ff       	call   c001b1ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b191:	83 c4 14             	add    esp,0x14
c002b194:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002b19a:	53                   	push   ebx
c002b19b:	6a 01                	push   0x1
c002b19d:	68 90 ad 02 c0       	push   0xc002ad90
c002b1a2:	6a 0f                	push   0xf
c002b1a4:	53                   	push   ebx
c002b1a5:	e8 10 00 ff ff       	call   c001b1ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b1aa:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002b1b0:	eb 38                	jmp    c002b1ea <IDE::open(int, int, void*)+0x3f4>
c002b1b2:	83 ec 0c             	sub    esp,0xc
c002b1b5:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002b1bf:	53                   	push   ebx
c002b1c0:	6a 00                	push   0x0
c002b1c2:	68 74 ad 02 c0       	push   0xc002ad74
c002b1c7:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002b1cd:	53                   	push   ebx
c002b1ce:	e8 e7 ff fe ff       	call   c001b1ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b1d3:	83 c4 14             	add    esp,0x14
c002b1d6:	53                   	push   ebx
c002b1d7:	6a 00                	push   0x0
c002b1d9:	68 90 ad 02 c0       	push   0xc002ad90
c002b1de:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c002b1e4:	53                   	push   ebx
c002b1e5:	e8 d0 ff fe ff       	call   c001b1ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002b1ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b1ec:	83 c4 20             	add    esp,0x20
c002b1ef:	83 ec 0c             	sub    esp,0xc
c002b1f2:	53                   	push   ebx
c002b1f3:	ff 50 18             	call   DWORD PTR [eax+0x18]
c002b1f6:	83 c4 0c             	add    esp,0xc
c002b1f9:	6a 07                	push   0x7
c002b1fb:	6a 00                	push   0x0
c002b1fd:	53                   	push   ebx
c002b1fe:	e8 61 fa ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b203:	83 c4 0c             	add    esp,0xc
c002b206:	6a 07                	push   0x7
c002b208:	6a 01                	push   0x1
c002b20a:	53                   	push   ebx
c002b20b:	e8 54 fa ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b210:	83 c4 0c             	add    esp,0xc
c002b213:	6a 01                	push   0x1
c002b215:	6a 00                	push   0x0
c002b217:	53                   	push   ebx
c002b218:	e8 8f fb ff ff       	call   c002adac <IDE::enableIRQs(unsigned char, bool)>
c002b21d:	83 c4 0c             	add    esp,0xc
c002b220:	6a 01                	push   0x1
c002b222:	6a 01                	push   0x1
c002b224:	53                   	push   ebx
c002b225:	e8 82 fb ff ff       	call   c002adac <IDE::enableIRQs(unsigned char, bool)>
c002b22a:	83 c4 2c             	add    esp,0x2c
c002b22d:	31 c0                	xor    eax,eax
c002b22f:	5b                   	pop    ebx
c002b230:	5e                   	pop    esi
c002b231:	5f                   	pop    edi
c002b232:	5d                   	pop    ebp
c002b233:	c3                   	ret    

c002b234 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c002b234:	55                   	push   ebp
c002b235:	57                   	push   edi
c002b236:	56                   	push   esi
c002b237:	53                   	push   ebx
c002b238:	83 ec 1c             	sub    esp,0x1c
c002b23b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002b23f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b243:	8d 42 f8             	lea    eax,[edx-0x8]
c002b246:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b24a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002b24e:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002b252:	3c 03                	cmp    al,0x3
c002b254:	77 5a                	ja     c002b2b0 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c002b256:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002b25a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002b25e:	0f b6 db             	movzx  ebx,bl
c002b261:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c002b264:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b269:	0c 80                	or     al,0x80
c002b26b:	50                   	push   eax
c002b26c:	6a 0c                	push   0xc
c002b26e:	53                   	push   ebx
c002b26f:	56                   	push   esi
c002b270:	e8 2f f9 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b275:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c002b27a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002b27e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002b282:	0f b6 d2             	movzx  edx,dl
c002b285:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c002b289:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b28b:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c002b290:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002b294:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002b298:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002b29c:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002b2a4:	83 c4 2c             	add    esp,0x2c
c002b2a7:	5b                   	pop    ebx
c002b2a8:	5e                   	pop    esi
c002b2a9:	5f                   	pop    edi
c002b2aa:	5d                   	pop    ebp
c002b2ab:	e9 f4 f8 ff ff       	jmp    c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b2b0:	0f b6 c2             	movzx  eax,dl
c002b2b3:	83 f8 07             	cmp    eax,0x7
c002b2b6:	77 12                	ja     c002b2ca <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c002b2b8:	0f b6 c2             	movzx  eax,dl
c002b2bb:	0f b6 db             	movzx  ebx,bl
c002b2be:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c002b2c6:	01 c2                	add    edx,eax
c002b2c8:	eb 2f                	jmp    c002b2f9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b2ca:	83 f8 0d             	cmp    eax,0xd
c002b2cd:	77 13                	ja     c002b2e2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c002b2cf:	0f b6 db             	movzx  ebx,bl
c002b2d2:	0f b6 d2             	movzx  edx,dl
c002b2d5:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c002b2dc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002b2e0:	eb 17                	jmp    c002b2f9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c002b2e2:	83 f8 15             	cmp    eax,0x15
c002b2e5:	77 14                	ja     c002b2fb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c002b2e7:	0f b6 db             	movzx  ebx,bl
c002b2ea:	0f b6 d2             	movzx  edx,dl
c002b2ed:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c002b2f5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002b2f9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002b2fb:	83 c4 1c             	add    esp,0x1c
c002b2fe:	5b                   	pop    ebx
c002b2ff:	5e                   	pop    esi
c002b300:	5f                   	pop    edi
c002b301:	5d                   	pop    ebp
c002b302:	c3                   	ret    
c002b303:	90                   	nop

c002b304 <IDE::detect()>:
c002b304:	55                   	push   ebp
c002b305:	57                   	push   edi
c002b306:	56                   	push   esi
c002b307:	53                   	push   ebx
c002b308:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002b30e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002b315:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002b31c:	0f 85 a4 02 00 00    	jne    c002b5c6 <IDE::detect()+0x2c2>
c002b322:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c002b329:	31 f6                	xor    esi,esi
c002b32b:	31 ed                	xor    ebp,ebp
c002b32d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002b335:	89 e8                	mov    eax,ebp
c002b337:	c1 e0 06             	shl    eax,0x6
c002b33a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002b342:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002b346:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002b34a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b34e:	c1 e0 04             	shl    eax,0x4
c002b351:	83 c8 a0             	or     eax,0xffffffa0
c002b354:	0f b6 c0             	movzx  eax,al
c002b357:	50                   	push   eax
c002b358:	6a 06                	push   0x6
c002b35a:	56                   	push   esi
c002b35b:	53                   	push   ebx
c002b35c:	e8 43 f8 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b361:	83 c4 0c             	add    esp,0xc
c002b364:	6a 0c                	push   0xc
c002b366:	56                   	push   esi
c002b367:	53                   	push   ebx
c002b368:	e8 f7 f8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b36d:	83 c4 0c             	add    esp,0xc
c002b370:	6a 0c                	push   0xc
c002b372:	56                   	push   esi
c002b373:	53                   	push   ebx
c002b374:	e8 eb f8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b379:	83 c4 0c             	add    esp,0xc
c002b37c:	6a 0c                	push   0xc
c002b37e:	56                   	push   esi
c002b37f:	53                   	push   ebx
c002b380:	e8 df f8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b385:	83 c4 0c             	add    esp,0xc
c002b388:	6a 0c                	push   0xc
c002b38a:	56                   	push   esi
c002b38b:	53                   	push   ebx
c002b38c:	e8 d3 f8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b391:	68 ec 00 00 00       	push   0xec
c002b396:	6a 07                	push   0x7
c002b398:	56                   	push   esi
c002b399:	53                   	push   ebx
c002b39a:	e8 05 f8 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b39f:	83 c4 1c             	add    esp,0x1c
c002b3a2:	6a 0c                	push   0xc
c002b3a4:	56                   	push   esi
c002b3a5:	53                   	push   ebx
c002b3a6:	e8 b9 f8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b3ab:	83 c4 0c             	add    esp,0xc
c002b3ae:	6a 0c                	push   0xc
c002b3b0:	56                   	push   esi
c002b3b1:	53                   	push   ebx
c002b3b2:	e8 ad f8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b3b7:	83 c4 0c             	add    esp,0xc
c002b3ba:	6a 0c                	push   0xc
c002b3bc:	56                   	push   esi
c002b3bd:	53                   	push   ebx
c002b3be:	e8 a1 f8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b3c3:	83 c4 0c             	add    esp,0xc
c002b3c6:	6a 0c                	push   0xc
c002b3c8:	56                   	push   esi
c002b3c9:	53                   	push   ebx
c002b3ca:	e8 95 f8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b3cf:	83 c4 0c             	add    esp,0xc
c002b3d2:	6a 0c                	push   0xc
c002b3d4:	56                   	push   esi
c002b3d5:	53                   	push   ebx
c002b3d6:	e8 89 f8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b3db:	83 c4 10             	add    esp,0x10
c002b3de:	84 c0                	test   al,al
c002b3e0:	0f 84 60 01 00 00    	je     c002b546 <IDE::detect()+0x242>
c002b3e6:	31 ff                	xor    edi,edi
c002b3e8:	50                   	push   eax
c002b3e9:	6a 0c                	push   0xc
c002b3eb:	56                   	push   esi
c002b3ec:	53                   	push   ebx
c002b3ed:	e8 72 f8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b3f2:	83 c4 10             	add    esp,0x10
c002b3f5:	a8 01                	test   al,0x1
c002b3f7:	0f 85 6a 01 00 00    	jne    c002b567 <IDE::detect()+0x263>
c002b3fd:	a8 80                	test   al,0x80
c002b3ff:	75 04                	jne    c002b405 <IDE::detect()+0x101>
c002b401:	a8 08                	test   al,0x8
c002b403:	75 23                	jne    c002b428 <IDE::detect()+0x124>
c002b405:	47                   	inc    edi
c002b406:	81 ff 17 01 00 00    	cmp    edi,0x117
c002b40c:	7e da                	jle    c002b3e8 <IDE::detect()+0xe4>
c002b40e:	83 ec 0c             	sub    esp,0xc
c002b411:	6a 32                	push   0x32
c002b413:	e8 44 9f ff ff       	call   c002535c <milliTenthSleep(unsigned int)>
c002b418:	83 c4 10             	add    esp,0x10
c002b41b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002b421:	75 c5                	jne    c002b3e8 <IDE::detect()+0xe4>
c002b423:	e9 3f 01 00 00       	jmp    c002b567 <IDE::detect()+0x263>
c002b428:	31 c9                	xor    ecx,ecx
c002b42a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002b42e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002b432:	83 ec 0c             	sub    esp,0xc
c002b435:	68 80 00 00 00       	push   0x80
c002b43a:	57                   	push   edi
c002b43b:	6a 00                	push   0x0
c002b43d:	56                   	push   esi
c002b43e:	53                   	push   ebx
c002b43f:	e8 f0 fd ff ff       	call   c002b234 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002b444:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c002b449:	89 e8                	mov    eax,ebp
c002b44b:	89 d1                	mov    ecx,edx
c002b44d:	c1 e0 06             	shl    eax,0x6
c002b450:	01 d8                	add    eax,ebx
c002b452:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002b459:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002b460:	89 f2                	mov    edx,esi
c002b462:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002b468:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002b46c:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002b472:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002b476:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002b47d:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c002b485:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002b48c:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c002b494:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002b49a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002b4a1:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c002b4a7:	8d 54 24 58          	lea    edx,[esp+0x58]
c002b4ab:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002b4af:	83 c4 20             	add    esp,0x20
c002b4b2:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c002b4b5:	83 c0 02             	add    eax,0x2
c002b4b8:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002b4be:	83 c7 02             	add    edi,0x2
c002b4c1:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c002b4c4:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002b4ca:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002b4ce:	75 e2                	jne    c002b4b2 <IDE::detect()+0x1ae>
c002b4d0:	89 e8                	mov    eax,ebp
c002b4d2:	c1 e0 06             	shl    eax,0x6
c002b4d5:	01 d8                	add    eax,ebx
c002b4d7:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c002b4de:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c002b4e5:	c1 ea 09             	shr    edx,0x9
c002b4e8:	83 e2 01             	and    edx,0x1
c002b4eb:	80 e1 01             	and    cl,0x1
c002b4ee:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c002b4f4:	75 22                	jne    c002b518 <IDE::detect()+0x214>
c002b4f6:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002b4fd:	74 46                	je     c002b545 <IDE::detect()+0x241>
c002b4ff:	83 ec 0c             	sub    esp,0xc
c002b502:	68 7c 01 00 00       	push   0x17c
c002b507:	e8 f2 ad fe ff       	call   c00162fe <malloc>
c002b50c:	89 c7                	mov    edi,eax
c002b50e:	89 04 24             	mov    DWORD PTR [esp],eax
c002b511:	e8 2e 05 00 00       	call   c002ba44 <ATA::ATA()>
c002b516:	eb 17                	jmp    c002b52f <IDE::detect()+0x22b>
c002b518:	83 ec 0c             	sub    esp,0xc
c002b51b:	68 84 01 00 00       	push   0x184
c002b520:	e8 d9 ad fe ff       	call   c00162fe <malloc>
c002b525:	89 c7                	mov    edi,eax
c002b527:	89 04 24             	mov    DWORD PTR [esp],eax
c002b52a:	e8 59 0e 00 00       	call   c002c388 <ATAPI::ATAPI()>
c002b52f:	5a                   	pop    edx
c002b530:	59                   	pop    ecx
c002b531:	57                   	push   edi
c002b532:	53                   	push   ebx
c002b533:	e8 d6 fc fe ff       	call   c001b20e <Device::addChild(Device*)>
c002b538:	8b 07                	mov    eax,DWORD PTR [edi]
c002b53a:	53                   	push   ebx
c002b53b:	55                   	push   ebp
c002b53c:	6a 00                	push   0x0
c002b53e:	57                   	push   edi
c002b53f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002b542:	83 c4 20             	add    esp,0x20
c002b545:	45                   	inc    ebp
c002b546:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c002b54b:	74 0d                	je     c002b55a <IDE::detect()+0x256>
c002b54d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c002b555:	e9 db fd ff ff       	jmp    c002b335 <IDE::detect()+0x31>
c002b55a:	4e                   	dec    esi
c002b55b:	74 69                	je     c002b5c6 <IDE::detect()+0x2c2>
c002b55d:	be 01 00 00 00       	mov    esi,0x1
c002b562:	e9 c6 fd ff ff       	jmp    c002b32d <IDE::detect()+0x29>
c002b567:	50                   	push   eax
c002b568:	6a 04                	push   0x4
c002b56a:	56                   	push   esi
c002b56b:	53                   	push   ebx
c002b56c:	e8 f3 f6 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b571:	83 c4 0c             	add    esp,0xc
c002b574:	89 c7                	mov    edi,eax
c002b576:	6a 05                	push   0x5
c002b578:	56                   	push   esi
c002b579:	53                   	push   ebx
c002b57a:	e8 e5 f6 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b57f:	83 c4 10             	add    esp,0x10
c002b582:	89 f9                	mov    ecx,edi
c002b584:	0f b6 c0             	movzx  eax,al
c002b587:	0f b6 f9             	movzx  edi,cl
c002b58a:	83 ff 14             	cmp    edi,0x14
c002b58d:	75 07                	jne    c002b596 <IDE::detect()+0x292>
c002b58f:	3d eb 00 00 00       	cmp    eax,0xeb
c002b594:	eb 0a                	jmp    c002b5a0 <IDE::detect()+0x29c>
c002b596:	3d 96 00 00 00       	cmp    eax,0x96
c002b59b:	75 a9                	jne    c002b546 <IDE::detect()+0x242>
c002b59d:	83 ff 69             	cmp    edi,0x69
c002b5a0:	75 a4                	jne    c002b546 <IDE::detect()+0x242>
c002b5a2:	68 a1 00 00 00       	push   0xa1
c002b5a7:	6a 07                	push   0x7
c002b5a9:	56                   	push   esi
c002b5aa:	53                   	push   ebx
c002b5ab:	e8 f4 f5 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002b5b0:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c002b5b7:	e8 a0 9d ff ff       	call   c002535c <milliTenthSleep(unsigned int)>
c002b5bc:	83 c4 10             	add    esp,0x10
c002b5bf:	b1 01                	mov    cl,0x1
c002b5c1:	e9 64 fe ff ff       	jmp    c002b42a <IDE::detect()+0x126>
c002b5c6:	81 c4 1c 02 00 00    	add    esp,0x21c
c002b5cc:	5b                   	pop    ebx
c002b5cd:	5e                   	pop    esi
c002b5ce:	5f                   	pop    edi
c002b5cf:	5d                   	pop    ebp
c002b5d0:	c3                   	ret    
c002b5d1:	90                   	nop

c002b5d2 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002b5d2:	55                   	push   ebp
c002b5d3:	57                   	push   edi
c002b5d4:	56                   	push   esi
c002b5d5:	53                   	push   ebx
c002b5d6:	83 ec 1c             	sub    esp,0x1c
c002b5d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002b5dd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002b5e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002b5e5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002b5e9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002b5ed:	88 c3                	mov    bl,al
c002b5ef:	25 ff 00 00 00       	and    eax,0xff
c002b5f4:	0f 84 88 00 00 00    	je     c002b682 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b5fa:	83 ec 0c             	sub    esp,0xc
c002b5fd:	89 c7                	mov    edi,eax
c002b5ff:	68 47 36 03 c0       	push   0xc0033647
c002b604:	e8 84 db fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002b609:	83 c4 10             	add    esp,0x10
c002b60c:	83 ff 01             	cmp    edi,0x1
c002b60f:	74 6b                	je     c002b67c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c002b611:	83 ff 02             	cmp    edi,0x2
c002b614:	75 58                	jne    c002b66e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c002b616:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c002b61b:	01 ff                	add    edi,edi
c002b61d:	50                   	push   eax
c002b61e:	09 fe                	or     esi,edi
c002b620:	6a 01                	push   0x1
c002b622:	89 f0                	mov    eax,esi
c002b624:	0f b6 f0             	movzx  esi,al
c002b627:	c1 e6 06             	shl    esi,0x6
c002b62a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c002b632:	50                   	push   eax
c002b633:	55                   	push   ebp
c002b634:	e8 2b f6 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b639:	83 c4 10             	add    esp,0x10
c002b63c:	a8 01                	test   al,0x1
c002b63e:	74 02                	je     c002b642 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c002b640:	b3 07                	mov    bl,0x7
c002b642:	a8 02                	test   al,0x2
c002b644:	74 02                	je     c002b648 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c002b646:	b3 03                	mov    bl,0x3
c002b648:	a8 04                	test   al,0x4
c002b64a:	74 02                	je     c002b64e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c002b64c:	b3 14                	mov    bl,0x14
c002b64e:	a8 08                	test   al,0x8
c002b650:	74 02                	je     c002b654 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c002b652:	b3 03                	mov    bl,0x3
c002b654:	a8 10                	test   al,0x10
c002b656:	74 02                	je     c002b65a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c002b658:	b3 15                	mov    bl,0x15
c002b65a:	a8 20                	test   al,0x20
c002b65c:	74 02                	je     c002b660 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c002b65e:	b3 03                	mov    bl,0x3
c002b660:	a8 40                	test   al,0x40
c002b662:	74 02                	je     c002b666 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c002b664:	b3 16                	mov    bl,0x16
c002b666:	a8 80                	test   al,0x80
c002b668:	74 18                	je     c002b682 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b66a:	b3 0d                	mov    bl,0xd
c002b66c:	eb 14                	jmp    c002b682 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b66e:	83 ff 03             	cmp    edi,0x3
c002b671:	74 0d                	je     c002b680 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c002b673:	83 ff 04             	cmp    edi,0x4
c002b676:	75 0a                	jne    c002b682 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b678:	b3 08                	mov    bl,0x8
c002b67a:	eb 06                	jmp    c002b682 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b67c:	b3 13                	mov    bl,0x13
c002b67e:	eb 02                	jmp    c002b682 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c002b680:	b3 17                	mov    bl,0x17
c002b682:	83 c4 1c             	add    esp,0x1c
c002b685:	88 d8                	mov    al,bl
c002b687:	5b                   	pop    ebx
c002b688:	5e                   	pop    esi
c002b689:	5f                   	pop    edi
c002b68a:	5d                   	pop    ebp
c002b68b:	c3                   	ret    

c002b68c <IDE::polling(unsigned char, unsigned int)>:
c002b68c:	57                   	push   edi
c002b68d:	56                   	push   esi
c002b68e:	53                   	push   ebx
c002b68f:	bb 04 00 00 00       	mov    ebx,0x4
c002b694:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002b698:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002b69d:	52                   	push   edx
c002b69e:	6a 0c                	push   0xc
c002b6a0:	56                   	push   esi
c002b6a1:	57                   	push   edi
c002b6a2:	e8 bd f5 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b6a7:	83 c4 10             	add    esp,0x10
c002b6aa:	4b                   	dec    ebx
c002b6ab:	75 f0                	jne    c002b69d <IDE::polling(unsigned char, unsigned int)+0x11>
c002b6ad:	bb a0 86 01 00       	mov    ebx,0x186a0
c002b6b2:	50                   	push   eax
c002b6b3:	6a 0c                	push   0xc
c002b6b5:	56                   	push   esi
c002b6b6:	57                   	push   edi
c002b6b7:	e8 a8 f5 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002b6bc:	83 c4 10             	add    esp,0x10
c002b6bf:	a8 01                	test   al,0x1
c002b6c1:	75 17                	jne    c002b6da <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b6c3:	a8 20                	test   al,0x20
c002b6c5:	75 0f                	jne    c002b6d6 <IDE::polling(unsigned char, unsigned int)+0x4a>
c002b6c7:	4b                   	dec    ebx
c002b6c8:	74 10                	je     c002b6da <IDE::polling(unsigned char, unsigned int)+0x4e>
c002b6ca:	a8 80                	test   al,0x80
c002b6cc:	75 e4                	jne    c002b6b2 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b6ce:	a8 08                	test   al,0x8
c002b6d0:	74 e0                	je     c002b6b2 <IDE::polling(unsigned char, unsigned int)+0x26>
c002b6d2:	31 c0                	xor    eax,eax
c002b6d4:	eb 06                	jmp    c002b6dc <IDE::polling(unsigned char, unsigned int)+0x50>
c002b6d6:	b0 01                	mov    al,0x1
c002b6d8:	eb 02                	jmp    c002b6dc <IDE::polling(unsigned char, unsigned int)+0x50>
c002b6da:	b0 02                	mov    al,0x2
c002b6dc:	5b                   	pop    ebx
c002b6dd:	5e                   	pop    esi
c002b6de:	5f                   	pop    edi
c002b6df:	c3                   	ret    

c002b6e0 <SATABus::close(int, int, void*)>:
c002b6e0:	31 c0                	xor    eax,eax
c002b6e2:	c3                   	ret    
c002b6e3:	90                   	nop

c002b6e4 <SATABus::detect()>:
c002b6e4:	c3                   	ret    
c002b6e5:	90                   	nop

c002b6e6 <SATABus::SATABus()>:
c002b6e6:	83 ec 0c             	sub    esp,0xc
c002b6e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b6ed:	83 ec 08             	sub    esp,0x8
c002b6f0:	68 80 36 03 c0       	push   0xc0033680
c002b6f5:	50                   	push   eax
c002b6f6:	e8 6d fe fe ff       	call   c001b568 <HardDiskController::HardDiskController(char const*)>
c002b6fb:	83 c4 10             	add    esp,0x10
c002b6fe:	ba ac 36 03 c0       	mov    edx,0xc00336ac
c002b703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b707:	89 10                	mov    DWORD PTR [eax],edx
c002b709:	83 ec 0c             	sub    esp,0xc
c002b70c:	6a 50                	push   0x50
c002b70e:	e8 c3 af fe ff       	call   c00166d6 <Phys::allocateContiguousPages(int)>
c002b713:	83 c4 10             	add    esp,0x10
c002b716:	89 c2                	mov    edx,eax
c002b718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b71c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002b722:	83 ec 0c             	sub    esp,0xc
c002b725:	6a 50                	push   0x50
c002b727:	e8 29 c7 fe ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c002b72c:	83 c4 10             	add    esp,0x10
c002b72f:	89 c2                	mov    edx,eax
c002b731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002b735:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002b73b:	a1 b0 aa 03 c0       	mov    eax,ds:0xc003aab0
c002b740:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b744:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002b74a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002b74e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002b754:	83 ec 0c             	sub    esp,0xc
c002b757:	6a 03                	push   0x3
c002b759:	6a 50                	push   0x50
c002b75b:	51                   	push   ecx
c002b75c:	52                   	push   edx
c002b75d:	50                   	push   eax
c002b75e:	e8 ff cf fe ff       	call   c0018762 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002b763:	83 c4 20             	add    esp,0x20
c002b766:	90                   	nop
c002b767:	83 c4 0c             	add    esp,0xc
c002b76a:	c3                   	ret    
c002b76b:	90                   	nop

c002b76c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002b76c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b770:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c002b773:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002b776:	09 c2                	or     edx,eax
c002b778:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002b77c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002b782:	8b 08                	mov    ecx,DWORD PTR [eax]
c002b784:	31 c0                	xor    eax,eax
c002b786:	c1 e9 08             	shr    ecx,0x8
c002b789:	83 e1 0f             	and    ecx,0xf
c002b78c:	39 c8                	cmp    eax,ecx
c002b78e:	74 0a                	je     c002b79a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c002b790:	f6 c2 01             	test   dl,0x1
c002b793:	74 08                	je     c002b79d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002b795:	d1 ea                	shr    edx,1
c002b797:	40                   	inc    eax
c002b798:	eb f2                	jmp    c002b78c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c002b79a:	83 c8 ff             	or     eax,0xffffffff
c002b79d:	c3                   	ret    

c002b79e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002b79e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002b7a2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c002b7a5:	89 c2                	mov    edx,eax
c002b7a7:	c1 ea 08             	shr    edx,0x8
c002b7aa:	83 e2 0f             	and    edx,0xf
c002b7ad:	4a                   	dec    edx
c002b7ae:	75 32                	jne    c002b7e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b7b0:	83 e0 0f             	and    eax,0xf
c002b7b3:	83 f8 03             	cmp    eax,0x3
c002b7b6:	75 2a                	jne    c002b7e2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002b7b8:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002b7bb:	b8 02 00 00 00       	mov    eax,0x2
c002b7c0:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002b7c6:	74 1c                	je     c002b7e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b7c8:	b8 04 00 00 00       	mov    eax,0x4
c002b7cd:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c002b7d3:	74 0f                	je     c002b7e4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002b7d5:	31 c0                	xor    eax,eax
c002b7d7:	83 fa 03             	cmp    edx,0x3
c002b7da:	0f 94 c0             	sete   al
c002b7dd:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002b7e1:	c3                   	ret    
c002b7e2:	31 c0                	xor    eax,eax
c002b7e4:	c3                   	ret    
c002b7e5:	90                   	nop

c002b7e6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002b7e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b7ea:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b7ed:	0f ba e2 0f          	bt     edx,0xf
c002b7f1:	72 f7                	jb     c002b7ea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c002b7f3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b7f6:	83 ca 10             	or     edx,0x10
c002b7f9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b7fc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b7ff:	83 ca 01             	or     edx,0x1
c002b802:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b805:	c3                   	ret    

c002b806 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002b806:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002b80a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b80d:	83 e2 fe             	and    edx,0xfffffffe
c002b810:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b813:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b816:	83 e2 ef             	and    edx,0xffffffef
c002b819:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002b81c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b81f:	0f ba e2 0e          	bt     edx,0xe
c002b823:	72 f7                	jb     c002b81c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b825:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002b828:	0f ba e2 0f          	bt     edx,0xf
c002b82c:	72 ee                	jb     c002b81c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c002b82e:	c3                   	ret    
c002b82f:	90                   	nop

c002b830 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c002b830:	55                   	push   ebp
c002b831:	57                   	push   edi
c002b832:	56                   	push   esi
c002b833:	53                   	push   ebx
c002b834:	83 ec 1c             	sub    esp,0x1c
c002b837:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002b83b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002b83f:	53                   	push   ebx
c002b840:	56                   	push   esi
c002b841:	e8 c0 ff ff ff       	call   c002b806 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002b846:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002b84a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b850:	83 ec 0c             	sub    esp,0xc
c002b853:	c1 e5 0a             	shl    ebp,0xa
c002b856:	01 e8                	add    eax,ebp
c002b858:	89 03                	mov    DWORD PTR [ebx],eax
c002b85a:	8b 03                	mov    eax,DWORD PTR [ebx]
c002b85c:	68 00 04 00 00       	push   0x400
c002b861:	6a 00                	push   0x0
c002b863:	50                   	push   eax
c002b864:	e8 87 4c fd ff       	call   c00004f0 <memset>
c002b869:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c002b86f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c002b873:	01 e8                	add    eax,ebp
c002b875:	83 c4 1c             	add    esp,0x1c
c002b878:	89 03                	mov    DWORD PTR [ebx],eax
c002b87a:	c1 e2 08             	shl    edx,0x8
c002b87d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002b884:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c002b88a:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002b890:	01 f8                	add    eax,edi
c002b892:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002b895:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c002b898:	68 00 01 00 00       	push   0x100
c002b89d:	6a 00                	push   0x0
c002b89f:	50                   	push   eax
c002b8a0:	e8 4b 4c fd ff       	call   c00004f0 <memset>
c002b8a5:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c002b8ab:	01 fa                	add    edx,edi
c002b8ad:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002b8b1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c002b8b4:	c1 e7 0d             	shl    edi,0xd
c002b8b7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002b8be:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002b8c4:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c002b8ca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002b8ce:	31 ff                	xor    edi,edi
c002b8d0:	83 c4 10             	add    esp,0x10
c002b8d3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002b8d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002b8dd:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002b8e3:	83 c5 20             	add    ebp,0x20
c002b8e6:	01 f8                	add    eax,edi
c002b8e8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b8eb:	52                   	push   edx
c002b8ec:	68 00 01 00 00       	push   0x100
c002b8f1:	6a 00                	push   0x0
c002b8f3:	50                   	push   eax
c002b8f4:	e8 f7 4b fd ff       	call   c00004f0 <memset>
c002b8f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002b8fd:	83 c4 10             	add    esp,0x10
c002b900:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002b906:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c002b90d:	01 f8                	add    eax,edi
c002b90f:	81 c7 00 01 00 00    	add    edi,0x100
c002b915:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002b918:	81 ff 00 20 00 00    	cmp    edi,0x2000
c002b91e:	75 b3                	jne    c002b8d3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c002b920:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b927:	50                   	push   eax
c002b928:	50                   	push   eax
c002b929:	53                   	push   ebx
c002b92a:	56                   	push   esi
c002b92b:	e8 b6 fe ff ff       	call   c002b7e6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002b930:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c002b937:	83 c4 2c             	add    esp,0x2c
c002b93a:	5b                   	pop    ebx
c002b93b:	5e                   	pop    esi
c002b93c:	5f                   	pop    edi
c002b93d:	5d                   	pop    ebp
c002b93e:	c3                   	ret    
c002b93f:	90                   	nop

c002b940 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002b940:	55                   	push   ebp
c002b941:	57                   	push   edi
c002b942:	56                   	push   esi
c002b943:	53                   	push   ebx
c002b944:	31 db                	xor    ebx,ebx
c002b946:	83 ec 0c             	sub    esp,0xc
c002b949:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002b94d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002b951:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002b954:	f7 c7 01 00 00 00    	test   edi,0x1
c002b95a:	74 7a                	je     c002b9d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b95c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002b960:	89 d8                	mov    eax,ebx
c002b962:	c1 e0 07             	shl    eax,0x7
c002b965:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c002b96c:	55                   	push   ebp
c002b96d:	56                   	push   esi
c002b96e:	e8 2b fe ff ff       	call   c002b79e <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002b973:	5a                   	pop    edx
c002b974:	83 f8 01             	cmp    eax,0x1
c002b977:	59                   	pop    ecx
c002b978:	75 21                	jne    c002b99b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c002b97a:	50                   	push   eax
c002b97b:	53                   	push   ebx
c002b97c:	55                   	push   ebp
c002b97d:	56                   	push   esi
c002b97e:	e8 ad fe ff ff       	call   c002b830 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b983:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c002b98a:	e8 6f a9 fe ff       	call   c00162fe <malloc>
c002b98f:	89 c5                	mov    ebp,eax
c002b991:	89 04 24             	mov    DWORD PTR [esp],eax
c002b994:	e8 bb 10 00 00       	call   c002ca54 <SATA::SATA()>
c002b999:	eb 24                	jmp    c002b9bf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c002b99b:	83 f8 04             	cmp    eax,0x4
c002b99e:	75 36                	jne    c002b9d6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c002b9a0:	51                   	push   ecx
c002b9a1:	53                   	push   ebx
c002b9a2:	55                   	push   ebp
c002b9a3:	56                   	push   esi
c002b9a4:	e8 87 fe ff ff       	call   c002b830 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002b9a9:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c002b9b0:	e8 49 a9 fe ff       	call   c00162fe <malloc>
c002b9b5:	89 c5                	mov    ebp,eax
c002b9b7:	89 04 24             	mov    DWORD PTR [esp],eax
c002b9ba:	e8 2b 18 00 00       	call   c002d1ea <SATAPI::SATAPI()>
c002b9bf:	58                   	pop    eax
c002b9c0:	5a                   	pop    edx
c002b9c1:	55                   	push   ebp
c002b9c2:	56                   	push   esi
c002b9c3:	e8 46 f8 fe ff       	call   c001b20e <Device::addChild(Device*)>
c002b9c8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c002b9cb:	56                   	push   esi
c002b9cc:	6a 00                	push   0x0
c002b9ce:	53                   	push   ebx
c002b9cf:	55                   	push   ebp
c002b9d0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c002b9d3:	83 c4 20             	add    esp,0x20
c002b9d6:	d1 ef                	shr    edi,1
c002b9d8:	43                   	inc    ebx
c002b9d9:	83 fb 20             	cmp    ebx,0x20
c002b9dc:	0f 85 72 ff ff ff    	jne    c002b954 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002b9e2:	83 c4 0c             	add    esp,0xc
c002b9e5:	5b                   	pop    ebx
c002b9e6:	5e                   	pop    esi
c002b9e7:	5f                   	pop    edi
c002b9e8:	5d                   	pop    ebp
c002b9e9:	c3                   	ret    

c002b9ea <SATABus::open(int, int, void*)>:
c002b9ea:	53                   	push   ebx
c002b9eb:	83 ec 08             	sub    esp,0x8
c002b9ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002b9f2:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c002b9f8:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002b9fe:	e8 e9 94 ff ff       	call   c0024eec <KeDisablePreemption()>
c002ba03:	52                   	push   edx
c002ba04:	52                   	push   edx
c002ba05:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c002ba0b:	53                   	push   ebx
c002ba0c:	e8 2f ff ff ff       	call   c002b940 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002ba11:	e8 fe 94 ff ff       	call   c0024f14 <KeRestorePreemption()>
c002ba16:	31 c0                	xor    eax,eax
c002ba18:	83 c4 18             	add    esp,0x18
c002ba1b:	5b                   	pop    ebx
c002ba1c:	c3                   	ret    
c002ba1d:	90                   	nop

c002ba1e <ATA::close(int, int, void*)>:
c002ba1e:	83 ec 0c             	sub    esp,0xc
c002ba21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba25:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002ba2b:	85 c0                	test   eax,eax
c002ba2d:	74 0c                	je     c002ba3b <ATA::close(int, int, void*)+0x1d>
c002ba2f:	83 ec 0c             	sub    esp,0xc
c002ba32:	8b 10                	mov    edx,DWORD PTR [eax]
c002ba34:	50                   	push   eax
c002ba35:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002ba38:	83 c4 10             	add    esp,0x10
c002ba3b:	31 c0                	xor    eax,eax
c002ba3d:	83 c4 0c             	add    esp,0xc
c002ba40:	c3                   	ret    
c002ba41:	90                   	nop

c002ba42 <ATA::powerSaving(PowerSavingLevel)>:
c002ba42:	c3                   	ret    
c002ba43:	90                   	nop

c002ba44 <ATA::ATA()>:
c002ba44:	83 ec 0c             	sub    esp,0xc
c002ba47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba4b:	83 ec 04             	sub    esp,0x4
c002ba4e:	68 00 02 00 00       	push   0x200
c002ba53:	68 85 37 03 c0       	push   0xc0033785
c002ba58:	50                   	push   eax
c002ba59:	e8 94 fb fe ff       	call   c001b5f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002ba5e:	83 c4 10             	add    esp,0x10
c002ba61:	ba ec 36 03 c0       	mov    edx,0xc00336ec
c002ba66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ba6a:	89 10                	mov    DWORD PTR [eax],edx
c002ba6c:	90                   	nop
c002ba6d:	83 c4 0c             	add    esp,0xc
c002ba70:	c3                   	ret    
c002ba71:	90                   	nop

c002ba72 <ATA::flush(bool)>:
c002ba72:	53                   	push   ebx
c002ba73:	83 ec 08             	sub    esp,0x8
c002ba76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002ba7a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002ba7f:	83 f8 01             	cmp    eax,0x1
c002ba82:	19 c0                	sbb    eax,eax
c002ba84:	83 e0 fd             	and    eax,0xfffffffd
c002ba87:	05 ea 00 00 00       	add    eax,0xea
c002ba8c:	50                   	push   eax
c002ba8d:	6a 07                	push   0x7
c002ba8f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002ba96:	50                   	push   eax
c002ba97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002ba9d:	e8 02 f1 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002baa2:	83 c4 0c             	add    esp,0xc
c002baa5:	6a 00                	push   0x0
c002baa7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002baae:	50                   	push   eax
c002baaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bab5:	e8 d2 fb ff ff       	call   c002b68c <IDE::polling(unsigned char, unsigned int)>
c002baba:	83 c4 18             	add    esp,0x18
c002babd:	5b                   	pop    ebx
c002babe:	c3                   	ret    
c002babf:	90                   	nop

c002bac0 <ATA::readyForCommand()>:
c002bac0:	56                   	push   esi
c002bac1:	53                   	push   ebx
c002bac2:	53                   	push   ebx
c002bac3:	31 db                	xor    ebx,ebx
c002bac5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002bac9:	51                   	push   ecx
c002baca:	6a 0c                	push   0xc
c002bacc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002bad3:	50                   	push   eax
c002bad4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002bada:	e8 85 f1 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002badf:	83 c4 10             	add    esp,0x10
c002bae2:	a8 88                	test   al,0x88
c002bae4:	74 1f                	je     c002bb05 <ATA::readyForCommand()+0x45>
c002bae6:	43                   	inc    ebx
c002bae7:	83 fb 63             	cmp    ebx,0x63
c002baea:	7e dd                	jle    c002bac9 <ATA::readyForCommand()+0x9>
c002baec:	83 ec 0c             	sub    esp,0xc
c002baef:	6a 0a                	push   0xa
c002baf1:	e8 66 98 ff ff       	call   c002535c <milliTenthSleep(unsigned int)>
c002baf6:	83 c4 10             	add    esp,0x10
c002baf9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c002baff:	75 c8                	jne    c002bac9 <ATA::readyForCommand()+0x9>
c002bb01:	31 c0                	xor    eax,eax
c002bb03:	eb 02                	jmp    c002bb07 <ATA::readyForCommand()+0x47>
c002bb05:	b0 01                	mov    al,0x1
c002bb07:	5a                   	pop    edx
c002bb08:	5b                   	pop    ebx
c002bb09:	5e                   	pop    esi
c002bb0a:	c3                   	ret    
c002bb0b:	90                   	nop

c002bb0c <ATA::access(unsigned long long, int, void*, bool)>:
c002bb0c:	55                   	push   ebp
c002bb0d:	57                   	push   edi
c002bb0e:	56                   	push   esi
c002bb0f:	53                   	push   ebx
c002bb10:	83 ec 2c             	sub    esp,0x2c
c002bb13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002bb17:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002bb1b:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002bb1f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002bb23:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002bb27:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002bb2b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002bb2f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002bb35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002bb39:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bb3f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002bb43:	c1 e0 06             	shl    eax,0x6
c002bb46:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c002bb4e:	74 5d                	je     c002bbad <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c002bb50:	89 fa                	mov    edx,edi
c002bb52:	89 f0                	mov    eax,esi
c002bb54:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002bb58:	c1 ea 1c             	shr    edx,0x1c
c002bb5b:	89 d1                	mov    ecx,edx
c002bb5d:	09 c1                	or     ecx,eax
c002bb5f:	74 25                	je     c002bb86 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c002bb61:	31 ed                	xor    ebp,ebp
c002bb63:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002bb6a:	89 fa                	mov    edx,edi
c002bb6c:	89 f0                	mov    eax,esi
c002bb6e:	0f ad d0             	shrd   eax,edx,cl
c002bb71:	d3 ea                	shr    edx,cl
c002bb73:	f6 c1 20             	test   cl,0x20
c002bb76:	74 02                	je     c002bb7a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002bb78:	89 d0                	mov    eax,edx
c002bb7a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c002bb7e:	45                   	inc    ebp
c002bb7f:	83 fd 06             	cmp    ebp,0x6
c002bb82:	75 df                	jne    c002bb63 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002bb84:	eb 76                	jmp    c002bbfc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002bb86:	89 f0                	mov    eax,esi
c002bb88:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c002bb8d:	89 fa                	mov    edx,edi
c002bb8f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bb96:	0f ac d0 10          	shrd   eax,edx,0x10
c002bb9a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bb9f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002bba3:	c1 ee 18             	shr    esi,0x18
c002bba6:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c002bbab:	eb 56                	jmp    c002bc03 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bbad:	6a 00                	push   0x0
c002bbaf:	6a 3f                	push   0x3f
c002bbb1:	57                   	push   edi
c002bbb2:	56                   	push   esi
c002bbb3:	e8 c8 2a 00 00       	call   c002e680 <__umoddi3>
c002bbb8:	83 c4 10             	add    esp,0x10
c002bbbb:	40                   	inc    eax
c002bbbc:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002bbc0:	6a 00                	push   0x0
c002bbc2:	68 f0 03 00 00       	push   0x3f0
c002bbc7:	57                   	push   edi
c002bbc8:	56                   	push   esi
c002bbc9:	e8 b2 29 00 00       	call   c002e580 <__udivdi3>
c002bbce:	83 c4 10             	add    esp,0x10
c002bbd1:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002bbd6:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002bbdd:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002bbe2:	6a 00                	push   0x0
c002bbe4:	6a 3f                	push   0x3f
c002bbe6:	57                   	push   edi
c002bbe7:	56                   	push   esi
c002bbe8:	e8 93 29 00 00       	call   c002e580 <__udivdi3>
c002bbed:	83 c4 10             	add    esp,0x10
c002bbf0:	83 e0 0f             	and    eax,0xf
c002bbf3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002bbf8:	89 c6                	mov    esi,eax
c002bbfa:	eb 07                	jmp    c002bc03 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c002bbfc:	31 f6                	xor    esi,esi
c002bbfe:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002bc03:	bf 01 00 00 00       	mov    edi,0x1
c002bc08:	50                   	push   eax
c002bc09:	6a 00                	push   0x0
c002bc0b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc12:	50                   	push   eax
c002bc13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002bc17:	e8 90 f1 ff ff       	call   c002adac <IDE::enableIRQs(unsigned char, bool)>
c002bc1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bc1f:	e8 9c fe ff ff       	call   c002bac0 <ATA::readyForCommand()>
c002bc24:	83 c4 10             	add    esp,0x10
c002bc27:	84 c0                	test   al,al
c002bc29:	0f 84 69 02 00 00    	je     c002be98 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002bc2f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002bc35:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bc3b:	c1 e0 04             	shl    eax,0x4
c002bc3e:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c002bc45:	09 c6                	or     esi,eax
c002bc47:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c002bc4c:	75 05                	jne    c002bc53 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c002bc4e:	83 ce a0             	or     esi,0xffffffa0
c002bc51:	eb 03                	jmp    c002bc56 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c002bc53:	83 ce e0             	or     esi,0xffffffe0
c002bc56:	89 f0                	mov    eax,esi
c002bc58:	0f b6 f0             	movzx  esi,al
c002bc5b:	56                   	push   esi
c002bc5c:	6a 06                	push   0x6
c002bc5e:	51                   	push   ecx
c002bc5f:	52                   	push   edx
c002bc60:	e8 3f ef ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bc65:	83 c4 10             	add    esp,0x10
c002bc68:	6a 00                	push   0x0
c002bc6a:	6a 01                	push   0x1
c002bc6c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc73:	50                   	push   eax
c002bc74:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bc7a:	e8 25 ef ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bc7f:	83 c4 10             	add    esp,0x10
c002bc82:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c002bc87:	83 f8 02             	cmp    eax,0x2
c002bc8a:	75 6e                	jne    c002bcfa <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c002bc8c:	6a 00                	push   0x0
c002bc8e:	6a 08                	push   0x8
c002bc90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bc97:	50                   	push   eax
c002bc98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bc9e:	e8 01 ef ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bca3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c002bca8:	50                   	push   eax
c002bca9:	6a 09                	push   0x9
c002bcab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcb2:	50                   	push   eax
c002bcb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bcb9:	e8 e6 ee ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bcbe:	83 c4 20             	add    esp,0x20
c002bcc1:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c002bcc6:	50                   	push   eax
c002bcc7:	6a 0a                	push   0xa
c002bcc9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bcd0:	50                   	push   eax
c002bcd1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bcd7:	e8 c8 ee ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bcdc:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c002bce1:	50                   	push   eax
c002bce2:	6a 0b                	push   0xb
c002bce4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bceb:	50                   	push   eax
c002bcec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bcf2:	e8 ad ee ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bcf7:	83 c4 20             	add    esp,0x20
c002bcfa:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c002bcff:	50                   	push   eax
c002bd00:	6a 02                	push   0x2
c002bd02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd09:	50                   	push   eax
c002bd0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd10:	e8 8f ee ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd15:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002bd1a:	50                   	push   eax
c002bd1b:	6a 03                	push   0x3
c002bd1d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd24:	50                   	push   eax
c002bd25:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd2b:	e8 74 ee ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd30:	83 c4 20             	add    esp,0x20
c002bd33:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c002bd38:	50                   	push   eax
c002bd39:	6a 04                	push   0x4
c002bd3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd42:	50                   	push   eax
c002bd43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd49:	e8 56 ee ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd4e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002bd53:	50                   	push   eax
c002bd54:	6a 05                	push   0x5
c002bd56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bd5d:	50                   	push   eax
c002bd5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bd64:	e8 3b ee ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bd69:	83 c4 20             	add    esp,0x20
c002bd6c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002bd71:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c002bd76:	74 11                	je     c002bd89 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c002bd78:	b8 30 00 00 00       	mov    eax,0x30
c002bd7d:	83 fa 02             	cmp    edx,0x2
c002bd80:	75 16                	jne    c002bd98 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002bd82:	b8 34 00 00 00       	mov    eax,0x34
c002bd87:	eb 0f                	jmp    c002bd98 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002bd89:	b8 20 00 00 00       	mov    eax,0x20
c002bd8e:	83 fa 02             	cmp    edx,0x2
c002bd91:	75 05                	jne    c002bd98 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c002bd93:	b8 24 00 00 00       	mov    eax,0x24
c002bd98:	50                   	push   eax
c002bd99:	6a 07                	push   0x7
c002bd9b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bda2:	50                   	push   eax
c002bda3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bda9:	e8 f6 ed ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bdae:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c002bdb2:	83 c4 10             	add    esp,0x10
c002bdb5:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c002bdba:	85 f6                	test   esi,esi
c002bdbc:	0f 84 b3 00 00 00    	je     c002be75 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c002bdc2:	50                   	push   eax
c002bdc3:	6a 01                	push   0x1
c002bdc5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bdcc:	50                   	push   eax
c002bdcd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdd3:	e8 b4 f8 ff ff       	call   c002b68c <IDE::polling(unsigned char, unsigned int)>
c002bdd8:	83 c4 10             	add    esp,0x10
c002bddb:	0f b6 f8             	movzx  edi,al
c002bdde:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002bde4:	85 ff                	test   edi,edi
c002bde6:	74 1d                	je     c002be05 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c002bde8:	57                   	push   edi
c002bde9:	0f b6 d2             	movzx  edx,dl
c002bdec:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c002bdf3:	50                   	push   eax
c002bdf4:	52                   	push   edx
c002bdf5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bdfb:	e8 d2 f7 ff ff       	call   c002b5d2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002be00:	e9 90 00 00 00       	jmp    c002be95 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c002be05:	85 ed                	test   ebp,ebp
c002be07:	74 3b                	je     c002be44 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c002be09:	31 c9                	xor    ecx,ecx
c002be0b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002be0f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002be13:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c002be17:	50                   	push   eax
c002be18:	50                   	push   eax
c002be19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002be20:	50                   	push   eax
c002be21:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be27:	e8 66 ed ff ff       	call   c002ab92 <IDE::getBase(unsigned char)>
c002be2c:	89 c2                	mov    edx,eax
c002be2e:	89 f8                	mov    eax,edi
c002be30:	66 ef                	out    dx,ax
c002be32:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002be36:	83 c4 10             	add    esp,0x10
c002be39:	41                   	inc    ecx
c002be3a:	81 f9 00 01 00 00    	cmp    ecx,0x100
c002be40:	75 c9                	jne    c002be0b <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c002be42:	eb 23                	jmp    c002be67 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c002be44:	0f b6 d2             	movzx  edx,dl
c002be47:	51                   	push   ecx
c002be48:	51                   	push   ecx
c002be49:	52                   	push   edx
c002be4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002be50:	e8 3d ed ff ff       	call   c002ab92 <IDE::getBase(unsigned char)>
c002be55:	b9 00 01 00 00       	mov    ecx,0x100
c002be5a:	89 c2                	mov    edx,eax
c002be5c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002be60:	fc                   	cld    
c002be61:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002be64:	83 c4 10             	add    esp,0x10
c002be67:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002be6f:	4e                   	dec    esi
c002be70:	e9 45 ff ff ff       	jmp    c002bdba <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c002be75:	31 ff                	xor    edi,edi
c002be77:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002be7c:	74 1a                	je     c002be98 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c002be7e:	50                   	push   eax
c002be7f:	50                   	push   eax
c002be80:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c002be85:	83 f8 02             	cmp    eax,0x2
c002be88:	0f 94 c0             	sete   al
c002be8b:	0f b6 c0             	movzx  eax,al
c002be8e:	50                   	push   eax
c002be8f:	53                   	push   ebx
c002be90:	e8 dd fb ff ff       	call   c002ba72 <ATA::flush(bool)>
c002be95:	83 c4 10             	add    esp,0x10
c002be98:	83 c4 2c             	add    esp,0x2c
c002be9b:	89 f8                	mov    eax,edi
c002be9d:	5b                   	pop    ebx
c002be9e:	5e                   	pop    esi
c002be9f:	5f                   	pop    edi
c002bea0:	5d                   	pop    ebp
c002bea1:	c3                   	ret    

c002bea2 <ATA::detectCHS()>:
c002bea2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002bea6:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002beac:	c1 e0 06             	shl    eax,0x6
c002beaf:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002beb5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002bebf:	c7 44 24 04 d0 36 03 c0 	mov    DWORD PTR [esp+0x4],0xc00336d0
c002bec7:	e9 da 42 ff ff       	jmp    c00201a6 <KePanic(char const*)>

c002becc <ATA::open(int, int, void*)>:
c002becc:	53                   	push   ebx
c002becd:	83 ec 08             	sub    esp,0x8
c002bed0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002bed4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002bed8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002bedc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002bee2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002bee8:	c1 e0 06             	shl    eax,0x6
c002beeb:	01 d0                	add    eax,edx
c002beed:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002bef4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c002befa:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002bf01:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002bf0b:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002bf11:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002bf18:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c002bf1f:	75 0c                	jne    c002bf2d <ATA::open(int, int, void*)+0x61>
c002bf21:	83 ec 0c             	sub    esp,0xc
c002bf24:	53                   	push   ebx
c002bf25:	e8 78 ff ff ff       	call   c002bea2 <ATA::detectCHS()>
c002bf2a:	83 c4 10             	add    esp,0x10
c002bf2d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002bf33:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002bf39:	c1 e0 06             	shl    eax,0x6
c002bf3c:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c002bf43:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002bf4d:	d1 e8                	shr    eax,1
c002bf4f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002bf55:	6a 04                	push   0x4
c002bf57:	6a 0c                	push   0xc
c002bf59:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf60:	50                   	push   eax
c002bf61:	52                   	push   edx
c002bf62:	e8 3d ec ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bf67:	90                   	nop
c002bf68:	90                   	nop
c002bf69:	6a 00                	push   0x0
c002bf6b:	6a 0c                	push   0xc
c002bf6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002bf74:	50                   	push   eax
c002bf75:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002bf7b:	e8 24 ec ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002bf80:	83 c4 14             	add    esp,0x14
c002bf83:	53                   	push   ebx
c002bf84:	e8 d1 f6 fe ff       	call   c001b65a <PhysicalDisk::startCache()>
c002bf89:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002bf8c:	e8 05 09 ff ff       	call   c001c896 <createPartitionsForDisk(PhysicalDisk*)>
c002bf91:	31 c0                	xor    eax,eax
c002bf93:	83 c4 18             	add    esp,0x18
c002bf96:	5b                   	pop    ebx
c002bf97:	c3                   	ret    

c002bf98 <combineCharAndColour(char, unsigned char)>:
c002bf98:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002bf9d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c002bfa3:	c1 e0 08             	shl    eax,0x8
c002bfa6:	09 d0                	or     eax,edx
c002bfa8:	c3                   	ret    

c002bfa9 <combineColours(unsigned char, unsigned char)>:
c002bfa9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002bfae:	c1 e0 04             	shl    eax,0x4
c002bfb1:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c002bfb5:	c3                   	ret    

c002bfb6 <ATA::read(unsigned long long, int, void*)>:
c002bfb6:	55                   	push   ebp
c002bfb7:	57                   	push   edi
c002bfb8:	56                   	push   esi
c002bfb9:	be 04 00 00 00       	mov    esi,0x4
c002bfbe:	53                   	push   ebx
c002bfbf:	83 ec 0c             	sub    esp,0xc
c002bfc2:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002bfc6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002bfca:	8d 7b ff             	lea    edi,[ebx-0x1]
c002bfcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002bfd1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002bfd5:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002bfdb:	0f 87 a1 01 00 00    	ja     c002c182 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002bfe1:	be 06 00 00 00       	mov    esi,0x6
c002bfe6:	85 c9                	test   ecx,ecx
c002bfe8:	0f 84 94 01 00 00    	je     c002c182 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002bfee:	55                   	push   ebp
c002bfef:	55                   	push   ebp
c002bff0:	6a 00                	push   0x0
c002bff2:	51                   	push   ecx
c002bff3:	53                   	push   ebx
c002bff4:	52                   	push   edx
c002bff5:	50                   	push   eax
c002bff6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002bffa:	e8 0d fb ff ff       	call   c002bb0c <ATA::access(unsigned long long, int, void*, bool)>
c002bfff:	83 c4 20             	add    esp,0x20
c002c002:	89 c6                	mov    esi,eax
c002c004:	85 c0                	test   eax,eax
c002c006:	0f 85 71 01 00 00    	jne    c002c17d <ATA::read(unsigned long long, int, void*)+0x1c7>
c002c00c:	03 1d b4 0b 04 c0    	add    ebx,DWORD PTR ds:0xc0040bb4
c002c012:	89 da                	mov    edx,ebx
c002c014:	50                   	push   eax
c002c015:	bd 10 27 00 00       	mov    ebp,0x2710
c002c01a:	50                   	push   eax
c002c01b:	89 1d b4 0b 04 c0    	mov    DWORD PTR ds:0xc0040bb4,ebx
c002c021:	6a 0f                	push   0xf
c002c023:	6a 00                	push   0x0
c002c025:	e8 7f ff ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002c02a:	59                   	pop    ecx
c002c02b:	b9 0a 00 00 00       	mov    ecx,0xa
c002c030:	5b                   	pop    ebx
c002c031:	0f b6 d8             	movzx  ebx,al
c002c034:	89 d0                	mov    eax,edx
c002c036:	53                   	push   ebx
c002c037:	99                   	cdq    
c002c038:	f7 fd                	idiv   ebp
c002c03a:	99                   	cdq    
c002c03b:	f7 f9                	idiv   ecx
c002c03d:	83 c2 30             	add    edx,0x30
c002c040:	0f b6 d2             	movzx  edx,dl
c002c043:	52                   	push   edx
c002c044:	e8 4f ff ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c049:	5f                   	pop    edi
c002c04a:	bf e8 03 00 00       	mov    edi,0x3e8
c002c04f:	5a                   	pop    edx
c002c050:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c056:	53                   	push   ebx
c002c057:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c05c:	99                   	cdq    
c002c05d:	f7 ff                	idiv   edi
c002c05f:	99                   	cdq    
c002c060:	f7 f9                	idiv   ecx
c002c062:	8d 42 30             	lea    eax,[edx+0x30]
c002c065:	0f b6 c0             	movzx  eax,al
c002c068:	50                   	push   eax
c002c069:	e8 2a ff ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c06e:	5f                   	pop    edi
c002c06f:	bf 64 00 00 00       	mov    edi,0x64
c002c074:	5a                   	pop    edx
c002c075:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c07b:	53                   	push   ebx
c002c07c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c081:	99                   	cdq    
c002c082:	f7 ff                	idiv   edi
c002c084:	99                   	cdq    
c002c085:	f7 f9                	idiv   ecx
c002c087:	8d 42 30             	lea    eax,[edx+0x30]
c002c08a:	0f b6 c0             	movzx  eax,al
c002c08d:	50                   	push   eax
c002c08e:	e8 05 ff ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c093:	5a                   	pop    edx
c002c094:	5a                   	pop    edx
c002c095:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c09b:	53                   	push   ebx
c002c09c:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c0a1:	99                   	cdq    
c002c0a2:	f7 f9                	idiv   ecx
c002c0a4:	99                   	cdq    
c002c0a5:	f7 f9                	idiv   ecx
c002c0a7:	8d 42 30             	lea    eax,[edx+0x30]
c002c0aa:	0f b6 c0             	movzx  eax,al
c002c0ad:	50                   	push   eax
c002c0ae:	e8 e5 fe ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c0b3:	5a                   	pop    edx
c002c0b4:	5a                   	pop    edx
c002c0b5:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c0bb:	53                   	push   ebx
c002c0bc:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c0c1:	99                   	cdq    
c002c0c2:	f7 f9                	idiv   ecx
c002c0c4:	83 c2 30             	add    edx,0x30
c002c0c7:	0f b6 d2             	movzx  edx,dl
c002c0ca:	52                   	push   edx
c002c0cb:	e8 c8 fe ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c0d0:	5a                   	pop    edx
c002c0d1:	5a                   	pop    edx
c002c0d2:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c0d8:	53                   	push   ebx
c002c0d9:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c0de:	99                   	cdq    
c002c0df:	f7 fd                	idiv   ebp
c002c0e1:	99                   	cdq    
c002c0e2:	f7 f9                	idiv   ecx
c002c0e4:	8d 42 30             	lea    eax,[edx+0x30]
c002c0e7:	0f b6 c0             	movzx  eax,al
c002c0ea:	50                   	push   eax
c002c0eb:	e8 a8 fe ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c0f0:	5d                   	pop    ebp
c002c0f1:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c0f6:	5a                   	pop    edx
c002c0f7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c0fd:	53                   	push   ebx
c002c0fe:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c103:	99                   	cdq    
c002c104:	f7 fd                	idiv   ebp
c002c106:	99                   	cdq    
c002c107:	f7 f9                	idiv   ecx
c002c109:	8d 42 30             	lea    eax,[edx+0x30]
c002c10c:	0f b6 c0             	movzx  eax,al
c002c10f:	50                   	push   eax
c002c110:	e8 83 fe ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c115:	5d                   	pop    ebp
c002c116:	5a                   	pop    edx
c002c117:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c11d:	53                   	push   ebx
c002c11e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c123:	99                   	cdq    
c002c124:	f7 ff                	idiv   edi
c002c126:	99                   	cdq    
c002c127:	f7 f9                	idiv   ecx
c002c129:	8d 42 30             	lea    eax,[edx+0x30]
c002c12c:	0f b6 c0             	movzx  eax,al
c002c12f:	50                   	push   eax
c002c130:	e8 63 fe ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c135:	5f                   	pop    edi
c002c136:	5d                   	pop    ebp
c002c137:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c13d:	53                   	push   ebx
c002c13e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c143:	99                   	cdq    
c002c144:	f7 f9                	idiv   ecx
c002c146:	99                   	cdq    
c002c147:	f7 f9                	idiv   ecx
c002c149:	8d 42 30             	lea    eax,[edx+0x30]
c002c14c:	0f b6 c0             	movzx  eax,al
c002c14f:	50                   	push   eax
c002c150:	e8 43 fe ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c155:	5a                   	pop    edx
c002c156:	5f                   	pop    edi
c002c157:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c15d:	53                   	push   ebx
c002c15e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c163:	99                   	cdq    
c002c164:	f7 f9                	idiv   ecx
c002c166:	83 c2 30             	add    edx,0x30
c002c169:	0f b6 d2             	movzx  edx,dl
c002c16c:	52                   	push   edx
c002c16d:	e8 26 fe ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c172:	83 c4 10             	add    esp,0x10
c002c175:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c17b:	eb 05                	jmp    c002c182 <ATA::read(unsigned long long, int, void*)+0x1cc>
c002c17d:	be 01 00 00 00       	mov    esi,0x1
c002c182:	83 c4 0c             	add    esp,0xc
c002c185:	89 f0                	mov    eax,esi
c002c187:	5b                   	pop    ebx
c002c188:	5e                   	pop    esi
c002c189:	5f                   	pop    edi
c002c18a:	5d                   	pop    ebp
c002c18b:	c3                   	ret    

c002c18c <ATA::write(unsigned long long, int, void*)>:
c002c18c:	55                   	push   ebp
c002c18d:	57                   	push   edi
c002c18e:	56                   	push   esi
c002c18f:	be 04 00 00 00       	mov    esi,0x4
c002c194:	53                   	push   ebx
c002c195:	83 ec 0c             	sub    esp,0xc
c002c198:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002c19c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c1a0:	8d 7b ff             	lea    edi,[ebx-0x1]
c002c1a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002c1a7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002c1ab:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002c1b1:	0f 87 9c 01 00 00    	ja     c002c353 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c1b7:	be 06 00 00 00       	mov    esi,0x6
c002c1bc:	85 c9                	test   ecx,ecx
c002c1be:	0f 84 8f 01 00 00    	je     c002c353 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c1c4:	55                   	push   ebp
c002c1c5:	55                   	push   ebp
c002c1c6:	6a 01                	push   0x1
c002c1c8:	51                   	push   ecx
c002c1c9:	53                   	push   ebx
c002c1ca:	52                   	push   edx
c002c1cb:	50                   	push   eax
c002c1cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002c1d0:	e8 37 f9 ff ff       	call   c002bb0c <ATA::access(unsigned long long, int, void*, bool)>
c002c1d5:	83 c4 20             	add    esp,0x20
c002c1d8:	89 c6                	mov    esi,eax
c002c1da:	85 c0                	test   eax,eax
c002c1dc:	0f 85 6c 01 00 00    	jne    c002c34e <ATA::write(unsigned long long, int, void*)+0x1c2>
c002c1e2:	01 1d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebx
c002c1e8:	bd 10 27 00 00       	mov    ebp,0x2710
c002c1ed:	50                   	push   eax
c002c1ee:	50                   	push   eax
c002c1ef:	6a 0f                	push   0xf
c002c1f1:	6a 00                	push   0x0
c002c1f3:	e8 b1 fd ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002c1f8:	5a                   	pop    edx
c002c1f9:	0f b6 d8             	movzx  ebx,al
c002c1fc:	59                   	pop    ecx
c002c1fd:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c202:	53                   	push   ebx
c002c203:	b9 0a 00 00 00       	mov    ecx,0xa
c002c208:	99                   	cdq    
c002c209:	f7 fd                	idiv   ebp
c002c20b:	99                   	cdq    
c002c20c:	f7 f9                	idiv   ecx
c002c20e:	8d 42 30             	lea    eax,[edx+0x30]
c002c211:	0f b6 c0             	movzx  eax,al
c002c214:	50                   	push   eax
c002c215:	e8 7e fd ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c21a:	5f                   	pop    edi
c002c21b:	bf e8 03 00 00       	mov    edi,0x3e8
c002c220:	5a                   	pop    edx
c002c221:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002c227:	53                   	push   ebx
c002c228:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c22d:	99                   	cdq    
c002c22e:	f7 ff                	idiv   edi
c002c230:	99                   	cdq    
c002c231:	f7 f9                	idiv   ecx
c002c233:	8d 42 30             	lea    eax,[edx+0x30]
c002c236:	0f b6 c0             	movzx  eax,al
c002c239:	50                   	push   eax
c002c23a:	e8 59 fd ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c23f:	5f                   	pop    edi
c002c240:	bf 64 00 00 00       	mov    edi,0x64
c002c245:	5a                   	pop    edx
c002c246:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002c24c:	53                   	push   ebx
c002c24d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c252:	99                   	cdq    
c002c253:	f7 ff                	idiv   edi
c002c255:	99                   	cdq    
c002c256:	f7 f9                	idiv   ecx
c002c258:	8d 42 30             	lea    eax,[edx+0x30]
c002c25b:	0f b6 c0             	movzx  eax,al
c002c25e:	50                   	push   eax
c002c25f:	e8 34 fd ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c264:	5a                   	pop    edx
c002c265:	5a                   	pop    edx
c002c266:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002c26c:	53                   	push   ebx
c002c26d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c272:	99                   	cdq    
c002c273:	f7 f9                	idiv   ecx
c002c275:	99                   	cdq    
c002c276:	f7 f9                	idiv   ecx
c002c278:	8d 42 30             	lea    eax,[edx+0x30]
c002c27b:	0f b6 c0             	movzx  eax,al
c002c27e:	50                   	push   eax
c002c27f:	e8 14 fd ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c284:	5a                   	pop    edx
c002c285:	5a                   	pop    edx
c002c286:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002c28c:	53                   	push   ebx
c002c28d:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002c292:	99                   	cdq    
c002c293:	f7 f9                	idiv   ecx
c002c295:	8d 42 30             	lea    eax,[edx+0x30]
c002c298:	0f b6 c0             	movzx  eax,al
c002c29b:	50                   	push   eax
c002c29c:	e8 f7 fc ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c2a1:	5a                   	pop    edx
c002c2a2:	5a                   	pop    edx
c002c2a3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002c2a9:	53                   	push   ebx
c002c2aa:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2af:	99                   	cdq    
c002c2b0:	f7 fd                	idiv   ebp
c002c2b2:	99                   	cdq    
c002c2b3:	f7 f9                	idiv   ecx
c002c2b5:	8d 42 30             	lea    eax,[edx+0x30]
c002c2b8:	0f b6 c0             	movzx  eax,al
c002c2bb:	50                   	push   eax
c002c2bc:	e8 d7 fc ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c2c1:	5d                   	pop    ebp
c002c2c2:	bd e8 03 00 00       	mov    ebp,0x3e8
c002c2c7:	5a                   	pop    edx
c002c2c8:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002c2ce:	53                   	push   ebx
c002c2cf:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2d4:	99                   	cdq    
c002c2d5:	f7 fd                	idiv   ebp
c002c2d7:	99                   	cdq    
c002c2d8:	f7 f9                	idiv   ecx
c002c2da:	8d 42 30             	lea    eax,[edx+0x30]
c002c2dd:	0f b6 c0             	movzx  eax,al
c002c2e0:	50                   	push   eax
c002c2e1:	e8 b2 fc ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c2e6:	5d                   	pop    ebp
c002c2e7:	5a                   	pop    edx
c002c2e8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002c2ee:	53                   	push   ebx
c002c2ef:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c2f4:	99                   	cdq    
c002c2f5:	f7 ff                	idiv   edi
c002c2f7:	99                   	cdq    
c002c2f8:	f7 f9                	idiv   ecx
c002c2fa:	8d 42 30             	lea    eax,[edx+0x30]
c002c2fd:	0f b6 c0             	movzx  eax,al
c002c300:	50                   	push   eax
c002c301:	e8 92 fc ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c306:	5f                   	pop    edi
c002c307:	5d                   	pop    ebp
c002c308:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002c30e:	53                   	push   ebx
c002c30f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c314:	99                   	cdq    
c002c315:	f7 f9                	idiv   ecx
c002c317:	99                   	cdq    
c002c318:	f7 f9                	idiv   ecx
c002c31a:	8d 42 30             	lea    eax,[edx+0x30]
c002c31d:	0f b6 c0             	movzx  eax,al
c002c320:	50                   	push   eax
c002c321:	e8 72 fc ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c326:	5a                   	pop    edx
c002c327:	5f                   	pop    edi
c002c328:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002c32e:	53                   	push   ebx
c002c32f:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002c334:	99                   	cdq    
c002c335:	f7 f9                	idiv   ecx
c002c337:	83 c2 30             	add    edx,0x30
c002c33a:	0f b6 d2             	movzx  edx,dl
c002c33d:	52                   	push   edx
c002c33e:	e8 55 fc ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002c343:	83 c4 10             	add    esp,0x10
c002c346:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002c34c:	eb 05                	jmp    c002c353 <ATA::write(unsigned long long, int, void*)+0x1c7>
c002c34e:	be 01 00 00 00       	mov    esi,0x1
c002c353:	83 c4 0c             	add    esp,0xc
c002c356:	89 f0                	mov    eax,esi
c002c358:	5b                   	pop    ebx
c002c359:	5e                   	pop    esi
c002c35a:	5f                   	pop    edi
c002c35b:	5d                   	pop    ebp
c002c35c:	c3                   	ret    
c002c35d:	90                   	nop

c002c35e <ATAPI::write(unsigned long long, int, void*)>:
c002c35e:	b8 03 00 00 00       	mov    eax,0x3
c002c363:	c3                   	ret    

c002c364 <ATAPI::close(int, int, void*)>:
c002c364:	83 ec 0c             	sub    esp,0xc
c002c367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c36b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c371:	85 c0                	test   eax,eax
c002c373:	74 0c                	je     c002c381 <ATAPI::close(int, int, void*)+0x1d>
c002c375:	83 ec 0c             	sub    esp,0xc
c002c378:	8b 10                	mov    edx,DWORD PTR [eax]
c002c37a:	50                   	push   eax
c002c37b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c37e:	83 c4 10             	add    esp,0x10
c002c381:	31 c0                	xor    eax,eax
c002c383:	83 c4 0c             	add    esp,0xc
c002c386:	c3                   	ret    
c002c387:	90                   	nop

c002c388 <ATAPI::ATAPI()>:
c002c388:	83 ec 0c             	sub    esp,0xc
c002c38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c38f:	83 ec 04             	sub    esp,0x4
c002c392:	68 00 08 00 00       	push   0x800
c002c397:	68 25 38 03 c0       	push   0xc0033825
c002c39c:	50                   	push   eax
c002c39d:	e8 50 f2 fe ff       	call   c001b5f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002c3a2:	83 c4 10             	add    esp,0x10
c002c3a5:	ba 34 37 03 c0       	mov    edx,0xc0033734
c002c3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c3ae:	89 10                	mov    DWORD PTR [eax],edx
c002c3b0:	90                   	nop
c002c3b1:	83 c4 0c             	add    esp,0xc
c002c3b4:	c3                   	ret    
c002c3b5:	90                   	nop

c002c3b6 <ATAPI::readyForCommand()>:
c002c3b6:	56                   	push   esi
c002c3b7:	53                   	push   ebx
c002c3b8:	53                   	push   ebx
c002c3b9:	31 db                	xor    ebx,ebx
c002c3bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002c3bf:	51                   	push   ecx
c002c3c0:	6a 0c                	push   0xc
c002c3c2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002c3c9:	50                   	push   eax
c002c3ca:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002c3d0:	e8 8f e8 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002c3d5:	83 c4 10             	add    esp,0x10
c002c3d8:	a8 88                	test   al,0x88
c002c3da:	74 25                	je     c002c401 <ATAPI::readyForCommand()+0x4b>
c002c3dc:	43                   	inc    ebx
c002c3dd:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c002c3e3:	7e da                	jle    c002c3bf <ATAPI::readyForCommand()+0x9>
c002c3e5:	83 ec 0c             	sub    esp,0xc
c002c3e8:	68 5e 01 00 00       	push   0x15e
c002c3ed:	e8 6a 8f ff ff       	call   c002535c <milliTenthSleep(unsigned int)>
c002c3f2:	83 c4 10             	add    esp,0x10
c002c3f5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c002c3fb:	75 c2                	jne    c002c3bf <ATAPI::readyForCommand()+0x9>
c002c3fd:	31 c0                	xor    eax,eax
c002c3ff:	eb 02                	jmp    c002c403 <ATAPI::readyForCommand()+0x4d>
c002c401:	b0 01                	mov    al,0x1
c002c403:	5a                   	pop    edx
c002c404:	5b                   	pop    ebx
c002c405:	5e                   	pop    esi
c002c406:	c3                   	ret    
c002c407:	90                   	nop

c002c408 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c002c408:	55                   	push   ebp
c002c409:	57                   	push   edi
c002c40a:	56                   	push   esi
c002c40b:	53                   	push   ebx
c002c40c:	83 ec 20             	sub    esp,0x20
c002c40f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c002c413:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002c417:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c002c41b:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002c41f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002c423:	6a 01                	push   0x1
c002c425:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c42c:	50                   	push   eax
c002c42d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c433:	e8 74 e9 ff ff       	call   c002adac <IDE::enableIRQs(unsigned char, bool)>
c002c438:	5e                   	pop    esi
c002c439:	58                   	pop    eax
c002c43a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c441:	50                   	push   eax
c002c442:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c448:	e8 31 e7 ff ff       	call   c002ab7e <IDE::prepareInterrupt(unsigned char)>
c002c44d:	89 3c 24             	mov    DWORD PTR [esp],edi
c002c450:	e8 61 ff ff ff       	call   c002c3b6 <ATAPI::readyForCommand()>
c002c455:	83 c4 10             	add    esp,0x10
c002c458:	84 c0                	test   al,al
c002c45a:	75 0a                	jne    c002c466 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002c45c:	bb 01 00 00 00       	mov    ebx,0x1
c002c461:	e9 60 02 00 00       	jmp    c002c6c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c466:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c002c46c:	c1 e0 04             	shl    eax,0x4
c002c46f:	0f b6 c0             	movzx  eax,al
c002c472:	50                   	push   eax
c002c473:	6a 06                	push   0x6
c002c475:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c47c:	50                   	push   eax
c002c47d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c483:	e8 1c e7 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c488:	6a 00                	push   0x0
c002c48a:	6a 01                	push   0x1
c002c48c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c493:	50                   	push   eax
c002c494:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c49a:	e8 05 e7 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c49f:	83 c4 20             	add    esp,0x20
c002c4a2:	0f b6 c3             	movzx  eax,bl
c002c4a5:	0f b6 df             	movzx  ebx,bh
c002c4a8:	50                   	push   eax
c002c4a9:	6a 04                	push   0x4
c002c4ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4b2:	50                   	push   eax
c002c4b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4b9:	e8 e6 e6 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4be:	53                   	push   ebx
c002c4bf:	6a 05                	push   0x5
c002c4c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4c8:	50                   	push   eax
c002c4c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4cf:	e8 d0 e6 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4d4:	83 c4 20             	add    esp,0x20
c002c4d7:	68 a0 00 00 00       	push   0xa0
c002c4dc:	6a 07                	push   0x7
c002c4de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4e5:	50                   	push   eax
c002c4e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c4ec:	e8 b3 e6 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c4f1:	83 c4 0c             	add    esp,0xc
c002c4f4:	6a 01                	push   0x1
c002c4f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c4fd:	50                   	push   eax
c002c4fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c504:	e8 83 f1 ff ff       	call   c002b68c <IDE::polling(unsigned char, unsigned int)>
c002c509:	83 c4 10             	add    esp,0x10
c002c50c:	0f b6 d8             	movzx  ebx,al
c002c50f:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c002c515:	85 db                	test   ebx,ebx
c002c517:	74 20                	je     c002c539 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c002c519:	53                   	push   ebx
c002c51a:	0f b6 c0             	movzx  eax,al
c002c51d:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c002c524:	52                   	push   edx
c002c525:	50                   	push   eax
c002c526:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c52c:	e8 a1 f0 ff ff       	call   c002b5d2 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002c531:	83 c4 10             	add    esp,0x10
c002c534:	e9 8d 01 00 00       	jmp    c002c6c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c539:	0f b6 c0             	movzx  eax,al
c002c53c:	53                   	push   ebx
c002c53d:	53                   	push   ebx
c002c53e:	50                   	push   eax
c002c53f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c545:	e8 48 e6 ff ff       	call   c002ab92 <IDE::getBase(unsigned char)>
c002c54a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002c54e:	b9 06 00 00 00       	mov    ecx,0x6
c002c553:	89 c2                	mov    edx,eax
c002c555:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002c558:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002c55c:	83 c4 10             	add    esp,0x10
c002c55f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c002c564:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002c568:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c56e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c575:	85 db                	test   ebx,ebx
c002c577:	0f 84 ec 00 00 00    	je     c002c669 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c002c57d:	51                   	push   ecx
c002c57e:	51                   	push   ecx
c002c57f:	52                   	push   edx
c002c580:	50                   	push   eax
c002c581:	e8 8c e7 ff ff       	call   c002ad12 <IDE::waitInterrupt(unsigned char)>
c002c586:	83 c4 10             	add    esp,0x10
c002c589:	84 c0                	test   al,al
c002c58b:	0f 84 cb fe ff ff    	je     c002c45c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c591:	56                   	push   esi
c002c592:	56                   	push   esi
c002c593:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c59a:	50                   	push   eax
c002c59b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5a1:	e8 d8 e5 ff ff       	call   c002ab7e <IDE::prepareInterrupt(unsigned char)>
c002c5a6:	83 c4 0c             	add    esp,0xc
c002c5a9:	6a 04                	push   0x4
c002c5ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5b2:	50                   	push   eax
c002c5b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5b9:	e8 a6 e6 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002c5be:	83 c4 0c             	add    esp,0xc
c002c5c1:	89 c6                	mov    esi,eax
c002c5c3:	6a 05                	push   0x5
c002c5c5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c5cc:	50                   	push   eax
c002c5cd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c5d3:	e8 8c e6 ff ff       	call   c002ac64 <IDE::read(unsigned char, unsigned char)>
c002c5d8:	89 f1                	mov    ecx,esi
c002c5da:	0f b6 c0             	movzx  eax,al
c002c5dd:	0f b6 f1             	movzx  esi,cl
c002c5e0:	c1 e0 08             	shl    eax,0x8
c002c5e3:	09 c6                	or     esi,eax
c002c5e5:	d1 fe                	sar    esi,1
c002c5e7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002c5eb:	83 c4 10             	add    esp,0x10
c002c5ee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002c5f3:	74 41                	je     c002c636 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c002c5f5:	31 c9                	xor    ecx,ecx
c002c5f7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c5fd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c604:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002c608:	75 0a                	jne    c002c614 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c002c60a:	01 c9                	add    ecx,ecx
c002c60c:	01 cd                	add    ebp,ecx
c002c60e:	4b                   	dec    ebx
c002c60f:	e9 54 ff ff ff       	jmp    c002c568 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c002c614:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002c619:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002c61d:	51                   	push   ecx
c002c61e:	51                   	push   ecx
c002c61f:	52                   	push   edx
c002c620:	50                   	push   eax
c002c621:	e8 6c e5 ff ff       	call   c002ab92 <IDE::getBase(unsigned char)>
c002c626:	89 c2                	mov    edx,eax
c002c628:	89 f0                	mov    eax,esi
c002c62a:	66 ef                	out    dx,ax
c002c62c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002c630:	83 c4 10             	add    esp,0x10
c002c633:	41                   	inc    ecx
c002c634:	eb c1                	jmp    c002c5f7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c002c636:	31 f6                	xor    esi,esi
c002c638:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002c63e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002c645:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002c649:	75 06                	jne    c002c651 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c002c64b:	01 f6                	add    esi,esi
c002c64d:	01 f5                	add    ebp,esi
c002c64f:	eb bd                	jmp    c002c60e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c002c651:	51                   	push   ecx
c002c652:	51                   	push   ecx
c002c653:	52                   	push   edx
c002c654:	50                   	push   eax
c002c655:	e8 38 e5 ff ff       	call   c002ab92 <IDE::getBase(unsigned char)>
c002c65a:	89 c2                	mov    edx,eax
c002c65c:	66 ed                	in     ax,dx
c002c65e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002c663:	83 c4 10             	add    esp,0x10
c002c666:	46                   	inc    esi
c002c667:	eb cf                	jmp    c002c638 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c002c669:	51                   	push   ecx
c002c66a:	51                   	push   ecx
c002c66b:	52                   	push   edx
c002c66c:	50                   	push   eax
c002c66d:	e8 a0 e6 ff ff       	call   c002ad12 <IDE::waitInterrupt(unsigned char)>
c002c672:	83 c4 10             	add    esp,0x10
c002c675:	84 c0                	test   al,al
c002c677:	0f 84 df fd ff ff    	je     c002c45c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002c67d:	bb a0 86 01 00       	mov    ebx,0x186a0
c002c682:	52                   	push   edx
c002c683:	52                   	push   edx
c002c684:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c68b:	50                   	push   eax
c002c68c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c692:	e8 e7 e4 ff ff       	call   c002ab7e <IDE::prepareInterrupt(unsigned char)>
c002c697:	83 c4 10             	add    esp,0x10
c002c69a:	50                   	push   eax
c002c69b:	50                   	push   eax
c002c69c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002c6a3:	50                   	push   eax
c002c6a4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002c6aa:	e8 e3 e4 ff ff       	call   c002ab92 <IDE::getBase(unsigned char)>
c002c6af:	8d 50 07             	lea    edx,[eax+0x7]
c002c6b2:	ec                   	in     al,dx
c002c6b3:	83 c4 10             	add    esp,0x10
c002c6b6:	a8 88                	test   al,0x88
c002c6b8:	74 0a                	je     c002c6c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c002c6ba:	4b                   	dec    ebx
c002c6bb:	75 dd                	jne    c002c69a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c002c6bd:	bb 02 00 00 00       	mov    ebx,0x2
c002c6c2:	eb 02                	jmp    c002c6c6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c002c6c4:	31 db                	xor    ebx,ebx
c002c6c6:	83 c4 1c             	add    esp,0x1c
c002c6c9:	89 d8                	mov    eax,ebx
c002c6cb:	5b                   	pop    ebx
c002c6cc:	5e                   	pop    esi
c002c6cd:	5f                   	pop    edi
c002c6ce:	5d                   	pop    ebp
c002c6cf:	c3                   	ret    

c002c6d0 <ATAPI::diskRemoved()>:
c002c6d0:	53                   	push   ebx
c002c6d1:	83 ec 14             	sub    esp,0x14
c002c6d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c6d8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c6df:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c002c6e5:	e8 9c fe fe ff       	call   c001c586 <LogicalDisk::unmount()>
c002c6ea:	58                   	pop    eax
c002c6eb:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002c6f1:	e8 6e 08 ff ff       	call   c001cf64 <VCache::writeWriteBuffer()>
c002c6f6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c002c6fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002c700:	83 c4 18             	add    esp,0x18
c002c703:	5b                   	pop    ebx
c002c704:	e9 4b 08 ff ff       	jmp    c001cf54 <VCache::invalidateReadBuffer()>
c002c709:	90                   	nop

c002c70a <ATAPI::eject()>:
c002c70a:	57                   	push   edi
c002c70b:	b9 03 00 00 00       	mov    ecx,0x3
c002c710:	53                   	push   ebx
c002c711:	83 ec 14             	sub    esp,0x14
c002c714:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002c718:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c71c:	fc                   	cld    
c002c71d:	31 c0                	xor    eax,eax
c002c71f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c721:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002c726:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002c72b:	50                   	push   eax
c002c72c:	50                   	push   eax
c002c72d:	6a 00                	push   0x0
c002c72f:	6a 00                	push   0x0
c002c731:	6a 00                	push   0x0
c002c733:	6a 02                	push   0x2
c002c735:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c739:	50                   	push   eax
c002c73a:	53                   	push   ebx
c002c73b:	e8 c8 fc ff ff       	call   c002c408 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c740:	83 c4 14             	add    esp,0x14
c002c743:	53                   	push   ebx
c002c744:	e8 87 ff ff ff       	call   c002c6d0 <ATAPI::diskRemoved()>
c002c749:	83 c4 24             	add    esp,0x24
c002c74c:	31 c0                	xor    eax,eax
c002c74e:	5b                   	pop    ebx
c002c74f:	5f                   	pop    edi
c002c750:	c3                   	ret    
c002c751:	90                   	nop

c002c752 <ATAPI::diskInserted()>:
c002c752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002c756:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c002c75d:	c3                   	ret    

c002c75e <ATAPI::detectMedia()>:
c002c75e:	56                   	push   esi
c002c75f:	53                   	push   ebx
c002c760:	83 ec 28             	sub    esp,0x28
c002c763:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002c767:	6a 0c                	push   0xc
c002c769:	6a 00                	push   0x0
c002c76b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002c76f:	56                   	push   esi
c002c770:	e8 7b 3d fd ff       	call   c00004f0 <memset>
c002c775:	58                   	pop    eax
c002c776:	5a                   	pop    edx
c002c777:	6a 00                	push   0x0
c002c779:	6a 00                	push   0x0
c002c77b:	6a 00                	push   0x0
c002c77d:	6a 00                	push   0x0
c002c77f:	56                   	push   esi
c002c780:	53                   	push   ebx
c002c781:	e8 82 fc ff ff       	call   c002c408 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c786:	83 c4 1c             	add    esp,0x1c
c002c789:	6a 0c                	push   0xc
c002c78b:	6a 00                	push   0x0
c002c78d:	56                   	push   esi
c002c78e:	e8 5d 3d fd ff       	call   c00004f0 <memset>
c002c793:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002c798:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002c79d:	59                   	pop    ecx
c002c79e:	58                   	pop    eax
c002c79f:	6a 01                	push   0x1
c002c7a1:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002c7a5:	50                   	push   eax
c002c7a6:	6a 00                	push   0x0
c002c7a8:	6a 12                	push   0x12
c002c7aa:	56                   	push   esi
c002c7ab:	53                   	push   ebx
c002c7ac:	e8 57 fc ff ff       	call   c002c408 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c7b1:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002c7b5:	83 c4 20             	add    esp,0x20
c002c7b8:	83 e0 7f             	and    eax,0x7f
c002c7bb:	83 f8 70             	cmp    eax,0x70
c002c7be:	74 15                	je     c002c7d5 <ATAPI::detectMedia()+0x77>
c002c7c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c7c7:	75 0c                	jne    c002c7d5 <ATAPI::detectMedia()+0x77>
c002c7c9:	83 ec 0c             	sub    esp,0xc
c002c7cc:	53                   	push   ebx
c002c7cd:	e8 80 ff ff ff       	call   c002c752 <ATAPI::diskInserted()>
c002c7d2:	83 c4 10             	add    esp,0x10
c002c7d5:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002c7d9:	83 e0 0f             	and    eax,0xf
c002c7dc:	83 f8 02             	cmp    eax,0x2
c002c7df:	75 1b                	jne    c002c7fc <ATAPI::detectMedia()+0x9e>
c002c7e1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002c7e6:	75 2d                	jne    c002c815 <ATAPI::detectMedia()+0xb7>
c002c7e8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c7ef:	74 24                	je     c002c815 <ATAPI::detectMedia()+0xb7>
c002c7f1:	83 ec 0c             	sub    esp,0xc
c002c7f4:	53                   	push   ebx
c002c7f5:	e8 d6 fe ff ff       	call   c002c6d0 <ATAPI::diskRemoved()>
c002c7fa:	eb 16                	jmp    c002c812 <ATAPI::detectMedia()+0xb4>
c002c7fc:	85 c0                	test   eax,eax
c002c7fe:	75 15                	jne    c002c815 <ATAPI::detectMedia()+0xb7>
c002c800:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c807:	75 0c                	jne    c002c815 <ATAPI::detectMedia()+0xb7>
c002c809:	83 ec 0c             	sub    esp,0xc
c002c80c:	53                   	push   ebx
c002c80d:	e8 40 ff ff ff       	call   c002c752 <ATAPI::diskInserted()>
c002c812:	83 c4 10             	add    esp,0x10
c002c815:	83 c4 24             	add    esp,0x24
c002c818:	5b                   	pop    ebx
c002c819:	5e                   	pop    esi
c002c81a:	c3                   	ret    
c002c81b:	90                   	nop

c002c81c <ATAPI::open(int, int, void*)>:
c002c81c:	56                   	push   esi
c002c81d:	53                   	push   ebx
c002c81e:	50                   	push   eax
c002c81f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002c823:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002c827:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002c82b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002c831:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002c837:	c1 e0 06             	shl    eax,0x6
c002c83a:	01 d0                	add    eax,edx
c002c83c:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c002c843:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002c849:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002c850:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002c85a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c860:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002c867:	6a 04                	push   0x4
c002c869:	6a 0c                	push   0xc
c002c86b:	51                   	push   ecx
c002c86c:	52                   	push   edx
c002c86d:	e8 32 e3 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c872:	90                   	nop
c002c873:	90                   	nop
c002c874:	6a 00                	push   0x0
c002c876:	6a 0c                	push   0xc
c002c878:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002c87f:	50                   	push   eax
c002c880:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002c886:	e8 19 e3 ff ff       	call   c002aba4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002c88b:	83 c4 14             	add    esp,0x14
c002c88e:	68 78 01 00 00       	push   0x178
c002c893:	e8 66 9a fe ff       	call   c00162fe <malloc>
c002c898:	83 c4 0c             	add    esp,0xc
c002c89b:	89 c6                	mov    esi,eax
c002c89d:	6a 00                	push   0x0
c002c89f:	68 ff ff ff 7f       	push   0x7fffffff
c002c8a4:	6a 00                	push   0x0
c002c8a6:	6a 00                	push   0x0
c002c8a8:	53                   	push   ebx
c002c8a9:	68 d7 38 03 c0       	push   0xc00338d7
c002c8ae:	50                   	push   eax
c002c8af:	e8 10 fb fe ff       	call   c001c3c4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002c8b4:	83 c4 14             	add    esp,0x14
c002c8b7:	56                   	push   esi
c002c8b8:	e8 c7 fb fe ff       	call   c001c484 <LogicalDisk::assignDriveLetter()>
c002c8bd:	5a                   	pop    edx
c002c8be:	0f be c0             	movsx  eax,al
c002c8c1:	59                   	pop    ecx
c002c8c2:	50                   	push   eax
c002c8c3:	68 1c 37 03 c0       	push   0xc003371c
c002c8c8:	e8 c0 c8 fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002c8cd:	58                   	pop    eax
c002c8ce:	5a                   	pop    edx
c002c8cf:	56                   	push   esi
c002c8d0:	53                   	push   ebx
c002c8d1:	e8 38 e9 fe ff       	call   c001b20e <Device::addChild(Device*)>
c002c8d6:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c002c8dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c8df:	e8 76 ed fe ff       	call   c001b65a <PhysicalDisk::startCache()>
c002c8e4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002c8eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002c8ee:	e8 6b fe ff ff       	call   c002c75e <ATAPI::detectMedia()>
c002c8f3:	83 c4 14             	add    esp,0x14
c002c8f6:	31 c0                	xor    eax,eax
c002c8f8:	5b                   	pop    ebx
c002c8f9:	5e                   	pop    esi
c002c8fa:	c3                   	ret    
c002c8fb:	90                   	nop

c002c8fc <ATAPI::read(unsigned long long, int, void*)>:
c002c8fc:	55                   	push   ebp
c002c8fd:	57                   	push   edi
c002c8fe:	56                   	push   esi
c002c8ff:	53                   	push   ebx
c002c900:	83 ec 1c             	sub    esp,0x1c
c002c903:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c002c907:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002c90b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002c90f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c916:	74 3c                	je     c002c954 <ATAPI::read(unsigned long long, int, void*)+0x58>
c002c918:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002c91c:	b9 03 00 00 00       	mov    ecx,0x3
c002c921:	fc                   	cld    
c002c922:	31 c0                	xor    eax,eax
c002c924:	0f ce                	bswap  esi
c002c926:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002c928:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002c92d:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c002c931:	89 e8                	mov    eax,ebp
c002c933:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002c937:	50                   	push   eax
c002c938:	50                   	push   eax
c002c939:	55                   	push   ebp
c002c93a:	c1 e5 0b             	shl    ebp,0xb
c002c93d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002c941:	6a 00                	push   0x0
c002c943:	55                   	push   ebp
c002c944:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002c948:	50                   	push   eax
c002c949:	53                   	push   ebx
c002c94a:	e8 b9 fa ff ff       	call   c002c408 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002c94f:	83 c4 20             	add    esp,0x20
c002c952:	eb 1a                	jmp    c002c96e <ATAPI::read(unsigned long long, int, void*)+0x72>
c002c954:	83 ec 0c             	sub    esp,0xc
c002c957:	53                   	push   ebx
c002c958:	e8 01 fe ff ff       	call   c002c75e <ATAPI::detectMedia()>
c002c95d:	83 c4 10             	add    esp,0x10
c002c960:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002c967:	75 af                	jne    c002c918 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002c969:	b8 02 00 00 00       	mov    eax,0x2
c002c96e:	83 c4 1c             	add    esp,0x1c
c002c971:	5b                   	pop    ebx
c002c972:	5e                   	pop    esi
c002c973:	5f                   	pop    edi
c002c974:	5d                   	pop    ebp
c002c975:	c3                   	ret    

c002c976 <SATA::close(int, int, void*)>:
c002c976:	83 ec 0c             	sub    esp,0xc
c002c979:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002c97d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002c983:	85 c0                	test   eax,eax
c002c985:	74 0c                	je     c002c993 <SATA::close(int, int, void*)+0x1d>
c002c987:	83 ec 0c             	sub    esp,0xc
c002c98a:	8b 10                	mov    edx,DWORD PTR [eax]
c002c98c:	50                   	push   eax
c002c98d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002c990:	83 c4 10             	add    esp,0x10
c002c993:	31 c0                	xor    eax,eax
c002c995:	83 c4 0c             	add    esp,0xc
c002c998:	c3                   	ret    
c002c999:	90                   	nop

c002c99a <SATA::powerSaving(PowerSavingLevel)>:
c002c99a:	c3                   	ret    
c002c99b:	90                   	nop

c002c99c <SATA::open(int, int, void*)>:
c002c99c:	56                   	push   esi
c002c99d:	53                   	push   ebx
c002c99e:	83 ec 10             	sub    esp,0x10
c002c9a1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002c9a5:	68 64 37 03 c0       	push   0xc0033764
c002c9aa:	e8 de c7 fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002c9af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002c9b3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002c9bd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002c9c3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002c9cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002c9d1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002c9db:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002c9e1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002c9e8:	e8 1a 9c fe ff       	call   c0016607 <Phys::allocatePage()>
c002c9ed:	89 c6                	mov    esi,eax
c002c9ef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002c9f5:	81 c6 00 10 00 00    	add    esi,0x1000
c002c9fb:	e8 07 9c fe ff       	call   c0016607 <Phys::allocatePage()>
c002ca00:	83 c4 10             	add    esp,0x10
c002ca03:	39 c6                	cmp    esi,eax
c002ca05:	74 10                	je     c002ca17 <SATA::open(int, int, void*)+0x7b>
c002ca07:	83 ec 0c             	sub    esp,0xc
c002ca0a:	68 70 37 03 c0       	push   0xc0033770
c002ca0f:	e8 92 37 ff ff       	call   c00201a6 <KePanic(char const*)>
c002ca14:	83 c4 10             	add    esp,0x10
c002ca17:	83 ec 0c             	sub    esp,0xc
c002ca1a:	6a 02                	push   0x2
c002ca1c:	e8 34 b4 fe ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c002ca21:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002ca27:	6a 03                	push   0x3
c002ca29:	50                   	push   eax
c002ca2a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002ca30:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002ca36:	e8 2d bb fe ff       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c002ca3b:	83 c4 14             	add    esp,0x14
c002ca3e:	53                   	push   ebx
c002ca3f:	e8 16 ec fe ff       	call   c001b65a <PhysicalDisk::startCache()>
c002ca44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002ca47:	e8 4a fe fe ff       	call   c001c896 <createPartitionsForDisk(PhysicalDisk*)>
c002ca4c:	83 c4 14             	add    esp,0x14
c002ca4f:	31 c0                	xor    eax,eax
c002ca51:	5b                   	pop    ebx
c002ca52:	5e                   	pop    esi
c002ca53:	c3                   	ret    

c002ca54 <SATA::SATA()>:
c002ca54:	83 ec 0c             	sub    esp,0xc
c002ca57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ca5b:	83 ec 04             	sub    esp,0x4
c002ca5e:	68 00 02 00 00       	push   0x200
c002ca63:	68 84 37 03 c0       	push   0xc0033784
c002ca68:	50                   	push   eax
c002ca69:	e8 84 eb fe ff       	call   c001b5f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002ca6e:	83 c4 10             	add    esp,0x10
c002ca71:	ba f4 37 03 c0       	mov    edx,0xc00337f4
c002ca76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ca7a:	89 10                	mov    DWORD PTR [eax],edx
c002ca7c:	90                   	nop
c002ca7d:	83 c4 0c             	add    esp,0xc
c002ca80:	c3                   	ret    
c002ca81:	90                   	nop

c002ca82 <SATA::access(unsigned long long, int, void*, bool)>:
c002ca82:	55                   	push   ebp
c002ca83:	57                   	push   edi
c002ca84:	56                   	push   esi
c002ca85:	53                   	push   ebx
c002ca86:	83 ec 2c             	sub    esp,0x2c
c002ca89:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002ca8d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002ca91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002ca95:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c002ca99:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002ca9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002caa1:	fa                   	cli    
c002caa2:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002caa8:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c002caad:	7e 10                	jle    c002cabf <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c002caaf:	83 ec 0c             	sub    esp,0xc
c002cab2:	68 94 37 03 c0       	push   0xc0033794
c002cab7:	e8 ea 36 ff ff       	call   c00201a6 <KePanic(char const*)>
c002cabc:	83 c4 10             	add    esp,0x10
c002cabf:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002cac5:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c002cacb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002cad1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cad5:	89 d0                	mov    eax,edx
c002cad7:	c1 e0 07             	shl    eax,0x7
c002cada:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cade:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002cae8:	51                   	push   ecx
c002cae9:	8d 42 02             	lea    eax,[edx+0x2]
c002caec:	51                   	push   ecx
c002caed:	c1 e0 07             	shl    eax,0x7
c002caf0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002caf4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002caf8:	50                   	push   eax
c002caf9:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002caff:	e8 68 ec ff ff       	call   c002b76c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002cb04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002cb08:	83 c4 10             	add    esp,0x10
c002cb0b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002cb10:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002cb14:	0f 84 aa 01 00 00    	je     c002ccc4 <SATA::access(unsigned long long, int, void*, bool)+0x242>
c002cb1a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cb1e:	c1 e0 09             	shl    eax,0x9
c002cb21:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cb26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002cb2a:	74 0e                	je     c002cb3a <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c002cb2c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002cb32:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002cb36:	89 c1                	mov    ecx,eax
c002cb38:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002cb3a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cb40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002cb44:	8d 42 02             	lea    eax,[edx+0x2]
c002cb47:	c1 e0 07             	shl    eax,0x7
c002cb4a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002cb4e:	8b 00                	mov    eax,DWORD PTR [eax]
c002cb50:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002cb56:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002cb5c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002cb60:	c1 e1 05             	shl    ecx,0x5
c002cb63:	01 c8                	add    eax,ecx
c002cb65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002cb69:	83 e1 01             	and    ecx,0x1
c002cb6c:	89 ce                	mov    esi,ecx
c002cb6e:	8a 08                	mov    cl,BYTE PTR [eax]
c002cb70:	c1 e6 06             	shl    esi,0x6
c002cb73:	83 e1 bf             	and    ecx,0xffffffbf
c002cb76:	09 f1                	or     ecx,esi
c002cb78:	88 08                	mov    BYTE PTR [eax],cl
c002cb7a:	8b 08                	mov    ecx,DWORD PTR [eax]
c002cb7c:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002cb82:	81 c9 05 00 01 00    	or     ecx,0x10005
c002cb88:	89 08                	mov    DWORD PTR [eax],ecx
c002cb8a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002cb90:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c002cb96:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c002cb9c:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c002cb9f:	50                   	push   eax
c002cba0:	68 90 00 00 00       	push   0x90
c002cba5:	6a 00                	push   0x0
c002cba7:	56                   	push   esi
c002cba8:	e8 43 39 fd ff       	call   c00004f0 <memset>
c002cbad:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002cbb3:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002cbb9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cbbd:	83 c4 10             	add    esp,0x10
c002cbc0:	48                   	dec    eax
c002cbc1:	25 ff ff 3f 00       	and    eax,0x3fffff
c002cbc6:	89 c1                	mov    ecx,eax
c002cbc8:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c002cbce:	25 00 00 c0 ff       	and    eax,0xffc00000
c002cbd3:	09 c8                	or     eax,ecx
c002cbd5:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c002cbdb:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c002cbe1:	83 c8 80             	or     eax,0xffffff80
c002cbe4:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c002cbea:	66 8b 06             	mov    ax,WORD PTR [esi]
c002cbed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002cbf1:	25 00 7f 00 00       	and    eax,0x7f00
c002cbf6:	0d 27 80 ff ff       	or     eax,0xffff8027
c002cbfb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002cc00:	66 89 06             	mov    WORD PTR [esi],ax
c002cc03:	b0 35                	mov    al,0x35
c002cc05:	75 02                	jne    c002cc09 <SATA::access(unsigned long long, int, void*, bool)+0x187>
c002cc07:	b0 25                	mov    al,0x25
c002cc09:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002cc0c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c002cc10:	89 e8                	mov    eax,ebp
c002cc12:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002cc16:	c1 e8 10             	shr    eax,0x10
c002cc19:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c002cc1c:	89 e8                	mov    eax,ebp
c002cc1e:	c1 e8 18             	shr    eax,0x18
c002cc21:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002cc24:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002cc28:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002cc2b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002cc2f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002cc32:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002cc36:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002cc3a:	89 d6                	mov    esi,edx
c002cc3c:	31 c0                	xor    eax,eax
c002cc3e:	c1 e6 07             	shl    esi,0x7
c002cc41:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002cc45:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002cc4b:	80 e1 88             	and    cl,0x88
c002cc4e:	74 0a                	je     c002cc5a <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c002cc50:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cc55:	74 0a                	je     c002cc61 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002cc57:	40                   	inc    eax
c002cc58:	eb eb                	jmp    c002cc45 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c002cc5a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002cc5f:	75 0a                	jne    c002cc6b <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c002cc61:	83 ec 0c             	sub    esp,0xc
c002cc64:	68 cd 37 03 c0       	push   0xc00337cd
c002cc69:	eb 36                	jmp    c002cca1 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c002cc6b:	b8 01 00 00 00       	mov    eax,0x1
c002cc70:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002cc74:	c1 e2 07             	shl    edx,0x7
c002cc77:	d3 e0                	shl    eax,cl
c002cc79:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c002cc7d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002cc83:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002cc89:	85 c8                	test   eax,ecx
c002cc8b:	74 2b                	je     c002ccb8 <SATA::access(unsigned long long, int, void*, bool)+0x236>
c002cc8d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c002cc93:	0f ba e1 1e          	bt     ecx,0x1e
c002cc97:	73 ea                	jae    c002cc83 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002cc99:	83 ec 0c             	sub    esp,0xc
c002cc9c:	68 db 37 03 c0       	push   0xc00337db
c002cca1:	e8 e7 c4 fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002cca6:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ccab:	83 c4 10             	add    esp,0x10
c002ccae:	48                   	dec    eax
c002ccaf:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ccb4:	85 c0                	test   eax,eax
c002ccb6:	eb 17                	jmp    c002cccf <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c002ccb8:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002ccbe:	0f ba e0 1e          	bt     eax,0x1e
c002ccc2:	73 15                	jae    c002ccd9 <SATA::access(unsigned long long, int, void*, bool)+0x257>
c002ccc4:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ccc9:	48                   	dec    eax
c002ccca:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002cccf:	75 01                	jne    c002ccd2 <SATA::access(unsigned long long, int, void*, bool)+0x250>
c002ccd1:	fb                   	sti    
c002ccd2:	b8 01 00 00 00       	mov    eax,0x1
c002ccd7:	eb 29                	jmp    c002cd02 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002ccd9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002ccde:	75 10                	jne    c002ccf0 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c002cce0:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002cce6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002ccea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002ccee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002ccf0:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002ccf5:	48                   	dec    eax
c002ccf6:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002ccfb:	75 03                	jne    c002cd00 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002ccfd:	fb                   	sti    
c002ccfe:	eb 02                	jmp    c002cd02 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c002cd00:	31 c0                	xor    eax,eax
c002cd02:	83 c4 2c             	add    esp,0x2c
c002cd05:	5b                   	pop    ebx
c002cd06:	5e                   	pop    esi
c002cd07:	5f                   	pop    edi
c002cd08:	5d                   	pop    ebp
c002cd09:	c3                   	ret    

c002cd0a <SATA::read(unsigned long long, int, void*)>:
c002cd0a:	55                   	push   ebp
c002cd0b:	57                   	push   edi
c002cd0c:	56                   	push   esi
c002cd0d:	be 04 00 00 00       	mov    esi,0x4
c002cd12:	53                   	push   ebx
c002cd13:	83 ec 0c             	sub    esp,0xc
c002cd16:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002cd1a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002cd1e:	8d 7b ff             	lea    edi,[ebx-0x1]
c002cd21:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002cd25:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002cd29:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002cd2f:	0f 87 1a 02 00 00    	ja     c002cf4f <SATA::read(unsigned long long, int, void*)+0x245>
c002cd35:	be 06 00 00 00       	mov    esi,0x6
c002cd3a:	85 c9                	test   ecx,ecx
c002cd3c:	0f 84 0d 02 00 00    	je     c002cf4f <SATA::read(unsigned long long, int, void*)+0x245>
c002cd42:	56                   	push   esi
c002cd43:	56                   	push   esi
c002cd44:	6a 00                	push   0x0
c002cd46:	51                   	push   ecx
c002cd47:	53                   	push   ebx
c002cd48:	52                   	push   edx
c002cd49:	50                   	push   eax
c002cd4a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002cd4e:	e8 2f fd ff ff       	call   c002ca82 <SATA::access(unsigned long long, int, void*, bool)>
c002cd53:	83 c4 20             	add    esp,0x20
c002cd56:	89 c6                	mov    esi,eax
c002cd58:	85 c0                	test   eax,eax
c002cd5a:	0f 85 ea 01 00 00    	jne    c002cf4a <SATA::read(unsigned long long, int, void*)+0x240>
c002cd60:	01 1d b4 0b 04 c0    	add    DWORD PTR ds:0xc0040bb4,ebx
c002cd66:	bb 0a 00 00 00       	mov    ebx,0xa
c002cd6b:	50                   	push   eax
c002cd6c:	50                   	push   eax
c002cd6d:	6a 0f                	push   0xf
c002cd6f:	6a 00                	push   0x0
c002cd71:	e8 33 f2 ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002cd76:	5a                   	pop    edx
c002cd77:	0f b6 c0             	movzx  eax,al
c002cd7a:	59                   	pop    ecx
c002cd7b:	b9 10 27 00 00       	mov    ecx,0x2710
c002cd80:	50                   	push   eax
c002cd81:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cd86:	99                   	cdq    
c002cd87:	f7 f9                	idiv   ecx
c002cd89:	99                   	cdq    
c002cd8a:	f7 fb                	idiv   ebx
c002cd8c:	8d 42 30             	lea    eax,[edx+0x30]
c002cd8f:	0f b6 c0             	movzx  eax,al
c002cd92:	50                   	push   eax
c002cd93:	e8 00 f2 ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002cd98:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002cd9e:	5f                   	pop    edi
c002cd9f:	5d                   	pop    ebp
c002cda0:	bd e8 03 00 00       	mov    ebp,0x3e8
c002cda5:	6a 0f                	push   0xf
c002cda7:	6a 00                	push   0x0
c002cda9:	e8 fb f1 ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002cdae:	5a                   	pop    edx
c002cdaf:	0f b6 c0             	movzx  eax,al
c002cdb2:	59                   	pop    ecx
c002cdb3:	50                   	push   eax
c002cdb4:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cdb9:	99                   	cdq    
c002cdba:	f7 fd                	idiv   ebp
c002cdbc:	99                   	cdq    
c002cdbd:	f7 fb                	idiv   ebx
c002cdbf:	8d 42 30             	lea    eax,[edx+0x30]
c002cdc2:	0f b6 c0             	movzx  eax,al
c002cdc5:	50                   	push   eax
c002cdc6:	e8 cd f1 ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002cdcb:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002cdd1:	5f                   	pop    edi
c002cdd2:	bf 64 00 00 00       	mov    edi,0x64
c002cdd7:	58                   	pop    eax
c002cdd8:	6a 0f                	push   0xf
c002cdda:	6a 00                	push   0x0
c002cddc:	e8 c8 f1 ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002cde1:	5a                   	pop    edx
c002cde2:	0f b6 c0             	movzx  eax,al
c002cde5:	59                   	pop    ecx
c002cde6:	50                   	push   eax
c002cde7:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cdec:	99                   	cdq    
c002cded:	f7 ff                	idiv   edi
c002cdef:	99                   	cdq    
c002cdf0:	f7 fb                	idiv   ebx
c002cdf2:	8d 42 30             	lea    eax,[edx+0x30]
c002cdf5:	0f b6 c0             	movzx  eax,al
c002cdf8:	50                   	push   eax
c002cdf9:	e8 9a f1 ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002cdfe:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002ce04:	58                   	pop    eax
c002ce05:	5a                   	pop    edx
c002ce06:	6a 0f                	push   0xf
c002ce08:	6a 00                	push   0x0
c002ce0a:	e8 9a f1 ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002ce0f:	59                   	pop    ecx
c002ce10:	0f b6 c0             	movzx  eax,al
c002ce13:	5a                   	pop    edx
c002ce14:	50                   	push   eax
c002ce15:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce1a:	99                   	cdq    
c002ce1b:	f7 fb                	idiv   ebx
c002ce1d:	99                   	cdq    
c002ce1e:	f7 fb                	idiv   ebx
c002ce20:	8d 42 30             	lea    eax,[edx+0x30]
c002ce23:	0f b6 c0             	movzx  eax,al
c002ce26:	50                   	push   eax
c002ce27:	e8 6c f1 ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002ce2c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002ce32:	59                   	pop    ecx
c002ce33:	58                   	pop    eax
c002ce34:	6a 0f                	push   0xf
c002ce36:	6a 00                	push   0x0
c002ce38:	e8 6c f1 ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002ce3d:	5a                   	pop    edx
c002ce3e:	0f b6 c0             	movzx  eax,al
c002ce41:	59                   	pop    ecx
c002ce42:	50                   	push   eax
c002ce43:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002ce48:	99                   	cdq    
c002ce49:	f7 fb                	idiv   ebx
c002ce4b:	8d 42 30             	lea    eax,[edx+0x30]
c002ce4e:	0f b6 c0             	movzx  eax,al
c002ce51:	50                   	push   eax
c002ce52:	e8 41 f1 ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002ce57:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002ce5d:	58                   	pop    eax
c002ce5e:	5a                   	pop    edx
c002ce5f:	6a 0f                	push   0xf
c002ce61:	6a 00                	push   0x0
c002ce63:	e8 41 f1 ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002ce68:	59                   	pop    ecx
c002ce69:	0f b6 c0             	movzx  eax,al
c002ce6c:	5a                   	pop    edx
c002ce6d:	b9 10 27 00 00       	mov    ecx,0x2710
c002ce72:	50                   	push   eax
c002ce73:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ce78:	99                   	cdq    
c002ce79:	f7 f9                	idiv   ecx
c002ce7b:	99                   	cdq    
c002ce7c:	f7 fb                	idiv   ebx
c002ce7e:	8d 42 30             	lea    eax,[edx+0x30]
c002ce81:	0f b6 c0             	movzx  eax,al
c002ce84:	50                   	push   eax
c002ce85:	e8 0e f1 ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002ce8a:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002ce90:	59                   	pop    ecx
c002ce91:	58                   	pop    eax
c002ce92:	6a 0f                	push   0xf
c002ce94:	6a 00                	push   0x0
c002ce96:	e8 0e f1 ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002ce9b:	5a                   	pop    edx
c002ce9c:	0f b6 c0             	movzx  eax,al
c002ce9f:	59                   	pop    ecx
c002cea0:	50                   	push   eax
c002cea1:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cea6:	99                   	cdq    
c002cea7:	f7 fd                	idiv   ebp
c002cea9:	99                   	cdq    
c002ceaa:	f7 fb                	idiv   ebx
c002ceac:	8d 42 30             	lea    eax,[edx+0x30]
c002ceaf:	0f b6 c0             	movzx  eax,al
c002ceb2:	50                   	push   eax
c002ceb3:	e8 e0 f0 ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002ceb8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002cebe:	5d                   	pop    ebp
c002cebf:	58                   	pop    eax
c002cec0:	6a 0f                	push   0xf
c002cec2:	6a 00                	push   0x0
c002cec4:	e8 e0 f0 ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002cec9:	5a                   	pop    edx
c002ceca:	0f b6 c0             	movzx  eax,al
c002cecd:	59                   	pop    ecx
c002cece:	50                   	push   eax
c002cecf:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002ced4:	99                   	cdq    
c002ced5:	f7 ff                	idiv   edi
c002ced7:	99                   	cdq    
c002ced8:	f7 fb                	idiv   ebx
c002ceda:	8d 42 30             	lea    eax,[edx+0x30]
c002cedd:	0f b6 c0             	movzx  eax,al
c002cee0:	50                   	push   eax
c002cee1:	e8 b2 f0 ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002cee6:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002ceec:	5f                   	pop    edi
c002ceed:	5d                   	pop    ebp
c002ceee:	6a 0f                	push   0xf
c002cef0:	6a 00                	push   0x0
c002cef2:	e8 b2 f0 ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002cef7:	5a                   	pop    edx
c002cef8:	0f b6 c0             	movzx  eax,al
c002cefb:	59                   	pop    ecx
c002cefc:	50                   	push   eax
c002cefd:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf02:	99                   	cdq    
c002cf03:	f7 fb                	idiv   ebx
c002cf05:	99                   	cdq    
c002cf06:	f7 fb                	idiv   ebx
c002cf08:	8d 42 30             	lea    eax,[edx+0x30]
c002cf0b:	0f b6 c0             	movzx  eax,al
c002cf0e:	50                   	push   eax
c002cf0f:	e8 84 f0 ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002cf14:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002cf1a:	5f                   	pop    edi
c002cf1b:	5d                   	pop    ebp
c002cf1c:	6a 0f                	push   0xf
c002cf1e:	6a 00                	push   0x0
c002cf20:	e8 84 f0 ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002cf25:	5a                   	pop    edx
c002cf26:	0f b6 c0             	movzx  eax,al
c002cf29:	59                   	pop    ecx
c002cf2a:	50                   	push   eax
c002cf2b:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002cf30:	99                   	cdq    
c002cf31:	f7 fb                	idiv   ebx
c002cf33:	83 c2 30             	add    edx,0x30
c002cf36:	0f b6 d2             	movzx  edx,dl
c002cf39:	52                   	push   edx
c002cf3a:	e8 59 f0 ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002cf3f:	83 c4 10             	add    esp,0x10
c002cf42:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002cf48:	eb 05                	jmp    c002cf4f <SATA::read(unsigned long long, int, void*)+0x245>
c002cf4a:	be 01 00 00 00       	mov    esi,0x1
c002cf4f:	83 c4 0c             	add    esp,0xc
c002cf52:	89 f0                	mov    eax,esi
c002cf54:	5b                   	pop    ebx
c002cf55:	5e                   	pop    esi
c002cf56:	5f                   	pop    edi
c002cf57:	5d                   	pop    ebp
c002cf58:	c3                   	ret    
c002cf59:	90                   	nop

c002cf5a <SATA::write(unsigned long long, int, void*)>:
c002cf5a:	55                   	push   ebp
c002cf5b:	b8 04 00 00 00       	mov    eax,0x4
c002cf60:	57                   	push   edi
c002cf61:	56                   	push   esi
c002cf62:	53                   	push   ebx
c002cf63:	83 ec 1c             	sub    esp,0x1c
c002cf66:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002cf6a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002cf6e:	8d 75 ff             	lea    esi,[ebp-0x1]
c002cf71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002cf75:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002cf79:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002cf7f:	0f 87 32 02 00 00    	ja     c002d1b7 <SATA::write(unsigned long long, int, void*)+0x25d>
c002cf85:	b8 06 00 00 00       	mov    eax,0x6
c002cf8a:	85 ff                	test   edi,edi
c002cf8c:	0f 84 25 02 00 00    	je     c002d1b7 <SATA::write(unsigned long long, int, void*)+0x25d>
c002cf92:	89 ee                	mov    esi,ebp
c002cf94:	c1 e6 09             	shl    esi,0x9
c002cf97:	01 fe                	add    esi,edi
c002cf99:	89 c8                	mov    eax,ecx
c002cf9b:	89 da                	mov    edx,ebx
c002cf9d:	83 c0 01             	add    eax,0x1
c002cfa0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002cfa4:	83 d2 00             	adc    edx,0x0
c002cfa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002cfab:	50                   	push   eax
c002cfac:	50                   	push   eax
c002cfad:	6a 01                	push   0x1
c002cfaf:	57                   	push   edi
c002cfb0:	81 c7 00 02 00 00    	add    edi,0x200
c002cfb6:	6a 01                	push   0x1
c002cfb8:	53                   	push   ebx
c002cfb9:	51                   	push   ecx
c002cfba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002cfbe:	e8 bf fa ff ff       	call   c002ca82 <SATA::access(unsigned long long, int, void*, bool)>
c002cfc3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c002cfc7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002cfcb:	83 c4 20             	add    esp,0x20
c002cfce:	39 f7                	cmp    edi,esi
c002cfd0:	75 c7                	jne    c002cf99 <SATA::write(unsigned long long, int, void*)+0x3f>
c002cfd2:	bb 0a 00 00 00       	mov    ebx,0xa
c002cfd7:	01 2d b0 0b 04 c0    	add    DWORD PTR ds:0xc0040bb0,ebp
c002cfdd:	bd 10 27 00 00       	mov    ebp,0x2710
c002cfe2:	50                   	push   eax
c002cfe3:	50                   	push   eax
c002cfe4:	6a 0f                	push   0xf
c002cfe6:	6a 00                	push   0x0
c002cfe8:	e8 bc ef ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002cfed:	5a                   	pop    edx
c002cfee:	0f b6 c0             	movzx  eax,al
c002cff1:	59                   	pop    ecx
c002cff2:	50                   	push   eax
c002cff3:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002cff8:	99                   	cdq    
c002cff9:	f7 fd                	idiv   ebp
c002cffb:	99                   	cdq    
c002cffc:	f7 fb                	idiv   ebx
c002cffe:	8d 42 30             	lea    eax,[edx+0x30]
c002d001:	0f b6 c0             	movzx  eax,al
c002d004:	50                   	push   eax
c002d005:	e8 8e ef ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002d00a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c002d010:	5e                   	pop    esi
c002d011:	5f                   	pop    edi
c002d012:	bf e8 03 00 00       	mov    edi,0x3e8
c002d017:	6a 0f                	push   0xf
c002d019:	6a 00                	push   0x0
c002d01b:	e8 89 ef ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002d020:	5a                   	pop    edx
c002d021:	0f b6 c0             	movzx  eax,al
c002d024:	59                   	pop    ecx
c002d025:	50                   	push   eax
c002d026:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d02b:	99                   	cdq    
c002d02c:	f7 ff                	idiv   edi
c002d02e:	99                   	cdq    
c002d02f:	f7 fb                	idiv   ebx
c002d031:	8d 42 30             	lea    eax,[edx+0x30]
c002d034:	0f b6 c0             	movzx  eax,al
c002d037:	50                   	push   eax
c002d038:	e8 5b ef ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002d03d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c002d043:	5e                   	pop    esi
c002d044:	be 64 00 00 00       	mov    esi,0x64
c002d049:	58                   	pop    eax
c002d04a:	6a 0f                	push   0xf
c002d04c:	6a 00                	push   0x0
c002d04e:	e8 56 ef ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002d053:	5a                   	pop    edx
c002d054:	0f b6 c0             	movzx  eax,al
c002d057:	59                   	pop    ecx
c002d058:	50                   	push   eax
c002d059:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d05e:	99                   	cdq    
c002d05f:	f7 fe                	idiv   esi
c002d061:	99                   	cdq    
c002d062:	f7 fb                	idiv   ebx
c002d064:	8d 42 30             	lea    eax,[edx+0x30]
c002d067:	0f b6 c0             	movzx  eax,al
c002d06a:	50                   	push   eax
c002d06b:	e8 28 ef ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002d070:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c002d076:	58                   	pop    eax
c002d077:	5a                   	pop    edx
c002d078:	6a 0f                	push   0xf
c002d07a:	6a 00                	push   0x0
c002d07c:	e8 28 ef ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002d081:	59                   	pop    ecx
c002d082:	0f b6 c0             	movzx  eax,al
c002d085:	5a                   	pop    edx
c002d086:	50                   	push   eax
c002d087:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d08c:	99                   	cdq    
c002d08d:	f7 fb                	idiv   ebx
c002d08f:	99                   	cdq    
c002d090:	f7 fb                	idiv   ebx
c002d092:	8d 42 30             	lea    eax,[edx+0x30]
c002d095:	0f b6 c0             	movzx  eax,al
c002d098:	50                   	push   eax
c002d099:	e8 fa ee ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002d09e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c002d0a4:	59                   	pop    ecx
c002d0a5:	58                   	pop    eax
c002d0a6:	6a 0f                	push   0xf
c002d0a8:	6a 00                	push   0x0
c002d0aa:	e8 fa ee ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002d0af:	5a                   	pop    edx
c002d0b0:	0f b6 c0             	movzx  eax,al
c002d0b3:	59                   	pop    ecx
c002d0b4:	50                   	push   eax
c002d0b5:	a1 b4 0b 04 c0       	mov    eax,ds:0xc0040bb4
c002d0ba:	99                   	cdq    
c002d0bb:	f7 fb                	idiv   ebx
c002d0bd:	83 c2 30             	add    edx,0x30
c002d0c0:	0f b6 d2             	movzx  edx,dl
c002d0c3:	52                   	push   edx
c002d0c4:	e8 cf ee ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002d0c9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c002d0cf:	58                   	pop    eax
c002d0d0:	5a                   	pop    edx
c002d0d1:	6a 0f                	push   0xf
c002d0d3:	6a 00                	push   0x0
c002d0d5:	e8 cf ee ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002d0da:	59                   	pop    ecx
c002d0db:	0f b6 c0             	movzx  eax,al
c002d0de:	5a                   	pop    edx
c002d0df:	50                   	push   eax
c002d0e0:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d0e5:	99                   	cdq    
c002d0e6:	f7 fd                	idiv   ebp
c002d0e8:	99                   	cdq    
c002d0e9:	f7 fb                	idiv   ebx
c002d0eb:	8d 42 30             	lea    eax,[edx+0x30]
c002d0ee:	0f b6 c0             	movzx  eax,al
c002d0f1:	50                   	push   eax
c002d0f2:	e8 a1 ee ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002d0f7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c002d0fd:	59                   	pop    ecx
c002d0fe:	5d                   	pop    ebp
c002d0ff:	6a 0f                	push   0xf
c002d101:	6a 00                	push   0x0
c002d103:	e8 a1 ee ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002d108:	5a                   	pop    edx
c002d109:	0f b6 c0             	movzx  eax,al
c002d10c:	59                   	pop    ecx
c002d10d:	50                   	push   eax
c002d10e:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d113:	99                   	cdq    
c002d114:	f7 ff                	idiv   edi
c002d116:	99                   	cdq    
c002d117:	f7 fb                	idiv   ebx
c002d119:	8d 42 30             	lea    eax,[edx+0x30]
c002d11c:	0f b6 c0             	movzx  eax,al
c002d11f:	50                   	push   eax
c002d120:	e8 73 ee ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002d125:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c002d12b:	5f                   	pop    edi
c002d12c:	5d                   	pop    ebp
c002d12d:	6a 0f                	push   0xf
c002d12f:	6a 00                	push   0x0
c002d131:	e8 73 ee ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002d136:	5a                   	pop    edx
c002d137:	0f b6 c0             	movzx  eax,al
c002d13a:	59                   	pop    ecx
c002d13b:	50                   	push   eax
c002d13c:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d141:	99                   	cdq    
c002d142:	f7 fe                	idiv   esi
c002d144:	99                   	cdq    
c002d145:	f7 fb                	idiv   ebx
c002d147:	8d 42 30             	lea    eax,[edx+0x30]
c002d14a:	0f b6 c0             	movzx  eax,al
c002d14d:	50                   	push   eax
c002d14e:	e8 45 ee ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002d153:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c002d159:	5e                   	pop    esi
c002d15a:	5f                   	pop    edi
c002d15b:	6a 0f                	push   0xf
c002d15d:	6a 00                	push   0x0
c002d15f:	e8 45 ee ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002d164:	5d                   	pop    ebp
c002d165:	0f b6 c0             	movzx  eax,al
c002d168:	5a                   	pop    edx
c002d169:	50                   	push   eax
c002d16a:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d16f:	99                   	cdq    
c002d170:	f7 fb                	idiv   ebx
c002d172:	99                   	cdq    
c002d173:	f7 fb                	idiv   ebx
c002d175:	8d 42 30             	lea    eax,[edx+0x30]
c002d178:	0f b6 c0             	movzx  eax,al
c002d17b:	50                   	push   eax
c002d17c:	e8 17 ee ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002d181:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c002d187:	59                   	pop    ecx
c002d188:	5e                   	pop    esi
c002d189:	6a 0f                	push   0xf
c002d18b:	6a 00                	push   0x0
c002d18d:	e8 17 ee ff ff       	call   c002bfa9 <combineColours(unsigned char, unsigned char)>
c002d192:	5f                   	pop    edi
c002d193:	0f b6 c0             	movzx  eax,al
c002d196:	5d                   	pop    ebp
c002d197:	50                   	push   eax
c002d198:	a1 b0 0b 04 c0       	mov    eax,ds:0xc0040bb0
c002d19d:	99                   	cdq    
c002d19e:	f7 fb                	idiv   ebx
c002d1a0:	83 c2 30             	add    edx,0x30
c002d1a3:	0f b6 d2             	movzx  edx,dl
c002d1a6:	52                   	push   edx
c002d1a7:	e8 ec ed ff ff       	call   c002bf98 <combineCharAndColour(char, unsigned char)>
c002d1ac:	83 c4 10             	add    esp,0x10
c002d1af:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c002d1b5:	31 c0                	xor    eax,eax
c002d1b7:	83 c4 1c             	add    esp,0x1c
c002d1ba:	5b                   	pop    ebx
c002d1bb:	5e                   	pop    esi
c002d1bc:	5f                   	pop    edi
c002d1bd:	5d                   	pop    ebp
c002d1be:	c3                   	ret    
c002d1bf:	90                   	nop

c002d1c0 <SATAPI::write(unsigned long long, int, void*)>:
c002d1c0:	b8 03 00 00 00       	mov    eax,0x3
c002d1c5:	c3                   	ret    

c002d1c6 <SATAPI::close(int, int, void*)>:
c002d1c6:	83 ec 0c             	sub    esp,0xc
c002d1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d1cd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d1d3:	85 c0                	test   eax,eax
c002d1d5:	74 0c                	je     c002d1e3 <SATAPI::close(int, int, void*)+0x1d>
c002d1d7:	83 ec 0c             	sub    esp,0xc
c002d1da:	8b 10                	mov    edx,DWORD PTR [eax]
c002d1dc:	50                   	push   eax
c002d1dd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002d1e0:	83 c4 10             	add    esp,0x10
c002d1e3:	31 c0                	xor    eax,eax
c002d1e5:	83 c4 0c             	add    esp,0xc
c002d1e8:	c3                   	ret    
c002d1e9:	90                   	nop

c002d1ea <SATAPI::SATAPI()>:
c002d1ea:	83 ec 0c             	sub    esp,0xc
c002d1ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d1f1:	83 ec 04             	sub    esp,0x4
c002d1f4:	68 00 08 00 00       	push   0x800
c002d1f9:	68 24 38 03 c0       	push   0xc0033824
c002d1fe:	50                   	push   eax
c002d1ff:	e8 ee e3 fe ff       	call   c001b5f2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002d204:	83 c4 10             	add    esp,0x10
c002d207:	ba 18 39 03 c0       	mov    edx,0xc0033918
c002d20c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d210:	89 10                	mov    DWORD PTR [eax],edx
c002d212:	90                   	nop
c002d213:	83 c4 0c             	add    esp,0xc
c002d216:	c3                   	ret    
c002d217:	90                   	nop

c002d218 <SATAPI::diskRemoved()>:
c002d218:	c3                   	ret    
c002d219:	90                   	nop

c002d21a <SATAPI::diskInserted()>:
c002d21a:	83 ec 18             	sub    esp,0x18
c002d21d:	68 30 38 03 c0       	push   0xc0033830
c002d222:	e8 66 bf fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002d227:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002d22b:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c002d232:	83 c4 1c             	add    esp,0x1c
c002d235:	c3                   	ret    

c002d236 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c002d236:	55                   	push   ebp
c002d237:	57                   	push   edi
c002d238:	56                   	push   esi
c002d239:	53                   	push   ebx
c002d23a:	83 ec 34             	sub    esp,0x34
c002d23d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c002d241:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d245:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c002d249:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d24d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002d251:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c002d257:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d25d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002d261:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c002d267:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002d26b:	83 c0 02             	add    eax,0x2
c002d26e:	c1 e0 07             	shl    eax,0x7
c002d271:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002d279:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d27d:	c1 e0 07             	shl    eax,0x7
c002d280:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002d284:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002d288:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002d292:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d296:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d29c:	e8 cb e4 ff ff       	call   c002b76c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002d2a1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002d2a5:	83 c4 10             	add    esp,0x10
c002d2a8:	b8 01 00 00 00       	mov    eax,0x1
c002d2ad:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002d2b2:	0f 84 53 02 00 00    	je     c002d50b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d2b8:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d2be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002d2c2:	8b 00                	mov    eax,DWORD PTR [eax]
c002d2c4:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002d2ca:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002d2d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002d2d4:	c1 e1 05             	shl    ecx,0x5
c002d2d7:	01 c8                	add    eax,ecx
c002d2d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c002d2db:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002d2e1:	81 c9 25 00 01 00    	or     ecx,0x10025
c002d2e7:	89 08                	mov    DWORD PTR [eax],ecx
c002d2e9:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002d2ef:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002d2f5:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002d2fb:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c002d2fe:	8d 7b 40             	lea    edi,[ebx+0x40]
c002d301:	50                   	push   eax
c002d302:	68 90 00 00 00       	push   0x90
c002d307:	6a 00                	push   0x0
c002d309:	53                   	push   ebx
c002d30a:	e8 e1 31 fd ff       	call   c00004f0 <memset>
c002d30f:	b9 0c 00 00 00       	mov    ecx,0xc
c002d314:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002d318:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d31a:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c002d320:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c002d324:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002d32a:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c002d32e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c002d332:	48                   	dec    eax
c002d333:	25 ff ff 3f 00       	and    eax,0x3fffff
c002d338:	89 c1                	mov    ecx,eax
c002d33a:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002d340:	25 00 00 c0 ff       	and    eax,0xffc00000
c002d345:	09 c8                	or     eax,ecx
c002d347:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c002d34d:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c002d353:	83 c8 80             	or     eax,0xffffff80
c002d356:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c002d35c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002d35f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002d363:	25 00 7f 00 00       	and    eax,0x7f00
c002d368:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002d36c:	0d 27 80 ff ff       	or     eax,0xffff8027
c002d371:	66 89 03             	mov    WORD PTR [ebx],ax
c002d374:	89 d0                	mov    eax,edx
c002d376:	c1 ea 18             	shr    edx,0x18
c002d379:	c1 e8 10             	shr    eax,0x10
c002d37c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002d37f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002d382:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002d386:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002d389:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002d38d:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002d390:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002d394:	83 c4 10             	add    esp,0x10
c002d397:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002d39b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002d39f:	31 c0                	xor    eax,eax
c002d3a1:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002d3a7:	80 e1 88             	and    cl,0x88
c002d3aa:	74 0a                	je     c002d3b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c002d3ac:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d3b1:	74 0a                	je     c002d3bd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c002d3b3:	40                   	inc    eax
c002d3b4:	eb eb                	jmp    c002d3a1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002d3b6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002d3bb:	75 43                	jne    c002d400 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c002d3bd:	83 ec 0c             	sub    esp,0xc
c002d3c0:	68 48 38 03 c0       	push   0xc0033848
c002d3c5:	e8 c3 bd fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002d3ca:	58                   	pop    eax
c002d3cb:	5a                   	pop    edx
c002d3cc:	68 5d 38 03 c0       	push   0xc003385d
c002d3d1:	ff 35 08 aa 03 c0    	push   DWORD PTR ds:0xc003aa08
c002d3d7:	e8 12 9f fe ff       	call   c00172ee <VgaText::puts(char const*)>
c002d3dc:	59                   	pop    ecx
c002d3dd:	5b                   	pop    ebx
c002d3de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d3e2:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d3e8:	e8 19 e4 ff ff       	call   c002b806 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c002d3ed:	5e                   	pop    esi
c002d3ee:	5f                   	pop    edi
c002d3ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002d3f3:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002d3f9:	e8 e8 e3 ff ff       	call   c002b7e6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c002d3fe:	eb 48                	jmp    c002d448 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c002d400:	be 01 00 00 00       	mov    esi,0x1
c002d405:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002d409:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002d40d:	d3 e6                	shl    esi,cl
c002d40f:	c1 e7 07             	shl    edi,0x7
c002d412:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002d418:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c002d41d:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c002d421:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c002d427:	85 c6                	test   esi,eax
c002d429:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c002d42f:	0f 84 a3 00 00 00    	je     c002d4d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c002d435:	0f ba e0 1e          	bt     eax,0x1e
c002d439:	73 1a                	jae    c002d455 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c002d43b:	83 ec 0c             	sub    esp,0xc
c002d43e:	68 6f 38 03 c0       	push   0xc003386f
c002d443:	e8 45 bd fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002d448:	83 c4 10             	add    esp,0x10
c002d44b:	b8 01 00 00 00       	mov    eax,0x1
c002d450:	e9 b6 00 00 00       	jmp    c002d50b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002d455:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c002d45b:	83 f8 0d             	cmp    eax,0xd
c002d45e:	77 0a                	ja     c002d46a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c002d460:	83 ec 0c             	sub    esp,0xc
c002d463:	68 c8 00 00 00       	push   0xc8
c002d468:	eb 28                	jmp    c002d492 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d46a:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c002d470:	83 f8 0d             	cmp    eax,0xd
c002d473:	77 0a                	ja     c002d47f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c002d475:	83 ec 0c             	sub    esp,0xc
c002d478:	68 58 02 00 00       	push   0x258
c002d47d:	eb 13                	jmp    c002d492 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c002d47f:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c002d485:	83 f8 06             	cmp    eax,0x6
c002d488:	77 10                	ja     c002d49a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002d48a:	83 ec 0c             	sub    esp,0xc
c002d48d:	68 dc 05 00 00       	push   0x5dc
c002d492:	e8 c5 7e ff ff       	call   c002535c <milliTenthSleep(unsigned int)>
c002d497:	83 c4 10             	add    esp,0x10
c002d49a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d49e:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c002d4a1:	75 06                	jne    c002d4a9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c002d4a3:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002d4a7:	74 15                	je     c002d4be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d4a9:	83 fb 06             	cmp    ebx,0x6
c002d4ac:	77 10                	ja     c002d4be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002d4ae:	83 ec 0c             	sub    esp,0xc
c002d4b1:	68 c4 09 00 00       	push   0x9c4
c002d4b6:	e8 a1 7e ff ff       	call   c002535c <milliTenthSleep(unsigned int)>
c002d4bb:	83 c4 10             	add    esp,0x10
c002d4be:	43                   	inc    ebx
c002d4bf:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c002d4c5:	0f 85 56 ff ff ff    	jne    c002d421 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002d4cb:	83 ec 0c             	sub    esp,0xc
c002d4ce:	68 82 38 03 c0       	push   0xc0033882
c002d4d3:	e9 6b ff ff ff       	jmp    c002d443 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d4d8:	0f ba e0 1e          	bt     eax,0x1e
c002d4dc:	73 0d                	jae    c002d4eb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c002d4de:	83 ec 0c             	sub    esp,0xc
c002d4e1:	68 96 38 03 c0       	push   0xc0033896
c002d4e6:	e9 58 ff ff ff       	jmp    c002d443 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002d4eb:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c002d4f0:	74 17                	je     c002d509 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d4f2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002d4f7:	74 10                	je     c002d509 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002d4f9:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c002d4ff:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c002d503:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002d507:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002d509:	31 c0                	xor    eax,eax
c002d50b:	83 c4 2c             	add    esp,0x2c
c002d50e:	5b                   	pop    ebx
c002d50f:	5e                   	pop    esi
c002d510:	5f                   	pop    edi
c002d511:	5d                   	pop    ebp
c002d512:	c3                   	ret    
c002d513:	90                   	nop

c002d514 <SATAPI::eject()>:
c002d514:	57                   	push   edi
c002d515:	b9 03 00 00 00       	mov    ecx,0x3
c002d51a:	83 ec 18             	sub    esp,0x18
c002d51d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002d521:	fc                   	cld    
c002d522:	31 c0                	xor    eax,eax
c002d524:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d526:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002d52b:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002d530:	50                   	push   eax
c002d531:	6a 00                	push   0x0
c002d533:	6a 00                	push   0x0
c002d535:	6a 00                	push   0x0
c002d537:	6a 00                	push   0x0
c002d539:	6a 02                	push   0x2
c002d53b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002d53f:	50                   	push   eax
c002d540:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002d544:	e8 ed fc ff ff       	call   c002d236 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d549:	31 c0                	xor    eax,eax
c002d54b:	83 c4 38             	add    esp,0x38
c002d54e:	5f                   	pop    edi
c002d54f:	c3                   	ret    

c002d550 <SATAPI::detectMedia()>:
c002d550:	53                   	push   ebx
c002d551:	83 ec 14             	sub    esp,0x14
c002d554:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002d558:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d55e:	e8 01 fa fe ff       	call   c001cf64 <VCache::writeWriteBuffer()>
c002d563:	59                   	pop    ecx
c002d564:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c002d56a:	e8 e5 f9 fe ff       	call   c001cf54 <VCache::invalidateReadBuffer()>
c002d56f:	c7 04 24 ab 38 03 c0 	mov    DWORD PTR [esp],0xc00338ab
c002d576:	e8 12 bc fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002d57b:	83 c4 10             	add    esp,0x10
c002d57e:	31 c0                	xor    eax,eax
c002d580:	8b 14 85 80 f3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0c80]
c002d587:	85 d2                	test   edx,edx
c002d589:	74 0f                	je     c002d59a <SATAPI::detectMedia()+0x4a>
c002d58b:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c002d591:	75 07                	jne    c002d59a <SATAPI::detectMedia()+0x4a>
c002d593:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002d59a:	40                   	inc    eax
c002d59b:	83 f8 1a             	cmp    eax,0x1a
c002d59e:	75 e0                	jne    c002d580 <SATAPI::detectMedia()+0x30>
c002d5a0:	83 c4 08             	add    esp,0x8
c002d5a3:	5b                   	pop    ebx
c002d5a4:	c3                   	ret    
c002d5a5:	90                   	nop

c002d5a6 <SATAPI::open(int, int, void*)>:
c002d5a6:	56                   	push   esi
c002d5a7:	53                   	push   ebx
c002d5a8:	51                   	push   ecx
c002d5a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002d5ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002d5b1:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002d5bb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002d5c1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002d5cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002d5cf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002d5d9:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002d5df:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002d5e6:	e8 1c 90 fe ff       	call   c0016607 <Phys::allocatePage()>
c002d5eb:	89 c6                	mov    esi,eax
c002d5ed:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002d5f3:	81 c6 00 10 00 00    	add    esi,0x1000
c002d5f9:	e8 09 90 fe ff       	call   c0016607 <Phys::allocatePage()>
c002d5fe:	39 c6                	cmp    esi,eax
c002d600:	74 10                	je     c002d612 <SATAPI::open(int, int, void*)+0x6c>
c002d602:	83 ec 0c             	sub    esp,0xc
c002d605:	68 c0 38 03 c0       	push   0xc00338c0
c002d60a:	e8 97 2b ff ff       	call   c00201a6 <KePanic(char const*)>
c002d60f:	83 c4 10             	add    esp,0x10
c002d612:	83 ec 0c             	sub    esp,0xc
c002d615:	6a 02                	push   0x2
c002d617:	e8 39 a8 fe ff       	call   c0017e55 <Virt::allocateKernelVirtualPages(int)>
c002d61c:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c002d622:	6a 03                	push   0x3
c002d624:	50                   	push   eax
c002d625:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002d62b:	ff 35 b0 aa 03 c0    	push   DWORD PTR ds:0xc003aab0
c002d631:	e8 32 af fe ff       	call   c0018568 <VAS::mapPage(unsigned long, unsigned long, int)>
c002d636:	83 c4 14             	add    esp,0x14
c002d639:	68 78 01 00 00       	push   0x178
c002d63e:	e8 bb 8c fe ff       	call   c00162fe <malloc>
c002d643:	83 c4 0c             	add    esp,0xc
c002d646:	89 c6                	mov    esi,eax
c002d648:	6a 00                	push   0x0
c002d64a:	68 ff ff ff 7f       	push   0x7fffffff
c002d64f:	6a 00                	push   0x0
c002d651:	6a 00                	push   0x0
c002d653:	53                   	push   ebx
c002d654:	68 d6 38 03 c0       	push   0xc00338d6
c002d659:	50                   	push   eax
c002d65a:	e8 65 ed fe ff       	call   c001c3c4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c002d65f:	83 c4 14             	add    esp,0x14
c002d662:	56                   	push   esi
c002d663:	e8 1c ee fe ff       	call   c001c484 <LogicalDisk::assignDriveLetter()>
c002d668:	5a                   	pop    edx
c002d669:	0f be c0             	movsx  eax,al
c002d66c:	59                   	pop    ecx
c002d66d:	50                   	push   eax
c002d66e:	68 1c 37 03 c0       	push   0xc003371c
c002d673:	e8 15 bb fe ff       	call   c001918d <Dbg::kprintf(char const*, ...)>
c002d678:	58                   	pop    eax
c002d679:	5a                   	pop    edx
c002d67a:	56                   	push   esi
c002d67b:	53                   	push   ebx
c002d67c:	e8 8d db fe ff       	call   c001b20e <Device::addChild(Device*)>
c002d681:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002d687:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d68a:	e8 cb df fe ff       	call   c001b65a <PhysicalDisk::startCache()>
c002d68f:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002d696:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002d699:	e8 b2 fe ff ff       	call   c002d550 <SATAPI::detectMedia()>
c002d69e:	83 c4 14             	add    esp,0x14
c002d6a1:	31 c0                	xor    eax,eax
c002d6a3:	5b                   	pop    ebx
c002d6a4:	5e                   	pop    esi
c002d6a5:	c3                   	ret    

c002d6a6 <SATAPI::read(unsigned long long, int, void*)>:
c002d6a6:	57                   	push   edi
c002d6a7:	56                   	push   esi
c002d6a8:	53                   	push   ebx
c002d6a9:	83 ec 30             	sub    esp,0x30
c002d6ac:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002d6b0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c002d6b4:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002d6b8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002d6bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d6c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002d6c4:	83 fe 04             	cmp    esi,0x4
c002d6c7:	7e 10                	jle    c002d6d9 <SATAPI::read(unsigned long long, int, void*)+0x33>
c002d6c9:	83 ec 0c             	sub    esp,0xc
c002d6cc:	68 e4 38 03 c0       	push   0xc00338e4
c002d6d1:	e8 d0 2a ff ff       	call   c00201a6 <KePanic(char const*)>
c002d6d6:	83 c4 10             	add    esp,0x10
c002d6d9:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c002d6df:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002d6e5:	51                   	push   ecx
c002d6e6:	50                   	push   eax
c002d6e7:	83 c0 02             	add    eax,0x2
c002d6ea:	c1 e0 07             	shl    eax,0x7
c002d6ed:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c002d6f3:	50                   	push   eax
c002d6f4:	52                   	push   edx
c002d6f5:	e8 36 e1 ff ff       	call   c002b830 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002d6fa:	8d 7c 24 28          	lea    edi,[esp+0x28]
c002d6fe:	b9 03 00 00 00       	mov    ecx,0x3
c002d703:	fc                   	cld    
c002d704:	31 c0                	xor    eax,eax
c002d706:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d708:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c002d70d:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c002d712:	83 c4 0c             	add    esp,0xc
c002d715:	6a 00                	push   0x0
c002d717:	6a 00                	push   0x0
c002d719:	6a 00                	push   0x0
c002d71b:	6a 00                	push   0x0
c002d71d:	6a 02                	push   0x2
c002d71f:	8d 44 24 30          	lea    eax,[esp+0x30]
c002d723:	50                   	push   eax
c002d724:	53                   	push   ebx
c002d725:	e8 0c fb ff ff       	call   c002d236 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d72a:	83 c4 20             	add    esp,0x20
c002d72d:	85 c0                	test   eax,eax
c002d72f:	75 44                	jne    c002d775 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c002d731:	8d 7c 24 24          	lea    edi,[esp+0x24]
c002d735:	b9 03 00 00 00       	mov    ecx,0x3
c002d73a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002d73c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d740:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c002d745:	0f c8                	bswap  eax
c002d747:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c002d74b:	89 f0                	mov    eax,esi
c002d74d:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c002d751:	50                   	push   eax
c002d752:	56                   	push   esi
c002d753:	c1 e6 0b             	shl    esi,0xb
c002d756:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c002d75a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d75e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002d762:	56                   	push   esi
c002d763:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002d767:	50                   	push   eax
c002d768:	53                   	push   ebx
c002d769:	e8 c8 fa ff ff       	call   c002d236 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002d76e:	83 c4 20             	add    esp,0x20
c002d771:	85 c0                	test   eax,eax
c002d773:	74 14                	je     c002d789 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c002d775:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002d779:	83 ec 0c             	sub    esp,0xc
c002d77c:	53                   	push   ebx
c002d77d:	e8 ce fd ff ff       	call   c002d550 <SATAPI::detectMedia()>
c002d782:	83 c4 10             	add    esp,0x10
c002d785:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002d789:	83 c4 30             	add    esp,0x30
c002d78c:	5b                   	pop    ebx
c002d78d:	5e                   	pop    esi
c002d78e:	5f                   	pop    edi
c002d78f:	c3                   	ret    

c002d790 <IOAPIC::close(int, int, void*)>:
c002d790:	b8 00 00 00 00       	mov    eax,0x0
c002d795:	c3                   	ret    

c002d796 <apicGetBase()>:
c002d796:	55                   	push   ebp
c002d797:	89 e5                	mov    ebp,esp
c002d799:	83 ec 18             	sub    esp,0x18
c002d79c:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d7a1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c002d7a7:	83 e0 08             	and    eax,0x8
c002d7aa:	0f b6 c0             	movzx  eax,al
c002d7ad:	85 c0                	test   eax,eax
c002d7af:	75 07                	jne    c002d7b8 <apicGetBase()+0x22>
c002d7b1:	b8 00 00 00 00       	mov    eax,0x0
c002d7b6:	eb 21                	jmp    c002d7d9 <apicGetBase()+0x43>
c002d7b8:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d7bd:	83 ec 08             	sub    esp,0x8
c002d7c0:	6a 1b                	push   0x1b
c002d7c2:	50                   	push   eax
c002d7c3:	e8 40 81 fe ff       	call   c0015908 <Computer::rdmsr(unsigned int)>
c002d7c8:	83 c4 10             	add    esp,0x10
c002d7cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002d7ce:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002d7d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d7d4:	25 00 00 ff ff       	and    eax,0xffff0000
c002d7d9:	c9                   	leave  
c002d7da:	c3                   	ret    
c002d7db:	90                   	nop

c002d7dc <IOAPIC::IOAPIC()>:
c002d7dc:	83 ec 0c             	sub    esp,0xc
c002d7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d7e3:	83 ec 08             	sub    esp,0x8
c002d7e6:	68 48 39 03 c0       	push   0xc0033948
c002d7eb:	50                   	push   eax
c002d7ec:	e8 7f db fe ff       	call   c001b370 <Device::Device(char const*)>
c002d7f1:	83 c4 10             	add    esp,0x10
c002d7f4:	ba 58 39 03 c0       	mov    edx,0xc0033958
c002d7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002d7fd:	89 10                	mov    DWORD PTR [eax],edx
c002d7ff:	90                   	nop
c002d800:	83 c4 0c             	add    esp,0xc
c002d803:	c3                   	ret    

c002d804 <apicOpen()>:
c002d804:	55                   	push   ebp
c002d805:	89 e5                	mov    ebp,esp
c002d807:	53                   	push   ebx
c002d808:	83 ec 34             	sub    esp,0x34
c002d80b:	a0 00 0c 04 c0       	mov    al,ds:0xc0040c00
c002d810:	83 f0 01             	xor    eax,0x1
c002d813:	0f b6 c0             	movzx  eax,al
c002d816:	85 c0                	test   eax,eax
c002d818:	0f 84 a3 00 00 00    	je     c002d8c1 <apicOpen()+0xbd>
c002d81e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002d822:	a0 e0 f6 03 c0       	mov    al,ds:0xc003f6e0
c002d827:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d82b:	0f b6 c0             	movzx  eax,al
c002d82e:	39 c2                	cmp    edx,eax
c002d830:	0f 83 84 00 00 00    	jae    c002d8ba <apicOpen()+0xb6>
c002d836:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c002d83d:	83 ec 0c             	sub    esp,0xc
c002d840:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002d843:	e8 b6 8a fe ff       	call   c00162fe <malloc>
c002d848:	83 c4 10             	add    esp,0x10
c002d84b:	89 c3                	mov    ebx,eax
c002d84d:	83 ec 0c             	sub    esp,0xc
c002d850:	53                   	push   ebx
c002d851:	e8 86 ff ff ff       	call   c002d7dc <IOAPIC::IOAPIC()>
c002d856:	83 c4 10             	add    esp,0x10
c002d859:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c002d85c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c002d860:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c002d863:	89 14 85 e0 0b 04 c0 	mov    DWORD PTR [eax*4-0x3ffbf420],edx
c002d86a:	a1 c0 0b 04 c0       	mov    eax,ds:0xc0040bc0
c002d86f:	83 c0 01             	add    eax,0x1
c002d872:	a3 c0 0b 04 c0       	mov    ds:0xc0040bc0,eax
c002d877:	a1 bc a9 03 c0       	mov    eax,ds:0xc003a9bc
c002d87c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c002d882:	83 ec 08             	sub    esp,0x8
c002d885:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d888:	50                   	push   eax
c002d889:	e8 80 d9 fe ff       	call   c001b20e <Device::addChild(Device*)>
c002d88e:	83 c4 10             	add    esp,0x10
c002d891:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002d894:	8b 00                	mov    eax,DWORD PTR [eax]
c002d896:	83 c0 08             	add    eax,0x8
c002d899:	8b 00                	mov    eax,DWORD PTR [eax]
c002d89b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002d89f:	6a 00                	push   0x0
c002d8a1:	6a 00                	push   0x0
c002d8a3:	52                   	push   edx
c002d8a4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c002d8a7:	ff d0                	call   eax
c002d8a9:	83 c4 10             	add    esp,0x10
c002d8ac:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002d8af:	83 c0 01             	add    eax,0x1
c002d8b2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c002d8b5:	e9 68 ff ff ff       	jmp    c002d822 <apicOpen()+0x1e>
c002d8ba:	c6 05 00 0c 04 c0 01 	mov    BYTE PTR ds:0xc0040c00,0x1
c002d8c1:	e8 d0 fe ff ff       	call   c002d796 <apicGetBase()>
c002d8c6:	05 f0 00 00 00       	add    eax,0xf0
c002d8cb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002d8ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d8d1:	8b 00                	mov    eax,DWORD PTR [eax]
c002d8d3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002d8d6:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c002d8dd:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c002d8e4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002d8e7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002d8ea:	89 10                	mov    DWORD PTR [eax],edx
c002d8ec:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002d8f3:	a1 30 f6 03 c0       	mov    eax,ds:0xc003f630
c002d8f8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c002d8fb:	7d 7c                	jge    c002d979 <apicOpen()+0x175>
c002d8fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d900:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d907:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c002d90a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d90d:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d914:	c1 e8 08             	shr    eax,0x8
c002d917:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c002d91b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002d91e:	8b 04 85 40 f6 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc09c0]
c002d925:	c1 e8 18             	shr    eax,0x18
c002d928:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c002d92b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002d92f:	3d ff 00 00 00       	cmp    eax,0xff
c002d934:	75 3a                	jne    c002d970 <apicOpen()+0x16c>
c002d936:	e8 5b fe ff ff       	call   c002d796 <apicGetBase()>
c002d93b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c002d93f:	83 fa 01             	cmp    edx,0x1
c002d942:	75 07                	jne    c002d94b <apicOpen()+0x147>
c002d944:	ba 60 03 00 00       	mov    edx,0x360
c002d949:	eb 05                	jmp    c002d950 <apicOpen()+0x14c>
c002d94b:	ba 50 03 00 00       	mov    edx,0x350
c002d950:	01 d0                	add    eax,edx
c002d952:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002d955:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d958:	8b 00                	mov    eax,DWORD PTR [eax]
c002d95a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002d95d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c002d964:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c002d968:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002d96b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002d96e:	89 10                	mov    DWORD PTR [eax],edx
c002d970:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c002d974:	e9 7a ff ff ff       	jmp    c002d8f3 <apicOpen()+0xef>
c002d979:	90                   	nop
c002d97a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002d97d:	c9                   	leave  
c002d97e:	c3                   	ret    
c002d97f:	90                   	nop

c002d980 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002d980:	55                   	push   ebp
c002d981:	89 e5                	mov    ebp,esp
c002d983:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d986:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002d98c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002d98f:	72 1d                	jb     c002d9ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002d991:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d994:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002d99a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d99d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002d9a3:	01 d0                	add    eax,edx
c002d9a5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002d9a8:	73 04                	jae    c002d9ae <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002d9aa:	b0 01                	mov    al,0x1
c002d9ac:	eb 02                	jmp    c002d9b0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002d9ae:	b0 00                	mov    al,0x0
c002d9b0:	5d                   	pop    ebp
c002d9b1:	c3                   	ret    

c002d9b2 <IOAPIC::read(int)>:
c002d9b2:	55                   	push   ebp
c002d9b3:	89 e5                	mov    ebp,esp
c002d9b5:	83 ec 10             	sub    esp,0x10
c002d9b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002d9c1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002d9c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002d9c7:	0f b6 d0             	movzx  edx,al
c002d9ca:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d9cd:	89 10                	mov    DWORD PTR [eax],edx
c002d9cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002d9d2:	83 c0 10             	add    eax,0x10
c002d9d5:	8b 00                	mov    eax,DWORD PTR [eax]
c002d9d7:	c9                   	leave  
c002d9d8:	c3                   	ret    
c002d9d9:	90                   	nop

c002d9da <IOAPIC::open(int, int, void*)>:
c002d9da:	55                   	push   ebp
c002d9db:	89 e5                	mov    ebp,esp
c002d9dd:	57                   	push   edi
c002d9de:	56                   	push   esi
c002d9df:	53                   	push   ebx
c002d9e0:	83 ec 04             	sub    esp,0x4
c002d9e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002d9e9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002d9ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002d9f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002d9f8:	8b 14 85 20 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc08e0]
c002d9ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da02:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002da08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da0b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002da11:	8b 14 85 a0 f7 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc0860]
c002da18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da1b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002da21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da24:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002da2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da2d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002da33:	0f b6 f0             	movzx  esi,al
c002da36:	89 d0                	mov    eax,edx
c002da38:	ba 00 00 00 00       	mov    edx,0x0
c002da3d:	89 c7                	mov    edi,eax
c002da3f:	83 e7 ff             	and    edi,0xffffffff
c002da42:	89 f9                	mov    ecx,edi
c002da44:	0f b6 da             	movzx  ebx,dl
c002da47:	89 c8                	mov    eax,ecx
c002da49:	89 da                	mov    edx,ebx
c002da4b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002da4e:	8d 5e 08             	lea    ebx,[esi+0x8]
c002da51:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002da55:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002da59:	83 e0 00             	and    eax,0x0
c002da5c:	09 d0                	or     eax,edx
c002da5e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002da62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da65:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002da6b:	8d 50 01             	lea    edx,[eax+0x1]
c002da6e:	88 d1                	mov    cl,dl
c002da70:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002da73:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c002da79:	0f b6 d0             	movzx  edx,al
c002da7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002da7f:	83 c2 08             	add    edx,0x8
c002da82:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002da86:	0f b6 c9             	movzx  ecx,cl
c002da89:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002da8f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002da93:	6a 01                	push   0x1
c002da95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002da98:	e8 15 ff ff ff       	call   c002d9b2 <IOAPIC::read(int)>
c002da9d:	83 c4 08             	add    esp,0x8
c002daa0:	c1 f8 10             	sar    eax,0x10
c002daa3:	0f b6 c0             	movzx  eax,al
c002daa6:	8d 50 01             	lea    edx,[eax+0x1]
c002daa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002daac:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002dab2:	b8 00 00 00 00       	mov    eax,0x0
c002dab7:	8d 65 f4             	lea    esp,[ebp-0xc]
c002daba:	5b                   	pop    ebx
c002dabb:	5e                   	pop    esi
c002dabc:	5f                   	pop    edi
c002dabd:	5d                   	pop    ebp
c002dabe:	c3                   	ret    
c002dabf:	90                   	nop

c002dac0 <IOAPIC::write(int, int)>:
c002dac0:	55                   	push   ebp
c002dac1:	89 e5                	mov    ebp,esp
c002dac3:	83 ec 10             	sub    esp,0x10
c002dac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002dac9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002dacf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002dad2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002dad5:	0f b6 d0             	movzx  edx,al
c002dad8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dadb:	89 10                	mov    DWORD PTR [eax],edx
c002dadd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002dae0:	8d 50 10             	lea    edx,[eax+0x10]
c002dae3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002dae6:	89 02                	mov    DWORD PTR [edx],eax
c002dae8:	90                   	nop
c002dae9:	c9                   	leave  
c002daea:	c3                   	ret    
c002daeb:	90                   	nop

c002daec <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002daec:	55                   	push   ebp
c002daed:	89 e5                	mov    ebp,esp
c002daef:	53                   	push   ebx
c002daf0:	83 ec 2c             	sub    esp,0x2c
c002daf3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002daf6:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002daf9:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002dafc:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002daff:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002db02:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002db05:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002db08:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002db0b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002db0e:	88 d8                	mov    al,bl
c002db10:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c002db13:	88 c8                	mov    al,cl
c002db15:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002db18:	88 d0                	mov    al,dl
c002db1a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002db1d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002db21:	83 c0 08             	add    eax,0x8
c002db24:	01 c0                	add    eax,eax
c002db26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002db29:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002db2d:	83 c0 08             	add    eax,0x8
c002db30:	01 c0                	add    eax,eax
c002db32:	83 c0 01             	add    eax,0x1
c002db35:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002db38:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002db3b:	50                   	push   eax
c002db3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002db3f:	e8 6e fe ff ff       	call   c002d9b2 <IOAPIC::read(int)>
c002db44:	83 c4 08             	add    esp,0x8
c002db47:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002db4a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c002db51:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002db54:	c1 e0 18             	shl    eax,0x18
c002db57:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002db5a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002db5d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002db60:	52                   	push   edx
c002db61:	50                   	push   eax
c002db62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002db65:	e8 56 ff ff ff       	call   c002dac0 <IOAPIC::write(int, int)>
c002db6a:	83 c4 0c             	add    esp,0xc
c002db6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002db70:	50                   	push   eax
c002db71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002db74:	e8 39 fe ff ff       	call   c002d9b2 <IOAPIC::read(int)>
c002db79:	83 c4 08             	add    esp,0x8
c002db7c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002db7f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002db86:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002db8d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002db94:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c002db98:	85 c0                	test   eax,eax
c002db9a:	74 09                	je     c002dba5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c002db9c:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002dba3:	eb 07                	jmp    c002dbac <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c002dba5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002dbac:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c002dbb0:	85 c0                	test   eax,eax
c002dbb2:	74 09                	je     c002dbbd <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c002dbb4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002dbbb:	eb 07                	jmp    c002dbc4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c002dbbd:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002dbc4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002dbcb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002dbcf:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002dbd2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002dbd5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002dbd8:	52                   	push   edx
c002dbd9:	50                   	push   eax
c002dbda:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002dbdd:	e8 de fe ff ff       	call   c002dac0 <IOAPIC::write(int, int)>
c002dbe2:	83 c4 0c             	add    esp,0xc
c002dbe5:	90                   	nop
c002dbe6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c002dbe9:	c9                   	leave  
c002dbea:	c3                   	ret    
c002dbeb:	90                   	nop

c002dbec <APICTimer::close(int, int, void*)>:
c002dbec:	b8 00 00 00 00       	mov    eax,0x0
c002dbf1:	c3                   	ret    
c002dbf2:	66 90                	xchg   ax,ax

c002dbf4 <apicTimerHandler(regs*, void*)>:
c002dbf4:	83 ec 0c             	sub    esp,0xc
c002dbf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dbfb:	8b 08                	mov    ecx,DWORD PTR [eax]
c002dbfd:	b8 10 27 00 00       	mov    eax,0x2710
c002dc02:	ba 00 00 00 00       	mov    edx,0x0
c002dc07:	f7 f1                	div    ecx
c002dc09:	83 ec 0c             	sub    esp,0xc
c002dc0c:	50                   	push   eax
c002dc0d:	e8 6e f0 fe ff       	call   c001cc80 <timerHandler(unsigned int)>
c002dc12:	83 c4 10             	add    esp,0x10
c002dc15:	90                   	nop
c002dc16:	83 c4 0c             	add    esp,0xc
c002dc19:	c3                   	ret    
c002dc1a:	66 90                	xchg   ax,ax

c002dc1c <APICTimer::open(int, int, void*)>:
c002dc1c:	83 ec 0c             	sub    esp,0xc
c002dc1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc23:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc25:	83 c0 24             	add    eax,0x24
c002dc28:	8b 00                	mov    eax,DWORD PTR [eax]
c002dc2a:	83 ec 08             	sub    esp,0x8
c002dc2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dc35:	ff d0                	call   eax
c002dc37:	83 c4 10             	add    esp,0x10
c002dc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dc42:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002dc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dc50:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c002dc56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002dc5a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002dc60:	83 ec 0c             	sub    esp,0xc
c002dc63:	51                   	push   ecx
c002dc64:	6a 01                	push   0x1
c002dc66:	68 f4 db 02 c0       	push   0xc002dbf4
c002dc6b:	52                   	push   edx
c002dc6c:	50                   	push   eax
c002dc6d:	e8 48 d5 fe ff       	call   c001b1ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002dc72:	83 c4 20             	add    esp,0x20
c002dc75:	89 c2                	mov    edx,eax
c002dc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dc7b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002dc81:	b8 00 00 00 00       	mov    eax,0x0
c002dc86:	83 c4 0c             	add    esp,0xc
c002dc89:	c3                   	ret    
c002dc8a:	66 90                	xchg   ax,ax

c002dc8c <APICTimer::write(int)>:
c002dc8c:	83 ec 0c             	sub    esp,0xc
c002dc8f:	83 ec 0c             	sub    esp,0xc
c002dc92:	68 7c 39 03 c0       	push   0xc003397c
c002dc97:	e8 0a 25 ff ff       	call   c00201a6 <KePanic(char const*)>
c002dc9c:	83 c4 10             	add    esp,0x10
c002dc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dca3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002dca7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dcad:	90                   	nop
c002dcae:	83 c4 0c             	add    esp,0xc
c002dcb1:	c3                   	ret    
c002dcb2:	66 90                	xchg   ax,ax

c002dcb4 <APICTimer::APICTimer()>:
c002dcb4:	83 ec 0c             	sub    esp,0xc
c002dcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dcbb:	83 ec 08             	sub    esp,0x8
c002dcbe:	68 8c 39 03 c0       	push   0xc003398c
c002dcc3:	50                   	push   eax
c002dcc4:	e8 eb ee fe ff       	call   c001cbb4 <Timer::Timer(char const*)>
c002dcc9:	83 c4 10             	add    esp,0x10
c002dccc:	ba a0 39 03 c0       	mov    edx,0xc00339a0
c002dcd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dcd5:	89 10                	mov    DWORD PTR [eax],edx
c002dcd7:	90                   	nop
c002dcd8:	83 c4 0c             	add    esp,0xc
c002dcdb:	c3                   	ret    

c002dcdc <PIT::write(int)>:
c002dcdc:	83 ec 10             	sub    esp,0x10
c002dcdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002dce3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002dce7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002dced:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002dcf1:	a3 04 0c 04 c0       	mov    ds:0xc0040c04,eax
c002dcf6:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002dcfb:	89 c2                	mov    edx,eax
c002dcfd:	c1 fa 1f             	sar    edx,0x1f
c002dd00:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c002dd04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002dd08:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002dd0f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c002dd14:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002dd18:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002dd1d:	ee                   	out    dx,al
c002dd1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002dd22:	0f b6 c0             	movzx  eax,al
c002dd25:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002dd2c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002dd30:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c002dd34:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002dd39:	ee                   	out    dx,al
c002dd3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002dd3e:	c1 f8 08             	sar    eax,0x8
c002dd41:	0f b6 c0             	movzx  eax,al
c002dd44:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002dd4b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002dd4f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002dd53:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002dd58:	ee                   	out    dx,al
c002dd59:	90                   	nop
c002dd5a:	83 c4 10             	add    esp,0x10
c002dd5d:	c3                   	ret    
c002dd5e:	66 90                	xchg   ax,ax

c002dd60 <pitHandler(regs*, void*)>:
c002dd60:	83 ec 0c             	sub    esp,0xc
c002dd63:	8b 0d 04 0c 04 c0    	mov    ecx,DWORD PTR ds:0xc0040c04
c002dd69:	b8 10 27 00 00       	mov    eax,0x2710
c002dd6e:	89 c2                	mov    edx,eax
c002dd70:	c1 fa 1f             	sar    edx,0x1f
c002dd73:	f7 f9                	idiv   ecx
c002dd75:	83 ec 0c             	sub    esp,0xc
c002dd78:	50                   	push   eax
c002dd79:	e8 02 ef fe ff       	call   c001cc80 <timerHandler(unsigned int)>
c002dd7e:	83 c4 10             	add    esp,0x10
c002dd81:	90                   	nop
c002dd82:	83 c4 0c             	add    esp,0xc
c002dd85:	c3                   	ret    
c002dd86:	66 90                	xchg   ax,ax

c002dd88 <PIT::open(int, int, void*)>:
c002dd88:	83 ec 0c             	sub    esp,0xc
c002dd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dd8f:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd91:	83 c0 24             	add    eax,0x24
c002dd94:	8b 00                	mov    eax,DWORD PTR [eax]
c002dd96:	83 ec 08             	sub    esp,0x8
c002dd99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dd9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002dda1:	ff d0                	call   eax
c002dda3:	83 c4 10             	add    esp,0x10
c002dda6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddaa:	83 ec 0c             	sub    esp,0xc
c002ddad:	6a 00                	push   0x0
c002ddaf:	6a 01                	push   0x1
c002ddb1:	68 60 dd 02 c0       	push   0xc002dd60
c002ddb6:	6a 00                	push   0x0
c002ddb8:	50                   	push   eax
c002ddb9:	e8 fc d3 fe ff       	call   c001b1ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002ddbe:	83 c4 20             	add    esp,0x20
c002ddc1:	89 c2                	mov    edx,eax
c002ddc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ddc7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002ddcd:	b8 00 00 00 00       	mov    eax,0x0
c002ddd2:	83 c4 0c             	add    esp,0xc
c002ddd5:	c3                   	ret    
c002ddd6:	66 90                	xchg   ax,ax

c002ddd8 <PIT::close(int, int, void*)>:
c002ddd8:	83 ec 0c             	sub    esp,0xc
c002dddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dddf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002dde9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002dded:	6a 01                	push   0x1
c002ddef:	68 60 dd 02 c0       	push   0xc002dd60
c002ddf4:	6a 00                	push   0x0
c002ddf6:	50                   	push   eax
c002ddf7:	e8 f4 d3 fe ff       	call   c001b1f0 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002ddfc:	83 c4 10             	add    esp,0x10
c002ddff:	b8 00 00 00 00       	mov    eax,0x0
c002de04:	83 c4 0c             	add    esp,0xc
c002de07:	c3                   	ret    

c002de08 <PIT::PIT()>:
c002de08:	83 ec 0c             	sub    esp,0xc
c002de0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de0f:	83 ec 08             	sub    esp,0x8
c002de12:	68 c8 39 03 c0       	push   0xc00339c8
c002de17:	50                   	push   eax
c002de18:	e8 97 ed fe ff       	call   c001cbb4 <Timer::Timer(char const*)>
c002de1d:	83 c4 10             	add    esp,0x10
c002de20:	ba f0 39 03 c0       	mov    edx,0xc00339f0
c002de25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de29:	89 10                	mov    DWORD PTR [eax],edx
c002de2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de2f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002de35:	0f b6 d0             	movzx  edx,al
c002de38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de3c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002de43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de47:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002de4d:	0f b6 d0             	movzx  edx,al
c002de50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de54:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002de59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de5d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002de63:	8d 50 01             	lea    edx,[eax+0x1]
c002de66:	88 d1                	mov    cl,dl
c002de68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002de6c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c002de72:	0f b6 d0             	movzx  edx,al
c002de75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002de79:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002de7d:	83 e1 3f             	and    ecx,0x3f
c002de80:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002de84:	90                   	nop
c002de85:	83 c4 0c             	add    esp,0xc
c002de88:	c3                   	ret    
c002de89:	66 90                	xchg   ax,ax
c002de8b:	66 90                	xchg   ax,ax
c002de8d:	66 90                	xchg   ax,ax
c002de8f:	90                   	nop

c002de90 <avxDetect>:
c002de90:	b8 01 00 00 00       	mov    eax,0x1
c002de95:	0f a2                	cpuid  
c002de97:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c002de9d:	74 15                	je     c002deb4 <avxDetect.noAVX>
c002de9f:	b8 01 00 00 00       	mov    eax,0x1
c002dea4:	0f a2                	cpuid  
c002dea6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c002deac:	74 06                	je     c002deb4 <avxDetect.noAVX>
c002deae:	b8 01 00 00 00       	mov    eax,0x1
c002deb3:	c3                   	ret    

c002deb4 <avxDetect.noAVX>:
c002deb4:	b8 00 00 00 00       	mov    eax,0x0
c002deb9:	c3                   	ret    

c002deba <avxSave>:
c002deba:	53                   	push   ebx
c002debb:	52                   	push   edx
c002debc:	31 c0                	xor    eax,eax
c002debe:	48                   	dec    eax
c002debf:	89 c2                	mov    edx,eax
c002dec1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002dec5:	0f ae 23             	xsave  [ebx]
c002dec8:	5a                   	pop    edx
c002dec9:	5b                   	pop    ebx
c002deca:	c3                   	ret    

c002decb <avxLoad>:
c002decb:	53                   	push   ebx
c002decc:	52                   	push   edx
c002decd:	31 c0                	xor    eax,eax
c002decf:	48                   	dec    eax
c002ded0:	89 c2                	mov    edx,eax
c002ded2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002ded6:	0f ae 2b             	xrstor [ebx]
c002ded9:	5a                   	pop    edx
c002deda:	5b                   	pop    ebx
c002dedb:	c3                   	ret    

c002dedc <avxInit>:
c002dedc:	e8 47 03 00 00       	call   c002e228 <sseInit>
c002dee1:	50                   	push   eax
c002dee2:	51                   	push   ecx
c002dee3:	0f 20 e0             	mov    eax,cr4
c002dee6:	0d 00 00 04 00       	or     eax,0x40000
c002deeb:	0f 22 e0             	mov    cr4,eax
c002deee:	31 c9                	xor    ecx,ecx
c002def0:	0f 01 d0             	xgetbv 
c002def3:	0d 07 00 00 00       	or     eax,0x7
c002def8:	0f 01 d1             	xsetbv 
c002defb:	59                   	pop    ecx
c002defc:	58                   	pop    eax
c002defd:	c3                   	ret    

c002defe <avxClose>:
c002defe:	c3                   	ret    
c002deff:	90                   	nop

c002df00 <isr0>:
c002df00:	fa                   	cli    
c002df01:	68 00 00 00 00       	push   0x0
c002df06:	68 00 00 00 00       	push   0x0
c002df0b:	e9 56 01 00 00       	jmp    c002e066 <int_common_stub>

c002df10 <isr1>:
c002df10:	fa                   	cli    
c002df11:	6a 00                	push   0x0
c002df13:	6a 01                	push   0x1
c002df15:	e9 4c 01 00 00       	jmp    c002e066 <int_common_stub>

c002df1a <isr2>:
c002df1a:	fa                   	cli    
c002df1b:	6a 00                	push   0x0
c002df1d:	6a 02                	push   0x2
c002df1f:	e9 42 01 00 00       	jmp    c002e066 <int_common_stub>

c002df24 <isr3>:
c002df24:	fa                   	cli    
c002df25:	6a 00                	push   0x0
c002df27:	6a 03                	push   0x3
c002df29:	e9 38 01 00 00       	jmp    c002e066 <int_common_stub>

c002df2e <isr4>:
c002df2e:	fa                   	cli    
c002df2f:	6a 00                	push   0x0
c002df31:	6a 04                	push   0x4
c002df33:	e9 2e 01 00 00       	jmp    c002e066 <int_common_stub>

c002df38 <isr5>:
c002df38:	fa                   	cli    
c002df39:	6a 00                	push   0x0
c002df3b:	6a 05                	push   0x5
c002df3d:	e9 24 01 00 00       	jmp    c002e066 <int_common_stub>

c002df42 <isr6>:
c002df42:	fa                   	cli    
c002df43:	6a 00                	push   0x0
c002df45:	6a 06                	push   0x6
c002df47:	e9 1a 01 00 00       	jmp    c002e066 <int_common_stub>

c002df4c <isr7>:
c002df4c:	fa                   	cli    
c002df4d:	6a 00                	push   0x0
c002df4f:	6a 07                	push   0x7
c002df51:	e9 10 01 00 00       	jmp    c002e066 <int_common_stub>

c002df56 <isr8>:
c002df56:	fa                   	cli    
c002df57:	6a 08                	push   0x8
c002df59:	e9 08 01 00 00       	jmp    c002e066 <int_common_stub>

c002df5e <isr9>:
c002df5e:	fa                   	cli    
c002df5f:	6a 00                	push   0x0
c002df61:	6a 09                	push   0x9
c002df63:	e9 fe 00 00 00       	jmp    c002e066 <int_common_stub>

c002df68 <isr10>:
c002df68:	fa                   	cli    
c002df69:	6a 0a                	push   0xa
c002df6b:	e9 f6 00 00 00       	jmp    c002e066 <int_common_stub>

c002df70 <isr11>:
c002df70:	fa                   	cli    
c002df71:	6a 0b                	push   0xb
c002df73:	e9 ee 00 00 00       	jmp    c002e066 <int_common_stub>

c002df78 <isr12>:
c002df78:	fa                   	cli    
c002df79:	6a 0c                	push   0xc
c002df7b:	e9 e6 00 00 00       	jmp    c002e066 <int_common_stub>

c002df80 <isr13>:
c002df80:	fa                   	cli    
c002df81:	6a 0d                	push   0xd
c002df83:	53                   	push   ebx
c002df84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002df88:	81 fb 56 e1 02 c0    	cmp    ebx,0xc002e156
c002df8e:	5b                   	pop    ebx
c002df8f:	0f 84 c3 01 00 00    	je     c002e158 <finishSignal2>
c002df95:	e9 cc 00 00 00       	jmp    c002e066 <int_common_stub>

c002df9a <isr14>:
c002df9a:	fa                   	cli    
c002df9b:	6a 0e                	push   0xe
c002df9d:	e9 c4 00 00 00       	jmp    c002e066 <int_common_stub>

c002dfa2 <isr15>:
c002dfa2:	fa                   	cli    
c002dfa3:	6a 00                	push   0x0
c002dfa5:	6a 0f                	push   0xf
c002dfa7:	e9 ba 00 00 00       	jmp    c002e066 <int_common_stub>

c002dfac <isr16>:
c002dfac:	fa                   	cli    
c002dfad:	6a 00                	push   0x0
c002dfaf:	6a 10                	push   0x10
c002dfb1:	e9 b0 00 00 00       	jmp    c002e066 <int_common_stub>

c002dfb6 <isr17>:
c002dfb6:	fa                   	cli    
c002dfb7:	6a 00                	push   0x0
c002dfb9:	6a 11                	push   0x11
c002dfbb:	e9 a6 00 00 00       	jmp    c002e066 <int_common_stub>

c002dfc0 <isr18>:
c002dfc0:	fa                   	cli    
c002dfc1:	6a 00                	push   0x0
c002dfc3:	6a 12                	push   0x12
c002dfc5:	e9 9c 00 00 00       	jmp    c002e066 <int_common_stub>

c002dfca <irq3>:
c002dfca:	fa                   	cli    
c002dfcb:	6a 00                	push   0x0
c002dfcd:	6a 23                	push   0x23
c002dfcf:	e9 92 00 00 00       	jmp    c002e066 <int_common_stub>

c002dfd4 <irq4>:
c002dfd4:	fa                   	cli    
c002dfd5:	6a 00                	push   0x0
c002dfd7:	6a 24                	push   0x24
c002dfd9:	e9 88 00 00 00       	jmp    c002e066 <int_common_stub>

c002dfde <irq5>:
c002dfde:	fa                   	cli    
c002dfdf:	6a 00                	push   0x0
c002dfe1:	6a 25                	push   0x25
c002dfe3:	e9 7e 00 00 00       	jmp    c002e066 <int_common_stub>

c002dfe8 <irq6>:
c002dfe8:	fa                   	cli    
c002dfe9:	6a 00                	push   0x0
c002dfeb:	6a 26                	push   0x26
c002dfed:	e9 74 00 00 00       	jmp    c002e066 <int_common_stub>

c002dff2 <irq7>:
c002dff2:	fa                   	cli    
c002dff3:	6a 00                	push   0x0
c002dff5:	6a 27                	push   0x27
c002dff7:	e9 6a 00 00 00       	jmp    c002e066 <int_common_stub>

c002dffc <irq8>:
c002dffc:	fa                   	cli    
c002dffd:	6a 00                	push   0x0
c002dfff:	6a 28                	push   0x28
c002e001:	e9 60 00 00 00       	jmp    c002e066 <int_common_stub>

c002e006 <irq9>:
c002e006:	fa                   	cli    
c002e007:	6a 00                	push   0x0
c002e009:	6a 29                	push   0x29
c002e00b:	e9 56 00 00 00       	jmp    c002e066 <int_common_stub>

c002e010 <irq10>:
c002e010:	fa                   	cli    
c002e011:	6a 00                	push   0x0
c002e013:	6a 2a                	push   0x2a
c002e015:	e9 4c 00 00 00       	jmp    c002e066 <int_common_stub>

c002e01a <irq11>:
c002e01a:	fa                   	cli    
c002e01b:	6a 00                	push   0x0
c002e01d:	6a 2b                	push   0x2b
c002e01f:	e9 42 00 00 00       	jmp    c002e066 <int_common_stub>

c002e024 <irq12>:
c002e024:	fa                   	cli    
c002e025:	6a 00                	push   0x0
c002e027:	6a 2c                	push   0x2c
c002e029:	e9 38 00 00 00       	jmp    c002e066 <int_common_stub>

c002e02e <irq13>:
c002e02e:	fa                   	cli    
c002e02f:	6a 00                	push   0x0
c002e031:	6a 2d                	push   0x2d
c002e033:	e9 2e 00 00 00       	jmp    c002e066 <int_common_stub>

c002e038 <irq14>:
c002e038:	fa                   	cli    
c002e039:	6a 00                	push   0x0
c002e03b:	6a 2e                	push   0x2e
c002e03d:	e9 24 00 00 00       	jmp    c002e066 <int_common_stub>

c002e042 <irq15>:
c002e042:	fa                   	cli    
c002e043:	6a 00                	push   0x0
c002e045:	6a 2f                	push   0x2f
c002e047:	e9 1a 00 00 00       	jmp    c002e066 <int_common_stub>

c002e04c <irq1>:
c002e04c:	fa                   	cli    
c002e04d:	6a 00                	push   0x0
c002e04f:	6a 21                	push   0x21
c002e051:	eb 13                	jmp    c002e066 <int_common_stub>

c002e053 <irq2>:
c002e053:	fa                   	cli    
c002e054:	6a 00                	push   0x0
c002e056:	6a 22                	push   0x22
c002e058:	eb 0c                	jmp    c002e066 <int_common_stub>

c002e05a <isr96>:
c002e05a:	6a 00                	push   0x0
c002e05c:	6a 60                	push   0x60
c002e05e:	fb                   	sti    
c002e05f:	eb 37                	jmp    c002e098 <syscall_common_stub>

c002e061 <irq0>:
c002e061:	fa                   	cli    
c002e062:	6a 00                	push   0x0
c002e064:	6a 20                	push   0x20

c002e066 <int_common_stub>:
c002e066:	60                   	pusha  
c002e067:	1e                   	push   ds
c002e068:	06                   	push   es
c002e069:	0f a0                	push   fs
c002e06b:	0f a8                	push   gs
c002e06d:	66 b8 10 00          	mov    ax,0x10
c002e071:	66 8e d8             	mov    ds,ax
c002e074:	66 8e c0             	mov    es,ax
c002e077:	66 8e e0             	mov    fs,ax
c002e07a:	66 8e e8             	mov    gs,ax
c002e07d:	54                   	push   esp
c002e07e:	fc                   	cld    
c002e07f:	e8 4c d6 fe ff       	call   c001b6d0 <int_handler>
c002e084:	81 c4 04 00 00 00    	add    esp,0x4
c002e08a:	0f a9                	pop    gs
c002e08c:	0f a1                	pop    fs
c002e08e:	07                   	pop    es
c002e08f:	1f                   	pop    ds
c002e090:	61                   	popa   
c002e091:	81 c4 08 00 00 00    	add    esp,0x8
c002e097:	cf                   	iret   

c002e098 <syscall_common_stub>:
c002e098:	60                   	pusha  
c002e099:	1e                   	push   ds
c002e09a:	06                   	push   es
c002e09b:	0f a0                	push   fs
c002e09d:	0f a8                	push   gs
c002e09f:	66 b8 10 00          	mov    ax,0x10
c002e0a3:	66 8e d8             	mov    ds,ax
c002e0a6:	66 8e c0             	mov    es,ax
c002e0a9:	66 8e e0             	mov    fs,ax
c002e0ac:	66 8e e8             	mov    gs,ax
c002e0af:	54                   	push   esp
c002e0b0:	fc                   	cld    
c002e0b1:	e8 1a d6 fe ff       	call   c001b6d0 <int_handler>
c002e0b6:	81 c4 04 00 00 00    	add    esp,0x4
c002e0bc:	0f a9                	pop    gs
c002e0be:	0f a1                	pop    fs
c002e0c0:	07                   	pop    es
c002e0c1:	1f                   	pop    ds
c002e0c2:	e8 0c 2b ff ff       	call   c0020bd3 <KiCheckSignalZ>
c002e0c7:	3d 00 00 00 00       	cmp    eax,0x0
c002e0cc:	0f 84 c0 00 00 00    	je     c002e192 <skipSignals>
c002e0d2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c002e0d7:	61                   	popa   
c002e0d8:	53                   	push   ebx
c002e0d9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002e0df:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c002e0e2:	5b                   	pop    ebx
c002e0e3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c002e0e8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002e0eb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002e0ee:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002e0f1:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c002e0f4:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c002e0f7:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002e0fa:	81 c4 08 00 00 00    	add    esp,0x8
c002e100:	5e                   	pop    esi
c002e101:	5b                   	pop    ebx
c002e102:	59                   	pop    ecx
c002e103:	5a                   	pop    edx
c002e104:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c002e107:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002e10a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002e10d:	52                   	push   edx
c002e10e:	51                   	push   ecx
c002e10f:	53                   	push   ebx
c002e110:	56                   	push   esi
c002e111:	81 ec 08 00 00 00    	sub    esp,0x8
c002e117:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002e11a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002e11d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c002e120:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002e123:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c002e126:	60                   	pusha  
c002e127:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002e12d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c002e130:	89 e3                	mov    ebx,esp
c002e132:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c002e135:	52                   	push   edx
c002e136:	68 56 e1 02 c0       	push   0xc002e156
c002e13b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002e13e:	89 dc                	mov    esp,ebx
c002e140:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c002e143:	68 23 00 00 00       	push   0x23
c002e148:	51                   	push   ecx
c002e149:	68 02 02 00 00       	push   0x202
c002e14e:	68 1b 00 00 00       	push   0x1b
c002e153:	ff 36                	push   DWORD PTR [esi]
c002e155:	cf                   	iret   

c002e156 <finishSignal>:
c002e156:	cd 0f                	int    0xf

c002e158 <finishSignal2>:
c002e158:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002e15e:	e8 ed 2a ff ff       	call   c0020c50 <KiFinishSignalZ>
c002e163:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c002e169:	68 23 00 00 00       	push   0x23
c002e16e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c002e171:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c002e174:	68 1b 00 00 00       	push   0x1b
c002e179:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c002e17c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002e17f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002e182:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c002e185:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c002e188:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c002e18b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c002e18e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c002e191:	cf                   	iret   

c002e192 <skipSignals>:
c002e192:	61                   	popa   
c002e193:	81 c4 08 00 00 00    	add    esp,0x8
c002e199:	cf                   	iret   
c002e19a:	90                   	nop
c002e19b:	90                   	nop

c002e19c <irq16>:
c002e19c:	fa                   	cli    
c002e19d:	6a 00                	push   0x0
c002e19f:	6a 30                	push   0x30
c002e1a1:	e9 c0 fe ff ff       	jmp    c002e066 <int_common_stub>

c002e1a6 <irq17>:
c002e1a6:	fa                   	cli    
c002e1a7:	6a 00                	push   0x0
c002e1a9:	6a 31                	push   0x31
c002e1ab:	e9 b6 fe ff ff       	jmp    c002e066 <int_common_stub>

c002e1b0 <irq18>:
c002e1b0:	fa                   	cli    
c002e1b1:	6a 00                	push   0x0
c002e1b3:	6a 32                	push   0x32
c002e1b5:	e9 ac fe ff ff       	jmp    c002e066 <int_common_stub>

c002e1ba <irq19>:
c002e1ba:	fa                   	cli    
c002e1bb:	6a 00                	push   0x0
c002e1bd:	6a 33                	push   0x33
c002e1bf:	e9 a2 fe ff ff       	jmp    c002e066 <int_common_stub>

c002e1c4 <irq20>:
c002e1c4:	fa                   	cli    
c002e1c5:	6a 00                	push   0x0
c002e1c7:	6a 34                	push   0x34
c002e1c9:	e9 98 fe ff ff       	jmp    c002e066 <int_common_stub>

c002e1ce <irq21>:
c002e1ce:	fa                   	cli    
c002e1cf:	6a 00                	push   0x0
c002e1d1:	6a 35                	push   0x35
c002e1d3:	e9 8e fe ff ff       	jmp    c002e066 <int_common_stub>

c002e1d8 <irq22>:
c002e1d8:	fa                   	cli    
c002e1d9:	6a 00                	push   0x0
c002e1db:	6a 36                	push   0x36
c002e1dd:	e9 84 fe ff ff       	jmp    c002e066 <int_common_stub>

c002e1e2 <irq23>:
c002e1e2:	fa                   	cli    
c002e1e3:	6a 00                	push   0x0
c002e1e5:	6a 37                	push   0x37
c002e1e7:	e9 7a fe ff ff       	jmp    c002e066 <int_common_stub>
c002e1ec:	66 90                	xchg   ax,ax
c002e1ee:	66 90                	xchg   ax,ax

c002e1f0 <i386GetRDRAND>:
c002e1f0:	b9 64 00 00 00       	mov    ecx,0x64

c002e1f5 <retry>:
c002e1f5:	0f c7 f0             	rdrand eax
c002e1f8:	72 05                	jb     c002e1ff <retry.done>
c002e1fa:	e2 f9                	loop   c002e1f5 <retry>

c002e1fc <retry.fail>:
c002e1fc:	31 c0                	xor    eax,eax
c002e1fe:	c3                   	ret    

c002e1ff <retry.done>:
c002e1ff:	c3                   	ret    

c002e200 <sseDetect>:
c002e200:	b8 01 00 00 00       	mov    eax,0x1
c002e205:	0f a2                	cpuid  
c002e207:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002e20d:	74 06                	je     c002e215 <sseDetect.noSSE>
c002e20f:	b8 01 00 00 00       	mov    eax,0x1
c002e214:	c3                   	ret    

c002e215 <sseDetect.noSSE>:
c002e215:	31 c0                	xor    eax,eax
c002e217:	c3                   	ret    

c002e218 <sseSave>:
c002e218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e21c:	0f ae 00             	fxsave [eax]
c002e21f:	c3                   	ret    

c002e220 <sseLoad>:
c002e220:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e224:	0f ae 08             	fxrstor [eax]
c002e227:	c3                   	ret    

c002e228 <sseInit>:
c002e228:	e8 42 00 00 00       	call   c002e26f <x87Init>
c002e22d:	0f 20 e0             	mov    eax,cr4
c002e230:	66 0d 00 06          	or     ax,0x600
c002e234:	0f 22 e0             	mov    cr4,eax
c002e237:	c3                   	ret    

c002e238 <sseClose>:
c002e238:	c3                   	ret    
c002e239:	66 90                	xchg   ax,ax
c002e23b:	66 90                	xchg   ax,ax
c002e23d:	66 90                	xchg   ax,ax
c002e23f:	90                   	nop

c002e240 <value_37F>:
c002e240:	7f 03                	jg     c002e245 <value_37A+0x1>

c002e242 <value_37E>:
c002e242:	7e 03                	jle    c002e247 <x87Detect+0x1>

c002e244 <value_37A>:
c002e244:	7a 03                	jp     c002e249 <x87Detect+0x3>

c002e246 <x87Detect>:
c002e246:	b8 01 00 00 00       	mov    eax,0x1
c002e24b:	0f a2                	cpuid  
c002e24d:	f7 c2 01 00 00 00    	test   edx,0x1
c002e253:	74 06                	je     c002e25b <x87Detect.nox87>
c002e255:	b8 01 00 00 00       	mov    eax,0x1
c002e25a:	c3                   	ret    

c002e25b <x87Detect.nox87>:
c002e25b:	b8 00 00 00 00       	mov    eax,0x0
c002e260:	c3                   	ret    

c002e261 <x87Save>:
c002e261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e265:	dd 30                	fnsave [eax]
c002e267:	c3                   	ret    

c002e268 <x87Load>:
c002e268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e26c:	dd 20                	frstor [eax]
c002e26e:	c3                   	ret    

c002e26f <x87Init>:
c002e26f:	0f 20 c0             	mov    eax,cr0
c002e272:	66 25 fb ff          	and    ax,0xfffb
c002e276:	66 0d 22 00          	or     ax,0x22
c002e27a:	0f 22 c0             	mov    cr0,eax
c002e27d:	db e3                	fninit 
c002e27f:	0f 06                	clts   
c002e281:	d9 2d 44 e2 02 c0    	fldcw  WORD PTR ds:0xc002e244
c002e287:	c3                   	ret    

c002e288 <x87Close>:
c002e288:	c3                   	ret    
c002e289:	66 90                	xchg   ax,ax
c002e28b:	90                   	nop

c002e28c <__do_global_ctors_aux>:
c002e28c:	a1 40 f2 02 c0       	mov    eax,ds:0xc002f240
c002e291:	83 f8 ff             	cmp    eax,0xffffffff
c002e294:	74 1a                	je     c002e2b0 <__do_global_ctors_aux+0x24>
c002e296:	55                   	push   ebp
c002e297:	89 e5                	mov    ebp,esp
c002e299:	53                   	push   ebx
c002e29a:	52                   	push   edx
c002e29b:	bb 40 f2 02 c0       	mov    ebx,0xc002f240
c002e2a0:	ff d0                	call   eax
c002e2a2:	83 eb 04             	sub    ebx,0x4
c002e2a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c002e2a7:	83 f8 ff             	cmp    eax,0xffffffff
c002e2aa:	75 f4                	jne    c002e2a0 <__do_global_ctors_aux+0x14>
c002e2ac:	58                   	pop    eax
c002e2ad:	5b                   	pop    ebx
c002e2ae:	5d                   	pop    ebp
c002e2af:	c3                   	ret    
c002e2b0:	c3                   	ret    
c002e2b1:	66 90                	xchg   ax,ax
c002e2b3:	90                   	nop

c002e2b4 <__divdi3>:
c002e2b4:	55                   	push   ebp
c002e2b5:	57                   	push   edi
c002e2b6:	56                   	push   esi
c002e2b7:	53                   	push   ebx
c002e2b8:	83 ec 1c             	sub    esp,0x1c
c002e2bb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002e2bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e2c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e2c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e2ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002e2ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e2d2:	85 db                	test   ebx,ebx
c002e2d4:	0f 88 8e 00 00 00    	js     c002e368 <__divdi3+0xb4>
c002e2da:	89 dd                	mov    ebp,ebx
c002e2dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002e2e4:	89 d3                	mov    ebx,edx
c002e2e6:	85 d2                	test   edx,edx
c002e2e8:	79 0d                	jns    c002e2f7 <__divdi3+0x43>
c002e2ea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002e2ee:	f7 d8                	neg    eax
c002e2f0:	83 d2 00             	adc    edx,0x0
c002e2f3:	f7 da                	neg    edx
c002e2f5:	89 d3                	mov    ebx,edx
c002e2f7:	89 c7                	mov    edi,eax
c002e2f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e2fc:	85 db                	test   ebx,ebx
c002e2fe:	75 48                	jne    c002e348 <__divdi3+0x94>
c002e300:	39 ef                	cmp    edi,ebp
c002e302:	76 24                	jbe    c002e328 <__divdi3+0x74>
c002e304:	89 ea                	mov    edx,ebp
c002e306:	f7 f7                	div    edi
c002e308:	89 c1                	mov    ecx,eax
c002e30a:	31 f6                	xor    esi,esi
c002e30c:	89 c8                	mov    eax,ecx
c002e30e:	89 f2                	mov    edx,esi
c002e310:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e314:	85 c9                	test   ecx,ecx
c002e316:	74 07                	je     c002e31f <__divdi3+0x6b>
c002e318:	f7 d8                	neg    eax
c002e31a:	83 d2 00             	adc    edx,0x0
c002e31d:	f7 da                	neg    edx
c002e31f:	83 c4 1c             	add    esp,0x1c
c002e322:	5b                   	pop    ebx
c002e323:	5e                   	pop    esi
c002e324:	5f                   	pop    edi
c002e325:	5d                   	pop    ebp
c002e326:	c3                   	ret    
c002e327:	90                   	nop
c002e328:	85 ff                	test   edi,edi
c002e32a:	75 0b                	jne    c002e337 <__divdi3+0x83>
c002e32c:	b8 01 00 00 00       	mov    eax,0x1
c002e331:	31 d2                	xor    edx,edx
c002e333:	f7 f3                	div    ebx
c002e335:	89 c7                	mov    edi,eax
c002e337:	31 d2                	xor    edx,edx
c002e339:	89 e8                	mov    eax,ebp
c002e33b:	f7 f7                	div    edi
c002e33d:	89 c6                	mov    esi,eax
c002e33f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002e342:	f7 f7                	div    edi
c002e344:	89 c1                	mov    ecx,eax
c002e346:	eb c4                	jmp    c002e30c <__divdi3+0x58>
c002e348:	39 eb                	cmp    ebx,ebp
c002e34a:	77 3c                	ja     c002e388 <__divdi3+0xd4>
c002e34c:	0f bd f3             	bsr    esi,ebx
c002e34f:	83 f6 1f             	xor    esi,0x1f
c002e352:	75 40                	jne    c002e394 <__divdi3+0xe0>
c002e354:	39 eb                	cmp    ebx,ebp
c002e356:	72 09                	jb     c002e361 <__divdi3+0xad>
c002e358:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002e35b:	0f 87 97 00 00 00    	ja     c002e3f8 <__divdi3+0x144>
c002e361:	b9 01 00 00 00       	mov    ecx,0x1
c002e366:	eb a4                	jmp    c002e30c <__divdi3+0x58>
c002e368:	f7 d9                	neg    ecx
c002e36a:	83 d3 00             	adc    ebx,0x0
c002e36d:	f7 db                	neg    ebx
c002e36f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002e372:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002e376:	89 dd                	mov    ebp,ebx
c002e378:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002e380:	e9 5f ff ff ff       	jmp    c002e2e4 <__divdi3+0x30>
c002e385:	8d 76 00             	lea    esi,[esi+0x0]
c002e388:	31 f6                	xor    esi,esi
c002e38a:	31 c9                	xor    ecx,ecx
c002e38c:	e9 7b ff ff ff       	jmp    c002e30c <__divdi3+0x58>
c002e391:	8d 76 00             	lea    esi,[esi+0x0]
c002e394:	b8 20 00 00 00       	mov    eax,0x20
c002e399:	29 f0                	sub    eax,esi
c002e39b:	89 f1                	mov    ecx,esi
c002e39d:	d3 e3                	shl    ebx,cl
c002e39f:	89 fa                	mov    edx,edi
c002e3a1:	88 c1                	mov    cl,al
c002e3a3:	d3 ea                	shr    edx,cl
c002e3a5:	09 da                	or     edx,ebx
c002e3a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002e3ab:	89 f1                	mov    ecx,esi
c002e3ad:	d3 e7                	shl    edi,cl
c002e3af:	89 eb                	mov    ebx,ebp
c002e3b1:	88 c1                	mov    cl,al
c002e3b3:	d3 eb                	shr    ebx,cl
c002e3b5:	89 f1                	mov    ecx,esi
c002e3b7:	d3 e5                	shl    ebp,cl
c002e3b9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c002e3bc:	88 c1                	mov    cl,al
c002e3be:	d3 ea                	shr    edx,cl
c002e3c0:	09 d5                	or     ebp,edx
c002e3c2:	89 e8                	mov    eax,ebp
c002e3c4:	89 da                	mov    edx,ebx
c002e3c6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002e3ca:	89 d3                	mov    ebx,edx
c002e3cc:	89 c5                	mov    ebp,eax
c002e3ce:	f7 e7                	mul    edi
c002e3d0:	39 d3                	cmp    ebx,edx
c002e3d2:	72 18                	jb     c002e3ec <__divdi3+0x138>
c002e3d4:	74 0a                	je     c002e3e0 <__divdi3+0x12c>
c002e3d6:	89 e9                	mov    ecx,ebp
c002e3d8:	31 f6                	xor    esi,esi
c002e3da:	e9 2d ff ff ff       	jmp    c002e30c <__divdi3+0x58>
c002e3df:	90                   	nop
c002e3e0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002e3e3:	89 f1                	mov    ecx,esi
c002e3e5:	d3 e7                	shl    edi,cl
c002e3e7:	39 c7                	cmp    edi,eax
c002e3e9:	73 eb                	jae    c002e3d6 <__divdi3+0x122>
c002e3eb:	90                   	nop
c002e3ec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002e3ef:	31 f6                	xor    esi,esi
c002e3f1:	e9 16 ff ff ff       	jmp    c002e30c <__divdi3+0x58>
c002e3f6:	66 90                	xchg   ax,ax
c002e3f8:	31 c9                	xor    ecx,ecx
c002e3fa:	e9 0d ff ff ff       	jmp    c002e30c <__divdi3+0x58>
c002e3ff:	90                   	nop

c002e400 <__moddi3>:
c002e400:	55                   	push   ebp
c002e401:	57                   	push   edi
c002e402:	56                   	push   esi
c002e403:	53                   	push   ebx
c002e404:	83 ec 2c             	sub    esp,0x2c
c002e407:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002e40b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002e40f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002e413:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002e417:	85 db                	test   ebx,ebx
c002e419:	0f 88 85 00 00 00    	js     c002e4a4 <__moddi3+0xa4>
c002e41f:	89 de                	mov    esi,ebx
c002e421:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002e429:	89 d7                	mov    edi,edx
c002e42b:	85 d2                	test   edx,edx
c002e42d:	79 09                	jns    c002e438 <__moddi3+0x38>
c002e42f:	f7 d8                	neg    eax
c002e431:	83 d2 00             	adc    edx,0x0
c002e434:	f7 da                	neg    edx
c002e436:	89 d7                	mov    edi,edx
c002e438:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e43c:	89 cd                	mov    ebp,ecx
c002e43e:	85 ff                	test   edi,edi
c002e440:	75 52                	jne    c002e494 <__moddi3+0x94>
c002e442:	89 c3                	mov    ebx,eax
c002e444:	39 f0                	cmp    eax,esi
c002e446:	76 24                	jbe    c002e46c <__moddi3+0x6c>
c002e448:	89 c8                	mov    eax,ecx
c002e44a:	89 f2                	mov    edx,esi
c002e44c:	f7 f3                	div    ebx
c002e44e:	89 d6                	mov    esi,edx
c002e450:	89 f0                	mov    eax,esi
c002e452:	31 d2                	xor    edx,edx
c002e454:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002e458:	85 c9                	test   ecx,ecx
c002e45a:	74 07                	je     c002e463 <__moddi3+0x63>
c002e45c:	f7 d8                	neg    eax
c002e45e:	83 d2 00             	adc    edx,0x0
c002e461:	f7 da                	neg    edx
c002e463:	83 c4 2c             	add    esp,0x2c
c002e466:	5b                   	pop    ebx
c002e467:	5e                   	pop    esi
c002e468:	5f                   	pop    edi
c002e469:	5d                   	pop    ebp
c002e46a:	c3                   	ret    
c002e46b:	90                   	nop
c002e46c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002e470:	85 db                	test   ebx,ebx
c002e472:	75 0d                	jne    c002e481 <__moddi3+0x81>
c002e474:	b8 01 00 00 00       	mov    eax,0x1
c002e479:	31 d2                	xor    edx,edx
c002e47b:	f7 f7                	div    edi
c002e47d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002e481:	89 f0                	mov    eax,esi
c002e483:	31 d2                	xor    edx,edx
c002e485:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e489:	f7 f7                	div    edi
c002e48b:	89 e8                	mov    eax,ebp
c002e48d:	f7 f7                	div    edi
c002e48f:	89 d6                	mov    esi,edx
c002e491:	eb bd                	jmp    c002e450 <__moddi3+0x50>
c002e493:	90                   	nop
c002e494:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e498:	39 f7                	cmp    edi,esi
c002e49a:	76 20                	jbe    c002e4bc <__moddi3+0xbc>
c002e49c:	89 c8                	mov    eax,ecx
c002e49e:	89 f2                	mov    edx,esi
c002e4a0:	eb b2                	jmp    c002e454 <__moddi3+0x54>
c002e4a2:	66 90                	xchg   ax,ax
c002e4a4:	f7 d9                	neg    ecx
c002e4a6:	83 d3 00             	adc    ebx,0x0
c002e4a9:	f7 db                	neg    ebx
c002e4ab:	89 de                	mov    esi,ebx
c002e4ad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c002e4b5:	e9 6f ff ff ff       	jmp    c002e429 <__moddi3+0x29>
c002e4ba:	66 90                	xchg   ax,ax
c002e4bc:	0f bd c7             	bsr    eax,edi
c002e4bf:	83 f0 1f             	xor    eax,0x1f
c002e4c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002e4c6:	75 24                	jne    c002e4ec <__moddi3+0xec>
c002e4c8:	39 f7                	cmp    edi,esi
c002e4ca:	72 06                	jb     c002e4d2 <__moddi3+0xd2>
c002e4cc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002e4d0:	77 0c                	ja     c002e4de <__moddi3+0xde>
c002e4d2:	89 e9                	mov    ecx,ebp
c002e4d4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002e4d8:	19 fe                	sbb    esi,edi
c002e4da:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002e4de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002e4e2:	89 f2                	mov    edx,esi
c002e4e4:	e9 6b ff ff ff       	jmp    c002e454 <__moddi3+0x54>
c002e4e9:	8d 76 00             	lea    esi,[esi+0x0]
c002e4ec:	b8 20 00 00 00       	mov    eax,0x20
c002e4f1:	89 c2                	mov    edx,eax
c002e4f3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002e4f7:	29 da                	sub    edx,ebx
c002e4f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002e4fd:	88 d9                	mov    cl,bl
c002e4ff:	d3 e7                	shl    edi,cl
c002e501:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002e505:	88 d1                	mov    cl,dl
c002e507:	d3 e8                	shr    eax,cl
c002e509:	09 c7                	or     edi,eax
c002e50b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002e50f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002e513:	89 d8                	mov    eax,ebx
c002e515:	88 d9                	mov    cl,bl
c002e517:	d3 e7                	shl    edi,cl
c002e519:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e51d:	89 f3                	mov    ebx,esi
c002e51f:	88 d1                	mov    cl,dl
c002e521:	d3 eb                	shr    ebx,cl
c002e523:	89 c7                	mov    edi,eax
c002e525:	88 c1                	mov    cl,al
c002e527:	d3 e6                	shl    esi,cl
c002e529:	89 e8                	mov    eax,ebp
c002e52b:	88 d1                	mov    cl,dl
c002e52d:	d3 e8                	shr    eax,cl
c002e52f:	09 f0                	or     eax,esi
c002e531:	89 f9                	mov    ecx,edi
c002e533:	d3 e5                	shl    ebp,cl
c002e535:	89 da                	mov    edx,ebx
c002e537:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002e53b:	89 d3                	mov    ebx,edx
c002e53d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e541:	89 c6                	mov    esi,eax
c002e543:	89 d1                	mov    ecx,edx
c002e545:	39 d3                	cmp    ebx,edx
c002e547:	72 27                	jb     c002e570 <__moddi3+0x170>
c002e549:	74 21                	je     c002e56c <__moddi3+0x16c>
c002e54b:	29 f5                	sub    ebp,esi
c002e54d:	19 cb                	sbb    ebx,ecx
c002e54f:	89 de                	mov    esi,ebx
c002e551:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c002e555:	d3 e6                	shl    esi,cl
c002e557:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002e55b:	89 f9                	mov    ecx,edi
c002e55d:	d3 ed                	shr    ebp,cl
c002e55f:	09 ee                	or     esi,ebp
c002e561:	89 f0                	mov    eax,esi
c002e563:	d3 eb                	shr    ebx,cl
c002e565:	89 da                	mov    edx,ebx
c002e567:	e9 e8 fe ff ff       	jmp    c002e454 <__moddi3+0x54>
c002e56c:	39 c5                	cmp    ebp,eax
c002e56e:	73 db                	jae    c002e54b <__moddi3+0x14b>
c002e570:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e574:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002e578:	89 d1                	mov    ecx,edx
c002e57a:	89 c6                	mov    esi,eax
c002e57c:	eb cd                	jmp    c002e54b <__moddi3+0x14b>
c002e57e:	66 90                	xchg   ax,ax

c002e580 <__udivdi3>:
c002e580:	55                   	push   ebp
c002e581:	57                   	push   edi
c002e582:	56                   	push   esi
c002e583:	53                   	push   ebx
c002e584:	83 ec 1c             	sub    esp,0x1c
c002e587:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002e58b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002e58f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e593:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002e597:	85 d2                	test   edx,edx
c002e599:	75 41                	jne    c002e5dc <__udivdi3+0x5c>
c002e59b:	39 f7                	cmp    edi,esi
c002e59d:	76 15                	jbe    c002e5b4 <__udivdi3+0x34>
c002e59f:	89 e8                	mov    eax,ebp
c002e5a1:	89 f2                	mov    edx,esi
c002e5a3:	f7 f7                	div    edi
c002e5a5:	31 db                	xor    ebx,ebx
c002e5a7:	89 da                	mov    edx,ebx
c002e5a9:	83 c4 1c             	add    esp,0x1c
c002e5ac:	5b                   	pop    ebx
c002e5ad:	5e                   	pop    esi
c002e5ae:	5f                   	pop    edi
c002e5af:	5d                   	pop    ebp
c002e5b0:	c3                   	ret    
c002e5b1:	8d 76 00             	lea    esi,[esi+0x0]
c002e5b4:	89 f9                	mov    ecx,edi
c002e5b6:	85 ff                	test   edi,edi
c002e5b8:	75 0b                	jne    c002e5c5 <__udivdi3+0x45>
c002e5ba:	b8 01 00 00 00       	mov    eax,0x1
c002e5bf:	31 d2                	xor    edx,edx
c002e5c1:	f7 f7                	div    edi
c002e5c3:	89 c1                	mov    ecx,eax
c002e5c5:	31 d2                	xor    edx,edx
c002e5c7:	89 f0                	mov    eax,esi
c002e5c9:	f7 f1                	div    ecx
c002e5cb:	89 c3                	mov    ebx,eax
c002e5cd:	89 e8                	mov    eax,ebp
c002e5cf:	f7 f1                	div    ecx
c002e5d1:	89 da                	mov    edx,ebx
c002e5d3:	83 c4 1c             	add    esp,0x1c
c002e5d6:	5b                   	pop    ebx
c002e5d7:	5e                   	pop    esi
c002e5d8:	5f                   	pop    edi
c002e5d9:	5d                   	pop    ebp
c002e5da:	c3                   	ret    
c002e5db:	90                   	nop
c002e5dc:	39 f2                	cmp    edx,esi
c002e5de:	77 1c                	ja     c002e5fc <__udivdi3+0x7c>
c002e5e0:	0f bd da             	bsr    ebx,edx
c002e5e3:	83 f3 1f             	xor    ebx,0x1f
c002e5e6:	75 24                	jne    c002e60c <__udivdi3+0x8c>
c002e5e8:	39 f2                	cmp    edx,esi
c002e5ea:	72 08                	jb     c002e5f4 <__udivdi3+0x74>
c002e5ec:	39 ef                	cmp    edi,ebp
c002e5ee:	0f 87 84 00 00 00    	ja     c002e678 <__udivdi3+0xf8>
c002e5f4:	b8 01 00 00 00       	mov    eax,0x1
c002e5f9:	eb ac                	jmp    c002e5a7 <__udivdi3+0x27>
c002e5fb:	90                   	nop
c002e5fc:	31 db                	xor    ebx,ebx
c002e5fe:	31 c0                	xor    eax,eax
c002e600:	89 da                	mov    edx,ebx
c002e602:	83 c4 1c             	add    esp,0x1c
c002e605:	5b                   	pop    ebx
c002e606:	5e                   	pop    esi
c002e607:	5f                   	pop    edi
c002e608:	5d                   	pop    ebp
c002e609:	c3                   	ret    
c002e60a:	66 90                	xchg   ax,ax
c002e60c:	b8 20 00 00 00       	mov    eax,0x20
c002e611:	29 d8                	sub    eax,ebx
c002e613:	88 d9                	mov    cl,bl
c002e615:	d3 e2                	shl    edx,cl
c002e617:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002e61b:	89 fa                	mov    edx,edi
c002e61d:	88 c1                	mov    cl,al
c002e61f:	d3 ea                	shr    edx,cl
c002e621:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e625:	09 d1                	or     ecx,edx
c002e627:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e62b:	88 d9                	mov    cl,bl
c002e62d:	d3 e7                	shl    edi,cl
c002e62f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e633:	89 f7                	mov    edi,esi
c002e635:	88 c1                	mov    cl,al
c002e637:	d3 ef                	shr    edi,cl
c002e639:	88 d9                	mov    cl,bl
c002e63b:	d3 e6                	shl    esi,cl
c002e63d:	89 ea                	mov    edx,ebp
c002e63f:	88 c1                	mov    cl,al
c002e641:	d3 ea                	shr    edx,cl
c002e643:	09 d6                	or     esi,edx
c002e645:	89 f0                	mov    eax,esi
c002e647:	89 fa                	mov    edx,edi
c002e649:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e64d:	89 d7                	mov    edi,edx
c002e64f:	89 c6                	mov    esi,eax
c002e651:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e655:	39 d7                	cmp    edi,edx
c002e657:	72 13                	jb     c002e66c <__udivdi3+0xec>
c002e659:	74 09                	je     c002e664 <__udivdi3+0xe4>
c002e65b:	89 f0                	mov    eax,esi
c002e65d:	31 db                	xor    ebx,ebx
c002e65f:	e9 43 ff ff ff       	jmp    c002e5a7 <__udivdi3+0x27>
c002e664:	88 d9                	mov    cl,bl
c002e666:	d3 e5                	shl    ebp,cl
c002e668:	39 c5                	cmp    ebp,eax
c002e66a:	73 ef                	jae    c002e65b <__udivdi3+0xdb>
c002e66c:	8d 46 ff             	lea    eax,[esi-0x1]
c002e66f:	31 db                	xor    ebx,ebx
c002e671:	e9 31 ff ff ff       	jmp    c002e5a7 <__udivdi3+0x27>
c002e676:	66 90                	xchg   ax,ax
c002e678:	31 c0                	xor    eax,eax
c002e67a:	e9 28 ff ff ff       	jmp    c002e5a7 <__udivdi3+0x27>
c002e67f:	90                   	nop

c002e680 <__umoddi3>:
c002e680:	55                   	push   ebp
c002e681:	57                   	push   edi
c002e682:	56                   	push   esi
c002e683:	53                   	push   ebx
c002e684:	83 ec 1c             	sub    esp,0x1c
c002e687:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002e68b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002e68f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c002e693:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002e697:	89 da                	mov    edx,ebx
c002e699:	85 c0                	test   eax,eax
c002e69b:	75 37                	jne    c002e6d4 <__umoddi3+0x54>
c002e69d:	39 df                	cmp    edi,ebx
c002e69f:	76 13                	jbe    c002e6b4 <__umoddi3+0x34>
c002e6a1:	89 f0                	mov    eax,esi
c002e6a3:	f7 f7                	div    edi
c002e6a5:	89 d0                	mov    eax,edx
c002e6a7:	31 d2                	xor    edx,edx
c002e6a9:	83 c4 1c             	add    esp,0x1c
c002e6ac:	5b                   	pop    ebx
c002e6ad:	5e                   	pop    esi
c002e6ae:	5f                   	pop    edi
c002e6af:	5d                   	pop    ebp
c002e6b0:	c3                   	ret    
c002e6b1:	8d 76 00             	lea    esi,[esi+0x0]
c002e6b4:	89 fd                	mov    ebp,edi
c002e6b6:	85 ff                	test   edi,edi
c002e6b8:	75 0b                	jne    c002e6c5 <__umoddi3+0x45>
c002e6ba:	b8 01 00 00 00       	mov    eax,0x1
c002e6bf:	31 d2                	xor    edx,edx
c002e6c1:	f7 f7                	div    edi
c002e6c3:	89 c5                	mov    ebp,eax
c002e6c5:	89 d8                	mov    eax,ebx
c002e6c7:	31 d2                	xor    edx,edx
c002e6c9:	f7 f5                	div    ebp
c002e6cb:	89 f0                	mov    eax,esi
c002e6cd:	f7 f5                	div    ebp
c002e6cf:	89 d0                	mov    eax,edx
c002e6d1:	eb d4                	jmp    c002e6a7 <__umoddi3+0x27>
c002e6d3:	90                   	nop
c002e6d4:	89 f1                	mov    ecx,esi
c002e6d6:	39 d8                	cmp    eax,ebx
c002e6d8:	76 0a                	jbe    c002e6e4 <__umoddi3+0x64>
c002e6da:	89 f0                	mov    eax,esi
c002e6dc:	83 c4 1c             	add    esp,0x1c
c002e6df:	5b                   	pop    ebx
c002e6e0:	5e                   	pop    esi
c002e6e1:	5f                   	pop    edi
c002e6e2:	5d                   	pop    ebp
c002e6e3:	c3                   	ret    
c002e6e4:	0f bd e8             	bsr    ebp,eax
c002e6e7:	83 f5 1f             	xor    ebp,0x1f
c002e6ea:	75 1c                	jne    c002e708 <__umoddi3+0x88>
c002e6ec:	39 d8                	cmp    eax,ebx
c002e6ee:	72 04                	jb     c002e6f4 <__umoddi3+0x74>
c002e6f0:	39 f7                	cmp    edi,esi
c002e6f2:	77 08                	ja     c002e6fc <__umoddi3+0x7c>
c002e6f4:	89 da                	mov    edx,ebx
c002e6f6:	29 fe                	sub    esi,edi
c002e6f8:	19 c2                	sbb    edx,eax
c002e6fa:	89 f1                	mov    ecx,esi
c002e6fc:	89 c8                	mov    eax,ecx
c002e6fe:	83 c4 1c             	add    esp,0x1c
c002e701:	5b                   	pop    ebx
c002e702:	5e                   	pop    esi
c002e703:	5f                   	pop    edi
c002e704:	5d                   	pop    ebp
c002e705:	c3                   	ret    
c002e706:	66 90                	xchg   ax,ax
c002e708:	ba 20 00 00 00       	mov    edx,0x20
c002e70d:	29 ea                	sub    edx,ebp
c002e70f:	89 e9                	mov    ecx,ebp
c002e711:	d3 e0                	shl    eax,cl
c002e713:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002e717:	89 f8                	mov    eax,edi
c002e719:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002e71d:	88 d1                	mov    cl,dl
c002e71f:	d3 e8                	shr    eax,cl
c002e721:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002e725:	09 c1                	or     ecx,eax
c002e727:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002e72b:	89 e9                	mov    ecx,ebp
c002e72d:	d3 e7                	shl    edi,cl
c002e72f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002e733:	89 d8                	mov    eax,ebx
c002e735:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002e739:	88 d1                	mov    cl,dl
c002e73b:	d3 e8                	shr    eax,cl
c002e73d:	89 c7                	mov    edi,eax
c002e73f:	89 e9                	mov    ecx,ebp
c002e741:	d3 e3                	shl    ebx,cl
c002e743:	89 f0                	mov    eax,esi
c002e745:	88 d1                	mov    cl,dl
c002e747:	d3 e8                	shr    eax,cl
c002e749:	09 d8                	or     eax,ebx
c002e74b:	89 e9                	mov    ecx,ebp
c002e74d:	d3 e6                	shl    esi,cl
c002e74f:	89 f3                	mov    ebx,esi
c002e751:	89 fa                	mov    edx,edi
c002e753:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002e757:	89 d1                	mov    ecx,edx
c002e759:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c002e75d:	89 c6                	mov    esi,eax
c002e75f:	89 d7                	mov    edi,edx
c002e761:	39 d1                	cmp    ecx,edx
c002e763:	72 27                	jb     c002e78c <__umoddi3+0x10c>
c002e765:	74 21                	je     c002e788 <__umoddi3+0x108>
c002e767:	89 ca                	mov    edx,ecx
c002e769:	29 f3                	sub    ebx,esi
c002e76b:	19 fa                	sbb    edx,edi
c002e76d:	89 d0                	mov    eax,edx
c002e76f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c002e773:	d3 e0                	shl    eax,cl
c002e775:	89 e9                	mov    ecx,ebp
c002e777:	d3 eb                	shr    ebx,cl
c002e779:	09 d8                	or     eax,ebx
c002e77b:	d3 ea                	shr    edx,cl
c002e77d:	83 c4 1c             	add    esp,0x1c
c002e780:	5b                   	pop    ebx
c002e781:	5e                   	pop    esi
c002e782:	5f                   	pop    edi
c002e783:	5d                   	pop    ebp
c002e784:	c3                   	ret    
c002e785:	8d 76 00             	lea    esi,[esi+0x0]
c002e788:	39 c3                	cmp    ebx,eax
c002e78a:	73 db                	jae    c002e767 <__umoddi3+0xe7>
c002e78c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c002e790:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c002e794:	89 d7                	mov    edi,edx
c002e796:	89 c6                	mov    esi,eax
c002e798:	eb cd                	jmp    c002e767 <__umoddi3+0xe7>

Disassembly of section .init:

c002e79a <_init>:
c002e79a:	55                   	push   ebp
c002e79b:	89 e5                	mov    ebp,esp
c002e79d:	e8 52 19 fd ff       	call   c00000f4 <frame_dummy>
c002e7a2:	e8 e5 fa ff ff       	call   c002e28c <__do_global_ctors_aux>
c002e7a7:	5d                   	pop    ebp
c002e7a8:	c3                   	ret    

Disassembly of section .fini:

c002e7a9 <_fini>:
c002e7a9:	55                   	push   ebp
c002e7aa:	89 e5                	mov    ebp,esp
c002e7ac:	e8 d3 18 fd ff       	call   c0000084 <__do_global_dtors_aux>
c002e7b1:	5d                   	pop    ebp
c002e7b2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c002e7b4 <Computer::~Computer()>:
c002e7b4:	83 ec 0c             	sub    esp,0xc
c002e7b7:	ba 64 0f 03 c0       	mov    edx,0xc0030f64
c002e7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7c0:	89 10                	mov    DWORD PTR [eax],edx
c002e7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e7c6:	83 ec 0c             	sub    esp,0xc
c002e7c9:	50                   	push   eax
c002e7ca:	e8 41 c9 fe ff       	call   c001b110 <Device::~Device()>
c002e7cf:	83 c4 10             	add    esp,0x10
c002e7d2:	90                   	nop
c002e7d3:	83 c4 0c             	add    esp,0xc
c002e7d6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002e7d8 <Computer::~Computer()>:
c002e7d8:	83 ec 0c             	sub    esp,0xc
c002e7db:	83 ec 0c             	sub    esp,0xc
c002e7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e7e2:	e8 cd ff ff ff       	call   c002e7b4 <Computer::~Computer()>
c002e7e7:	83 c4 10             	add    esp,0x10
c002e7ea:	83 ec 08             	sub    esp,0x8
c002e7ed:	68 70 01 00 00       	push   0x170
c002e7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002e7f6:	e8 65 a8 fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002e7fb:	83 c4 10             	add    esp,0x10
c002e7fe:	83 c4 0c             	add    esp,0xc
c002e801:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c002e802 <idleCommon()>:
c002e802:	83 ec 0c             	sub    esp,0xc
c002e805:	fa                   	cli    
c002e806:	ff 05 d0 01 04 c0    	inc    DWORD PTR ds:0xc00401d0
c002e80c:	e8 73 69 ff ff       	call   c0025184 <schedule()>
c002e811:	a1 d0 01 04 c0       	mov    eax,ds:0xc00401d0
c002e816:	48                   	dec    eax
c002e817:	a3 d0 01 04 c0       	mov    ds:0xc00401d0,eax
c002e81c:	75 01                	jne    c002e81f <idleCommon()+0x1d>
c002e81e:	fb                   	sti    
c002e81f:	83 c4 0c             	add    esp,0xc
c002e822:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c002e824 <LinkedList<UnixFile>::~LinkedList()>:
c002e824:	90                   	nop
c002e825:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002e826 <LinkedList<UnixFile>::LinkedList()>:
c002e826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e82a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e830:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e834:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e83b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e83f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e84a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e854:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e85b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e85f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e866:	90                   	nop
c002e867:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002e868 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002e868:	83 ec 0c             	sub    esp,0xc
c002e86b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002e870:	75 10                	jne    c002e882 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002e872:	83 ec 0c             	sub    esp,0xc
c002e875:	68 78 11 03 c0       	push   0xc0031178
c002e87a:	e8 27 19 ff ff       	call   c00201a6 <KePanic(char const*)>
c002e87f:	83 c4 10             	add    esp,0x10
c002e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e886:	8b 00                	mov    eax,DWORD PTR [eax]
c002e888:	85 c0                	test   eax,eax
c002e88a:	74 34                	je     c002e8c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e890:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e893:	85 c0                	test   eax,eax
c002e895:	74 29                	je     c002e8c0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e89b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e89e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e8a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e8a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e8ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e8b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e8b7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e8be:	eb 65                	jmp    c002e925 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8c4:	8b 00                	mov    eax,DWORD PTR [eax]
c002e8c6:	85 c0                	test   eax,eax
c002e8c8:	75 4b                	jne    c002e915 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e8d1:	85 c0                	test   eax,eax
c002e8d3:	75 40                	jne    c002e915 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002e8d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e8dd:	89 10                	mov    DWORD PTR [eax],edx
c002e8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002e8e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002e8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e8f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002e8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e8fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e8ff:	85 c0                	test   eax,eax
c002e901:	74 22                	je     c002e925 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e903:	83 ec 0c             	sub    esp,0xc
c002e906:	68 9a 11 03 c0       	push   0xc003119a
c002e90b:	e8 96 18 ff ff       	call   c00201a6 <KePanic(char const*)>
c002e910:	83 c4 10             	add    esp,0x10
c002e913:	eb 10                	jmp    c002e925 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002e915:	83 ec 0c             	sub    esp,0xc
c002e918:	68 a4 11 03 c0       	push   0xc00311a4
c002e91d:	e8 84 18 ff ff       	call   c00201a6 <KePanic(char const*)>
c002e922:	83 c4 10             	add    esp,0x10
c002e925:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e929:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e92c:	8d 50 01             	lea    edx,[eax+0x1]
c002e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e933:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e936:	90                   	nop
c002e937:	83 c4 0c             	add    esp,0xc
c002e93a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002e93c <LinkedList<UnixFile>::getFirstElement()>:
c002e93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e940:	8b 00                	mov    eax,DWORD PTR [eax]
c002e942:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002e944 <LinkedList<UnixFile>::removeFirst()>:
c002e944:	83 ec 0c             	sub    esp,0xc
c002e947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e94b:	8b 00                	mov    eax,DWORD PTR [eax]
c002e94d:	85 c0                	test   eax,eax
c002e94f:	75 12                	jne    c002e963 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002e951:	83 ec 0c             	sub    esp,0xc
c002e954:	68 b0 11 03 c0       	push   0xc00311b0
c002e959:	e8 48 18 ff ff       	call   c00201a6 <KePanic(char const*)>
c002e95e:	83 c4 10             	add    esp,0x10
c002e961:	eb 7e                	jmp    c002e9e1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002e963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e967:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002e96a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e96d:	85 c0                	test   eax,eax
c002e96f:	74 10                	je     c002e981 <LinkedList<UnixFile>::removeFirst()+0x3d>
c002e971:	83 ec 0c             	sub    esp,0xc
c002e974:	68 fb 11 03 c0       	push   0xc00311fb
c002e979:	e8 28 18 ff ff       	call   c00201a6 <KePanic(char const*)>
c002e97e:	83 c4 10             	add    esp,0x10
c002e981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e985:	8b 00                	mov    eax,DWORD PTR [eax]
c002e987:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e98a:	85 c0                	test   eax,eax
c002e98c:	75 33                	jne    c002e9c1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c002e98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e992:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002e998:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e99c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002e9a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9aa:	83 f8 01             	cmp    eax,0x1
c002e9ad:	74 21                	je     c002e9d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002e9af:	83 ec 0c             	sub    esp,0xc
c002e9b2:	68 d4 11 03 c0       	push   0xc00311d4
c002e9b7:	e8 ea 17 ff ff       	call   c00201a6 <KePanic(char const*)>
c002e9bc:	83 c4 10             	add    esp,0x10
c002e9bf:	eb 0f                	jmp    c002e9d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c002e9c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9c5:	8b 00                	mov    eax,DWORD PTR [eax]
c002e9c7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002e9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9ce:	89 10                	mov    DWORD PTR [eax],edx
c002e9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9d7:	8d 50 ff             	lea    edx,[eax-0x1]
c002e9da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002e9de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002e9e1:	83 c4 0c             	add    esp,0xc
c002e9e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002e9e6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002e9e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002e9ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002e9ed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c002e9ee <DriverlessDevice::~DriverlessDevice()>:
c002e9ee:	ba 28 1e 03 c0       	mov    edx,0xc0031e28
c002e9f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9f7:	89 10                	mov    DWORD PTR [eax],edx
c002e9f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002e9fd:	50                   	push   eax
c002e9fe:	e8 0d c7 fe ff       	call   c001b110 <Device::~Device()>
c002ea03:	83 c4 04             	add    esp,0x4
c002ea06:	90                   	nop
c002ea07:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002ea08 <DriverlessDevice::~DriverlessDevice()>:
c002ea08:	83 ec 0c             	sub    esp,0xc
c002ea0b:	83 ec 0c             	sub    esp,0xc
c002ea0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ea12:	e8 d7 ff ff ff       	call   c002e9ee <DriverlessDevice::~DriverlessDevice()>
c002ea17:	83 c4 10             	add    esp,0x10
c002ea1a:	83 ec 08             	sub    esp,0x8
c002ea1d:	68 58 01 00 00       	push   0x158
c002ea22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ea26:	e8 35 a6 fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002ea2b:	83 c4 10             	add    esp,0x10
c002ea2e:	83 c4 0c             	add    esp,0xc
c002ea31:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002ea32 <LinkedList<Device>::addElement(Device*)>:
c002ea32:	83 ec 0c             	sub    esp,0xc
c002ea35:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ea3a:	75 10                	jne    c002ea4c <LinkedList<Device>::addElement(Device*)+0x1a>
c002ea3c:	83 ec 0c             	sub    esp,0xc
c002ea3f:	68 78 11 03 c0       	push   0xc0031178
c002ea44:	e8 5d 17 ff ff       	call   c00201a6 <KePanic(char const*)>
c002ea49:	83 c4 10             	add    esp,0x10
c002ea4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea50:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea52:	85 c0                	test   eax,eax
c002ea54:	74 3a                	je     c002ea90 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ea56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea5d:	85 c0                	test   eax,eax
c002ea5f:	74 2f                	je     c002ea90 <LinkedList<Device>::addElement(Device*)+0x5e>
c002ea61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea6c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002ea72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ea7a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ea7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea81:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ea84:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002ea8e:	eb 68                	jmp    c002eaf8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ea90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea94:	8b 00                	mov    eax,DWORD PTR [eax]
c002ea96:	85 c0                	test   eax,eax
c002ea98:	75 4e                	jne    c002eae8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002ea9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ea9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eaa1:	85 c0                	test   eax,eax
c002eaa3:	75 43                	jne    c002eae8 <LinkedList<Device>::addElement(Device*)+0xb6>
c002eaa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eaa9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eaad:	89 10                	mov    DWORD PTR [eax],edx
c002eaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eab3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eab7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002eaba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eabe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eac1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002eacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eacf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ead2:	85 c0                	test   eax,eax
c002ead4:	74 22                	je     c002eaf8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002ead6:	83 ec 0c             	sub    esp,0xc
c002ead9:	68 9a 11 03 c0       	push   0xc003119a
c002eade:	e8 c3 16 ff ff       	call   c00201a6 <KePanic(char const*)>
c002eae3:	83 c4 10             	add    esp,0x10
c002eae6:	eb 10                	jmp    c002eaf8 <LinkedList<Device>::addElement(Device*)+0xc6>
c002eae8:	83 ec 0c             	sub    esp,0xc
c002eaeb:	68 a4 11 03 c0       	push   0xc00311a4
c002eaf0:	e8 b1 16 ff ff       	call   c00201a6 <KePanic(char const*)>
c002eaf5:	83 c4 10             	add    esp,0x10
c002eaf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eafc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eaff:	8d 50 01             	lea    edx,[eax+0x1]
c002eb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb06:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002eb09:	90                   	nop
c002eb0a:	83 c4 0c             	add    esp,0xc
c002eb0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002eb0e <LinkedList<Device>::LinkedList()>:
c002eb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eb2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb32:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eb38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eb43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb47:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002eb4e:	90                   	nop
c002eb4f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002eb50 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002eb50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb54:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb56:	85 c0                	test   eax,eax
c002eb58:	75 0e                	jne    c002eb68 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002eb5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb5e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb61:	85 c0                	test   eax,eax
c002eb63:	75 03                	jne    c002eb68 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002eb65:	b0 01                	mov    al,0x1
c002eb67:	c3                   	ret    
c002eb68:	b0 00                	mov    al,0x0
c002eb6a:	90                   	nop
c002eb6b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002eb6c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002eb6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eb70:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb72:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002eb74 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002eb74:	83 ec 0c             	sub    esp,0xc
c002eb77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb7b:	8b 00                	mov    eax,DWORD PTR [eax]
c002eb7d:	85 c0                	test   eax,eax
c002eb7f:	75 17                	jne    c002eb98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c002eb81:	83 ec 0c             	sub    esp,0xc
c002eb84:	68 b0 11 03 c0       	push   0xc00311b0
c002eb89:	e8 18 16 ff ff       	call   c00201a6 <KePanic(char const*)>
c002eb8e:	83 c4 10             	add    esp,0x10
c002eb91:	e9 96 00 00 00       	jmp    c002ec2c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c002eb96:	66 90                	xchg   ax,ax
c002eb98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eb9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002eb9f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002eba2:	85 c0                	test   eax,eax
c002eba4:	0f 95 c0             	setne  al
c002eba7:	0f b6 c0             	movzx  eax,al
c002ebaa:	85 c0                	test   eax,eax
c002ebac:	74 12                	je     c002ebc0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c002ebae:	83 ec 0c             	sub    esp,0xc
c002ebb1:	68 fb 11 03 c0       	push   0xc00311fb
c002ebb6:	e8 eb 15 ff ff       	call   c00201a6 <KePanic(char const*)>
c002ebbb:	83 c4 10             	add    esp,0x10
c002ebbe:	66 90                	xchg   ax,ax
c002ebc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebc4:	8b 00                	mov    eax,DWORD PTR [eax]
c002ebc6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ebc9:	85 c0                	test   eax,eax
c002ebcb:	0f 94 c0             	sete   al
c002ebce:	0f b6 c0             	movzx  eax,al
c002ebd1:	85 c0                	test   eax,eax
c002ebd3:	74 33                	je     c002ec08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c002ebd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebd9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ebdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebe3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ebea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ebee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ebf1:	83 f8 01             	cmp    eax,0x1
c002ebf4:	74 22                	je     c002ec18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ebf6:	83 ec 0c             	sub    esp,0xc
c002ebf9:	68 d4 11 03 c0       	push   0xc00311d4
c002ebfe:	e8 a3 15 ff ff       	call   c00201a6 <KePanic(char const*)>
c002ec03:	83 c4 10             	add    esp,0x10
c002ec06:	eb 10                	jmp    c002ec18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c002ec08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec0c:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec0e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002ec11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec15:	89 10                	mov    DWORD PTR [eax],edx
c002ec17:	90                   	nop
c002ec18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ec1f:	8d 50 ff             	lea    edx,[eax-0x1]
c002ec22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec26:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ec29:	8d 76 00             	lea    esi,[esi+0x0]
c002ec2c:	83 c4 0c             	add    esp,0xc
c002ec2f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002ec30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002ec30:	83 ec 0c             	sub    esp,0xc
c002ec33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002ec38:	75 12                	jne    c002ec4c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002ec3a:	83 ec 0c             	sub    esp,0xc
c002ec3d:	68 78 11 03 c0       	push   0xc0031178
c002ec42:	e8 5f 15 ff ff       	call   c00201a6 <KePanic(char const*)>
c002ec47:	83 c4 10             	add    esp,0x10
c002ec4a:	66 90                	xchg   ax,ax
c002ec4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec50:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec52:	85 c0                	test   eax,eax
c002ec54:	74 36                	je     c002ec8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ec56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec5d:	85 c0                	test   eax,eax
c002ec5f:	74 2b                	je     c002ec8c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002ec61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec6c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002ec6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ec77:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ec7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec81:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ec88:	eb 6a                	jmp    c002ecf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ec8a:	66 90                	xchg   ax,ax
c002ec8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec90:	8b 00                	mov    eax,DWORD PTR [eax]
c002ec92:	85 c0                	test   eax,eax
c002ec94:	75 4e                	jne    c002ece4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002ec96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ec9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ec9d:	85 c0                	test   eax,eax
c002ec9f:	75 43                	jne    c002ece4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002eca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002eca5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002eca9:	89 10                	mov    DWORD PTR [eax],edx
c002ecab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002ecb3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002ecb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ecbd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002ecc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecc8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002eccb:	85 c0                	test   eax,eax
c002eccd:	74 25                	je     c002ecf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002eccf:	83 ec 0c             	sub    esp,0xc
c002ecd2:	68 9a 11 03 c0       	push   0xc003119a
c002ecd7:	e8 ca 14 ff ff       	call   c00201a6 <KePanic(char const*)>
c002ecdc:	83 c4 10             	add    esp,0x10
c002ecdf:	eb 13                	jmp    c002ecf4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002ece1:	8d 76 00             	lea    esi,[esi+0x0]
c002ece4:	83 ec 0c             	sub    esp,0xc
c002ece7:	68 a4 11 03 c0       	push   0xc00311a4
c002ecec:	e8 b5 14 ff ff       	call   c00201a6 <KePanic(char const*)>
c002ecf1:	83 c4 10             	add    esp,0x10
c002ecf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ecf8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ecfb:	8d 50 01             	lea    edx,[eax+0x1]
c002ecfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ed05:	90                   	nop
c002ed06:	83 c4 0c             	add    esp,0xc
c002ed09:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002ed0c <ACPI::~ACPI()>:
c002ed0c:	83 ec 0c             	sub    esp,0xc
c002ed0f:	ba e0 24 03 c0       	mov    edx,0xc00324e0
c002ed14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed18:	89 10                	mov    DWORD PTR [eax],edx
c002ed1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed1e:	83 ec 0c             	sub    esp,0xc
c002ed21:	50                   	push   eax
c002ed22:	e8 e9 c3 fe ff       	call   c001b110 <Device::~Device()>
c002ed27:	83 c4 10             	add    esp,0x10
c002ed2a:	90                   	nop
c002ed2b:	83 c4 0c             	add    esp,0xc
c002ed2e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002ed30 <ACPI::~ACPI()>:
c002ed30:	83 ec 0c             	sub    esp,0xc
c002ed33:	83 ec 0c             	sub    esp,0xc
c002ed36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed3a:	e8 cd ff ff ff       	call   c002ed0c <ACPI::~ACPI()>
c002ed3f:	83 c4 10             	add    esp,0x10
c002ed42:	83 ec 08             	sub    esp,0x8
c002ed45:	68 64 12 00 00       	push   0x1264
c002ed4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ed4e:	e8 0d a3 fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002ed53:	83 c4 10             	add    esp,0x10
c002ed56:	83 c4 0c             	add    esp,0xc
c002ed59:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002ed5c <LinkedList<Device>::~LinkedList()>:
c002ed5c:	90                   	nop
c002ed5d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002ed60 <LinkedList<Device>::isEmpty()>:
c002ed60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed64:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed66:	85 c0                	test   eax,eax
c002ed68:	75 0e                	jne    c002ed78 <LinkedList<Device>::isEmpty()+0x18>
c002ed6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002ed71:	85 c0                	test   eax,eax
c002ed73:	75 03                	jne    c002ed78 <LinkedList<Device>::isEmpty()+0x18>
c002ed75:	b0 01                	mov    al,0x1
c002ed77:	c3                   	ret    
c002ed78:	b0 00                	mov    al,0x0
c002ed7a:	90                   	nop
c002ed7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002ed7c <LinkedList<Device>::getFirstElement()>:
c002ed7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ed80:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c002ed84 <LinkedList<Device>::removeFirst()>:
c002ed84:	83 ec 0c             	sub    esp,0xc
c002ed87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ed8b:	8b 00                	mov    eax,DWORD PTR [eax]
c002ed8d:	85 c0                	test   eax,eax
c002ed8f:	75 17                	jne    c002eda8 <LinkedList<Device>::removeFirst()+0x24>
c002ed91:	83 ec 0c             	sub    esp,0xc
c002ed94:	68 b0 11 03 c0       	push   0xc00311b0
c002ed99:	e8 08 14 ff ff       	call   c00201a6 <KePanic(char const*)>
c002ed9e:	83 c4 10             	add    esp,0x10
c002eda1:	e9 92 00 00 00       	jmp    c002ee38 <LinkedList<Device>::removeFirst()+0xb4>
c002eda6:	66 90                	xchg   ax,ax
c002eda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002edaf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002edb5:	85 c0                	test   eax,eax
c002edb7:	74 13                	je     c002edcc <LinkedList<Device>::removeFirst()+0x48>
c002edb9:	83 ec 0c             	sub    esp,0xc
c002edbc:	68 fb 11 03 c0       	push   0xc00311fb
c002edc1:	e8 e0 13 ff ff       	call   c00201a6 <KePanic(char const*)>
c002edc6:	83 c4 10             	add    esp,0x10
c002edc9:	8d 76 00             	lea    esi,[esi+0x0]
c002edcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edd0:	8b 00                	mov    eax,DWORD PTR [eax]
c002edd2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c002edd8:	85 c0                	test   eax,eax
c002edda:	75 34                	jne    c002ee10 <LinkedList<Device>::removeFirst()+0x8c>
c002eddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ede0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ede6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002edf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002edf5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002edf8:	83 f8 01             	cmp    eax,0x1
c002edfb:	74 27                	je     c002ee24 <LinkedList<Device>::removeFirst()+0xa0>
c002edfd:	83 ec 0c             	sub    esp,0xc
c002ee00:	68 d4 11 03 c0       	push   0xc00311d4
c002ee05:	e8 9c 13 ff ff       	call   c00201a6 <KePanic(char const*)>
c002ee0a:	83 c4 10             	add    esp,0x10
c002ee0d:	eb 15                	jmp    c002ee24 <LinkedList<Device>::removeFirst()+0xa0>
c002ee0f:	90                   	nop
c002ee10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee14:	8b 00                	mov    eax,DWORD PTR [eax]
c002ee16:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002ee1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee20:	89 10                	mov    DWORD PTR [eax],edx
c002ee22:	66 90                	xchg   ax,ax
c002ee24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002ee2b:	8d 50 ff             	lea    edx,[eax-0x1]
c002ee2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee32:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002ee35:	8d 76 00             	lea    esi,[esi+0x0]
c002ee38:	83 c4 0c             	add    esp,0xc
c002ee3b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002ee3c <CPU::~CPU()>:
c002ee3c:	83 ec 0c             	sub    esp,0xc
c002ee3f:	ba 88 26 03 c0       	mov    edx,0xc0032688
c002ee44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee48:	89 10                	mov    DWORD PTR [eax],edx
c002ee4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ee4e:	83 ec 0c             	sub    esp,0xc
c002ee51:	50                   	push   eax
c002ee52:	e8 b9 c2 fe ff       	call   c001b110 <Device::~Device()>
c002ee57:	83 c4 10             	add    esp,0x10
c002ee5a:	90                   	nop
c002ee5b:	83 c4 0c             	add    esp,0xc
c002ee5e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c002ee60 <CPU::~CPU()>:
c002ee60:	83 ec 0c             	sub    esp,0xc
c002ee63:	83 ec 0c             	sub    esp,0xc
c002ee66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee6a:	e8 cd ff ff ff       	call   c002ee3c <CPU::~CPU()>
c002ee6f:	83 c4 10             	add    esp,0x10
c002ee72:	83 ec 08             	sub    esp,0x8
c002ee75:	68 94 11 00 00       	push   0x1194
c002ee7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ee7e:	e8 dd a1 fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002ee83:	83 c4 10             	add    esp,0x10
c002ee86:	83 c4 0c             	add    esp,0xc
c002ee89:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002ee8c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002ee8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002ee90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002ee93:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002ee94 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002ee94:	90                   	nop
c002ee95:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c002ee98 <ThreadControlBlock::ThreadControlBlock()>:
c002ee98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ee9c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002eea3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eea7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002eeae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eeb2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c002eeb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eebd:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002eec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eec8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002eecf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eed3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002eed7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eedb:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002eedf:	90                   	nop
c002eee0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002eee4 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002eee4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eee8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002eeee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eef2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002eef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002eefd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ef04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef08:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002ef0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef12:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002ef19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002ef1d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002ef24:	90                   	nop
c002ef25:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002ef26 <PCI::~PCI()>:
c002ef26:	83 ec 0c             	sub    esp,0xc
c002ef29:	ba a8 35 03 c0       	mov    edx,0xc00335a8
c002ef2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef32:	89 10                	mov    DWORD PTR [eax],edx
c002ef34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef38:	83 ec 0c             	sub    esp,0xc
c002ef3b:	50                   	push   eax
c002ef3c:	e8 67 bc fe ff       	call   c001aba8 <Bus::~Bus()>
c002ef41:	83 c4 10             	add    esp,0x10
c002ef44:	90                   	nop
c002ef45:	83 c4 0c             	add    esp,0xc
c002ef48:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002ef4a <PCI::~PCI()>:
c002ef4a:	83 ec 0c             	sub    esp,0xc
c002ef4d:	83 ec 0c             	sub    esp,0xc
c002ef50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef54:	e8 cd ff ff ff       	call   c002ef26 <PCI::~PCI()>
c002ef59:	83 c4 10             	add    esp,0x10
c002ef5c:	83 ec 08             	sub    esp,0x8
c002ef5f:	68 5c 01 00 00       	push   0x15c
c002ef64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002ef68:	e8 f3 a0 fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002ef6d:	83 c4 10             	add    esp,0x10
c002ef70:	83 c4 0c             	add    esp,0xc
c002ef73:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002ef74 <IDE::~IDE()>:
c002ef74:	83 ec 0c             	sub    esp,0xc
c002ef77:	ba 5c 36 03 c0       	mov    edx,0xc003365c
c002ef7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef80:	89 10                	mov    DWORD PTR [eax],edx
c002ef82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002ef86:	83 ec 0c             	sub    esp,0xc
c002ef89:	50                   	push   eax
c002ef8a:	e8 11 c6 fe ff       	call   c001b5a0 <HardDiskController::~HardDiskController()>
c002ef8f:	83 c4 10             	add    esp,0x10
c002ef92:	90                   	nop
c002ef93:	83 c4 0c             	add    esp,0xc
c002ef96:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002ef98 <IDE::~IDE()>:
c002ef98:	83 ec 0c             	sub    esp,0xc
c002ef9b:	83 ec 0c             	sub    esp,0xc
c002ef9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002efa2:	e8 cd ff ff ff       	call   c002ef74 <IDE::~IDE()>
c002efa7:	83 c4 10             	add    esp,0x10
c002efaa:	83 ec 08             	sub    esp,0x8
c002efad:	68 70 02 00 00       	push   0x270
c002efb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002efb6:	e8 a5 a0 fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002efbb:	83 c4 10             	add    esp,0x10
c002efbe:	83 c4 0c             	add    esp,0xc
c002efc1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c002efc2 <SATABus::~SATABus()>:
c002efc2:	83 ec 0c             	sub    esp,0xc
c002efc5:	ba ac 36 03 c0       	mov    edx,0xc00336ac
c002efca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efce:	89 10                	mov    DWORD PTR [eax],edx
c002efd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002efd4:	83 ec 0c             	sub    esp,0xc
c002efd7:	50                   	push   eax
c002efd8:	e8 c3 c5 fe ff       	call   c001b5a0 <HardDiskController::~HardDiskController()>
c002efdd:	83 c4 10             	add    esp,0x10
c002efe0:	90                   	nop
c002efe1:	83 c4 0c             	add    esp,0xc
c002efe4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002efe6 <SATABus::~SATABus()>:
c002efe6:	83 ec 0c             	sub    esp,0xc
c002efe9:	83 ec 0c             	sub    esp,0xc
c002efec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002eff0:	e8 cd ff ff ff       	call   c002efc2 <SATABus::~SATABus()>
c002eff5:	83 c4 10             	add    esp,0x10
c002eff8:	83 ec 08             	sub    esp,0x8
c002effb:	68 64 01 00 00       	push   0x164
c002f000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f004:	e8 57 a0 fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002f009:	83 c4 10             	add    esp,0x10
c002f00c:	83 c4 0c             	add    esp,0xc
c002f00f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c002f010 <ATA::~ATA()>:
c002f010:	83 ec 0c             	sub    esp,0xc
c002f013:	ba ec 36 03 c0       	mov    edx,0xc00336ec
c002f018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f01c:	89 10                	mov    DWORD PTR [eax],edx
c002f01e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f022:	83 ec 0c             	sub    esp,0xc
c002f025:	50                   	push   eax
c002f026:	e8 57 c6 fe ff       	call   c001b682 <PhysicalDisk::~PhysicalDisk()>
c002f02b:	83 c4 10             	add    esp,0x10
c002f02e:	90                   	nop
c002f02f:	83 c4 0c             	add    esp,0xc
c002f032:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002f034 <ATA::~ATA()>:
c002f034:	83 ec 0c             	sub    esp,0xc
c002f037:	83 ec 0c             	sub    esp,0xc
c002f03a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f03e:	e8 cd ff ff ff       	call   c002f010 <ATA::~ATA()>
c002f043:	83 c4 10             	add    esp,0x10
c002f046:	83 ec 08             	sub    esp,0x8
c002f049:	68 7c 01 00 00       	push   0x17c
c002f04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f052:	e8 09 a0 fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002f057:	83 c4 10             	add    esp,0x10
c002f05a:	83 c4 0c             	add    esp,0xc
c002f05d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002f05e <ATAPI::~ATAPI()>:
c002f05e:	83 ec 0c             	sub    esp,0xc
c002f061:	ba 34 37 03 c0       	mov    edx,0xc0033734
c002f066:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f06a:	89 10                	mov    DWORD PTR [eax],edx
c002f06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f070:	83 ec 0c             	sub    esp,0xc
c002f073:	50                   	push   eax
c002f074:	e8 09 c6 fe ff       	call   c001b682 <PhysicalDisk::~PhysicalDisk()>
c002f079:	83 c4 10             	add    esp,0x10
c002f07c:	90                   	nop
c002f07d:	83 c4 0c             	add    esp,0xc
c002f080:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c002f082 <ATAPI::~ATAPI()>:
c002f082:	83 ec 0c             	sub    esp,0xc
c002f085:	83 ec 0c             	sub    esp,0xc
c002f088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f08c:	e8 cd ff ff ff       	call   c002f05e <ATAPI::~ATAPI()>
c002f091:	83 c4 10             	add    esp,0x10
c002f094:	83 ec 08             	sub    esp,0x8
c002f097:	68 84 01 00 00       	push   0x184
c002f09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0a0:	e8 bb 9f fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002f0a5:	83 c4 10             	add    esp,0x10
c002f0a8:	83 c4 0c             	add    esp,0xc
c002f0ab:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002f0ac <SATA::~SATA()>:
c002f0ac:	83 ec 0c             	sub    esp,0xc
c002f0af:	ba f4 37 03 c0       	mov    edx,0xc00337f4
c002f0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0b8:	89 10                	mov    DWORD PTR [eax],edx
c002f0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f0be:	83 ec 0c             	sub    esp,0xc
c002f0c1:	50                   	push   eax
c002f0c2:	e8 bb c5 fe ff       	call   c001b682 <PhysicalDisk::~PhysicalDisk()>
c002f0c7:	83 c4 10             	add    esp,0x10
c002f0ca:	90                   	nop
c002f0cb:	83 c4 0c             	add    esp,0xc
c002f0ce:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c002f0d0 <SATA::~SATA()>:
c002f0d0:	83 ec 0c             	sub    esp,0xc
c002f0d3:	83 ec 0c             	sub    esp,0xc
c002f0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0da:	e8 cd ff ff ff       	call   c002f0ac <SATA::~SATA()>
c002f0df:	83 c4 10             	add    esp,0x10
c002f0e2:	83 ec 08             	sub    esp,0x8
c002f0e5:	68 7c 01 00 00       	push   0x17c
c002f0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f0ee:	e8 6d 9f fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002f0f3:	83 c4 10             	add    esp,0x10
c002f0f6:	83 c4 0c             	add    esp,0xc
c002f0f9:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002f0fa <SATAPI::~SATAPI()>:
c002f0fa:	83 ec 0c             	sub    esp,0xc
c002f0fd:	ba 18 39 03 c0       	mov    edx,0xc0033918
c002f102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f106:	89 10                	mov    DWORD PTR [eax],edx
c002f108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f10c:	83 ec 0c             	sub    esp,0xc
c002f10f:	50                   	push   eax
c002f110:	e8 6d c5 fe ff       	call   c001b682 <PhysicalDisk::~PhysicalDisk()>
c002f115:	83 c4 10             	add    esp,0x10
c002f118:	90                   	nop
c002f119:	83 c4 0c             	add    esp,0xc
c002f11c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002f11e <SATAPI::~SATAPI()>:
c002f11e:	83 ec 0c             	sub    esp,0xc
c002f121:	83 ec 0c             	sub    esp,0xc
c002f124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f128:	e8 cd ff ff ff       	call   c002f0fa <SATAPI::~SATAPI()>
c002f12d:	83 c4 10             	add    esp,0x10
c002f130:	83 ec 08             	sub    esp,0x8
c002f133:	68 84 01 00 00       	push   0x184
c002f138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f13c:	e8 1f 9f fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002f141:	83 c4 10             	add    esp,0x10
c002f144:	83 c4 0c             	add    esp,0xc
c002f147:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002f148 <IOAPIC::~IOAPIC()>:
c002f148:	83 ec 0c             	sub    esp,0xc
c002f14b:	ba 58 39 03 c0       	mov    edx,0xc0033958
c002f150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f154:	89 10                	mov    DWORD PTR [eax],edx
c002f156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f15a:	83 ec 0c             	sub    esp,0xc
c002f15d:	50                   	push   eax
c002f15e:	e8 ad bf fe ff       	call   c001b110 <Device::~Device()>
c002f163:	83 c4 10             	add    esp,0x10
c002f166:	90                   	nop
c002f167:	83 c4 0c             	add    esp,0xc
c002f16a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002f16c <IOAPIC::~IOAPIC()>:
c002f16c:	83 ec 0c             	sub    esp,0xc
c002f16f:	83 ec 0c             	sub    esp,0xc
c002f172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f176:	e8 cd ff ff ff       	call   c002f148 <IOAPIC::~IOAPIC()>
c002f17b:	83 c4 10             	add    esp,0x10
c002f17e:	83 ec 08             	sub    esp,0x8
c002f181:	68 68 01 00 00       	push   0x168
c002f186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f18a:	e8 d1 9e fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002f18f:	83 c4 10             	add    esp,0x10
c002f192:	83 c4 0c             	add    esp,0xc
c002f195:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002f198 <APICTimer::~APICTimer()>:
c002f198:	83 ec 0c             	sub    esp,0xc
c002f19b:	ba a0 39 03 c0       	mov    edx,0xc00339a0
c002f1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1a4:	89 10                	mov    DWORD PTR [eax],edx
c002f1a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1aa:	83 ec 0c             	sub    esp,0xc
c002f1ad:	50                   	push   eax
c002f1ae:	e8 39 da fe ff       	call   c001cbec <Timer::~Timer()>
c002f1b3:	83 c4 10             	add    esp,0x10
c002f1b6:	90                   	nop
c002f1b7:	83 c4 0c             	add    esp,0xc
c002f1ba:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002f1bc <APICTimer::~APICTimer()>:
c002f1bc:	83 ec 0c             	sub    esp,0xc
c002f1bf:	83 ec 0c             	sub    esp,0xc
c002f1c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1c6:	e8 cd ff ff ff       	call   c002f198 <APICTimer::~APICTimer()>
c002f1cb:	83 c4 10             	add    esp,0x10
c002f1ce:	83 ec 08             	sub    esp,0x8
c002f1d1:	68 60 01 00 00       	push   0x160
c002f1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f1da:	e8 81 9e fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002f1df:	83 c4 10             	add    esp,0x10
c002f1e2:	83 c4 0c             	add    esp,0xc
c002f1e5:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002f1e8 <PIT::~PIT()>:
c002f1e8:	83 ec 0c             	sub    esp,0xc
c002f1eb:	ba f0 39 03 c0       	mov    edx,0xc00339f0
c002f1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1f4:	89 10                	mov    DWORD PTR [eax],edx
c002f1f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002f1fa:	83 ec 0c             	sub    esp,0xc
c002f1fd:	50                   	push   eax
c002f1fe:	e8 e9 d9 fe ff       	call   c001cbec <Timer::~Timer()>
c002f203:	83 c4 10             	add    esp,0x10
c002f206:	90                   	nop
c002f207:	83 c4 0c             	add    esp,0xc
c002f20a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002f20c <PIT::~PIT()>:
c002f20c:	83 ec 0c             	sub    esp,0xc
c002f20f:	83 ec 0c             	sub    esp,0xc
c002f212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f216:	e8 cd ff ff ff       	call   c002f1e8 <PIT::~PIT()>
c002f21b:	83 c4 10             	add    esp,0x10
c002f21e:	83 ec 08             	sub    esp,0x8
c002f221:	68 5c 01 00 00       	push   0x15c
c002f226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002f22a:	e8 31 9e fe ff       	call   c0019060 <operator delete(void*, unsigned long)>
c002f22f:	83 c4 10             	add    esp,0x10
c002f232:	83 c4 0c             	add    esp,0xc
c002f235:	c3                   	ret    

Disassembly of section userkernel:

c0035000 <KiDefaultSignalHandlerAbort(int)>:
c0035000:	57                   	push   edi
c0035001:	b9 07 00 00 00       	mov    ecx,0x7
c0035006:	56                   	push   esi
c0035007:	be db 27 03 c0       	mov    esi,0xc00327db
c003500c:	83 ec 24             	sub    esp,0x24
c003500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0035013:	fc                   	cld    
c0035014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035016:	8d 44 24 04          	lea    eax,[esp+0x4]
c003501a:	50                   	push   eax
c003501b:	6a 00                	push   0x0
c003501d:	6a 38                	push   0x38
c003501f:	6a 01                	push   0x1
c0035021:	e8 2c 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0035026:	83 c4 34             	add    esp,0x34
c0035029:	5e                   	pop    esi
c003502a:	5f                   	pop    edi
c003502b:	c3                   	ret    

c003502c <KiDefaultSignalHandlerTerminate(int)>:
c003502c:	57                   	push   edi
c003502d:	b9 08 00 00 00       	mov    ecx,0x8
c0035032:	56                   	push   esi
c0035033:	be f7 27 03 c0       	mov    esi,0xc00327f7
c0035038:	83 ec 24             	sub    esp,0x24
c003503b:	89 e7                	mov    edi,esp
c003503d:	fc                   	cld    
c003503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0035040:	54                   	push   esp
c0035041:	6a 00                	push   0x0
c0035043:	6a 37                	push   0x37
c0035045:	6a 01                	push   0x1
c0035047:	e8 06 00 00 00       	call   c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c003504c:	83 c4 34             	add    esp,0x34
c003504f:	5e                   	pop    esi
c0035050:	5f                   	pop    edi
c0035051:	c3                   	ret    

c0035052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0035052:	53                   	push   ebx
c0035053:	83 ec 10             	sub    esp,0x10
c0035056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c003505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c003505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0035062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0035066:	cd 60                	int    0x60
c0035068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c003506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0035070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0035074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0035078:	83 c4 10             	add    esp,0x10
c003507b:	5b                   	pop    ebx
c003507c:	c3                   	ret    

Disassembly of section align_previous:

c0036000 <DO_NOT_DELETE()>:
c0036000:	c3                   	ret    
