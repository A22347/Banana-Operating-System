
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 f4 fb 01 c0       	mov    eax,0xc001fbf4
c0000025:	3d f4 fb 01 c0       	cmp    eax,0xc001fbf4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 f4 fb 01 c0       	push   0xc001fbf4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 f4 fb 01 c0       	mov    eax,0xc001fbf4
c0000051:	2d f4 fb 01 c0       	sub    eax,0xc001fbf4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 f4 fb 01 c0       	push   0xc001fbf4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 10 02 c0 00 	cmp    BYTE PTR ds:0xc00210c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 98 ce 01 c0       	mov    ebx,0xc001ce98
c0000097:	81 eb 94 ce 01 c0    	sub    ebx,0xc001ce94
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 94 ce 01 c0       	mov    esi,0xc001ce94
c00000a6:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 10 02 c0       	mov    ds:0xc00210c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 10 02 c0       	mov    eax,ds:0xc00210c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 f4 fb 01 c0       	push   0xc001fbf4
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 10 02 c0 01 	mov    BYTE PTR ds:0xc00210c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 10 02 c0       	push   0xc00210c8
c0000108:	68 f4 fb 01 c0       	push   0xc001fbf4
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 24 2e 01 00       	call   c00130d4 <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 ee a0 00 00       	call   c000a3b6 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 02 2e 01 00       	call   c00130d4 <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 0b 33 01 00       	call   c00135fc <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 5a 39 01 00       	call   c0013c54 <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 c0 1e 02 c0 	lgdtd  ds:0xc0021ec0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 e0 fe 00 00       	jmp    c0010262 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 e0 10 02 c0       	mov    ds:0xc00210e0,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 e0 10 02 c0    	mov    DWORD PTR ds:0xc00210e0,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d e0 10 02 c0    	mov    ebx,DWORD PTR ds:0xc00210e0
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 a0 ce 01 c0 02 	test   BYTE PTR [edx-0x3ffe3160],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 a0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3160],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 a0 ce 01 c0 08 	test   BYTE PTR [edx-0x3ffe3160],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 a0 ce 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3160],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 a0 ce 01 c0 01 	test   BYTE PTR [edx-0x3ffe3160],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 00 11 02 c0    	mov    ecx,DWORD PTR ds:0xc0021100
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 04 11 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeefc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 04 11 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeefc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 00 11 02 c0    	mov    DWORD PTR ds:0xc0021100,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 3c 11 02 c0    	mov    ecx,DWORD PTR ds:0xc002113c
c0000d3d:	c7 42 0c 34 11 02 c0 	mov    DWORD PTR [edx+0xc],0xc0021134
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 00 11 02 c0 02 	test   BYTE PTR ds:0xc0021100,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 00 11 02 c0    	mov    edi,DWORD PTR ds:0xc0021100
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 04 11 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeefc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 04 11 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeefc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 34 11 02 c0 	lea    edx,[eax*8-0x3ffdeecc]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 40 11 02 c0    	mov    ebx,DWORD PTR ds:0xc0021140
c00010bf:	81 fb 34 11 02 c0    	cmp    ebx,0xc0021134
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 34 11 02 c0       	cmp    eax,0xc0021134
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 30 11 02 c0    	cmp    DWORD PTR ds:0xc0021130,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 3c 11 02 c0       	mov    ds:0xc002113c,eax
c00010fb:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c0001100:	a3 30 11 02 c0       	mov    ds:0xc0021130,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c000110e:	c7 40 0c 34 11 02 c0 	mov    DWORD PTR [eax+0xc],0xc0021134
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 40 11 02 c0       	mov    ds:0xc0021140,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 34 11 02 c0 	mov    DWORD PTR [eax+0x8],0xc0021134
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 f8 10 02 c0 	lea    ebp,[edx*4-0x3ffdef08]
c000115f:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 00 11 02 c0 	lea    ecx,[edx*4-0x3ffdef00]
c000117a:	8b 14 95 00 11 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdef00]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 34 14 02 c0 	or     DWORD PTR [edi*4-0x3ffdebcc],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 34 11 02 c0 	lea    eax,[eax*8-0x3ffdeecc]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,ecx
c0001234:	89 0d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,ecx
c000123a:	c7 41 08 34 11 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0021134
c0001241:	c7 41 0c 34 11 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0021134
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 2c 11 02 c0 	lea    edx,[ecx*8-0x3ffdeed4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 34 14 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdebcc]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 2c 11 02 c0 	lea    edx,[eax*4-0x3ffdeed4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 34 14 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdebcc],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 3c 11 02 c0    	mov    DWORD PTR ds:0xc002113c,edi
c0001307:	89 3d 40 11 02 c0    	mov    DWORD PTR ds:0xc0021140,edi
c000130d:	c7 47 08 34 11 02 c0 	mov    DWORD PTR [edi+0x8],0xc0021134
c0001314:	c7 47 0c 34 11 02 c0 	mov    DWORD PTR [edi+0xc],0xc0021134
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 30 11 02 c0    	mov    DWORD PTR ds:0xc0021130,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 00 11 02 c0       	mov    edx,0xc0021100
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 54 14 02 c0    	mov    ebx,DWORD PTR ds:0xc0021454
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 54 14 02 c0    	mov    DWORD PTR ds:0xc0021454,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 2c 11 02 c0    	cmp    DWORD PTR ds:0xc002112c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 2c 11 02 c0    	mov    DWORD PTR ds:0xc002112c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 00 11 02 c0       	mov    eax,0xc0021100
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 5c 14 02 c0    	push   DWORD PTR ds:0xc002145c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 00 11 02 c0 00 	cmp    DWORD PTR ds:0xc0021100,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 5c 14 02 c0       	mov    eax,ds:0xc002145c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 2c 11 02 c0 00 	cmp    DWORD PTR ds:0xc002112c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 00 11 02 c0       	mov    eax,0xc0021100
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 2c 11 02 c0       	mov    eax,ds:0xc002112c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 04 11 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeefc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 34 11 02 c0       	mov    eax,0xc0021134
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 2c 14 02 c0       	cmp    eax,0xc002142c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 68 14 02 c0       	mov    eax,ds:0xc0021468
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 50 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021450
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 64 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021464
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 74 14 02 c0    	mov    esi,DWORD PTR ds:0xc0021474
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 00 11 02 c0       	mov    eax,0xc0021100
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 a4 cf 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe305c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 00 11 02 c0       	mov    eax,ds:0xc0021100
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 00 11 02 c0       	mov    ds:0xc0021100,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 44 14 02 c0    	mov    DWORD PTR ds:0xc0021444,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 48 14 02 c0    	mov    DWORD PTR ds:0xc0021448,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 4c 14 02 c0    	mov    DWORD PTR ds:0xc002144c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 54 14 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021454,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 fa 52 01 00       	jmp    c0016fe4 <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 28 53 01 00       	jmp    c0017028 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 c0 52 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdad40]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 4d 53 01 00       	jmp    c001706c <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 00 d1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe2f00]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 00 d1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe2f00]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba f8 f0 01 c0       	mov    edx,0xc001f0f8
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba bc cf 01 c0       	mov    edx,0xc001cfbc
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 a0 14 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdeb60]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 80 14 02 c0    	mov    ax,ds:0xc0021480
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 80 14 02 c0    	mov    ds:0xc0021480,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 c2 cf 01 c0       	mov    eax,0xc001cfc2
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 80 d0 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe2f80]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 cb cf 01 c0       	mov    eax,0xc001cfcb
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 00 d1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe2f00]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 a0 14 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdeb60]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 a0 14 02 c0 	mov    DWORD PTR [edx*4-0x3ffdeb60],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 50 d0 01 c0       	mov    eax,0xc001d050
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 a0 14 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdeb60]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 40 d0 01 c0       	mov    ebx,0xc001d040
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba 20 d0 01 c0       	mov    edx,0xc001d020
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba 30 d0 01 c0       	mov    edx,0xc001d030
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba d2 cf 01 c0       	mov    edx,0xc001cfd2
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba de cf 01 c0       	mov    edx,0xc001cfde
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba f2 cf 01 c0       	mov    edx,0xc001cff2
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c 20 d4 01 c0 	mov    DWORD PTR [esp+0xc],0xc001d420
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 20 d4 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d420
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 20 d2 01 c0       	mov    eax,0xc001d220
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 60 d1 01 c0       	mov    eax,0xc001d160
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 20 d1 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe2ee0]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 20 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdefe0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 80 10 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdef80]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 d0 15 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdea30],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 60 10 02 c0 	movsx  eax,BYTE PTR ds:0xc0021060
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 41 19 01 00       	call   c00178c0 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 80 10 02 c0       	mov    eax,0xc0021080
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 20 10 02 c0       	mov    eax,0xc0021020
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 b4 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021eb4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 20 d5 01 c0       	push   0xc001d520
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 80 1e 02 c0       	mov    ecx,0xc0021e80
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 40 15 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdeac0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdeac0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 44 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeabc],esi
c000634e:	89 87 40 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeac0],eax
c0006354:	c7 87 48 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdeab8],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 d0 15 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdea30],0x0
c0006370:	89 87 4c 15 02 c0    	mov    DWORD PTR [edi-0x3ffdeab4],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 40 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeac0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 d0 15 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdea30]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c00063e9:	8b 8d 4c 15 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdeab4]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 40 15 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdeac0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 20 10 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdefe0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 48 15 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdeab8]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 48 15 02 c0    	add    DWORD PTR [ebp-0x3ffdeab8],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 40 15 02 c0    	lea    ecx,[ebp-0x3ffdeac0]
c00064e1:	83 bd 40 15 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdeac0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 4c 15 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdeab4]
c000651f:	05 40 15 02 c0       	add    eax,0xc0021540
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 48 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab8]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 40 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdeac0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb d0 15 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdea30],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 48 15 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdeab8]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 40 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdeac0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba d0 15 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdea30],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 4c 15 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdeab4]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 40 15 02 c0    	lea    esi,[eax-0x3ffdeac0]
c00065e4:	83 b8 40 15 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdeac0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 48 15 02 c0    	mov    esi,DWORD PTR [edx-0x3ffdeab8]
c0006653:	81 c2 40 15 02 c0    	add    edx,0xc0021540
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 80 10 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdef80]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 58 15 02 c0    	lea    ebp,[eax-0x3ffdeaa8]
c00066b9:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 58 15 02 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffdeaa8],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 20 d5 01 c0       	push   0xc001d520
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 53 15 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdeaad],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 50 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeab0],eax
c000678f:	89 91 54 15 02 c0    	mov    DWORD PTR [ecx-0x3ffdeaac],edx
c0006795:	81 c1 40 15 02 c0    	add    ecx,0xc0021540
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 50 15 02 c0       	add    eax,0xc0021550
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 60 10 02 c0       	mov    ds:0xc0021060,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 b4 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb4,0x0
c00067df:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 80 10 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdef80]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 23 d5 01 c0       	push   0xc001d523
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 b4 1e 02 c0       	mov    ds:0xc0021eb4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d b4 1e 02 c0 00 	cmp    DWORD PTR ds:0xc0021eb4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 ac 1e 02 c0       	mov    eax,ds:0xc0021eac
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 80 10 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdef80]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 2a d5 01 c0       	push   0xc001d52a
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 80 10 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdef80]
c000687d:	bf 80 1e 02 c0       	mov    edi,0xc0021e80
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 82 1e 02 c0       	mov    eax,0xc0021e82
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 a8 1e 02 c0       	mov    ds:0xc0021ea8,eax
c00068a0:	b8 8a 1e 02 c0       	mov    eax,0xc0021e8a
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 a4 1e 02 c0       	mov    ds:0xc0021ea4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 40 15 02 c0       	push   0xc0021540
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 40 15 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0021540,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 b0 1e 02 c0       	mov    ds:0xc0021eb0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 20 15 02 c0       	mov    ds:0xc0021520,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d 80 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdef80],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 20 10 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdefe0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d 80 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdef80]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 20 10 02 c0 	push   DWORD PTR [ebx*4-0x3ffdefe0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 b0 1e 02 c0       	mov    eax,ds:0xc0021eb0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 20 15 02 c0       	mov    eax,ds:0xc0021520
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 20 15 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021520,0x0
c00069a9:	c7 05 b0 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021eb0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 7a 51 00 00       	call   c000bb52 <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 31 d5 01 c0       	push   0xc001d531
c0006a09:	e8 f1 91 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0006a28:	50                   	push   eax
c0006a29:	68 4a d5 01 c0       	push   0xc001d54a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 ee c9 00 00       	call   c0013424 <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 01 cc 00 00       	call   c001364c <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 90 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025190
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 a0 40 01 c0       	push   0xc00140a0
c0006a5a:	52                   	push   edx
c0006a5b:	e8 ec cb 00 00       	call   c001364c <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 48 51 02 c0       	mov    ds:0xc0025148,eax
c0006a68:	68 48 d6 01 c0       	push   0xc001d648
c0006a6d:	c6 05 bd 1e 02 c0 01 	mov    BYTE PTR ds:0xc0021ebd,0x1
c0006a74:	e8 86 91 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c0006a79:	e8 01 da 00 00       	call   c001447f <Vm::initialise8086()>
c0006a7e:	e8 13 3f 00 00       	call   c000a996 <Fs::initVFS()>
c0006a83:	c7 04 24 57 d5 01 c0 	mov    DWORD PTR [esp],0xc001d557
c0006a8a:	e8 70 91 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c0006a8f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 48 d6 01 c0       	push   0xc001d648
c0006aae:	e8 4c 91 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c0006ab3:	e8 22 96 00 00       	call   c00100da <Krnl::loadSystemEnv()>
c0006ab8:	e8 7f 98 00 00       	call   c001033c <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 71 d5 01 c0       	push   0xc001d571
c0006ac7:	68 7a d5 01 c0       	push   0xc001d57a
c0006acc:	e8 e9 ae 00 00       	call   c00119ba <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 cb 49 00 00       	call   c000b4a4 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 6c d6 01 c0 	mov    DWORD PTR [esp],0xc001d66c
c0006ae0:	e8 1a 91 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 59 50 00 00       	call   c000bb50 <Device::loadDriversForAll()>
c0006af7:	c7 04 24 82 d5 01 c0 	mov    DWORD PTR [esp],0xc001d582
c0006afe:	e8 fc 90 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 93 d5 01 c0       	push   0xc001d593
c0006b12:	e8 2a c3 00 00       	call   c0012e41 <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 52 c5 00 00       	call   c0013072 <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 3b cf 00 00       	call   c0013a68 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 af d5 01 c0       	push   0xc001d5af
c0006b41:	50                   	push   eax
c0006b42:	e8 85 50 00 00       	call   c000bbcc <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba b8 d6 01 c0       	mov    edx,0xc001d6b8
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 d1 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 65 52 01 00       	call   c001be96 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 c0 84 00 00       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 99 84 00 00       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 77 84 00 00       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 55 84 00 00       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 d0 1e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0021ed0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 63 83 00 00       	call   c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 3e 83 00 00       	call   c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 cf 50 01 00       	call   c001be50 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 cc 4d 01 00       	call   c001bb70 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 5a 83 00 00       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 b8 d5 01 c0       	push   0xc001d5b8
c0006e14:	e8 5e 94 00 00       	call   c0010277 <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 be d5 01 c0       	push   0xc001d5be
c0006e4c:	e8 26 94 00 00       	call   c0010277 <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 0b 7d 00 00       	jmp    c000eba4 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 d0 1e 02 c0 04 	test   BYTE PTR ds:0xc0021ed0,0x4
c0006ee8:	68 c4 d5 01 c0       	push   0xc001d5c4
c0006eed:	0f 94 05 60 f8 01 c0 	sete   BYTE PTR ds:0xc001f860
c0006ef4:	e8 06 8d 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 2d 78 00 00       	call   c000e73c <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 16 4b 00 00       	call   c000ba34 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 dc d5 01 c0 	mov    DWORD PTR [esp],0xc001d5dc
c0006f37:	e8 c3 8c 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 92 82 00 00       	call   c000f1e4 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 d3 4a 00 00       	call   c000ba34 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 8c d6 01 c0       	push   0xc001d68c
c0006f7e:	e8 7c 8c 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c0006f83:	e8 2e e6 00 00       	call   c00155b6 <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 f6 d5 01 c0 	mov    DWORD PTR [esp],0xc001d5f6
c0006f8f:	e8 6b 8c 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 c4 c7 00 00       	call   c0013764 <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 11 d6 01 c0       	push   0xc001d611
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 03 36 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 22 d6 01 c0       	push   0xc001d622
c000700e:	e8 64 92 00 00       	call   c0010277 <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 2f d6 01 c0       	push   0xc001d62f
c0007023:	e8 4f 92 00 00       	call   c0010277 <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 39 d6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d639
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 38 92 00 00       	jmp    c0010277 <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 c2 1e 02 c0       	mov    ds:0xc0021ec2,eax
c00070cf:	66 89 15 c0 1e 02 c0 	mov    WORD PTR ds:0xc0021ec0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007217:	48                   	dec    eax
c0007218:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 6b e0 00 00       	call   c0015290 <HalSystemIdle()>
c0007225:	e8 28 52 01 00       	call   c001c452 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 c8 1e 02 c0 ff 07 	mov    WORD PTR ds:0xc0021ec8,0x7ff
c000731d:	a3 ca 1e 02 c0       	mov    ds:0xc0021eca,eax
c0007322:	0f 01 1d c8 1e 02 c0 	lidtd  ds:0xc0021ec8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 00 bc 01 c0       	push   0xc001bc00
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 10 bc 01 c0       	push   0xc001bc10
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 1a bc 01 c0       	push   0xc001bc1a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 24 bc 01 c0       	push   0xc001bc24
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 2e bc 01 c0       	push   0xc001bc2e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 38 bc 01 c0       	push   0xc001bc38
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 42 bc 01 c0       	push   0xc001bc42
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 4c bc 01 c0       	push   0xc001bc4c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 56 bc 01 c0       	push   0xc001bc56
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 5e bc 01 c0       	push   0xc001bc5e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 68 bc 01 c0       	push   0xc001bc68
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 70 bc 01 c0       	push   0xc001bc70
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 78 bc 01 c0       	push   0xc001bc78
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 80 bc 01 c0       	push   0xc001bc80
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 88 bc 01 c0       	push   0xc001bc88
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 90 bc 01 c0       	push   0xc001bc90
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 9a bc 01 c0       	push   0xc001bc9a
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 a4 bc 01 c0       	push   0xc001bca4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 ae bc 01 c0       	push   0xc001bcae
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 48 bd 01 c0       	push   0xc001bd48
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 4f bd 01 c0       	push   0xc001bd4f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 3a bd 01 c0       	push   0xc001bd3a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 41 bd 01 c0       	push   0xc001bd41
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 b8 bc 01 c0       	push   0xc001bcb8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 c2 bc 01 c0       	push   0xc001bcc2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 cc bc 01 c0       	push   0xc001bccc
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 d6 bc 01 c0       	push   0xc001bcd6
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 e0 bc 01 c0       	push   0xc001bce0
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 ea bc 01 c0       	push   0xc001bcea
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 f4 bc 01 c0       	push   0xc001bcf4
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 fe bc 01 c0       	push   0xc001bcfe
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 08 bd 01 c0       	push   0xc001bd08
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 12 bd 01 c0       	push   0xc001bd12
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 1c bd 01 c0       	push   0xc001bd1c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 26 bd 01 c0       	push   0xc001bd26
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 30 bd 01 c0       	push   0xc001bd30
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 e1 bd 01 c0       	push   0xc001bde1
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 eb bd 01 c0       	push   0xc001bdeb
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 f5 bd 01 c0       	push   0xc001bdf5
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 ff bd 01 c0       	push   0xc001bdff
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 09 be 01 c0       	push   0xc001be09
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 13 be 01 c0       	push   0xc001be13
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 1d be 01 c0       	push   0xc001be1d
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 27 be 01 c0       	push   0xc001be27
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007614:	e8 e3 23 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 91 15 00 00       	call   c0008bc8 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 56 bc 01 c0       	push   0xc001bc56
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 c6 15 00 00       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 48 f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f848
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 b0 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fb0
c00076c2:	8b 3d 48 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f848
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 1e 22 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 48 f8 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f848,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 48 f8 01 c0       	mov    eax,ds:0xc001f848
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 dc d6 01 c0       	push   0xc001d6dc
c000770e:	e8 e1 2e 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 0c d7 01 c0       	push   0xc001d70c
c000772d:	e8 45 8b 00 00       	call   c0010277 <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 11 d7 01 c0       	push   0xc001d711
c0007743:	e8 2f 8b 00 00       	call   c0010277 <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007763:	48                   	dec    eax
c0007764:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007781:	e8 76 22 00 00       	call   c00099fc <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0007797:	e8 02 1f 00 00       	call   c000969e <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 d0 1e 02 c0       	mov    ds:0xc0021ed0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 18 d7 01 c0       	push   0xc001d718
c0007862:	e8 8d 2d 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 25 83 00 00       	call   c000fb91 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 bc 1b 00 00       	call   c0009444 <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 25 24 00 00       	call   c0009cb8 <VAS::VAS()>
c0007893:	89 1d b0 1f 02 c0    	mov    DWORD PTR ds:0xc0021fb0,ebx
c0007899:	e8 4c 4b 01 00       	call   c001c3ea <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 b8 1e 02 c0    	mov    DWORD PTR ds:0xc0021eb8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 c5 1e 00 00       	call   c0009794 <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb ec 1e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffde114],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 30 d7 01 c0       	push   0xc001d730
c000792c:	e8 46 89 00 00       	call   c0010277 <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 ec 1e 02 c0    	lea    edx,[ebp-0x3ffde114]
c000796e:	8d 84 05 ed 1e 02 c0 	lea    eax,[ebp+eax*1-0x3ffde113]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d e4 1e 02 c0    	add    DWORD PTR ds:0xc0021ee4,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 30 d7 01 c0       	push   0xc001d730
c0007993:	e8 df 88 00 00       	call   c0010277 <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 e4 1e 02 c0    	sub    DWORD PTR ds:0xc0021ee4,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 ec 1e 02 c0       	add    eax,0xc0021eec
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 4c f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f84c
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 4c f8 01 c0    	add    eax,DWORD PTR ds:0xc001f84c
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 4c f8 01 c0    	mov    edx,DWORD PTR ds:0xc001f84c
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d e4 1e 02 c0    	dec    DWORD PTR ds:0xc0021ee4
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 d5 d7 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d7d5
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 f4 87 00 00       	jmp    c0010277 <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 d8 1e 02 c0    	mov    esi,DWORD PTR ds:0xc0021ed8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d d8 1e 02 c0    	mov    DWORD PTR ds:0xc0021ed8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 d8 1e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0021ed8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 fc 1e 02 c0 01 	xor    BYTE PTR ds:0xc0021efc,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 e6 27 00 00       	call   c000a2d6 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 58 d7 01 c0       	push   0xc001d758
c0007aff:	e8 73 87 00 00       	call   c0010277 <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d d8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021ed8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 d8 1e 02 c0       	mov    eax,ds:0xc0021ed8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 e4 1e 02 c0    	inc    DWORD PTR ds:0xc0021ee4
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007b99:	48                   	dec    eax
c0007b9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d dc 1e 02 c0    	cmp    DWORD PTR ds:0xc0021edc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d dc 1e 02 c0    	mov    DWORD PTR ds:0xc0021edc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 ec 1e 02 c0       	push   0xc0021eec
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 eb d7 01 c0       	push   0xc001d7eb
c0007c18:	e8 d7 29 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 88 d7 01 c0       	push   0xc001d788
c0007ca4:	e8 4b 29 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 ac d7 01 c0       	push   0xc001d7ac
c0007d40:	e8 af 28 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 e8 1e 02 c0    	add    eax,DWORD PTR ds:0xc0021ee8
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 11 d8 01 c0       	push   0xc001d811
c0007d76:	e8 79 28 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 03 d8 01 c0       	push   0xc001d803
c0007de5:	e8 8d 84 00 00       	call   c0010277 <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 e8 1e 02 c0 02 	add    DWORD PTR ds:0xc0021ee8,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 e8 1e 02 c0       	mov    ds:0xc0021ee8,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 70 d8 01 c0       	mov    edx,0xc001d870
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 53 11 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 04 26 00 00       	call   c000a4fe <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 2d d8 01 c0       	push   0xc001d82d
c0007fa7:	e8 cb 82 00 00       	call   c0010277 <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0007ff0:	e8 77 b8 00 00       	call   c001386c <schedule()>
c0007ff5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 43 42 01 00       	call   c001c2d0 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 4a d8 01 c0       	push   0xc001d84a
c00080a2:	e8 d0 81 00 00       	call   c0010277 <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 72 0d 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 70 d8 01 c0       	mov    edx,0xc001d870
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba 04 d9 01 c0       	mov    edx,0xc001d904
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 df 0e 00 00       	call   c0009024 <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 8d 23 00 00       	call   c000a4fe <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 c8 46 00 00       	call   c000c854 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 96 e2 00 00       	call   c0016448 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d 80 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0780]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d 80 f8 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0780]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 38 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08c8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 10 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08f0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 b9 df 00 00       	call   c00162d4 <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 14 e0 00 00       	jmp    c00163dc <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 84 d8 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d884
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 63 7e 00 00       	jmp    c0010277 <KePanic(char const*)>
c0008414:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 04 1f 02 c0    	mov    DWORD PTR ds:0xc0021f04,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 dc 2e 00 00       	jmp    c000b44b <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 92 d8 01 c0       	mov    esi,0xc001d892
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 04 1f 02 c0    	cmp    DWORD PTR ds:0xc0021f04,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 26 db 00 00       	call   c00163dc <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 34 05 00 00       	call   c0008e42 <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba 04 d9 01 c0       	mov    edx,0xc001d904
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000895c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008967:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000896e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008972:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008979:	83 ec 0c             	sub    esp,0xc
c000897c:	6a 01                	push   0x1
c000897e:	e8 02 09 00 00       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0008983:	83 c4 10             	add    esp,0x10
c0008986:	89 c2                	mov    edx,eax
c0008988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000898c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000898f:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000899c:	89 c6                	mov    esi,eax
c000899e:	e8 f2 f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089a3:	68 05 0c 00 00       	push   0xc05
c00089a8:	56                   	push   esi
c00089a9:	50                   	push   eax
c00089aa:	53                   	push   ebx
c00089ab:	e8 48 0f 00 00       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b0:	83 c4 10             	add    esp,0x10
c00089b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089ba:	83 ec 04             	sub    esp,0x4
c00089bd:	68 a0 0f 00 00       	push   0xfa0
c00089c2:	6a 00                	push   0x0
c00089c4:	50                   	push   eax
c00089c5:	e8 06 7b ff ff       	call   c00004d0 <memset>
c00089ca:	83 c4 10             	add    esp,0x10
c00089cd:	83 ec 04             	sub    esp,0x4
c00089d0:	6a 00                	push   0x0
c00089d2:	6a 07                	push   0x7
c00089d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089d8:	e8 6d f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089dd:	83 c4 10             	add    esp,0x10
c00089e0:	83 ec 04             	sub    esp,0x4
c00089e3:	6a 00                	push   0x0
c00089e5:	6a 00                	push   0x0
c00089e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089eb:	e8 f0 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	83 ec 0c             	sub    esp,0xc
c00089f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089fa:	e8 43 fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c00089ff:	83 c4 10             	add    esp,0x10
c0008a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a06:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	05 82 00 00 00       	add    eax,0x82
c0008a13:	83 ec 04             	sub    esp,0x4
c0008a16:	6a 30                	push   0x30
c0008a18:	6a 00                	push   0x0
c0008a1a:	50                   	push   eax
c0008a1b:	e8 b0 7a ff ff       	call   c00004d0 <memset>
c0008a20:	83 c4 10             	add    esp,0x10
c0008a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a27:	05 b2 00 00 00       	add    eax,0xb2
c0008a2c:	83 ec 04             	sub    esp,0x4
c0008a2f:	68 80 00 00 00       	push   0x80
c0008a34:	6a 00                	push   0x0
c0008a36:	50                   	push   eax
c0008a37:	e8 94 7a ff ff       	call   c00004d0 <memset>
c0008a3c:	83 c4 10             	add    esp,0x10
c0008a3f:	90                   	nop
c0008a40:	83 c4 04             	add    esp,0x4
c0008a43:	5b                   	pop    ebx
c0008a44:	5e                   	pop    esi
c0008a45:	c3                   	ret    

c0008a46 <VgaText::receiveKey(unsigned char)>:
c0008a46:	57                   	push   edi
c0008a47:	56                   	push   esi
c0008a48:	53                   	push   ebx
c0008a49:	83 ec 10             	sub    esp,0x10
c0008a4c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a54:	89 f0                	mov    eax,esi
c0008a56:	84 c0                	test   al,al
c0008a58:	0f 84 3b 01 00 00    	je     c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008a5e:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a64:	3c 08                	cmp    al,0x8
c0008a66:	75 68                	jne    c0008ad0 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a68:	83 ec 0c             	sub    esp,0xc
c0008a6b:	57                   	push   edi
c0008a6c:	e8 cf 7a ff ff       	call   c0000540 <strlen>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	85 c0                	test   eax,eax
c0008a76:	0f 84 be 00 00 00    	je     c0008b3a <VgaText::receiveKey(unsigned char)+0xf4>
c0008a7c:	50                   	push   eax
c0008a7d:	50                   	push   eax
c0008a7e:	6a 08                	push   0x8
c0008a80:	53                   	push   ebx
c0008a81:	e8 7e fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a86:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a89:	e8 b2 7a ff ff       	call   c0000540 <strlen>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008a98:	3c 0d                	cmp    al,0xd
c0008a9a:	0f 95 c1             	setne  cl
c0008a9d:	3c 18                	cmp    al,0x18
c0008a9f:	0f 9e c2             	setle  dl
c0008aa2:	84 d1                	test   cl,dl
c0008aa4:	74 17                	je     c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aa6:	83 e8 08             	sub    eax,0x8
c0008aa9:	3c 02                	cmp    al,0x2
c0008aab:	76 10                	jbe    c0008abd <VgaText::receiveKey(unsigned char)+0x77>
c0008aad:	50                   	push   eax
c0008aae:	50                   	push   eax
c0008aaf:	68 a3 d8 01 c0       	push   0xc001d8a3
c0008ab4:	53                   	push   ebx
c0008ab5:	e8 7c fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008aba:	83 c4 10             	add    esp,0x10
c0008abd:	83 ec 0c             	sub    esp,0xc
c0008ac0:	57                   	push   edi
c0008ac1:	e8 7a 7a ff ff       	call   c0000540 <strlen>
c0008ac6:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ace:	eb 67                	jmp    c0008b37 <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad0:	3c 18                	cmp    al,0x18
c0008ad2:	0f 96 c2             	setbe  dl
c0008ad5:	3c 0d                	cmp    al,0xd
c0008ad7:	0f 95 c0             	setne  al
c0008ada:	84 c2                	test   dl,al
c0008adc:	74 30                	je     c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ade:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae1:	3c 01                	cmp    al,0x1
c0008ae3:	76 29                	jbe    c0008b0e <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ae8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aeb:	68 a9 d8 01 c0       	push   0xc001d8a9
c0008af0:	53                   	push   ebx
c0008af1:	e8 b2 fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008af6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af9:	8d 46 40             	lea    eax,[esi+0x40]
c0008afc:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008aff:	0f b6 c0             	movzx  eax,al
c0008b02:	50                   	push   eax
c0008b03:	53                   	push   ebx
c0008b04:	e8 2d fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b09:	83 c4 20             	add    esp,0x20
c0008b0c:	eb 11                	jmp    c0008b1f <VgaText::receiveKey(unsigned char)+0xd9>
c0008b0e:	89 f0                	mov    eax,esi
c0008b10:	51                   	push   ecx
c0008b11:	0f be c0             	movsx  eax,al
c0008b14:	51                   	push   ecx
c0008b15:	50                   	push   eax
c0008b16:	53                   	push   ebx
c0008b17:	e8 e8 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b1c:	83 c4 10             	add    esp,0x10
c0008b1f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b24:	89 f0                	mov    eax,esi
c0008b26:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b2a:	52                   	push   edx
c0008b2b:	52                   	push   edx
c0008b2c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b30:	50                   	push   eax
c0008b31:	57                   	push   edi
c0008b32:	e8 89 7c ff ff       	call   c00007c0 <strcat>
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b41:	75 06                	jne    c0008b49 <VgaText::receiveKey(unsigned char)+0x103>
c0008b43:	89 f0                	mov    eax,esi
c0008b45:	3c 0a                	cmp    al,0xa
c0008b47:	75 50                	jne    c0008b99 <VgaText::receiveKey(unsigned char)+0x153>
c0008b49:	83 ec 0c             	sub    esp,0xc
c0008b4c:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b52:	53                   	push   ebx
c0008b53:	e8 e8 79 ff ff       	call   c0000540 <strlen>
c0008b58:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b5b:	89 c6                	mov    esi,eax
c0008b5d:	e8 de 79 ff ff       	call   c0000540 <strlen>
c0008b62:	83 c4 10             	add    esp,0x10
c0008b65:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b69:	3d 80 00 00 00       	cmp    eax,0x80
c0008b6e:	76 10                	jbe    c0008b80 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b70:	83 ec 0c             	sub    esp,0xc
c0008b73:	68 af d8 01 c0       	push   0xc001d8af
c0008b78:	e8 fa 76 00 00       	call   c0010277 <KePanic(char const*)>
c0008b7d:	83 c4 10             	add    esp,0x10
c0008b80:	50                   	push   eax
c0008b81:	50                   	push   eax
c0008b82:	57                   	push   edi
c0008b83:	53                   	push   ebx
c0008b84:	e8 37 7c ff ff       	call   c00007c0 <strcat>
c0008b89:	83 c4 0c             	add    esp,0xc
c0008b8c:	6a 30                	push   0x30
c0008b8e:	6a 00                	push   0x0
c0008b90:	57                   	push   edi
c0008b91:	e8 3a 79 ff ff       	call   c00004d0 <memset>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	5b                   	pop    ebx
c0008b9d:	5e                   	pop    esi
c0008b9e:	5f                   	pop    edi
c0008b9f:	c3                   	ret    

c0008ba0 <VgaText::doUpdate()>:
c0008ba0:	c3                   	ret    

c0008ba1 <newTerminal(char*)>:
c0008ba1:	83 ec 28             	sub    esp,0x28
c0008ba4:	68 34 01 00 00       	push   0x134
c0008ba9:	e8 0b ec ff ff       	call   c00077b9 <malloc>
c0008bae:	5a                   	pop    edx
c0008baf:	59                   	pop    ecx
c0008bb0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bb4:	50                   	push   eax
c0008bb5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bb9:	e8 3c fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bc2:	83 c4 2c             	add    esp,0x2c
c0008bc5:	c3                   	ret    
c0008bc6:	66 90                	xchg   ax,ax

c0008bc8 <TSS::TSS()>:
c0008bc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bcc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bd3:	90                   	nop
c0008bd4:	c3                   	ret    
c0008bd5:	90                   	nop
c0008bd6:	66 90                	xchg   ax,ax

c0008bd8 <TSS::setESP(unsigned long)>:
c0008bd8:	55                   	push   ebp
c0008bd9:	89 e5                	mov    ebp,esp
c0008bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008be4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008be7:	90                   	nop
c0008be8:	5d                   	pop    ebp
c0008be9:	c3                   	ret    
c0008bea:	66 90                	xchg   ax,ax

c0008bec <TSS::flush()>:
c0008bec:	55                   	push   ebp
c0008bed:	89 e5                	mov    ebp,esp
c0008bef:	83 ec 10             	sub    esp,0x10
c0008bf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bf7:	83 c8 03             	or     eax,0x3
c0008bfa:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008bfe:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c02:	66 89 d0             	mov    ax,dx
c0008c05:	0f 00 d8             	ltr    ax
c0008c08:	90                   	nop
c0008c09:	c9                   	leave  
c0008c0a:	c3                   	ret    
c0008c0b:	90                   	nop

c0008c0c <TSS::setup(unsigned long, unsigned long)>:
c0008c0c:	55                   	push   ebp
c0008c0d:	89 e5                	mov    ebp,esp
c0008c0f:	83 ec 18             	sub    esp,0x18
c0008c12:	83 ec 0c             	sub    esp,0xc
c0008c15:	6a 68                	push   0x68
c0008c17:	e8 9d eb ff ff       	call   c00077b9 <malloc>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	89 c2                	mov    edx,eax
c0008c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c2d:	83 ec 04             	sub    esp,0x4
c0008c30:	6a 68                	push   0x68
c0008c32:	6a 00                	push   0x0
c0008c34:	50                   	push   eax
c0008c35:	e8 96 78 ff ff       	call   c00004d0 <memset>
c0008c3a:	83 c4 10             	add    esp,0x10
c0008c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c43:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c5e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c67:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c73:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c7c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7f:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c8b:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c97:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008c9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ca3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008caf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cb2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cbb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cbe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc7:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cd4:	0f 20 da             	mov    edx,cr3
c0008cd7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008cda:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008cdd:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ce3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ce6:	83 ec 08             	sub    esp,0x8
c0008ce9:	50                   	push   eax
c0008cea:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008ced:	50                   	push   eax
c0008cee:	e8 4d e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cf3:	83 c4 10             	add    esp,0x10
c0008cf6:	83 ec 08             	sub    esp,0x8
c0008cf9:	6a 68                	push   0x68
c0008cfb:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cfe:	50                   	push   eax
c0008cff:	e8 58 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d04:	83 c4 10             	add    esp,0x10
c0008d07:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d0b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d0e:	83 e0 0f             	and    eax,0xf
c0008d11:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d14:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d17:	83 c8 40             	or     eax,0x40
c0008d1a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d28:	05 78 01 00 00       	add    eax,0x178
c0008d2d:	83 ec 04             	sub    esp,0x4
c0008d30:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d33:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d36:	50                   	push   eax
c0008d37:	e8 54 e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d3c:	83 c4 10             	add    esp,0x10
c0008d3f:	89 c2                	mov    edx,eax
c0008d41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d44:	89 10                	mov    DWORD PTR [eax],edx
c0008d46:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0008d4b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d51:	05 78 01 00 00       	add    eax,0x178
c0008d56:	83 ec 0c             	sub    esp,0xc
c0008d59:	50                   	push   eax
c0008d5a:	e8 5b e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d5f:	83 c4 10             	add    esp,0x10
c0008d62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d65:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d67:	c9                   	leave  
c0008d68:	c3                   	ret    
c0008d69:	90                   	nop

c0008d6a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d75:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d7a:	75 08                	jne    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d7c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d82:	eb 38                	jmp    c0008dbc <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d84:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d89:	75 17                	jne    c0008da2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d90:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d93:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008d99:	8b 10                	mov    edx,DWORD PTR [eax]
c0008d9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008d9f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008da2:	89 c1                	mov    ecx,eax
c0008da4:	83 e1 fd             	and    ecx,0xfffffffd
c0008da7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008dad:	74 cd                	je     c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008daf:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008db4:	83 e0 ef             	and    eax,0xffffffef
c0008db7:	83 f8 08             	cmp    eax,0x8
c0008dba:	76 c0                	jbe    c0008d7c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dbc:	31 c0                	xor    eax,eax
c0008dbe:	c3                   	ret    
c0008dbf:	90                   	nop

c0008dc0 <ReservedFilename::isAtty()>:
c0008dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dc7:	31 c0                	xor    eax,eax
c0008dc9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dcf:	74 09                	je     c0008dda <ReservedFilename::isAtty()+0x1a>
c0008dd1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008dd7:	0f 94 c0             	sete   al
c0008dda:	c3                   	ret    
c0008ddb:	90                   	nop

c0008ddc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008ddc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008de4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008de7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008deb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df0:	75 08                	jne    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008df2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008df8:	eb 3d                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008dfa:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008dff:	75 17                	jne    c0008e18 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e06:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e09:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e0f:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e15:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e18:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e1d:	75 04                	jne    c0008e23 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e1f:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e21:	eb 14                	jmp    c0008e37 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e23:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e28:	74 c8                	je     c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e2a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e2f:	83 e0 ef             	and    eax,0xffffffef
c0008e32:	83 f8 08             	cmp    eax,0x8
c0008e35:	76 bb                	jbe    c0008df2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e37:	31 c0                	xor    eax,eax
c0008e39:	c3                   	ret    

c0008e3a <UnixFile::getFileDescriptor()>:
c0008e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::UnixFile(int)>:
c0008e42:	53                   	push   ebx
c0008e43:	83 ec 28             	sub    esp,0x28
c0008e46:	ba cc d9 01 c0       	mov    edx,0xc001d9cc
c0008e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e4f:	89 10                	mov    DWORD PTR [eax],edx
c0008e51:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e59:	0f 8f 8c 01 00 00    	jg     c0008feb <UnixFile::UnixFile(int)+0x1a9>
c0008e5f:	a1 c0 f8 01 c0       	mov    eax,ds:0xc001f8c0
c0008e64:	8d 50 01             	lea    edx,[eax+0x1]
c0008e67:	89 15 c0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8c0,edx
c0008e6d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e71:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e74:	83 ec 08             	sub    esp,0x8
c0008e77:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e7b:	68 98 1f 02 c0       	push   0xc0021f98
c0008e80:	e8 33 36 01 00       	call   c001c4b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e85:	83 c4 10             	add    esp,0x10
c0008e88:	a0 94 1f 02 c0       	mov    al,ds:0xc0021f94
c0008e8d:	83 f0 01             	xor    eax,0x1
c0008e90:	84 c0                	test   al,al
c0008e92:	0f 84 54 01 00 00    	je     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008e98:	c6 05 94 1f 02 c0 01 	mov    BYTE PTR ds:0xc0021f94,0x1
c0008e9f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008ea7:	83 ec 0c             	sub    esp,0xc
c0008eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eae:	e8 06 e9 ff ff       	call   c00077b9 <malloc>
c0008eb3:	83 c4 10             	add    esp,0x10
c0008eb6:	89 c3                	mov    ebx,eax
c0008eb8:	83 ec 08             	sub    esp,0x8
c0008ebb:	68 03 ff ff 0f       	push   0xfffff03
c0008ec0:	53                   	push   ebx
c0008ec1:	e8 2c 01 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ec6:	83 c4 10             	add    esp,0x10
c0008ec9:	89 1d 8c 1f 02 c0    	mov    DWORD PTR ds:0xc0021f8c,ebx
c0008ecf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008ed7:	83 ec 0c             	sub    esp,0xc
c0008eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ede:	e8 d6 e8 ff ff       	call   c00077b9 <malloc>
c0008ee3:	83 c4 10             	add    esp,0x10
c0008ee6:	89 c3                	mov    ebx,eax
c0008ee8:	83 ec 08             	sub    esp,0x8
c0008eeb:	68 01 ff ff 0f       	push   0xfffff01
c0008ef0:	53                   	push   ebx
c0008ef1:	e8 fc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008ef6:	83 c4 10             	add    esp,0x10
c0008ef9:	89 1d 90 1f 02 c0    	mov    DWORD PTR ds:0xc0021f90,ebx
c0008eff:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f07:	83 ec 0c             	sub    esp,0xc
c0008f0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f0e:	e8 a6 e8 ff ff       	call   c00077b9 <malloc>
c0008f13:	83 c4 10             	add    esp,0x10
c0008f16:	89 c3                	mov    ebx,eax
c0008f18:	83 ec 08             	sub    esp,0x8
c0008f1b:	68 00 ff ff 0f       	push   0xfffff00
c0008f20:	53                   	push   ebx
c0008f21:	e8 cc 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f26:	83 c4 10             	add    esp,0x10
c0008f29:	89 1d 84 1f 02 c0    	mov    DWORD PTR ds:0xc0021f84,ebx
c0008f2f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f37:	83 ec 0c             	sub    esp,0xc
c0008f3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f3e:	e8 76 e8 ff ff       	call   c00077b9 <malloc>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	89 c3                	mov    ebx,eax
c0008f48:	83 ec 08             	sub    esp,0x8
c0008f4b:	68 02 ff ff 0f       	push   0xfffff02
c0008f50:	53                   	push   ebx
c0008f51:	e8 9c 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f56:	83 c4 10             	add    esp,0x10
c0008f59:	89 1d 88 1f 02 c0    	mov    DWORD PTR ds:0xc0021f88,ebx
c0008f5f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f67:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f6c:	7f 7e                	jg     c0008fec <UnixFile::UnixFile(int)+0x1aa>
c0008f6e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f7d:	e8 37 e8 ff ff       	call   c00077b9 <malloc>
c0008f82:	83 c4 10             	add    esp,0x10
c0008f85:	89 c3                	mov    ebx,eax
c0008f87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f8b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f90:	83 ec 08             	sub    esp,0x8
c0008f93:	50                   	push   eax
c0008f94:	53                   	push   ebx
c0008f95:	e8 58 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008f9a:	83 c4 10             	add    esp,0x10
c0008f9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa1:	89 1c 85 60 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0a0],ebx
c0008fa8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb0:	83 ec 0c             	sub    esp,0xc
c0008fb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb7:	e8 fd e7 ff ff       	call   c00077b9 <malloc>
c0008fbc:	83 c4 10             	add    esp,0x10
c0008fbf:	89 c3                	mov    ebx,eax
c0008fc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fc5:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fca:	83 ec 08             	sub    esp,0x8
c0008fcd:	50                   	push   eax
c0008fce:	53                   	push   ebx
c0008fcf:	e8 1e 00 00 00       	call   c0008ff2 <ReservedFilename::ReservedFilename(int)>
c0008fd4:	83 c4 10             	add    esp,0x10
c0008fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fdb:	89 1c 85 20 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde0e0],ebx
c0008fe2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fe6:	e9 7c ff ff ff       	jmp    c0008f67 <UnixFile::UnixFile(int)+0x125>
c0008feb:	90                   	nop
c0008fec:	83 c4 28             	add    esp,0x28
c0008fef:	5b                   	pop    ebx
c0008ff0:	c3                   	ret    
c0008ff1:	90                   	nop

c0008ff2 <ReservedFilename::ReservedFilename(int)>:
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ff9:	83 ec 08             	sub    esp,0x8
c0008ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009000:	50                   	push   eax
c0009001:	e8 3c fe ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c0009006:	83 c4 10             	add    esp,0x10
c0009009:	ba e8 d9 01 c0       	mov    edx,0xc001d9e8
c000900e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009012:	89 10                	mov    DWORD PTR [eax],edx
c0009014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009018:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000901c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000901f:	90                   	nop
c0009020:	83 c4 0c             	add    esp,0xc
c0009023:	c3                   	ret    

c0009024 <UnixFile::~UnixFile()>:
c0009024:	83 ec 1c             	sub    esp,0x1c
c0009027:	ba cc d9 01 c0       	mov    edx,0xc001d9cc
c000902c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009030:	89 10                	mov    DWORD PTR [eax],edx
c0009032:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009036:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009039:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000903e:	7f 73                	jg     c00090b3 <UnixFile::~UnixFile()+0x8f>
c0009040:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009048:	83 ec 0c             	sub    esp,0xc
c000904b:	68 98 1f 02 c0       	push   0xc0021f98
c0009050:	e8 37 35 01 00       	call   c001c58c <LinkedList<UnixFile>::getFirstElement()>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	68 98 1f 02 c0       	push   0xc0021f98
c0009064:	e8 2b 35 01 00       	call   c001c594 <LinkedList<UnixFile>::removeFirst()>
c0009069:	83 c4 10             	add    esp,0x10
c000906c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009070:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0009074:	74 40                	je     c00090b6 <UnixFile::~UnixFile()+0x92>
c0009076:	83 ec 08             	sub    esp,0x8
c0009079:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000907d:	68 98 1f 02 c0       	push   0xc0021f98
c0009082:	e8 31 34 01 00       	call   c001c4b8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009087:	83 c4 10             	add    esp,0x10
c000908a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000908e:	8d 50 01             	lea    edx,[eax+0x1]
c0009091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009095:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000909a:	0f 94 c0             	sete   al
c000909d:	84 c0                	test   al,al
c000909f:	74 a7                	je     c0009048 <UnixFile::~UnixFile()+0x24>
c00090a1:	83 ec 0c             	sub    esp,0xc
c00090a4:	68 a4 d9 01 c0       	push   0xc001d9a4
c00090a9:	e8 c9 71 00 00       	call   c0010277 <KePanic(char const*)>
c00090ae:	83 c4 10             	add    esp,0x10
c00090b1:	eb 95                	jmp    c0009048 <UnixFile::~UnixFile()+0x24>
c00090b3:	90                   	nop
c00090b4:	eb 01                	jmp    c00090b7 <UnixFile::~UnixFile()+0x93>
c00090b6:	90                   	nop
c00090b7:	90                   	nop
c00090b8:	83 c4 1c             	add    esp,0x1c
c00090bb:	c3                   	ret    

c00090bc <UnixFile::~UnixFile()>:
c00090bc:	83 ec 0c             	sub    esp,0xc
c00090bf:	83 ec 0c             	sub    esp,0xc
c00090c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c6:	e8 59 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090cb:	83 c4 10             	add    esp,0x10
c00090ce:	83 ec 08             	sub    esp,0x8
c00090d1:	6a 0c                	push   0xc
c00090d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d7:	e8 22 14 00 00       	call   c000a4fe <operator delete(void*, unsigned long)>
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 c4 0c             	add    esp,0xc
c00090e2:	c3                   	ret    
c00090e3:	90                   	nop

c00090e4 <ReservedFilename::~ReservedFilename()>:
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ba e8 d9 01 c0       	mov    edx,0xc001d9e8
c00090ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f0:	89 10                	mov    DWORD PTR [eax],edx
c00090f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f6:	83 ec 0c             	sub    esp,0xc
c00090f9:	50                   	push   eax
c00090fa:	e8 25 ff ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	90                   	nop
c0009103:	83 c4 0c             	add    esp,0xc
c0009106:	c3                   	ret    
c0009107:	90                   	nop

c0009108 <ReservedFilename::~ReservedFilename()>:
c0009108:	83 ec 0c             	sub    esp,0xc
c000910b:	83 ec 0c             	sub    esp,0xc
c000910e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009112:	e8 cd ff ff ff       	call   c00090e4 <ReservedFilename::~ReservedFilename()>
c0009117:	83 c4 10             	add    esp,0x10
c000911a:	83 ec 08             	sub    esp,0x8
c000911d:	6a 0c                	push   0xc
c000911f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009123:	e8 d6 13 00 00       	call   c000a4fe <operator delete(void*, unsigned long)>
c0009128:	83 c4 10             	add    esp,0x10
c000912b:	83 c4 0c             	add    esp,0xc
c000912e:	c3                   	ret    

c000912f <getFromFileDescriptor(int)>:
c000912f:	53                   	push   ebx
c0009130:	83 ec 08             	sub    esp,0x8
c0009133:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009137:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000913d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009143:	7f 2c                	jg     c0009171 <getFromFileDescriptor(int)+0x42>
c0009145:	83 ec 0c             	sub    esp,0xc
c0009148:	68 98 1f 02 c0       	push   0xc0021f98
c000914d:	e8 3a 34 01 00       	call   c001c58c <LinkedList<UnixFile>::getFirstElement()>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	85 c0                	test   eax,eax
c0009157:	75 04                	jne    c000915d <getFromFileDescriptor(int)+0x2e>
c0009159:	31 c0                	xor    eax,eax
c000915b:	eb 6e                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c000915d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009160:	74 69                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009162:	52                   	push   edx
c0009163:	52                   	push   edx
c0009164:	50                   	push   eax
c0009165:	68 98 1f 02 c0       	push   0xc0021f98
c000916a:	e8 c7 34 01 00       	call   c001c636 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000916f:	eb e1                	jmp    c0009152 <getFromFileDescriptor(int)+0x23>
c0009171:	a1 8c 1f 02 c0       	mov    eax,ds:0xc0021f8c
c0009176:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000917c:	74 4d                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000917e:	a1 90 1f 02 c0       	mov    eax,ds:0xc0021f90
c0009183:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009189:	74 40                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c000918b:	a1 88 1f 02 c0       	mov    eax,ds:0xc0021f88
c0009190:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0009196:	74 33                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c0009198:	a1 84 1f 02 c0       	mov    eax,ds:0xc0021f84
c000919d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091a3:	74 26                	je     c00091cb <getFromFileDescriptor(int)+0x9c>
c00091a5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091ab:	83 f8 08             	cmp    eax,0x8
c00091ae:	77 09                	ja     c00091b9 <getFromFileDescriptor(int)+0x8a>
c00091b0:	8b 04 85 60 1f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde0a0]
c00091b7:	eb 12                	jmp    c00091cb <getFromFileDescriptor(int)+0x9c>
c00091b9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091bf:	83 fb 08             	cmp    ebx,0x8
c00091c2:	77 95                	ja     c0009159 <getFromFileDescriptor(int)+0x2a>
c00091c4:	8b 04 9d 20 1f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffde0e0]
c00091cb:	83 c4 08             	add    esp,0x8
c00091ce:	5b                   	pop    ebx
c00091cf:	c3                   	ret    

c00091d0 <__static_initialization_and_destruction_0(int, int)>:
c00091d0:	83 ec 0c             	sub    esp,0xc
c00091d3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091d8:	75 34                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091da:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091e2:	75 2a                	jne    c000920e <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e4:	83 ec 0c             	sub    esp,0xc
c00091e7:	68 98 1f 02 c0       	push   0xc0021f98
c00091ec:	e8 85 32 01 00       	call   c001c476 <LinkedList<UnixFile>::LinkedList()>
c00091f1:	83 c4 10             	add    esp,0x10
c00091f4:	83 ec 04             	sub    esp,0x4
c00091f7:	68 44 f8 01 c0       	push   0xc001f844
c00091fc:	68 98 1f 02 c0       	push   0xc0021f98
c0009201:	68 74 c4 01 c0       	push   0xc001c474
c0009206:	e8 a3 12 00 00       	call   c000a4ae <__cxa_atexit>
c000920b:	83 c4 10             	add    esp,0x10
c000920e:	90                   	nop
c000920f:	83 c4 0c             	add    esp,0xc
c0009212:	c3                   	ret    

c0009213 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009213:	83 ec 0c             	sub    esp,0xc
c0009216:	83 ec 08             	sub    esp,0x8
c0009219:	68 ff ff 00 00       	push   0xffff
c000921e:	6a 01                	push   0x1
c0009220:	e8 ab ff ff ff       	call   c00091d0 <__static_initialization_and_destruction_0(int, int)>
c0009225:	83 c4 10             	add    esp,0x10
c0009228:	83 c4 0c             	add    esp,0xc
c000922b:	c3                   	ret    

c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000922c:	53                   	push   ebx
c000922d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009231:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009235:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000923b:	89 c8                	mov    eax,ecx
c000923d:	d1 e8                	shr    eax,1
c000923f:	03 05 c8 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f8c8
c0009245:	83 e1 01             	and    ecx,0x1
c0009248:	8a 10                	mov    dl,BYTE PTR [eax]
c000924a:	75 09                	jne    c0009255 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000924c:	83 e2 f0             	and    edx,0xfffffff0
c000924f:	09 da                	or     edx,ebx
c0009251:	88 10                	mov    BYTE PTR [eax],dl
c0009253:	5b                   	pop    ebx
c0009254:	c3                   	ret    
c0009255:	c1 e3 04             	shl    ebx,0x4
c0009258:	83 e2 0f             	and    edx,0xf
c000925b:	09 da                	or     edx,ebx
c000925d:	88 10                	mov    BYTE PTR [eax],dl
c000925f:	5b                   	pop    ebx
c0009260:	c3                   	ret    

c0009261 <Virt::getPageState(unsigned long)>:
c0009261:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009265:	8b 0d c8 f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8c8
c000926b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009271:	89 d0                	mov    eax,edx
c0009273:	d1 e8                	shr    eax,1
c0009275:	83 e2 01             	and    edx,0x1
c0009278:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000927b:	75 04                	jne    c0009281 <Virt::getPageState(unsigned long)+0x20>
c000927d:	83 e0 0f             	and    eax,0xf
c0009280:	c3                   	ret    
c0009281:	c0 e8 04             	shr    al,0x4
c0009284:	c3                   	ret    

c0009285 <Virt::allocateKernelVirtualPages(int)>:
c0009285:	55                   	push   ebp
c0009286:	31 ed                	xor    ebp,ebp
c0009288:	57                   	push   edi
c0009289:	56                   	push   esi
c000928a:	53                   	push   ebx
c000928b:	31 db                	xor    ebx,ebx
c000928d:	83 ec 1c             	sub    esp,0x1c
c0009290:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009294:	8b 3d c4 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f8c4
c000929a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000929f:	57                   	push   edi
c00092a0:	e8 bc ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092a5:	5a                   	pop    edx
c00092a6:	84 c0                	test   al,al
c00092a8:	75 3a                	jne    c00092e4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092aa:	85 db                	test   ebx,ebx
c00092ac:	75 02                	jne    c00092b0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092ae:	89 fd                	mov    ebp,edi
c00092b0:	43                   	inc    ebx
c00092b1:	39 f3                	cmp    ebx,esi
c00092b3:	74 5a                	je     c000930f <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092b5:	47                   	inc    edi
c00092b6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092bc:	76 31                	jbe    c00092ef <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092be:	c7 05 c4 f8 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f8c4,0xc8000
c00092c8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092cd:	75 28                	jne    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00092cf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092d4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092d9:	57                   	push   edi
c00092da:	e8 82 ff ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00092df:	5a                   	pop    edx
c00092e0:	84 c0                	test   al,al
c00092e2:	74 c6                	je     c00092aa <Virt::allocateKernelVirtualPages(int)+0x25>
c00092e4:	31 db                	xor    ebx,ebx
c00092e6:	47                   	inc    edi
c00092e7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092ed:	77 cf                	ja     c00092be <Virt::allocateKernelVirtualPages(int)+0x39>
c00092ef:	89 3d c4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8c4,edi
c00092f5:	eb a8                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092f7:	83 ec 0c             	sub    esp,0xc
c00092fa:	68 fc d9 01 c0       	push   0xc001d9fc
c00092ff:	e8 73 6f 00 00       	call   c0010277 <KePanic(char const*)>
c0009304:	8b 3d c4 f8 01 c0    	mov    edi,DWORD PTR ds:0xc001f8c4
c000930a:	83 c4 10             	add    esp,0x10
c000930d:	eb 90                	jmp    c000929f <Virt::allocateKernelVirtualPages(int)+0x1a>
c000930f:	89 2d c4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8c4,ebp
c0009315:	4b                   	dec    ebx
c0009316:	74 5f                	je     c0009377 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009318:	85 f6                	test   esi,esi
c000931a:	74 3d                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000931c:	89 e8                	mov    eax,ebp
c000931e:	31 db                	xor    ebx,ebx
c0009320:	8d 7e ff             	lea    edi,[esi-0x1]
c0009323:	eb 14                	jmp    c0009339 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009325:	6a 01                	push   0x1
c0009327:	43                   	inc    ebx
c0009328:	50                   	push   eax
c0009329:	e8 fe fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000932e:	58                   	pop    eax
c000932f:	39 f3                	cmp    ebx,esi
c0009331:	5a                   	pop    edx
c0009332:	74 25                	je     c0009359 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009334:	a1 c4 f8 01 c0       	mov    eax,ds:0xc001f8c4
c0009339:	8d 50 01             	lea    edx,[eax+0x1]
c000933c:	85 db                	test   ebx,ebx
c000933e:	89 15 c4 f8 01 c0    	mov    DWORD PTR ds:0xc001f8c4,edx
c0009344:	74 20                	je     c0009366 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009346:	39 df                	cmp    edi,ebx
c0009348:	75 db                	jne    c0009325 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000934a:	6a 03                	push   0x3
c000934c:	43                   	inc    ebx
c000934d:	50                   	push   eax
c000934e:	e8 d9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009353:	59                   	pop    ecx
c0009354:	39 f3                	cmp    ebx,esi
c0009356:	58                   	pop    eax
c0009357:	75 db                	jne    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009359:	83 c4 1c             	add    esp,0x1c
c000935c:	89 e8                	mov    eax,ebp
c000935e:	5b                   	pop    ebx
c000935f:	c1 e0 0c             	shl    eax,0xc
c0009362:	5e                   	pop    esi
c0009363:	5f                   	pop    edi
c0009364:	5d                   	pop    ebp
c0009365:	c3                   	ret    
c0009366:	6a 02                	push   0x2
c0009368:	bb 01 00 00 00       	mov    ebx,0x1
c000936d:	50                   	push   eax
c000936e:	e8 b9 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009373:	58                   	pop    eax
c0009374:	5a                   	pop    edx
c0009375:	eb bd                	jmp    c0009334 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009377:	6a 04                	push   0x4
c0009379:	8d 45 01             	lea    eax,[ebp+0x1]
c000937c:	55                   	push   ebp
c000937d:	a3 c4 f8 01 c0       	mov    ds:0xc001f8c4,eax
c0009382:	e8 a5 fe ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009387:	59                   	pop    ecx
c0009388:	89 e8                	mov    eax,ebp
c000938a:	5b                   	pop    ebx
c000938b:	c1 e0 0c             	shl    eax,0xc
c000938e:	83 c4 1c             	add    esp,0x1c
c0009391:	5b                   	pop    ebx
c0009392:	5e                   	pop    esi
c0009393:	5f                   	pop    edi
c0009394:	5d                   	pop    ebp
c0009395:	c3                   	ret    

c0009396 <Virt::freeSwapfilePage(unsigned long)>:
c0009396:	53                   	push   ebx
c0009397:	8b 15 ac 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fac
c000939d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a1:	b8 01 00 00 00       	mov    eax,0x1
c00093a6:	89 cb                	mov    ebx,ecx
c00093a8:	d3 e0                	shl    eax,cl
c00093aa:	c1 eb 05             	shr    ebx,0x5
c00093ad:	f7 d0                	not    eax
c00093af:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093b2:	5b                   	pop    ebx
c00093b3:	c3                   	ret    

c00093b4 <Virt::swapIDToSector(unsigned long)>:
c00093b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093b8:	0f af 05 cc f8 01 c0 	imul   eax,DWORD PTR ds:0xc001f8cc
c00093bf:	03 05 d4 f8 01 c0    	add    eax,DWORD PTR ds:0xc001f8d4
c00093c5:	c3                   	ret    

c00093c6 <Virt::allocateSwapfilePage()>:
c00093c6:	55                   	push   ebp
c00093c7:	31 d2                	xor    edx,edx
c00093c9:	57                   	push   edi
c00093ca:	56                   	push   esi
c00093cb:	53                   	push   ebx
c00093cc:	83 ec 0c             	sub    esp,0xc
c00093cf:	8b 0d cc f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8cc
c00093d5:	a1 d0 f8 01 c0       	mov    eax,ds:0xc001f8d0
c00093da:	f7 f1                	div    ecx
c00093dc:	39 0d d0 f8 01 c0    	cmp    DWORD PTR ds:0xc001f8d0,ecx
c00093e2:	72 2d                	jb     c0009411 <Virt::allocateSwapfilePage()+0x4b>
c00093e4:	8b 35 ac 1f 02 c0    	mov    esi,DWORD PTR ds:0xc0021fac
c00093ea:	8b 16                	mov    edx,DWORD PTR [esi]
c00093ec:	f6 c2 01             	test   dl,0x1
c00093ef:	74 3c                	je     c000942d <Virt::allocateSwapfilePage()+0x67>
c00093f1:	31 c9                	xor    ecx,ecx
c00093f3:	bf 01 00 00 00       	mov    edi,0x1
c00093f8:	eb 12                	jmp    c000940c <Virt::allocateSwapfilePage()+0x46>
c00093fa:	89 fd                	mov    ebp,edi
c00093fc:	89 ca                	mov    edx,ecx
c00093fe:	d3 e5                	shl    ebp,cl
c0009400:	c1 ea 05             	shr    edx,0x5
c0009403:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009406:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009408:	85 ea                	test   edx,ebp
c000940a:	74 2a                	je     c0009436 <Virt::allocateSwapfilePage()+0x70>
c000940c:	41                   	inc    ecx
c000940d:	39 c8                	cmp    eax,ecx
c000940f:	77 e9                	ja     c00093fa <Virt::allocateSwapfilePage()+0x34>
c0009411:	83 ec 0c             	sub    esp,0xc
c0009414:	68 8d db 01 c0       	push   0xc001db8d
c0009419:	e8 59 6e 00 00       	call   c0010277 <KePanic(char const*)>
c000941e:	83 c4 10             	add    esp,0x10
c0009421:	31 c9                	xor    ecx,ecx
c0009423:	83 c4 0c             	add    esp,0xc
c0009426:	89 c8                	mov    eax,ecx
c0009428:	5b                   	pop    ebx
c0009429:	5e                   	pop    esi
c000942a:	5f                   	pop    edi
c000942b:	5d                   	pop    ebp
c000942c:	c3                   	ret    
c000942d:	89 f3                	mov    ebx,esi
c000942f:	bd 01 00 00 00       	mov    ebp,0x1
c0009434:	31 c9                	xor    ecx,ecx
c0009436:	09 ea                	or     edx,ebp
c0009438:	89 c8                	mov    eax,ecx
c000943a:	89 13                	mov    DWORD PTR [ebx],edx
c000943c:	83 c4 0c             	add    esp,0xc
c000943f:	5b                   	pop    ebx
c0009440:	5e                   	pop    esi
c0009441:	5f                   	pop    edi
c0009442:	5d                   	pop    ebp
c0009443:	c3                   	ret    

c0009444 <Virt::virtualMemorySetup()>:
c0009444:	53                   	push   ebx
c0009445:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000944a:	6a 0f                	push   0xf
c000944c:	53                   	push   ebx
c000944d:	43                   	inc    ebx
c000944e:	e8 d9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009453:	58                   	pop    eax
c0009454:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000945a:	5a                   	pop    edx
c000945b:	75 ed                	jne    c000944a <Virt::virtualMemorySetup()+0x6>
c000945d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009462:	6a 00                	push   0x0
c0009464:	53                   	push   ebx
c0009465:	43                   	inc    ebx
c0009466:	e8 c1 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000946b:	59                   	pop    ecx
c000946c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009472:	58                   	pop    eax
c0009473:	75 ed                	jne    c0009462 <Virt::virtualMemorySetup()+0x1e>
c0009475:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000947a:	6a 0f                	push   0xf
c000947c:	53                   	push   ebx
c000947d:	43                   	inc    ebx
c000947e:	e8 a9 fd ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009483:	58                   	pop    eax
c0009484:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000948a:	5a                   	pop    edx
c000948b:	75 ed                	jne    c000947a <Virt::virtualMemorySetup()+0x36>
c000948d:	5b                   	pop    ebx
c000948e:	c3                   	ret    

c000948f <Virt::setupPageSwapping(int)>:
c000948f:	53                   	push   ebx
c0009490:	83 ec 0c             	sub    esp,0xc
c0009493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009497:	a1 28 44 02 c0       	mov    eax,ds:0xc0024428
c000949c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00094a4:	53                   	push   ebx
c00094a5:	c1 e3 0b             	shl    ebx,0xb
c00094a8:	68 a4 db 01 c0       	push   0xc001dba4
c00094ad:	50                   	push   eax
c00094ae:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b1:	89 1d d0 f8 01 c0    	mov    DWORD PTR ds:0xc001f8d0,ebx
c00094b7:	c6 05 d8 f8 01 c0 43 	mov    BYTE PTR ds:0xc001f8d8,0x43
c00094be:	c1 eb 08             	shr    ebx,0x8
c00094c1:	a3 d4 f8 01 c0       	mov    ds:0xc001f8d4,eax
c00094c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094c9:	c7 05 cc f8 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f8cc,0x8
c00094d3:	e8 e1 e2 ff ff       	call   c00077b9 <malloc>
c00094d8:	83 c4 0c             	add    esp,0xc
c00094db:	89 c1                	mov    ecx,eax
c00094dd:	a3 ac 1f 02 c0       	mov    ds:0xc0021fac,eax
c00094e2:	31 d2                	xor    edx,edx
c00094e4:	a1 d0 f8 01 c0       	mov    eax,ds:0xc001f8d0
c00094e9:	f7 35 cc f8 01 c0    	div    DWORD PTR ds:0xc001f8cc
c00094ef:	c1 e8 05             	shr    eax,0x5
c00094f2:	50                   	push   eax
c00094f3:	6a 00                	push   0x0
c00094f5:	51                   	push   ecx
c00094f6:	e8 d5 6f ff ff       	call   c00004d0 <memset>
c00094fb:	83 c4 18             	add    esp,0x18
c00094fe:	5b                   	pop    ebx
c00094ff:	c3                   	ret    

c0009500 <VAS::VAS(VAS*)>:
c0009500:	83 ec 0c             	sub    esp,0xc
c0009503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009507:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009519:	83 ec 0c             	sub    esp,0xc
c000951c:	68 1c da 01 c0       	push   0xc001da1c
c0009521:	e8 51 6d 00 00       	call   c0010277 <KePanic(char const*)>
c0009526:	83 c4 10             	add    esp,0x10
c0009529:	90                   	nop
c000952a:	83 c4 0c             	add    esp,0xc
c000952d:	c3                   	ret    

c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000952e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009532:	89 c2                	mov    edx,eax
c0009534:	c1 e8 0a             	shr    eax,0xa
c0009537:	c1 ea 16             	shr    edx,0x16
c000953a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000953f:	19 c9                	sbb    ecx,ecx
c0009541:	c1 e2 0c             	shl    edx,0xc
c0009544:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000954a:	25 fc 0f 00 00       	and    eax,0xffc
c000954f:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009556:	01 d0                	add    eax,edx
c0009558:	c3                   	ret    
c0009559:	90                   	nop

c000955a <VAS::getPageTableEntry(unsigned long)>:
c000955a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000955e:	89 ca                	mov    edx,ecx
c0009560:	c1 e9 0a             	shr    ecx,0xa
c0009563:	c1 ea 16             	shr    edx,0x16
c0009566:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000956c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009572:	c1 e0 0c             	shl    eax,0xc
c0009575:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009578:	c3                   	ret    

c0009579 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009579:	57                   	push   edi
c000957a:	56                   	push   esi
c000957b:	be 01 00 00 00       	mov    esi,0x1
c0009580:	53                   	push   ebx
c0009581:	83 ec 10             	sub    esp,0x10
c0009584:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009588:	c1 eb 0c             	shr    ebx,0xc
c000958b:	eb 3f                	jmp    c00095cc <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000958d:	83 ec 08             	sub    esp,0x8
c0009590:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0009595:	57                   	push   edi
c0009596:	50                   	push   eax
c0009597:	e8 be ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000959c:	83 c4 10             	add    esp,0x10
c000959f:	8b 00                	mov    eax,DWORD PTR [eax]
c00095a1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095a5:	f6 c4 04             	test   ah,0x4
c00095a8:	75 60                	jne    c000960a <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095aa:	80 fa 04             	cmp    dl,0x4
c00095ad:	74 79                	je     c0009628 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095af:	80 fa 02             	cmp    dl,0x2
c00095b2:	0f 84 89 00 00 00    	je     c0009641 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095b8:	80 fa 03             	cmp    dl,0x3
c00095bb:	0f 84 ae 00 00 00    	je     c000966f <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c00095c1:	fe ca                	dec    dl
c00095c3:	0f 84 93 00 00 00    	je     c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00095c9:	43                   	inc    ebx
c00095ca:	31 f6                	xor    esi,esi
c00095cc:	53                   	push   ebx
c00095cd:	89 df                	mov    edi,ebx
c00095cf:	e8 8d fc ff ff       	call   c0009261 <Virt::getPageState(unsigned long)>
c00095d4:	c1 e7 0c             	shl    edi,0xc
c00095d7:	5a                   	pop    edx
c00095d8:	84 c0                	test   al,al
c00095da:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00095de:	75 ad                	jne    c000958d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00095e0:	83 ec 0c             	sub    esp,0xc
c00095e3:	68 bb db 01 c0       	push   0xc001dbbb
c00095e8:	e8 8a 6c 00 00       	call   c0010277 <KePanic(char const*)>
c00095ed:	5a                   	pop    edx
c00095ee:	59                   	pop    ecx
c00095ef:	57                   	push   edi
c00095f0:	8b 3d b0 1f 02 c0    	mov    edi,DWORD PTR ds:0xc0021fb0
c00095f6:	57                   	push   edi
c00095f7:	e8 5e ff ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00095fc:	83 c4 10             	add    esp,0x10
c00095ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0009601:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009605:	f6 c4 04             	test   ah,0x4
c0009608:	74 bf                	je     c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000960a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000960e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009613:	83 ec 0c             	sub    esp,0xc
c0009616:	50                   	push   eax
c0009617:	e8 17 e4 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000961c:	83 c4 10             	add    esp,0x10
c000961f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009623:	80 fa 04             	cmp    dl,0x4
c0009626:	75 87                	jne    c00095af <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0009628:	89 f0                	mov    eax,esi
c000962a:	84 c0                	test   al,al
c000962c:	75 47                	jne    c0009675 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c000962e:	c7 44 24 20 40 da 01 c0 	mov    DWORD PTR [esp+0x20],0xc001da40
c0009636:	83 c4 10             	add    esp,0x10
c0009639:	5b                   	pop    ebx
c000963a:	5e                   	pop    esi
c000963b:	5f                   	pop    edi
c000963c:	e9 36 6c 00 00       	jmp    c0010277 <KePanic(char const*)>
c0009641:	89 f0                	mov    eax,esi
c0009643:	84 c0                	test   al,al
c0009645:	75 15                	jne    c000965c <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009647:	83 ec 0c             	sub    esp,0xc
c000964a:	68 d7 db 01 c0       	push   0xc001dbd7
c000964f:	e8 23 6c 00 00       	call   c0010277 <KePanic(char const*)>
c0009654:	83 c4 10             	add    esp,0x10
c0009657:	e9 6d ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000965c:	83 ec 08             	sub    esp,0x8
c000965f:	6a 00                	push   0x0
c0009661:	53                   	push   ebx
c0009662:	e8 c5 fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009667:	83 c4 10             	add    esp,0x10
c000966a:	e9 5a ff ff ff       	jmp    c00095c9 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000966f:	89 f0                	mov    eax,esi
c0009671:	84 c0                	test   al,al
c0009673:	75 15                	jne    c000968a <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009675:	83 ec 08             	sub    esp,0x8
c0009678:	6a 00                	push   0x0
c000967a:	53                   	push   ebx
c000967b:	e8 ac fb ff ff       	call   c000922c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	83 c4 10             	add    esp,0x10
c0009686:	5b                   	pop    ebx
c0009687:	5e                   	pop    esi
c0009688:	5f                   	pop    edi
c0009689:	c3                   	ret    
c000968a:	c7 44 24 20 f3 db 01 c0 	mov    DWORD PTR [esp+0x20],0xc001dbf3
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	5b                   	pop    ebx
c0009696:	5e                   	pop    esi
c0009697:	5f                   	pop    edi
c0009698:	e9 da 6b 00 00       	jmp    c0010277 <KePanic(char const*)>
c000969d:	90                   	nop

c000969e <VAS::freeAllocatedPages(unsigned long)>:
c000969e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096aa:	74 09                	je     c00096b5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096b0:	e9 c4 fe ff ff       	jmp    c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00096b5:	c7 44 24 04 64 da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da64
c00096bd:	e9 32 0f 00 00       	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)>

c00096c2 <VAS::virtualToPhysical(unsigned long)>:
c00096c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00096c6:	50                   	push   eax
c00096c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096cb:	52                   	push   edx
c00096cc:	e8 89 fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c00096d1:	59                   	pop    ecx
c00096d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00096d4:	5a                   	pop    edx
c00096d5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00096da:	c3                   	ret    
c00096db:	90                   	nop

c00096dc <VAS::reflagRange(unsigned long, int, int, int)>:
c00096dc:	55                   	push   ebp
c00096dd:	57                   	push   edi
c00096de:	56                   	push   esi
c00096df:	53                   	push   ebx
c00096e0:	83 ec 0c             	sub    esp,0xc
c00096e3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00096e7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00096eb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00096ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00096f3:	85 ff                	test   edi,edi
c00096f5:	7e 33                	jle    c000972a <VAS::reflagRange(unsigned long, int, int, int)+0x4e>
c00096f7:	c1 e7 0c             	shl    edi,0xc
c00096fa:	01 ef                	add    edi,ebp
c00096fc:	55                   	push   ebp
c00096fd:	81 c5 00 10 00 00    	add    ebp,0x1000
c0009703:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009707:	50                   	push   eax
c0009708:	e8 4d fe ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000970d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000970f:	21 d9                	and    ecx,ebx
c0009711:	09 f1                	or     ecx,esi
c0009713:	89 08                	mov    DWORD PTR [eax],ecx
c0009715:	89 34 24             	mov    DWORD PTR [esp],esi
c0009718:	53                   	push   ebx
c0009719:	68 0d dc 01 c0       	push   0xc001dc0d
c000971e:	e8 d1 0e 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0009723:	83 c4 10             	add    esp,0x10
c0009726:	39 ef                	cmp    edi,ebp
c0009728:	75 d2                	jne    c00096fc <VAS::reflagRange(unsigned long, int, int, int)+0x20>
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <VAS::setToWriteCombining(unsigned long, int)>:
c0009732:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009737:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000973d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009744:	75 01                	jne    c0009747 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009746:	c3                   	ret    
c0009747:	83 ec 18             	sub    esp,0x18
c000974a:	68 80 00 00 00       	push   0x80
c000974f:	6a ff                	push   0xffffffff
c0009751:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009755:	50                   	push   eax
c0009756:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000975a:	52                   	push   edx
c000975b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000975f:	51                   	push   ecx
c0009760:	e8 77 ff ff ff       	call   c00096dc <VAS::reflagRange(unsigned long, int, int, int)>
c0009765:	83 c4 2c             	add    esp,0x2c
c0009768:	c3                   	ret    
c0009769:	90                   	nop

c000976a <VAS::mapOtherVASIn(bool, VAS*)>:
c000976a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000976f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009773:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000977a:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000977d:	19 c0                	sbb    eax,eax
c000977f:	83 ca 03             	or     edx,0x3
c0009782:	83 e0 fc             	and    eax,0xfffffffc
c0009785:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000978c:	0f 20 d8             	mov    eax,cr3
c000978f:	0f 22 d8             	mov    cr3,eax
c0009792:	c3                   	ret    
c0009793:	90                   	nop

c0009794 <VAS::~VAS()>:
c0009794:	83 ec 2c             	sub    esp,0x2c
c0009797:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000979f:	fa                   	cli    
c00097a0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00097a5:	40                   	inc    eax
c00097a6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00097ab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097b5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097bf:	6a 01                	push   0x1
c00097c1:	50                   	push   eax
c00097c2:	e8 a3 ff ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c00097c7:	83 c4 0c             	add    esp,0xc
c00097ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097d2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00097da:	0f 8f d4 00 00 00    	jg     c00098b4 <VAS::~VAS()+0x120>
c00097e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00097e4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00097e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097eb:	c1 e2 02             	shl    edx,0x2
c00097ee:	01 d0                	add    eax,edx
c00097f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00097f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00097f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097fa:	83 e0 01             	and    eax,0x1
c00097fd:	0f 84 a8 00 00 00    	je     c00098ab <VAS::~VAS()+0x117>
c0009803:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000980b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009813:	7f 72                	jg     c0009887 <VAS::~VAS()+0xf3>
c0009815:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009819:	c1 e0 0a             	shl    eax,0xa
c000981c:	89 c2                	mov    edx,eax
c000981e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009822:	01 d0                	add    eax,edx
c0009824:	c1 e0 0c             	shl    eax,0xc
c0009827:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000982b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009830:	8b 00                	mov    eax,DWORD PTR [eax]
c0009832:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009835:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000983b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000983f:	6a 01                	push   0x1
c0009841:	50                   	push   eax
c0009842:	e8 e7 fc ff ff       	call   c000952e <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009847:	83 c4 0c             	add    esp,0xc
c000984a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000984e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009852:	8b 00                	mov    eax,DWORD PTR [eax]
c0009854:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009858:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000985c:	25 01 04 00 00       	and    eax,0x401
c0009861:	3d 01 04 00 00       	cmp    eax,0x401
c0009866:	75 19                	jne    c0009881 <VAS::~VAS()+0xed>
c0009868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000986c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009871:	83 ec 0c             	sub    esp,0xc
c0009874:	50                   	push   eax
c0009875:	e8 b9 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000987a:	83 c4 10             	add    esp,0x10
c000987d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009881:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009885:	eb 84                	jmp    c000980b <VAS::~VAS()+0x77>
c0009887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000988b:	25 00 04 00 00       	and    eax,0x400
c0009890:	74 19                	je     c00098ab <VAS::~VAS()+0x117>
c0009892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009896:	25 00 f0 ff ff       	and    eax,0xfffff000
c000989b:	83 ec 0c             	sub    esp,0xc
c000989e:	50                   	push   eax
c000989f:	e8 8f e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098a4:	83 c4 10             	add    esp,0x10
c00098a7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098ab:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098af:	e9 1e ff ff ff       	jmp    c00097d2 <VAS::~VAS()+0x3e>
c00098b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098b8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098bb:	83 ec 0c             	sub    esp,0xc
c00098be:	50                   	push   eax
c00098bf:	e8 b5 fc ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00098c4:	83 c4 10             	add    esp,0x10
c00098c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098ce:	83 ec 0c             	sub    esp,0xc
c00098d1:	50                   	push   eax
c00098d2:	e8 5c e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098d7:	83 c4 10             	add    esp,0x10
c00098da:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098de:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098e3:	48                   	dec    eax
c00098e4:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00098e9:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00098ee:	85 c0                	test   eax,eax
c00098f0:	75 01                	jne    c00098f3 <VAS::~VAS()+0x15f>
c00098f2:	fb                   	sti    
c00098f3:	90                   	nop
c00098f4:	83 c4 2c             	add    esp,0x2c
c00098f7:	c3                   	ret    

c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00098f8:	55                   	push   ebp
c00098f9:	57                   	push   edi
c00098fa:	56                   	push   esi
c00098fb:	53                   	push   ebx
c00098fc:	83 ec 1c             	sub    esp,0x1c
c00098ff:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009903:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009907:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000990d:	77 0b                	ja     c000991a <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c000990f:	0f 20 d8             	mov    eax,cr3
c0009912:	0f 20 d8             	mov    eax,cr3
c0009915:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009918:	75 47                	jne    c0009961 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c000991a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000991e:	09 d8                	or     eax,ebx
c0009920:	a9 ff 0f 00 00       	test   eax,0xfff
c0009925:	75 57                	jne    c000997e <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009927:	89 de                	mov    esi,ebx
c0009929:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000992c:	c1 ee 16             	shr    esi,0x16
c000992f:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009936:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000993a:	74 54                	je     c0009990 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c000993c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009940:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009946:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000994a:	c1 e6 0c             	shl    esi,0xc
c000994d:	c1 eb 0a             	shr    ebx,0xa
c0009950:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009956:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009959:	83 c4 1c             	add    esp,0x1c
c000995c:	5b                   	pop    ebx
c000995d:	5e                   	pop    esi
c000995e:	5f                   	pop    edi
c000995f:	5d                   	pop    ebp
c0009960:	c3                   	ret    
c0009961:	83 ec 0c             	sub    esp,0xc
c0009964:	68 88 da 01 c0       	push   0xc001da88
c0009969:	e8 86 0c 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000996e:	83 c4 10             	add    esp,0x10
c0009971:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009975:	09 d8                	or     eax,ebx
c0009977:	a9 ff 0f 00 00       	test   eax,0xfff
c000997c:	74 a9                	je     c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c000997e:	83 ec 0c             	sub    esp,0xc
c0009981:	68 f0 da 01 c0       	push   0xc001daf0
c0009986:	e8 ec 68 00 00       	call   c0010277 <KePanic(char const*)>
c000998b:	83 c4 10             	add    esp,0x10
c000998e:	eb 97                	jmp    c0009927 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009994:	e8 fc e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009999:	83 ec 0c             	sub    esp,0xc
c000999c:	89 c5                	mov    ebp,eax
c000999e:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c00099a4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099a8:	6a 01                	push   0x1
c00099aa:	e8 d6 f8 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c00099af:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099b6:	6a 01                	push   0x1
c00099b8:	50                   	push   eax
c00099b9:	55                   	push   ebp
c00099ba:	81 cd 07 04 00 00    	or     ebp,0x407
c00099c0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099c4:	51                   	push   ecx
c00099c5:	e8 28 02 00 00       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099ca:	83 c4 1c             	add    esp,0x1c
c00099cd:	68 00 10 00 00       	push   0x1000
c00099d2:	6a 00                	push   0x0
c00099d4:	50                   	push   eax
c00099d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00099d9:	e8 f2 6a ff ff       	call   c00004d0 <memset>
c00099de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00099e2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099e5:	e8 8f fb ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c00099ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099ee:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00099f1:	83 c4 10             	add    esp,0x10
c00099f4:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c00099f7:	e9 40 ff ff ff       	jmp    c000993c <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c00099fc <VAS::allocatePages(int, int)>:
c00099fc:	55                   	push   ebp
c00099fd:	57                   	push   edi
c00099fe:	56                   	push   esi
c00099ff:	53                   	push   ebx
c0009a00:	83 ec 1c             	sub    esp,0x1c
c0009a03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a07:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009a0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a12:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a18:	83 e0 01             	and    eax,0x1
c0009a1b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a1f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a23:	0f 85 cc 00 00 00    	jne    c0009af5 <VAS::allocatePages(int, int)+0xf9>
c0009a29:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a30:	85 c0                	test   eax,eax
c0009a32:	0f 84 a1 00 00 00    	je     c0009ad9 <VAS::allocatePages(int, int)+0xdd>
c0009a38:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a40:	c1 e6 0c             	shl    esi,0xc
c0009a43:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a47:	85 c0                	test   eax,eax
c0009a49:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a4c:	7e 33                	jle    c0009a81 <VAS::allocatePages(int, int)+0x85>
c0009a4e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a56:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a5c:	e8 34 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a61:	55                   	push   ebp
c0009a62:	53                   	push   ebx
c0009a63:	50                   	push   eax
c0009a64:	57                   	push   edi
c0009a65:	e8 8e fe ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a6a:	83 c4 10             	add    esp,0x10
c0009a6d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a72:	74 03                	je     c0009a77 <VAS::allocatePages(int, int)+0x7b>
c0009a74:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009a77:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009a7d:	39 de                	cmp    esi,ebx
c0009a7f:	75 db                	jne    c0009a5c <VAS::allocatePages(int, int)+0x60>
c0009a81:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a86:	75 12                	jne    c0009a9a <VAS::allocatePages(int, int)+0x9e>
c0009a88:	0f 20 d8             	mov    eax,cr3
c0009a8b:	0f 22 d8             	mov    cr3,eax
c0009a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a92:	83 c4 1c             	add    esp,0x1c
c0009a95:	5b                   	pop    ebx
c0009a96:	5e                   	pop    esi
c0009a97:	5f                   	pop    edi
c0009a98:	5d                   	pop    ebp
c0009a99:	c3                   	ret    
c0009a9a:	c1 ee 0a             	shr    esi,0xa
c0009a9d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009aa1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009aa7:	c1 eb 0a             	shr    ebx,0xa
c0009aaa:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ab0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ab6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009abc:	39 c3                	cmp    ebx,eax
c0009abe:	77 ce                	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009ac0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ac3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ac9:	39 d8                	cmp    eax,ebx
c0009acb:	73 f3                	jae    c0009ac0 <VAS::allocatePages(int, int)+0xc4>
c0009acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ad1:	83 c4 1c             	add    esp,0x1c
c0009ad4:	5b                   	pop    ebx
c0009ad5:	5e                   	pop    esi
c0009ad6:	5f                   	pop    edi
c0009ad7:	5d                   	pop    ebp
c0009ad8:	c3                   	ret    
c0009ad9:	83 ec 0c             	sub    esp,0xc
c0009adc:	68 14 db 01 c0       	push   0xc001db14
c0009ae1:	e8 91 67 00 00       	call   c0010277 <KePanic(char const*)>
c0009ae6:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009ae9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009aed:	83 c4 10             	add    esp,0x10
c0009af0:	e9 43 ff ff ff       	jmp    c0009a38 <VAS::allocatePages(int, int)+0x3c>
c0009af5:	83 ec 0c             	sub    esp,0xc
c0009af8:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009afc:	51                   	push   ecx
c0009afd:	e8 83 f7 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009b02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b06:	83 c4 10             	add    esp,0x10
c0009b09:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b0e:	0f 87 9b 00 00 00    	ja     c0009baf <VAS::allocatePages(int, int)+0x1b3>
c0009b14:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b18:	85 d2                	test   edx,edx
c0009b1a:	7e 3c                	jle    c0009b58 <VAS::allocatePages(int, int)+0x15c>
c0009b1c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b20:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b28:	c1 e5 0c             	shl    ebp,0xc
c0009b2b:	81 ce 00 04 00 00    	or     esi,0x400
c0009b31:	01 dd                	add    ebp,ebx
c0009b33:	e8 5d df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b38:	56                   	push   esi
c0009b39:	53                   	push   ebx
c0009b3a:	50                   	push   eax
c0009b3b:	57                   	push   edi
c0009b3c:	e8 b7 fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b41:	83 c4 10             	add    esp,0x10
c0009b44:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b49:	74 03                	je     c0009b4e <VAS::allocatePages(int, int)+0x152>
c0009b4b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b4e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b54:	39 dd                	cmp    ebp,ebx
c0009b56:	75 db                	jne    c0009b33 <VAS::allocatePages(int, int)+0x137>
c0009b58:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b5d:	0f 84 25 ff ff ff    	je     c0009a88 <VAS::allocatePages(int, int)+0x8c>
c0009b63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b67:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b6b:	89 d3                	mov    ebx,edx
c0009b6d:	c1 e0 0c             	shl    eax,0xc
c0009b70:	c1 eb 0a             	shr    ebx,0xa
c0009b73:	01 d0                	add    eax,edx
c0009b75:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009b7b:	c1 e8 0a             	shr    eax,0xa
c0009b7e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009b84:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b89:	2d 00 00 40 00       	sub    eax,0x400000
c0009b8e:	39 c3                	cmp    ebx,eax
c0009b90:	0f 87 f8 fe ff ff    	ja     c0009a8e <VAS::allocatePages(int, int)+0x92>
c0009b96:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b99:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b9f:	39 d8                	cmp    eax,ebx
c0009ba1:	73 f3                	jae    c0009b96 <VAS::allocatePages(int, int)+0x19a>
c0009ba3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ba7:	83 c4 1c             	add    esp,0x1c
c0009baa:	5b                   	pop    ebx
c0009bab:	5e                   	pop    esi
c0009bac:	5f                   	pop    edi
c0009bad:	5d                   	pop    ebp
c0009bae:	c3                   	ret    
c0009baf:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009bba:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009bc1:	0f 84 4d ff ff ff    	je     c0009b14 <VAS::allocatePages(int, int)+0x118>
c0009bc7:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bcf:	e9 40 ff ff ff       	jmp    c0009b14 <VAS::allocatePages(int, int)+0x118>

c0009bd4 <VAS::setCPUSpecific(unsigned long)>:
c0009bd4:	83 ec 0c             	sub    esp,0xc
c0009bd7:	6a 05                	push   0x5
c0009bd9:	68 00 00 40 c2       	push   0xc2400000
c0009bde:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009be2:	50                   	push   eax
c0009be3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009be7:	52                   	push   edx
c0009be8:	e8 0b fd ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009bed:	83 c4 1c             	add    esp,0x1c
c0009bf0:	c3                   	ret    
c0009bf1:	90                   	nop

c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009bf2:	55                   	push   ebp
c0009bf3:	57                   	push   edi
c0009bf4:	56                   	push   esi
c0009bf5:	53                   	push   ebx
c0009bf6:	83 ec 1c             	sub    esp,0x1c
c0009bf9:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009bfe:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c02:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c08:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c0c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c12:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c16:	83 e0 01             	and    eax,0x1
c0009c19:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c21:	85 c0                	test   eax,eax
c0009c23:	7e 39                	jle    c0009c5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c25:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c29:	89 f3                	mov    ebx,esi
c0009c2b:	c1 e0 0c             	shl    eax,0xc
c0009c2e:	01 f0                	add    eax,esi
c0009c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c34:	55                   	push   ebp
c0009c35:	53                   	push   ebx
c0009c36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c3a:	29 f0                	sub    eax,esi
c0009c3c:	01 d8                	add    eax,ebx
c0009c3e:	50                   	push   eax
c0009c3f:	57                   	push   edi
c0009c40:	e8 b3 fc ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c45:	83 c4 10             	add    esp,0x10
c0009c48:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c4d:	74 03                	je     c0009c52 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c4f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c52:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c58:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c5c:	75 d6                	jne    c0009c34 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c5e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c63:	75 10                	jne    c0009c75 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c65:	0f 20 d8             	mov    eax,cr3
c0009c68:	0f 22 d8             	mov    cr3,eax
c0009c6b:	83 c4 1c             	add    esp,0x1c
c0009c6e:	89 f0                	mov    eax,esi
c0009c70:	5b                   	pop    ebx
c0009c71:	5e                   	pop    esi
c0009c72:	5f                   	pop    edi
c0009c73:	5d                   	pop    ebp
c0009c74:	c3                   	ret    
c0009c75:	89 f3                	mov    ebx,esi
c0009c77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c7b:	c1 eb 0a             	shr    ebx,0xa
c0009c7e:	c1 e0 0c             	shl    eax,0xc
c0009c81:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009c87:	01 f0                	add    eax,esi
c0009c89:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009c8f:	c1 e8 0a             	shr    eax,0xa
c0009c92:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c97:	2d 00 00 40 00       	sub    eax,0x400000
c0009c9c:	39 c3                	cmp    ebx,eax
c0009c9e:	77 cb                	ja     c0009c6b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009ca0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ca3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ca9:	39 d8                	cmp    eax,ebx
c0009cab:	73 f3                	jae    c0009ca0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cad:	83 c4 1c             	add    esp,0x1c
c0009cb0:	89 f0                	mov    eax,esi
c0009cb2:	5b                   	pop    ebx
c0009cb3:	5e                   	pop    esi
c0009cb4:	5f                   	pop    edi
c0009cb5:	5d                   	pop    ebp
c0009cb6:	c3                   	ret    
c0009cb7:	90                   	nop

c0009cb8 <VAS::VAS()>:
c0009cb8:	83 ec 0c             	sub    esp,0xc
c0009cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009cc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd5:	a3 b0 1f 02 c0       	mov    ds:0xc0021fb0,eax
c0009cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cde:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ce6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009ce9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009ced:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009cf4:	ba 7d 00 02 c0       	mov    edx,0xc002007d
c0009cf9:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009cfe:	29 c2                	sub    edx,eax
c0009d00:	89 d0                	mov    eax,edx
c0009d02:	05 ff 0f 00 00       	add    eax,0xfff
c0009d07:	c1 e8 0c             	shr    eax,0xc
c0009d0a:	89 c1                	mov    ecx,eax
c0009d0c:	ba 00 00 02 c0       	mov    edx,0xc0020000
c0009d11:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0009d16:	83 ec 0c             	sub    esp,0xc
c0009d19:	6a 07                	push   0x7
c0009d1b:	51                   	push   ecx
c0009d1c:	52                   	push   edx
c0009d1d:	50                   	push   eax
c0009d1e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d22:	e8 cb fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d27:	83 c4 20             	add    esp,0x20
c0009d2a:	90                   	nop
c0009d2b:	83 c4 0c             	add    esp,0xc
c0009d2e:	c3                   	ret    
c0009d2f:	90                   	nop

c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009d30:	55                   	push   ebp
c0009d31:	57                   	push   edi
c0009d32:	56                   	push   esi
c0009d33:	53                   	push   ebx
c0009d34:	83 ec 1c             	sub    esp,0x1c
c0009d37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d3b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d3f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009d43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009d47:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4c:	75 4a                	jne    c0009d98 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d52:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d55:	c1 eb 16             	shr    ebx,0x16
c0009d58:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d5f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d63:	74 4d                	je     c0009db2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d69:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d6d:	c1 e8 0a             	shr    eax,0xa
c0009d70:	80 fa 01             	cmp    dl,0x1
c0009d73:	19 d2                	sbb    edx,edx
c0009d75:	c1 e3 0c             	shl    ebx,0xc
c0009d78:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d7c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d82:	25 fc 0f 00 00       	and    eax,0xffc
c0009d87:	01 d8                	add    eax,ebx
c0009d89:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d90:	83 c4 1c             	add    esp,0x1c
c0009d93:	5b                   	pop    ebx
c0009d94:	5e                   	pop    esi
c0009d95:	5f                   	pop    edi
c0009d96:	5d                   	pop    ebp
c0009d97:	c3                   	ret    
c0009d98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d9c:	83 ec 0c             	sub    esp,0xc
c0009d9f:	68 40 db 01 c0       	push   0xc001db40
c0009da4:	e8 ce 64 00 00       	call   c0010277 <KePanic(char const*)>
c0009da9:	83 c4 10             	add    esp,0x10
c0009dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009db0:	eb 9c                	jmp    c0009d4e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009db2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009db6:	e8 da dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009dbb:	83 ec 0c             	sub    esp,0xc
c0009dbe:	89 c5                	mov    ebp,eax
c0009dc0:	8b 0d b0 1f 02 c0    	mov    ecx,DWORD PTR ds:0xc0021fb0
c0009dc6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dca:	6a 01                	push   0x1
c0009dcc:	e8 b4 f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009dd1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009dd8:	6a 01                	push   0x1
c0009dda:	50                   	push   eax
c0009ddb:	55                   	push   ebp
c0009ddc:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009de6:	51                   	push   ecx
c0009de7:	e8 06 fe ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009dec:	83 c4 1c             	add    esp,0x1c
c0009def:	68 00 10 00 00       	push   0x1000
c0009df4:	6a 00                	push   0x0
c0009df6:	50                   	push   eax
c0009df7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dfb:	e8 d0 66 ff ff       	call   c00004d0 <memset>
c0009e00:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e07:	e8 6d f7 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0009e0c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e0f:	83 c4 10             	add    esp,0x10
c0009e12:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009e15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009e19:	e9 47 ff ff ff       	jmp    c0009d65 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009e1e <VAS::VAS(bool)>:
c0009e1e:	53                   	push   ebx
c0009e1f:	83 ec 38             	sub    esp,0x38
c0009e22:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009e26:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009e2a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009e35:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e39:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009e40:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e44:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009e48:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009e4b:	e8 45 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e50:	89 c2                	mov    edx,eax
c0009e52:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e59:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c0009e5f:	83 ec 0c             	sub    esp,0xc
c0009e62:	6a 01                	push   0x1
c0009e64:	e8 1c f4 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0009e69:	83 c4 10             	add    esp,0x10
c0009e6c:	89 c2                	mov    edx,eax
c0009e6e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e72:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e75:	83 ec 0c             	sub    esp,0xc
c0009e78:	6a 03                	push   0x3
c0009e7a:	6a 01                	push   0x1
c0009e7c:	52                   	push   edx
c0009e7d:	50                   	push   eax
c0009e7e:	53                   	push   ebx
c0009e7f:	e8 6e fd ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e84:	83 c4 20             	add    esp,0x20
c0009e87:	89 c2                	mov    edx,eax
c0009e89:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009e8d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e90:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009e98:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0009ea0:	7f 1c                	jg     c0009ebe <VAS::VAS(bool)+0xa0>
c0009ea2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ea6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ea9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009ead:	c1 e2 02             	shl    edx,0x2
c0009eb0:	01 d0                	add    eax,edx
c0009eb2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009eb8:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0009ebc:	eb da                	jmp    c0009e98 <VAS::VAS(bool)+0x7a>
c0009ebe:	c7 44 24 28 00 03 00 00 	mov    DWORD PTR [esp+0x28],0x300
c0009ec6:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0009ece:	7f 7a                	jg     c0009f4a <VAS::VAS(bool)+0x12c>
c0009ed0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009ed4:	2d 00 02 00 00       	sub    eax,0x200
c0009ed9:	c1 e0 0c             	shl    eax,0xc
c0009edc:	83 c8 03             	or     eax,0x3
c0009edf:	89 c2                	mov    edx,eax
c0009ee1:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009ee6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009eec:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ef2:	83 e0 10             	and    eax,0x10
c0009ef5:	84 c0                	test   al,al
c0009ef7:	74 07                	je     c0009f00 <VAS::VAS(bool)+0xe2>
c0009ef9:	b8 00 01 00 00       	mov    eax,0x100
c0009efe:	eb 05                	jmp    c0009f05 <VAS::VAS(bool)+0xe7>
c0009f00:	b8 00 00 00 00       	mov    eax,0x0
c0009f05:	09 d0                	or     eax,edx
c0009f07:	89 c1                	mov    ecx,eax
c0009f09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f10:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f14:	c1 e2 02             	shl    edx,0x2
c0009f17:	01 d0                	add    eax,edx
c0009f19:	89 ca                	mov    edx,ecx
c0009f1b:	89 10                	mov    DWORD PTR [eax],edx
c0009f1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f21:	2d 40 03 00 00       	sub    eax,0x340
c0009f26:	83 f8 7f             	cmp    eax,0x7f
c0009f29:	77 16                	ja     c0009f41 <VAS::VAS(bool)+0x123>
c0009f2b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f32:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f36:	c1 e2 02             	shl    edx,0x2
c0009f39:	01 d0                	add    eax,edx
c0009f3b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009f41:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0009f45:	e9 7c ff ff ff       	jmp    c0009ec6 <VAS::VAS(bool)+0xa8>
c0009f4a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f4f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f55:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f5b:	83 e0 10             	and    eax,0x10
c0009f5e:	84 c0                	test   al,al
c0009f60:	74 07                	je     c0009f69 <VAS::VAS(bool)+0x14b>
c0009f62:	b8 03 41 00 00       	mov    eax,0x4103
c0009f67:	eb 05                	jmp    c0009f6e <VAS::VAS(bool)+0x150>
c0009f69:	b8 03 40 00 00       	mov    eax,0x4003
c0009f6e:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0009f72:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f75:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f7b:	89 02                	mov    DWORD PTR [edx],eax
c0009f7d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009f82:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f88:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f8e:	83 ec 08             	sub    esp,0x8
c0009f91:	50                   	push   eax
c0009f92:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f96:	e8 39 fc ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c0009f9b:	83 c4 10             	add    esp,0x10
c0009f9e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fa2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009fa5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009faa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fb0:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009fb6:	83 e0 10             	and    eax,0x10
c0009fb9:	84 c0                	test   al,al
c0009fbb:	74 07                	je     c0009fc4 <VAS::VAS(bool)+0x1a6>
c0009fbd:	b8 00 01 00 00       	mov    eax,0x100
c0009fc2:	eb 05                	jmp    c0009fc9 <VAS::VAS(bool)+0x1ab>
c0009fc4:	b8 00 00 00 00       	mov    eax,0x0
c0009fc9:	09 c2                	or     edx,eax
c0009fcb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fcf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009fd2:	05 fc 0f 00 00       	add    eax,0xffc
c0009fd7:	83 ca 03             	or     edx,0x3
c0009fda:	89 10                	mov    DWORD PTR [eax],edx
c0009fdc:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0009fe1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fe7:	83 ec 0c             	sub    esp,0xc
c0009fea:	50                   	push   eax
c0009feb:	e8 d8 1c 00 00       	call   c000bcc8 <Device::getName()>
c0009ff0:	83 c4 10             	add    esp,0x10
c0009ff3:	83 ec 08             	sub    esp,0x8
c0009ff6:	68 27 dc 01 c0       	push   0xc001dc27
c0009ffb:	50                   	push   eax
c0009ffc:	e8 df 66 ff ff       	call   c00006e0 <strcmp>
c000a001:	83 c4 10             	add    esp,0x10
c000a004:	85 c0                	test   eax,eax
c000a006:	0f 94 c0             	sete   al
c000a009:	84 c0                	test   al,al
c000a00b:	0f 84 87 00 00 00    	je     c000a098 <VAS::VAS(bool)+0x27a>
c000a011:	fa                   	cli    
c000a012:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a017:	40                   	inc    eax
c000a018:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a01d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a022:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a028:	05 7c 09 00 00       	add    eax,0x97c
c000a02d:	83 ec 0c             	sub    esp,0xc
c000a030:	50                   	push   eax
c000a031:	e8 80 d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a036:	83 c4 10             	add    esp,0x10
c000a039:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a03e:	89 c3                	mov    ebx,eax
c000a040:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000a045:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a04b:	05 7c 09 00 00       	add    eax,0x97c
c000a050:	83 ec 0c             	sub    esp,0xc
c000a053:	50                   	push   eax
c000a054:	e8 5d d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a059:	83 c4 10             	add    esp,0x10
c000a05c:	83 ec 08             	sub    esp,0x8
c000a05f:	50                   	push   eax
c000a060:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a064:	e8 f1 f4 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a069:	83 c4 10             	add    esp,0x10
c000a06c:	8b 00                	mov    eax,DWORD PTR [eax]
c000a06e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a073:	6a 11                	push   0x11
c000a075:	53                   	push   ebx
c000a076:	50                   	push   eax
c000a077:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a07b:	e8 78 f8 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a080:	83 c4 10             	add    esp,0x10
c000a083:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a088:	48                   	dec    eax
c000a089:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a08e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a093:	85 c0                	test   eax,eax
c000a095:	75 01                	jne    c000a098 <VAS::VAS(bool)+0x27a>
c000a097:	fb                   	sti    
c000a098:	fa                   	cli    
c000a099:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a09e:	40                   	inc    eax
c000a09f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a0a4:	0f 20 d8             	mov    eax,cr3
c000a0a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0ab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a0b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a0b7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a0be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0c2:	0f 22 d8             	mov    cr3,eax
c000a0c5:	ba 7d 00 02 c0       	mov    edx,0xc002007d
c000a0ca:	b8 00 00 02 c0       	mov    eax,0xc0020000
c000a0cf:	29 c2                	sub    edx,eax
c000a0d1:	89 d0                	mov    eax,edx
c000a0d3:	05 ff 0f 00 00       	add    eax,0xfff
c000a0d8:	c1 e8 0c             	shr    eax,0xc
c000a0db:	89 c1                	mov    ecx,eax
c000a0dd:	ba 00 00 02 c0       	mov    edx,0xc0020000
c000a0e2:	b8 00 00 02 c0       	mov    eax,0xc0020000
c000a0e7:	83 ec 0c             	sub    esp,0xc
c000a0ea:	6a 07                	push   0x7
c000a0ec:	51                   	push   ecx
c000a0ed:	52                   	push   edx
c000a0ee:	50                   	push   eax
c000a0ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a0f3:	e8 fa fa ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0f8:	83 c4 20             	add    esp,0x20
c000a0fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a0ff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a103:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a107:	0f 22 d8             	mov    cr3,eax
c000a10a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a10f:	48                   	dec    eax
c000a110:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a115:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a11a:	85 c0                	test   eax,eax
c000a11c:	75 01                	jne    c000a11f <VAS::VAS(bool)+0x301>
c000a11e:	fb                   	sti    
c000a11f:	90                   	nop
c000a120:	83 c4 38             	add    esp,0x38
c000a123:	5b                   	pop    ebx
c000a124:	c3                   	ret    
c000a125:	90                   	nop

c000a126 <VAS::evict(unsigned long)>:
c000a126:	55                   	push   ebp
c000a127:	57                   	push   edi
c000a128:	56                   	push   esi
c000a129:	53                   	push   ebx
c000a12a:	83 ec 1c             	sub    esp,0x1c
c000a12d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a131:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a135:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a139:	e8 88 f2 ff ff       	call   c00093c6 <Virt::allocateSwapfilePage()>
c000a13e:	8b 0d cc f8 01 c0    	mov    ecx,DWORD PTR ds:0xc001f8cc
c000a144:	89 c7                	mov    edi,eax
c000a146:	85 c9                	test   ecx,ecx
c000a148:	7e 3e                	jle    c000a188 <VAS::evict(unsigned long)+0x62>
c000a14a:	89 ee                	mov    esi,ebp
c000a14c:	31 db                	xor    ebx,ebx
c000a14e:	83 ec 0c             	sub    esp,0xc
c000a151:	57                   	push   edi
c000a152:	e8 5d f2 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a157:	89 34 24             	mov    DWORD PTR [esp],esi
c000a15a:	01 d8                	add    eax,ebx
c000a15c:	6a 01                	push   0x1
c000a15e:	31 d2                	xor    edx,edx
c000a160:	43                   	inc    ebx
c000a161:	52                   	push   edx
c000a162:	81 c6 00 02 00 00    	add    esi,0x200
c000a168:	50                   	push   eax
c000a169:	0f be 05 d8 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f8d8
c000a170:	8b 14 85 1c 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbce4]
c000a177:	52                   	push   edx
c000a178:	e8 0b 2c 00 00       	call   c000cd88 <LogicalDisk::write(unsigned long long, int, void*)>
c000a17d:	83 c4 20             	add    esp,0x20
c000a180:	39 1d cc f8 01 c0    	cmp    DWORD PTR ds:0xc001f8cc,ebx
c000a186:	7f c6                	jg     c000a14e <VAS::evict(unsigned long)+0x28>
c000a188:	83 ec 08             	sub    esp,0x8
c000a18b:	c1 e7 0b             	shl    edi,0xb
c000a18e:	55                   	push   ebp
c000a18f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a193:	50                   	push   eax
c000a194:	e8 c1 f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a199:	8b 10                	mov    edx,DWORD PTR [eax]
c000a19b:	89 d1                	mov    ecx,edx
c000a19d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a1a3:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a1a9:	09 cf                	or     edi,ecx
c000a1ab:	89 38                	mov    DWORD PTR [eax],edi
c000a1ad:	89 14 24             	mov    DWORD PTR [esp],edx
c000a1b0:	ff 05 a8 1f 02 c0    	inc    DWORD PTR ds:0xc0021fa8
c000a1b6:	e8 78 d8 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a1bb:	0f 20 d8             	mov    eax,cr3
c000a1be:	0f 22 d8             	mov    cr3,eax
c000a1c1:	a1 a4 1f 02 c0       	mov    eax,ds:0xc0021fa4
c000a1c6:	c7 44 24 40 35 dc 01 c0 	mov    DWORD PTR [esp+0x40],0xc001dc35
c000a1ce:	8d 50 01             	lea    edx,[eax+0x1]
c000a1d1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a1d5:	89 15 a4 1f 02 c0    	mov    DWORD PTR ds:0xc0021fa4,edx
c000a1db:	83 c4 2c             	add    esp,0x2c
c000a1de:	5b                   	pop    ebx
c000a1df:	5e                   	pop    esi
c000a1e0:	5f                   	pop    edi
c000a1e1:	5d                   	pop    ebp
c000a1e2:	e9 0d 04 00 00       	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)>
c000a1e7:	90                   	nop

c000a1e8 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a1e8:	55                   	push   ebp
c000a1e9:	57                   	push   edi
c000a1ea:	56                   	push   esi
c000a1eb:	53                   	push   ebx
c000a1ec:	83 ec 14             	sub    esp,0x14
c000a1ef:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a1f3:	53                   	push   ebx
c000a1f4:	68 46 dc 01 c0       	push   0xc001dc46
c000a1f9:	e8 f6 03 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a207:	74 21                	je     c000a22a <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a209:	83 ec 08             	sub    esp,0x8
c000a20c:	53                   	push   ebx
c000a20d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a211:	57                   	push   edi
c000a212:	e8 43 f3 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a217:	83 c4 10             	add    esp,0x10
c000a21a:	89 c6                	mov    esi,eax
c000a21c:	85 c0                	test   eax,eax
c000a21e:	74 0a                	je     c000a22a <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a220:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a222:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a228:	74 0a                	je     c000a234 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a22a:	31 c0                	xor    eax,eax
c000a22c:	83 c4 0c             	add    esp,0xc
c000a22f:	5b                   	pop    ebx
c000a230:	5e                   	pop    esi
c000a231:	5f                   	pop    edi
c000a232:	5d                   	pop    ebp
c000a233:	c3                   	ret    
c000a234:	e8 5c d8 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a239:	c1 ed 0b             	shr    ebp,0xb
c000a23c:	8b 16                	mov    edx,DWORD PTR [esi]
c000a23e:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a244:	09 c2                	or     edx,eax
c000a246:	81 ca 01 08 00 00    	or     edx,0x801
c000a24c:	89 16                	mov    DWORD PTR [esi],edx
c000a24e:	8b 35 cc f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f8cc
c000a254:	85 f6                	test   esi,esi
c000a256:	7e 3e                	jle    c000a296 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a258:	89 df                	mov    edi,ebx
c000a25a:	31 f6                	xor    esi,esi
c000a25c:	83 ec 0c             	sub    esp,0xc
c000a25f:	55                   	push   ebp
c000a260:	e8 4f f1 ff ff       	call   c00093b4 <Virt::swapIDToSector(unsigned long)>
c000a265:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a268:	01 f0                	add    eax,esi
c000a26a:	6a 01                	push   0x1
c000a26c:	31 d2                	xor    edx,edx
c000a26e:	46                   	inc    esi
c000a26f:	52                   	push   edx
c000a270:	81 c7 00 02 00 00    	add    edi,0x200
c000a276:	50                   	push   eax
c000a277:	0f be 05 d8 f8 01 c0 	movsx  eax,BYTE PTR ds:0xc001f8d8
c000a27e:	8b 0c 85 1c 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbce4]
c000a285:	51                   	push   ecx
c000a286:	e8 91 2a 00 00       	call   c000cd1c <LogicalDisk::read(unsigned long long, int, void*)>
c000a28b:	83 c4 20             	add    esp,0x20
c000a28e:	39 35 cc f8 01 c0    	cmp    DWORD PTR ds:0xc001f8cc,esi
c000a294:	7f c6                	jg     c000a25c <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a296:	a1 a8 1f 02 c0       	mov    eax,ds:0xc0021fa8
c000a29b:	48                   	dec    eax
c000a29c:	52                   	push   edx
c000a29d:	a3 a8 1f 02 c0       	mov    ds:0xc0021fa8,eax
c000a2a2:	50                   	push   eax
c000a2a3:	53                   	push   ebx
c000a2a4:	68 59 dc 01 c0       	push   0xc001dc59
c000a2a9:	e8 46 03 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000a2ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a2b1:	e8 e0 f0 ff ff       	call   c0009396 <Virt::freeSwapfilePage(unsigned long)>
c000a2b6:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000a2bb:	83 c4 10             	add    esp,0x10
c000a2be:	48                   	dec    eax
c000a2bf:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000a2c4:	85 c0                	test   eax,eax
c000a2c6:	75 01                	jne    c000a2c9 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a2c8:	fb                   	sti    
c000a2c9:	0f 20 d8             	mov    eax,cr3
c000a2cc:	0f 22 d8             	mov    cr3,eax
c000a2cf:	b0 01                	mov    al,0x1
c000a2d1:	e9 56 ff ff ff       	jmp    c000a22c <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a2d6 <VAS::scanForEviction()>:
c000a2d6:	57                   	push   edi
c000a2d7:	31 ff                	xor    edi,edi
c000a2d9:	56                   	push   esi
c000a2da:	53                   	push   ebx
c000a2db:	83 ec 10             	sub    esp,0x10
c000a2de:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a2e2:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a2e5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a2eb:	75 0e                	jne    c000a2fb <VAS::scanForEviction()+0x25>
c000a2ed:	89 da                	mov    edx,ebx
c000a2ef:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a2f2:	c1 ea 16             	shr    edx,0x16
c000a2f5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a2f9:	74 4e                	je     c000a349 <VAS::scanForEviction()+0x73>
c000a2fb:	53                   	push   ebx
c000a2fc:	56                   	push   esi
c000a2fd:	e8 58 f2 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c000a302:	5a                   	pop    edx
c000a303:	8b 10                	mov    edx,DWORD PTR [eax]
c000a305:	59                   	pop    ecx
c000a306:	89 d1                	mov    ecx,edx
c000a308:	81 e1 01 08 00 00    	and    ecx,0x801
c000a30e:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a314:	74 3e                	je     c000a354 <VAS::scanForEviction()+0x7e>
c000a316:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a31c:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a322:	76 2b                	jbe    c000a34f <VAS::scanForEviction()+0x79>
c000a324:	47                   	inc    edi
c000a325:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a32c:	83 ff 03             	cmp    edi,0x3
c000a32f:	74 32                	je     c000a363 <VAS::scanForEviction()+0x8d>
c000a331:	31 db                	xor    ebx,ebx
c000a333:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a339:	75 c0                	jne    c000a2fb <VAS::scanForEviction()+0x25>
c000a33b:	89 da                	mov    edx,ebx
c000a33d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a340:	c1 ea 16             	shr    edx,0x16
c000a343:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a347:	75 b2                	jne    c000a2fb <VAS::scanForEviction()+0x25>
c000a349:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a34f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a352:	eb 91                	jmp    c000a2e5 <VAS::scanForEviction()+0xf>
c000a354:	f6 c2 20             	test   dl,0x20
c000a357:	74 13                	je     c000a36c <VAS::scanForEviction()+0x96>
c000a359:	83 e2 df             	and    edx,0xffffffdf
c000a35c:	89 10                	mov    DWORD PTR [eax],edx
c000a35e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a361:	eb b3                	jmp    c000a316 <VAS::scanForEviction()+0x40>
c000a363:	83 c4 10             	add    esp,0x10
c000a366:	31 c0                	xor    eax,eax
c000a368:	5b                   	pop    ebx
c000a369:	5e                   	pop    esi
c000a36a:	5f                   	pop    edi
c000a36b:	c3                   	ret    
c000a36c:	83 ec 08             	sub    esp,0x8
c000a36f:	89 d0                	mov    eax,edx
c000a371:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a376:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a37a:	53                   	push   ebx
c000a37b:	68 6e dc 01 c0       	push   0xc001dc6e
c000a380:	e8 6f 02 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000a385:	58                   	pop    eax
c000a386:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a389:	5a                   	pop    edx
c000a38a:	51                   	push   ecx
c000a38b:	56                   	push   esi
c000a38c:	e8 95 fd ff ff       	call   c000a126 <VAS::evict(unsigned long)>
c000a391:	5b                   	pop    ebx
c000a392:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a395:	5f                   	pop    edi
c000a396:	50                   	push   eax
c000a397:	68 82 dc 01 c0       	push   0xc001dc82
c000a39c:	e8 53 02 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000a3a1:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3af:	83 c4 10             	add    esp,0x10
c000a3b2:	5b                   	pop    ebx
c000a3b3:	5e                   	pop    esi
c000a3b4:	5f                   	pop    edi
c000a3b5:	c3                   	ret    

c000a3b6 <mapVASFirstTime>:
c000a3b6:	55                   	push   ebp
c000a3b7:	57                   	push   edi
c000a3b8:	56                   	push   esi
c000a3b9:	53                   	push   ebx
c000a3ba:	83 ec 0c             	sub    esp,0xc
c000a3bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a3c2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a3c5:	4a                   	dec    edx
c000a3c6:	0f 84 ca 00 00 00    	je     c000a496 <mapVASFirstTime+0xe0>
c000a3cc:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a3cf:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a3d2:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a3d7:	c1 e5 15             	shl    ebp,0x15
c000a3da:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a3df:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a3e5:	29 eb                	sub    ebx,ebp
c000a3e7:	29 ef                	sub    edi,ebp
c000a3e9:	e8 a7 d6 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a3ee:	83 ec 0c             	sub    esp,0xc
c000a3f1:	68 03 04 00 00       	push   0x403
c000a3f6:	6a 01                	push   0x1
c000a3f8:	53                   	push   ebx
c000a3f9:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a3ff:	50                   	push   eax
c000a400:	56                   	push   esi
c000a401:	e8 ec f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a406:	83 c4 20             	add    esp,0x20
c000a409:	39 fb                	cmp    ebx,edi
c000a40b:	75 dc                	jne    c000a3e9 <mapVASFirstTime+0x33>
c000a40d:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a412:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a417:	29 eb                	sub    ebx,ebp
c000a419:	29 ef                	sub    edi,ebp
c000a41b:	e8 75 d6 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a420:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a424:	19 d2                	sbb    edx,edx
c000a426:	83 ec 0c             	sub    esp,0xc
c000a429:	83 e2 04             	and    edx,0x4
c000a42c:	81 c2 03 04 00 00    	add    edx,0x403
c000a432:	52                   	push   edx
c000a433:	6a 01                	push   0x1
c000a435:	53                   	push   ebx
c000a436:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a43c:	50                   	push   eax
c000a43d:	56                   	push   esi
c000a43e:	e8 af f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a443:	83 c4 20             	add    esp,0x20
c000a446:	39 df                	cmp    edi,ebx
c000a448:	75 d1                	jne    c000a41b <mapVASFirstTime+0x65>
c000a44a:	bb 7c 10 02 c0       	mov    ebx,0xc002107c
c000a44f:	81 eb 00 00 02 c0    	sub    ebx,0xc0020000
c000a455:	c1 eb 0c             	shr    ebx,0xc
c000a458:	53                   	push   ebx
c000a459:	68 7d 00 02 c0       	push   0xc002007d
c000a45e:	68 00 00 02 c0       	push   0xc0020000
c000a463:	68 64 db 01 c0       	push   0xc001db64
c000a468:	e8 87 01 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000a46d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c000a474:	53                   	push   ebx
c000a475:	68 00 00 02 c0       	push   0xc0020000
c000a47a:	68 00 00 02 c0       	push   0xc0020000
c000a47f:	56                   	push   esi
c000a480:	e8 6d f7 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a485:	0f 20 d8             	mov    eax,cr3
c000a488:	0f 22 d8             	mov    cr3,eax
c000a48b:	83 c4 20             	add    esp,0x20
c000a48e:	83 c4 0c             	add    esp,0xc
c000a491:	5b                   	pop    ebx
c000a492:	5e                   	pop    esi
c000a493:	5f                   	pop    edi
c000a494:	5d                   	pop    ebp
c000a495:	c3                   	ret    
c000a496:	83 ec 0c             	sub    esp,0xc
c000a499:	68 95 dc 01 c0       	push   0xc001dc95
c000a49e:	e8 51 01 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000a4a3:	83 c4 10             	add    esp,0x10
c000a4a6:	83 c4 0c             	add    esp,0xc
c000a4a9:	5b                   	pop    ebx
c000a4aa:	5e                   	pop    esi
c000a4ab:	5f                   	pop    edi
c000a4ac:	5d                   	pop    ebp
c000a4ad:	c3                   	ret    

c000a4ae <__cxa_atexit>:
c000a4ae:	31 c0                	xor    eax,eax
c000a4b0:	c3                   	ret    

c000a4b1 <__cxa_finalize>:
c000a4b1:	c3                   	ret    

c000a4b2 <__stack_chk_fail>:
c000a4b2:	55                   	push   ebp
c000a4b3:	89 e5                	mov    ebp,esp
c000a4b5:	83 ec 10             	sub    esp,0x10
c000a4b8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a4bb:	68 ae dc 01 c0       	push   0xc001dcae
c000a4c0:	e8 2f 01 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000a4c5:	58                   	pop    eax
c000a4c6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a4c9:	5a                   	pop    edx
c000a4ca:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a4cd:	68 ae dc 01 c0       	push   0xc001dcae
c000a4d2:	e8 1d 01 00 00       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000a4d7:	c7 04 24 b6 dc 01 c0 	mov    DWORD PTR [esp],0xc001dcb6
c000a4de:	e8 94 5d 00 00       	call   c0010277 <KePanic(char const*)>
c000a4e3:	83 c4 10             	add    esp,0x10
c000a4e6:	c9                   	leave  
c000a4e7:	c3                   	ret    

c000a4e8 <__cxa_pure_virtual>:
c000a4e8:	83 ec 18             	sub    esp,0x18
c000a4eb:	68 ce dc 01 c0       	push   0xc001dcce
c000a4f0:	e8 82 5d 00 00       	call   c0010277 <KePanic(char const*)>
c000a4f5:	83 c4 1c             	add    esp,0x1c
c000a4f8:	c3                   	ret    

c000a4f9 <operator new[](unsigned long)>:
c000a4f9:	e9 bb d2 ff ff       	jmp    c00077b9 <malloc>

c000a4fe <operator delete(void*, unsigned long)>:
c000a4fe:	e9 d6 d2 ff ff       	jmp    c00077d9 <rfree>

c000a503 <operator delete[](void*)>:
c000a503:	e9 d1 d2 ff ff       	jmp    c00077d9 <rfree>

c000a508 <operator delete[](void*, unsigned long)>:
c000a508:	e9 cc d2 ff ff       	jmp    c00077d9 <rfree>

c000a50d <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a50d:	55                   	push   ebp
c000a50e:	b9 04 00 00 00       	mov    ecx,0x4
c000a513:	57                   	push   edi
c000a514:	56                   	push   esi
c000a515:	be 93 d8 01 c0       	mov    esi,0xc001d893
c000a51a:	53                   	push   ebx
c000a51b:	83 ec 20             	sub    esp,0x20
c000a51e:	a1 92 d8 01 c0       	mov    eax,ds:0xc001d892
c000a523:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a527:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a52b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a52f:	a1 9f d8 01 c0       	mov    eax,ds:0xc001d89f
c000a534:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a538:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a53c:	fc                   	cld    
c000a53d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a53f:	89 ee                	mov    esi,ebp
c000a541:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a545:	eb 02                	jmp    c000a549 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a547:	89 c6                	mov    esi,eax
c000a549:	31 d2                	xor    edx,edx
c000a54b:	41                   	inc    ecx
c000a54c:	89 f0                	mov    eax,esi
c000a54e:	f7 f3                	div    ebx
c000a550:	39 de                	cmp    esi,ebx
c000a552:	73 f3                	jae    c000a547 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a554:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a557:	eb 02                	jmp    c000a55b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a559:	89 c5                	mov    ebp,eax
c000a55b:	31 d2                	xor    edx,edx
c000a55d:	49                   	dec    ecx
c000a55e:	89 e8                	mov    eax,ebp
c000a560:	f7 f3                	div    ebx
c000a562:	39 dd                	cmp    ebp,ebx
c000a564:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a568:	88 11                	mov    BYTE PTR [ecx],dl
c000a56a:	73 ed                	jae    c000a559 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a570:	83 c4 20             	add    esp,0x20
c000a573:	5b                   	pop    ebx
c000a574:	5e                   	pop    esi
c000a575:	5f                   	pop    edi
c000a576:	5d                   	pop    ebp
c000a577:	c3                   	ret    

c000a578 <Dbg::logc(char)>:
c000a578:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a57c:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a583:	75 12                	jne    c000a597 <Dbg::logc(char)+0x1f>
c000a585:	ba fd 03 00 00       	mov    edx,0x3fd
c000a58a:	ec                   	in     al,dx
c000a58b:	a8 20                	test   al,0x20
c000a58d:	74 fb                	je     c000a58a <Dbg::logc(char)+0x12>
c000a58f:	ba f8 03 00 00       	mov    edx,0x3f8
c000a594:	88 c8                	mov    al,cl
c000a596:	ee                   	out    dx,al
c000a597:	c3                   	ret    

c000a598 <Dbg::logs(char*)>:
c000a598:	53                   	push   ebx
c000a599:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a59d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5a0:	84 c0                	test   al,al
c000a5a2:	74 0f                	je     c000a5b3 <Dbg::logs(char*)+0x1b>
c000a5a4:	50                   	push   eax
c000a5a5:	43                   	inc    ebx
c000a5a6:	e8 cd ff ff ff       	call   c000a578 <Dbg::logc(char)>
c000a5ab:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a5ae:	5a                   	pop    edx
c000a5af:	84 c0                	test   al,al
c000a5b1:	75 f1                	jne    c000a5a4 <Dbg::logs(char*)+0xc>
c000a5b3:	5b                   	pop    ebx
c000a5b4:	c3                   	ret    

c000a5b5 <Dbg::logWriteInt(unsigned int)>:
c000a5b5:	83 ec 10             	sub    esp,0x10
c000a5b8:	6a 0a                	push   0xa
c000a5ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5be:	50                   	push   eax
c000a5bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a5c3:	50                   	push   eax
c000a5c4:	e8 44 ff ff ff       	call   c000a50d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5c9:	50                   	push   eax
c000a5ca:	e8 c9 ff ff ff       	call   c000a598 <Dbg::logs(char*)>
c000a5cf:	83 c4 20             	add    esp,0x20
c000a5d2:	c3                   	ret    

c000a5d3 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a5d3:	83 ec 10             	sub    esp,0x10
c000a5d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a5da:	50                   	push   eax
c000a5db:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a5df:	50                   	push   eax
c000a5e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a5e4:	52                   	push   edx
c000a5e5:	e8 23 ff ff ff       	call   c000a50d <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a5ea:	50                   	push   eax
c000a5eb:	e8 a8 ff ff ff       	call   c000a598 <Dbg::logs(char*)>
c000a5f0:	83 c4 20             	add    esp,0x20
c000a5f3:	c3                   	ret    

c000a5f4 <Dbg::kprintf(char const*, ...)>:
c000a5f4:	55                   	push   ebp
c000a5f5:	57                   	push   edi
c000a5f6:	56                   	push   esi
c000a5f7:	53                   	push   ebx
c000a5f8:	83 ec 0c             	sub    esp,0xc
c000a5fb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a5ff:	f6 05 d0 1e 02 c0 10 	test   BYTE PTR ds:0xc0021ed0,0x10
c000a606:	74 08                	je     c000a610 <Dbg::kprintf(char const*, ...)+0x1c>
c000a608:	83 c4 0c             	add    esp,0xc
c000a60b:	5b                   	pop    ebx
c000a60c:	5e                   	pop    esi
c000a60d:	5f                   	pop    edi
c000a60e:	5d                   	pop    ebp
c000a60f:	c3                   	ret    
c000a610:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a614:	31 ff                	xor    edi,edi
c000a616:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a61a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a61d:	84 c0                	test   al,al
c000a61f:	74 e7                	je     c000a608 <Dbg::kprintf(char const*, ...)+0x14>
c000a621:	8d 77 01             	lea    esi,[edi+0x1]
c000a624:	3c 25                	cmp    al,0x25
c000a626:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a629:	75 47                	jne    c000a672 <Dbg::kprintf(char const*, ...)+0x7e>
c000a62b:	83 c7 02             	add    edi,0x2
c000a62e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a631:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a634:	83 e8 25             	sub    eax,0x25
c000a637:	3c 53                	cmp    al,0x53
c000a639:	0f 87 d2 00 00 00    	ja     c000a711 <Dbg::kprintf(char const*, ...)+0x11d>
c000a63f:	25 ff 00 00 00       	and    eax,0xff
c000a644:	ff 24 85 e4 dc 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe231c]
c000a64b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a64f:	89 c8                	mov    eax,ecx
c000a651:	83 c1 04             	add    ecx,0x4
c000a654:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a658:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a65a:	55                   	push   ebp
c000a65b:	e8 55 ff ff ff       	call   c000a5b5 <Dbg::logWriteInt(unsigned int)>
c000a660:	58                   	pop    eax
c000a661:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a664:	84 c0                	test   al,al
c000a666:	74 a0                	je     c000a608 <Dbg::kprintf(char const*, ...)+0x14>
c000a668:	8d 77 01             	lea    esi,[edi+0x1]
c000a66b:	3c 25                	cmp    al,0x25
c000a66d:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a670:	74 b9                	je     c000a62b <Dbg::kprintf(char const*, ...)+0x37>
c000a672:	50                   	push   eax
c000a673:	89 f7                	mov    edi,esi
c000a675:	e8 fe fe ff ff       	call   c000a578 <Dbg::logc(char)>
c000a67a:	89 ee                	mov    esi,ebp
c000a67c:	58                   	pop    eax
c000a67d:	eb e2                	jmp    c000a661 <Dbg::kprintf(char const*, ...)+0x6d>
c000a67f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a683:	89 c8                	mov    eax,ecx
c000a685:	83 c1 04             	add    ecx,0x4
c000a688:	8b 00                	mov    eax,DWORD PTR [eax]
c000a68a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a68e:	50                   	push   eax
c000a68f:	e8 04 ff ff ff       	call   c000a598 <Dbg::logs(char*)>
c000a694:	58                   	pop    eax
c000a695:	eb ca                	jmp    c000a661 <Dbg::kprintf(char const*, ...)+0x6d>
c000a697:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a69b:	89 d0                	mov    eax,edx
c000a69d:	83 c2 04             	add    edx,0x4
c000a6a0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6a6:	50                   	push   eax
c000a6a7:	e8 09 ff ff ff       	call   c000a5b5 <Dbg::logWriteInt(unsigned int)>
c000a6ac:	58                   	pop    eax
c000a6ad:	eb b2                	jmp    c000a661 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6b3:	89 d0                	mov    eax,edx
c000a6b5:	83 c2 04             	add    edx,0x4
c000a6b8:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a6bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6bf:	50                   	push   eax
c000a6c0:	e8 b3 fe ff ff       	call   c000a578 <Dbg::logc(char)>
c000a6c5:	58                   	pop    eax
c000a6c6:	eb 99                	jmp    c000a661 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6c8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6cc:	89 c8                	mov    eax,ecx
c000a6ce:	83 c1 04             	add    ecx,0x4
c000a6d1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a6d5:	6a 10                	push   0x10
c000a6d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6d9:	51                   	push   ecx
c000a6da:	e8 f4 fe ff ff       	call   c000a5d3 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6df:	5d                   	pop    ebp
c000a6e0:	58                   	pop    eax
c000a6e1:	e9 7b ff ff ff       	jmp    c000a661 <Dbg::kprintf(char const*, ...)+0x6d>
c000a6e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a6ea:	89 d0                	mov    eax,edx
c000a6ec:	83 c2 08             	add    edx,0x8
c000a6ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a6f3:	6a 10                	push   0x10
c000a6f5:	8b 00                	mov    eax,DWORD PTR [eax]
c000a6f7:	50                   	push   eax
c000a6f8:	e8 d6 fe ff ff       	call   c000a5d3 <Dbg::logWriteIntBase(unsigned int, int)>
c000a6fd:	58                   	pop    eax
c000a6fe:	5a                   	pop    edx
c000a6ff:	e9 5d ff ff ff       	jmp    c000a661 <Dbg::kprintf(char const*, ...)+0x6d>
c000a704:	6a 25                	push   0x25
c000a706:	e8 6d fe ff ff       	call   c000a578 <Dbg::logc(char)>
c000a70b:	5a                   	pop    edx
c000a70c:	e9 50 ff ff ff       	jmp    c000a661 <Dbg::kprintf(char const*, ...)+0x6d>
c000a711:	6a 25                	push   0x25
c000a713:	e8 60 fe ff ff       	call   c000a578 <Dbg::logc(char)>
c000a718:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a71c:	50                   	push   eax
c000a71d:	e8 56 fe ff ff       	call   c000a578 <Dbg::logc(char)>
c000a722:	5a                   	pop    edx
c000a723:	59                   	pop    ecx
c000a724:	e9 38 ff ff ff       	jmp    c000a661 <Dbg::kprintf(char const*, ...)+0x6d>
c000a729:	90                   	nop

c000a72a <File::read(unsigned long long, void*, int*)>:
c000a72a:	53                   	push   ebx
c000a72b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a72f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a733:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a73a:	3c 19                	cmp    al,0x19
c000a73c:	77 35                	ja     c000a773 <File::read(unsigned long long, void*, int*)+0x49>
c000a73e:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a745:	85 c0                	test   eax,eax
c000a747:	74 2a                	je     c000a773 <File::read(unsigned long long, void*, int*)+0x49>
c000a749:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a74f:	85 c0                	test   eax,eax
c000a751:	74 20                	je     c000a773 <File::read(unsigned long long, void*, int*)+0x49>
c000a753:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a757:	74 21                	je     c000a77a <File::read(unsigned long long, void*, int*)+0x50>
c000a759:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a75b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a75f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a765:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a769:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a76d:	5b                   	pop    ebx
c000a76e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a771:	ff e0                	jmp    eax
c000a773:	b8 0b 00 00 00       	mov    eax,0xb
c000a778:	eb 05                	jmp    c000a77f <File::read(unsigned long long, void*, int*)+0x55>
c000a77a:	b8 05 00 00 00       	mov    eax,0x5
c000a77f:	5b                   	pop    ebx
c000a780:	c3                   	ret    
c000a781:	90                   	nop

c000a782 <File::write(unsigned long long, void*, int*)>:
c000a782:	53                   	push   ebx
c000a783:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a787:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a78b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a792:	3c 19                	cmp    al,0x19
c000a794:	77 35                	ja     c000a7cb <File::write(unsigned long long, void*, int*)+0x49>
c000a796:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a79d:	85 c0                	test   eax,eax
c000a79f:	74 2a                	je     c000a7cb <File::write(unsigned long long, void*, int*)+0x49>
c000a7a1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a7a7:	85 c0                	test   eax,eax
c000a7a9:	74 20                	je     c000a7cb <File::write(unsigned long long, void*, int*)+0x49>
c000a7ab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a7af:	74 21                	je     c000a7d2 <File::write(unsigned long long, void*, int*)+0x50>
c000a7b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a7b3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a7b7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a7bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a7c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a7c5:	5b                   	pop    ebx
c000a7c6:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a7c9:	ff e0                	jmp    eax
c000a7cb:	b8 0b 00 00 00       	mov    eax,0xb
c000a7d0:	eb 05                	jmp    c000a7d7 <File::write(unsigned long long, void*, int*)+0x55>
c000a7d2:	b8 05 00 00 00       	mov    eax,0x5
c000a7d7:	5b                   	pop    ebx
c000a7d8:	c3                   	ret    
c000a7d9:	90                   	nop

c000a7da <Directory::read(unsigned long long, void*, int*)>:
c000a7da:	53                   	push   ebx
c000a7db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a7df:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a7e3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a7ea:	3c 19                	cmp    al,0x19
c000a7ec:	77 35                	ja     c000a823 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a7ee:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000a7f5:	85 c0                	test   eax,eax
c000a7f7:	74 2a                	je     c000a823 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a7f9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a7ff:	85 c0                	test   eax,eax
c000a801:	74 20                	je     c000a823 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a803:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a807:	74 21                	je     c000a82a <Directory::read(unsigned long long, void*, int*)+0x50>
c000a809:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a80b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a80f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a815:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a81d:	5b                   	pop    ebx
c000a81e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a821:	ff e0                	jmp    eax
c000a823:	b8 0b 00 00 00       	mov    eax,0xb
c000a828:	eb 05                	jmp    c000a82f <Directory::read(unsigned long long, void*, int*)+0x55>
c000a82a:	b8 05 00 00 00       	mov    eax,0x5
c000a82f:	5b                   	pop    ebx
c000a830:	c3                   	ret    
c000a831:	90                   	nop

c000a832 <Directory::write(unsigned long long, void*, int*)>:
c000a832:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a836:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a83d:	b8 0b 00 00 00       	mov    eax,0xb
c000a842:	80 fa 19             	cmp    dl,0x19
c000a845:	77 18                	ja     c000a85f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a847:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000a84e:	85 d2                	test   edx,edx
c000a850:	74 0d                	je     c000a85f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a852:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a859:	19 c0                	sbb    eax,eax
c000a85b:	83 e0 0a             	and    eax,0xa
c000a85e:	40                   	inc    eax
c000a85f:	c3                   	ret    

c000a860 <File::isAtty()>:
c000a860:	31 c0                	xor    eax,eax
c000a862:	c3                   	ret    
c000a863:	90                   	nop

c000a864 <Directory::isAtty()>:
c000a864:	31 c0                	xor    eax,eax
c000a866:	c3                   	ret    
c000a867:	90                   	nop

c000a868 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a868:	b8 0a 00 00 00       	mov    eax,0xa
c000a86d:	c3                   	ret    

c000a86e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a86e:	b8 0a 00 00 00       	mov    eax,0xa
c000a873:	c3                   	ret    

c000a874 <Filesystem::allocateSwapfile(char const*, int)>:
c000a874:	31 c0                	xor    eax,eax
c000a876:	31 d2                	xor    edx,edx
c000a878:	c3                   	ret    
c000a879:	90                   	nop

c000a87a <File::~File()>:
c000a87a:	83 ec 0c             	sub    esp,0xc
c000a87d:	ba a4 de 01 c0       	mov    edx,0xc001dea4
c000a882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a886:	89 10                	mov    DWORD PTR [eax],edx
c000a888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a88c:	83 ec 0c             	sub    esp,0xc
c000a88f:	50                   	push   eax
c000a890:	e8 8f e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a895:	83 c4 10             	add    esp,0x10
c000a898:	90                   	nop
c000a899:	83 c4 0c             	add    esp,0xc
c000a89c:	c3                   	ret    
c000a89d:	90                   	nop

c000a89e <File::~File()>:
c000a89e:	83 ec 0c             	sub    esp,0xc
c000a8a1:	83 ec 0c             	sub    esp,0xc
c000a8a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8a8:	e8 cd ff ff ff       	call   c000a87a <File::~File()>
c000a8ad:	83 c4 10             	add    esp,0x10
c000a8b0:	83 ec 08             	sub    esp,0x8
c000a8b3:	68 14 01 00 00       	push   0x114
c000a8b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8bc:	e8 3d fc ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000a8c1:	83 c4 10             	add    esp,0x10
c000a8c4:	83 c4 0c             	add    esp,0xc
c000a8c7:	c3                   	ret    

c000a8c8 <Directory::~Directory()>:
c000a8c8:	83 ec 0c             	sub    esp,0xc
c000a8cb:	ba c0 de 01 c0       	mov    edx,0xc001dec0
c000a8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8d4:	89 10                	mov    DWORD PTR [eax],edx
c000a8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a8da:	83 ec 0c             	sub    esp,0xc
c000a8dd:	50                   	push   eax
c000a8de:	e8 41 e7 ff ff       	call   c0009024 <UnixFile::~UnixFile()>
c000a8e3:	83 c4 10             	add    esp,0x10
c000a8e6:	90                   	nop
c000a8e7:	83 c4 0c             	add    esp,0xc
c000a8ea:	c3                   	ret    
c000a8eb:	90                   	nop

c000a8ec <Directory::~Directory()>:
c000a8ec:	83 ec 0c             	sub    esp,0xc
c000a8ef:	83 ec 0c             	sub    esp,0xc
c000a8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f6:	e8 cd ff ff ff       	call   c000a8c8 <Directory::~Directory()>
c000a8fb:	83 c4 10             	add    esp,0x10
c000a8fe:	83 ec 08             	sub    esp,0x8
c000a901:	68 14 01 00 00       	push   0x114
c000a906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a90a:	e8 ef fb ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000a90f:	83 c4 10             	add    esp,0x10
c000a912:	83 c4 0c             	add    esp,0xc
c000a915:	c3                   	ret    

c000a916 <Filesystem::Filesystem()>:
c000a916:	ba 3c de 01 c0       	mov    edx,0xc001de3c
c000a91b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a91f:	89 10                	mov    DWORD PTR [eax],edx
c000a921:	8b 15 b4 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021fb4
c000a927:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a92b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a932:	a3 b4 1f 02 c0       	mov    ds:0xc0021fb4,eax
c000a937:	90                   	nop
c000a938:	c3                   	ret    
c000a939:	90                   	nop

c000a93a <Filesystem::~Filesystem()>:
c000a93a:	ba 3c de 01 c0       	mov    edx,0xc001de3c
c000a93f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a943:	89 10                	mov    DWORD PTR [eax],edx
c000a945:	90                   	nop
c000a946:	c3                   	ret    
c000a947:	90                   	nop

c000a948 <Filesystem::~Filesystem()>:
c000a948:	83 ec 0c             	sub    esp,0xc
c000a94b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a94f:	e8 e6 ff ff ff       	call   c000a93a <Filesystem::~Filesystem()>
c000a954:	83 c4 04             	add    esp,0x4
c000a957:	83 ec 08             	sub    esp,0x8
c000a95a:	6a 08                	push   0x8
c000a95c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a960:	e8 99 fb ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000a965:	83 c4 10             	add    esp,0x10
c000a968:	83 c4 0c             	add    esp,0xc
c000a96b:	c3                   	ret    

c000a96c <Fs::getcwd(Process*, char*, int)>:
c000a96c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a970:	31 c0                	xor    eax,eax
c000a972:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a975:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a979:	7d 15                	jge    c000a990 <Fs::getcwd(Process*, char*, int)+0x24>
c000a97b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a97f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a986:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a989:	84 c9                	test   cl,cl
c000a98b:	74 06                	je     c000a993 <Fs::getcwd(Process*, char*, int)+0x27>
c000a98d:	40                   	inc    eax
c000a98e:	eb e2                	jmp    c000a972 <Fs::getcwd(Process*, char*, int)+0x6>
c000a990:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a993:	31 c0                	xor    eax,eax
c000a995:	c3                   	ret    

c000a996 <Fs::initVFS()>:
c000a996:	83 ec 18             	sub    esp,0x18
c000a999:	6a 08                	push   0x8
c000a99b:	e8 19 ce ff ff       	call   c00077b9 <malloc>
c000a9a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9a3:	e8 e0 c7 00 00       	call   c0017188 <FAT::FAT()>
c000a9a8:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a9af:	e8 05 ce ff ff       	call   c00077b9 <malloc>
c000a9b4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9b7:	e8 28 d5 00 00       	call   c0017ee4 <ISO9660::ISO9660()>
c000a9bc:	83 c4 1c             	add    esp,0x1c
c000a9bf:	c3                   	ret    

c000a9c0 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a9c0:	55                   	push   ebp
c000a9c1:	57                   	push   edi
c000a9c2:	56                   	push   esi
c000a9c3:	53                   	push   ebx
c000a9c4:	81 ec 10 04 00 00    	sub    esp,0x410
c000a9ca:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a9d1:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a9d8:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a9df:	68 00 04 00 00       	push   0x400
c000a9e4:	6a 00                	push   0x0
c000a9e6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a9ea:	56                   	push   esi
c000a9eb:	e8 e0 5a ff ff       	call   c00004d0 <memset>
c000a9f0:	83 c4 10             	add    esp,0x10
c000a9f3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a9f7:	75 0b                	jne    c000aa04 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a9f9:	50                   	push   eax
c000a9fa:	50                   	push   eax
c000a9fb:	57                   	push   edi
c000a9fc:	56                   	push   esi
c000a9fd:	e8 fe 5b ff ff       	call   c0000600 <strcpy>
c000aa02:	eb 41                	jmp    c000aa45 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000aa04:	8a 07                	mov    al,BYTE PTR [edi]
c000aa06:	3c 5c                	cmp    al,0x5c
c000aa08:	74 04                	je     c000aa0e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000aa0a:	3c 2f                	cmp    al,0x2f
c000aa0c:	75 18                	jne    c000aa26 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000aa0e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000aa11:	3c 60                	cmp    al,0x60
c000aa13:	7e 03                	jle    c000aa18 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000aa15:	83 e8 20             	sub    eax,0x20
c000aa18:	88 04 24             	mov    BYTE PTR [esp],al
c000aa1b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa22:	50                   	push   eax
c000aa23:	50                   	push   eax
c000aa24:	eb 18                	jmp    c000aa3e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000aa26:	50                   	push   eax
c000aa27:	50                   	push   eax
c000aa28:	55                   	push   ebp
c000aa29:	56                   	push   esi
c000aa2a:	e8 d1 5b ff ff       	call   c0000600 <strcpy>
c000aa2f:	5a                   	pop    edx
c000aa30:	59                   	pop    ecx
c000aa31:	68 5a ec 01 c0       	push   0xc001ec5a
c000aa36:	56                   	push   esi
c000aa37:	e8 84 5d ff ff       	call   c00007c0 <strcat>
c000aa3c:	5d                   	pop    ebp
c000aa3d:	58                   	pop    eax
c000aa3e:	57                   	push   edi
c000aa3f:	56                   	push   esi
c000aa40:	e8 7b 5d ff ff       	call   c00007c0 <strcat>
c000aa45:	83 c4 10             	add    esp,0x10
c000aa48:	8a 04 24             	mov    al,BYTE PTR [esp]
c000aa4b:	3c 60                	cmp    al,0x60
c000aa4d:	7e 03                	jle    c000aa52 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000aa4f:	83 e8 20             	sub    eax,0x20
c000aa52:	88 04 24             	mov    BYTE PTR [esp],al
c000aa55:	88 03                	mov    BYTE PTR [ebx],al
c000aa57:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000aa5e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000aa64:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000aa68:	bf 03 00 00 00       	mov    edi,0x3
c000aa6d:	b8 03 00 00 00       	mov    eax,0x3
c000aa72:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aa75:	84 d2                	test   dl,dl
c000aa77:	0f 84 91 00 00 00    	je     c000ab0e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000aa7d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000aa80:	80 fa 5c             	cmp    dl,0x5c
c000aa83:	74 05                	je     c000aa8a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000aa85:	80 fa 2f             	cmp    dl,0x2f
c000aa88:	75 12                	jne    c000aa9c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa8a:	89 c5                	mov    ebp,eax
c000aa8c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa91:	74 09                	je     c000aa9c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000aa93:	40                   	inc    eax
c000aa94:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000aa98:	89 cf                	mov    edi,ecx
c000aa9a:	eb d6                	jmp    c000aa72 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000aa9c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000aaa1:	75 5b                	jne    c000aafe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aaa3:	80 fa 2e             	cmp    dl,0x2e
c000aaa6:	75 56                	jne    c000aafe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000aaa8:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000aaac:	74 19                	je     c000aac7 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000aaae:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aab3:	74 53                	je     c000ab08 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aab5:	89 f9                	mov    ecx,edi
c000aab7:	41                   	inc    ecx
c000aab8:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aabb:	80 fa 2f             	cmp    dl,0x2f
c000aabe:	74 f7                	je     c000aab7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aac0:	80 fa 5c             	cmp    dl,0x5c
c000aac3:	74 f2                	je     c000aab7 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000aac5:	eb d1                	jmp    c000aa98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aac7:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000aacc:	74 3a                	je     c000ab08 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000aace:	83 f8 03             	cmp    eax,0x3
c000aad1:	74 c5                	je     c000aa98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aad3:	41                   	inc    ecx
c000aad4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000aad7:	80 fa 2f             	cmp    dl,0x2f
c000aada:	74 f7                	je     c000aad3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aadc:	80 fa 5c             	cmp    dl,0x5c
c000aadf:	74 f2                	je     c000aad3 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000aae1:	48                   	dec    eax
c000aae2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aae6:	75 06                	jne    c000aaee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aae8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aaec:	eb f3                	jmp    c000aae1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000aaee:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000aaf2:	74 07                	je     c000aafb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000aaf4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000aaf8:	48                   	dec    eax
c000aaf9:	eb f3                	jmp    c000aaee <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000aafb:	40                   	inc    eax
c000aafc:	eb 9a                	jmp    c000aa98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000aafe:	80 fa 2f             	cmp    dl,0x2f
c000ab01:	74 95                	je     c000aa98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab03:	80 fa 5c             	cmp    dl,0x5c
c000ab06:	74 90                	je     c000aa98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab08:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ab0b:	40                   	inc    eax
c000ab0c:	eb 8a                	jmp    c000aa98 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ab0e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ab12:	83 ec 0c             	sub    esp,0xc
c000ab15:	53                   	push   ebx
c000ab16:	e8 25 5a ff ff       	call   c0000540 <strlen>
c000ab1b:	83 c4 10             	add    esp,0x10
c000ab1e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ab23:	75 26                	jne    c000ab4b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ab25:	83 ec 0c             	sub    esp,0xc
c000ab28:	53                   	push   ebx
c000ab29:	e8 12 5a ff ff       	call   c0000540 <strlen>
c000ab2e:	83 c4 10             	add    esp,0x10
c000ab31:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ab36:	74 26                	je     c000ab5e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ab38:	83 ec 0c             	sub    esp,0xc
c000ab3b:	53                   	push   ebx
c000ab3c:	e8 ff 59 ff ff       	call   c0000540 <strlen>
c000ab41:	83 c4 10             	add    esp,0x10
c000ab44:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ab49:	eb c7                	jmp    c000ab12 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ab4b:	83 ec 0c             	sub    esp,0xc
c000ab4e:	53                   	push   ebx
c000ab4f:	e8 ec 59 ff ff       	call   c0000540 <strlen>
c000ab54:	83 c4 10             	add    esp,0x10
c000ab57:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ab5c:	74 c7                	je     c000ab25 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ab5e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ab64:	5b                   	pop    ebx
c000ab65:	5e                   	pop    esi
c000ab66:	5f                   	pop    edi
c000ab67:	5d                   	pop    ebp
c000ab68:	c3                   	ret    
c000ab69:	90                   	nop

c000ab6a <File::File(char const*, Process*)>:
c000ab6a:	83 ec 0c             	sub    esp,0xc
c000ab6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab71:	83 ec 08             	sub    esp,0x8
c000ab74:	6a 00                	push   0x0
c000ab76:	50                   	push   eax
c000ab77:	e8 c6 e2 ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000ab7c:	83 c4 10             	add    esp,0x10
c000ab7f:	ba a4 de 01 c0       	mov    edx,0xc001dea4
c000ab84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab88:	89 10                	mov    DWORD PTR [eax],edx
c000ab8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ab8e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000ab94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab98:	83 c0 0d             	add    eax,0xd
c000ab9b:	83 ec 04             	sub    esp,0x4
c000ab9e:	52                   	push   edx
c000ab9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba3:	50                   	push   eax
c000aba4:	e8 17 fe ff ff       	call   c000a9c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000aba9:	83 c4 10             	add    esp,0x10
c000abac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abb0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000abb3:	8d 50 bf             	lea    edx,[eax-0x41]
c000abb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000abc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000abc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abcc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abd2:	25 ff 00 00 00       	and    eax,0xff
c000abd7:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000abde:	85 c0                	test   eax,eax
c000abe0:	74 42                	je     c000ac24 <File::File(char const*, Process*)+0xba>
c000abe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000abec:	25 ff 00 00 00       	and    eax,0xff
c000abf1:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000abf8:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abfe:	85 c0                	test   eax,eax
c000ac00:	75 22                	jne    c000ac24 <File::File(char const*, Process*)+0xba>
c000ac02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac06:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ac0c:	25 ff 00 00 00       	and    eax,0xff
c000ac11:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000ac18:	83 ec 0c             	sub    esp,0xc
c000ac1b:	50                   	push   eax
c000ac1c:	e8 39 20 00 00       	call   c000cc5a <LogicalDisk::mount()>
c000ac21:	83 c4 10             	add    esp,0x10
c000ac24:	90                   	nop
c000ac25:	83 c4 0c             	add    esp,0xc
c000ac28:	c3                   	ret    
c000ac29:	90                   	nop

c000ac2a <File::open(FileOpenMode)>:
c000ac2a:	53                   	push   ebx
c000ac2b:	b8 0b 00 00 00       	mov    eax,0xb
c000ac30:	83 ec 08             	sub    esp,0x8
c000ac33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac37:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ac3e:	80 fa 19             	cmp    dl,0x19
c000ac41:	77 40                	ja     c000ac83 <File::open(FileOpenMode)+0x59>
c000ac43:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ac4a:	85 d2                	test   edx,edx
c000ac4c:	74 35                	je     c000ac83 <File::open(FileOpenMode)+0x59>
c000ac4e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac54:	85 d2                	test   edx,edx
c000ac56:	74 2b                	je     c000ac83 <File::open(FileOpenMode)+0x59>
c000ac58:	b8 06 00 00 00       	mov    eax,0x6
c000ac5d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ac61:	75 20                	jne    c000ac83 <File::open(FileOpenMode)+0x59>
c000ac63:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac65:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ac6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac6f:	51                   	push   ecx
c000ac70:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ac73:	51                   	push   ecx
c000ac74:	52                   	push   edx
c000ac75:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ac78:	83 c4 10             	add    esp,0x10
c000ac7b:	85 c0                	test   eax,eax
c000ac7d:	75 04                	jne    c000ac83 <File::open(FileOpenMode)+0x59>
c000ac7f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ac83:	83 c4 08             	add    esp,0x8
c000ac86:	5b                   	pop    ebx
c000ac87:	c3                   	ret    

c000ac88 <File::close()>:
c000ac88:	53                   	push   ebx
c000ac89:	b8 0b 00 00 00       	mov    eax,0xb
c000ac8e:	83 ec 08             	sub    esp,0x8
c000ac91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac95:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac9c:	80 fa 19             	cmp    dl,0x19
c000ac9f:	77 41                	ja     c000ace2 <File::close()+0x5a>
c000aca1:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000aca8:	85 db                	test   ebx,ebx
c000acaa:	74 36                	je     c000ace2 <File::close()+0x5a>
c000acac:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000acb3:	74 2d                	je     c000ace2 <File::close()+0x5a>
c000acb5:	b8 05 00 00 00       	mov    eax,0x5
c000acba:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000acbe:	74 22                	je     c000ace2 <File::close()+0x5a>
c000acc0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000acc4:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000accb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000acd1:	53                   	push   ebx
c000acd2:	53                   	push   ebx
c000acd3:	8b 10                	mov    edx,DWORD PTR [eax]
c000acd5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000acdb:	50                   	push   eax
c000acdc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000acdf:	83 c4 10             	add    esp,0x10
c000ace2:	83 c4 08             	add    esp,0x8
c000ace5:	5b                   	pop    ebx
c000ace6:	c3                   	ret    
c000ace7:	90                   	nop

c000ace8 <File::seek(unsigned long long)>:
c000ace8:	56                   	push   esi
c000ace9:	53                   	push   ebx
c000acea:	b8 0b 00 00 00       	mov    eax,0xb
c000acef:	51                   	push   ecx
c000acf0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000acf4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000acf8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000acff:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ad03:	80 fa 19             	cmp    dl,0x19
c000ad06:	77 31                	ja     c000ad39 <File::seek(unsigned long long)+0x51>
c000ad08:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ad0f:	85 d2                	test   edx,edx
c000ad11:	74 26                	je     c000ad39 <File::seek(unsigned long long)+0x51>
c000ad13:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad19:	85 d2                	test   edx,edx
c000ad1b:	74 1c                	je     c000ad39 <File::seek(unsigned long long)+0x51>
c000ad1d:	b8 05 00 00 00       	mov    eax,0x5
c000ad22:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ad26:	74 11                	je     c000ad39 <File::seek(unsigned long long)+0x51>
c000ad28:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad2a:	53                   	push   ebx
c000ad2b:	51                   	push   ecx
c000ad2c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ad32:	52                   	push   edx
c000ad33:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ad36:	83 c4 10             	add    esp,0x10
c000ad39:	5a                   	pop    edx
c000ad3a:	5b                   	pop    ebx
c000ad3b:	5e                   	pop    esi
c000ad3c:	c3                   	ret    
c000ad3d:	90                   	nop

c000ad3e <File::tell(unsigned long long*)>:
c000ad3e:	83 ec 0c             	sub    esp,0xc
c000ad41:	b8 0b 00 00 00       	mov    eax,0xb
c000ad46:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ad4a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ad51:	80 fa 19             	cmp    dl,0x19
c000ad54:	77 34                	ja     c000ad8a <File::tell(unsigned long long*)+0x4c>
c000ad56:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000ad5d:	85 d2                	test   edx,edx
c000ad5f:	74 29                	je     c000ad8a <File::tell(unsigned long long*)+0x4c>
c000ad61:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad67:	85 d2                	test   edx,edx
c000ad69:	74 1f                	je     c000ad8a <File::tell(unsigned long long*)+0x4c>
c000ad6b:	b8 05 00 00 00       	mov    eax,0x5
c000ad70:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ad74:	74 14                	je     c000ad8a <File::tell(unsigned long long*)+0x4c>
c000ad76:	50                   	push   eax
c000ad77:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad7d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ad83:	52                   	push   edx
c000ad84:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	83 c4 0c             	add    esp,0xc
c000ad8d:	c3                   	ret    

c000ad8e <File::rewind()>:
c000ad8e:	83 ec 10             	sub    esp,0x10
c000ad91:	6a 00                	push   0x0
c000ad93:	6a 00                	push   0x0
c000ad95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad99:	e8 4a ff ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c000ad9e:	83 c4 1c             	add    esp,0x1c
c000ada1:	c3                   	ret    

c000ada2 <File::unlink()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	b8 0b 00 00 00       	mov    eax,0xb
c000adaa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adae:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000adb5:	80 f9 19             	cmp    cl,0x19
c000adb8:	77 2f                	ja     c000ade9 <File::unlink()+0x47>
c000adba:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000adc1:	85 c9                	test   ecx,ecx
c000adc3:	74 24                	je     c000ade9 <File::unlink()+0x47>
c000adc5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adcb:	85 c9                	test   ecx,ecx
c000adcd:	74 1a                	je     c000ade9 <File::unlink()+0x47>
c000adcf:	b8 06 00 00 00       	mov    eax,0x6
c000add4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000add8:	75 0f                	jne    c000ade9 <File::unlink()+0x47>
c000adda:	83 c2 0d             	add    edx,0xd
c000addd:	50                   	push   eax
c000adde:	50                   	push   eax
c000addf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ade1:	52                   	push   edx
c000ade2:	51                   	push   ecx
c000ade3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000ade6:	83 c4 10             	add    esp,0x10
c000ade9:	83 c4 0c             	add    esp,0xc
c000adec:	c3                   	ret    
c000aded:	90                   	nop

c000adee <File::rename(char const*)>:
c000adee:	83 ec 0c             	sub    esp,0xc
c000adf1:	b8 0b 00 00 00       	mov    eax,0xb
c000adf6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adfa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae01:	80 f9 19             	cmp    cl,0x19
c000ae04:	77 32                	ja     c000ae38 <File::rename(char const*)+0x4a>
c000ae06:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae0d:	85 c9                	test   ecx,ecx
c000ae0f:	74 27                	je     c000ae38 <File::rename(char const*)+0x4a>
c000ae11:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae17:	85 c9                	test   ecx,ecx
c000ae19:	74 1d                	je     c000ae38 <File::rename(char const*)+0x4a>
c000ae1b:	b8 06 00 00 00       	mov    eax,0x6
c000ae20:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae24:	75 12                	jne    c000ae38 <File::rename(char const*)+0x4a>
c000ae26:	83 c2 0d             	add    edx,0xd
c000ae29:	50                   	push   eax
c000ae2a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ae2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ae30:	52                   	push   edx
c000ae31:	51                   	push   ecx
c000ae32:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	83 c4 0c             	add    esp,0xc
c000ae3b:	c3                   	ret    

c000ae3c <File::chfatattr(unsigned char, unsigned char)>:
c000ae3c:	57                   	push   edi
c000ae3d:	b8 0b 00 00 00       	mov    eax,0xb
c000ae42:	56                   	push   esi
c000ae43:	53                   	push   ebx
c000ae44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ae48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ae4c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ae53:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ae57:	80 f9 19             	cmp    cl,0x19
c000ae5a:	77 37                	ja     c000ae93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae5c:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000ae63:	85 c9                	test   ecx,ecx
c000ae65:	74 2c                	je     c000ae93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae67:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ae6d:	85 c9                	test   ecx,ecx
c000ae6f:	74 22                	je     c000ae93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae71:	b8 06 00 00 00       	mov    eax,0x6
c000ae76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ae7a:	75 17                	jne    c000ae93 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ae7c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ae7e:	89 f0                	mov    eax,esi
c000ae80:	83 c2 0d             	add    edx,0xd
c000ae83:	0f b6 f0             	movzx  esi,al
c000ae86:	0f b6 db             	movzx  ebx,bl
c000ae89:	56                   	push   esi
c000ae8a:	53                   	push   ebx
c000ae8b:	52                   	push   edx
c000ae8c:	51                   	push   ecx
c000ae8d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ae90:	83 c4 10             	add    esp,0x10
c000ae93:	5b                   	pop    ebx
c000ae94:	5e                   	pop    esi
c000ae95:	5f                   	pop    edi
c000ae96:	c3                   	ret    
c000ae97:	90                   	nop

c000ae98 <File::exists()>:
c000ae98:	83 ec 0c             	sub    esp,0xc
c000ae9b:	31 c0                	xor    eax,eax
c000ae9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aea1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aea8:	80 f9 19             	cmp    cl,0x19
c000aeab:	77 24                	ja     c000aed1 <File::exists()+0x39>
c000aead:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000aeb4:	85 c9                	test   ecx,ecx
c000aeb6:	74 19                	je     c000aed1 <File::exists()+0x39>
c000aeb8:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000aebe:	85 c9                	test   ecx,ecx
c000aec0:	74 0f                	je     c000aed1 <File::exists()+0x39>
c000aec2:	83 c2 0d             	add    edx,0xd
c000aec5:	50                   	push   eax
c000aec6:	50                   	push   eax
c000aec7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000aec9:	52                   	push   edx
c000aeca:	51                   	push   ecx
c000aecb:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000aece:	83 c4 10             	add    esp,0x10
c000aed1:	83 c4 0c             	add    esp,0xc
c000aed4:	c3                   	ret    
c000aed5:	90                   	nop

c000aed6 <File::stat(unsigned long long*, bool*)>:
c000aed6:	56                   	push   esi
c000aed7:	53                   	push   ebx
c000aed8:	50                   	push   eax
c000aed9:	b8 0b 00 00 00       	mov    eax,0xb
c000aede:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aee2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000aee6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aeed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aef1:	80 f9 19             	cmp    cl,0x19
c000aef4:	77 3d                	ja     c000af33 <File::stat(unsigned long long*, bool*)+0x5d>
c000aef6:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000aefd:	85 c9                	test   ecx,ecx
c000aeff:	74 32                	je     c000af33 <File::stat(unsigned long long*, bool*)+0x5d>
c000af01:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000af07:	85 c9                	test   ecx,ecx
c000af09:	74 28                	je     c000af33 <File::stat(unsigned long long*, bool*)+0x5d>
c000af0b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af0d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af11:	74 13                	je     c000af26 <File::stat(unsigned long long*, bool*)+0x50>
c000af13:	83 ec 04             	sub    esp,0x4
c000af16:	56                   	push   esi
c000af17:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000af1d:	51                   	push   ecx
c000af1e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000af21:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000af24:	eb 0a                	jmp    c000af30 <File::stat(unsigned long long*, bool*)+0x5a>
c000af26:	53                   	push   ebx
c000af27:	83 c2 0d             	add    edx,0xd
c000af2a:	56                   	push   esi
c000af2b:	52                   	push   edx
c000af2c:	51                   	push   ecx
c000af2d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	5a                   	pop    edx
c000af34:	5b                   	pop    ebx
c000af35:	5e                   	pop    esi
c000af36:	c3                   	ret    

c000af37 <Fs::setcwd(Process*, char*)>:
c000af37:	55                   	push   ebp
c000af38:	57                   	push   edi
c000af39:	56                   	push   esi
c000af3a:	53                   	push   ebx
c000af3b:	81 ec 20 02 00 00    	sub    esp,0x220
c000af41:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000af48:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000af4e:	57                   	push   edi
c000af4f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000af56:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000af5a:	56                   	push   esi
c000af5b:	e8 60 fa ff ff       	call   c000a9c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000af60:	89 34 24             	mov    DWORD PTR [esp],esi
c000af63:	e8 d8 55 ff ff       	call   c0000540 <strlen>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	83 f8 02             	cmp    eax,0x2
c000af6e:	77 15                	ja     c000af85 <Fs::setcwd(Process*, char*)+0x4e>
c000af70:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000af75:	83 eb 41             	sub    ebx,0x41
c000af78:	8b 04 9d 20 44 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbbe0]
c000af7f:	85 c0                	test   eax,eax
c000af81:	75 1c                	jne    c000af9f <Fs::setcwd(Process*, char*)+0x68>
c000af83:	eb 2f                	jmp    c000afb4 <Fs::setcwd(Process*, char*)+0x7d>
c000af85:	83 ec 0c             	sub    esp,0xc
c000af88:	56                   	push   esi
c000af89:	e8 b2 55 ff ff       	call   c0000540 <strlen>
c000af8e:	83 c4 10             	add    esp,0x10
c000af91:	83 f8 03             	cmp    eax,0x3
c000af94:	75 57                	jne    c000afed <Fs::setcwd(Process*, char*)+0xb6>
c000af96:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000af9b:	75 50                	jne    c000afed <Fs::setcwd(Process*, char*)+0xb6>
c000af9d:	eb d1                	jmp    c000af70 <Fs::setcwd(Process*, char*)+0x39>
c000af9f:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000afa6:	75 0c                	jne    c000afb4 <Fs::setcwd(Process*, char*)+0x7d>
c000afa8:	83 ec 0c             	sub    esp,0xc
c000afab:	50                   	push   eax
c000afac:	e8 a9 1c 00 00       	call   c000cc5a <LogicalDisk::mount()>
c000afb1:	83 c4 10             	add    esp,0x10
c000afb4:	b8 03 00 00 00       	mov    eax,0x3
c000afb9:	83 fb 19             	cmp    ebx,0x19
c000afbc:	0f 87 c6 00 00 00    	ja     c000b088 <Fs::setcwd(Process*, char*)+0x151>
c000afc2:	8b 14 9d 20 44 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdbbe0]
c000afc9:	b8 05 00 00 00       	mov    eax,0x5
c000afce:	85 d2                	test   edx,edx
c000afd0:	0f 84 b2 00 00 00    	je     c000b088 <Fs::setcwd(Process*, char*)+0x151>
c000afd6:	b8 06 00 00 00       	mov    eax,0x6
c000afdb:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000afe2:	0f 85 92 00 00 00    	jne    c000b07a <Fs::setcwd(Process*, char*)+0x143>
c000afe8:	e9 9b 00 00 00       	jmp    c000b088 <Fs::setcwd(Process*, char*)+0x151>
c000afed:	83 ec 0c             	sub    esp,0xc
c000aff0:	68 14 01 00 00       	push   0x114
c000aff5:	e8 bf c7 ff ff       	call   c00077b9 <malloc>
c000affa:	83 c4 0c             	add    esp,0xc
c000affd:	89 c3                	mov    ebx,eax
c000afff:	55                   	push   ebp
c000b000:	56                   	push   esi
c000b001:	50                   	push   eax
c000b002:	e8 63 fb ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c000b007:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b00c:	83 c4 0c             	add    esp,0xc
c000b00f:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b013:	50                   	push   eax
c000b014:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b018:	50                   	push   eax
c000b019:	53                   	push   ebx
c000b01a:	e8 b7 fe ff ff       	call   c000aed6 <File::stat(unsigned long long*, bool*)>
c000b01f:	83 c4 10             	add    esp,0x10
c000b022:	83 f8 02             	cmp    eax,0x2
c000b025:	74 04                	je     c000b02b <Fs::setcwd(Process*, char*)+0xf4>
c000b027:	85 c0                	test   eax,eax
c000b029:	74 1c                	je     c000b047 <Fs::setcwd(Process*, char*)+0x110>
c000b02b:	b8 01 00 00 00       	mov    eax,0x1
c000b030:	85 db                	test   ebx,ebx
c000b032:	74 54                	je     c000b088 <Fs::setcwd(Process*, char*)+0x151>
c000b034:	83 ec 0c             	sub    esp,0xc
c000b037:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b039:	53                   	push   ebx
c000b03a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b03d:	83 c4 10             	add    esp,0x10
c000b040:	b8 01 00 00 00       	mov    eax,0x1
c000b045:	eb 41                	jmp    c000b088 <Fs::setcwd(Process*, char*)+0x151>
c000b047:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b04c:	75 1c                	jne    c000b06a <Fs::setcwd(Process*, char*)+0x133>
c000b04e:	b8 02 00 00 00       	mov    eax,0x2
c000b053:	85 db                	test   ebx,ebx
c000b055:	74 31                	je     c000b088 <Fs::setcwd(Process*, char*)+0x151>
c000b057:	83 ec 0c             	sub    esp,0xc
c000b05a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b05c:	53                   	push   ebx
c000b05d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b060:	83 c4 10             	add    esp,0x10
c000b063:	b8 02 00 00 00       	mov    eax,0x2
c000b068:	eb 1e                	jmp    c000b088 <Fs::setcwd(Process*, char*)+0x151>
c000b06a:	85 db                	test   ebx,ebx
c000b06c:	74 0c                	je     c000b07a <Fs::setcwd(Process*, char*)+0x143>
c000b06e:	83 ec 0c             	sub    esp,0xc
c000b071:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b073:	53                   	push   ebx
c000b074:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b077:	83 c4 10             	add    esp,0x10
c000b07a:	50                   	push   eax
c000b07b:	50                   	push   eax
c000b07c:	56                   	push   esi
c000b07d:	57                   	push   edi
c000b07e:	e8 7d 55 ff ff       	call   c0000600 <strcpy>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	31 c0                	xor    eax,eax
c000b088:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b08e:	5b                   	pop    ebx
c000b08f:	5e                   	pop    esi
c000b090:	5f                   	pop    edi
c000b091:	5d                   	pop    ebp
c000b092:	c3                   	ret    
c000b093:	90                   	nop

c000b094 <Directory::Directory(char const*, Process*)>:
c000b094:	83 ec 0c             	sub    esp,0xc
c000b097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09b:	83 ec 08             	sub    esp,0x8
c000b09e:	6a 00                	push   0x0
c000b0a0:	50                   	push   eax
c000b0a1:	e8 9c dd ff ff       	call   c0008e42 <UnixFile::UnixFile(int)>
c000b0a6:	83 c4 10             	add    esp,0x10
c000b0a9:	ba c0 de 01 c0       	mov    edx,0xc001dec0
c000b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b2:	89 10                	mov    DWORD PTR [eax],edx
c000b0b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0b8:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0c2:	83 c0 0d             	add    eax,0xd
c000b0c5:	83 ec 04             	sub    esp,0x4
c000b0c8:	52                   	push   edx
c000b0c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0cd:	50                   	push   eax
c000b0ce:	e8 ed f8 ff ff       	call   c000a9c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b0d3:	83 c4 10             	add    esp,0x10
c000b0d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0da:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b0dd:	8d 50 bf             	lea    edx,[eax-0x41]
c000b0e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e4:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b0ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ee:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b0f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0f6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b0fc:	25 ff 00 00 00       	and    eax,0xff
c000b101:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b108:	85 c0                	test   eax,eax
c000b10a:	74 42                	je     c000b14e <Directory::Directory(char const*, Process*)+0xba>
c000b10c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b110:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b116:	25 ff 00 00 00       	and    eax,0xff
c000b11b:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b122:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b128:	85 c0                	test   eax,eax
c000b12a:	75 22                	jne    c000b14e <Directory::Directory(char const*, Process*)+0xba>
c000b12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b130:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b136:	25 ff 00 00 00       	and    eax,0xff
c000b13b:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c000b142:	83 ec 0c             	sub    esp,0xc
c000b145:	50                   	push   eax
c000b146:	e8 0f 1b 00 00       	call   c000cc5a <LogicalDisk::mount()>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	90                   	nop
c000b14f:	83 c4 0c             	add    esp,0xc
c000b152:	c3                   	ret    
c000b153:	90                   	nop

c000b154 <Directory::open()>:
c000b154:	53                   	push   ebx
c000b155:	b8 0b 00 00 00       	mov    eax,0xb
c000b15a:	83 ec 08             	sub    esp,0x8
c000b15d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b161:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b168:	80 fa 19             	cmp    dl,0x19
c000b16b:	77 3d                	ja     c000b1aa <Directory::open()+0x56>
c000b16d:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b174:	85 d2                	test   edx,edx
c000b176:	74 32                	je     c000b1aa <Directory::open()+0x56>
c000b178:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b17e:	85 d2                	test   edx,edx
c000b180:	74 28                	je     c000b1aa <Directory::open()+0x56>
c000b182:	b8 06 00 00 00       	mov    eax,0x6
c000b187:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b18b:	75 1d                	jne    c000b1aa <Directory::open()+0x56>
c000b18d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b193:	50                   	push   eax
c000b194:	8b 02                	mov    eax,DWORD PTR [edx]
c000b196:	51                   	push   ecx
c000b197:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b19a:	51                   	push   ecx
c000b19b:	52                   	push   edx
c000b19c:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b19f:	83 c4 10             	add    esp,0x10
c000b1a2:	85 c0                	test   eax,eax
c000b1a4:	75 04                	jne    c000b1aa <Directory::open()+0x56>
c000b1a6:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b1aa:	83 c4 08             	add    esp,0x8
c000b1ad:	5b                   	pop    ebx
c000b1ae:	c3                   	ret    
c000b1af:	90                   	nop

c000b1b0 <Directory::close()>:
c000b1b0:	53                   	push   ebx
c000b1b1:	b8 0b 00 00 00       	mov    eax,0xb
c000b1b6:	83 ec 08             	sub    esp,0x8
c000b1b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b1bd:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1c4:	80 fa 19             	cmp    dl,0x19
c000b1c7:	77 41                	ja     c000b20a <Directory::close()+0x5a>
c000b1c9:	8b 1c 95 20 44 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b1d0:	85 db                	test   ebx,ebx
c000b1d2:	74 36                	je     c000b20a <Directory::close()+0x5a>
c000b1d4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b1db:	74 2d                	je     c000b20a <Directory::close()+0x5a>
c000b1dd:	b8 05 00 00 00       	mov    eax,0x5
c000b1e2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b1e6:	74 22                	je     c000b20a <Directory::close()+0x5a>
c000b1e8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b1ec:	8b 04 95 20 44 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbbe0]
c000b1f3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b1f9:	53                   	push   ebx
c000b1fa:	53                   	push   ebx
c000b1fb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1fd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b203:	50                   	push   eax
c000b204:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b207:	83 c4 10             	add    esp,0x10
c000b20a:	83 c4 08             	add    esp,0x8
c000b20d:	5b                   	pop    ebx
c000b20e:	c3                   	ret    
c000b20f:	90                   	nop

c000b210 <Directory::unlink()>:
c000b210:	83 ec 0c             	sub    esp,0xc
c000b213:	b8 0b 00 00 00       	mov    eax,0xb
c000b218:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b21c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b223:	80 f9 19             	cmp    cl,0x19
c000b226:	77 2f                	ja     c000b257 <Directory::unlink()+0x47>
c000b228:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b22f:	85 c9                	test   ecx,ecx
c000b231:	74 24                	je     c000b257 <Directory::unlink()+0x47>
c000b233:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b239:	85 c9                	test   ecx,ecx
c000b23b:	74 1a                	je     c000b257 <Directory::unlink()+0x47>
c000b23d:	b8 06 00 00 00       	mov    eax,0x6
c000b242:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b246:	75 0f                	jne    c000b257 <Directory::unlink()+0x47>
c000b248:	83 c2 0d             	add    edx,0xd
c000b24b:	50                   	push   eax
c000b24c:	50                   	push   eax
c000b24d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b24f:	52                   	push   edx
c000b250:	51                   	push   ecx
c000b251:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b254:	83 c4 10             	add    esp,0x10
c000b257:	83 c4 0c             	add    esp,0xc
c000b25a:	c3                   	ret    
c000b25b:	90                   	nop

c000b25c <Directory::rename(char const*)>:
c000b25c:	83 ec 0c             	sub    esp,0xc
c000b25f:	b8 0b 00 00 00       	mov    eax,0xb
c000b264:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b268:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b26f:	80 f9 19             	cmp    cl,0x19
c000b272:	77 32                	ja     c000b2a6 <Directory::rename(char const*)+0x4a>
c000b274:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b27b:	85 c9                	test   ecx,ecx
c000b27d:	74 27                	je     c000b2a6 <Directory::rename(char const*)+0x4a>
c000b27f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b285:	85 c9                	test   ecx,ecx
c000b287:	74 1d                	je     c000b2a6 <Directory::rename(char const*)+0x4a>
c000b289:	b8 06 00 00 00       	mov    eax,0x6
c000b28e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b292:	75 12                	jne    c000b2a6 <Directory::rename(char const*)+0x4a>
c000b294:	83 c2 0d             	add    edx,0xd
c000b297:	50                   	push   eax
c000b298:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b29a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b29e:	52                   	push   edx
c000b29f:	51                   	push   ecx
c000b2a0:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b2a3:	83 c4 10             	add    esp,0x10
c000b2a6:	83 c4 0c             	add    esp,0xc
c000b2a9:	c3                   	ret    

c000b2aa <Directory::exists()>:
c000b2aa:	83 ec 0c             	sub    esp,0xc
c000b2ad:	31 c0                	xor    eax,eax
c000b2af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b2b3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b2ba:	80 f9 19             	cmp    cl,0x19
c000b2bd:	77 24                	ja     c000b2e3 <Directory::exists()+0x39>
c000b2bf:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b2c6:	85 c9                	test   ecx,ecx
c000b2c8:	74 19                	je     c000b2e3 <Directory::exists()+0x39>
c000b2ca:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b2d0:	85 c9                	test   ecx,ecx
c000b2d2:	74 0f                	je     c000b2e3 <Directory::exists()+0x39>
c000b2d4:	83 c2 0d             	add    edx,0xd
c000b2d7:	50                   	push   eax
c000b2d8:	50                   	push   eax
c000b2d9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b2db:	52                   	push   edx
c000b2dc:	51                   	push   ecx
c000b2dd:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	83 c4 0c             	add    esp,0xc
c000b2e6:	c3                   	ret    
c000b2e7:	90                   	nop

c000b2e8 <Directory::read(dirent*)>:
c000b2e8:	83 ec 1c             	sub    esp,0x1c
c000b2eb:	b8 0b 00 00 00       	mov    eax,0xb
c000b2f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b2f4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b2fb:	80 fa 19             	cmp    dl,0x19
c000b2fe:	77 30                	ja     c000b330 <Directory::read(dirent*)+0x48>
c000b300:	8b 14 95 20 44 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbbe0]
c000b307:	85 d2                	test   edx,edx
c000b309:	74 25                	je     c000b330 <Directory::read(dirent*)+0x48>
c000b30b:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b312:	74 1c                	je     c000b330 <Directory::read(dirent*)+0x48>
c000b314:	83 ec 0c             	sub    esp,0xc
c000b317:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b319:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b31d:	52                   	push   edx
c000b31e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b322:	6a 00                	push   0x0
c000b324:	68 10 01 00 00       	push   0x110
c000b329:	51                   	push   ecx
c000b32a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b32d:	83 c4 20             	add    esp,0x20
c000b330:	83 c4 1c             	add    esp,0x1c
c000b333:	c3                   	ret    

c000b334 <Directory::create()>:
c000b334:	83 ec 0c             	sub    esp,0xc
c000b337:	b8 0b 00 00 00       	mov    eax,0xb
c000b33c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b340:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b347:	80 f9 19             	cmp    cl,0x19
c000b34a:	77 2f                	ja     c000b37b <Directory::create()+0x47>
c000b34c:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c000b353:	85 c9                	test   ecx,ecx
c000b355:	74 24                	je     c000b37b <Directory::create()+0x47>
c000b357:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b35d:	85 c9                	test   ecx,ecx
c000b35f:	74 1a                	je     c000b37b <Directory::create()+0x47>
c000b361:	b8 06 00 00 00       	mov    eax,0x6
c000b366:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b36a:	75 0f                	jne    c000b37b <Directory::create()+0x47>
c000b36c:	83 c2 0d             	add    edx,0xd
c000b36f:	50                   	push   eax
c000b370:	50                   	push   eax
c000b371:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b373:	52                   	push   edx
c000b374:	51                   	push   ecx
c000b375:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b378:	83 c4 10             	add    esp,0x10
c000b37b:	83 c4 0c             	add    esp,0xc
c000b37e:	c3                   	ret    
c000b37f:	90                   	nop

c000b380 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b380:	b8 0a 00 00 00       	mov    eax,0xa
c000b385:	c3                   	ret    
c000b386:	66 90                	xchg   ax,ax

c000b388 <Bus::Bus(char const*)>:
c000b388:	83 ec 0c             	sub    esp,0xc
c000b38b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b38f:	83 ec 08             	sub    esp,0x8
c000b392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b396:	50                   	push   eax
c000b397:	e8 30 08 00 00       	call   c000bbcc <Device::Device(char const*)>
c000b39c:	83 c4 10             	add    esp,0x10
c000b39f:	ba dc de 01 c0       	mov    edx,0xc001dedc
c000b3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3a8:	89 10                	mov    DWORD PTR [eax],edx
c000b3aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ae:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b3b8:	90                   	nop
c000b3b9:	83 c4 0c             	add    esp,0xc
c000b3bc:	c3                   	ret    
c000b3bd:	90                   	nop
c000b3be:	66 90                	xchg   ax,ax

c000b3c0 <Bus::~Bus()>:
c000b3c0:	83 ec 0c             	sub    esp,0xc
c000b3c3:	ba dc de 01 c0       	mov    edx,0xc001dedc
c000b3c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3cc:	89 10                	mov    DWORD PTR [eax],edx
c000b3ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d2:	83 ec 0c             	sub    esp,0xc
c000b3d5:	50                   	push   eax
c000b3d6:	e8 5b 05 00 00       	call   c000b936 <Device::~Device()>
c000b3db:	83 c4 10             	add    esp,0x10
c000b3de:	90                   	nop
c000b3df:	83 c4 0c             	add    esp,0xc
c000b3e2:	c3                   	ret    
c000b3e3:	90                   	nop

c000b3e4 <Bus::~Bus()>:
c000b3e4:	83 ec 0c             	sub    esp,0xc
c000b3e7:	83 ec 0c             	sub    esp,0xc
c000b3ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3ee:	e8 cd ff ff ff       	call   c000b3c0 <Bus::~Bus()>
c000b3f3:	83 c4 10             	add    esp,0x10
c000b3f6:	83 ec 08             	sub    esp,0x8
c000b3f9:	68 58 01 00 00       	push   0x158
c000b3fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b402:	e8 f7 f0 ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000b407:	83 c4 10             	add    esp,0x10
c000b40a:	83 c4 0c             	add    esp,0xc
c000b40d:	c3                   	ret    

c000b40e <beepThread(void*)>:
c000b40e:	83 ec 0c             	sub    esp,0xc
c000b411:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000b416:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b41a:	48                   	dec    eax
c000b41b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000b420:	75 01                	jne    c000b423 <beepThread(void*)+0x15>
c000b422:	fb                   	sti    
c000b423:	83 ec 0c             	sub    esp,0xc
c000b426:	6b c2 0a             	imul   eax,edx,0xa
c000b429:	50                   	push   eax
c000b42a:	e8 3d 87 00 00       	call   c0013b6c <milliTenthSleep(unsigned int)>
c000b42f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b436:	e8 e3 a4 00 00       	call   c001591e <HalMakeBeep(int)>
c000b43b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b443:	83 c4 1c             	add    esp,0x1c
c000b446:	e9 1d 86 00 00       	jmp    c0013a68 <blockTask(TaskState)>

c000b44b <Krnl::beep(int, int, bool)>:
c000b44b:	56                   	push   esi
c000b44c:	53                   	push   ebx
c000b44d:	83 ec 10             	sub    esp,0x10
c000b450:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b454:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b458:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45c:	e8 bd a4 00 00       	call   c001591e <HalMakeBeep(int)>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	89 f0                	mov    eax,esi
c000b466:	84 c0                	test   al,al
c000b468:	74 1e                	je     c000b488 <Krnl::beep(int, int, bool)+0x3d>
c000b46a:	83 ec 0c             	sub    esp,0xc
c000b46d:	6b db 0a             	imul   ebx,ebx,0xa
c000b470:	53                   	push   ebx
c000b471:	e8 f6 86 00 00       	call   c0013b6c <milliTenthSleep(unsigned int)>
c000b476:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b47e:	83 c4 14             	add    esp,0x14
c000b481:	5b                   	pop    ebx
c000b482:	5e                   	pop    esi
c000b483:	e9 96 a4 00 00       	jmp    c001591e <HalMakeBeep(int)>
c000b488:	68 e6 00 00 00       	push   0xe6
c000b48d:	53                   	push   ebx
c000b48e:	68 0e b4 00 c0       	push   0xc000b40e
c000b493:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b499:	e8 ae 81 00 00       	call   c001364c <Process::createThread(void (*)(void*), void*, int)>
c000b49e:	83 c4 14             	add    esp,0x14
c000b4a1:	5b                   	pop    ebx
c000b4a2:	5e                   	pop    esi
c000b4a3:	c3                   	ret    

c000b4a4 <User::loadClockSettings(int)>:
c000b4a4:	53                   	push   ebx
c000b4a5:	83 ec 14             	sub    esp,0x14
c000b4a8:	68 14 01 00 00       	push   0x114
c000b4ad:	e8 07 c3 ff ff       	call   c00077b9 <malloc>
c000b4b2:	83 c4 0c             	add    esp,0xc
c000b4b5:	89 c3                	mov    ebx,eax
c000b4b7:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c000b4bd:	68 00 df 01 c0       	push   0xc001df00
c000b4c2:	50                   	push   eax
c000b4c3:	e8 a2 f6 ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c000b4c8:	58                   	pop    eax
c000b4c9:	5a                   	pop    edx
c000b4ca:	6a 01                	push   0x1
c000b4cc:	53                   	push   ebx
c000b4cd:	e8 58 f7 ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c000b4d2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b4d5:	e8 ae f7 ff ff       	call   c000ac88 <File::close()>
c000b4da:	83 c4 10             	add    esp,0x10
c000b4dd:	85 db                	test   ebx,ebx
c000b4df:	74 0f                	je     c000b4f0 <User::loadClockSettings(int)+0x4c>
c000b4e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b4e3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b4e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b4ea:	83 c4 08             	add    esp,0x8
c000b4ed:	5b                   	pop    ebx
c000b4ee:	ff e0                	jmp    eax
c000b4f0:	83 c4 08             	add    esp,0x8
c000b4f3:	5b                   	pop    ebx
c000b4f4:	c3                   	ret    
c000b4f5:	90                   	nop

c000b4f6 <Clock::Clock(char const*)>:
c000b4f6:	83 ec 0c             	sub    esp,0xc
c000b4f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fd:	83 ec 08             	sub    esp,0x8
c000b500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b504:	50                   	push   eax
c000b505:	e8 c2 06 00 00       	call   c000bbcc <Device::Device(char const*)>
c000b50a:	83 c4 10             	add    esp,0x10
c000b50d:	ba 28 df 01 c0       	mov    edx,0xc001df28
c000b512:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b516:	89 10                	mov    DWORD PTR [eax],edx
c000b518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b51c:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b526:	90                   	nop
c000b527:	83 c4 0c             	add    esp,0xc
c000b52a:	c3                   	ret    
c000b52b:	90                   	nop

c000b52c <Clock::~Clock()>:
c000b52c:	83 ec 0c             	sub    esp,0xc
c000b52f:	ba 28 df 01 c0       	mov    edx,0xc001df28
c000b534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b538:	89 10                	mov    DWORD PTR [eax],edx
c000b53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b53e:	83 ec 0c             	sub    esp,0xc
c000b541:	50                   	push   eax
c000b542:	e8 ef 03 00 00       	call   c000b936 <Device::~Device()>
c000b547:	83 c4 10             	add    esp,0x10
c000b54a:	90                   	nop
c000b54b:	83 c4 0c             	add    esp,0xc
c000b54e:	c3                   	ret    
c000b54f:	90                   	nop

c000b550 <Clock::~Clock()>:
c000b550:	83 ec 0c             	sub    esp,0xc
c000b553:	83 ec 0c             	sub    esp,0xc
c000b556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b55a:	e8 cd ff ff ff       	call   c000b52c <Clock::~Clock()>
c000b55f:	83 c4 10             	add    esp,0x10
c000b562:	83 ec 08             	sub    esp,0x8
c000b565:	68 58 01 00 00       	push   0x158
c000b56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b56e:	e8 8b ef ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000b573:	83 c4 10             	add    esp,0x10
c000b576:	83 c4 0c             	add    esp,0xc
c000b579:	c3                   	ret    

c000b57a <Clock::timeInSecondsLocal()>:
c000b57a:	53                   	push   ebx
c000b57b:	83 ec 14             	sub    esp,0x14
c000b57e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b582:	8b 10                	mov    edx,DWORD PTR [eax]
c000b584:	50                   	push   eax
c000b585:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b588:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b58f:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b595:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b59b:	89 cb                	mov    ebx,ecx
c000b59d:	c1 fb 1f             	sar    ebx,0x1f
c000b5a0:	01 c8                	add    eax,ecx
c000b5a2:	11 da                	adc    edx,ebx
c000b5a4:	83 c4 10             	add    esp,0x10
c000b5a7:	31 c9                	xor    ecx,ecx
c000b5a9:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b5b0:	74 05                	je     c000b5b7 <Clock::timeInSecondsLocal()+0x3d>
c000b5b2:	b9 08 07 00 00       	mov    ecx,0x708
c000b5b7:	31 db                	xor    ebx,ebx
c000b5b9:	01 c8                	add    eax,ecx
c000b5bb:	11 da                	adc    edx,ebx
c000b5bd:	83 c4 08             	add    esp,0x8
c000b5c0:	5b                   	pop    ebx
c000b5c1:	c3                   	ret    

c000b5c2 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b5c2:	57                   	push   edi
c000b5c3:	56                   	push   esi
c000b5c4:	53                   	push   ebx
c000b5c5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b5c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b5cd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b5cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b5d3:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b5d6:	0f b6 05 b8 1f 02 c0 	movzx  eax,BYTE PTR ds:0xc0021fb8
c000b5dd:	03 05 bc 1f 02 c0    	add    eax,DWORD PTR ds:0xc0021fbc
c000b5e3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b5e9:	99                   	cdq    
c000b5ea:	29 c6                	sub    esi,eax
c000b5ec:	19 d7                	sbb    edi,edx
c000b5ee:	89 f0                	mov    eax,esi
c000b5f0:	89 fa                	mov    edx,edi
c000b5f2:	31 f6                	xor    esi,esi
c000b5f4:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b5fb:	74 05                	je     c000b602 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b5fd:	be 08 07 00 00       	mov    esi,0x708
c000b602:	31 ff                	xor    edi,edi
c000b604:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b608:	29 f0                	sub    eax,esi
c000b60a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b60e:	19 fa                	sbb    edx,edi
c000b610:	89 d8                	mov    eax,ebx
c000b612:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b616:	5b                   	pop    ebx
c000b617:	5e                   	pop    esi
c000b618:	5f                   	pop    edi
c000b619:	ff e0                	jmp    eax

c000b61b <datetimeToSeconds(datetime_t)>:
c000b61b:	55                   	push   ebp
c000b61c:	57                   	push   edi
c000b61d:	56                   	push   esi
c000b61e:	53                   	push   ebx
c000b61f:	83 ec 14             	sub    esp,0x14
c000b622:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b626:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b62a:	89 d3                	mov    ebx,edx
c000b62c:	0f b6 c6             	movzx  eax,dh
c000b62f:	c1 eb 10             	shr    ebx,0x10
c000b632:	48                   	dec    eax
c000b633:	66 81 eb 6c 07       	sub    bx,0x76c
c000b638:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b63c:	0f b6 f5             	movzx  esi,ch
c000b63f:	89 cf                	mov    edi,ecx
c000b641:	6b f6 3c             	imul   esi,esi,0x3c
c000b644:	c1 ef 10             	shr    edi,0x10
c000b647:	0f b6 c9             	movzx  ecx,cl
c000b64a:	89 f8                	mov    eax,edi
c000b64c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b652:	0f b6 f8             	movzx  edi,al
c000b655:	0f b6 d2             	movzx  edx,dl
c000b658:	01 fe                	add    esi,edi
c000b65a:	01 f1                	add    ecx,esi
c000b65c:	0f b7 f3             	movzx  esi,bx
c000b65f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b663:	c1 f9 1f             	sar    ecx,0x1f
c000b666:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b66b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b66f:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b674:	8b 0c 8d 60 df 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe20a0]
c000b67b:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b67f:	76 29                	jbe    c000b6aa <datetimeToSeconds(datetime_t)+0x8f>
c000b681:	f6 c3 03             	test   bl,0x3
c000b684:	75 24                	jne    c000b6aa <datetimeToSeconds(datetime_t)+0x8f>
c000b686:	31 d2                	xor    edx,edx
c000b688:	bf 64 00 00 00       	mov    edi,0x64
c000b68d:	89 d8                	mov    eax,ebx
c000b68f:	66 f7 f7             	div    di
c000b692:	66 85 d2             	test   dx,dx
c000b695:	75 12                	jne    c000b6a9 <datetimeToSeconds(datetime_t)+0x8e>
c000b697:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b69d:	bf 90 01 00 00       	mov    edi,0x190
c000b6a2:	99                   	cdq    
c000b6a3:	f7 ff                	idiv   edi
c000b6a5:	85 d2                	test   edx,edx
c000b6a7:	75 01                	jne    c000b6aa <datetimeToSeconds(datetime_t)+0x8f>
c000b6a9:	41                   	inc    ecx
c000b6aa:	66 83 fb 46          	cmp    bx,0x46
c000b6ae:	76 45                	jbe    c000b6f5 <datetimeToSeconds(datetime_t)+0xda>
c000b6b0:	bb 46 00 00 00       	mov    ebx,0x46
c000b6b5:	bf 64 00 00 00       	mov    edi,0x64
c000b6ba:	bd 90 01 00 00       	mov    ebp,0x190
c000b6bf:	b8 6d 01 00 00       	mov    eax,0x16d
c000b6c4:	f6 c3 03             	test   bl,0x3
c000b6c7:	75 23                	jne    c000b6ec <datetimeToSeconds(datetime_t)+0xd1>
c000b6c9:	89 d8                	mov    eax,ebx
c000b6cb:	99                   	cdq    
c000b6cc:	f7 ff                	idiv   edi
c000b6ce:	b8 6e 01 00 00       	mov    eax,0x16e
c000b6d3:	85 d2                	test   edx,edx
c000b6d5:	75 15                	jne    c000b6ec <datetimeToSeconds(datetime_t)+0xd1>
c000b6d7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b6dd:	99                   	cdq    
c000b6de:	f7 fd                	idiv   ebp
c000b6e0:	31 c0                	xor    eax,eax
c000b6e2:	85 d2                	test   edx,edx
c000b6e4:	0f 94 c0             	sete   al
c000b6e7:	05 6d 01 00 00       	add    eax,0x16d
c000b6ec:	01 c1                	add    ecx,eax
c000b6ee:	43                   	inc    ebx
c000b6ef:	39 f3                	cmp    ebx,esi
c000b6f1:	7c cc                	jl     c000b6bf <datetimeToSeconds(datetime_t)+0xa4>
c000b6f3:	eb 3b                	jmp    c000b730 <datetimeToSeconds(datetime_t)+0x115>
c000b6f5:	74 39                	je     c000b730 <datetimeToSeconds(datetime_t)+0x115>
c000b6f7:	b8 45 00 00 00       	mov    eax,0x45
c000b6fc:	89 c2                	mov    edx,eax
c000b6fe:	83 e2 03             	and    edx,0x3
c000b701:	39 f0                	cmp    eax,esi
c000b703:	7e 13                	jle    c000b718 <datetimeToSeconds(datetime_t)+0xfd>
c000b705:	85 d2                	test   edx,edx
c000b707:	0f 94 c2             	sete   dl
c000b70a:	48                   	dec    eax
c000b70b:	0f b6 d2             	movzx  edx,dl
c000b70e:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b714:	29 d1                	sub    ecx,edx
c000b716:	eb e4                	jmp    c000b6fc <datetimeToSeconds(datetime_t)+0xe1>
c000b718:	b8 6d 01 00 00       	mov    eax,0x16d
c000b71d:	85 d2                	test   edx,edx
c000b71f:	75 0d                	jne    c000b72e <datetimeToSeconds(datetime_t)+0x113>
c000b721:	31 c0                	xor    eax,eax
c000b723:	66 85 db             	test   bx,bx
c000b726:	0f 95 c0             	setne  al
c000b729:	05 6d 01 00 00       	add    eax,0x16d
c000b72e:	29 c1                	sub    ecx,eax
c000b730:	b8 80 51 01 00       	mov    eax,0x15180
c000b735:	f7 e9                	imul   ecx
c000b737:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b73b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b73f:	83 c4 14             	add    esp,0x14
c000b742:	5b                   	pop    ebx
c000b743:	5e                   	pop    esi
c000b744:	5f                   	pop    edi
c000b745:	5d                   	pop    ebp
c000b746:	c3                   	ret    
c000b747:	90                   	nop

c000b748 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b748:	57                   	push   edi
c000b749:	56                   	push   esi
c000b74a:	53                   	push   ebx
c000b74b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b74f:	8b 06                	mov    eax,DWORD PTR [esi]
c000b751:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b754:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b758:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b75c:	e8 ba fe ff ff       	call   c000b61b <datetimeToSeconds(datetime_t)>
c000b761:	59                   	pop    ecx
c000b762:	0f b6 0d b8 1f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0021fb8
c000b769:	5b                   	pop    ebx
c000b76a:	03 0d bc 1f 02 c0    	add    ecx,DWORD PTR ds:0xc0021fbc
c000b770:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b776:	89 cb                	mov    ebx,ecx
c000b778:	c1 fb 1f             	sar    ebx,0x1f
c000b77b:	29 c8                	sub    eax,ecx
c000b77d:	19 da                	sbb    edx,ebx
c000b77f:	31 c9                	xor    ecx,ecx
c000b781:	80 3d b9 1f 02 c0 00 	cmp    BYTE PTR ds:0xc0021fb9,0x0
c000b788:	74 05                	je     c000b78f <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b78a:	b9 08 07 00 00       	mov    ecx,0x708
c000b78f:	31 db                	xor    ebx,ebx
c000b791:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b795:	29 c8                	sub    eax,ecx
c000b797:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b79b:	19 da                	sbb    edx,ebx
c000b79d:	89 f8                	mov    eax,edi
c000b79f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b7a3:	5b                   	pop    ebx
c000b7a4:	5e                   	pop    esi
c000b7a5:	5f                   	pop    edi
c000b7a6:	ff e0                	jmp    eax

c000b7a8 <secondsToDatetime(unsigned long long)>:
c000b7a8:	55                   	push   ebp
c000b7a9:	57                   	push   edi
c000b7aa:	56                   	push   esi
c000b7ab:	53                   	push   ebx
c000b7ac:	83 ec 1c             	sub    esp,0x1c
c000b7af:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b7b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7b7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b7bb:	6a 00                	push   0x0
c000b7bd:	68 80 51 01 00       	push   0x15180
c000b7c2:	55                   	push   ebp
c000b7c3:	57                   	push   edi
c000b7c4:	e8 07 0a 01 00       	call   c001c1d0 <__udivdi3>
c000b7c9:	83 c4 10             	add    esp,0x10
c000b7cc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b7d2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7d6:	6a 00                	push   0x0
c000b7d8:	68 80 51 01 00       	push   0x15180
c000b7dd:	55                   	push   ebp
c000b7de:	57                   	push   edi
c000b7df:	bf 10 0e 00 00       	mov    edi,0xe10
c000b7e4:	e8 e7 0a 01 00       	call   c001c2d0 <__umoddi3>
c000b7e9:	83 c4 10             	add    esp,0x10
c000b7ec:	99                   	cdq    
c000b7ed:	f7 ff                	idiv   edi
c000b7ef:	bf 3c 00 00 00       	mov    edi,0x3c
c000b7f4:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b7f7:	89 d0                	mov    eax,edx
c000b7f9:	99                   	cdq    
c000b7fa:	f7 ff                	idiv   edi
c000b7fc:	85 db                	test   ebx,ebx
c000b7fe:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b801:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b804:	79 11                	jns    c000b817 <secondsToDatetime(unsigned long long)+0x6f>
c000b806:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b80a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b810:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b815:	eb 07                	jmp    c000b81e <secondsToDatetime(unsigned long long)+0x76>
c000b817:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b81c:	89 d8                	mov    eax,ebx
c000b81e:	bf b4 05 00 00       	mov    edi,0x5b4
c000b823:	99                   	cdq    
c000b824:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b829:	f7 f9                	idiv   ecx
c000b82b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b830:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b834:	31 d2                	xor    edx,edx
c000b836:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b83e:	01 c3                	add    ebx,eax
c000b840:	89 d8                	mov    eax,ebx
c000b842:	f7 f1                	div    ecx
c000b844:	31 d2                	xor    edx,edx
c000b846:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b849:	89 d8                	mov    eax,ebx
c000b84b:	f7 f7                	div    edi
c000b84d:	31 d2                	xor    edx,edx
c000b84f:	29 c1                	sub    ecx,eax
c000b851:	89 d8                	mov    eax,ebx
c000b853:	f7 f5                	div    ebp
c000b855:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b85a:	29 c1                	sub    ecx,eax
c000b85c:	31 d2                	xor    edx,edx
c000b85e:	89 c8                	mov    eax,ecx
c000b860:	f7 f5                	div    ebp
c000b862:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b86b:	31 d2                	xor    edx,edx
c000b86d:	89 c8                	mov    eax,ecx
c000b86f:	f7 f5                	div    ebp
c000b871:	31 d2                	xor    edx,edx
c000b873:	01 c3                	add    ebx,eax
c000b875:	89 c8                	mov    eax,ecx
c000b877:	f7 f7                	div    edi
c000b879:	bf 99 00 00 00       	mov    edi,0x99
c000b87e:	29 c3                	sub    ebx,eax
c000b880:	31 d2                	xor    edx,edx
c000b882:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b88a:	29 c3                	sub    ebx,eax
c000b88c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b88f:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b892:	bb 05 00 00 00       	mov    ebx,0x5
c000b897:	83 c1 02             	add    ecx,0x2
c000b89a:	89 c8                	mov    eax,ecx
c000b89c:	f7 f7                	div    edi
c000b89e:	31 d2                	xor    edx,edx
c000b8a0:	89 c7                	mov    edi,eax
c000b8a2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b8a8:	83 c0 02             	add    eax,0x2
c000b8ab:	f7 f3                	div    ebx
c000b8ad:	89 eb                	mov    ebx,ebp
c000b8af:	29 c3                	sub    ebx,eax
c000b8b1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b8b7:	88 1e                	mov    BYTE PTR [esi],bl
c000b8b9:	19 c0                	sbb    eax,eax
c000b8bb:	31 d2                	xor    edx,edx
c000b8bd:	83 e0 0c             	and    eax,0xc
c000b8c0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b8c4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b8cc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b8d0:	83 f9 01             	cmp    ecx,0x1
c000b8d3:	0f 96 c2             	setbe  dl
c000b8d6:	41                   	inc    ecx
c000b8d7:	01 d0                	add    eax,edx
c000b8d9:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b8dc:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b8e0:	83 c4 1c             	add    esp,0x1c
c000b8e3:	89 f0                	mov    eax,esi
c000b8e5:	5b                   	pop    ebx
c000b8e6:	5e                   	pop    esi
c000b8e7:	5f                   	pop    edi
c000b8e8:	5d                   	pop    ebp
c000b8e9:	c2 04 00             	ret    0x4

c000b8ec <Clock::timeInDatetimeLocal()>:
c000b8ec:	53                   	push   ebx
c000b8ed:	83 ec 14             	sub    esp,0x14
c000b8f0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b8f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b8f8:	e8 7d fc ff ff       	call   c000b57a <Clock::timeInSecondsLocal()>
c000b8fd:	83 c4 0c             	add    esp,0xc
c000b900:	52                   	push   edx
c000b901:	50                   	push   eax
c000b902:	53                   	push   ebx
c000b903:	e8 a0 fe ff ff       	call   c000b7a8 <secondsToDatetime(unsigned long long)>
c000b908:	89 d8                	mov    eax,ebx
c000b90a:	83 c4 14             	add    esp,0x14
c000b90d:	5b                   	pop    ebx
c000b90e:	c2 04 00             	ret    0x4
c000b911:	90                   	nop

c000b912 <Device::hibernate()>:
c000b912:	c3                   	ret    
c000b913:	90                   	nop

c000b914 <Device::wake()>:
c000b914:	c3                   	ret    
c000b915:	90                   	nop

c000b916 <Device::detect()>:
c000b916:	c3                   	ret    
c000b917:	90                   	nop

c000b918 <Device::disableLegacy()>:
c000b918:	c3                   	ret    
c000b919:	90                   	nop

c000b91a <Device::powerSaving(PowerSavingLevel)>:
c000b91a:	c3                   	ret    
c000b91b:	90                   	nop

c000b91c <DriverlessDevice::close(int, int, void*)>:
c000b91c:	31 c0                	xor    eax,eax
c000b91e:	c3                   	ret    
c000b91f:	90                   	nop

c000b920 <DriverlessDevice::detect()>:
c000b920:	c3                   	ret    
c000b921:	90                   	nop

c000b922 <DriverlessDevice::open(int, int, void*)>:
c000b922:	83 ec 18             	sub    esp,0x18
c000b925:	68 90 df 01 c0       	push   0xc001df90
c000b92a:	e8 48 49 00 00       	call   c0010277 <KePanic(char const*)>
c000b92f:	83 c8 ff             	or     eax,0xffffffff
c000b932:	83 c4 1c             	add    esp,0x1c
c000b935:	c3                   	ret    

c000b936 <Device::~Device()>:
c000b936:	ba f0 df 01 c0       	mov    edx,0xc001dff0
c000b93b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b93f:	89 10                	mov    DWORD PTR [eax],edx
c000b941:	90                   	nop
c000b942:	c3                   	ret    
c000b943:	90                   	nop

c000b944 <Device::~Device()>:
c000b944:	83 ec 0c             	sub    esp,0xc
c000b947:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b94b:	e8 e6 ff ff ff       	call   c000b936 <Device::~Device()>
c000b950:	83 c4 04             	add    esp,0x4
c000b953:	83 ec 08             	sub    esp,0x8
c000b956:	68 58 01 00 00       	push   0x158
c000b95b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b95f:	e8 9a eb ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000b964:	83 c4 10             	add    esp,0x10
c000b967:	83 c4 0c             	add    esp,0xc
c000b96a:	c3                   	ret    
c000b96b:	90                   	nop

c000b96c <Device::findAndLoadDriver()>:
c000b96c:	c7 44 24 04 ae df 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dfae
c000b974:	e9 7b ec ff ff       	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)>
c000b979:	90                   	nop

c000b97a <Device::preOpenPCI(PCIDeviceInfo)>:
c000b97a:	57                   	push   edi
c000b97b:	b9 09 00 00 00       	mov    ecx,0x9
c000b980:	56                   	push   esi
c000b981:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b985:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b989:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b993:	81 c7 18 01 00 00    	add    edi,0x118
c000b999:	fc                   	cld    
c000b99a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b99c:	5e                   	pop    esi
c000b99d:	5f                   	pop    edi
c000b99e:	c3                   	ret    
c000b99f:	90                   	nop

c000b9a0 <Device::preOpenACPI(void*, char*, char*)>:
c000b9a0:	57                   	push   edi
c000b9a1:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b9a6:	56                   	push   esi
c000b9a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9ab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9af:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b9b9:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b9bf:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b9c5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b9c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9cb:	b9 0e 00 00 00       	mov    ecx,0xe
c000b9d0:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b9d6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b9da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b9dc:	5e                   	pop    esi
c000b9dd:	5f                   	pop    edi
c000b9de:	c3                   	ret    
c000b9df:	90                   	nop

c000b9e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b9e0:	53                   	push   ebx
c000b9e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9e5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b9ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9f1:	0f b6 c0             	movzx  eax,al
c000b9f4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b9f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b9fc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba00:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba04:	5b                   	pop    ebx
c000ba05:	e9 a6 05 00 00       	jmp    c000bfb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000ba0a <Device::getParent()>:
c000ba0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba0e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000ba14:	c3                   	ret    
c000ba15:	90                   	nop

c000ba16 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ba16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba1e:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000ba23:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ba27:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ba2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ba2f:	e9 e8 06 00 00       	jmp    c000c11c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000ba34 <Device::addChild(Device*)>:
c000ba34:	53                   	push   ebx
c000ba35:	83 ec 08             	sub    esp,0x8
c000ba38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ba40:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000ba46:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000ba4c:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ba4e:	85 d2                	test   edx,edx
c000ba50:	74 04                	je     c000ba56 <Device::addChild(Device*)+0x22>
c000ba52:	89 d3                	mov    ebx,edx
c000ba54:	eb f6                	jmp    c000ba4c <Device::addChild(Device*)+0x18>
c000ba56:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ba59:	83 ec 0c             	sub    esp,0xc
c000ba5c:	6a 08                	push   0x8
c000ba5e:	e8 56 bd ff ff       	call   c00077b9 <malloc>
c000ba63:	89 03                	mov    DWORD PTR [ebx],eax
c000ba65:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ba6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ba72:	83 c4 18             	add    esp,0x18
c000ba75:	5b                   	pop    ebx
c000ba76:	c3                   	ret    
c000ba77:	90                   	nop

c000ba78 <Device::removeAllChildren()>:
c000ba78:	56                   	push   esi
c000ba79:	53                   	push   ebx
c000ba7a:	52                   	push   edx
c000ba7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ba7f:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ba85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba88:	74 17                	je     c000baa1 <Device::removeAllChildren()+0x29>
c000ba8a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ba8d:	85 c0                	test   eax,eax
c000ba8f:	74 0c                	je     c000ba9d <Device::removeAllChildren()+0x25>
c000ba91:	83 ec 0c             	sub    esp,0xc
c000ba94:	8b 10                	mov    edx,DWORD PTR [eax]
c000ba96:	50                   	push   eax
c000ba97:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba9f:	eb e4                	jmp    c000ba85 <Device::removeAllChildren()+0xd>
c000baa1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000baa7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000baad:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bab3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000baba:	58                   	pop    eax
c000babb:	5b                   	pop    ebx
c000babc:	5e                   	pop    esi
c000babd:	c3                   	ret    

c000babe <Device::hibernateAll()>:
c000babe:	53                   	push   ebx
c000babf:	83 ec 14             	sub    esp,0x14
c000bac2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bac6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bac8:	53                   	push   ebx
c000bac9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bacc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bad2:	83 c4 10             	add    esp,0x10
c000bad5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bad8:	74 0f                	je     c000bae9 <Device::hibernateAll()+0x2b>
c000bada:	83 ec 0c             	sub    esp,0xc
c000badd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bae0:	e8 d9 ff ff ff       	call   c000babe <Device::hibernateAll()>
c000bae5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bae7:	eb e9                	jmp    c000bad2 <Device::hibernateAll()+0x14>
c000bae9:	83 c4 08             	add    esp,0x8
c000baec:	5b                   	pop    ebx
c000baed:	c3                   	ret    

c000baee <Device::wakeAll()>:
c000baee:	53                   	push   ebx
c000baef:	83 ec 14             	sub    esp,0x14
c000baf2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000baf6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000baf8:	53                   	push   ebx
c000baf9:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bafc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb02:	83 c4 10             	add    esp,0x10
c000bb05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb08:	74 0f                	je     c000bb19 <Device::wakeAll()+0x2b>
c000bb0a:	83 ec 0c             	sub    esp,0xc
c000bb0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb10:	e8 d9 ff ff ff       	call   c000baee <Device::wakeAll()>
c000bb15:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb17:	eb e9                	jmp    c000bb02 <Device::wakeAll()+0x14>
c000bb19:	83 c4 08             	add    esp,0x8
c000bb1c:	5b                   	pop    ebx
c000bb1d:	c3                   	ret    

c000bb1e <Device::detectAll()>:
c000bb1e:	53                   	push   ebx
c000bb1f:	83 ec 14             	sub    esp,0x14
c000bb22:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb26:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb28:	53                   	push   ebx
c000bb29:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bb2c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb32:	83 c4 10             	add    esp,0x10
c000bb35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb38:	74 0f                	je     c000bb49 <Device::detectAll()+0x2b>
c000bb3a:	83 ec 0c             	sub    esp,0xc
c000bb3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb40:	e8 d9 ff ff ff       	call   c000bb1e <Device::detectAll()>
c000bb45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb47:	eb e9                	jmp    c000bb32 <Device::detectAll()+0x14>
c000bb49:	83 c4 08             	add    esp,0x8
c000bb4c:	5b                   	pop    ebx
c000bb4d:	c3                   	ret    

c000bb4e <Device::disableLegacyAll()>:
c000bb4e:	c3                   	ret    
c000bb4f:	90                   	nop

c000bb50 <Device::loadDriversForAll()>:
c000bb50:	c3                   	ret    
c000bb51:	90                   	nop

c000bb52 <Device::closeAll()>:
c000bb52:	53                   	push   ebx
c000bb53:	83 ec 08             	sub    esp,0x8
c000bb56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb5c:	6a 00                	push   0x0
c000bb5e:	6a 00                	push   0x0
c000bb60:	6a 00                	push   0x0
c000bb62:	53                   	push   ebx
c000bb63:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bb66:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bb6c:	83 c4 10             	add    esp,0x10
c000bb6f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bb72:	74 0f                	je     c000bb83 <Device::closeAll()+0x31>
c000bb74:	83 ec 0c             	sub    esp,0xc
c000bb77:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bb7a:	e8 d3 ff ff ff       	call   c000bb52 <Device::closeAll()>
c000bb7f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bb81:	eb e9                	jmp    c000bb6c <Device::closeAll()+0x1a>
c000bb83:	83 c4 08             	add    esp,0x8
c000bb86:	5b                   	pop    ebx
c000bb87:	c3                   	ret    

c000bb88 <Device::powerSavingAll(PowerSavingLevel)>:
c000bb88:	56                   	push   esi
c000bb89:	53                   	push   ebx
c000bb8a:	83 ec 0c             	sub    esp,0xc
c000bb8d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb91:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bb95:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bb97:	56                   	push   esi
c000bb98:	53                   	push   ebx
c000bb99:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bb9c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bba2:	83 c4 10             	add    esp,0x10
c000bba5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bba8:	74 0f                	je     c000bbb9 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bbaa:	52                   	push   edx
c000bbab:	52                   	push   edx
c000bbac:	56                   	push   esi
c000bbad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bbb0:	e8 d3 ff ff ff       	call   c000bb88 <Device::powerSavingAll(PowerSavingLevel)>
c000bbb5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbb7:	eb e9                	jmp    c000bba2 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bbb9:	58                   	pop    eax
c000bbba:	5b                   	pop    ebx
c000bbbb:	5e                   	pop    esi
c000bbbc:	c3                   	ret    
c000bbbd:	90                   	nop

c000bbbe <Device::setName(char const*)>:
c000bbbe:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bbc6:	e9 35 4a ff ff       	jmp    c0000600 <strcpy>
c000bbcb:	90                   	nop

c000bbcc <Device::Device(char const*)>:
c000bbcc:	83 ec 1c             	sub    esp,0x1c
c000bbcf:	ba f0 df 01 c0       	mov    edx,0xc001dff0
c000bbd4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbd8:	89 10                	mov    DWORD PTR [eax],edx
c000bbda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbde:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bbe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbec:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bbf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bbfa:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc08:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bc12:	83 ec 08             	sub    esp,0x8
c000bc15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc1d:	e8 9c ff ff ff       	call   c000bbbe <Device::setName(char const*)>
c000bc22:	83 c4 10             	add    esp,0x10
c000bc25:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc34:	e8 80 bb ff ff       	call   c00077b9 <malloc>
c000bc39:	83 c4 10             	add    esp,0x10
c000bc3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc49:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bc4d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bc53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc57:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bc63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc67:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bc6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc74:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc78:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bc7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc83:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bc8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc8e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bc98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bc9c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcaa:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bcb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bcb8:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bcc2:	90                   	nop
c000bcc3:	83 c4 1c             	add    esp,0x1c
c000bcc6:	c3                   	ret    
c000bcc7:	90                   	nop

c000bcc8 <Device::getName()>:
c000bcc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bccc:	05 d0 00 00 00       	add    eax,0xd0
c000bcd1:	c3                   	ret    

c000bcd2 <DriverlessDevice::DriverlessDevice(char const*)>:
c000bcd2:	83 ec 0c             	sub    esp,0xc
c000bcd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd9:	83 ec 08             	sub    esp,0x8
c000bcdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bce0:	50                   	push   eax
c000bce1:	e8 e6 fe ff ff       	call   c000bbcc <Device::Device(char const*)>
c000bce6:	83 c4 10             	add    esp,0x10
c000bce9:	ba 1c e0 01 c0       	mov    edx,0xc001e01c
c000bcee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf2:	89 10                	mov    DWORD PTR [eax],edx
c000bcf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bd02:	90                   	nop
c000bd03:	83 c4 0c             	add    esp,0xc
c000bd06:	c3                   	ret    
c000bd07:	90                   	nop

c000bd08 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bd08:	57                   	push   edi
c000bd09:	56                   	push   esi
c000bd0a:	53                   	push   ebx
c000bd0b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd0f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bd13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bd17:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bd1d:	75 0c                	jne    c000bd2b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bd1f:	52                   	push   edx
c000bd20:	52                   	push   edx
c000bd21:	53                   	push   ebx
c000bd22:	56                   	push   esi
c000bd23:	e8 5a 09 01 00       	call   c001c682 <LinkedList<Device>::addElement(Device*)>
c000bd28:	83 c4 10             	add    esp,0x10
c000bd2b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bd31:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bd34:	74 12                	je     c000bd48 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bd36:	50                   	push   eax
c000bd37:	57                   	push   edi
c000bd38:	56                   	push   esi
c000bd39:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bd3c:	e8 c7 ff ff ff       	call   c000bd08 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd41:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bd43:	83 c4 10             	add    esp,0x10
c000bd46:	eb e9                	jmp    c000bd31 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bd48:	5b                   	pop    ebx
c000bd49:	5e                   	pop    esi
c000bd4a:	5f                   	pop    edi
c000bd4b:	c3                   	ret    

c000bd4c <getDevicesOfType(DeviceType)>:
c000bd4c:	53                   	push   ebx
c000bd4d:	83 ec 14             	sub    esp,0x14
c000bd50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd54:	53                   	push   ebx
c000bd55:	e8 04 0a 01 00       	call   c001c75e <LinkedList<Device>::LinkedList()>
c000bd5a:	83 c4 0c             	add    esp,0xc
c000bd5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd61:	53                   	push   ebx
c000bd62:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000bd68:	e8 9b ff ff ff       	call   c000bd08 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bd6d:	89 d8                	mov    eax,ebx
c000bd6f:	83 c4 18             	add    esp,0x18
c000bd72:	5b                   	pop    ebx
c000bd73:	c2 04 00             	ret    0x4
c000bd76:	66 90                	xchg   ax,ax

c000bd78 <HardDiskController::HardDiskController(char const*)>:
c000bd78:	83 ec 0c             	sub    esp,0xc
c000bd7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd7f:	83 ec 08             	sub    esp,0x8
c000bd82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd86:	50                   	push   eax
c000bd87:	e8 40 fe ff ff       	call   c000bbcc <Device::Device(char const*)>
c000bd8c:	83 c4 10             	add    esp,0x10
c000bd8f:	ba 48 e0 01 c0       	mov    edx,0xc001e048
c000bd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd98:	89 10                	mov    DWORD PTR [eax],edx
c000bd9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd9e:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bda8:	90                   	nop
c000bda9:	83 c4 0c             	add    esp,0xc
c000bdac:	c3                   	ret    
c000bdad:	90                   	nop
c000bdae:	66 90                	xchg   ax,ax

c000bdb0 <HardDiskController::~HardDiskController()>:
c000bdb0:	83 ec 0c             	sub    esp,0xc
c000bdb3:	ba 48 e0 01 c0       	mov    edx,0xc001e048
c000bdb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdbc:	89 10                	mov    DWORD PTR [eax],edx
c000bdbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc2:	83 ec 0c             	sub    esp,0xc
c000bdc5:	50                   	push   eax
c000bdc6:	e8 6b fb ff ff       	call   c000b936 <Device::~Device()>
c000bdcb:	83 c4 10             	add    esp,0x10
c000bdce:	90                   	nop
c000bdcf:	83 c4 0c             	add    esp,0xc
c000bdd2:	c3                   	ret    
c000bdd3:	90                   	nop

c000bdd4 <HardDiskController::~HardDiskController()>:
c000bdd4:	83 ec 0c             	sub    esp,0xc
c000bdd7:	83 ec 0c             	sub    esp,0xc
c000bdda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdde:	e8 cd ff ff ff       	call   c000bdb0 <HardDiskController::~HardDiskController()>
c000bde3:	83 c4 10             	add    esp,0x10
c000bde6:	83 ec 08             	sub    esp,0x8
c000bde9:	68 58 01 00 00       	push   0x158
c000bdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdf2:	e8 07 e7 ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000bdf7:	83 c4 10             	add    esp,0x10
c000bdfa:	83 c4 0c             	add    esp,0xc
c000bdfd:	c3                   	ret    

c000bdfe <PhysicalDisk::eject()>:
c000bdfe:	83 c8 ff             	or     eax,0xffffffff
c000be01:	c3                   	ret    

c000be02 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000be02:	83 ec 0c             	sub    esp,0xc
c000be05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be09:	83 ec 08             	sub    esp,0x8
c000be0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be10:	50                   	push   eax
c000be11:	e8 b6 fd ff ff       	call   c000bbcc <Device::Device(char const*)>
c000be16:	83 c4 10             	add    esp,0x10
c000be19:	ba 74 e0 01 c0       	mov    edx,0xc001e074
c000be1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be22:	89 10                	mov    DWORD PTR [eax],edx
c000be24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be28:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000be2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be33:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000be3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be3e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000be48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000be50:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000be56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000be64:	90                   	nop
c000be65:	83 c4 0c             	add    esp,0xc
c000be68:	c3                   	ret    
c000be69:	90                   	nop

c000be6a <PhysicalDisk::startCache()>:
c000be6a:	56                   	push   esi
c000be6b:	53                   	push   ebx
c000be6c:	83 ec 10             	sub    esp,0x10
c000be6f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be73:	6a 44                	push   0x44
c000be75:	e8 3f b9 ff ff       	call   c00077b9 <malloc>
c000be7a:	89 c6                	mov    esi,eax
c000be7c:	58                   	pop    eax
c000be7d:	5a                   	pop    edx
c000be7e:	53                   	push   ebx
c000be7f:	56                   	push   esi
c000be80:	e8 eb 15 00 00       	call   c000d470 <VCache::VCache(PhysicalDisk*)>
c000be85:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000be8b:	83 c4 14             	add    esp,0x14
c000be8e:	5b                   	pop    ebx
c000be8f:	5e                   	pop    esi
c000be90:	c3                   	ret    
c000be91:	90                   	nop

c000be92 <PhysicalDisk::~PhysicalDisk()>:
c000be92:	83 ec 0c             	sub    esp,0xc
c000be95:	ba 74 e0 01 c0       	mov    edx,0xc001e074
c000be9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be9e:	89 10                	mov    DWORD PTR [eax],edx
c000bea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bea4:	83 ec 0c             	sub    esp,0xc
c000bea7:	50                   	push   eax
c000bea8:	e8 89 fa ff ff       	call   c000b936 <Device::~Device()>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	90                   	nop
c000beb1:	83 c4 0c             	add    esp,0xc
c000beb4:	c3                   	ret    
c000beb5:	90                   	nop

c000beb6 <PhysicalDisk::~PhysicalDisk()>:
c000beb6:	83 ec 0c             	sub    esp,0xc
c000beb9:	83 ec 0c             	sub    esp,0xc
c000bebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bec0:	e8 cd ff ff ff       	call   c000be92 <PhysicalDisk::~PhysicalDisk()>
c000bec5:	83 c4 10             	add    esp,0x10
c000bec8:	83 ec 08             	sub    esp,0x8
c000becb:	68 6c 01 00 00       	push   0x16c
c000bed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bed4:	e8 25 e6 ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000bed9:	83 c4 10             	add    esp,0x10
c000bedc:	83 c4 0c             	add    esp,0xc
c000bedf:	c3                   	ret    

c000bee0 <int_handler>:
c000bee0:	55                   	push   ebp
c000bee1:	57                   	push   edi
c000bee2:	56                   	push   esi
c000bee3:	53                   	push   ebx
c000bee4:	83 ec 0c             	sub    esp,0xc
c000bee7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000beeb:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000bef2:	74 0b                	je     c000beff <int_handler+0x1f>
c000bef4:	fa                   	cli    
c000bef5:	f4                   	hlt    
c000bef6:	80 3d 38 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024938,0x0
c000befd:	75 f5                	jne    c000bef4 <int_handler+0x14>
c000beff:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bf02:	8d 46 e0             	lea    eax,[esi-0x20]
c000bf05:	83 f8 17             	cmp    eax,0x17
c000bf08:	76 3e                	jbe    c000bf48 <int_handler+0x68>
c000bf0a:	c1 e6 04             	shl    esi,0x4
c000bf0d:	31 db                	xor    ebx,ebx
c000bf0f:	8d ae c0 2f 02 c0    	lea    ebp,[esi-0x3ffdd040]
c000bf15:	81 c6 c0 1f 02 c0    	add    esi,0xc0021fc0
c000bf1b:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000bf1f:	85 c0                	test   eax,eax
c000bf21:	74 13                	je     c000bf36 <int_handler+0x56>
c000bf23:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000bf26:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000bf2a:	74 2a                	je     c000bf56 <int_handler+0x76>
c000bf2c:	83 ec 08             	sub    esp,0x8
c000bf2f:	52                   	push   edx
c000bf30:	57                   	push   edi
c000bf31:	ff d0                	call   eax
c000bf33:	83 c4 10             	add    esp,0x10
c000bf36:	43                   	inc    ebx
c000bf37:	83 fb 04             	cmp    ebx,0x4
c000bf3a:	75 df                	jne    c000bf1b <int_handler+0x3b>
c000bf3c:	83 c4 0c             	add    esp,0xc
c000bf3f:	31 c0                	xor    eax,eax
c000bf41:	5b                   	pop    ebx
c000bf42:	31 d2                	xor    edx,edx
c000bf44:	5e                   	pop    esi
c000bf45:	5f                   	pop    edi
c000bf46:	5d                   	pop    ebp
c000bf47:	c3                   	ret    
c000bf48:	83 ec 0c             	sub    esp,0xc
c000bf4b:	50                   	push   eax
c000bf4c:	e8 0a 9a 00 00       	call   c001595b <HalEndOfInterrupt(int)>
c000bf51:	83 c4 10             	add    esp,0x10
c000bf54:	eb b4                	jmp    c000bf0a <int_handler+0x2a>
c000bf56:	83 ec 08             	sub    esp,0x8
c000bf59:	52                   	push   edx
c000bf5a:	57                   	push   edi
c000bf5b:	ff d0                	call   eax
c000bf5d:	83 c4 10             	add    esp,0x10
c000bf60:	83 c4 0c             	add    esp,0xc
c000bf63:	5b                   	pop    ebx
c000bf64:	5e                   	pop    esi
c000bf65:	5f                   	pop    edi
c000bf66:	5d                   	pop    ebp
c000bf67:	c3                   	ret    

c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000bf68:	56                   	push   esi
c000bf69:	31 c0                	xor    eax,eax
c000bf6b:	53                   	push   ebx
c000bf6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000bf70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bf74:	89 ca                	mov    edx,ecx
c000bf76:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bf7a:	c1 e2 04             	shl    edx,0x4
c000bf7d:	83 bc 82 c0 2f 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdd040],0x0
c000bf85:	74 15                	je     c000bf9c <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000bf87:	40                   	inc    eax
c000bf88:	83 f8 04             	cmp    eax,0x4
c000bf8b:	75 f0                	jne    c000bf7d <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000bf8d:	c7 44 24 0c a4 e0 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e0a4
c000bf95:	5b                   	pop    ebx
c000bf96:	5e                   	pop    esi
c000bf97:	e9 db 42 00 00       	jmp    c0010277 <KePanic(char const*)>
c000bf9c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000bf9f:	89 1c 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],ebx
c000bfa6:	89 34 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],esi
c000bfad:	5b                   	pop    ebx
c000bfae:	5e                   	pop    esi
c000bfaf:	c3                   	ret    

c000bfb0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bfb0:	57                   	push   edi
c000bfb1:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000bfb7:	56                   	push   esi
c000bfb8:	53                   	push   ebx
c000bfb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bfbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bfc1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000bfc8:	74 5b                	je     c000c025 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bfca:	89 c7                	mov    edi,eax
c000bfcc:	84 c0                	test   al,al
c000bfce:	74 24                	je     c000bff4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfd0:	83 fe 0f             	cmp    esi,0xf
c000bfd3:	0f 8f d9 00 00 00    	jg     c000c0b2 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bfd9:	8a 86 e0 f8 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0720]
c000bfdf:	25 ff 00 00 00       	and    eax,0xff
c000bfe4:	66 8b bc 00 60 47 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdb8a0]
c000bfec:	89 c6                	mov    esi,eax
c000bfee:	66 d1 ef             	shr    di,1
c000bff1:	83 e7 01             	and    edi,0x1
c000bff4:	83 ec 08             	sub    esp,0x8
c000bff7:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000bffc:	31 db                	xor    ebx,ebx
c000bffe:	50                   	push   eax
c000bfff:	68 b1 e0 01 c0       	push   0xc001e0b1
c000c004:	e8 eb e5 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000c009:	83 c4 10             	add    esp,0x10
c000c00c:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c000c011:	85 c0                	test   eax,eax
c000c013:	7f 51                	jg     c000c066 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c015:	83 ec 0c             	sub    esp,0xc
c000c018:	68 c8 e0 01 c0       	push   0xc001e0c8
c000c01d:	e8 55 42 00 00       	call   c0010277 <KePanic(char const*)>
c000c022:	83 c4 10             	add    esp,0x10
c000c025:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c028:	31 d2                	xor    edx,edx
c000c02a:	89 c8                	mov    eax,ecx
c000c02c:	c1 e0 04             	shl    eax,0x4
c000c02f:	8b 9c 90 c0 2f 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdd040]
c000c036:	85 db                	test   ebx,ebx
c000c038:	0f 84 8b 00 00 00    	je     c000c0c9 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c03e:	42                   	inc    edx
c000c03f:	83 fa 04             	cmp    edx,0x4
c000c042:	75 eb                	jne    c000c02f <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c044:	83 ec 0c             	sub    esp,0xc
c000c047:	68 1c e1 01 c0       	push   0xc001e11c
c000c04c:	e8 26 42 00 00       	call   c0010277 <KePanic(char const*)>
c000c051:	83 c4 10             	add    esp,0x10
c000c054:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c059:	5b                   	pop    ebx
c000c05a:	5e                   	pop    esi
c000c05b:	5f                   	pop    edi
c000c05c:	c3                   	ret    
c000c05d:	43                   	inc    ebx
c000c05e:	39 1d 60 5b 02 c0    	cmp    DWORD PTR ds:0xc0025b60,ebx
c000c064:	7e af                	jle    c000c015 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c066:	83 ec 08             	sub    esp,0x8
c000c069:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c070:	56                   	push   esi
c000c071:	50                   	push   eax
c000c072:	e8 d1 f5 00 00       	call   c001b648 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c077:	83 c4 10             	add    esp,0x10
c000c07a:	84 c0                	test   al,al
c000c07c:	74 df                	je     c000c05d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c07e:	81 e7 ff 00 00 00    	and    edi,0xff
c000c084:	50                   	push   eax
c000c085:	8d 46 20             	lea    eax,[esi+0x20]
c000c088:	57                   	push   edi
c000c089:	25 ff 00 00 00       	and    eax,0xff
c000c08e:	6a 00                	push   0x0
c000c090:	50                   	push   eax
c000c091:	89 f0                	mov    eax,esi
c000c093:	6a 00                	push   0x0
c000c095:	25 ff 00 00 00       	and    eax,0xff
c000c09a:	6a 00                	push   0x0
c000c09c:	50                   	push   eax
c000c09d:	8b 04 9d 80 5b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda480]
c000c0a4:	50                   	push   eax
c000c0a5:	e8 18 f7 00 00       	call   c001b7c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c0aa:	83 c4 20             	add    esp,0x20
c000c0ad:	e9 73 ff ff ff       	jmp    c000c025 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0b2:	83 ec 0c             	sub    esp,0xc
c000c0b5:	31 ff                	xor    edi,edi
c000c0b7:	68 e4 e0 01 c0       	push   0xc001e0e4
c000c0bc:	e8 b6 41 00 00       	call   c0010277 <KePanic(char const*)>
c000c0c1:	83 c4 10             	add    esp,0x10
c000c0c4:	e9 2b ff ff ff       	jmp    c000bff4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c0c9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c0cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c0d0:	89 14 85 c0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd040],edx
c000c0d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0db:	5b                   	pop    ebx
c000c0dc:	89 14 85 c0 1f 02 c0 	mov    DWORD PTR [eax*4-0x3ffde040],edx
c000c0e3:	89 f0                	mov    eax,esi
c000c0e5:	5e                   	pop    esi
c000c0e6:	5f                   	pop    edi
c000c0e7:	c3                   	ret    

c000c0e8 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c0e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c0ec:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c0f0:	c1 e0 04             	shl    eax,0x4
c000c0f3:	8d 50 10             	lea    edx,[eax+0x10]
c000c0f6:	39 88 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ecx
c000c0fc:	74 08                	je     c000c106 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c0fe:	83 c0 04             	add    eax,0x4
c000c101:	39 d0                	cmp    eax,edx
c000c103:	75 f1                	jne    c000c0f6 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c105:	c3                   	ret    
c000c106:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c110:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c11a:	eb e2                	jmp    c000c0fe <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c11c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c11c:	53                   	push   ebx
c000c11d:	83 ec 08             	sub    esp,0x8
c000c120:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c124:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c129:	74 0e                	je     c000c139 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c12b:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000c130:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c137:	75 37                	jne    c000c170 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13d:	83 c0 20             	add    eax,0x20
c000c140:	c1 e0 04             	shl    eax,0x4
c000c143:	8d 50 10             	lea    edx,[eax+0x10]
c000c146:	39 98 c0 2f 02 c0    	cmp    DWORD PTR [eax-0x3ffdd040],ebx
c000c14c:	74 0c                	je     c000c15a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c14e:	83 c0 04             	add    eax,0x4
c000c151:	39 d0                	cmp    eax,edx
c000c153:	75 f1                	jne    c000c146 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c155:	83 c4 08             	add    esp,0x8
c000c158:	5b                   	pop    ebx
c000c159:	c3                   	ret    
c000c15a:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c164:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c16e:	eb de                	jmp    c000c14e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c170:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c175:	7f 12                	jg     c000c189 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c177:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c17b:	31 c0                	xor    eax,eax
c000c17d:	8a 81 e0 f8 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0720]
c000c183:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c187:	eb b0                	jmp    c000c139 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c189:	83 ec 0c             	sub    esp,0xc
c000c18c:	68 d5 e0 01 c0       	push   0xc001e0d5
c000c191:	e8 e1 40 00 00       	call   c0010277 <KePanic(char const*)>
c000c196:	83 c4 10             	add    esp,0x10
c000c199:	eb 9e                	jmp    c000c139 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c19b <setupINTS()>:
c000c19b:	31 c0                	xor    eax,eax
c000c19d:	c7 80 c0 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd040],0x0
c000c1a7:	c7 80 c0 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde040],0x0
c000c1b1:	c7 80 c4 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd03c],0x0
c000c1bb:	c7 80 c4 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde03c],0x0
c000c1c5:	c7 80 c8 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd038],0x0
c000c1cf:	c7 80 c8 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde038],0x0
c000c1d9:	c7 80 cc 2f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdd034],0x0
c000c1e3:	c7 80 cc 1f 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffde034],0x0
c000c1ed:	83 c0 10             	add    eax,0x10
c000c1f0:	3d 00 10 00 00       	cmp    eax,0x1000
c000c1f5:	75 a6                	jne    c000c19d <setupINTS()+0x2>
c000c1f7:	c3                   	ret    

c000c1f8 <convertLegacyIRQNumber(int)>:
c000c1f8:	83 ec 0c             	sub    esp,0xc
c000c1fb:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000c201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c205:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c20c:	74 0f                	je     c000c21d <convertLegacyIRQNumber(int)+0x25>
c000c20e:	83 f8 0f             	cmp    eax,0xf
c000c211:	7f 0e                	jg     c000c221 <convertLegacyIRQNumber(int)+0x29>
c000c213:	31 c9                	xor    ecx,ecx
c000c215:	8a 88 e0 f8 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0720]
c000c21b:	89 c8                	mov    eax,ecx
c000c21d:	83 c4 0c             	add    esp,0xc
c000c220:	c3                   	ret    
c000c221:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c225:	83 ec 0c             	sub    esp,0xc
c000c228:	68 e4 e0 01 c0       	push   0xc001e0e4
c000c22d:	e8 45 40 00 00       	call   c0010277 <KePanic(char const*)>
c000c232:	83 c4 10             	add    esp,0x10
c000c235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c239:	83 c4 0c             	add    esp,0xc
c000c23c:	c3                   	ret    
c000c23d:	90                   	nop

c000c23e <startGUI(void*)>:
c000c23e:	55                   	push   ebp
c000c23f:	89 e5                	mov    ebp,esp
c000c241:	53                   	push   ebx
c000c242:	83 ec 04             	sub    esp,0x4
c000c245:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c24a:	48                   	dec    eax
c000c24b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c250:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c255:	85 c0                	test   eax,eax
c000c257:	75 01                	jne    c000c25a <startGUI(void*)+0x1c>
c000c259:	fb                   	sti    
c000c25a:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c260:	83 ec 08             	sub    esp,0x8
c000c263:	6a 01                	push   0x1
c000c265:	68 41 e1 01 c0       	push   0xc001e141
c000c26a:	e8 d2 6b 00 00       	call   c0012e41 <Thr::loadDLL(char const*, bool)>
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	83 ec 08             	sub    esp,0x8
c000c275:	53                   	push   ebx
c000c276:	50                   	push   eax
c000c277:	e8 f6 6d 00 00       	call   c0013072 <Thr::executeDLL(unsigned long, void*)>
c000c27c:	83 c4 10             	add    esp,0x10
c000c27f:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c285:	83 ec 08             	sub    esp,0x8
c000c288:	6a 01                	push   0x1
c000c28a:	68 5b e1 01 c0       	push   0xc001e15b
c000c28f:	e8 ad 6b 00 00       	call   c0012e41 <Thr::loadDLL(char const*, bool)>
c000c294:	83 c4 10             	add    esp,0x10
c000c297:	83 ec 08             	sub    esp,0x8
c000c29a:	53                   	push   ebx
c000c29b:	50                   	push   eax
c000c29c:	e8 d1 6d 00 00       	call   c0013072 <Thr::executeDLL(unsigned long, void*)>
c000c2a1:	83 c4 10             	add    esp,0x10
c000c2a4:	90                   	nop
c000c2a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c2a8:	c9                   	leave  
c000c2a9:	c3                   	ret    

c000c2aa <startGUIVESA(void*)>:
c000c2aa:	55                   	push   ebp
c000c2ab:	89 e5                	mov    ebp,esp
c000c2ad:	53                   	push   ebx
c000c2ae:	83 ec 04             	sub    esp,0x4
c000c2b1:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2b6:	48                   	dec    eax
c000c2b7:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c2bc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c2c1:	85 c0                	test   eax,eax
c000c2c3:	75 01                	jne    c000c2c6 <startGUIVESA(void*)+0x1c>
c000c2c5:	fb                   	sti    
c000c2c6:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c2cc:	83 ec 08             	sub    esp,0x8
c000c2cf:	6a 01                	push   0x1
c000c2d1:	68 79 e1 01 c0       	push   0xc001e179
c000c2d6:	e8 66 6b 00 00       	call   c0012e41 <Thr::loadDLL(char const*, bool)>
c000c2db:	83 c4 10             	add    esp,0x10
c000c2de:	83 ec 08             	sub    esp,0x8
c000c2e1:	53                   	push   ebx
c000c2e2:	50                   	push   eax
c000c2e3:	e8 8a 6d 00 00       	call   c0013072 <Thr::executeDLL(unsigned long, void*)>
c000c2e8:	83 c4 10             	add    esp,0x10
c000c2eb:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000c2f1:	83 ec 08             	sub    esp,0x8
c000c2f4:	6a 01                	push   0x1
c000c2f6:	68 5b e1 01 c0       	push   0xc001e15b
c000c2fb:	e8 41 6b 00 00       	call   c0012e41 <Thr::loadDLL(char const*, bool)>
c000c300:	83 c4 10             	add    esp,0x10
c000c303:	83 ec 08             	sub    esp,0x8
c000c306:	53                   	push   ebx
c000c307:	50                   	push   eax
c000c308:	e8 65 6d 00 00       	call   c0013072 <Thr::executeDLL(unsigned long, void*)>
c000c30d:	83 c4 10             	add    esp,0x10
c000c310:	90                   	nop
c000c311:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c314:	c9                   	leave  
c000c315:	c3                   	ret    

c000c316 <sendKeyToTerminal(unsigned char)>:
c000c316:	55                   	push   ebp
c000c317:	89 e5                	mov    ebp,esp
c000c319:	83 ec 28             	sub    esp,0x28
c000c31c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c31f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c322:	8b 15 04 1f 02 c0    	mov    edx,DWORD PTR ds:0xc0021f04
c000c328:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c32b:	25 ff 00 00 00       	and    eax,0xff
c000c330:	83 ec 08             	sub    esp,0x8
c000c333:	50                   	push   eax
c000c334:	52                   	push   edx
c000c335:	e8 0c c7 ff ff       	call   c0008a46 <VgaText::receiveKey(unsigned char)>
c000c33a:	83 c4 10             	add    esp,0x10
c000c33d:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c341:	74 0a                	je     c000c34d <sendKeyToTerminal(unsigned char)+0x37>
c000c343:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c347:	0f 85 8f 00 00 00    	jne    c000c3dc <sendKeyToTerminal(unsigned char)+0xc6>
c000c34d:	fa                   	cli    
c000c34e:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c353:	40                   	inc    eax
c000c354:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c359:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c35e:	40                   	inc    eax
c000c35f:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c364:	a1 c0 3f 02 c0       	mov    eax,ds:0xc0023fc0
c000c369:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c36c:	c7 05 c0 3f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023fc0,0x0
c000c376:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c37a:	74 1f                	je     c000c39b <sendKeyToTerminal(unsigned char)+0x85>
c000c37c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c37f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c382:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c385:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c388:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c38b:	83 ec 0c             	sub    esp,0xc
c000c38e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c391:	e8 9a 79 00 00       	call   c0013d30 <unblockTask(ThreadControlBlock*)>
c000c396:	83 c4 10             	add    esp,0x10
c000c399:	eb db                	jmp    c000c376 <sendKeyToTerminal(unsigned char)+0x60>
c000c39b:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c3a0:	48                   	dec    eax
c000c3a1:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000c3a6:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000c3ab:	85 c0                	test   eax,eax
c000c3ad:	75 18                	jne    c000c3c7 <sendKeyToTerminal(unsigned char)+0xb1>
c000c3af:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c000c3b4:	85 c0                	test   eax,eax
c000c3b6:	74 0f                	je     c000c3c7 <sendKeyToTerminal(unsigned char)+0xb1>
c000c3b8:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000c3c2:	e8 a5 74 00 00       	call   c001386c <schedule()>
c000c3c7:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c3cc:	48                   	dec    eax
c000c3cd:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c3d2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c3d7:	85 c0                	test   eax,eax
c000c3d9:	75 01                	jne    c000c3dc <sendKeyToTerminal(unsigned char)+0xc6>
c000c3db:	fb                   	sti    
c000c3dc:	90                   	nop
c000c3dd:	c9                   	leave  
c000c3de:	c3                   	ret    

c000c3df <sendKeyboardToken(KeyboardToken)>:
c000c3df:	55                   	push   ebp
c000c3e0:	89 e5                	mov    ebp,esp
c000c3e2:	83 ec 18             	sub    esp,0x18
c000c3e5:	e8 dd 3e 00 00       	call   c00102c7 <Krnl::userIOReceived()>
c000c3ea:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3f0:	25 ff ff 00 00       	and    eax,0xffff
c000c3f5:	83 f2 01             	xor    edx,0x1
c000c3f8:	88 90 e0 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc020],dl
c000c3fe:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c403:	85 c0                	test   eax,eax
c000c405:	74 24                	je     c000c42b <sendKeyboardToken(KeyboardToken)+0x4c>
c000c407:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c40d:	83 ec 04             	sub    esp,0x4
c000c410:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c415:	83 ec 08             	sub    esp,0x8
c000c418:	89 e2                	mov    edx,esp
c000c41a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c41d:	89 02                	mov    DWORD PTR [edx],eax
c000c41f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c422:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c426:	ff d1                	call   ecx
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c42f:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c432:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c437:	38 c2                	cmp    dl,al
c000c439:	74 1e                	je     c000c459 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c43b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c43e:	a2 e8 43 02 c0       	mov    ds:0xc00243e8,al
c000c443:	a0 e8 43 02 c0       	mov    al,ds:0xc00243e8
c000c448:	25 ff 00 00 00       	and    eax,0xff
c000c44d:	83 ec 0c             	sub    esp,0xc
c000c450:	50                   	push   eax
c000c451:	e8 42 bd ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c456:	83 c4 10             	add    esp,0x10
c000c459:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c45c:	84 c0                	test   al,al
c000c45e:	0f 84 ae 00 00 00    	je     c000c512 <sendKeyboardToken(KeyboardToken)+0x133>
c000c464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c467:	66 3d 10 03          	cmp    ax,0x310
c000c46b:	75 06                	jne    c000c473 <sendKeyboardToken(KeyboardToken)+0x94>
c000c46d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c476:	66 3d 11 03          	cmp    ax,0x311
c000c47a:	75 06                	jne    c000c482 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c47c:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c485:	66 3d 12 03          	cmp    ax,0x312
c000c489:	75 06                	jne    c000c491 <sendKeyboardToken(KeyboardToken)+0xb2>
c000c48b:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c494:	66 3d 13 03          	cmp    ax,0x313
c000c498:	75 06                	jne    c000c4a0 <sendKeyboardToken(KeyboardToken)+0xc1>
c000c49a:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c4a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4a3:	66 3d 14 03          	cmp    ax,0x314
c000c4a7:	75 06                	jne    c000c4af <sendKeyboardToken(KeyboardToken)+0xd0>
c000c4a9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c4af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4b2:	66 3d 15 03          	cmp    ax,0x315
c000c4b6:	75 06                	jne    c000c4be <sendKeyboardToken(KeyboardToken)+0xdf>
c000c4b8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c4be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4c1:	66 3d 16 03          	cmp    ax,0x316
c000c4c5:	75 06                	jne    c000c4cd <sendKeyboardToken(KeyboardToken)+0xee>
c000c4c7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4d0:	66 3d 17 03          	cmp    ax,0x317
c000c4d4:	75 06                	jne    c000c4dc <sendKeyboardToken(KeyboardToken)+0xfd>
c000c4d6:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c4dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4df:	66 3d 18 03          	cmp    ax,0x318
c000c4e3:	75 06                	jne    c000c4eb <sendKeyboardToken(KeyboardToken)+0x10c>
c000c4e5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c4eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ee:	66 3d 19 03          	cmp    ax,0x319
c000c4f2:	75 06                	jne    c000c4fa <sendKeyboardToken(KeyboardToken)+0x11b>
c000c4f4:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c4fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4fd:	66 3d 1a 03          	cmp    ax,0x31a
c000c501:	0f 85 c9 00 00 00    	jne    c000c5d0 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c507:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c50d:	e9 be 00 00 00       	jmp    c000c5d0 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c512:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c515:	66 3d 10 03          	cmp    ax,0x310
c000c519:	75 0a                	jne    c000c525 <sendKeyboardToken(KeyboardToken)+0x146>
c000c51b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c521:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c525:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c528:	66 3d 11 03          	cmp    ax,0x311
c000c52c:	75 0a                	jne    c000c538 <sendKeyboardToken(KeyboardToken)+0x159>
c000c52e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c534:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c538:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c53b:	66 3d 12 03          	cmp    ax,0x312
c000c53f:	75 0a                	jne    c000c54b <sendKeyboardToken(KeyboardToken)+0x16c>
c000c541:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c547:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c54b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54e:	66 3d 13 03          	cmp    ax,0x313
c000c552:	75 0a                	jne    c000c55e <sendKeyboardToken(KeyboardToken)+0x17f>
c000c554:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c55a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c55e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c561:	66 3d 14 03          	cmp    ax,0x314
c000c565:	75 0a                	jne    c000c571 <sendKeyboardToken(KeyboardToken)+0x192>
c000c567:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c56d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c574:	66 3d 15 03          	cmp    ax,0x315
c000c578:	75 0a                	jne    c000c584 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c57a:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c580:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c587:	66 3d 16 03          	cmp    ax,0x316
c000c58b:	75 0a                	jne    c000c597 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c58d:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c593:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c597:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c59a:	66 3d 17 03          	cmp    ax,0x317
c000c59e:	75 0a                	jne    c000c5aa <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c5a0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c5a6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ad:	66 3d 18 03          	cmp    ax,0x318
c000c5b1:	75 0a                	jne    c000c5bd <sendKeyboardToken(KeyboardToken)+0x1de>
c000c5b3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c5b9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c0:	66 3d 19 03          	cmp    ax,0x319
c000c5c4:	75 0a                	jne    c000c5d0 <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c5c6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c5cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c5d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d3:	66 3d 00 02          	cmp    ax,0x200
c000c5d7:	75 2c                	jne    c000c605 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5d9:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c5de:	83 f0 01             	xor    eax,0x1
c000c5e1:	84 c0                	test   al,al
c000c5e3:	74 20                	je     c000c605 <sendKeyboardToken(KeyboardToken)+0x226>
c000c5e5:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c5ea:	6a 01                	push   0x1
c000c5ec:	6a 00                	push   0x0
c000c5ee:	68 3e c2 00 c0       	push   0xc000c23e
c000c5f3:	50                   	push   eax
c000c5f4:	e8 53 70 00 00       	call   c001364c <Process::createThread(void (*)(void*), void*, int)>
c000c5f9:	83 c4 10             	add    esp,0x10
c000c5fc:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c603:	eb 33                	jmp    c000c638 <sendKeyboardToken(KeyboardToken)+0x259>
c000c605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c608:	66 3d 01 02          	cmp    ax,0x201
c000c60c:	75 2a                	jne    c000c638 <sendKeyboardToken(KeyboardToken)+0x259>
c000c60e:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c000c613:	83 f0 01             	xor    eax,0x1
c000c616:	84 c0                	test   al,al
c000c618:	74 1e                	je     c000c638 <sendKeyboardToken(KeyboardToken)+0x259>
c000c61a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000c61f:	6a 01                	push   0x1
c000c621:	6a 00                	push   0x0
c000c623:	68 aa c2 00 c0       	push   0xc000c2aa
c000c628:	50                   	push   eax
c000c629:	e8 1e 70 00 00       	call   c001364c <Process::createThread(void (*)(void*), void*, int)>
c000c62e:	83 c4 10             	add    esp,0x10
c000c631:	c6 05 e0 43 02 c0 01 	mov    BYTE PTR ds:0xc00243e0,0x1
c000c638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c63b:	66 3d 1d 03          	cmp    ax,0x31d
c000c63f:	75 06                	jne    c000c647 <sendKeyboardToken(KeyboardToken)+0x268>
c000c641:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c64a:	66 3d 1c 03          	cmp    ax,0x31c
c000c64e:	75 06                	jne    c000c656 <sendKeyboardToken(KeyboardToken)+0x277>
c000c650:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c659:	66 3d 1b 03          	cmp    ax,0x31b
c000c65d:	75 06                	jne    c000c665 <sendKeyboardToken(KeyboardToken)+0x286>
c000c65f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c668:	66 3d 1e 03          	cmp    ax,0x31e
c000c66c:	75 06                	jne    c000c674 <sendKeyboardToken(KeyboardToken)+0x295>
c000c66e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c677:	66 3d 1f 03          	cmp    ax,0x31f
c000c67b:	75 06                	jne    c000c683 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c67d:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c686:	66 3d 1a 03          	cmp    ax,0x31a
c000c68a:	75 06                	jne    c000c692 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c68c:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c692:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c696:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c699:	83 f0 01             	xor    eax,0x1
c000c69c:	84 c0                	test   al,al
c000c69e:	74 7b                	je     c000c71b <sendKeyboardToken(KeyboardToken)+0x33c>
c000c6a0:	a0 e1 40 02 c0       	mov    al,ds:0xc00240e1
c000c6a5:	84 c0                	test   al,al
c000c6a7:	74 43                	je     c000c6ec <sendKeyboardToken(KeyboardToken)+0x30d>
c000c6a9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c6ad:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c6b1:	74 2d                	je     c000c6e0 <sendKeyboardToken(KeyboardToken)+0x301>
c000c6b3:	8b 15 e4 43 02 c0    	mov    edx,DWORD PTR ds:0xc00243e4
c000c6b9:	89 d0                	mov    eax,edx
c000c6bb:	c1 e0 02             	shl    eax,0x2
c000c6be:	01 d0                	add    eax,edx
c000c6c0:	01 c0                	add    eax,eax
c000c6c2:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c6c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ca:	25 ff ff 00 00       	and    eax,0xffff
c000c6cf:	8d 50 d0             	lea    edx,[eax-0x30]
c000c6d2:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6d7:	01 d0                	add    eax,edx
c000c6d9:	a3 e4 43 02 c0       	mov    ds:0xc00243e4,eax
c000c6de:	eb 71                	jmp    c000c751 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6e0:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c6ea:	eb 65                	jmp    c000c751 <sendKeyboardToken(KeyboardToken)+0x372>
c000c6ec:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6f1:	85 c0                	test   eax,eax
c000c6f3:	74 1a                	je     c000c70f <sendKeyboardToken(KeyboardToken)+0x330>
c000c6f5:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c6fa:	25 ff 00 00 00       	and    eax,0xff
c000c6ff:	83 ec 0c             	sub    esp,0xc
c000c702:	50                   	push   eax
c000c703:	e8 0e fc ff ff       	call   c000c316 <sendKeyToTerminal(unsigned char)>
c000c708:	83 c4 10             	add    esp,0x10
c000c70b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c70f:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c719:	eb 36                	jmp    c000c751 <sendKeyboardToken(KeyboardToken)+0x372>
c000c71b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c71e:	66 3d 01 01          	cmp    ax,0x101
c000c722:	75 2d                	jne    c000c751 <sendKeyboardToken(KeyboardToken)+0x372>
c000c724:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c729:	85 c0                	test   eax,eax
c000c72b:	74 1a                	je     c000c747 <sendKeyboardToken(KeyboardToken)+0x368>
c000c72d:	a1 e4 43 02 c0       	mov    eax,ds:0xc00243e4
c000c732:	25 ff 00 00 00       	and    eax,0xff
c000c737:	83 ec 0c             	sub    esp,0xc
c000c73a:	50                   	push   eax
c000c73b:	e8 d6 fb ff ff       	call   c000c316 <sendKeyToTerminal(unsigned char)>
c000c740:	83 c4 10             	add    esp,0x10
c000c743:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c747:	c7 05 e4 43 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00243e4,0x0
c000c751:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c754:	83 f0 01             	xor    eax,0x1
c000c757:	84 c0                	test   al,al
c000c759:	74 4e                	je     c000c7a9 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c75b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c75e:	83 f0 01             	xor    eax,0x1
c000c761:	84 c0                	test   al,al
c000c763:	74 44                	je     c000c7a9 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c765:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c76a:	83 f0 01             	xor    eax,0x1
c000c76d:	84 c0                	test   al,al
c000c76f:	74 38                	je     c000c7a9 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c774:	66 83 f8 1f          	cmp    ax,0x1f
c000c778:	76 09                	jbe    c000c783 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c77a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c77d:	66 83 f8 7e          	cmp    ax,0x7e
c000c781:	76 12                	jbe    c000c795 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c783:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c786:	66 83 f8 0a          	cmp    ax,0xa
c000c78a:	74 09                	je     c000c795 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c78c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78f:	66 83 f8 08          	cmp    ax,0x8
c000c793:	75 14                	jne    c000c7a9 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c798:	25 ff 00 00 00       	and    eax,0xff
c000c79d:	83 ec 0c             	sub    esp,0xc
c000c7a0:	50                   	push   eax
c000c7a1:	e8 70 fb ff ff       	call   c000c316 <sendKeyToTerminal(unsigned char)>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c7ac:	83 f0 01             	xor    eax,0x1
c000c7af:	84 c0                	test   al,al
c000c7b1:	74 51                	je     c000c804 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7b3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7b6:	83 f0 01             	xor    eax,0x1
c000c7b9:	84 c0                	test   al,al
c000c7bb:	74 47                	je     c000c804 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7bd:	a0 e0 40 02 c0       	mov    al,ds:0xc00240e0
c000c7c2:	84 c0                	test   al,al
c000c7c4:	74 3e                	je     c000c804 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7c9:	66 83 f8 3f          	cmp    ax,0x3f
c000c7cd:	76 35                	jbe    c000c804 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d2:	66 83 f8 7f          	cmp    ax,0x7f
c000c7d6:	77 2c                	ja     c000c804 <sendKeyboardToken(KeyboardToken)+0x425>
c000c7d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7db:	88 c2                	mov    dl,al
c000c7dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7e0:	66 83 f8 5f          	cmp    ax,0x5f
c000c7e4:	76 04                	jbe    c000c7ea <sendKeyboardToken(KeyboardToken)+0x40b>
c000c7e6:	b0 20                	mov    al,0x20
c000c7e8:	eb 02                	jmp    c000c7ec <sendKeyboardToken(KeyboardToken)+0x40d>
c000c7ea:	b0 00                	mov    al,0x0
c000c7ec:	29 c2                	sub    edx,eax
c000c7ee:	88 d0                	mov    al,dl
c000c7f0:	83 e8 40             	sub    eax,0x40
c000c7f3:	25 ff 00 00 00       	and    eax,0xff
c000c7f8:	83 ec 0c             	sub    esp,0xc
c000c7fb:	50                   	push   eax
c000c7fc:	e8 15 fb ff ff       	call   c000c316 <sendKeyToTerminal(unsigned char)>
c000c801:	83 c4 10             	add    esp,0x10
c000c804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c807:	66 3d 00 03          	cmp    ax,0x300
c000c80b:	75 0f                	jne    c000c81c <sendKeyboardToken(KeyboardToken)+0x43d>
c000c80d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c810:	83 f0 01             	xor    eax,0x1
c000c813:	84 c0                	test   al,al
c000c815:	74 05                	je     c000c81c <sendKeyboardToken(KeyboardToken)+0x43d>
c000c817:	e8 7d b9 ff ff       	call   c0008199 <doTerminalCycle()>
c000c81c:	90                   	nop
c000c81d:	c9                   	leave  
c000c81e:	c3                   	ret    

c000c81f <clearInternalKeybuffer(VgaText*)>:
c000c81f:	55                   	push   ebp
c000c820:	89 e5                	mov    ebp,esp
c000c822:	83 ec 08             	sub    esp,0x8
c000c825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c828:	05 b2 00 00 00       	add    eax,0xb2
c000c82d:	83 ec 0c             	sub    esp,0xc
c000c830:	50                   	push   eax
c000c831:	e8 0a 3d ff ff       	call   c0000540 <strlen>
c000c836:	83 c4 10             	add    esp,0x10
c000c839:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c83c:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c842:	83 ec 04             	sub    esp,0x4
c000c845:	50                   	push   eax
c000c846:	6a 00                	push   0x0
c000c848:	52                   	push   edx
c000c849:	e8 82 3c ff ff       	call   c00004d0 <memset>
c000c84e:	83 c4 10             	add    esp,0x10
c000c851:	90                   	nop
c000c852:	c9                   	leave  
c000c853:	c3                   	ret    

c000c854 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c854:	55                   	push   ebp
c000c855:	89 e5                	mov    ebp,esp
c000c857:	83 ec 18             	sub    esp,0x18
c000c85a:	a1 c8 3f 02 c0       	mov    eax,ds:0xc0023fc8
c000c85f:	85 c0                	test   eax,eax
c000c861:	74 2a                	je     c000c88d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c863:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c869:	8b 0d c8 3f 02 c0    	mov    ecx,DWORD PTR ds:0xc0023fc8
c000c86f:	83 ec 04             	sub    esp,0x4
c000c872:	68 e0 3f 02 c0       	push   0xc0023fe0
c000c877:	83 ec 08             	sub    esp,0x8
c000c87a:	89 e2                	mov    edx,esp
c000c87c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c87f:	89 02                	mov    DWORD PTR [edx],eax
c000c881:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c884:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c888:	ff d1                	call   ecx
c000c88a:	83 c4 10             	add    esp,0x10
c000c88d:	fb                   	sti    
c000c88e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c895:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c899:	0f 84 db 00 00 00    	je     c000c97a <readKeyboard(VgaText*, char*, unsigned long)+0x126>
c000c89f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a2:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c8a8:	84 c0                	test   al,al
c000c8aa:	75 28                	jne    c000c8d4 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c8ac:	fa                   	cli    
c000c8ad:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c8b2:	40                   	inc    eax
c000c8b3:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c8b8:	e8 af 6f 00 00       	call   c001386c <schedule()>
c000c8bd:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c8c2:	48                   	dec    eax
c000c8c3:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000c8c8:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000c8cd:	85 c0                	test   eax,eax
c000c8cf:	75 ce                	jne    c000c89f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8d1:	fb                   	sti    
c000c8d2:	eb cb                	jmp    c000c89f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c8d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c8d7:	8d 50 01             	lea    edx,[eax+0x1]
c000c8da:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c8e0:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c8e6:	88 10                	mov    BYTE PTR [eax],dl
c000c8e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8eb:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c8f1:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c8f4:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c8f8:	75 2e                	jne    c000c928 <readKeyboard(VgaText*, char*, unsigned long)+0xd4>
c000c8fa:	83 ec 0c             	sub    esp,0xc
c000c8fd:	68 94 e1 01 c0       	push   0xc001e194
c000c902:	e8 ed dc ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000c907:	83 c4 10             	add    esp,0x10
c000c90a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000c90f:	8b 00                	mov    eax,DWORD PTR [eax]
c000c911:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000c914:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000c91a:	83 ec 08             	sub    esp,0x8
c000c91d:	6a 02                	push   0x2
c000c91f:	50                   	push   eax
c000c920:	e8 3e 3d 00 00       	call   c0010663 <KeRaiseSignal(SigHandlerBlock*, int)>
c000c925:	83 c4 10             	add    esp,0x10
c000c928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c92b:	05 b2 00 00 00       	add    eax,0xb2
c000c930:	83 ec 0c             	sub    esp,0xc
c000c933:	50                   	push   eax
c000c934:	e8 07 3c ff ff       	call   c0000540 <strlen>
c000c939:	83 c4 10             	add    esp,0x10
c000c93c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c93f:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c945:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c948:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c94b:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c951:	83 ec 04             	sub    esp,0x4
c000c954:	50                   	push   eax
c000c955:	51                   	push   ecx
c000c956:	52                   	push   edx
c000c957:	e8 84 3a ff ff       	call   c00003e0 <memmove>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c962:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c965:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c969:	74 0a                	je     c000c975 <readKeyboard(VgaText*, char*, unsigned long)+0x121>
c000c96b:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c96f:	0f 85 20 ff ff ff    	jne    c000c895 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c975:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c978:	eb 03                	jmp    c000c97d <readKeyboard(VgaText*, char*, unsigned long)+0x129>
c000c97a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c97d:	c9                   	leave  
c000c97e:	c3                   	ret    
c000c97f:	90                   	nop

c000c980 <Keyboard::Keyboard(char const*)>:
c000c980:	83 ec 0c             	sub    esp,0xc
c000c983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c987:	83 ec 08             	sub    esp,0x8
c000c98a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98e:	50                   	push   eax
c000c98f:	e8 38 f2 ff ff       	call   c000bbcc <Device::Device(char const*)>
c000c994:	83 c4 10             	add    esp,0x10
c000c997:	ba ac e1 01 c0       	mov    edx,0xc001e1ac
c000c99c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a0:	89 10                	mov    DWORD PTR [eax],edx
c000c9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9a6:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c9b0:	c6 05 c4 3f 02 c0 01 	mov    BYTE PTR ds:0xc0023fc4,0x1
c000c9b7:	90                   	nop
c000c9b8:	83 c4 0c             	add    esp,0xc
c000c9bb:	c3                   	ret    

c000c9bc <Keyboard::~Keyboard()>:
c000c9bc:	83 ec 0c             	sub    esp,0xc
c000c9bf:	ba ac e1 01 c0       	mov    edx,0xc001e1ac
c000c9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9c8:	89 10                	mov    DWORD PTR [eax],edx
c000c9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ce:	83 ec 0c             	sub    esp,0xc
c000c9d1:	50                   	push   eax
c000c9d2:	e8 5f ef ff ff       	call   c000b936 <Device::~Device()>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	90                   	nop
c000c9db:	83 c4 0c             	add    esp,0xc
c000c9de:	c3                   	ret    
c000c9df:	90                   	nop

c000c9e0 <Keyboard::~Keyboard()>:
c000c9e0:	83 ec 0c             	sub    esp,0xc
c000c9e3:	83 ec 0c             	sub    esp,0xc
c000c9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9ea:	e8 cd ff ff ff       	call   c000c9bc <Keyboard::~Keyboard()>
c000c9ef:	83 c4 10             	add    esp,0x10
c000c9f2:	83 ec 08             	sub    esp,0x8
c000c9f5:	68 5c 01 00 00       	push   0x15c
c000c9fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9fe:	e8 fb da ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000ca03:	83 c4 10             	add    esp,0x10
c000ca06:	83 c4 0c             	add    esp,0xc
c000ca09:	c3                   	ret    

c000ca0a <LogicalDisk::close(int, int, void*)>:
c000ca0a:	83 c8 ff             	or     eax,0xffffffff
c000ca0d:	c3                   	ret    

c000ca0e <LogicalDisk::~LogicalDisk()>:
c000ca0e:	83 ec 0c             	sub    esp,0xc
c000ca11:	ba 24 e2 01 c0       	mov    edx,0xc001e224
c000ca16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1a:	89 10                	mov    DWORD PTR [eax],edx
c000ca1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca20:	83 ec 0c             	sub    esp,0xc
c000ca23:	50                   	push   eax
c000ca24:	e8 0d ef ff ff       	call   c000b936 <Device::~Device()>
c000ca29:	83 c4 10             	add    esp,0x10
c000ca2c:	90                   	nop
c000ca2d:	83 c4 0c             	add    esp,0xc
c000ca30:	c3                   	ret    
c000ca31:	90                   	nop

c000ca32 <LogicalDisk::~LogicalDisk()>:
c000ca32:	83 ec 0c             	sub    esp,0xc
c000ca35:	83 ec 0c             	sub    esp,0xc
c000ca38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca3c:	e8 cd ff ff ff       	call   c000ca0e <LogicalDisk::~LogicalDisk()>
c000ca41:	83 c4 10             	add    esp,0x10
c000ca44:	83 ec 08             	sub    esp,0x8
c000ca47:	68 74 01 00 00       	push   0x174
c000ca4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca50:	e8 a9 da ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000ca55:	83 c4 10             	add    esp,0x10
c000ca58:	83 c4 0c             	add    esp,0xc
c000ca5b:	c3                   	ret    

c000ca5c <LogicalDisk::open(int, int, void*)>:
c000ca5c:	83 ec 18             	sub    esp,0x18
c000ca5f:	68 d8 e1 01 c0       	push   0xc001e1d8
c000ca64:	e8 0e 38 00 00       	call   c0010277 <KePanic(char const*)>
c000ca69:	83 c8 ff             	or     eax,0xffffffff
c000ca6c:	83 c4 1c             	add    esp,0x1c
c000ca6f:	c3                   	ret    

c000ca70 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ca70:	53                   	push   ebx
c000ca71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ca75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca79:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca7d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ca83:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ca89:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ca8f:	77 10                	ja     c000caa1 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ca91:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ca97:	89 d3                	mov    ebx,edx
c000ca99:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ca9f:	72 05                	jb     c000caa6 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000caa1:	83 c8 ff             	or     eax,0xffffffff
c000caa4:	89 c2                	mov    edx,eax
c000caa6:	5b                   	pop    ebx
c000caa7:	c3                   	ret    

c000caa8 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000caa8:	56                   	push   esi
c000caa9:	83 c8 ff             	or     eax,0xffffffff
c000caac:	53                   	push   ebx
c000caad:	89 c2                	mov    edx,eax
c000caaf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cab3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cab7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cabb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cac1:	77 27                	ja     c000caea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cac3:	89 d8                	mov    eax,ebx
c000cac5:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cacb:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cad1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cad6:	89 c2                	mov    edx,eax
c000cad8:	73 10                	jae    c000caea <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cada:	89 c8                	mov    eax,ecx
c000cadc:	89 da                	mov    edx,ebx
c000cade:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cae4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000caea:	5b                   	pop    ebx
c000caeb:	5e                   	pop    esi
c000caec:	c3                   	ret    
c000caed:	90                   	nop

c000caee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000caee:	83 ec 1c             	sub    esp,0x1c
c000caf1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000caf5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000caf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cafd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cb01:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cb05:	89 04 24             	mov    DWORD PTR [esp],eax
c000cb08:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cb0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb14:	83 ec 08             	sub    esp,0x8
c000cb17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb1b:	50                   	push   eax
c000cb1c:	e8 ab f0 ff ff       	call   c000bbcc <Device::Device(char const*)>
c000cb21:	83 c4 10             	add    esp,0x10
c000cb24:	ba 24 e2 01 c0       	mov    edx,0xc001e224
c000cb29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb2d:	89 10                	mov    DWORD PTR [eax],edx
c000cb2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb33:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb3e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cb45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb49:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cb53:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb5b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb5f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cb65:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cb6b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cb6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cb72:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb76:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cb7c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cb82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb86:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cb8a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cb90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb94:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb9e:	90                   	nop
c000cb9f:	83 c4 1c             	add    esp,0x1c
c000cba2:	c3                   	ret    
c000cba3:	90                   	nop

c000cba4 <LogicalDisk::assignDriveLetter()>:
c000cba4:	55                   	push   ebp
c000cba5:	57                   	push   edi
c000cba6:	56                   	push   esi
c000cba7:	53                   	push   ebx
c000cba8:	83 ec 14             	sub    esp,0x14
c000cbab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cbaf:	8b 3d 00 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024400
c000cbb5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000cbbb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000cbbf:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000cbc5:	8b 3d 04 44 02 c0    	mov    edi,DWORD PTR ds:0xc0024404
c000cbcb:	3c 01                	cmp    al,0x1
c000cbcd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000cbd1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000cbd5:	19 c0                	sbb    eax,eax
c000cbd7:	83 e0 02             	and    eax,0x2
c000cbda:	83 c0 41             	add    eax,0x41
c000cbdd:	0f be e8             	movsx  ebp,al
c000cbe0:	3c 43                	cmp    al,0x43
c000cbe2:	75 10                	jne    c000cbf4 <LogicalDisk::assignDriveLetter()+0x50>
c000cbe4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000cbeb:	75 5d                	jne    c000cc4a <LogicalDisk::assignDriveLetter()+0xa6>
c000cbed:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cbf2:	75 56                	jne    c000cc4a <LogicalDisk::assignDriveLetter()+0xa6>
c000cbf4:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cbf7:	ba 01 00 00 00       	mov    edx,0x1
c000cbfc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cc00:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cc04:	d3 e2                	shl    edx,cl
c000cc06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cc0a:	89 d7                	mov    edi,edx
c000cc0c:	89 d6                	mov    esi,edx
c000cc0e:	c1 ff 1f             	sar    edi,0x1f
c000cc11:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cc15:	21 f9                	and    ecx,edi
c000cc17:	09 d1                	or     ecx,edx
c000cc19:	75 2f                	jne    c000cc4a <LogicalDisk::assignDriveLetter()+0xa6>
c000cc1b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cc1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc23:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cc29:	09 f2                	or     edx,esi
c000cc2b:	89 15 00 44 02 c0    	mov    DWORD PTR ds:0xc0024400,edx
c000cc31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc35:	09 fa                	or     edx,edi
c000cc37:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cc3b:	89 15 04 44 02 c0    	mov    DWORD PTR ds:0xc0024404,edx
c000cc41:	89 1c bd 20 44 02 c0 	mov    DWORD PTR [edi*4-0x3ffdbbe0],ebx
c000cc48:	eb 08                	jmp    c000cc52 <LogicalDisk::assignDriveLetter()+0xae>
c000cc4a:	45                   	inc    ebp
c000cc4b:	40                   	inc    eax
c000cc4c:	3c 5b                	cmp    al,0x5b
c000cc4e:	75 90                	jne    c000cbe0 <LogicalDisk::assignDriveLetter()+0x3c>
c000cc50:	31 c0                	xor    eax,eax
c000cc52:	83 c4 14             	add    esp,0x14
c000cc55:	5b                   	pop    ebx
c000cc56:	5e                   	pop    esi
c000cc57:	5f                   	pop    edi
c000cc58:	5d                   	pop    ebp
c000cc59:	c3                   	ret    

c000cc5a <LogicalDisk::mount()>:
c000cc5a:	56                   	push   esi
c000cc5b:	53                   	push   ebx
c000cc5c:	53                   	push   ebx
c000cc5d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc61:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c000cc67:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cc71:	85 db                	test   ebx,ebx
c000cc73:	74 27                	je     c000cc9c <LogicalDisk::mount()+0x42>
c000cc75:	51                   	push   ecx
c000cc76:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cc7d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cc7f:	83 e8 41             	sub    eax,0x41
c000cc82:	50                   	push   eax
c000cc83:	56                   	push   esi
c000cc84:	53                   	push   ebx
c000cc85:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cc88:	83 c4 10             	add    esp,0x10
c000cc8b:	84 c0                	test   al,al
c000cc8d:	74 08                	je     c000cc97 <LogicalDisk::mount()+0x3d>
c000cc8f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cc95:	eb 07                	jmp    c000cc9e <LogicalDisk::mount()+0x44>
c000cc97:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cc9a:	eb d5                	jmp    c000cc71 <LogicalDisk::mount()+0x17>
c000cc9c:	31 c0                	xor    eax,eax
c000cc9e:	5a                   	pop    edx
c000cc9f:	5b                   	pop    ebx
c000cca0:	5e                   	pop    esi
c000cca1:	c3                   	ret    

c000cca2 <LogicalDisk::unmount()>:
c000cca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cca6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ccb0:	c3                   	ret    
c000ccb1:	90                   	nop

c000ccb2 <LogicalDisk::eject()>:
c000ccb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccb6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ccbc:	8b 10                	mov    edx,DWORD PTR [eax]
c000ccbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ccc2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000ccc5:	90                   	nop

c000ccc6 <LogicalDisk::unassignDriveLetter()>:
c000ccc6:	57                   	push   edi
c000ccc7:	56                   	push   esi
c000ccc8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cccc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000ccd3:	84 c9                	test   cl,cl
c000ccd5:	75 0f                	jne    c000cce6 <LogicalDisk::unassignDriveLetter()+0x20>
c000ccd7:	c7 44 24 0c fc e1 01 c0 	mov    DWORD PTR [esp+0xc],0xc001e1fc
c000ccdf:	5e                   	pop    esi
c000cce0:	5f                   	pop    edi
c000cce1:	e9 91 35 00 00       	jmp    c0010277 <KePanic(char const*)>
c000cce6:	83 e9 41             	sub    ecx,0x41
c000cce9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000ccf0:	b8 01 00 00 00       	mov    eax,0x1
c000ccf5:	c7 04 8d 20 44 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdbbe0],0x0
c000cd00:	d3 e0                	shl    eax,cl
c000cd02:	89 c7                	mov    edi,eax
c000cd04:	f7 d0                	not    eax
c000cd06:	c1 ff 1f             	sar    edi,0x1f
c000cd09:	21 05 00 44 02 c0    	and    DWORD PTR ds:0xc0024400,eax
c000cd0f:	89 fe                	mov    esi,edi
c000cd11:	f7 d6                	not    esi
c000cd13:	21 35 04 44 02 c0    	and    DWORD PTR ds:0xc0024404,esi
c000cd19:	5e                   	pop    esi
c000cd1a:	5f                   	pop    edi
c000cd1b:	c3                   	ret    

c000cd1c <LogicalDisk::read(unsigned long long, int, void*)>:
c000cd1c:	57                   	push   edi
c000cd1d:	56                   	push   esi
c000cd1e:	53                   	push   ebx
c000cd1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd27:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd2f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cd35:	77 41                	ja     c000cd78 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cd37:	99                   	cdq    
c000cd38:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cd3e:	01 c8                	add    eax,ecx
c000cd40:	11 da                	adc    edx,ebx
c000cd42:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cd48:	19 d7                	sbb    edi,edx
c000cd4a:	72 33                	jb     c000cd7f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cd4c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cd52:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cd58:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cd5c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cd60:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cd66:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cd6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd70:	5b                   	pop    ebx
c000cd71:	5e                   	pop    esi
c000cd72:	5f                   	pop    edi
c000cd73:	e9 4e 0a 00 00       	jmp    c000d7c6 <VCache::read(unsigned long long, int, void*)>
c000cd78:	b8 05 00 00 00       	mov    eax,0x5
c000cd7d:	eb 05                	jmp    c000cd84 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cd7f:	b8 07 00 00 00       	mov    eax,0x7
c000cd84:	5b                   	pop    ebx
c000cd85:	5e                   	pop    esi
c000cd86:	5f                   	pop    edi
c000cd87:	c3                   	ret    

c000cd88 <LogicalDisk::write(unsigned long long, int, void*)>:
c000cd88:	57                   	push   edi
c000cd89:	56                   	push   esi
c000cd8a:	53                   	push   ebx
c000cd8b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cd8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd93:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cd9b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cda1:	77 41                	ja     c000cde4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cda3:	99                   	cdq    
c000cda4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cdaa:	01 c8                	add    eax,ecx
c000cdac:	11 da                	adc    edx,ebx
c000cdae:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cdb4:	19 d7                	sbb    edi,edx
c000cdb6:	72 33                	jb     c000cdeb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cdb8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cdbe:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cdc4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cdc8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cdcc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cdd2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cdd8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cddc:	5b                   	pop    ebx
c000cddd:	5e                   	pop    esi
c000cdde:	5f                   	pop    edi
c000cddf:	e9 cc 08 00 00       	jmp    c000d6b0 <VCache::write(unsigned long long, int, void*)>
c000cde4:	b8 05 00 00 00       	mov    eax,0x5
c000cde9:	eb 05                	jmp    c000cdf0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cdeb:	b8 07 00 00 00       	mov    eax,0x7
c000cdf0:	5b                   	pop    ebx
c000cdf1:	5e                   	pop    esi
c000cdf2:	5f                   	pop    edi
c000cdf3:	c3                   	ret    

c000cdf4 <Mouse::Mouse(char const*)>:
c000cdf4:	83 ec 0c             	sub    esp,0xc
c000cdf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdfb:	83 ec 08             	sub    esp,0x8
c000cdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce02:	50                   	push   eax
c000ce03:	e8 c4 ed ff ff       	call   c000bbcc <Device::Device(char const*)>
c000ce08:	83 c4 10             	add    esp,0x10
c000ce0b:	ba 50 e2 01 c0       	mov    edx,0xc001e250
c000ce10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce14:	89 10                	mov    DWORD PTR [eax],edx
c000ce16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce1a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ce24:	90                   	nop
c000ce25:	83 c4 0c             	add    esp,0xc
c000ce28:	c3                   	ret    
c000ce29:	90                   	nop
c000ce2a:	66 90                	xchg   ax,ax

c000ce2c <Mouse::~Mouse()>:
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	ba 50 e2 01 c0       	mov    edx,0xc001e250
c000ce34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce38:	89 10                	mov    DWORD PTR [eax],edx
c000ce3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3e:	83 ec 0c             	sub    esp,0xc
c000ce41:	50                   	push   eax
c000ce42:	e8 ef ea ff ff       	call   c000b936 <Device::~Device()>
c000ce47:	83 c4 10             	add    esp,0x10
c000ce4a:	90                   	nop
c000ce4b:	83 c4 0c             	add    esp,0xc
c000ce4e:	c3                   	ret    
c000ce4f:	90                   	nop

c000ce50 <Mouse::~Mouse()>:
c000ce50:	83 ec 0c             	sub    esp,0xc
c000ce53:	83 ec 0c             	sub    esp,0xc
c000ce56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5a:	e8 cd ff ff ff       	call   c000ce2c <Mouse::~Mouse()>
c000ce5f:	83 c4 10             	add    esp,0x10
c000ce62:	83 ec 08             	sub    esp,0x8
c000ce65:	68 58 01 00 00       	push   0x158
c000ce6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce6e:	e8 8b d6 ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000ce73:	83 c4 10             	add    esp,0x10
c000ce76:	83 c4 0c             	add    esp,0xc
c000ce79:	c3                   	ret    

c000ce7a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ce7a:	55                   	push   ebp
c000ce7b:	57                   	push   edi
c000ce7c:	56                   	push   esi
c000ce7d:	53                   	push   ebx
c000ce7e:	81 ec 28 01 00 00    	sub    esp,0x128
c000ce84:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ce8b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ce92:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ce99:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cea0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cea4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cea8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ceaf:	e8 14 ee ff ff       	call   c000bcc8 <Device::getName()>
c000ceb4:	5a                   	pop    edx
c000ceb5:	59                   	pop    ecx
c000ceb6:	50                   	push   eax
c000ceb7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cebb:	55                   	push   ebp
c000cebc:	e8 3f 37 ff ff       	call   c0000600 <strcpy>
c000cec1:	5b                   	pop    ebx
c000cec2:	58                   	pop    eax
c000cec3:	68 74 e2 01 c0       	push   0xc001e274
c000cec8:	55                   	push   ebp
c000cec9:	e8 f2 38 ff ff       	call   c00007c0 <strcat>
c000cece:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000ced5:	e8 df a8 ff ff       	call   c00077b9 <malloc>
c000ceda:	83 c4 0c             	add    esp,0xc
c000cedd:	89 c3                	mov    ebx,eax
c000cedf:	57                   	push   edi
c000cee0:	56                   	push   esi
c000cee1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cee5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cee9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cef0:	55                   	push   ebp
c000cef1:	50                   	push   eax
c000cef2:	e8 f7 fb ff ff       	call   c000caee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cef7:	83 c4 14             	add    esp,0x14
c000cefa:	53                   	push   ebx
c000cefb:	e8 a4 fc ff ff       	call   c000cba4 <LogicalDisk::assignDriveLetter()>
c000cf00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cf03:	e8 52 fd ff ff       	call   c000cc5a <LogicalDisk::mount()>
c000cf08:	58                   	pop    eax
c000cf09:	5a                   	pop    edx
c000cf0a:	53                   	push   ebx
c000cf0b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cf12:	e8 1d eb ff ff       	call   c000ba34 <Device::addChild(Device*)>
c000cf17:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cf1d:	5b                   	pop    ebx
c000cf1e:	5e                   	pop    esi
c000cf1f:	5f                   	pop    edi
c000cf20:	5d                   	pop    ebp
c000cf21:	c3                   	ret    

c000cf22 <createPartitionsForDisk(PhysicalDisk*)>:
c000cf22:	55                   	push   ebp
c000cf23:	57                   	push   edi
c000cf24:	56                   	push   esi
c000cf25:	53                   	push   ebx
c000cf26:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cf2c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cf33:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cf39:	3d 00 02 00 00       	cmp    eax,0x200
c000cf3e:	74 27                	je     c000cf67 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000cf40:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000cf46:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000cf4c:	83 ec 10             	sub    esp,0x10
c000cf4f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000cf53:	99                   	cdq    
c000cf54:	c1 e6 0a             	shl    esi,0xa
c000cf57:	52                   	push   edx
c000cf58:	89 fd                	mov    ebp,edi
c000cf5a:	50                   	push   eax
c000cf5b:	55                   	push   ebp
c000cf5c:	56                   	push   esi
c000cf5d:	e8 6e f2 00 00       	call   c001c1d0 <__udivdi3>
c000cf62:	e9 b1 00 00 00       	jmp    c000d018 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cf67:	83 ec 0c             	sub    esp,0xc
c000cf6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cf6c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000cf70:	56                   	push   esi
c000cf71:	6a 01                	push   0x1
c000cf73:	6a 00                	push   0x0
c000cf75:	6a 00                	push   0x0
c000cf77:	53                   	push   ebx
c000cf78:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000cf7b:	83 c4 20             	add    esp,0x20
c000cf7e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000cf86:	75 0a                	jne    c000cf92 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000cf88:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000cf90:	74 2c                	je     c000cfbe <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000cf92:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cf98:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cf9e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfa4:	83 ec 10             	sub    esp,0x10
c000cfa7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfab:	89 f7                	mov    edi,esi
c000cfad:	c1 e0 0a             	shl    eax,0xa
c000cfb0:	c1 ff 1f             	sar    edi,0x1f
c000cfb3:	57                   	push   edi
c000cfb4:	56                   	push   esi
c000cfb5:	52                   	push   edx
c000cfb6:	50                   	push   eax
c000cfb7:	e8 14 f2 00 00       	call   c001c1d0 <__udivdi3>
c000cfbc:	eb 5a                	jmp    c000d018 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000cfbe:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000cfc5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000cfcc:	83 e1 7f             	and    ecx,0x7f
c000cfcf:	83 e0 7f             	and    eax,0x7f
c000cfd2:	01 c1                	add    ecx,eax
c000cfd4:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000cfdb:	83 e0 7f             	and    eax,0x7f
c000cfde:	01 c1                	add    ecx,eax
c000cfe0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000cfe7:	83 e0 7f             	and    eax,0x7f
c000cfea:	00 c1                	add    cl,al
c000cfec:	74 41                	je     c000d02f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000cfee:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cff4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cffa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d000:	83 ec 10             	sub    esp,0x10
c000d003:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d007:	89 f7                	mov    edi,esi
c000d009:	c1 e0 0a             	shl    eax,0xa
c000d00c:	c1 ff 1f             	sar    edi,0x1f
c000d00f:	57                   	push   edi
c000d010:	56                   	push   esi
c000d011:	52                   	push   edx
c000d012:	50                   	push   eax
c000d013:	e8 b8 f1 00 00       	call   c001c1d0 <__udivdi3>
c000d018:	83 c4 14             	add    esp,0x14
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	6a 00                	push   0x0
c000d01f:	6a 00                	push   0x0
c000d021:	53                   	push   ebx
c000d022:	e8 53 fe ff ff       	call   c000ce7a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d027:	83 c4 20             	add    esp,0x20
c000d02a:	e9 79 01 00 00       	jmp    c000d1a8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d02f:	89 f0                	mov    eax,esi
c000d031:	31 f6                	xor    esi,esi
c000d033:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d03a:	75 02                	jne    c000d03e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d03c:	89 f1                	mov    ecx,esi
c000d03e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d045:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d04c:	c1 e2 08             	shl    edx,0x8
c000d04f:	c1 e7 10             	shl    edi,0x10
c000d052:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d05a:	09 fa                	or     edx,edi
c000d05c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d064:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d06b:	83 c0 10             	add    eax,0x10
c000d06e:	09 fa                	or     edx,edi
c000d070:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d077:	c1 e7 18             	shl    edi,0x18
c000d07a:	09 fa                	or     edx,edi
c000d07c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d083:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d087:	c1 e7 10             	shl    edi,0x10
c000d08a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d091:	c1 e2 08             	shl    edx,0x8
c000d094:	09 fa                	or     edx,edi
c000d096:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d09d:	09 fa                	or     edx,edi
c000d09f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d0a6:	c1 e7 18             	shl    edi,0x18
c000d0a9:	09 fa                	or     edx,edi
c000d0ab:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d0af:	46                   	inc    esi
c000d0b0:	83 fe 04             	cmp    esi,0x4
c000d0b3:	0f 85 7a ff ff ff    	jne    c000d033 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d0b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0bd:	83 f0 01             	xor    eax,0x1
c000d0c0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d0c4:	75 57                	jne    c000d11d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0ca:	83 f0 01             	xor    eax,0x1
c000d0cd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d0d1:	75 4a                	jne    c000d11d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d0d3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d0d7:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d0df:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d0e7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0ed:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0f3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0f9:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0fd:	89 f7                	mov    edi,esi
c000d0ff:	c1 e0 0a             	shl    eax,0xa
c000d102:	c1 ff 1f             	sar    edi,0x1f
c000d105:	57                   	push   edi
c000d106:	56                   	push   esi
c000d107:	52                   	push   edx
c000d108:	50                   	push   eax
c000d109:	e8 c2 f0 00 00       	call   c001c1d0 <__udivdi3>
c000d10e:	83 c4 10             	add    esp,0x10
c000d111:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d115:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d119:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d11d:	84 c9                	test   cl,cl
c000d11f:	74 53                	je     c000d174 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d121:	0f b6 c9             	movzx  ecx,cl
c000d124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d128:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d12c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d130:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d134:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d138:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d13c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d140:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d144:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d148:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d14c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d150:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d154:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d158:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d15c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d160:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d164:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d168:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d16c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d170:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d174:	31 ed                	xor    ebp,ebp
c000d176:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d17a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d17e:	89 f8                	mov    eax,edi
c000d180:	09 f0                	or     eax,esi
c000d182:	74 1e                	je     c000d1a2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d184:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d188:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d18c:	89 d1                	mov    ecx,edx
c000d18e:	09 c1                	or     ecx,eax
c000d190:	74 10                	je     c000d1a2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d192:	83 ec 0c             	sub    esp,0xc
c000d195:	57                   	push   edi
c000d196:	56                   	push   esi
c000d197:	52                   	push   edx
c000d198:	50                   	push   eax
c000d199:	53                   	push   ebx
c000d19a:	e8 db fc ff ff       	call   c000ce7a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d19f:	83 c4 20             	add    esp,0x20
c000d1a2:	45                   	inc    ebp
c000d1a3:	83 fd 04             	cmp    ebp,0x4
c000d1a6:	75 ce                	jne    c000d176 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d1a8:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d1ae:	5b                   	pop    ebx
c000d1af:	5e                   	pop    esi
c000d1b0:	5f                   	pop    edi
c000d1b1:	5d                   	pop    ebp
c000d1b2:	c3                   	ret    
c000d1b3:	90                   	nop

c000d1b4 <Serial::Serial(char const*)>:
c000d1b4:	83 ec 0c             	sub    esp,0xc
c000d1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1bb:	83 ec 08             	sub    esp,0x8
c000d1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c2:	50                   	push   eax
c000d1c3:	e8 04 ea ff ff       	call   c000bbcc <Device::Device(char const*)>
c000d1c8:	83 c4 10             	add    esp,0x10
c000d1cb:	ba 88 e2 01 c0       	mov    edx,0xc001e288
c000d1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d4:	89 10                	mov    DWORD PTR [eax],edx
c000d1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1da:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d1e4:	90                   	nop
c000d1e5:	83 c4 0c             	add    esp,0xc
c000d1e8:	c3                   	ret    
c000d1e9:	90                   	nop
c000d1ea:	66 90                	xchg   ax,ax

c000d1ec <Serial::~Serial()>:
c000d1ec:	83 ec 0c             	sub    esp,0xc
c000d1ef:	ba 88 e2 01 c0       	mov    edx,0xc001e288
c000d1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1f8:	89 10                	mov    DWORD PTR [eax],edx
c000d1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1fe:	83 ec 0c             	sub    esp,0xc
c000d201:	50                   	push   eax
c000d202:	e8 2f e7 ff ff       	call   c000b936 <Device::~Device()>
c000d207:	83 c4 10             	add    esp,0x10
c000d20a:	90                   	nop
c000d20b:	83 c4 0c             	add    esp,0xc
c000d20e:	c3                   	ret    
c000d20f:	90                   	nop

c000d210 <Serial::~Serial()>:
c000d210:	83 ec 0c             	sub    esp,0xc
c000d213:	83 ec 0c             	sub    esp,0xc
c000d216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d21a:	e8 cd ff ff ff       	call   c000d1ec <Serial::~Serial()>
c000d21f:	83 c4 10             	add    esp,0x10
c000d222:	83 ec 08             	sub    esp,0x8
c000d225:	68 58 01 00 00       	push   0x158
c000d22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d22e:	e8 cb d2 ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000d233:	83 c4 10             	add    esp,0x10
c000d236:	83 c4 0c             	add    esp,0xc
c000d239:	c3                   	ret    
c000d23a:	66 90                	xchg   ax,ax

c000d23c <Timer::Timer(char const*)>:
c000d23c:	83 ec 0c             	sub    esp,0xc
c000d23f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d243:	83 ec 08             	sub    esp,0x8
c000d246:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24a:	50                   	push   eax
c000d24b:	e8 7c e9 ff ff       	call   c000bbcc <Device::Device(char const*)>
c000d250:	83 c4 10             	add    esp,0x10
c000d253:	ba cc e2 01 c0       	mov    edx,0xc001e2cc
c000d258:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d25c:	89 10                	mov    DWORD PTR [eax],edx
c000d25e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d262:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d26c:	90                   	nop
c000d26d:	83 c4 0c             	add    esp,0xc
c000d270:	c3                   	ret    
c000d271:	90                   	nop
c000d272:	66 90                	xchg   ax,ax

c000d274 <Timer::~Timer()>:
c000d274:	83 ec 0c             	sub    esp,0xc
c000d277:	ba cc e2 01 c0       	mov    edx,0xc001e2cc
c000d27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d280:	89 10                	mov    DWORD PTR [eax],edx
c000d282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d286:	83 ec 0c             	sub    esp,0xc
c000d289:	50                   	push   eax
c000d28a:	e8 a7 e6 ff ff       	call   c000b936 <Device::~Device()>
c000d28f:	83 c4 10             	add    esp,0x10
c000d292:	90                   	nop
c000d293:	83 c4 0c             	add    esp,0xc
c000d296:	c3                   	ret    
c000d297:	90                   	nop

c000d298 <Timer::~Timer()>:
c000d298:	83 ec 0c             	sub    esp,0xc
c000d29b:	83 ec 0c             	sub    esp,0xc
c000d29e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2a2:	e8 cd ff ff ff       	call   c000d274 <Timer::~Timer()>
c000d2a7:	83 c4 10             	add    esp,0x10
c000d2aa:	83 ec 08             	sub    esp,0x8
c000d2ad:	68 5c 01 00 00       	push   0x15c
c000d2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b6:	e8 43 d2 ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000d2bb:	83 c4 10             	add    esp,0x10
c000d2be:	83 c4 0c             	add    esp,0xc
c000d2c1:	c3                   	ret    

c000d2c2 <Timer::read()>:
c000d2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d2c6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d2cc:	c3                   	ret    

c000d2cd <setupTimer(int)>:
c000d2cd:	53                   	push   ebx
c000d2ce:	83 ec 14             	sub    esp,0x14
c000d2d1:	68 5c 01 00 00       	push   0x15c
c000d2d6:	e8 de a4 ff ff       	call   c00077b9 <malloc>
c000d2db:	89 04 24             	mov    DWORD PTR [esp],eax
c000d2de:	89 c3                	mov    ebx,eax
c000d2e0:	e8 fb e7 00 00       	call   c001bae0 <PIT::PIT()>
c000d2e5:	58                   	pop    eax
c000d2e6:	5a                   	pop    edx
c000d2e7:	53                   	push   ebx
c000d2e8:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000d2ee:	e8 41 e7 ff ff       	call   c000ba34 <Device::addChild(Device*)>
c000d2f3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d2f5:	6a 00                	push   0x0
c000d2f7:	6a 00                	push   0x0
c000d2f9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d2fd:	53                   	push   ebx
c000d2fe:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d301:	89 d8                	mov    eax,ebx
c000d303:	83 c4 28             	add    esp,0x28
c000d306:	5b                   	pop    ebx
c000d307:	c3                   	ret    

c000d308 <timerHandler(unsigned int)>:
c000d308:	56                   	push   esi
c000d309:	53                   	push   ebx
c000d30a:	51                   	push   ecx
c000d30b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d30f:	01 05 8c 44 02 c0    	add    DWORD PTR ds:0xc002448c,eax
c000d315:	80 3d bd 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebd,0x0
c000d31c:	0f 84 4a 01 00 00    	je     c000d46c <timerHandler(unsigned int)+0x164>
c000d322:	fa                   	cli    
c000d323:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d329:	83 ec 0c             	sub    esp,0xc
c000d32c:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c000d332:	68 78 51 02 c0       	push   0xc0025178
c000d337:	e8 64 f4 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d33c:	83 c4 10             	add    esp,0x10
c000d33f:	84 c0                	test   al,al
c000d341:	0f 85 a1 00 00 00    	jne    c000d3e8 <timerHandler(unsigned int)+0xe0>
c000d347:	83 ec 0c             	sub    esp,0xc
c000d34a:	68 78 51 02 c0       	push   0xc0025178
c000d34f:	e8 68 f4 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d354:	83 c4 10             	add    esp,0x10
c000d357:	89 c6                	mov    esi,eax
c000d359:	8d 76 00             	lea    esi,[esi+0x0]
c000d35c:	83 ec 0c             	sub    esp,0xc
c000d35f:	68 78 51 02 c0       	push   0xc0025178
c000d364:	e8 53 f4 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d369:	c7 04 24 78 51 02 c0 	mov    DWORD PTR [esp],0xc0025178
c000d370:	89 c3                	mov    ebx,eax
c000d372:	e8 4d f4 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d377:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d37a:	83 c4 10             	add    esp,0x10
c000d37d:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c000d383:	77 23                	ja     c000d3a8 <timerHandler(unsigned int)+0xa0>
c000d385:	83 ec 0c             	sub    esp,0xc
c000d388:	53                   	push   ebx
c000d389:	e8 a2 69 00 00       	call   c0013d30 <unblockTask(ThreadControlBlock*)>
c000d38e:	83 c4 10             	add    esp,0x10
c000d391:	39 de                	cmp    esi,ebx
c000d393:	75 27                	jne    c000d3bc <timerHandler(unsigned int)+0xb4>
c000d395:	83 ec 0c             	sub    esp,0xc
c000d398:	68 78 51 02 c0       	push   0xc0025178
c000d39d:	e8 1a f4 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3a2:	89 c6                	mov    esi,eax
c000d3a4:	eb 12                	jmp    c000d3b8 <timerHandler(unsigned int)+0xb0>
c000d3a6:	66 90                	xchg   ax,ax
c000d3a8:	52                   	push   edx
c000d3a9:	52                   	push   edx
c000d3aa:	53                   	push   ebx
c000d3ab:	68 78 51 02 c0       	push   0xc0025178
c000d3b0:	e8 c7 f4 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d3b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d3b8:	83 c4 10             	add    esp,0x10
c000d3bb:	90                   	nop
c000d3bc:	83 ec 0c             	sub    esp,0xc
c000d3bf:	68 78 51 02 c0       	push   0xc0025178
c000d3c4:	e8 d7 f3 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d3c9:	83 c4 10             	add    esp,0x10
c000d3cc:	84 c0                	test   al,al
c000d3ce:	75 18                	jne    c000d3e8 <timerHandler(unsigned int)+0xe0>
c000d3d0:	83 ec 0c             	sub    esp,0xc
c000d3d3:	68 78 51 02 c0       	push   0xc0025178
c000d3d8:	e8 df f3 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d3dd:	83 c4 10             	add    esp,0x10
c000d3e0:	39 f0                	cmp    eax,esi
c000d3e2:	0f 85 74 ff ff ff    	jne    c000d35c <timerHandler(unsigned int)+0x54>
c000d3e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d3ed:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d3f1:	74 41                	je     c000d434 <timerHandler(unsigned int)+0x12c>
c000d3f3:	80 3d bc 1e 02 c0 00 	cmp    BYTE PTR ds:0xc0021ebc,0x0
c000d3fa:	74 38                	je     c000d434 <timerHandler(unsigned int)+0x12c>
c000d3fc:	fa                   	cli    
c000d3fd:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c000d403:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c000d408:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d40e:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d411:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d417:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d41a:	72 08                	jb     c000d424 <timerHandler(unsigned int)+0x11c>
c000d41c:	e8 4b 64 00 00       	call   c001386c <schedule()>
c000d421:	8d 76 00             	lea    esi,[esi+0x0]
c000d424:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d429:	48                   	dec    eax
c000d42a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d42f:	75 03                	jne    c000d434 <timerHandler(unsigned int)+0x12c>
c000d431:	fb                   	sti    
c000d432:	66 90                	xchg   ax,ax
c000d434:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c000d439:	48                   	dec    eax
c000d43a:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c000d43f:	75 1b                	jne    c000d45c <timerHandler(unsigned int)+0x154>
c000d441:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c000d448:	74 12                	je     c000d45c <timerHandler(unsigned int)+0x154>
c000d44a:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c000d454:	e8 13 64 00 00       	call   c001386c <schedule()>
c000d459:	8d 76 00             	lea    esi,[esi+0x0]
c000d45c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c000d461:	48                   	dec    eax
c000d462:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c000d467:	75 03                	jne    c000d46c <timerHandler(unsigned int)+0x164>
c000d469:	fb                   	sti    
c000d46a:	66 90                	xchg   ax,ax
c000d46c:	58                   	pop    eax
c000d46d:	5b                   	pop    ebx
c000d46e:	5e                   	pop    esi
c000d46f:	c3                   	ret    

c000d470 <VCache::VCache(PhysicalDisk*)>:
c000d470:	53                   	push   ebx
c000d471:	83 ec 18             	sub    esp,0x18
c000d474:	ba fc e2 01 c0       	mov    edx,0xc001e2fc
c000d479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d47d:	89 10                	mov    DWORD PTR [eax],edx
c000d47f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d483:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d48a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d48e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d495:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d499:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d4a0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d4a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ab:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d4b2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d4b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4bd:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d4c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d4cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4d0:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d4d7:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d4de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4e2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d4e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4ea:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d4ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4f2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d4fa:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d501:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d509:	83 ec 0c             	sub    esp,0xc
c000d50c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d510:	e8 a4 a2 ff ff       	call   c00077b9 <malloc>
c000d515:	83 c4 10             	add    esp,0x10
c000d518:	89 c3                	mov    ebx,eax
c000d51a:	83 ec 0c             	sub    esp,0xc
c000d51d:	53                   	push   ebx
c000d51e:	e8 15 61 00 00       	call   c0013638 <Mutex::Mutex()>
c000d523:	83 c4 10             	add    esp,0x10
c000d526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d52a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d52d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d531:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d535:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d538:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d53c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d543:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d547:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d54d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d551:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d554:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d558:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d55e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d568:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d56b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d56e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d572:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d576:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d57a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d580:	05 00 01 00 00       	add    eax,0x100
c000d585:	c1 e0 04             	shl    eax,0x4
c000d588:	83 ec 0c             	sub    esp,0xc
c000d58b:	50                   	push   eax
c000d58c:	e8 28 a2 ff ff       	call   c00077b9 <malloc>
c000d591:	83 c4 10             	add    esp,0x10
c000d594:	89 c2                	mov    edx,eax
c000d596:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d59a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d59d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5a1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ac:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d5b4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d5ba:	c1 e0 06             	shl    eax,0x6
c000d5bd:	83 ec 0c             	sub    esp,0xc
c000d5c0:	50                   	push   eax
c000d5c1:	e8 f3 a1 ff ff       	call   c00077b9 <malloc>
c000d5c6:	83 c4 10             	add    esp,0x10
c000d5c9:	89 c2                	mov    edx,eax
c000d5cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5cf:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d5d2:	90                   	nop
c000d5d3:	83 c4 18             	add    esp,0x18
c000d5d6:	5b                   	pop    ebx
c000d5d7:	c3                   	ret    

c000d5d8 <VCache::invalidateReadBuffer()>:
c000d5d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d5dc:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d5e2:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5e6:	c3                   	ret    
c000d5e7:	90                   	nop

c000d5e8 <VCache::writeWriteBuffer()>:
c000d5e8:	53                   	push   ebx
c000d5e9:	83 ec 08             	sub    esp,0x8
c000d5ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5f0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5f4:	74 1e                	je     c000d614 <VCache::writeWriteBuffer()+0x2c>
c000d5f6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5f9:	83 ec 0c             	sub    esp,0xc
c000d5fc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5fe:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d601:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d604:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d607:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d60a:	50                   	push   eax
c000d60b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d60e:	83 c4 20             	add    esp,0x20
c000d611:	8d 76 00             	lea    esi,[esi+0x0]
c000d614:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d61b:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d622:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d626:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d62d:	83 c4 08             	add    esp,0x8
c000d630:	5b                   	pop    ebx
c000d631:	c3                   	ret    
c000d632:	66 90                	xchg   ax,ax

c000d634 <VCache::~VCache()>:
c000d634:	83 ec 0c             	sub    esp,0xc
c000d637:	ba fc e2 01 c0       	mov    edx,0xc001e2fc
c000d63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d640:	89 10                	mov    DWORD PTR [eax],edx
c000d642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d646:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d649:	84 c0                	test   al,al
c000d64b:	74 0f                	je     c000d65c <VCache::~VCache()+0x28>
c000d64d:	83 ec 0c             	sub    esp,0xc
c000d650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d654:	e8 8f ff ff ff       	call   c000d5e8 <VCache::writeWriteBuffer()>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d660:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d663:	83 ec 0c             	sub    esp,0xc
c000d666:	50                   	push   eax
c000d667:	e8 5d a1 ff ff       	call   c00077c9 <free>
c000d66c:	83 c4 10             	add    esp,0x10
c000d66f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d673:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d676:	83 ec 0c             	sub    esp,0xc
c000d679:	50                   	push   eax
c000d67a:	e8 4a a1 ff ff       	call   c00077c9 <free>
c000d67f:	83 c4 10             	add    esp,0x10
c000d682:	90                   	nop
c000d683:	83 c4 0c             	add    esp,0xc
c000d686:	c3                   	ret    
c000d687:	90                   	nop

c000d688 <VCache::~VCache()>:
c000d688:	83 ec 0c             	sub    esp,0xc
c000d68b:	83 ec 0c             	sub    esp,0xc
c000d68e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d692:	e8 9d ff ff ff       	call   c000d634 <VCache::~VCache()>
c000d697:	83 c4 10             	add    esp,0x10
c000d69a:	83 ec 08             	sub    esp,0x8
c000d69d:	6a 44                	push   0x44
c000d69f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a3:	e8 56 ce ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000d6a8:	83 c4 10             	add    esp,0x10
c000d6ab:	83 c4 0c             	add    esp,0xc
c000d6ae:	c3                   	ret    
c000d6af:	90                   	nop

c000d6b0 <VCache::write(unsigned long long, int, void*)>:
c000d6b0:	55                   	push   ebp
c000d6b1:	57                   	push   edi
c000d6b2:	56                   	push   esi
c000d6b3:	53                   	push   ebx
c000d6b4:	83 ec 1c             	sub    esp,0x1c
c000d6b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d6bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d6bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6c3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d6c7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d6cb:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d6cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d6d3:	31 c0                	xor    eax,eax
c000d6d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d6d8:	39 e8                	cmp    eax,ebp
c000d6da:	7d 18                	jge    c000d6f4 <VCache::write(unsigned long long, int, void*)+0x44>
c000d6dc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d6df:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d6e5:	0f af c8             	imul   ecx,eax
c000d6e8:	89 ca                	mov    edx,ecx
c000d6ea:	01 f2                	add    edx,esi
c000d6ec:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d6ee:	40                   	inc    eax
c000d6ef:	eb e7                	jmp    c000d6d8 <VCache::write(unsigned long long, int, void*)+0x28>
c000d6f1:	8d 76 00             	lea    esi,[esi+0x0]
c000d6f4:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d6f8:	74 0a                	je     c000d704 <VCache::write(unsigned long long, int, void*)+0x54>
c000d6fa:	53                   	push   ebx
c000d6fb:	e8 d8 fe ff ff       	call   c000d5d8 <VCache::invalidateReadBuffer()>
c000d700:	58                   	pop    eax
c000d701:	8d 76 00             	lea    esi,[esi+0x0]
c000d704:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d708:	74 5a                	je     c000d764 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d70a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d70d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d711:	89 f8                	mov    eax,edi
c000d713:	99                   	cdq    
c000d714:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d717:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d71a:	31 c1                	xor    ecx,eax
c000d71c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d720:	31 d0                	xor    eax,edx
c000d722:	09 c1                	or     ecx,eax
c000d724:	75 32                	jne    c000d758 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d726:	83 fd 01             	cmp    ebp,0x1
c000d729:	75 2d                	jne    c000d758 <VCache::write(unsigned long long, int, void*)+0xa8>
c000d72b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d72e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d734:	0f af f9             	imul   edi,ecx
c000d737:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d73a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d73c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d73f:	40                   	inc    eax
c000d740:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d743:	83 f8 40             	cmp    eax,0x40
c000d746:	75 74                	jne    c000d7bc <VCache::write(unsigned long long, int, void*)+0x10c>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	53                   	push   ebx
c000d74c:	e8 97 fe ff ff       	call   c000d5e8 <VCache::writeWriteBuffer()>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	eb 66                	jmp    c000d7bc <VCache::write(unsigned long long, int, void*)+0x10c>
c000d756:	66 90                	xchg   ax,ax
c000d758:	83 ec 0c             	sub    esp,0xc
c000d75b:	53                   	push   ebx
c000d75c:	e8 87 fe ff ff       	call   c000d5e8 <VCache::writeWriteBuffer()>
c000d761:	83 c4 10             	add    esp,0x10
c000d764:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d767:	83 fd 3f             	cmp    ebp,0x3f
c000d76a:	7f 24                	jg     c000d790 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d76c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d770:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d773:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d776:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d77a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d77e:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d781:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d784:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d78a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d78c:	eb 2e                	jmp    c000d7bc <VCache::write(unsigned long long, int, void*)+0x10c>
c000d78e:	66 90                	xchg   ax,ax
c000d790:	8b 10                	mov    edx,DWORD PTR [eax]
c000d792:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d796:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d79a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d79e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7a2:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d7a6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d7aa:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d7ae:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d7b1:	83 c4 1c             	add    esp,0x1c
c000d7b4:	5b                   	pop    ebx
c000d7b5:	5e                   	pop    esi
c000d7b6:	5f                   	pop    edi
c000d7b7:	5d                   	pop    ebp
c000d7b8:	ff e0                	jmp    eax
c000d7ba:	66 90                	xchg   ax,ax
c000d7bc:	83 c4 1c             	add    esp,0x1c
c000d7bf:	31 c0                	xor    eax,eax
c000d7c1:	5b                   	pop    ebx
c000d7c2:	5e                   	pop    esi
c000d7c3:	5f                   	pop    edi
c000d7c4:	5d                   	pop    ebp
c000d7c5:	c3                   	ret    

c000d7c6 <VCache::read(unsigned long long, int, void*)>:
c000d7c6:	55                   	push   ebp
c000d7c7:	57                   	push   edi
c000d7c8:	56                   	push   esi
c000d7c9:	53                   	push   ebx
c000d7ca:	83 ec 1c             	sub    esp,0x1c
c000d7cd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d7d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d7d5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d7d9:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d7dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7e1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d7e5:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000d7e9:	74 0d                	je     c000d7f8 <VCache::read(unsigned long long, int, void*)+0x32>
c000d7eb:	83 ec 0c             	sub    esp,0xc
c000d7ee:	55                   	push   ebp
c000d7ef:	e8 f4 fd ff ff       	call   c000d5e8 <VCache::writeWriteBuffer()>
c000d7f4:	83 c4 10             	add    esp,0x10
c000d7f7:	90                   	nop
c000d7f8:	83 ec 0c             	sub    esp,0xc
c000d7fb:	55                   	push   ebp
c000d7fc:	e8 d7 fd ff ff       	call   c000d5d8 <VCache::invalidateReadBuffer()>
c000d801:	83 c4 0c             	add    esp,0xc
c000d804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d807:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d80d:	6a 00                	push   0x0
c000d80f:	53                   	push   ebx
c000d810:	e8 bb 2c ff ff       	call   c00004d0 <memset>
c000d815:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d818:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d81c:	8b 10                	mov    edx,DWORD PTR [eax]
c000d81e:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c000d822:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c000d826:	89 7c 24 48          	mov    DWORD PTR [esp+0x48],edi
c000d82a:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
c000d82e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d832:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d835:	83 c4 2c             	add    esp,0x2c
c000d838:	5b                   	pop    ebx
c000d839:	5e                   	pop    esi
c000d83a:	5f                   	pop    edi
c000d83b:	5d                   	pop    ebp
c000d83c:	ff e0                	jmp    eax

c000d83e <Video::putrect(int, int, int, int, unsigned int)>:
c000d83e:	55                   	push   ebp
c000d83f:	57                   	push   edi
c000d840:	56                   	push   esi
c000d841:	53                   	push   ebx
c000d842:	83 ec 1c             	sub    esp,0x1c
c000d845:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d849:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d84d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d851:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d855:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d85d:	01 df                	add    edi,ebx
c000d85f:	39 fb                	cmp    ebx,edi
c000d861:	7d 1f                	jge    c000d882 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d863:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d867:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d86b:	7d 12                	jge    c000d87f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d86d:	8b 16                	mov    edx,DWORD PTR [esi]
c000d86f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d873:	53                   	push   ebx
c000d874:	55                   	push   ebp
c000d875:	45                   	inc    ebp
c000d876:	56                   	push   esi
c000d877:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d87a:	83 c4 10             	add    esp,0x10
c000d87d:	eb e8                	jmp    c000d867 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d87f:	43                   	inc    ebx
c000d880:	eb dd                	jmp    c000d85f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d882:	83 c4 1c             	add    esp,0x1c
c000d885:	5b                   	pop    ebx
c000d886:	5e                   	pop    esi
c000d887:	5f                   	pop    edi
c000d888:	5d                   	pop    ebp
c000d889:	c3                   	ret    

c000d88a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d88a:	55                   	push   ebp
c000d88b:	57                   	push   edi
c000d88c:	31 ff                	xor    edi,edi
c000d88e:	56                   	push   esi
c000d88f:	53                   	push   ebx
c000d890:	83 ec 1c             	sub    esp,0x1c
c000d893:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d897:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d89b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d8a2:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d8a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d8ab:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d8af:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d8b3:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d8b6:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d8ba:	01 f9                	add    ecx,edi
c000d8bc:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d8c0:	7d 2f                	jge    c000d8f1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d8c2:	31 f6                	xor    esi,esi
c000d8c4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d8c8:	01 f2                	add    edx,esi
c000d8ca:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d8ce:	7d 1a                	jge    c000d8ea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d8d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d8d3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d8d6:	46                   	inc    esi
c000d8d7:	51                   	push   ecx
c000d8d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d8dc:	52                   	push   edx
c000d8dd:	55                   	push   ebp
c000d8de:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8e1:	83 c4 10             	add    esp,0x10
c000d8e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d8e8:	eb da                	jmp    c000d8c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d8ea:	47                   	inc    edi
c000d8eb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d8ef:	eb c5                	jmp    c000d8b6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d8f1:	83 c4 1c             	add    esp,0x1c
c000d8f4:	5b                   	pop    ebx
c000d8f5:	5e                   	pop    esi
c000d8f6:	5f                   	pop    edi
c000d8f7:	5d                   	pop    ebp
c000d8f8:	c3                   	ret    
c000d8f9:	90                   	nop

c000d8fa <Video::blit(unsigned int*, int, int, int, int)>:
c000d8fa:	55                   	push   ebp
c000d8fb:	57                   	push   edi
c000d8fc:	56                   	push   esi
c000d8fd:	53                   	push   ebx
c000d8fe:	83 ec 1c             	sub    esp,0x1c
c000d901:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d905:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d909:	85 c0                	test   eax,eax
c000d90b:	79 02                	jns    c000d90f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d90d:	31 c0                	xor    eax,eax
c000d90f:	c1 e0 02             	shl    eax,0x2
c000d912:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d916:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d91a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d91e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d922:	39 d8                	cmp    eax,ebx
c000d924:	7e 49                	jle    c000d96f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d926:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d92c:	7c 41                	jl     c000d96f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d92e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d932:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d936:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d93a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d93e:	39 f9                	cmp    ecx,edi
c000d940:	7e 22                	jle    c000d964 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d942:	83 c5 04             	add    ebp,0x4
c000d945:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d94b:	7c 14                	jl     c000d961 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d94d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d94f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d952:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d956:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d95a:	56                   	push   esi
c000d95b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d95e:	83 c4 10             	add    esp,0x10
c000d961:	47                   	inc    edi
c000d962:	eb d2                	jmp    c000d936 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d964:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d968:	43                   	inc    ebx
c000d969:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d96d:	eb ab                	jmp    c000d91a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d96f:	83 c4 1c             	add    esp,0x1c
c000d972:	5b                   	pop    ebx
c000d973:	5e                   	pop    esi
c000d974:	5f                   	pop    edi
c000d975:	5d                   	pop    ebp
c000d976:	c3                   	ret    
c000d977:	90                   	nop

c000d978 <Video::clearScreen(unsigned int)>:
c000d978:	57                   	push   edi
c000d979:	56                   	push   esi
c000d97a:	53                   	push   ebx
c000d97b:	31 db                	xor    ebx,ebx
c000d97d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d981:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d987:	7e 1f                	jle    c000d9a8 <Video::clearScreen(unsigned int)+0x30>
c000d989:	31 ff                	xor    edi,edi
c000d98b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d991:	7e 12                	jle    c000d9a5 <Video::clearScreen(unsigned int)+0x2d>
c000d993:	8b 06                	mov    eax,DWORD PTR [esi]
c000d995:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d999:	53                   	push   ebx
c000d99a:	57                   	push   edi
c000d99b:	47                   	inc    edi
c000d99c:	56                   	push   esi
c000d99d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	eb e6                	jmp    c000d98b <Video::clearScreen(unsigned int)+0x13>
c000d9a5:	43                   	inc    ebx
c000d9a6:	eb d9                	jmp    c000d981 <Video::clearScreen(unsigned int)+0x9>
c000d9a8:	5b                   	pop    ebx
c000d9a9:	5e                   	pop    esi
c000d9aa:	5f                   	pop    edi
c000d9ab:	c3                   	ret    

c000d9ac <Video::putpixel(int, int, unsigned int)>:
c000d9ac:	c7 44 24 04 04 e3 01 c0 	mov    DWORD PTR [esp+0x4],0xc001e304
c000d9b4:	e9 be 28 00 00       	jmp    c0010277 <KePanic(char const*)>
c000d9b9:	90                   	nop

c000d9ba <Video::Video(char const*)>:
c000d9ba:	83 ec 0c             	sub    esp,0xc
c000d9bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c1:	83 ec 08             	sub    esp,0x8
c000d9c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9c8:	50                   	push   eax
c000d9c9:	e8 fe e1 ff ff       	call   c000bbcc <Device::Device(char const*)>
c000d9ce:	83 c4 10             	add    esp,0x10
c000d9d1:	ba 74 e3 01 c0       	mov    edx,0xc001e374
c000d9d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9da:	89 10                	mov    DWORD PTR [eax],edx
c000d9dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d9ea:	90                   	nop
c000d9eb:	83 c4 0c             	add    esp,0xc
c000d9ee:	c3                   	ret    
c000d9ef:	90                   	nop

c000d9f0 <Video::~Video()>:
c000d9f0:	83 ec 0c             	sub    esp,0xc
c000d9f3:	ba 74 e3 01 c0       	mov    edx,0xc001e374
c000d9f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9fc:	89 10                	mov    DWORD PTR [eax],edx
c000d9fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da02:	83 ec 0c             	sub    esp,0xc
c000da05:	50                   	push   eax
c000da06:	e8 2b df ff ff       	call   c000b936 <Device::~Device()>
c000da0b:	83 c4 10             	add    esp,0x10
c000da0e:	90                   	nop
c000da0f:	83 c4 0c             	add    esp,0xc
c000da12:	c3                   	ret    
c000da13:	90                   	nop

c000da14 <Video::~Video()>:
c000da14:	83 ec 0c             	sub    esp,0xc
c000da17:	83 ec 0c             	sub    esp,0xc
c000da1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da1e:	e8 cd ff ff ff       	call   c000d9f0 <Video::~Video()>
c000da23:	83 c4 10             	add    esp,0x10
c000da26:	83 ec 08             	sub    esp,0x8
c000da29:	68 64 01 00 00       	push   0x164
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	e8 c7 ca ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c000da37:	83 c4 10             	add    esp,0x10
c000da3a:	83 c4 0c             	add    esp,0xc
c000da3d:	c3                   	ret    

c000da3e <Video::isMonochrome()>:
c000da3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da42:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000da48:	c3                   	ret    
c000da49:	90                   	nop

c000da4a <Video::getWidth()>:
c000da4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da4e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da54:	c3                   	ret    
c000da55:	90                   	nop

c000da56 <Video::getHeight()>:
c000da56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da5a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000da60:	c3                   	ret    
c000da61:	90                   	nop

c000da62 <Video::drawCursor(int, int, unsigned char*, int)>:
c000da62:	55                   	push   ebp
c000da63:	57                   	push   edi
c000da64:	56                   	push   esi
c000da65:	53                   	push   ebx
c000da66:	83 ec 2c             	sub    esp,0x2c
c000da69:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000da6d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000da71:	83 f8 01             	cmp    eax,0x1
c000da74:	19 c9                	sbb    ecx,ecx
c000da76:	31 db                	xor    ebx,ebx
c000da78:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000da7c:	89 cd                	mov    ebp,ecx
c000da7e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000da86:	f7 d5                	not    ebp
c000da88:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000da8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000da92:	01 d8                	add    eax,ebx
c000da94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da98:	56                   	push   esi
c000da99:	e8 b8 ff ff ff       	call   c000da56 <Video::getHeight()>
c000da9e:	59                   	pop    ecx
c000da9f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000daa3:	7e 70                	jle    c000db15 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000daa5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000daa9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000daad:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dab0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dab4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dab8:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dabf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dac3:	89 f8                	mov    eax,edi
c000dac5:	83 c0 20             	add    eax,0x20
c000dac8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dacc:	56                   	push   esi
c000dacd:	e8 78 ff ff ff       	call   c000da4a <Video::getWidth()>
c000dad2:	5a                   	pop    edx
c000dad3:	39 c7                	cmp    edi,eax
c000dad5:	7d 34                	jge    c000db0b <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000dad7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dadc:	74 05                	je     c000dae3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000dade:	8b 06                	mov    eax,DWORD PTR [esi]
c000dae0:	55                   	push   ebp
c000dae1:	eb 0d                	jmp    c000daf0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000dae3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dae8:	74 12                	je     c000dafc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000daea:	8b 06                	mov    eax,DWORD PTR [esi]
c000daec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000daf0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000daf4:	57                   	push   edi
c000daf5:	56                   	push   esi
c000daf6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000daf9:	83 c4 10             	add    esp,0x10
c000dafc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000db00:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000db04:	47                   	inc    edi
c000db05:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000db09:	75 c1                	jne    c000dacc <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000db0b:	43                   	inc    ebx
c000db0c:	83 fb 20             	cmp    ebx,0x20
c000db0f:	0f 85 79 ff ff ff    	jne    c000da8e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000db15:	83 c4 2c             	add    esp,0x2c
c000db18:	5b                   	pop    ebx
c000db19:	5e                   	pop    esi
c000db1a:	5f                   	pop    edi
c000db1b:	5d                   	pop    ebp
c000db1c:	c3                   	ret    
c000db1d:	90                   	nop

c000db1e <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000db1e:	55                   	push   ebp
c000db1f:	57                   	push   edi
c000db20:	56                   	push   esi
c000db21:	53                   	push   ebx
c000db22:	83 ec 28             	sub    esp,0x28
c000db25:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000db29:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000db2d:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000db31:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000db35:	c1 e6 08             	shl    esi,0x8
c000db38:	01 c6                	add    esi,eax
c000db3a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000db3e:	c1 e0 08             	shl    eax,0x8
c000db41:	01 d0                	add    eax,edx
c000db43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db4b:	0f af c6             	imul   eax,esi
c000db4e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000db55:	50                   	push   eax
c000db56:	e8 5e 9c ff ff       	call   c00077b9 <malloc>
c000db5b:	83 c4 10             	add    esp,0x10
c000db5e:	89 c7                	mov    edi,eax
c000db60:	85 c0                	test   eax,eax
c000db62:	75 10                	jne    c000db74 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000db64:	83 ec 0c             	sub    esp,0xc
c000db67:	68 25 e3 01 c0       	push   0xc001e325
c000db6c:	e8 06 27 00 00       	call   c0010277 <KePanic(char const*)>
c000db71:	83 c4 10             	add    esp,0x10
c000db74:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000db77:	ba 12 00 00 00       	mov    edx,0x12
c000db7c:	84 c0                	test   al,al
c000db7e:	74 11                	je     c000db91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000db80:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000db84:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000db88:	c1 fa 03             	sar    edx,0x3
c000db8b:	0f af d1             	imul   edx,ecx
c000db8e:	83 c2 12             	add    edx,0x12
c000db91:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000db95:	74 04                	je     c000db9b <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000db97:	85 f6                	test   esi,esi
c000db99:	75 12                	jne    c000dbad <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000db9b:	83 ec 0c             	sub    esp,0xc
c000db9e:	68 35 e3 01 c0       	push   0xc001e335
c000dba3:	e8 4c ca ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000dba8:	e9 b8 00 00 00       	jmp    c000dc65 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dbad:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dbb1:	80 f9 02             	cmp    cl,0x2
c000dbb4:	0f 85 96 00 00 00    	jne    c000dc50 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dbba:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dbbf:	75 0e                	jne    c000dbcf <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dbc1:	84 c0                	test   al,al
c000dbc3:	75 0a                	jne    c000dbcf <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dbc5:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dbc8:	83 e8 18             	sub    eax,0x18
c000dbcb:	a8 f7                	test   al,0xf7
c000dbcd:	74 0a                	je     c000dbd9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dbcf:	83 ec 0c             	sub    esp,0xc
c000dbd2:	68 4a e3 01 c0       	push   0xc001e34a
c000dbd7:	eb 7f                	jmp    c000dc58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dbd9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dbe1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dbe9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dbed:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dbf5:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dbf9:	75 0c                	jne    c000dc07 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dbfb:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dc00:	c1 e0 18             	shl    eax,0x18
c000dc03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc07:	45                   	inc    ebp
c000dc08:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dc0d:	c1 e1 10             	shl    ecx,0x10
c000dc10:	89 c8                	mov    eax,ecx
c000dc12:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dc17:	c1 e1 08             	shl    ecx,0x8
c000dc1a:	09 c1                	or     ecx,eax
c000dc1c:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dc20:	09 c1                	or     ecx,eax
c000dc22:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dc26:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dc2a:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dc2e:	c1 f8 03             	sar    eax,0x3
c000dc31:	01 c2                	add    edx,eax
c000dc33:	89 e8                	mov    eax,ebp
c000dc35:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dc39:	39 c6                	cmp    esi,eax
c000dc3b:	7f b0                	jg     c000dbed <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dc3d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dc41:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dc45:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000dc48:	7e 22                	jle    c000dc6c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000dc4a:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000dc4e:	eb 99                	jmp    c000dbe9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000dc50:	50                   	push   eax
c000dc51:	50                   	push   eax
c000dc52:	51                   	push   ecx
c000dc53:	68 58 e3 01 c0       	push   0xc001e358
c000dc58:	e8 97 c9 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000dc5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000dc60:	e8 64 9b ff ff       	call   c00077c9 <free>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	31 ff                	xor    edi,edi
c000dc6a:	eb 0f                	jmp    c000dc7b <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000dc6c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dc70:	89 30                	mov    DWORD PTR [eax],esi
c000dc72:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dc76:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dc79:	89 30                	mov    DWORD PTR [eax],esi
c000dc7b:	83 c4 1c             	add    esp,0x1c
c000dc7e:	89 f8                	mov    eax,edi
c000dc80:	5b                   	pop    ebx
c000dc81:	5e                   	pop    esi
c000dc82:	5f                   	pop    edi
c000dc83:	5d                   	pop    ebp
c000dc84:	c3                   	ret    
c000dc85:	90                   	nop

c000dc86 <Video::putTGA(int, int, unsigned char*, int)>:
c000dc86:	55                   	push   ebp
c000dc87:	57                   	push   edi
c000dc88:	56                   	push   esi
c000dc89:	53                   	push   ebx
c000dc8a:	83 ec 28             	sub    esp,0x28
c000dc8d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000dc91:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc95:	50                   	push   eax
c000dc96:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc9a:	50                   	push   eax
c000dc9b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dc9f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dca3:	56                   	push   esi
c000dca4:	e8 75 fe ff ff       	call   c000db1e <Video::tgaParse(unsigned char*, int, int*, int*)>
c000dca9:	83 c4 20             	add    esp,0x20
c000dcac:	85 c0                	test   eax,eax
c000dcae:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000dcb2:	74 35                	je     c000dce9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dcb4:	89 c7                	mov    edi,eax
c000dcb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dcba:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dcbe:	39 d8                	cmp    eax,ebx
c000dcc0:	7e 27                	jle    c000dce9 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dcc2:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dcc6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dcca:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dcce:	39 e8                	cmp    eax,ebp
c000dcd0:	7e 14                	jle    c000dce6 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dcd2:	8b 06                	mov    eax,DWORD PTR [esi]
c000dcd4:	83 c7 04             	add    edi,0x4
c000dcd7:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dcda:	53                   	push   ebx
c000dcdb:	55                   	push   ebp
c000dcdc:	45                   	inc    ebp
c000dcdd:	56                   	push   esi
c000dcde:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dce1:	83 c4 10             	add    esp,0x10
c000dce4:	eb e0                	jmp    c000dcc6 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dce6:	43                   	inc    ebx
c000dce7:	eb cd                	jmp    c000dcb6 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dce9:	83 c4 1c             	add    esp,0x1c
c000dcec:	5b                   	pop    ebx
c000dced:	5e                   	pop    esi
c000dcee:	5f                   	pop    edi
c000dcef:	5d                   	pop    ebp
c000dcf0:	c3                   	ret    
c000dcf1:	66 90                	xchg   ax,ax
c000dcf3:	90                   	nop

c000dcf4 <ACPI::close(int, int, void*)>:
c000dcf4:	83 ec 1c             	sub    esp,0x1c
c000dcf7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dcff:	74 0b                	je     c000dd0c <ACPI::close(int, int, void*)+0x18>
c000dd01:	b8 00 00 00 00       	mov    eax,0x0
c000dd06:	e9 9d 00 00 00       	jmp    c000dda8 <ACPI::close(int, int, void*)+0xb4>
c000dd0b:	90                   	nop
c000dd0c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dd11:	75 29                	jne    c000dd3c <ACPI::close(int, int, void*)+0x48>
c000dd13:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dd18:	85 c0                	test   eax,eax
c000dd1a:	74 08                	je     c000dd24 <ACPI::close(int, int, void*)+0x30>
c000dd1c:	a1 a8 44 02 c0       	mov    eax,ds:0xc00244a8
c000dd21:	ff d0                	call   eax
c000dd23:	90                   	nop
c000dd24:	83 ec 0c             	sub    esp,0xc
c000dd27:	68 b4 e3 01 c0       	push   0xc001e3b4
c000dd2c:	e8 46 25 00 00       	call   c0010277 <KePanic(char const*)>
c000dd31:	83 c4 10             	add    esp,0x10
c000dd34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dd39:	eb 6d                	jmp    c000dda8 <ACPI::close(int, int, void*)+0xb4>
c000dd3b:	90                   	nop
c000dd3c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dd41:	75 5d                	jne    c000dda0 <ACPI::close(int, int, void*)+0xac>
c000dd43:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dd48:	85 c0                	test   eax,eax
c000dd4a:	74 08                	je     c000dd54 <ACPI::close(int, int, void*)+0x60>
c000dd4c:	a1 a4 44 02 c0       	mov    eax,ds:0xc00244a4
c000dd51:	ff d0                	call   eax
c000dd53:	90                   	nop
c000dd54:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dd59:	8d 76 00             	lea    esi,[esi+0x0]
c000dd5c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dd60:	25 ff 00 00 00       	and    eax,0xff
c000dd65:	83 e0 02             	and    eax,0x2
c000dd68:	74 1e                	je     c000dd88 <ACPI::close(int, int, void*)+0x94>
c000dd6a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dd71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd75:	89 c2                	mov    edx,eax
c000dd77:	ec                   	in     al,dx
c000dd78:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dd7c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dd80:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dd84:	eb d6                	jmp    c000dd5c <ACPI::close(int, int, void*)+0x68>
c000dd86:	66 90                	xchg   ax,ax
c000dd88:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dd8f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dd94:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dd98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd9c:	ee                   	out    dx,al
c000dd9d:	8d 76 00             	lea    esi,[esi+0x0]
c000dda0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dda5:	8d 76 00             	lea    esi,[esi+0x0]
c000dda8:	83 c4 1c             	add    esp,0x1c
c000ddab:	c3                   	ret    

c000ddac <findRSDP()>:
c000ddac:	83 ec 1c             	sub    esp,0x1c
c000ddaf:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ddb4:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ddba:	83 e0 04             	and    eax,0x4
c000ddbd:	84 c0                	test   al,al
c000ddbf:	75 07                	jne    c000ddc8 <findRSDP()+0x1c>
c000ddc1:	b8 00 00 00 00       	mov    eax,0x0
c000ddc6:	eb 70                	jmp    c000de38 <findRSDP()+0x8c>
c000ddc8:	a1 e8 1e 02 c0       	mov    eax,ds:0xc0021ee8
c000ddcd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ddd2:	7f 1c                	jg     c000ddf0 <findRSDP()+0x44>
c000ddd4:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000ddd9:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dddf:	83 e2 fb             	and    edx,0xfffffffb
c000dde2:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dde8:	b8 00 00 00 00       	mov    eax,0x0
c000dded:	eb 49                	jmp    c000de38 <findRSDP()+0x8c>
c000ddef:	90                   	nop
c000ddf0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ddf8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000de00:	77 2e                	ja     c000de30 <findRSDP()+0x84>
c000de02:	83 ec 04             	sub    esp,0x4
c000de05:	6a 08                	push   0x8
c000de07:	68 4f e4 01 c0       	push   0xc001e44f
c000de0c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de10:	e8 7b 25 ff ff       	call   c0000390 <memcmp>
c000de15:	83 c4 10             	add    esp,0x10
c000de18:	85 c0                	test   eax,eax
c000de1a:	0f 94 c0             	sete   al
c000de1d:	84 c0                	test   al,al
c000de1f:	74 07                	je     c000de28 <findRSDP()+0x7c>
c000de21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de25:	eb 11                	jmp    c000de38 <findRSDP()+0x8c>
c000de27:	90                   	nop
c000de28:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000de2d:	eb c9                	jmp    c000ddf8 <findRSDP()+0x4c>
c000de2f:	90                   	nop
c000de30:	b8 00 00 00 00       	mov    eax,0x0
c000de35:	8d 76 00             	lea    esi,[esi+0x0]
c000de38:	83 c4 1c             	add    esp,0x1c
c000de3b:	c3                   	ret    

c000de3c <loadACPITables(unsigned char*)>:
c000de3c:	57                   	push   edi
c000de3d:	56                   	push   esi
c000de3e:	53                   	push   ebx
c000de3f:	83 ec 60             	sub    esp,0x60
c000de42:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000de47:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000de4d:	83 e0 04             	and    eax,0x4
c000de50:	84 c0                	test   al,al
c000de52:	0f 84 3c 02 00 00    	je     c000e094 <loadACPITables(unsigned char*)+0x258>
c000de58:	a0 c0 46 02 c0       	mov    al,ds:0xc00246c0
c000de5d:	84 c0                	test   al,al
c000de5f:	74 77                	je     c000ded8 <loadACPITables(unsigned char*)+0x9c>
c000de61:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de65:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000de69:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000de6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de70:	83 e8 24             	sub    eax,0x24
c000de73:	c1 e8 03             	shr    eax,0x3
c000de76:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000de7a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000de82:	66 90                	xchg   ax,ax
c000de84:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000de88:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000de8c:	0f 8d b6 00 00 00    	jge    c000df48 <loadACPITables(unsigned char*)+0x10c>
c000de92:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000de96:	83 c0 24             	add    eax,0x24
c000de99:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000de9d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dea1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dea5:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dea9:	c1 e0 03             	shl    eax,0x3
c000deac:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000deb0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000deb4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000deb7:	8b 00                	mov    eax,DWORD PTR [eax]
c000deb9:	89 c1                	mov    ecx,eax
c000debb:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000dec0:	8d 50 01             	lea    edx,[eax+0x1]
c000dec3:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000dec9:	89 ca                	mov    edx,ecx
c000decb:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000ded2:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000ded6:	eb ac                	jmp    c000de84 <loadACPITables(unsigned char*)+0x48>
c000ded8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dedc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dee0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000dee4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dee7:	83 e8 24             	sub    eax,0x24
c000deea:	c1 e8 02             	shr    eax,0x2
c000deed:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000def1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000def9:	8d 76 00             	lea    esi,[esi+0x0]
c000defc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df00:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000df04:	7d 42                	jge    c000df48 <loadACPITables(unsigned char*)+0x10c>
c000df06:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000df0a:	83 c0 24             	add    eax,0x24
c000df0d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000df11:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000df15:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000df19:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000df1d:	c1 e0 02             	shl    eax,0x2
c000df20:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000df24:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000df28:	8b 08                	mov    ecx,DWORD PTR [eax]
c000df2a:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000df2f:	8d 50 01             	lea    edx,[eax+0x1]
c000df32:	89 15 ac 44 02 c0    	mov    DWORD PTR ds:0xc00244ac,edx
c000df38:	89 ca                	mov    edx,ecx
c000df3a:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000df41:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000df45:	eb b5                	jmp    c000defc <loadACPITables(unsigned char*)+0xc0>
c000df47:	90                   	nop
c000df48:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000df50:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000df55:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000df59:	0f 8d 39 01 00 00    	jge    c000e098 <loadACPITables(unsigned char*)+0x25c>
c000df5f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df63:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000df6a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000df76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df7a:	25 ff 0f 00 00       	and    eax,0xfff
c000df7f:	89 c6                	mov    esi,eax
c000df81:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000df87:	83 ec 0c             	sub    esp,0xc
c000df8a:	6a 01                	push   0x1
c000df8c:	e8 f4 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df98:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df9e:	83 ec 0c             	sub    esp,0xc
c000dfa1:	6a 01                	push   0x1
c000dfa3:	6a 01                	push   0x1
c000dfa5:	50                   	push   eax
c000dfa6:	52                   	push   edx
c000dfa7:	53                   	push   ebx
c000dfa8:	e8 45 bc ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000dfad:	83 c4 20             	add    esp,0x20
c000dfb0:	09 f0                	or     eax,esi
c000dfb2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfb6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dfba:	c1 e0 03             	shl    eax,0x3
c000dfbd:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000dfc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000dfca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfce:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000dfd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dfda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dfde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dfe2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dfe6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dfea:	89 c6                	mov    esi,eax
c000dfec:	89 d7                	mov    edi,edx
c000dfee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dff0:	89 c8                	mov    eax,ecx
c000dff2:	89 fa                	mov    edx,edi
c000dff4:	89 f3                	mov    ebx,esi
c000dff6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dffa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000dffe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e002:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e006:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e009:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e00d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e011:	05 00 10 00 00       	add    eax,0x1000
c000e016:	c1 e8 0c             	shr    eax,0xc
c000e019:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e01d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e021:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e025:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e029:	25 ff 0f 00 00       	and    eax,0xfff
c000e02e:	89 c6                	mov    esi,eax
c000e030:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e036:	83 ec 0c             	sub    esp,0xc
c000e039:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e03d:	e8 43 b2 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e042:	83 c4 10             	add    esp,0x10
c000e045:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e049:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e04f:	83 ec 0c             	sub    esp,0xc
c000e052:	6a 01                	push   0x1
c000e054:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e058:	50                   	push   eax
c000e059:	52                   	push   edx
c000e05a:	53                   	push   ebx
c000e05b:	e8 92 bb ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e060:	83 c4 20             	add    esp,0x20
c000e063:	09 f0                	or     eax,esi
c000e065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e069:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e06d:	83 ec 0c             	sub    esp,0xc
c000e070:	50                   	push   eax
c000e071:	e8 03 b5 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c000e076:	83 c4 10             	add    esp,0x10
c000e079:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e07d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e081:	89 14 c5 c4 44 02 c0 	mov    DWORD PTR [eax*8-0x3ffdbb3c],edx
c000e088:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e08c:	e9 bf fe ff ff       	jmp    c000df50 <loadACPITables(unsigned char*)+0x114>
c000e091:	8d 76 00             	lea    esi,[esi+0x0]
c000e094:	90                   	nop
c000e095:	8d 76 00             	lea    esi,[esi+0x0]
c000e098:	83 c4 60             	add    esp,0x60
c000e09b:	5b                   	pop    ebx
c000e09c:	5e                   	pop    esi
c000e09d:	5f                   	pop    edi
c000e09e:	c3                   	ret    
c000e09f:	90                   	nop

c000e0a0 <findRSDT(unsigned char*)>:
c000e0a0:	57                   	push   edi
c000e0a1:	56                   	push   esi
c000e0a2:	53                   	push   ebx
c000e0a3:	83 ec 50             	sub    esp,0x50
c000e0a6:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e0ab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0b1:	83 e0 04             	and    eax,0x4
c000e0b4:	84 c0                	test   al,al
c000e0b6:	75 0c                	jne    c000e0c4 <findRSDT(unsigned char*)+0x24>
c000e0b8:	b8 00 00 00 00       	mov    eax,0x0
c000e0bd:	e9 26 01 00 00       	jmp    c000e1e8 <findRSDT(unsigned char*)+0x148>
c000e0c2:	66 90                	xchg   ax,ax
c000e0c4:	89 e0                	mov    eax,esp
c000e0c6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e0ca:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e0ce:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e0d2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e0da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e0de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e0e6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e0ea:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e0ee:	89 c6                	mov    esi,eax
c000e0f0:	89 d7                	mov    edi,edx
c000e0f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e0f4:	89 c8                	mov    eax,ecx
c000e0f6:	89 fa                	mov    edx,edi
c000e0f8:	89 f3                	mov    ebx,esi
c000e0fa:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e0fe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e102:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e106:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e10a:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e10e:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e11a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e11e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e126:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e12a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e12e:	25 ff 0f 00 00       	and    eax,0xfff
c000e133:	89 c6                	mov    esi,eax
c000e135:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e13b:	83 ec 0c             	sub    esp,0xc
c000e13e:	6a 02                	push   0x2
c000e140:	e8 40 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e145:	83 c4 10             	add    esp,0x10
c000e148:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e14c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e152:	83 ec 0c             	sub    esp,0xc
c000e155:	6a 01                	push   0x1
c000e157:	6a 02                	push   0x2
c000e159:	50                   	push   eax
c000e15a:	52                   	push   edx
c000e15b:	53                   	push   ebx
c000e15c:	e8 91 ba ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e161:	83 c4 20             	add    esp,0x20
c000e164:	09 f0                	or     eax,esi
c000e166:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e16a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e16e:	25 ff 0f 00 00       	and    eax,0xfff
c000e173:	89 c6                	mov    esi,eax
c000e175:	8b 1d b0 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb0
c000e17b:	83 ec 0c             	sub    esp,0xc
c000e17e:	6a 02                	push   0x2
c000e180:	e8 00 b1 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e18c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e192:	83 ec 0c             	sub    esp,0xc
c000e195:	6a 01                	push   0x1
c000e197:	6a 02                	push   0x2
c000e199:	50                   	push   eax
c000e19a:	52                   	push   edx
c000e19b:	53                   	push   ebx
c000e19c:	e8 51 ba ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1a1:	83 c4 20             	add    esp,0x20
c000e1a4:	09 f0                	or     eax,esi
c000e1a6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1aa:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e1af:	75 13                	jne    c000e1c4 <findRSDT(unsigned char*)+0x124>
c000e1b1:	c6 05 c0 46 02 c0 00 	mov    BYTE PTR ds:0xc00246c0,0x0
c000e1b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e1bc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e1c0:	eb 22                	jmp    c000e1e4 <findRSDT(unsigned char*)+0x144>
c000e1c2:	66 90                	xchg   ax,ax
c000e1c4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e1c9:	75 11                	jne    c000e1dc <findRSDT(unsigned char*)+0x13c>
c000e1cb:	c6 05 c0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246c0,0x1
c000e1d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e1d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e1da:	eb 08                	jmp    c000e1e4 <findRSDT(unsigned char*)+0x144>
c000e1dc:	b8 00 00 00 00       	mov    eax,0x0
c000e1e1:	eb 05                	jmp    c000e1e8 <findRSDT(unsigned char*)+0x148>
c000e1e3:	90                   	nop
c000e1e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e1e8:	83 c4 50             	add    esp,0x50
c000e1eb:	5b                   	pop    ebx
c000e1ec:	5e                   	pop    esi
c000e1ed:	5f                   	pop    edi
c000e1ee:	c3                   	ret    
c000e1ef:	90                   	nop

c000e1f0 <findDataTable(unsigned char*, char*)>:
c000e1f0:	83 ec 1c             	sub    esp,0x1c
c000e1f3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e1f8:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e1fe:	83 e0 04             	and    eax,0x4
c000e201:	84 c0                	test   al,al
c000e203:	75 07                	jne    c000e20c <findDataTable(unsigned char*, char*)+0x1c>
c000e205:	b8 00 00 00 00       	mov    eax,0x0
c000e20a:	eb 58                	jmp    c000e264 <findDataTable(unsigned char*, char*)+0x74>
c000e20c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e214:	a1 ac 44 02 c0       	mov    eax,ds:0xc00244ac
c000e219:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e21d:	7d 3d                	jge    c000e25c <findDataTable(unsigned char*, char*)+0x6c>
c000e21f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e223:	c1 e0 03             	shl    eax,0x3
c000e226:	05 c0 44 02 c0       	add    eax,0xc00244c0
c000e22b:	83 ec 04             	sub    esp,0x4
c000e22e:	6a 04                	push   0x4
c000e230:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e234:	50                   	push   eax
c000e235:	e8 56 21 ff ff       	call   c0000390 <memcmp>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	85 c0                	test   eax,eax
c000e23f:	0f 94 c0             	sete   al
c000e242:	84 c0                	test   al,al
c000e244:	74 0e                	je     c000e254 <findDataTable(unsigned char*, char*)+0x64>
c000e246:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e24a:	8b 04 c5 c4 44 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdbb3c]
c000e251:	eb 11                	jmp    c000e264 <findDataTable(unsigned char*, char*)+0x74>
c000e253:	90                   	nop
c000e254:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e258:	eb ba                	jmp    c000e214 <findDataTable(unsigned char*, char*)+0x24>
c000e25a:	66 90                	xchg   ax,ax
c000e25c:	b8 00 00 00 00       	mov    eax,0x0
c000e261:	8d 76 00             	lea    esi,[esi+0x0]
c000e264:	83 c4 1c             	add    esp,0x1c
c000e267:	c3                   	ret    

c000e268 <scanMADT()>:
c000e268:	53                   	push   ebx
c000e269:	83 ec 38             	sub    esp,0x38
c000e26c:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000e271:	25 00 04 00 00       	and    eax,0x400
c000e276:	74 14                	je     c000e28c <scanMADT()+0x24>
c000e278:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e27d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e283:	83 e2 fb             	and    edx,0xfffffffb
c000e286:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e28c:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e291:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e297:	83 e0 04             	and    eax,0x4
c000e29a:	84 c0                	test   al,al
c000e29c:	0f 84 8a 04 00 00    	je     c000e72c <scanMADT()+0x4c4>
c000e2a2:	e8 05 fb ff ff       	call   c000ddac <findRSDP()>
c000e2a7:	a3 cc 46 02 c0       	mov    ds:0xc00246cc,eax
c000e2ac:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e2b1:	85 c0                	test   eax,eax
c000e2b3:	75 1b                	jne    c000e2d0 <scanMADT()+0x68>
c000e2b5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e2ba:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2c0:	83 e2 fb             	and    edx,0xfffffffb
c000e2c3:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e2c9:	e9 66 04 00 00       	jmp    c000e734 <scanMADT()+0x4cc>
c000e2ce:	66 90                	xchg   ax,ax
c000e2d0:	a1 cc 46 02 c0       	mov    eax,ds:0xc00246cc
c000e2d5:	83 ec 0c             	sub    esp,0xc
c000e2d8:	50                   	push   eax
c000e2d9:	e8 c2 fd ff ff       	call   c000e0a0 <findRSDT(unsigned char*)>
c000e2de:	83 c4 10             	add    esp,0x10
c000e2e1:	a3 c8 46 02 c0       	mov    ds:0xc00246c8,eax
c000e2e6:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e2eb:	85 c0                	test   eax,eax
c000e2ed:	75 19                	jne    c000e308 <scanMADT()+0xa0>
c000e2ef:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e2f4:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e2fa:	83 e2 fb             	and    edx,0xfffffffb
c000e2fd:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e303:	e9 2c 04 00 00       	jmp    c000e734 <scanMADT()+0x4cc>
c000e308:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e30d:	83 ec 0c             	sub    esp,0xc
c000e310:	50                   	push   eax
c000e311:	e8 26 fb ff ff       	call   c000de3c <loadACPITables(unsigned char*)>
c000e316:	83 c4 10             	add    esp,0x10
c000e319:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e31e:	83 ec 08             	sub    esp,0x8
c000e321:	68 58 e4 01 c0       	push   0xc001e458
c000e326:	50                   	push   eax
c000e327:	e8 c4 fe ff ff       	call   c000e1f0 <findDataTable(unsigned char*, char*)>
c000e32c:	83 c4 10             	add    esp,0x10
c000e32f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e333:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e338:	75 1a                	jne    c000e354 <scanMADT()+0xec>
c000e33a:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e33f:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e345:	83 e2 fe             	and    edx,0xfffffffe
c000e348:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e34e:	e9 e1 03 00 00       	jmp    c000e734 <scanMADT()+0x4cc>
c000e353:	90                   	nop
c000e354:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e35c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e360:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e363:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e367:	0f 87 c7 03 00 00    	ja     c000e734 <scanMADT()+0x4cc>
c000e36d:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e375:	0f 87 b9 03 00 00    	ja     c000e734 <scanMADT()+0x4cc>
c000e37b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e37f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e383:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e387:	8d 50 01             	lea    edx,[eax+0x1]
c000e38a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e38e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e392:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e396:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e39a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e39e:	8d 50 01             	lea    edx,[eax+0x1]
c000e3a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e3ad:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e3b1:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e3b6:	0f 86 74 03 00 00    	jbe    c000e730 <scanMADT()+0x4c8>
c000e3bc:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e3c1:	75 5d                	jne    c000e420 <scanMADT()+0x1b8>
c000e3c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3c7:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e3ce:	8a 15 c0 48 02 c0    	mov    dl,BYTE PTR ds:0xc00248c0
c000e3d4:	81 e2 ff 00 00 00    	and    edx,0xff
c000e3da:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e3de:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e3e2:	88 82 00 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb700],al
c000e3e8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e3ec:	8d 42 01             	lea    eax,[edx+0x1]
c000e3ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e3f3:	a0 c0 48 02 c0       	mov    al,ds:0xc00248c0
c000e3f8:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3fb:	88 0d c0 48 02 c0    	mov    BYTE PTR ds:0xc00248c0,cl
c000e401:	25 ff 00 00 00       	and    eax,0xff
c000e406:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e40a:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e40e:	88 90 e0 48 02 c0    	mov    BYTE PTR [eax-0x3ffdb720],dl
c000e414:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e419:	e9 f6 02 00 00       	jmp    c000e714 <scanMADT()+0x4ac>
c000e41e:	66 90                	xchg   ax,ax
c000e420:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e425:	0f 85 29 01 00 00    	jne    c000e554 <scanMADT()+0x2ec>
c000e42b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e42f:	8d 50 01             	lea    edx,[eax+0x1]
c000e432:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e436:	8a 15 80 47 02 c0    	mov    dl,BYTE PTR ds:0xc0024780
c000e43c:	81 e2 ff 00 00 00    	and    edx,0xff
c000e442:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e446:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e44a:	88 82 a0 47 02 c0    	mov    BYTE PTR [edx-0x3ffdb860],al
c000e450:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e454:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e458:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e45c:	01 d0                	add    eax,edx
c000e45e:	83 c0 2c             	add    eax,0x2c
c000e461:	8a 00                	mov    al,BYTE PTR [eax]
c000e463:	31 d2                	xor    edx,edx
c000e465:	88 c2                	mov    dl,al
c000e467:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e46b:	8d 48 01             	lea    ecx,[eax+0x1]
c000e46e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e472:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e476:	25 ff 00 00 00       	and    eax,0xff
c000e47b:	c1 e0 08             	shl    eax,0x8
c000e47e:	89 d1                	mov    ecx,edx
c000e480:	09 c1                	or     ecx,eax
c000e482:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e486:	8d 50 02             	lea    edx,[eax+0x2]
c000e489:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e48d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e491:	25 ff 00 00 00       	and    eax,0xff
c000e496:	c1 e0 10             	shl    eax,0x10
c000e499:	09 c1                	or     ecx,eax
c000e49b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e49f:	8d 50 03             	lea    edx,[eax+0x3]
c000e4a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4a6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4aa:	25 ff 00 00 00       	and    eax,0xff
c000e4af:	c1 e0 18             	shl    eax,0x18
c000e4b2:	09 c1                	or     ecx,eax
c000e4b4:	89 ca                	mov    edx,ecx
c000e4b6:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e4bb:	25 ff 00 00 00       	and    eax,0xff
c000e4c0:	89 14 85 c0 47 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb840],edx
c000e4c7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4cc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4d4:	01 d0                	add    eax,edx
c000e4d6:	83 c0 2c             	add    eax,0x2c
c000e4d9:	8a 00                	mov    al,BYTE PTR [eax]
c000e4db:	31 d2                	xor    edx,edx
c000e4dd:	88 c2                	mov    dl,al
c000e4df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e3:	8d 48 01             	lea    ecx,[eax+0x1]
c000e4e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4ea:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e4ee:	25 ff 00 00 00       	and    eax,0xff
c000e4f3:	c1 e0 08             	shl    eax,0x8
c000e4f6:	89 d1                	mov    ecx,edx
c000e4f8:	09 c1                	or     ecx,eax
c000e4fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4fe:	8d 50 02             	lea    edx,[eax+0x2]
c000e501:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e505:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e509:	25 ff 00 00 00       	and    eax,0xff
c000e50e:	c1 e0 10             	shl    eax,0x10
c000e511:	09 c1                	or     ecx,eax
c000e513:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e517:	8d 50 03             	lea    edx,[eax+0x3]
c000e51a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e51e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e522:	25 ff 00 00 00       	and    eax,0xff
c000e527:	c1 e0 18             	shl    eax,0x18
c000e52a:	09 c1                	or     ecx,eax
c000e52c:	89 ca                	mov    edx,ecx
c000e52e:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e533:	25 ff 00 00 00       	and    eax,0xff
c000e538:	89 14 85 40 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb7c0],edx
c000e53f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e544:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c000e549:	40                   	inc    eax
c000e54a:	a2 80 47 02 c0       	mov    ds:0xc0024780,al
c000e54f:	e9 c0 01 00 00       	jmp    c000e714 <scanMADT()+0x4ac>
c000e554:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e559:	0f 85 fd 00 00 00    	jne    c000e65c <scanMADT()+0x3f4>
c000e55f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e563:	8d 50 01             	lea    edx,[eax+0x1]
c000e566:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e56a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e56e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e572:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e576:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e57a:	8d 50 01             	lea    edx,[eax+0x1]
c000e57d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e581:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e585:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e589:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e58d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e591:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e595:	01 d0                	add    eax,edx
c000e597:	83 c0 2c             	add    eax,0x2c
c000e59a:	8a 00                	mov    al,BYTE PTR [eax]
c000e59c:	31 d2                	xor    edx,edx
c000e59e:	88 c2                	mov    dl,al
c000e5a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a4:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5ab:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5af:	25 ff 00 00 00       	and    eax,0xff
c000e5b4:	c1 e0 08             	shl    eax,0x8
c000e5b7:	89 d1                	mov    ecx,edx
c000e5b9:	09 c1                	or     ecx,eax
c000e5bb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5bf:	8d 50 02             	lea    edx,[eax+0x2]
c000e5c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5c6:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5ca:	25 ff 00 00 00       	and    eax,0xff
c000e5cf:	c1 e0 10             	shl    eax,0x10
c000e5d2:	09 c1                	or     ecx,eax
c000e5d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5d8:	8d 50 03             	lea    edx,[eax+0x3]
c000e5db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5df:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5e3:	25 ff 00 00 00       	and    eax,0xff
c000e5e8:	c1 e0 18             	shl    eax,0x18
c000e5eb:	09 c8                	or     eax,ecx
c000e5ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e5f1:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e5f6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5fe:	01 d0                	add    eax,edx
c000e600:	83 c0 2c             	add    eax,0x2c
c000e603:	8a 00                	mov    al,BYTE PTR [eax]
c000e605:	25 ff 00 00 00       	and    eax,0xff
c000e60a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e60e:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e611:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e615:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e619:	81 e2 ff 00 00 00    	and    edx,0xff
c000e61f:	c1 e2 08             	shl    edx,0x8
c000e622:	09 d0                	or     eax,edx
c000e624:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e629:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e62e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e632:	25 ff 00 00 00       	and    eax,0xff
c000e637:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e63b:	88 90 e0 f8 01 c0    	mov    BYTE PTR [eax-0x3ffe0720],dl
c000e641:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e645:	31 d2                	xor    edx,edx
c000e647:	88 c2                	mov    dl,al
c000e649:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e64e:	66 89 84 12 60 47 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdb8a0],ax
c000e656:	e9 b9 00 00 00       	jmp    c000e714 <scanMADT()+0x4ac>
c000e65b:	90                   	nop
c000e65c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e661:	0f 85 a1 00 00 00    	jne    c000e708 <scanMADT()+0x4a0>
c000e667:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e66b:	8d 50 01             	lea    edx,[eax+0x1]
c000e66e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e672:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e676:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e67a:	25 ff 00 00 00       	and    eax,0xff
c000e67f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e683:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e687:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e68b:	01 d0                	add    eax,edx
c000e68d:	83 c0 2c             	add    eax,0x2c
c000e690:	8a 00                	mov    al,BYTE PTR [eax]
c000e692:	31 d2                	xor    edx,edx
c000e694:	88 c2                	mov    dl,al
c000e696:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e69a:	8d 48 01             	lea    ecx,[eax+0x1]
c000e69d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e6a1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e6a5:	25 ff 00 00 00       	and    eax,0xff
c000e6aa:	c1 e0 08             	shl    eax,0x8
c000e6ad:	09 d0                	or     eax,edx
c000e6af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6b3:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e6b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e6bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6c7:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6cb:	25 ff 00 00 00       	and    eax,0xff
c000e6d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6d8:	c1 e0 08             	shl    eax,0x8
c000e6db:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e6df:	89 c1                	mov    ecx,eax
c000e6e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e6e5:	c1 e0 18             	shl    eax,0x18
c000e6e8:	89 c3                	mov    ebx,eax
c000e6ea:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c000e6ef:	8d 50 01             	lea    edx,[eax+0x1]
c000e6f2:	89 15 d0 46 02 c0    	mov    DWORD PTR ds:0xc00246d0,edx
c000e6f8:	09 d9                	or     ecx,ebx
c000e6fa:	89 ca                	mov    edx,ecx
c000e6fc:	89 14 85 e0 46 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb920],edx
c000e703:	eb 0f                	jmp    c000e714 <scanMADT()+0x4ac>
c000e705:	8d 76 00             	lea    esi,[esi+0x0]
c000e708:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e70d:	75 05                	jne    c000e714 <scanMADT()+0x4ac>
c000e70f:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e714:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e718:	31 d2                	xor    edx,edx
c000e71a:	88 c2                	mov    dl,al
c000e71c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e720:	01 d0                	add    eax,edx
c000e722:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e726:	e9 31 fc ff ff       	jmp    c000e35c <scanMADT()+0xf4>
c000e72b:	90                   	nop
c000e72c:	90                   	nop
c000e72d:	eb 05                	jmp    c000e734 <scanMADT()+0x4cc>
c000e72f:	90                   	nop
c000e730:	90                   	nop
c000e731:	8d 76 00             	lea    esi,[esi+0x0]
c000e734:	83 c4 38             	add    esp,0x38
c000e737:	5b                   	pop    ebx
c000e738:	c3                   	ret    
c000e739:	90                   	nop
c000e73a:	66 90                	xchg   ax,ax

c000e73c <ACPI::ACPI()>:
c000e73c:	83 ec 0c             	sub    esp,0xc
c000e73f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e743:	83 ec 08             	sub    esp,0x8
c000e746:	68 5d e4 01 c0       	push   0xc001e45d
c000e74b:	50                   	push   eax
c000e74c:	e8 7b d4 ff ff       	call   c000bbcc <Device::Device(char const*)>
c000e751:	83 c4 10             	add    esp,0x10
c000e754:	ba 94 e5 01 c0       	mov    edx,0xc001e594
c000e759:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75d:	89 10                	mov    DWORD PTR [eax],edx
c000e75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e763:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e786:	e8 dd fa ff ff       	call   c000e268 <scanMADT()>
c000e78b:	90                   	nop
c000e78c:	83 c4 0c             	add    esp,0xc
c000e78f:	c3                   	ret    

c000e790 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e790:	83 ec 2c             	sub    esp,0x2c
c000e793:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e797:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e79b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e79f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e7a3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e7a8:	88 d0                	mov    al,dl
c000e7aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e7ae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e7b3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e7bb:	90                   	nop
c000e7bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7c0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7c6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e7ca:	0f 8d 9c 00 00 00    	jge    c000e86c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e7d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7d8:	83 c2 2a             	add    edx,0x2a
c000e7db:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e7df:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e7e4:	75 7a                	jne    c000e860 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e7e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7ee:	83 c2 2a             	add    edx,0x2a
c000e7f1:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e7f5:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e7f9:	75 65                	jne    c000e860 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e7fb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e800:	74 3a                	je     c000e83c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e802:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e806:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e80a:	83 c2 2a             	add    edx,0x2a
c000e80d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e811:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e815:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e818:	39 c2                	cmp    edx,eax
c000e81a:	74 10                	je     c000e82c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e81c:	83 ec 0c             	sub    esp,0xc
c000e81f:	68 d8 e3 01 c0       	push   0xc001e3d8
c000e824:	e8 4e 1a 00 00       	call   c0010277 <KePanic(char const*)>
c000e829:	83 c4 10             	add    esp,0x10
c000e82c:	83 ec 0c             	sub    esp,0xc
c000e82f:	68 62 e4 01 c0       	push   0xc001e462
c000e834:	e8 3e 1a 00 00       	call   c0010277 <KePanic(char const*)>
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e840:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e844:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e848:	83 c2 2a             	add    edx,0x2a
c000e84b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e84f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e851:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e854:	89 01                	mov    DWORD PTR [ecx],eax
c000e856:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e859:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e85e:	66 90                	xchg   ax,ax
c000e860:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e864:	e9 53 ff ff ff       	jmp    c000e7bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e869:	8d 76 00             	lea    esi,[esi+0x0]
c000e86c:	90                   	nop
c000e86d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e871:	83 c4 2c             	add    esp,0x2c
c000e874:	c2 04 00             	ret    0x4
c000e877:	90                   	nop

c000e878 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e878:	83 ec 1c             	sub    esp,0x1c
c000e87b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e87f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e883:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e887:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e88c:	88 c8                	mov    al,cl
c000e88e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e892:	88 d0                	mov    al,dl
c000e894:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e898:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e89c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e8a9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e8ad:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e8b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8b5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e8bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e8bf:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e8c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e8c6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e8cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8cf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8d5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e8d9:	8d 48 01             	lea    ecx,[eax+0x1]
c000e8dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8e0:	83 c2 2a             	add    edx,0x2a
c000e8e3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e8e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8eb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e8f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8f5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e8f8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e8fc:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e900:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e904:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e90a:	8d 50 01             	lea    edx,[eax+0x1]
c000e90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e911:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e917:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e91b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e921:	3d 00 02 00 00       	cmp    eax,0x200
c000e926:	75 10                	jne    c000e938 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e928:	83 ec 0c             	sub    esp,0xc
c000e92b:	68 71 e4 01 c0       	push   0xc001e471
c000e930:	e8 42 19 00 00       	call   c0010277 <KePanic(char const*)>
c000e935:	83 c4 10             	add    esp,0x10
c000e938:	90                   	nop
c000e939:	83 c4 1c             	add    esp,0x1c
c000e93c:	c3                   	ret    
c000e93d:	90                   	nop
c000e93e:	66 90                	xchg   ax,ax

c000e940 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e940:	b8 00 00 00 00       	mov    eax,0x0
c000e945:	c3                   	ret    
c000e946:	66 90                	xchg   ax,ax

c000e948 <ACPI::detectPCI()>:
c000e948:	53                   	push   ebx
c000e949:	83 ec 28             	sub    esp,0x28
c000e94c:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e951:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e956:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000e95b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e961:	83 e0 04             	and    eax,0x4
c000e964:	84 c0                	test   al,al
c000e966:	74 2c                	je     c000e994 <ACPI::detectPCI()+0x4c>
c000e968:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000e96d:	83 ec 08             	sub    esp,0x8
c000e970:	68 8e e4 01 c0       	push   0xc001e48e
c000e975:	50                   	push   eax
c000e976:	e8 75 f8 ff ff       	call   c000e1f0 <findDataTable(unsigned char*, char*)>
c000e97b:	83 c4 10             	add    esp,0x10
c000e97e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e982:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e987:	74 0b                	je     c000e994 <ACPI::detectPCI()+0x4c>
c000e989:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e98e:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e993:	90                   	nop
c000e994:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e99c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9a0:	8a 00                	mov    al,BYTE PTR [eax]
c000e9a2:	3c 01                	cmp    al,0x1
c000e9a4:	75 0e                	jne    c000e9b4 <ACPI::detectPCI()+0x6c>
c000e9a6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9ab:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e9b0:	eb 2a                	jmp    c000e9dc <ACPI::detectPCI()+0x94>
c000e9b2:	66 90                	xchg   ax,ax
c000e9b4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9b8:	8a 00                	mov    al,BYTE PTR [eax]
c000e9ba:	3c 02                	cmp    al,0x2
c000e9bc:	75 1e                	jne    c000e9dc <ACPI::detectPCI()+0x94>
c000e9be:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9c3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e9c8:	74 12                	je     c000e9dc <ACPI::detectPCI()+0x94>
c000e9ca:	83 ec 0c             	sub    esp,0xc
c000e9cd:	68 08 e4 01 c0       	push   0xc001e408
c000e9d2:	e8 a0 18 00 00       	call   c0010277 <KePanic(char const*)>
c000e9d7:	83 c4 10             	add    esp,0x10
c000e9da:	66 90                	xchg   ax,ax
c000e9dc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e9e0:	83 f0 01             	xor    eax,0x1
c000e9e3:	84 c0                	test   al,al
c000e9e5:	74 41                	je     c000ea28 <ACPI::detectPCI()+0xe0>
c000e9e7:	e8 44 17 ff ff       	call   c0000130 <manualPCIProbe>
c000e9ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e9f0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e9f5:	75 0d                	jne    c000ea04 <ACPI::detectPCI()+0xbc>
c000e9f7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9fc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ea01:	eb 25                	jmp    c000ea28 <ACPI::detectPCI()+0xe0>
c000ea03:	90                   	nop
c000ea04:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ea09:	75 1d                	jne    c000ea28 <ACPI::detectPCI()+0xe0>
c000ea0b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ea10:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea15:	74 11                	je     c000ea28 <ACPI::detectPCI()+0xe0>
c000ea17:	83 ec 0c             	sub    esp,0xc
c000ea1a:	68 08 e4 01 c0       	push   0xc001e408
c000ea1f:	e8 53 18 00 00       	call   c0010277 <KePanic(char const*)>
c000ea24:	83 c4 10             	add    esp,0x10
c000ea27:	90                   	nop
c000ea28:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000ea2d:	0f 84 85 00 00 00    	je     c000eab8 <ACPI::detectPCI()+0x170>
c000ea33:	83 ec 0c             	sub    esp,0xc
c000ea36:	68 93 e4 01 c0       	push   0xc001e493
c000ea3b:	e8 bf 11 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c000ea40:	83 c4 10             	add    esp,0x10
c000ea43:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ea4b:	83 ec 0c             	sub    esp,0xc
c000ea4e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ea52:	e8 62 8d ff ff       	call   c00077b9 <malloc>
c000ea57:	83 c4 10             	add    esp,0x10
c000ea5a:	89 c3                	mov    ebx,eax
c000ea5c:	83 ec 0c             	sub    esp,0xc
c000ea5f:	53                   	push   ebx
c000ea60:	e8 ad 9a 00 00       	call   c0018512 <PCI::PCI()>
c000ea65:	83 c4 10             	add    esp,0x10
c000ea68:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ea6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea70:	83 ec 08             	sub    esp,0x8
c000ea73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea77:	50                   	push   eax
c000ea78:	e8 b7 cf ff ff       	call   c000ba34 <Device::addChild(Device*)>
c000ea7d:	83 c4 10             	add    esp,0x10
c000ea80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea84:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea86:	83 c0 08             	add    eax,0x8
c000ea89:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea8b:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ea90:	74 0a                	je     c000ea9c <ACPI::detectPCI()+0x154>
c000ea92:	ba 01 00 00 00       	mov    edx,0x1
c000ea97:	eb 0b                	jmp    c000eaa4 <ACPI::detectPCI()+0x15c>
c000ea99:	8d 76 00             	lea    esi,[esi+0x0]
c000ea9c:	ba 02 00 00 00       	mov    edx,0x2
c000eaa1:	8d 76 00             	lea    esi,[esi+0x0]
c000eaa4:	6a 00                	push   0x0
c000eaa6:	6a 00                	push   0x0
c000eaa8:	52                   	push   edx
c000eaa9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eaad:	ff d0                	call   eax
c000eaaf:	83 c4 10             	add    esp,0x10
c000eab2:	e9 91 00 00 00       	jmp    c000eb48 <ACPI::detectPCI()+0x200>
c000eab7:	90                   	nop
c000eab8:	83 ec 0c             	sub    esp,0xc
c000eabb:	68 ab e4 01 c0       	push   0xc001e4ab
c000eac0:	e8 3a 11 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c000eac5:	83 c4 10             	add    esp,0x10
c000eac8:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000eacf:	83 ec 0c             	sub    esp,0xc
c000ead2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ead6:	e8 de 8c ff ff       	call   c00077b9 <malloc>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	89 c3                	mov    ebx,eax
c000eae0:	83 ec 0c             	sub    esp,0xc
c000eae3:	53                   	push   ebx
c000eae4:	e8 55 a5 00 00       	call   c001903e <IDE::IDE()>
c000eae9:	83 c4 10             	add    esp,0x10
c000eaec:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000eaf0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eaf4:	83 ec 08             	sub    esp,0x8
c000eaf7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000eafb:	50                   	push   eax
c000eafc:	e8 33 cf ff ff       	call   c000ba34 <Device::addChild(Device*)>
c000eb01:	83 c4 10             	add    esp,0x10
c000eb04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb08:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000eb12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb16:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000eb1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb23:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000eb2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eb30:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb32:	83 c0 08             	add    eax,0x8
c000eb35:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb37:	6a 00                	push   0x0
c000eb39:	6a 00                	push   0x0
c000eb3b:	6a 00                	push   0x0
c000eb3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb41:	ff d0                	call   eax
c000eb43:	83 c4 10             	add    esp,0x10
c000eb46:	66 90                	xchg   ax,ax
c000eb48:	90                   	nop
c000eb49:	83 c4 28             	add    esp,0x28
c000eb4c:	5b                   	pop    ebx
c000eb4d:	c3                   	ret    
c000eb4e:	66 90                	xchg   ax,ax

c000eb50 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000eb50:	83 ec 1c             	sub    esp,0x1c
c000eb53:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000eb57:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000eb5a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb5e:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eb64:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb68:	25 ff 00 00 00       	and    eax,0xff
c000eb6d:	83 ec 08             	sub    esp,0x8
c000eb70:	50                   	push   eax
c000eb71:	52                   	push   edx
c000eb72:	e8 2f 83 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000eb77:	83 c4 10             	add    esp,0x10
c000eb7a:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000eb7e:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c000eb84:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb88:	25 ff 00 00 00       	and    eax,0xff
c000eb8d:	83 ec 04             	sub    esp,0x4
c000eb90:	6a 01                	push   0x1
c000eb92:	50                   	push   eax
c000eb93:	52                   	push   edx
c000eb94:	e8 23 84 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000eb99:	83 c4 10             	add    esp,0x10
c000eb9c:	90                   	nop
c000eb9d:	83 c4 1c             	add    esp,0x1c
c000eba0:	c3                   	ret    
c000eba1:	90                   	nop
c000eba2:	66 90                	xchg   ax,ax

c000eba4 <ACPI::sleep()>:
c000eba4:	83 ec 0c             	sub    esp,0xc
c000eba7:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000ebac:	85 c0                	test   eax,eax
c000ebae:	74 08                	je     c000ebb8 <ACPI::sleep()+0x14>
c000ebb0:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c000ebb5:	ff d0                	call   eax
c000ebb7:	90                   	nop
c000ebb8:	90                   	nop
c000ebb9:	83 c4 0c             	add    esp,0xc
c000ebbc:	c3                   	ret    
c000ebbd:	90                   	nop
c000ebbe:	66 90                	xchg   ax,ax

c000ebc0 <ACPI::open(int, int, void*)>:
c000ebc0:	57                   	push   edi
c000ebc1:	56                   	push   esi
c000ebc2:	53                   	push   ebx
c000ebc3:	81 ec 70 01 00 00    	sub    esp,0x170
c000ebc9:	83 ec 0c             	sub    esp,0xc
c000ebcc:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ebd3:	e8 70 fd ff ff       	call   c000e948 <ACPI::detectPCI()>
c000ebd8:	83 c4 10             	add    esp,0x10
c000ebdb:	83 ec 0c             	sub    esp,0xc
c000ebde:	68 30 e4 01 c0       	push   0xc001e430
c000ebe3:	e8 17 10 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c000ebe8:	83 c4 10             	add    esp,0x10
c000ebeb:	83 ec 0c             	sub    esp,0xc
c000ebee:	68 c0 e4 01 c0       	push   0xc001e4c0
c000ebf3:	e8 d2 37 00 00       	call   c00123ca <Thr::loadKernelSymbolTable(char const*)>
c000ebf8:	83 c4 10             	add    esp,0x10
c000ebfb:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ec03:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ec0e:	83 ec 0c             	sub    esp,0xc
c000ec11:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ec18:	e8 9c 8b ff ff       	call   c00077b9 <malloc>
c000ec1d:	83 c4 10             	add    esp,0x10
c000ec20:	89 c3                	mov    ebx,eax
c000ec22:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ec27:	83 ec 04             	sub    esp,0x4
c000ec2a:	50                   	push   eax
c000ec2b:	68 de e4 01 c0       	push   0xc001e4de
c000ec30:	53                   	push   ebx
c000ec31:	e8 34 bf ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c000ec36:	83 c4 10             	add    esp,0x10
c000ec39:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000ec40:	83 ec 08             	sub    esp,0x8
c000ec43:	6a 01                	push   0x1
c000ec45:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec4c:	e8 d9 bf ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c000ec51:	83 c4 10             	add    esp,0x10
c000ec54:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ec5b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ec63:	75 17                	jne    c000ec7c <ACPI::open(int, int, void*)+0xbc>
c000ec65:	83 ec 0c             	sub    esp,0xc
c000ec68:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ec6f:	e8 14 c0 ff ff       	call   c000ac88 <File::close()>
c000ec74:	83 c4 10             	add    esp,0x10
c000ec77:	eb 0b                	jmp    c000ec84 <ACPI::open(int, int, void*)+0xc4>
c000ec79:	8d 76 00             	lea    esi,[esi+0x0]
c000ec7c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ec84:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000ec8c:	74 1e                	je     c000ecac <ACPI::open(int, int, void*)+0xec>
c000ec8e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ec95:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec97:	83 c0 08             	add    eax,0x8
c000ec9a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec9c:	83 ec 0c             	sub    esp,0xc
c000ec9f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eca6:	ff d0                	call   eax
c000eca8:	83 c4 10             	add    esp,0x10
c000ecab:	90                   	nop
c000ecac:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ecb3:	83 f0 01             	xor    eax,0x1
c000ecb6:	84 c0                	test   al,al
c000ecb8:	74 42                	je     c000ecfc <ACPI::open(int, int, void*)+0x13c>
c000ecba:	83 ec 0c             	sub    esp,0xc
c000ecbd:	68 fc e4 01 c0       	push   0xc001e4fc
c000ecc2:	e8 38 0f 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c000ecc7:	83 c4 10             	add    esp,0x10
c000ecca:	83 ec 04             	sub    esp,0x4
c000eccd:	6a 0c                	push   0xc
c000eccf:	68 17 e5 01 c0       	push   0xc001e517
c000ecd4:	68 28 e5 01 c0       	push   0xc001e528
c000ecd9:	e8 dc 2c 00 00       	call   c00119ba <Reg::readIntWithDefault(char*, char*, int)>
c000ecde:	83 c4 10             	add    esp,0x10
c000ece1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ece8:	83 ec 0c             	sub    esp,0xc
c000eceb:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ecf2:	e8 98 a7 ff ff       	call   c000948f <Virt::setupPageSwapping(int)>
c000ecf7:	83 c4 10             	add    esp,0x10
c000ecfa:	66 90                	xchg   ax,ax
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	68 57 d5 01 c0       	push   0xc001d557
c000ed04:	e8 f6 0e 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c000ed09:	83 c4 10             	add    esp,0x10
c000ed0c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ed13:	83 ec 08             	sub    esp,0x8
c000ed16:	6a 12                	push   0x12
c000ed18:	50                   	push   eax
c000ed19:	e8 2e d0 ff ff       	call   c000bd4c <getDevicesOfType(DeviceType)>
c000ed1e:	83 c4 0c             	add    esp,0xc
c000ed21:	8d 76 00             	lea    esi,[esi+0x0]
c000ed24:	83 ec 0c             	sub    esp,0xc
c000ed27:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed2e:	50                   	push   eax
c000ed2f:	e8 78 dc 00 00       	call   c001c9ac <LinkedList<Device>::isEmpty()>
c000ed34:	83 c4 10             	add    esp,0x10
c000ed37:	83 f0 01             	xor    eax,0x1
c000ed3a:	84 c0                	test   al,al
c000ed3c:	0f 84 46 01 00 00    	je     c000ee88 <ACPI::open(int, int, void*)+0x2c8>
c000ed42:	83 ec 0c             	sub    esp,0xc
c000ed45:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed4c:	50                   	push   eax
c000ed4d:	e8 76 dc 00 00       	call   c001c9c8 <LinkedList<Device>::getFirstElement()>
c000ed52:	83 c4 10             	add    esp,0x10
c000ed55:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ed5c:	83 ec 0c             	sub    esp,0xc
c000ed5f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed66:	50                   	push   eax
c000ed67:	e8 64 dc 00 00       	call   c001c9d0 <LinkedList<Device>::removeFirst()>
c000ed6c:	83 c4 10             	add    esp,0x10
c000ed6f:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ed76:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ed7d:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ed84:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ed88:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ed8e:	ba 09 00 00 00       	mov    edx,0x9
c000ed93:	fc                   	cld    
c000ed94:	89 c7                	mov    edi,eax
c000ed96:	89 de                	mov    esi,ebx
c000ed98:	89 d1                	mov    ecx,edx
c000ed9a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed9c:	83 ec 08             	sub    esp,0x8
c000ed9f:	8d 44 24 38          	lea    eax,[esp+0x38]
c000eda3:	50                   	push   eax
c000eda4:	83 ec 24             	sub    esp,0x24
c000eda7:	89 e0                	mov    eax,esp
c000eda9:	89 c3                	mov    ebx,eax
c000edab:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000edaf:	ba 09 00 00 00       	mov    edx,0x9
c000edb4:	89 df                	mov    edi,ebx
c000edb6:	89 c6                	mov    esi,eax
c000edb8:	89 d1                	mov    ecx,edx
c000edba:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000edbc:	e8 33 9c 00 00       	call   c00189f4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000edc1:	83 c4 30             	add    esp,0x30
c000edc4:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000edcb:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000edd3:	0f 84 4b ff ff ff    	je     c000ed24 <ACPI::open(int, int, void*)+0x164>
c000edd9:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ede4:	83 ec 0c             	sub    esp,0xc
c000ede7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000edee:	e8 c6 89 ff ff       	call   c00077b9 <malloc>
c000edf3:	83 c4 10             	add    esp,0x10
c000edf6:	89 c3                	mov    ebx,eax
c000edf8:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000edfd:	83 ec 04             	sub    esp,0x4
c000ee00:	50                   	push   eax
c000ee01:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee08:	53                   	push   ebx
c000ee09:	e8 5c bd ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c000ee0e:	83 c4 10             	add    esp,0x10
c000ee11:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ee18:	83 ec 0c             	sub    esp,0xc
c000ee1b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee22:	e8 71 c0 ff ff       	call   c000ae98 <File::exists()>
c000ee27:	83 c4 10             	add    esp,0x10
c000ee2a:	84 c0                	test   al,al
c000ee2c:	74 2a                	je     c000ee58 <ACPI::open(int, int, void*)+0x298>
c000ee2e:	83 ec 08             	sub    esp,0x8
c000ee31:	6a 01                	push   0x1
c000ee33:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee3a:	e8 02 40 00 00       	call   c0012e41 <Thr::loadDLL(char const*, bool)>
c000ee3f:	83 c4 10             	add    esp,0x10
c000ee42:	83 ec 08             	sub    esp,0x8
c000ee45:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ee4c:	50                   	push   eax
c000ee4d:	e8 20 42 00 00       	call   c0013072 <Thr::executeDLL(unsigned long, void*)>
c000ee52:	83 c4 10             	add    esp,0x10
c000ee55:	8d 76 00             	lea    esi,[esi+0x0]
c000ee58:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ee60:	0f 84 be fe ff ff    	je     c000ed24 <ACPI::open(int, int, void*)+0x164>
c000ee66:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ee6d:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee6f:	83 c0 08             	add    eax,0x8
c000ee72:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee74:	83 ec 0c             	sub    esp,0xc
c000ee77:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ee7e:	ff d0                	call   eax
c000ee80:	83 c4 10             	add    esp,0x10
c000ee83:	e9 9c fe ff ff       	jmp    c000ed24 <ACPI::open(int, int, void*)+0x164>
c000ee88:	83 ec 0c             	sub    esp,0xc
c000ee8b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee92:	50                   	push   eax
c000ee93:	e8 10 db 00 00       	call   c001c9a8 <LinkedList<Device>::~LinkedList()>
c000ee98:	83 c4 10             	add    esp,0x10
c000ee9b:	8b 1d b8 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021eb8
c000eea1:	83 ec 08             	sub    esp,0x8
c000eea4:	6a 01                	push   0x1
c000eea6:	68 2f e5 01 c0       	push   0xc001e52f
c000eeab:	e8 91 3f 00 00       	call   c0012e41 <Thr::loadDLL(char const*, bool)>
c000eeb0:	83 c4 10             	add    esp,0x10
c000eeb3:	83 ec 08             	sub    esp,0x8
c000eeb6:	53                   	push   ebx
c000eeb7:	50                   	push   eax
c000eeb8:	e8 b5 41 00 00       	call   c0013072 <Thr::executeDLL(unsigned long, void*)>
c000eebd:	83 c4 10             	add    esp,0x10
c000eec0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000eec5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eecb:	83 e0 04             	and    eax,0x4
c000eece:	84 c0                	test   al,al
c000eed0:	0f 84 16 01 00 00    	je     c000efec <ACPI::open(int, int, void*)+0x42c>
c000eed6:	83 ec 0c             	sub    esp,0xc
c000eed9:	68 4c e5 01 c0       	push   0xc001e54c
c000eede:	e8 1c 0d 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c000eee3:	83 c4 10             	add    esp,0x10
c000eee6:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000eef1:	83 ec 0c             	sub    esp,0xc
c000eef4:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000eefb:	e8 b9 88 ff ff       	call   c00077b9 <malloc>
c000ef00:	83 c4 10             	add    esp,0x10
c000ef03:	89 c3                	mov    ebx,eax
c000ef05:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c000ef0a:	83 ec 04             	sub    esp,0x4
c000ef0d:	50                   	push   eax
c000ef0e:	68 69 e5 01 c0       	push   0xc001e569
c000ef13:	53                   	push   ebx
c000ef14:	e8 51 bc ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c000ef19:	83 c4 10             	add    esp,0x10
c000ef1c:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ef23:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef2b:	74 1b                	je     c000ef48 <ACPI::open(int, int, void*)+0x388>
c000ef2d:	83 ec 0c             	sub    esp,0xc
c000ef30:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ef37:	e8 5c bf ff ff       	call   c000ae98 <File::exists()>
c000ef3c:	83 c4 10             	add    esp,0x10
c000ef3f:	84 c0                	test   al,al
c000ef41:	74 05                	je     c000ef48 <ACPI::open(int, int, void*)+0x388>
c000ef43:	b0 01                	mov    al,0x1
c000ef45:	eb 05                	jmp    c000ef4c <ACPI::open(int, int, void*)+0x38c>
c000ef47:	90                   	nop
c000ef48:	b0 00                	mov    al,0x0
c000ef4a:	66 90                	xchg   ax,ax
c000ef4c:	84 c0                	test   al,al
c000ef4e:	74 28                	je     c000ef78 <ACPI::open(int, int, void*)+0x3b8>
c000ef50:	83 ec 08             	sub    esp,0x8
c000ef53:	6a 01                	push   0x1
c000ef55:	68 69 e5 01 c0       	push   0xc001e569
c000ef5a:	e8 e2 3e 00 00       	call   c0012e41 <Thr::loadDLL(char const*, bool)>
c000ef5f:	83 c4 10             	add    esp,0x10
c000ef62:	83 ec 08             	sub    esp,0x8
c000ef65:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ef6c:	50                   	push   eax
c000ef6d:	e8 00 41 00 00       	call   c0013072 <Thr::executeDLL(unsigned long, void*)>
c000ef72:	83 c4 10             	add    esp,0x10
c000ef75:	8d 76 00             	lea    esi,[esi+0x0]
c000ef78:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef80:	74 2a                	je     c000efac <ACPI::open(int, int, void*)+0x3ec>
c000ef82:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ef8a:	74 20                	je     c000efac <ACPI::open(int, int, void*)+0x3ec>
c000ef8c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ef93:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef95:	83 c0 08             	add    eax,0x8
c000ef98:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef9a:	83 ec 0c             	sub    esp,0xc
c000ef9d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000efa4:	ff d0                	call   eax
c000efa6:	83 c4 10             	add    esp,0x10
c000efa9:	8d 76 00             	lea    esi,[esi+0x0]
c000efac:	a1 c8 46 02 c0       	mov    eax,ds:0xc00246c8
c000efb1:	83 ec 08             	sub    esp,0x8
c000efb4:	68 86 e5 01 c0       	push   0xc001e586
c000efb9:	50                   	push   eax
c000efba:	e8 31 f2 ff ff       	call   c000e1f0 <findDataTable(unsigned char*, char*)>
c000efbf:	83 c4 10             	add    esp,0x10
c000efc2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000efc9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000efd1:	74 19                	je     c000efec <ACPI::open(int, int, void*)+0x42c>
c000efd3:	83 ec 08             	sub    esp,0x8
c000efd6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000efdd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000efe4:	e8 67 fb ff ff       	call   c000eb50 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000efe9:	83 c4 10             	add    esp,0x10
c000efec:	b8 00 00 00 00       	mov    eax,0x0
c000eff1:	81 c4 70 01 00 00    	add    esp,0x170
c000eff7:	5b                   	pop    ebx
c000eff8:	5e                   	pop    esi
c000eff9:	5f                   	pop    edi
c000effa:	c3                   	ret    
c000effb:	90                   	nop

c000effc <CPU::close(int, int, void*)>:
c000effc:	31 c0                	xor    eax,eax
c000effe:	c3                   	ret    
c000efff:	90                   	nop

c000f000 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f000:	60                   	pusha  
c000f001:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f005:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f009:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f00d:	9c                   	pushf  
c000f00e:	fa                   	cli    
c000f00f:	0f 09                	wbinvd 
c000f011:	0f 30                	wrmsr  
c000f013:	9d                   	popf   
c000f014:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f018:	89 02                	mov    DWORD PTR [edx],eax
c000f01a:	61                   	popa   
c000f01b:	c3                   	ret    

c000f01c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f01c:	60                   	pusha  
c000f01d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f021:	9c                   	pushf  
c000f022:	fa                   	cli    
c000f023:	0f 09                	wbinvd 
c000f025:	31 c0                	xor    eax,eax
c000f027:	31 d2                	xor    edx,edx
c000f029:	0f 32                	rdmsr  
c000f02b:	9d                   	popf   
c000f02c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f030:	89 02                	mov    DWORD PTR [edx],eax
c000f032:	61                   	popa   
c000f033:	c3                   	ret    

c000f034 <CPU::AMD_K6_writeback(int, int, int)>:
c000f034:	56                   	push   esi
c000f035:	53                   	push   ebx
c000f036:	83 ec 10             	sub    esp,0x10
c000f039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f03d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f042:	75 5d                	jne    c000f0a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f044:	83 f8 08             	cmp    eax,0x8
c000f047:	75 09                	jne    c000f052 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f049:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f04e:	7e 13                	jle    c000f063 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f050:	eb 30                	jmp    c000f082 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f052:	83 f8 06             	cmp    eax,0x6
c000f055:	7c 4a                	jl     c000f0a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f057:	83 f8 07             	cmp    eax,0x7
c000f05a:	7e 07                	jle    c000f063 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f05c:	83 f8 09             	cmp    eax,0x9
c000f05f:	74 21                	je     c000f082 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f061:	eb 3e                	jmp    c000f0a1 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f063:	89 e6                	mov    esi,esp
c000f065:	8b 1d dc 1e 02 c0    	mov    ebx,DWORD PTR ds:0xc0021edc
c000f06b:	56                   	push   esi
c000f06c:	c1 eb 15             	shr    ebx,0x15
c000f06f:	68 82 00 00 c0       	push   0xc0000082
c000f074:	83 e3 7e             	and    ebx,0x7e
c000f077:	e8 a0 ff ff ff       	call   c000f01c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f07c:	56                   	push   esi
c000f07d:	6a 00                	push   0x0
c000f07f:	53                   	push   ebx
c000f080:	eb 12                	jmp    c000f094 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f082:	89 e3                	mov    ebx,esp
c000f084:	53                   	push   ebx
c000f085:	68 82 00 00 c0       	push   0xc0000082
c000f08a:	e8 8d ff ff ff       	call   c000f01c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f08f:	53                   	push   ebx
c000f090:	6a 00                	push   0x0
c000f092:	6a 00                	push   0x0
c000f094:	68 82 00 00 c0       	push   0xc0000082
c000f099:	e8 62 ff ff ff       	call   c000f000 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f09e:	83 c4 18             	add    esp,0x18
c000f0a1:	83 c4 10             	add    esp,0x10
c000f0a4:	5b                   	pop    ebx
c000f0a5:	5e                   	pop    esi
c000f0a6:	c3                   	ret    
c000f0a7:	90                   	nop

c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f0a8:	55                   	push   ebp
c000f0a9:	57                   	push   edi
c000f0aa:	56                   	push   esi
c000f0ab:	53                   	push   ebx
c000f0ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f0b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f0b8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f0bc:	39 05 f0 f8 01 c0    	cmp    DWORD PTR ds:0xc001f8f0,eax
c000f0c2:	75 23                	jne    c000f0e7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f0c4:	a1 2c 49 02 c0       	mov    eax,ds:0xc002492c
c000f0c9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0cd:	89 06                	mov    DWORD PTR [esi],eax
c000f0cf:	a1 28 49 02 c0       	mov    eax,ds:0xc0024928
c000f0d4:	89 07                	mov    DWORD PTR [edi],eax
c000f0d6:	a1 24 49 02 c0       	mov    eax,ds:0xc0024924
c000f0db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f0de:	a1 20 49 02 c0       	mov    eax,ds:0xc0024920
c000f0e3:	89 02                	mov    DWORD PTR [edx],eax
c000f0e5:	eb 3f                	jmp    c000f126 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f0e7:	31 c9                	xor    ecx,ecx
c000f0e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0ed:	0f a2                	cpuid  
c000f0ef:	89 06                	mov    DWORD PTR [esi],eax
c000f0f1:	89 1f                	mov    DWORD PTR [edi],ebx
c000f0f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0f7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f0fa:	89 10                	mov    DWORD PTR [eax],edx
c000f0fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f100:	a3 f0 f8 01 c0       	mov    ds:0xc001f8f0,eax
c000f105:	8b 06                	mov    eax,DWORD PTR [esi]
c000f107:	a3 2c 49 02 c0       	mov    ds:0xc002492c,eax
c000f10c:	8b 07                	mov    eax,DWORD PTR [edi]
c000f10e:	a3 28 49 02 c0       	mov    ds:0xc0024928,eax
c000f113:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f116:	a3 24 49 02 c0       	mov    ds:0xc0024924,eax
c000f11b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f11f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f121:	a3 20 49 02 c0       	mov    ds:0xc0024920,eax
c000f126:	5b                   	pop    ebx
c000f127:	5e                   	pop    esi
c000f128:	5f                   	pop    edi
c000f129:	5d                   	pop    ebp
c000f12a:	c3                   	ret    
c000f12b:	90                   	nop

c000f12c <CPU::cpuidCheckEDX(unsigned int)>:
c000f12c:	83 ec 10             	sub    esp,0x10
c000f12f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f133:	50                   	push   eax
c000f134:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f138:	50                   	push   eax
c000f139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f13d:	50                   	push   eax
c000f13e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f142:	50                   	push   eax
c000f143:	6a 01                	push   0x1
c000f145:	e8 5e ff ff ff       	call   c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f14a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f14e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f152:	0f 95 c0             	setne  al
c000f155:	83 c4 24             	add    esp,0x24
c000f158:	c3                   	ret    
c000f159:	90                   	nop

c000f15a <CPU::cpuidCheckECX(unsigned int)>:
c000f15a:	83 ec 10             	sub    esp,0x10
c000f15d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f161:	50                   	push   eax
c000f162:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f166:	50                   	push   eax
c000f167:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f16b:	50                   	push   eax
c000f16c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f170:	50                   	push   eax
c000f171:	6a 01                	push   0x1
c000f173:	e8 30 ff ff ff       	call   c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f178:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f17c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f180:	0f 95 c0             	setne  al
c000f183:	83 c4 24             	add    esp,0x24
c000f186:	c3                   	ret    
c000f187:	90                   	nop

c000f188 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f188:	83 ec 10             	sub    esp,0x10
c000f18b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f18f:	50                   	push   eax
c000f190:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f194:	50                   	push   eax
c000f195:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f199:	50                   	push   eax
c000f19a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f19e:	50                   	push   eax
c000f19f:	6a 07                	push   0x7
c000f1a1:	e8 02 ff ff ff       	call   c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1aa:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f1ae:	0f 95 c0             	setne  al
c000f1b1:	83 c4 24             	add    esp,0x24
c000f1b4:	c3                   	ret    
c000f1b5:	90                   	nop

c000f1b6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f1b6:	83 ec 10             	sub    esp,0x10
c000f1b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1bd:	50                   	push   eax
c000f1be:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1c2:	50                   	push   eax
c000f1c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1c7:	50                   	push   eax
c000f1c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f1cc:	50                   	push   eax
c000f1cd:	6a 07                	push   0x7
c000f1cf:	e8 d4 fe ff ff       	call   c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f1d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1d8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f1dc:	0f 95 c0             	setne  al
c000f1df:	83 c4 24             	add    esp,0x24
c000f1e2:	c3                   	ret    
c000f1e3:	90                   	nop

c000f1e4 <CPU::CPU()>:
c000f1e4:	83 ec 0c             	sub    esp,0xc
c000f1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1eb:	83 ec 08             	sub    esp,0x8
c000f1ee:	68 a9 e6 01 c0       	push   0xc001e6a9
c000f1f3:	50                   	push   eax
c000f1f4:	e8 d3 c9 ff ff       	call   c000bbcc <Device::Device(char const*)>
c000f1f9:	83 c4 10             	add    esp,0x10
c000f1fc:	ba 30 e7 01 c0       	mov    edx,0xc001e730
c000f201:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f205:	89 10                	mov    DWORD PTR [eax],edx
c000f207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f20b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f219:	05 78 01 00 00       	add    eax,0x178
c000f21e:	83 ec 0c             	sub    esp,0xc
c000f221:	50                   	push   eax
c000f222:	e8 53 7e ff ff       	call   c000707a <GDT::GDT()>
c000f227:	83 c4 10             	add    esp,0x10
c000f22a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f22e:	05 7c 09 00 00       	add    eax,0x97c
c000f233:	83 ec 0c             	sub    esp,0xc
c000f236:	50                   	push   eax
c000f237:	e8 78 80 ff ff       	call   c00072b4 <IDT::IDT()>
c000f23c:	83 c4 10             	add    esp,0x10
c000f23f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f243:	05 7c 11 00 00       	add    eax,0x117c
c000f248:	83 ec 0c             	sub    esp,0xc
c000f24b:	50                   	push   eax
c000f24c:	e8 77 99 ff ff       	call   c0008bc8 <TSS::TSS()>
c000f251:	83 c4 10             	add    esp,0x10
c000f254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f258:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f263:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f26d:	90                   	nop
c000f26e:	83 c4 0c             	add    esp,0xc
c000f271:	c3                   	ret    

c000f272 <CPU::displayFeatures()>:
c000f272:	c3                   	ret    
c000f273:	90                   	nop

c000f274 <CPU::detectFeatures()>:
c000f274:	55                   	push   ebp
c000f275:	57                   	push   edi
c000f276:	56                   	push   esi
c000f277:	53                   	push   ebx
c000f278:	83 ec 30             	sub    esp,0x30
c000f27b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f27f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f289:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f290:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f296:	6a 0d                	push   0xd
c000f298:	6a 00                	push   0x0
c000f29a:	55                   	push   ebp
c000f29b:	e8 30 12 ff ff       	call   c00004d0 <memset>
c000f2a0:	83 c4 10             	add    esp,0x10
c000f2a3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f2a8:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f2af:	0f 84 d5 05 00 00    	je     c000f88a <CPU::detectFeatures()+0x616>
c000f2b5:	83 ec 0c             	sub    esp,0xc
c000f2b8:	89 ef                	mov    edi,ebp
c000f2ba:	6a 10                	push   0x10
c000f2bc:	e8 6b fe ff ff       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c000f2c1:	83 e0 01             	and    eax,0x1
c000f2c4:	8d 14 00             	lea    edx,[eax+eax*1]
c000f2c7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2cd:	83 e0 fd             	and    eax,0xfffffffd
c000f2d0:	09 d0                	or     eax,edx
c000f2d2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2d8:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f2df:	e8 48 fe ff ff       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c000f2e4:	83 e0 01             	and    eax,0x1
c000f2e7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f2ee:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f2f4:	83 e0 fb             	and    eax,0xfffffffb
c000f2f7:	09 d0                	or     eax,edx
c000f2f9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f2ff:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f306:	e8 21 fe ff ff       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c000f30b:	83 e0 01             	and    eax,0x1
c000f30e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f315:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f31b:	83 e0 f7             	and    eax,0xfffffff7
c000f31e:	09 d0                	or     eax,edx
c000f320:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f326:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f32d:	e8 fa fd ff ff       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c000f332:	83 e0 01             	and    eax,0x1
c000f335:	c1 e0 04             	shl    eax,0x4
c000f338:	88 c2                	mov    dl,al
c000f33a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f340:	83 e0 ef             	and    eax,0xffffffef
c000f343:	09 d0                	or     eax,edx
c000f345:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f34b:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f352:	e8 d5 fd ff ff       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c000f357:	83 e0 01             	and    eax,0x1
c000f35a:	c1 e0 05             	shl    eax,0x5
c000f35d:	88 c2                	mov    dl,al
c000f35f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f365:	83 e0 df             	and    eax,0xffffffdf
c000f368:	09 d0                	or     eax,edx
c000f36a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f370:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f377:	e8 b0 fd ff ff       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c000f37c:	83 e0 01             	and    eax,0x1
c000f37f:	8d 14 00             	lea    edx,[eax+eax*1]
c000f382:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f388:	83 e0 fd             	and    eax,0xfffffffd
c000f38b:	09 d0                	or     eax,edx
c000f38d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f393:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f39a:	e8 8d fd ff ff       	call   c000f12c <CPU::cpuidCheckEDX(unsigned int)>
c000f39f:	83 e0 01             	and    eax,0x1
c000f3a2:	c1 e0 06             	shl    eax,0x6
c000f3a5:	88 c2                	mov    dl,al
c000f3a7:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f3ad:	83 e0 bf             	and    eax,0xffffffbf
c000f3b0:	09 d0                	or     eax,edx
c000f3b2:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f3b8:	58                   	pop    eax
c000f3b9:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3bd:	50                   	push   eax
c000f3be:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3c2:	50                   	push   eax
c000f3c3:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f3c7:	56                   	push   esi
c000f3c8:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f3cc:	50                   	push   eax
c000f3cd:	6a 00                	push   0x0
c000f3cf:	e8 d4 fc ff ff       	call   c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f3d4:	b8 04 00 00 00       	mov    eax,0x4
c000f3d9:	89 c1                	mov    ecx,eax
c000f3db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3dd:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f3e3:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f3e7:	89 c1                	mov    ecx,eax
c000f3e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3eb:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f3f1:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f3f5:	89 c1                	mov    ecx,eax
c000f3f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3f9:	83 c4 18             	add    esp,0x18
c000f3fc:	68 b8 e5 01 c0       	push   0xc001e5b8
c000f401:	55                   	push   ebp
c000f402:	e8 d9 12 ff ff       	call   c00006e0 <strcmp>
c000f407:	83 c4 10             	add    esp,0x10
c000f40a:	85 c0                	test   eax,eax
c000f40c:	75 0f                	jne    c000f41d <CPU::detectFeatures()+0x1a9>
c000f40e:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f418:	e9 22 02 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f41d:	50                   	push   eax
c000f41e:	50                   	push   eax
c000f41f:	68 c5 e5 01 c0       	push   0xc001e5c5
c000f424:	55                   	push   ebp
c000f425:	e8 b6 12 ff ff       	call   c00006e0 <strcmp>
c000f42a:	83 c4 10             	add    esp,0x10
c000f42d:	85 c0                	test   eax,eax
c000f42f:	74 dd                	je     c000f40e <CPU::detectFeatures()+0x19a>
c000f431:	50                   	push   eax
c000f432:	50                   	push   eax
c000f433:	68 d2 e5 01 c0       	push   0xc001e5d2
c000f438:	55                   	push   ebp
c000f439:	e8 a2 12 ff ff       	call   c00006e0 <strcmp>
c000f43e:	83 c4 10             	add    esp,0x10
c000f441:	85 c0                	test   eax,eax
c000f443:	74 2a                	je     c000f46f <CPU::detectFeatures()+0x1fb>
c000f445:	50                   	push   eax
c000f446:	50                   	push   eax
c000f447:	68 df e5 01 c0       	push   0xc001e5df
c000f44c:	55                   	push   ebp
c000f44d:	e8 8e 12 ff ff       	call   c00006e0 <strcmp>
c000f452:	83 c4 10             	add    esp,0x10
c000f455:	85 c0                	test   eax,eax
c000f457:	74 16                	je     c000f46f <CPU::detectFeatures()+0x1fb>
c000f459:	50                   	push   eax
c000f45a:	50                   	push   eax
c000f45b:	68 ec e5 01 c0       	push   0xc001e5ec
c000f460:	55                   	push   ebp
c000f461:	e8 7a 12 ff ff       	call   c00006e0 <strcmp>
c000f466:	83 c4 10             	add    esp,0x10
c000f469:	85 c0                	test   eax,eax
c000f46b:	74 48                	je     c000f4b5 <CPU::detectFeatures()+0x241>
c000f46d:	eb 0f                	jmp    c000f47e <CPU::detectFeatures()+0x20a>
c000f46f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f479:	e9 c1 01 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f47e:	50                   	push   eax
c000f47f:	50                   	push   eax
c000f480:	68 f9 e5 01 c0       	push   0xc001e5f9
c000f485:	55                   	push   ebp
c000f486:	e8 55 12 ff ff       	call   c00006e0 <strcmp>
c000f48b:	83 c4 10             	add    esp,0x10
c000f48e:	85 c0                	test   eax,eax
c000f490:	74 23                	je     c000f4b5 <CPU::detectFeatures()+0x241>
c000f492:	57                   	push   edi
c000f493:	57                   	push   edi
c000f494:	68 06 e6 01 c0       	push   0xc001e606
c000f499:	55                   	push   ebp
c000f49a:	e8 41 12 ff ff       	call   c00006e0 <strcmp>
c000f49f:	83 c4 10             	add    esp,0x10
c000f4a2:	85 c0                	test   eax,eax
c000f4a4:	75 1e                	jne    c000f4c4 <CPU::detectFeatures()+0x250>
c000f4a6:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f4b0:	e9 8a 01 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f4b5:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f4bf:	e9 7b 01 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f4c4:	56                   	push   esi
c000f4c5:	56                   	push   esi
c000f4c6:	68 13 e6 01 c0       	push   0xc001e613
c000f4cb:	55                   	push   ebp
c000f4cc:	e8 0f 12 ff ff       	call   c00006e0 <strcmp>
c000f4d1:	83 c4 10             	add    esp,0x10
c000f4d4:	85 c0                	test   eax,eax
c000f4d6:	75 0f                	jne    c000f4e7 <CPU::detectFeatures()+0x273>
c000f4d8:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f4e2:	e9 58 01 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f4e7:	51                   	push   ecx
c000f4e8:	51                   	push   ecx
c000f4e9:	68 d2 e5 01 c0       	push   0xc001e5d2
c000f4ee:	55                   	push   ebp
c000f4ef:	e8 ec 11 ff ff       	call   c00006e0 <strcmp>
c000f4f4:	83 c4 10             	add    esp,0x10
c000f4f7:	85 c0                	test   eax,eax
c000f4f9:	75 0f                	jne    c000f50a <CPU::detectFeatures()+0x296>
c000f4fb:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f505:	e9 35 01 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f50a:	52                   	push   edx
c000f50b:	52                   	push   edx
c000f50c:	68 20 e6 01 c0       	push   0xc001e620
c000f511:	55                   	push   ebp
c000f512:	e8 c9 11 ff ff       	call   c00006e0 <strcmp>
c000f517:	83 c4 10             	add    esp,0x10
c000f51a:	85 c0                	test   eax,eax
c000f51c:	75 0f                	jne    c000f52d <CPU::detectFeatures()+0x2b9>
c000f51e:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f528:	e9 12 01 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f52d:	50                   	push   eax
c000f52e:	50                   	push   eax
c000f52f:	68 2d e6 01 c0       	push   0xc001e62d
c000f534:	55                   	push   ebp
c000f535:	e8 a6 11 ff ff       	call   c00006e0 <strcmp>
c000f53a:	83 c4 10             	add    esp,0x10
c000f53d:	85 c0                	test   eax,eax
c000f53f:	75 0f                	jne    c000f550 <CPU::detectFeatures()+0x2dc>
c000f541:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f54b:	e9 ef 00 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f550:	50                   	push   eax
c000f551:	50                   	push   eax
c000f552:	68 3a e6 01 c0       	push   0xc001e63a
c000f557:	55                   	push   ebp
c000f558:	e8 83 11 ff ff       	call   c00006e0 <strcmp>
c000f55d:	83 c4 10             	add    esp,0x10
c000f560:	85 c0                	test   eax,eax
c000f562:	75 0f                	jne    c000f573 <CPU::detectFeatures()+0x2ff>
c000f564:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f56e:	e9 cc 00 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f573:	50                   	push   eax
c000f574:	50                   	push   eax
c000f575:	68 47 e6 01 c0       	push   0xc001e647
c000f57a:	55                   	push   ebp
c000f57b:	e8 60 11 ff ff       	call   c00006e0 <strcmp>
c000f580:	83 c4 10             	add    esp,0x10
c000f583:	85 c0                	test   eax,eax
c000f585:	75 0f                	jne    c000f596 <CPU::detectFeatures()+0x322>
c000f587:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f591:	e9 a9 00 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f596:	50                   	push   eax
c000f597:	50                   	push   eax
c000f598:	68 54 e6 01 c0       	push   0xc001e654
c000f59d:	55                   	push   ebp
c000f59e:	e8 3d 11 ff ff       	call   c00006e0 <strcmp>
c000f5a3:	83 c4 10             	add    esp,0x10
c000f5a6:	85 c0                	test   eax,eax
c000f5a8:	75 0f                	jne    c000f5b9 <CPU::detectFeatures()+0x345>
c000f5aa:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f5b4:	e9 86 00 00 00       	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f5b9:	50                   	push   eax
c000f5ba:	50                   	push   eax
c000f5bb:	68 61 e6 01 c0       	push   0xc001e661
c000f5c0:	55                   	push   ebp
c000f5c1:	e8 1a 11 ff ff       	call   c00006e0 <strcmp>
c000f5c6:	83 c4 10             	add    esp,0x10
c000f5c9:	85 c0                	test   eax,eax
c000f5cb:	75 0c                	jne    c000f5d9 <CPU::detectFeatures()+0x365>
c000f5cd:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f5d7:	eb 66                	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f5d9:	50                   	push   eax
c000f5da:	50                   	push   eax
c000f5db:	68 6e e6 01 c0       	push   0xc001e66e
c000f5e0:	55                   	push   ebp
c000f5e1:	e8 fa 10 ff ff       	call   c00006e0 <strcmp>
c000f5e6:	83 c4 10             	add    esp,0x10
c000f5e9:	85 c0                	test   eax,eax
c000f5eb:	75 0c                	jne    c000f5f9 <CPU::detectFeatures()+0x385>
c000f5ed:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f5f7:	eb 46                	jmp    c000f63f <CPU::detectFeatures()+0x3cb>
c000f5f9:	57                   	push   edi
c000f5fa:	57                   	push   edi
c000f5fb:	68 7b e6 01 c0       	push   0xc001e67b
c000f600:	55                   	push   ebp
c000f601:	e8 da 10 ff ff       	call   c00006e0 <strcmp>
c000f606:	83 c4 10             	add    esp,0x10
c000f609:	85 c0                	test   eax,eax
c000f60b:	74 e0                	je     c000f5ed <CPU::detectFeatures()+0x379>
c000f60d:	56                   	push   esi
c000f60e:	56                   	push   esi
c000f60f:	68 88 e6 01 c0       	push   0xc001e688
c000f614:	55                   	push   ebp
c000f615:	e8 c6 10 ff ff       	call   c00006e0 <strcmp>
c000f61a:	83 c4 10             	add    esp,0x10
c000f61d:	85 c0                	test   eax,eax
c000f61f:	74 cc                	je     c000f5ed <CPU::detectFeatures()+0x379>
c000f621:	51                   	push   ecx
c000f622:	51                   	push   ecx
c000f623:	68 95 e6 01 c0       	push   0xc001e695
c000f628:	55                   	push   ebp
c000f629:	e8 b2 10 ff ff       	call   c00006e0 <strcmp>
c000f62e:	83 c4 10             	add    esp,0x10
c000f631:	85 c0                	test   eax,eax
c000f633:	74 b8                	je     c000f5ed <CPU::detectFeatures()+0x379>
c000f635:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f63f:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f644:	0f 86 be 00 00 00    	jbe    c000f708 <CPU::detectFeatures()+0x494>
c000f64a:	83 ec 0c             	sub    esp,0xc
c000f64d:	68 80 00 00 00       	push   0x80
c000f652:	e8 31 fb ff ff       	call   c000f188 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f657:	83 e0 01             	and    eax,0x1
c000f65a:	c1 e0 06             	shl    eax,0x6
c000f65d:	88 c2                	mov    dl,al
c000f65f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f665:	83 e0 bf             	and    eax,0xffffffbf
c000f668:	09 d0                	or     eax,edx
c000f66a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f670:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f677:	e8 0c fb ff ff       	call   c000f188 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f67c:	83 e0 01             	and    eax,0x1
c000f67f:	c1 e0 04             	shl    eax,0x4
c000f682:	88 c2                	mov    dl,al
c000f684:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f68a:	83 e0 ef             	and    eax,0xffffffef
c000f68d:	09 d0                	or     eax,edx
c000f68f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f695:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f69c:	e8 e7 fa ff ff       	call   c000f188 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f6a1:	c1 e0 07             	shl    eax,0x7
c000f6a4:	88 c2                	mov    dl,al
c000f6a6:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f6ac:	83 e0 7f             	and    eax,0x7f
c000f6af:	09 d0                	or     eax,edx
c000f6b1:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f6b7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f6be:	e8 f3 fa ff ff       	call   c000f1b6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f6c3:	83 e0 01             	and    eax,0x1
c000f6c6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f6cd:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f6d3:	83 e0 f7             	and    eax,0xfffffff7
c000f6d6:	09 d0                	or     eax,edx
c000f6d8:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f6de:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f6e5:	e8 cc fa ff ff       	call   c000f1b6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f6ea:	83 c4 10             	add    esp,0x10
c000f6ed:	83 e0 01             	and    eax,0x1
c000f6f0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f6f7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f6fd:	83 e0 fb             	and    eax,0xfffffffb
c000f700:	09 d0                	or     eax,edx
c000f702:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f708:	83 ec 0c             	sub    esp,0xc
c000f70b:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f70f:	50                   	push   eax
c000f710:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f714:	50                   	push   eax
c000f715:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f719:	56                   	push   esi
c000f71a:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f71e:	50                   	push   eax
c000f71f:	6a 01                	push   0x1
c000f721:	e8 82 f9 ff ff       	call   c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f726:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f72a:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f730:	88 ca                	mov    dl,cl
c000f732:	83 e0 f0             	and    eax,0xfffffff0
c000f735:	83 e2 0f             	and    edx,0xf
c000f738:	09 d0                	or     eax,edx
c000f73a:	88 ca                	mov    dl,cl
c000f73c:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f742:	c0 ea 04             	shr    dl,0x4
c000f745:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f749:	0f b6 c2             	movzx  eax,dl
c000f74c:	83 c4 20             	add    esp,0x20
c000f74f:	c1 e0 06             	shl    eax,0x6
c000f752:	89 c7                	mov    edi,eax
c000f754:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f75a:	66 25 3f c0          	and    ax,0xc03f
c000f75e:	09 f8                	or     eax,edi
c000f760:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f767:	89 c8                	mov    eax,ecx
c000f769:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f770:	c1 e8 08             	shr    eax,0x8
c000f773:	83 e5 3f             	and    ebp,0x3f
c000f776:	83 e0 0f             	and    eax,0xf
c000f779:	89 c7                	mov    edi,eax
c000f77b:	c1 e7 06             	shl    edi,0x6
c000f77e:	09 ef                	or     edi,ebp
c000f780:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f787:	89 fa                	mov    edx,edi
c000f789:	83 e5 c0             	and    ebp,0xffffffc0
c000f78c:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f792:	88 c2                	mov    dl,al
c000f794:	c0 ea 02             	shr    dl,0x2
c000f797:	89 d7                	mov    edi,edx
c000f799:	09 ef                	or     edi,ebp
c000f79b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f7a1:	89 fa                	mov    edx,edi
c000f7a3:	83 e5 cf             	and    ebp,0xffffffcf
c000f7a6:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f7ac:	89 cf                	mov    edi,ecx
c000f7ae:	c1 ef 0c             	shr    edi,0xc
c000f7b1:	83 e7 03             	and    edi,0x3
c000f7b4:	c1 e7 04             	shl    edi,0x4
c000f7b7:	09 ef                	or     edi,ebp
c000f7b9:	3c 06                	cmp    al,0x6
c000f7bb:	89 fa                	mov    edx,edi
c000f7bd:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f7c3:	74 04                	je     c000f7c9 <CPU::detectFeatures()+0x555>
c000f7c5:	3c 0f                	cmp    al,0xf
c000f7c7:	75 5c                	jne    c000f825 <CPU::detectFeatures()+0x5b1>
c000f7c9:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f7cd:	89 cf                	mov    edi,ecx
c000f7cf:	c1 ef 10             	shr    edi,0x10
c000f7d2:	c1 e7 04             	shl    edi,0x4
c000f7d5:	09 fa                	or     edx,edi
c000f7d7:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f7dd:	0f b6 d2             	movzx  edx,dl
c000f7e0:	66 81 e7 3f c0       	and    di,0xc03f
c000f7e5:	c1 e2 06             	shl    edx,0x6
c000f7e8:	09 fa                	or     edx,edi
c000f7ea:	3c 0f                	cmp    al,0xf
c000f7ec:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f7f3:	75 30                	jne    c000f825 <CPU::detectFeatures()+0x5b1>
c000f7f5:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f7fb:	c1 e9 14             	shr    ecx,0x14
c000f7fe:	83 e0 3f             	and    eax,0x3f
c000f801:	83 c1 0f             	add    ecx,0xf
c000f804:	88 ca                	mov    dl,cl
c000f806:	c0 e9 02             	shr    cl,0x2
c000f809:	c1 e2 06             	shl    edx,0x6
c000f80c:	09 d0                	or     eax,edx
c000f80e:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f814:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f81a:	83 e0 c0             	and    eax,0xffffffc0
c000f81d:	09 c1                	or     ecx,eax
c000f81f:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f825:	83 ec 0c             	sub    esp,0xc
c000f828:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f82f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f833:	50                   	push   eax
c000f834:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f838:	55                   	push   ebp
c000f839:	56                   	push   esi
c000f83a:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f83e:	57                   	push   edi
c000f83f:	68 00 00 00 80       	push   0x80000000
c000f844:	e8 5f f8 ff ff       	call   c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f849:	83 c4 20             	add    esp,0x20
c000f84c:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f854:	76 22                	jbe    c000f878 <CPU::detectFeatures()+0x604>
c000f856:	83 ec 0c             	sub    esp,0xc
c000f859:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f85d:	50                   	push   eax
c000f85e:	55                   	push   ebp
c000f85f:	56                   	push   esi
c000f860:	57                   	push   edi
c000f861:	68 01 00 00 80       	push   0x80000001
c000f866:	e8 3d f8 ff ff       	call   c000f0a8 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f86b:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f875:	83 c4 20             	add    esp,0x20
c000f878:	52                   	push   edx
c000f879:	52                   	push   edx
c000f87a:	68 a1 e6 01 c0       	push   0xc001e6a1
c000f87f:	53                   	push   ebx
c000f880:	e8 39 c3 ff ff       	call   c000bbbe <Device::setName(char const*)>
c000f885:	83 c4 10             	add    esp,0x10
c000f888:	eb 67                	jmp    c000f8f1 <CPU::detectFeatures()+0x67d>
c000f88a:	50                   	push   eax
c000f88b:	50                   	push   eax
c000f88c:	68 06 e6 01 c0       	push   0xc001e606
c000f891:	55                   	push   ebp
c000f892:	e8 69 0d ff ff       	call   c0000600 <strcpy>
c000f897:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f8a1:	e8 1d 09 ff ff       	call   c00001c3 <is486>
c000f8a6:	83 c4 10             	add    esp,0x10
c000f8a9:	85 c0                	test   eax,eax
c000f8ab:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f8b1:	74 1d                	je     c000f8d0 <CPU::detectFeatures()+0x65c>
c000f8b3:	83 c8 07             	or     eax,0x7
c000f8b6:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f8bc:	0f 20 c0             	mov    eax,cr0
c000f8bf:	83 e0 14             	and    eax,0x14
c000f8c2:	83 f8 04             	cmp    eax,0x4
c000f8c5:	75 0e                	jne    c000f8d5 <CPU::detectFeatures()+0x661>
c000f8c7:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f8ce:	eb 21                	jmp    c000f8f1 <CPU::detectFeatures()+0x67d>
c000f8d0:	83 e0 f8             	and    eax,0xfffffff8
c000f8d3:	eb e1                	jmp    c000f8b6 <CPU::detectFeatures()+0x642>
c000f8d5:	e8 c4 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f8da:	83 e0 01             	and    eax,0x1
c000f8dd:	8d 14 00             	lea    edx,[eax+eax*1]
c000f8e0:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f8e6:	83 e0 fd             	and    eax,0xfffffffd
c000f8e9:	09 d0                	or     eax,edx
c000f8eb:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f8f1:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f8f8:	74 0e                	je     c000f908 <CPU::detectFeatures()+0x694>
c000f8fa:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f8ff:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f906:	eb 20                	jmp    c000f928 <CPU::detectFeatures()+0x6b4>
c000f908:	e8 91 08 ff ff       	call   c000019e <hasLegacyFPU>
c000f90d:	83 e0 01             	and    eax,0x1
c000f910:	8d 14 00             	lea    edx,[eax+eax*1]
c000f913:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f919:	83 e0 fd             	and    eax,0xfffffffd
c000f91c:	09 d0                	or     eax,edx
c000f91e:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f924:	a8 02                	test   al,0x2
c000f926:	75 d2                	jne    c000f8fa <CPU::detectFeatures()+0x686>
c000f928:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f92f:	83 c4 2c             	add    esp,0x2c
c000f932:	5b                   	pop    ebx
c000f933:	5e                   	pop    esi
c000f934:	5f                   	pop    edi
c000f935:	5d                   	pop    ebp
c000f936:	c3                   	ret    
c000f937:	90                   	nop

c000f938 <CPU::setupSMEP()>:
c000f938:	0f 20 e0             	mov    eax,cr4
c000f93b:	0d 00 00 10 00       	or     eax,0x100000
c000f940:	0f 22 e0             	mov    cr4,eax
c000f943:	c3                   	ret    

c000f944 <CPU::setupUMIP()>:
c000f944:	0f 20 e0             	mov    eax,cr4
c000f947:	80 cc 08             	or     ah,0x8
c000f94a:	0f 22 e0             	mov    cr4,eax
c000f94d:	c3                   	ret    

c000f94e <CPU::setupTSC()>:
c000f94e:	0f 20 e0             	mov    eax,cr4
c000f951:	83 c8 04             	or     eax,0x4
c000f954:	0f 22 e0             	mov    cr4,eax
c000f957:	c3                   	ret    

c000f958 <CPU::setupLargePages()>:
c000f958:	0f 20 e0             	mov    eax,cr4
c000f95b:	83 c8 10             	or     eax,0x10
c000f95e:	0f 22 e0             	mov    cr4,eax
c000f961:	c3                   	ret    

c000f962 <CPU::setupPAT()>:
c000f962:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c000f967:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f96e:	74 2c                	je     c000f99c <CPU::setupPAT()+0x3a>
c000f970:	53                   	push   ebx
c000f971:	83 ec 10             	sub    esp,0x10
c000f974:	68 77 02 00 00       	push   0x277
c000f979:	50                   	push   eax
c000f97a:	e8 73 74 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f97f:	83 e2 f8             	and    edx,0xfffffff8
c000f982:	83 ca 01             	or     edx,0x1
c000f985:	52                   	push   edx
c000f986:	50                   	push   eax
c000f987:	68 77 02 00 00       	push   0x277
c000f98c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c000f992:	e8 87 74 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f997:	83 c4 28             	add    esp,0x28
c000f99a:	5b                   	pop    ebx
c000f99b:	c3                   	ret    
c000f99c:	c3                   	ret    
c000f99d:	90                   	nop

c000f99e <CPU::setupMTRR()>:
c000f99e:	c3                   	ret    
c000f99f:	90                   	nop

c000f9a0 <CPU::setupGlobalPages()>:
c000f9a0:	0f 20 e0             	mov    eax,cr4
c000f9a3:	0c 80                	or     al,0x80
c000f9a5:	0f 22 e0             	mov    cr4,eax
c000f9a8:	c3                   	ret    
c000f9a9:	90                   	nop

c000f9aa <CPU::allowUsermodeDataAccess()>:
c000f9aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9ae:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f9b5:	74 03                	je     c000f9ba <CPU::allowUsermodeDataAccess()+0x10>
c000f9b7:	0f 01 cb             	stac   
c000f9ba:	c3                   	ret    
c000f9bb:	90                   	nop

c000f9bc <CPU::prohibitUsermodeDataAccess()>:
c000f9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9c0:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f9c7:	74 03                	je     c000f9cc <CPU::prohibitUsermodeDataAccess()+0x10>
c000f9c9:	0f 01 ca             	clac   
c000f9cc:	c3                   	ret    
c000f9cd:	90                   	nop

c000f9ce <CPU::setupSMAP()>:
c000f9ce:	0f 20 e0             	mov    eax,cr4
c000f9d1:	0d 00 00 20 00       	or     eax,0x200000
c000f9d6:	0f 22 e0             	mov    cr4,eax
c000f9d9:	eb e1                	jmp    c000f9bc <CPU::prohibitUsermodeDataAccess()>
c000f9db:	90                   	nop

c000f9dc <CPU::setupFeatures()>:
c000f9dc:	53                   	push   ebx
c000f9dd:	83 ec 08             	sub    esp,0x8
c000f9e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f9e4:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f9eb:	74 18                	je     c000fa05 <CPU::setupFeatures()+0x29>
c000f9ed:	83 ec 0c             	sub    esp,0xc
c000f9f0:	68 ad e6 01 c0       	push   0xc001e6ad
c000f9f5:	e8 fa ab ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000f9fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f9fd:	e8 42 ff ff ff       	call   c000f944 <CPU::setupUMIP()>
c000fa02:	83 c4 10             	add    esp,0x10
c000fa05:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fa0c:	74 18                	je     c000fa26 <CPU::setupFeatures()+0x4a>
c000fa0e:	83 ec 0c             	sub    esp,0xc
c000fa11:	68 b7 e6 01 c0       	push   0xc001e6b7
c000fa16:	e8 d9 ab ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000fa1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa1e:	e8 2b ff ff ff       	call   c000f94e <CPU::setupTSC()>
c000fa23:	83 c4 10             	add    esp,0x10
c000fa26:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fa2d:	74 18                	je     c000fa47 <CPU::setupFeatures()+0x6b>
c000fa2f:	83 ec 0c             	sub    esp,0xc
c000fa32:	68 c0 e6 01 c0       	push   0xc001e6c0
c000fa37:	e8 b8 ab ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000fa3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa3f:	e8 14 ff ff ff       	call   c000f958 <CPU::setupLargePages()>
c000fa44:	83 c4 10             	add    esp,0x10
c000fa47:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fa4e:	74 18                	je     c000fa68 <CPU::setupFeatures()+0x8c>
c000fa50:	83 ec 0c             	sub    esp,0xc
c000fa53:	68 c9 e6 01 c0       	push   0xc001e6c9
c000fa58:	e8 97 ab ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000fa5d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa60:	e8 3b ff ff ff       	call   c000f9a0 <CPU::setupGlobalPages()>
c000fa65:	83 c4 10             	add    esp,0x10
c000fa68:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fa6f:	74 18                	je     c000fa89 <CPU::setupFeatures()+0xad>
c000fa71:	83 ec 0c             	sub    esp,0xc
c000fa74:	68 db e6 01 c0       	push   0xc001e6db
c000fa79:	e8 76 ab ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c000fa7e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa81:	e8 dc fe ff ff       	call   c000f962 <CPU::setupPAT()>
c000fa86:	83 c4 10             	add    esp,0x10
c000fa89:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fa90:	74 11                	je     c000faa3 <CPU::setupFeatures()+0xc7>
c000fa92:	c7 44 24 10 e4 e6 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e6e4
c000fa9a:	83 c4 08             	add    esp,0x8
c000fa9d:	5b                   	pop    ebx
c000fa9e:	e9 51 ab ff ff       	jmp    c000a5f4 <Dbg::kprintf(char const*, ...)>
c000faa3:	83 c4 08             	add    esp,0x8
c000faa6:	5b                   	pop    ebx
c000faa7:	c3                   	ret    

c000faa8 <CPU::open(int, int, void*)>:
c000faa8:	57                   	push   edi
c000faa9:	56                   	push   esi
c000faaa:	53                   	push   ebx
c000faab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faaf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fab3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fab9:	83 ec 0c             	sub    esp,0xc
c000fabc:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fac2:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fac8:	50                   	push   eax
c000fac9:	e8 0e 76 ff ff       	call   c00070dc <GDT::setup()>
c000face:	83 c4 0c             	add    esp,0xc
c000fad1:	6a 00                	push   0x0
c000fad3:	68 ef be ad de       	push   0xdeadbeef
c000fad8:	57                   	push   edi
c000fad9:	e8 2e 91 ff ff       	call   c0008c0c <TSS::setup(unsigned long, unsigned long)>
c000fade:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fae1:	e8 06 91 ff ff       	call   c0008bec <TSS::flush()>
c000fae6:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000faec:	89 04 24             	mov    DWORD PTR [esp],eax
c000faef:	e8 36 78 ff ff       	call   c000732a <IDT::setup()>
c000faf4:	b8 00 04 00 00       	mov    eax,0x400
c000faf9:	0f 23 f8             	mov    db7,eax
c000fafc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fb06:	e8 8a 7f ff ff       	call   c0007a95 <Phys::allocatePage()>
c000fb0b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fb11:	89 30                	mov    DWORD PTR [eax],esi
c000fb13:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fb19:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fb1c:	58                   	pop    eax
c000fb1d:	5a                   	pop    edx
c000fb1e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fb24:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fb28:	e8 a7 a0 ff ff       	call   c0009bd4 <VAS::setCPUSpecific(unsigned long)>
c000fb2d:	c7 04 24 ee e6 01 c0 	mov    DWORD PTR [esp],0xc001e6ee
c000fb34:	e8 c6 00 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c000fb39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb3c:	e8 33 f7 ff ff       	call   c000f274 <CPU::detectFeatures()>
c000fb41:	c7 04 24 11 e7 01 c0 	mov    DWORD PTR [esp],0xc001e711
c000fb48:	e8 b2 00 00 00       	call   c000fbff <KeSetBootMessage(char const*)>
c000fb4d:	e8 26 5c 00 00       	call   c0015778 <HalInitialise()>
c000fb52:	a1 d0 1e 02 c0       	mov    eax,ds:0xc0021ed0
c000fb57:	83 e0 10             	and    eax,0x10
c000fb5a:	83 f8 01             	cmp    eax,0x1
c000fb5d:	19 c0                	sbb    eax,eax
c000fb5f:	83 e0 46             	and    eax,0x46
c000fb62:	83 c0 1e             	add    eax,0x1e
c000fb65:	89 04 24             	mov    DWORD PTR [esp],eax
c000fb68:	e8 60 d7 ff ff       	call   c000d2cd <setupTimer(int)>
c000fb6d:	83 c4 10             	add    esp,0x10
c000fb70:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fb76:	f6 05 d0 1e 02 c0 20 	test   BYTE PTR ds:0xc0021ed0,0x20
c000fb7d:	74 0c                	je     c000fb8b <CPU::open(int, int, void*)+0xe3>
c000fb7f:	83 ec 0c             	sub    esp,0xc
c000fb82:	53                   	push   ebx
c000fb83:	e8 54 fe ff ff       	call   c000f9dc <CPU::setupFeatures()>
c000fb88:	83 c4 10             	add    esp,0x10
c000fb8b:	5b                   	pop    ebx
c000fb8c:	31 c0                	xor    eax,eax
c000fb8e:	5e                   	pop    esi
c000fb8f:	5f                   	pop    edi
c000fb90:	c3                   	ret    

c000fb91 <KeDisplaySplashScreen()>:
c000fb91:	55                   	push   ebp
c000fb92:	bd 05 00 00 00       	mov    ebp,0x5
c000fb97:	57                   	push   edi
c000fb98:	bf 00 f9 01 c0       	mov    edi,0xc001f900
c000fb9d:	56                   	push   esi
c000fb9e:	be 0a 00 00 00       	mov    esi,0xa
c000fba3:	53                   	push   ebx
c000fba4:	31 db                	xor    ebx,ebx
c000fba6:	83 ec 0c             	sub    esp,0xc
c000fba9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fbac:	84 c0                	test   al,al
c000fbae:	74 47                	je     c000fbf7 <KeDisplaySplashScreen()+0x66>
c000fbb0:	80 bb 36 f9 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe06ca],0xdb
c000fbb7:	75 13                	jne    c000fbcc <KeDisplaySplashScreen()+0x3b>
c000fbb9:	0f b6 93 35 f9 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe06cb]
c000fbc0:	83 e2 fe             	and    edx,0xfffffffe
c000fbc3:	81 fa ba 00 00 00    	cmp    edx,0xba
c000fbc9:	75 01                	jne    c000fbcc <KeDisplaySplashScreen()+0x3b>
c000fbcb:	46                   	inc    esi
c000fbcc:	3c 0d                	cmp    al,0xd
c000fbce:	74 24                	je     c000fbf4 <KeDisplaySplashScreen()+0x63>
c000fbd0:	3c 0a                	cmp    al,0xa
c000fbd2:	75 0a                	jne    c000fbde <KeDisplaySplashScreen()+0x4d>
c000fbd4:	45                   	inc    ebp
c000fbd5:	be 0a 00 00 00       	mov    esi,0xa
c000fbda:	31 db                	xor    ebx,ebx
c000fbdc:	eb 16                	jmp    c000fbf4 <KeDisplaySplashScreen()+0x63>
c000fbde:	83 ec 0c             	sub    esp,0xc
c000fbe1:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fbe4:	55                   	push   ebp
c000fbe5:	43                   	inc    ebx
c000fbe6:	52                   	push   edx
c000fbe7:	6a 00                	push   0x0
c000fbe9:	6a 0e                	push   0xe
c000fbeb:	50                   	push   eax
c000fbec:	e8 eb 67 00 00       	call   c00163dc <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fbf1:	83 c4 20             	add    esp,0x20
c000fbf4:	47                   	inc    edi
c000fbf5:	eb b2                	jmp    c000fba9 <KeDisplaySplashScreen()+0x18>
c000fbf7:	83 c4 0c             	add    esp,0xc
c000fbfa:	5b                   	pop    ebx
c000fbfb:	5e                   	pop    esi
c000fbfc:	5f                   	pop    edi
c000fbfd:	5d                   	pop    ebp
c000fbfe:	c3                   	ret    

c000fbff <KeSetBootMessage(char const*)>:
c000fbff:	57                   	push   edi
c000fc00:	56                   	push   esi
c000fc01:	53                   	push   ebx
c000fc02:	81 ec a4 00 00 00    	sub    esp,0xa4
c000fc08:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000fc0f:	68 9e 00 00 00       	push   0x9e
c000fc14:	6a 00                	push   0x0
c000fc16:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fc1a:	56                   	push   esi
c000fc1b:	e8 b0 08 ff ff       	call   c00004d0 <memset>
c000fc20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc23:	e8 18 09 ff ff       	call   c0000540 <strlen>
c000fc28:	ba 50 00 00 00       	mov    edx,0x50
c000fc2d:	83 c4 10             	add    esp,0x10
c000fc30:	29 c2                	sub    edx,eax
c000fc32:	31 c9                	xor    ecx,ecx
c000fc34:	83 e2 fe             	and    edx,0xfffffffe
c000fc37:	01 f2                	add    edx,esi
c000fc39:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fc3e:	84 c0                	test   al,al
c000fc40:	74 0a                	je     c000fc4c <KeSetBootMessage(char const*)+0x4d>
c000fc42:	80 cc 0f             	or     ah,0xf
c000fc45:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fc49:	41                   	inc    ecx
c000fc4a:	eb ed                	jmp    c000fc39 <KeSetBootMessage(char const*)+0x3a>
c000fc4c:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fc51:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fc56:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc58:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fc5e:	5b                   	pop    ebx
c000fc5f:	5e                   	pop    esi
c000fc60:	5f                   	pop    edi
c000fc61:	c3                   	ret    

c000fc62 <EnvVarContainer::getEnv(char const*)>:
c000fc62:	57                   	push   edi
c000fc63:	56                   	push   esi
c000fc64:	53                   	push   ebx
c000fc65:	31 db                	xor    ebx,ebx
c000fc67:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fc6b:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fc6d:	7e 2b                	jle    c000fc9a <EnvVarContainer::getEnv(char const*)+0x38>
c000fc6f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fc76:	50                   	push   eax
c000fc77:	50                   	push   eax
c000fc78:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc7b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fc7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fc82:	e8 59 0a ff ff       	call   c00006e0 <strcmp>
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	85 c0                	test   eax,eax
c000fc8c:	75 09                	jne    c000fc97 <EnvVarContainer::getEnv(char const*)+0x35>
c000fc8e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fc91:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fc95:	eb 05                	jmp    c000fc9c <EnvVarContainer::getEnv(char const*)+0x3a>
c000fc97:	43                   	inc    ebx
c000fc98:	eb d1                	jmp    c000fc6b <EnvVarContainer::getEnv(char const*)+0x9>
c000fc9a:	31 c0                	xor    eax,eax
c000fc9c:	5b                   	pop    ebx
c000fc9d:	5e                   	pop    esi
c000fc9e:	5f                   	pop    edi
c000fc9f:	c3                   	ret    

c000fca0 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fca0:	55                   	push   ebp
c000fca1:	57                   	push   edi
c000fca2:	56                   	push   esi
c000fca3:	53                   	push   ebx
c000fca4:	83 ec 28             	sub    esp,0x28
c000fca7:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fcab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fcaf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fcb3:	56                   	push   esi
c000fcb4:	e8 87 08 ff ff       	call   c0000540 <strlen>
c000fcb9:	40                   	inc    eax
c000fcba:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcbd:	e8 f7 7a ff ff       	call   c00077b9 <malloc>
c000fcc2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fcc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcc9:	e8 72 08 ff ff       	call   c0000540 <strlen>
c000fcce:	40                   	inc    eax
c000fccf:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd2:	e8 e2 7a ff ff       	call   c00077b9 <malloc>
c000fcd7:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcda:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fcde:	e8 5d 08 ff ff       	call   c0000540 <strlen>
c000fce3:	83 c4 0c             	add    esp,0xc
c000fce6:	40                   	inc    eax
c000fce7:	50                   	push   eax
c000fce8:	6a 00                	push   0x0
c000fcea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fcee:	e8 dd 07 ff ff       	call   c00004d0 <memset>
c000fcf3:	89 34 24             	mov    DWORD PTR [esp],esi
c000fcf6:	e8 45 08 ff ff       	call   c0000540 <strlen>
c000fcfb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fcff:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd02:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd07:	89 de                	mov    esi,ebx
c000fd09:	e8 32 08 ff ff       	call   c0000540 <strlen>
c000fd0e:	83 c4 0c             	add    esp,0xc
c000fd11:	40                   	inc    eax
c000fd12:	50                   	push   eax
c000fd13:	6a 00                	push   0x0
c000fd15:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd19:	e8 b2 07 ff ff       	call   c00004d0 <memset>
c000fd1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd21:	e8 1a 08 ff ff       	call   c0000540 <strlen>
c000fd26:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fd2a:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd2f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fd32:	40                   	inc    eax
c000fd33:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fd36:	c1 e0 03             	shl    eax,0x3
c000fd39:	5a                   	pop    edx
c000fd3a:	59                   	pop    ecx
c000fd3b:	50                   	push   eax
c000fd3c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fd3f:	e8 61 7a ff ff       	call   c00077a5 <realloc>
c000fd44:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fd48:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fd4b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fd4e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fd52:	b9 08 00 00 00       	mov    ecx,0x8
c000fd57:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd59:	83 c4 2c             	add    esp,0x2c
c000fd5c:	5b                   	pop    ebx
c000fd5d:	5e                   	pop    esi
c000fd5e:	5f                   	pop    edi
c000fd5f:	5d                   	pop    ebp
c000fd60:	c3                   	ret    
c000fd61:	90                   	nop

c000fd62 <EnvVarContainer::deleteEnv(char const*)>:
c000fd62:	c3                   	ret    
c000fd63:	90                   	nop

c000fd64 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fd64:	55                   	push   ebp
c000fd65:	57                   	push   edi
c000fd66:	56                   	push   esi
c000fd67:	53                   	push   ebx
c000fd68:	81 ec 38 01 00 00    	sub    esp,0x138
c000fd6e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fd75:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fd7c:	68 14 01 00 00       	push   0x114
c000fd81:	e8 33 7a ff ff       	call   c00077b9 <malloc>
c000fd86:	83 c4 0c             	add    esp,0xc
c000fd89:	89 c3                	mov    ebx,eax
c000fd8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fd8e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fd95:	50                   	push   eax
c000fd96:	e8 cf ad ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c000fd9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd9e:	e8 f5 b0 ff ff       	call   c000ae98 <File::exists()>
c000fda3:	83 c4 10             	add    esp,0x10
c000fda6:	84 c0                	test   al,al
c000fda8:	75 31                	jne    c000fddb <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fdaa:	50                   	push   eax
c000fdab:	50                   	push   eax
c000fdac:	6a 12                	push   0x12
c000fdae:	53                   	push   ebx
c000fdaf:	e8 76 ae ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c000fdb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fdb6:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fdb9:	89 34 24             	mov    DWORD PTR [esp],esi
c000fdbc:	e8 7f 07 ff ff       	call   c0000540 <strlen>
c000fdc1:	5a                   	pop    edx
c000fdc2:	31 d2                	xor    edx,edx
c000fdc4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fdc8:	51                   	push   ecx
c000fdc9:	56                   	push   esi
c000fdca:	52                   	push   edx
c000fdcb:	50                   	push   eax
c000fdcc:	53                   	push   ebx
c000fdcd:	ff d7                	call   edi
c000fdcf:	83 c4 14             	add    esp,0x14
c000fdd2:	53                   	push   ebx
c000fdd3:	e8 b0 ae ff ff       	call   c000ac88 <File::close()>
c000fdd8:	83 c4 10             	add    esp,0x10
c000fddb:	56                   	push   esi
c000fddc:	31 f6                	xor    esi,esi
c000fdde:	68 00 01 00 00       	push   0x100
c000fde3:	6a 00                	push   0x0
c000fde5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fde9:	50                   	push   eax
c000fdea:	e8 e1 06 ff ff       	call   c00004d0 <memset>
c000fdef:	5f                   	pop    edi
c000fdf0:	58                   	pop    eax
c000fdf1:	6a 01                	push   0x1
c000fdf3:	53                   	push   ebx
c000fdf4:	e8 31 ae ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c000fdf9:	83 c4 10             	add    esp,0x10
c000fdfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe04:	83 ec 0c             	sub    esp,0xc
c000fe07:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe09:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe0d:	51                   	push   ecx
c000fe0e:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fe12:	52                   	push   edx
c000fe13:	6a 00                	push   0x0
c000fe15:	6a 01                	push   0x1
c000fe17:	53                   	push   ebx
c000fe18:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe1b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fe1f:	83 c4 20             	add    esp,0x20
c000fe22:	3c 0d                	cmp    al,0xd
c000fe24:	0f 84 09 01 00 00    	je     c000ff33 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe2a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fe2f:	0f 84 ef 00 00 00    	je     c000ff24 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe35:	3c 0a                	cmp    al,0xa
c000fe37:	74 13                	je     c000fe4c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe39:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe3e:	74 0c                	je     c000fe4c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fe40:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fe46:	0f 8e d8 00 00 00    	jle    c000ff24 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fe4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe50:	83 ec 0c             	sub    esp,0xc
c000fe53:	8d 78 01             	lea    edi,[eax+0x1]
c000fe56:	57                   	push   edi
c000fe57:	e8 5d 79 ff ff       	call   c00077b9 <malloc>
c000fe5c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fe60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fe64:	8d 56 04             	lea    edx,[esi+0x4]
c000fe67:	89 14 24             	mov    DWORD PTR [esp],edx
c000fe6a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe6e:	e8 46 79 ff ff       	call   c00077b9 <malloc>
c000fe73:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fe77:	83 c4 0c             	add    esp,0xc
c000fe7a:	57                   	push   edi
c000fe7b:	6a 00                	push   0x0
c000fe7d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe81:	e8 4a 06 ff ff       	call   c00004d0 <memset>
c000fe86:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fe8a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fe8e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fe92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe94:	83 c4 0c             	add    esp,0xc
c000fe97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe9b:	52                   	push   edx
c000fe9c:	6a 00                	push   0x0
c000fe9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fea2:	e8 29 06 ff ff       	call   c00004d0 <memset>
c000fea7:	8d 74 24 30          	lea    esi,[esp+0x30]
c000feab:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000feaf:	89 34 24             	mov    DWORD PTR [esp],esi
c000feb2:	e8 89 06 ff ff       	call   c0000540 <strlen>
c000feb7:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000febb:	89 c1                	mov    ecx,eax
c000febd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000febf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fec2:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fec5:	40                   	inc    eax
c000fec6:	83 c4 10             	add    esp,0x10
c000fec9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fecc:	85 d2                	test   edx,edx
c000fece:	75 0c                	jne    c000fedc <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fed0:	83 ec 0c             	sub    esp,0xc
c000fed3:	6a 08                	push   0x8
c000fed5:	e8 df 78 ff ff       	call   c00077b9 <malloc>
c000feda:	eb 0c                	jmp    c000fee8 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fedc:	c1 e0 03             	shl    eax,0x3
c000fedf:	51                   	push   ecx
c000fee0:	51                   	push   ecx
c000fee1:	50                   	push   eax
c000fee2:	52                   	push   edx
c000fee3:	e8 bd 78 ff ff       	call   c00077a5 <realloc>
c000fee8:	83 c4 10             	add    esp,0x10
c000feeb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000feee:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fef1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fef4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fef8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fefc:	b9 08 00 00 00       	mov    ecx,0x8
c000ff01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff03:	31 f6                	xor    esi,esi
c000ff05:	50                   	push   eax
c000ff06:	68 00 01 00 00       	push   0x100
c000ff0b:	6a 00                	push   0x0
c000ff0d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ff11:	50                   	push   eax
c000ff12:	e8 b9 05 ff ff       	call   c00004d0 <memset>
c000ff17:	83 c4 10             	add    esp,0x10
c000ff1a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ff22:	eb 0f                	jmp    c000ff33 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff24:	3c 3d                	cmp    al,0x3d
c000ff26:	74 07                	je     c000ff2f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ff28:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ff2c:	46                   	inc    esi
c000ff2d:	eb 04                	jmp    c000ff33 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ff2f:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ff33:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ff38:	0f 85 c6 fe ff ff    	jne    c000fe04 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ff3e:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ff44:	5b                   	pop    ebx
c000ff45:	5e                   	pop    esi
c000ff46:	5f                   	pop    edi
c000ff47:	5d                   	pop    ebp
c000ff48:	c3                   	ret    
c000ff49:	90                   	nop

c000ff4a <EnvVarContainer::__loadSystem()>:
c000ff4a:	83 ec 10             	sub    esp,0x10
c000ff4d:	68 60 fa 01 c0       	push   0xc001fa60
c000ff52:	68 54 e7 01 c0       	push   0xc001e754
c000ff57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff5b:	e8 04 fe ff ff       	call   c000fd64 <EnvVarContainer::loadFrom(char const*, char const*)>
c000ff60:	83 c4 1c             	add    esp,0x1c
c000ff63:	c3                   	ret    

c000ff64 <EnvVarContainer::__loadUser()>:
c000ff64:	c3                   	ret    
c000ff65:	90                   	nop

c000ff66 <EnvVarContainer::EnvVarContainer(Process*)>:
c000ff66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ff70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff78:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ff7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff7f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ff86:	90                   	nop
c000ff87:	c3                   	ret    

c000ff88 <EnvVarContainer::~EnvVarContainer()>:
c000ff88:	83 ec 0c             	sub    esp,0xc
c000ff8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ff92:	85 c0                	test   eax,eax
c000ff94:	74 1d                	je     c000ffb3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ff96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff9a:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff9c:	85 c0                	test   eax,eax
c000ff9e:	74 13                	je     c000ffb3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ffa7:	83 ec 0c             	sub    esp,0xc
c000ffaa:	50                   	push   eax
c000ffab:	e8 19 78 ff ff       	call   c00077c9 <free>
c000ffb0:	83 c4 10             	add    esp,0x10
c000ffb3:	90                   	nop
c000ffb4:	83 c4 0c             	add    esp,0xc
c000ffb7:	c3                   	ret    

c000ffb8 <Krnl::getEnv(Process*, char const*)>:
c000ffb8:	53                   	push   ebx
c000ffb9:	83 ec 08             	sub    esp,0x8
c000ffbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ffc4:	39 05 90 51 02 c0    	cmp    DWORD PTR ds:0xc0025190,eax
c000ffca:	74 04                	je     c000ffd0 <Krnl::getEnv(Process*, char const*)+0x18>
c000ffcc:	85 c0                	test   eax,eax
c000ffce:	75 0b                	jne    c000ffdb <Krnl::getEnv(Process*, char const*)+0x23>
c000ffd0:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c000ffd5:	85 c0                	test   eax,eax
c000ffd7:	75 19                	jne    c000fff2 <Krnl::getEnv(Process*, char const*)+0x3a>
c000ffd9:	eb 27                	jmp    c0010002 <Krnl::getEnv(Process*, char const*)+0x4a>
c000ffdb:	52                   	push   edx
c000ffdc:	52                   	push   edx
c000ffdd:	53                   	push   ebx
c000ffde:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000ffe4:	e8 79 fc ff ff       	call   c000fc62 <EnvVarContainer::getEnv(char const*)>
c000ffe9:	83 c4 10             	add    esp,0x10
c000ffec:	85 c0                	test   eax,eax
c000ffee:	75 28                	jne    c0010018 <Krnl::getEnv(Process*, char const*)+0x60>
c000fff0:	eb de                	jmp    c000ffd0 <Krnl::getEnv(Process*, char const*)+0x18>
c000fff2:	52                   	push   edx
c000fff3:	52                   	push   edx
c000fff4:	53                   	push   ebx
c000fff5:	50                   	push   eax
c000fff6:	e8 67 fc ff ff       	call   c000fc62 <EnvVarContainer::getEnv(char const*)>
c000fffb:	83 c4 10             	add    esp,0x10
c000fffe:	85 c0                	test   eax,eax
c0010000:	75 16                	jne    c0010018 <Krnl::getEnv(Process*, char const*)+0x60>
c0010002:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010006:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c001000b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001000f:	83 c4 08             	add    esp,0x8
c0010012:	5b                   	pop    ebx
c0010013:	e9 4a fc ff ff       	jmp    c000fc62 <EnvVarContainer::getEnv(char const*)>
c0010018:	83 c4 08             	add    esp,0x8
c001001b:	5b                   	pop    ebx
c001001c:	c3                   	ret    

c001001d <Krnl::setEnvSystem(char const*, char const*)>:
c001001d:	83 ec 10             	sub    esp,0x10
c0010020:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010024:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010028:	ff 35 34 49 02 c0    	push   DWORD PTR ds:0xc0024934
c001002e:	e8 6d fc ff ff       	call   c000fca0 <EnvVarContainer::setEnv(char const*, char const*)>
c0010033:	83 c4 1c             	add    esp,0x1c
c0010036:	c3                   	ret    

c0010037 <Krnl::setEnvUser(char const*, char const*)>:
c0010037:	a1 30 49 02 c0       	mov    eax,ds:0xc0024930
c001003c:	85 c0                	test   eax,eax
c001003e:	74 15                	je     c0010055 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0010040:	83 ec 10             	sub    esp,0x10
c0010043:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010047:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001004b:	50                   	push   eax
c001004c:	e8 4f fc ff ff       	call   c000fca0 <EnvVarContainer::setEnv(char const*, char const*)>
c0010051:	83 c4 1c             	add    esp,0x1c
c0010054:	c3                   	ret    
c0010055:	c3                   	ret    

c0010056 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0010056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001005a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010060:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010064:	e9 37 fc ff ff       	jmp    c000fca0 <EnvVarContainer::setEnv(char const*, char const*)>

c0010069 <Krnl::deleteEnvSystem(char const*)>:
c0010069:	c3                   	ret    

c001006a <Krnl::deleteEnvUser(char const*)>:
c001006a:	c3                   	ret    

c001006b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001006b:	c3                   	ret    

c001006c <Krnl::newProcessEnv(Process*)>:
c001006c:	83 ec 28             	sub    esp,0x28
c001006f:	6a 0c                	push   0xc
c0010071:	e8 43 77 ff ff       	call   c00077b9 <malloc>
c0010076:	5a                   	pop    edx
c0010077:	59                   	pop    ecx
c0010078:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001007c:	50                   	push   eax
c001007d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010081:	e8 e0 fe ff ff       	call   c000ff66 <EnvVarContainer::EnvVarContainer(Process*)>
c0010086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001008a:	83 c4 2c             	add    esp,0x2c
c001008d:	c3                   	ret    

c001008e <Krnl::copyProcessEnv(Process*, Process*)>:
c001008e:	57                   	push   edi
c001008f:	56                   	push   esi
c0010090:	53                   	push   ebx
c0010091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010095:	83 ec 0c             	sub    esp,0xc
c0010098:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001009e:	6a 0c                	push   0xc
c00100a0:	e8 14 77 ff ff       	call   c00077b9 <malloc>
c00100a5:	89 c3                	mov    ebx,eax
c00100a7:	58                   	pop    eax
c00100a8:	5a                   	pop    edx
c00100a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100ad:	53                   	push   ebx
c00100ae:	e8 b3 fe ff ff       	call   c000ff66 <EnvVarContainer::EnvVarContainer(Process*)>
c00100b3:	8b 07                	mov    eax,DWORD PTR [edi]
c00100b5:	89 03                	mov    DWORD PTR [ebx],eax
c00100b7:	c1 e0 03             	shl    eax,0x3
c00100ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00100bd:	e8 f7 76 ff ff       	call   c00077b9 <malloc>
c00100c2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00100c5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00100c7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00100ca:	c1 e1 03             	shl    ecx,0x3
c00100cd:	89 c7                	mov    edi,eax
c00100cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00100d1:	83 c4 10             	add    esp,0x10
c00100d4:	89 d8                	mov    eax,ebx
c00100d6:	5b                   	pop    ebx
c00100d7:	5e                   	pop    esi
c00100d8:	5f                   	pop    edi
c00100d9:	c3                   	ret    

c00100da <Krnl::loadSystemEnv()>:
c00100da:	53                   	push   ebx
c00100db:	83 ec 14             	sub    esp,0x14
c00100de:	6a 0c                	push   0xc
c00100e0:	e8 d4 76 ff ff       	call   c00077b9 <malloc>
c00100e5:	89 c3                	mov    ebx,eax
c00100e7:	58                   	pop    eax
c00100e8:	5a                   	pop    edx
c00100e9:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00100ef:	53                   	push   ebx
c00100f0:	e8 71 fe ff ff       	call   c000ff66 <EnvVarContainer::EnvVarContainer(Process*)>
c00100f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00100f8:	89 1d 34 49 02 c0    	mov    DWORD PTR ds:0xc0024934,ebx
c00100fe:	e8 47 fe ff ff       	call   c000ff4a <EnvVarContainer::__loadSystem()>
c0010103:	83 c4 18             	add    esp,0x18
c0010106:	5b                   	pop    ebx
c0010107:	c3                   	ret    

c0010108 <Krnl::loadUserEnv()>:
c0010108:	53                   	push   ebx
c0010109:	83 ec 14             	sub    esp,0x14
c001010c:	6a 0c                	push   0xc
c001010e:	e8 a6 76 ff ff       	call   c00077b9 <malloc>
c0010113:	89 c3                	mov    ebx,eax
c0010115:	58                   	pop    eax
c0010116:	5a                   	pop    edx
c0010117:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c001011d:	53                   	push   ebx
c001011e:	e8 43 fe ff ff       	call   c000ff66 <EnvVarContainer::EnvVarContainer(Process*)>
c0010123:	89 1d 30 49 02 c0    	mov    DWORD PTR ds:0xc0024930,ebx
c0010129:	83 c4 18             	add    esp,0x18
c001012c:	5b                   	pop    ebx
c001012d:	c3                   	ret    

c001012e <Krnl::flushEnv()>:
c001012e:	c3                   	ret    

c001012f <Krnl::getProcessTotalEnvCount(Process*)>:
c001012f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010133:	8b 15 30 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024930
c0010139:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001013f:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0010144:	8b 00                	mov    eax,DWORD PTR [eax]
c0010146:	03 01                	add    eax,DWORD PTR [ecx]
c0010148:	85 d2                	test   edx,edx
c001014a:	74 02                	je     c001014e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001014c:	03 02                	add    eax,DWORD PTR [edx]
c001014e:	c3                   	ret    

c001014f <Krnl::getProcessEnvPair(Process*, int)>:
c001014f:	57                   	push   edi
c0010150:	56                   	push   esi
c0010151:	8b 35 30 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024930
c0010157:	53                   	push   ebx
c0010158:	85 f6                	test   esi,esi
c001015a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001015e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010162:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010168:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001016c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001016e:	75 16                	jne    c0010186 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010170:	39 c2                	cmp    edx,eax
c0010172:	7c 16                	jl     c001018a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010174:	8b 0d 34 49 02 c0    	mov    ecx,DWORD PTR ds:0xc0024934
c001017a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001017c:	01 c6                	add    esi,eax
c001017e:	39 d6                	cmp    esi,edx
c0010180:	7e 3c                	jle    c00101be <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010182:	29 c2                	sub    edx,eax
c0010184:	eb 04                	jmp    c001018a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010186:	39 c2                	cmp    edx,eax
c0010188:	7d 05                	jge    c001018f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001018a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001018d:	eb 20                	jmp    c00101af <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001018f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010191:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010194:	39 d1                	cmp    ecx,edx
c0010196:	7e 04                	jle    c001019c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0010198:	29 c2                	sub    edx,eax
c001019a:	eb 10                	jmp    c00101ac <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001019c:	8b 35 34 49 02 c0    	mov    esi,DWORD PTR ds:0xc0024934
c00101a2:	03 0e                	add    ecx,DWORD PTR [esi]
c00101a4:	39 d1                	cmp    ecx,edx
c00101a6:	7e 16                	jle    c00101be <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c00101a8:	29 c2                	sub    edx,eax
c00101aa:	29 fa                	sub    edx,edi
c00101ac:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00101af:	8d 14 d0             	lea    edx,[eax+edx*8]
c00101b2:	8b 02                	mov    eax,DWORD PTR [edx]
c00101b4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00101b7:	89 03                	mov    DWORD PTR [ebx],eax
c00101b9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00101bc:	eb 1d                	jmp    c00101db <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00101be:	83 ec 0c             	sub    esp,0xc
c00101c1:	68 76 e7 01 c0       	push   0xc001e776
c00101c6:	e8 ac 00 00 00       	call   c0010277 <KePanic(char const*)>
c00101cb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00101d1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00101d8:	83 c4 10             	add    esp,0x10
c00101db:	89 d8                	mov    eax,ebx
c00101dd:	5b                   	pop    ebx
c00101de:	5e                   	pop    esi
c00101df:	5f                   	pop    edi
c00101e0:	c2 04 00             	ret    0x4

c00101e3 <CPU::current()>:
c00101e3:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00101e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00101ee:	c3                   	ret    

c00101ef <operator new(unsigned long)>:
c00101ef:	e9 c5 75 ff ff       	jmp    c00077b9 <malloc>

c00101f4 <operator delete(void*)>:
c00101f4:	e9 e0 75 ff ff       	jmp    c00077d9 <rfree>

c00101f9 <disableIRQs()>:
c00101f9:	fa                   	cli    
c00101fa:	c3                   	ret    

c00101fb <enableIRQs()>:
c00101fb:	fb                   	sti    
c00101fc:	c3                   	ret    

c00101fd <lockScheduler()>:
c00101fd:	fa                   	cli    
c00101fe:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0010204:	c3                   	ret    

c0010205 <unlockScheduler()>:
c0010205:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001020a:	48                   	dec    eax
c001020b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010210:	75 01                	jne    c0010213 <unlockScheduler()+0xe>
c0010212:	fb                   	sti    
c0010213:	c3                   	ret    

c0010214 <lockStuff()>:
c0010214:	fa                   	cli    
c0010215:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001021b:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0010221:	c3                   	ret    

c0010222 <unlockStuff()>:
c0010222:	83 ec 0c             	sub    esp,0xc
c0010225:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001022a:	48                   	dec    eax
c001022b:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0010230:	75 18                	jne    c001024a <unlockStuff()+0x28>
c0010232:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0010239:	74 0f                	je     c001024a <unlockStuff()+0x28>
c001023b:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0010245:	e8 22 36 00 00       	call   c001386c <schedule()>
c001024a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001024f:	48                   	dec    eax
c0010250:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010255:	75 01                	jne    c0010258 <unlockStuff()+0x36>
c0010257:	fb                   	sti    
c0010258:	83 c4 0c             	add    esp,0xc
c001025b:	c3                   	ret    

c001025c <Virt::getAKernelVAS()>:
c001025c:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0010261:	c3                   	ret    

c0010262 <__not_memcpy>:
c0010262:	57                   	push   edi
c0010263:	56                   	push   esi
c0010264:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010268:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001026c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010270:	89 c7                	mov    edi,eax
c0010272:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010274:	5e                   	pop    esi
c0010275:	5f                   	pop    edi
c0010276:	c3                   	ret    

c0010277 <KePanic(char const*)>:
c0010277:	c6 05 38 49 02 c0 01 	mov    BYTE PTR ds:0xc0024938,0x1
c001027e:	e9 e1 53 00 00       	jmp    c0015664 <HalPanic(char const*)>

c0010283 <Krnl::powerThread(void*)>:
c0010283:	83 ec 0c             	sub    esp,0xc
c0010286:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001028b:	48                   	dec    eax
c001028c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0010291:	75 01                	jne    c0010294 <Krnl::powerThread(void*)+0x11>
c0010293:	fb                   	sti    
c0010294:	83 ec 0c             	sub    esp,0xc
c0010297:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c001029e:	6a 0a                	push   0xa
c00102a0:	e8 d7 38 00 00       	call   c0013b7c <sleep(unsigned int)>
c00102a5:	83 05 84 49 02 c0 0a 	add    DWORD PTR ds:0xc0024984,0xa
c00102ac:	83 c4 10             	add    esp,0x10
c00102af:	eb e3                	jmp    c0010294 <Krnl::powerThread(void*)+0x11>

c00102b1 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00102b1:	57                   	push   edi
c00102b2:	b9 09 00 00 00       	mov    ecx,0x9
c00102b7:	56                   	push   esi
c00102b8:	bf 60 49 02 c0       	mov    edi,0xc0024960
c00102bd:	fc                   	cld    
c00102be:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00102c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00102c4:	5e                   	pop    esi
c00102c5:	5f                   	pop    edi
c00102c6:	c3                   	ret    

c00102c7 <Krnl::userIOReceived()>:
c00102c7:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c00102d1:	c3                   	ret    

c00102d2 <Krnl::handlePowerButton()>:
c00102d2:	83 ec 0c             	sub    esp,0xc
c00102d5:	a1 60 49 02 c0       	mov    eax,ds:0xc0024960
c00102da:	83 f8 02             	cmp    eax,0x2
c00102dd:	75 10                	jne    c00102ef <Krnl::handlePowerButton()+0x1d>
c00102df:	83 ec 0c             	sub    esp,0xc
c00102e2:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00102e8:	e8 69 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c00102ed:	eb 11                	jmp    c0010300 <Krnl::handlePowerButton()+0x2e>
c00102ef:	48                   	dec    eax
c00102f0:	75 11                	jne    c0010303 <Krnl::handlePowerButton()+0x31>
c00102f2:	83 ec 0c             	sub    esp,0xc
c00102f5:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00102fb:	e8 86 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010300:	83 c4 10             	add    esp,0x10
c0010303:	83 c4 0c             	add    esp,0xc
c0010306:	c3                   	ret    

c0010307 <Krnl::handleSleepButton()>:
c0010307:	83 ec 0c             	sub    esp,0xc
c001030a:	a1 64 49 02 c0       	mov    eax,ds:0xc0024964
c001030f:	83 f8 02             	cmp    eax,0x2
c0010312:	75 10                	jne    c0010324 <Krnl::handleSleepButton()+0x1d>
c0010314:	83 ec 0c             	sub    esp,0xc
c0010317:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001031d:	e8 34 6b ff ff       	call   c0006e56 <Computer::shutdown()>
c0010322:	eb 11                	jmp    c0010335 <Krnl::handleSleepButton()+0x2e>
c0010324:	48                   	dec    eax
c0010325:	75 11                	jne    c0010338 <Krnl::handleSleepButton()+0x31>
c0010327:	83 ec 0c             	sub    esp,0xc
c001032a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0010330:	e8 51 6b ff ff       	call   c0006e86 <Computer::sleep()>
c0010335:	83 c4 10             	add    esp,0x10
c0010338:	83 c4 0c             	add    esp,0xc
c001033b:	c3                   	ret    

c001033c <Krnl::setupPowerManager()>:
c001033c:	83 ec 0c             	sub    esp,0xc
c001033f:	c7 05 84 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024984,0x0
c0010349:	68 f0 00 00 00       	push   0xf0
c001034e:	c6 05 40 49 02 c0 00 	mov    BYTE PTR ds:0xc0024940,0x0
c0010355:	6a 00                	push   0x0
c0010357:	68 83 02 01 c0       	push   0xc0010283
c001035c:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0010362:	e8 e5 32 00 00       	call   c001364c <Process::createThread(void (*)(void*), void*, int)>
c0010367:	c7 05 60 49 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0024960,0x2
c0010371:	c7 05 64 49 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024964,0x1
c001037b:	c7 05 68 49 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0024968,0x3
c0010385:	c7 05 6c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002496c,0x0
c001038f:	c7 05 78 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024978,0x0
c0010399:	c7 05 70 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024970,0x0
c00103a3:	c7 05 7c 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002497c,0x0
c00103ad:	c7 05 74 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024974,0x3c
c00103b7:	c7 05 80 49 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0024980,0x3c
c00103c1:	83 c4 1c             	add    esp,0x1c
c00103c4:	c3                   	ret    
c00103c5:	66 90                	xchg   ax,ax
c00103c7:	90                   	nop

c00103c8 <KeResolveCompatibilitySymbol(char*)>:
c00103c8:	83 ec 0c             	sub    esp,0xc
c00103cb:	83 ec 08             	sub    esp,0x8
c00103ce:	68 90 e7 01 c0       	push   0xc001e790
c00103d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d7:	e8 04 03 ff ff       	call   c00006e0 <strcmp>
c00103dc:	83 c4 10             	add    esp,0x10
c00103df:	85 c0                	test   eax,eax
c00103e1:	0f 94 c0             	sete   al
c00103e4:	84 c0                	test   al,al
c00103e6:	74 0c                	je     c00103f4 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00103e8:	b8 b8 1e 02 c0       	mov    eax,0xc0021eb8
c00103ed:	e9 62 01 00 00       	jmp    c0010554 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103f2:	66 90                	xchg   ax,ax
c00103f4:	83 ec 08             	sub    esp,0x8
c00103f7:	68 99 e7 01 c0       	push   0xc001e799
c00103fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010400:	e8 db 02 ff ff       	call   c00006e0 <strcmp>
c0010405:	83 c4 10             	add    esp,0x10
c0010408:	85 c0                	test   eax,eax
c001040a:	0f 94 c0             	sete   al
c001040d:	84 c0                	test   al,al
c001040f:	74 0b                	je     c001041c <KeResolveCompatibilitySymbol(char*)+0x54>
c0010411:	b8 d0 c1 01 c0       	mov    eax,0xc001c1d0
c0010416:	e9 39 01 00 00       	jmp    c0010554 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001041b:	90                   	nop
c001041c:	83 ec 08             	sub    esp,0x8
c001041f:	68 a3 e7 01 c0       	push   0xc001e7a3
c0010424:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010428:	e8 b3 02 ff ff       	call   c00006e0 <strcmp>
c001042d:	83 c4 10             	add    esp,0x10
c0010430:	85 c0                	test   eax,eax
c0010432:	0f 94 c0             	sete   al
c0010435:	84 c0                	test   al,al
c0010437:	74 0b                	je     c0010444 <KeResolveCompatibilitySymbol(char*)+0x7c>
c0010439:	b8 04 bf 01 c0       	mov    eax,0xc001bf04
c001043e:	e9 11 01 00 00       	jmp    c0010554 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010443:	90                   	nop
c0010444:	83 ec 08             	sub    esp,0x8
c0010447:	68 ac e7 01 c0       	push   0xc001e7ac
c001044c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010450:	e8 8b 02 ff ff       	call   c00006e0 <strcmp>
c0010455:	83 c4 10             	add    esp,0x10
c0010458:	85 c0                	test   eax,eax
c001045a:	0f 94 c0             	sete   al
c001045d:	84 c0                	test   al,al
c001045f:	74 0b                	je     c001046c <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010461:	b8 77 02 01 c0       	mov    eax,0xc0010277
c0010466:	e9 e9 00 00 00       	jmp    c0010554 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001046b:	90                   	nop
c001046c:	83 ec 08             	sub    esp,0x8
c001046f:	68 bf e7 01 c0       	push   0xc001e7bf
c0010474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010478:	e8 63 02 ff ff       	call   c00006e0 <strcmp>
c001047d:	83 c4 10             	add    esp,0x10
c0010480:	85 c0                	test   eax,eax
c0010482:	0f 94 c0             	sete   al
c0010485:	84 c0                	test   al,al
c0010487:	74 0b                	je     c0010494 <KeResolveCompatibilitySymbol(char*)+0xcc>
c0010489:	b8 ff fb 00 c0       	mov    eax,0xc000fbff
c001048e:	e9 c1 00 00 00       	jmp    c0010554 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010493:	90                   	nop
c0010494:	83 ec 08             	sub    esp,0x8
c0010497:	68 dc e7 01 c0       	push   0xc001e7dc
c001049c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104a0:	e8 3b 02 ff ff       	call   c00006e0 <strcmp>
c00104a5:	83 c4 10             	add    esp,0x10
c00104a8:	85 c0                	test   eax,eax
c00104aa:	0f 94 c0             	sete   al
c00104ad:	84 c0                	test   al,al
c00104af:	74 0b                	je     c00104bc <KeResolveCompatibilitySymbol(char*)+0xf4>
c00104b1:	b8 d0 c2 01 c0       	mov    eax,0xc001c2d0
c00104b6:	e9 99 00 00 00       	jmp    c0010554 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104bb:	90                   	nop
c00104bc:	83 ec 08             	sub    esp,0x8
c00104bf:	68 e6 e7 01 c0       	push   0xc001e7e6
c00104c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104c8:	e8 13 02 ff ff       	call   c00006e0 <strcmp>
c00104cd:	83 c4 10             	add    esp,0x10
c00104d0:	85 c0                	test   eax,eax
c00104d2:	0f 94 c0             	sete   al
c00104d5:	84 c0                	test   al,al
c00104d7:	74 07                	je     c00104e0 <KeResolveCompatibilitySymbol(char*)+0x118>
c00104d9:	b8 50 c0 01 c0       	mov    eax,0xc001c050
c00104de:	eb 74                	jmp    c0010554 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00104e0:	83 ec 08             	sub    esp,0x8
c00104e3:	68 ef e7 01 c0       	push   0xc001e7ef
c00104e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104ec:	e8 ef 01 ff ff       	call   c00006e0 <strcmp>
c00104f1:	83 c4 10             	add    esp,0x10
c00104f4:	85 c0                	test   eax,eax
c00104f6:	0f 94 c0             	sete   al
c00104f9:	84 c0                	test   al,al
c00104fb:	74 07                	je     c0010504 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00104fd:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c0010502:	eb 50                	jmp    c0010554 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010504:	83 ec 08             	sub    esp,0x8
c0010507:	68 07 e8 01 c0       	push   0xc001e807
c001050c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010510:	e8 cb 01 ff ff       	call   c00006e0 <strcmp>
c0010515:	83 c4 10             	add    esp,0x10
c0010518:	85 c0                	test   eax,eax
c001051a:	0f 94 c0             	sete   al
c001051d:	84 c0                	test   al,al
c001051f:	74 07                	je     c0010528 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010521:	b8 bc 1e 02 c0       	mov    eax,0xc0021ebc
c0010526:	eb 2c                	jmp    c0010554 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010528:	83 ec 08             	sub    esp,0x8
c001052b:	68 14 e8 01 c0       	push   0xc001e814
c0010530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010534:	e8 a7 01 ff ff       	call   c00006e0 <strcmp>
c0010539:	83 c4 10             	add    esp,0x10
c001053c:	85 c0                	test   eax,eax
c001053e:	0f 94 c0             	sete   al
c0010541:	84 c0                	test   al,al
c0010543:	74 07                	je     c001054c <KeResolveCompatibilitySymbol(char*)+0x184>
c0010545:	b8 bd 1e 02 c0       	mov    eax,0xc0021ebd
c001054a:	eb 08                	jmp    c0010554 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001054c:	b8 00 00 00 00       	mov    eax,0x0
c0010551:	8d 76 00             	lea    esi,[esi+0x0]
c0010554:	83 c4 0c             	add    esp,0xc
c0010557:	c3                   	ret    

c0010558 <KiSigKill(int)>:
c0010558:	57                   	push   edi
c0010559:	b9 0a 00 00 00       	mov    ecx,0xa
c001055e:	56                   	push   esi
c001055f:	be 5d e8 01 c0       	mov    esi,0xc001e85d
c0010564:	83 ec 14             	sub    esp,0x14
c0010567:	8d 7c 24 06          	lea    edi,[esp+0x6]
c001056b:	fc                   	cld    
c001056c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001056e:	8d 44 24 06          	lea    eax,[esp+0x6]
c0010572:	50                   	push   eax
c0010573:	6a 00                	push   0x0
c0010575:	6a 00                	push   0x0
c0010577:	6a 27                	push   0x27
c0010579:	e8 d4 fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001057e:	83 c4 24             	add    esp,0x24
c0010581:	5e                   	pop    esi
c0010582:	5f                   	pop    edi
c0010583:	c3                   	ret    

c0010584 <KiDefaultSignalHandlerIgnore(int)>:
c0010584:	c3                   	ret    

c0010585 <KiDefaultSignalHandlerPause(int)>:
c0010585:	57                   	push   edi
c0010586:	b9 07 00 00 00       	mov    ecx,0x7
c001058b:	56                   	push   esi
c001058c:	be 67 e8 01 c0       	mov    esi,0xc001e867
c0010591:	83 ec 24             	sub    esp,0x24
c0010594:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010598:	fc                   	cld    
c0010599:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001059b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001059f:	50                   	push   eax
c00105a0:	6a 00                	push   0x0
c00105a2:	6a 00                	push   0x0
c00105a4:	6a 27                	push   0x27
c00105a6:	e8 a7 fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105ab:	83 c4 34             	add    esp,0x34
c00105ae:	5e                   	pop    esi
c00105af:	5f                   	pop    edi
c00105b0:	c3                   	ret    

c00105b1 <KiDefaultSignalHandlerResume(int)>:
c00105b1:	57                   	push   edi
c00105b2:	b9 1d 00 00 00       	mov    ecx,0x1d
c00105b7:	56                   	push   esi
c00105b8:	be 83 e8 01 c0       	mov    esi,0xc001e883
c00105bd:	83 ec 24             	sub    esp,0x24
c00105c0:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00105c4:	fc                   	cld    
c00105c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00105c7:	8d 44 24 03          	lea    eax,[esp+0x3]
c00105cb:	50                   	push   eax
c00105cc:	6a 00                	push   0x0
c00105ce:	6a 00                	push   0x0
c00105d0:	6a 27                	push   0x27
c00105d2:	e8 7b fa 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00105d7:	83 c4 34             	add    esp,0x34
c00105da:	5e                   	pop    esi
c00105db:	5f                   	pop    edi
c00105dc:	c3                   	ret    

c00105dd <KeDeinitSignals(SigHandlerBlock*)>:
c00105dd:	e9 e7 71 ff ff       	jmp    c00077c9 <free>

c00105e2 <KeInitSignals()>:
c00105e2:	53                   	push   ebx
c00105e3:	83 ec 14             	sub    esp,0x14
c00105e6:	68 c8 00 00 00       	push   0xc8
c00105eb:	e8 c9 71 ff ff       	call   c00077b9 <malloc>
c00105f0:	83 c4 0c             	add    esp,0xc
c00105f3:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00105fd:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010607:	89 c3                	mov    ebx,eax
c0010609:	6a 20                	push   0x20
c001060b:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010611:	6a 00                	push   0x0
c0010613:	50                   	push   eax
c0010614:	e8 b7 fe fe ff       	call   c00004d0 <memset>
c0010619:	83 c4 0c             	add    esp,0xc
c001061c:	6a 44                	push   0x44
c001061e:	6a 00                	push   0x0
c0010620:	53                   	push   ebx
c0010621:	e8 aa fe fe ff       	call   c00004d0 <memset>
c0010626:	89 d8                	mov    eax,ebx
c0010628:	83 c4 18             	add    esp,0x18
c001062b:	5b                   	pop    ebx
c001062c:	c3                   	ret    

c001062d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001062d:	53                   	push   ebx
c001062e:	b8 01 00 00 00       	mov    eax,0x1
c0010633:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010637:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001063b:	83 f9 10             	cmp    ecx,0x10
c001063e:	7f 21                	jg     c0010661 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010640:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010647:	89 03                	mov    DWORD PTR [ebx],eax
c0010649:	b8 01 00 00 00       	mov    eax,0x1
c001064e:	d3 e0                	shl    eax,cl
c0010650:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010654:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010657:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001065f:	31 c0                	xor    eax,eax
c0010661:	5b                   	pop    ebx
c0010662:	c3                   	ret    

c0010663 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010663:	55                   	push   ebp
c0010664:	57                   	push   edi
c0010665:	bf 08 00 00 00       	mov    edi,0x8
c001066a:	56                   	push   esi
c001066b:	53                   	push   ebx
c001066c:	83 ec 18             	sub    esp,0x18
c001066f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010673:	68 a0 e8 01 c0       	push   0xc001e8a0
c0010678:	e8 77 9f ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001067d:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010684:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c001068a:	83 c4 10             	add    esp,0x10
c001068d:	31 c9                	xor    ecx,ecx
c001068f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0010693:	99                   	cdq    
c0010694:	f7 ff                	idiv   edi
c0010696:	8d 42 24             	lea    eax,[edx+0x24]
c0010699:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c001069d:	85 f6                	test   esi,esi
c001069f:	75 1a                	jne    c00106bb <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00106a1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00106a5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00106a9:	50                   	push   eax
c00106aa:	50                   	push   eax
c00106ab:	52                   	push   edx
c00106ac:	68 b1 e8 01 c0       	push   0xc001e8b1
c00106b1:	e8 3e 9f ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c00106b6:	83 c4 10             	add    esp,0x10
c00106b9:	eb 1b                	jmp    c00106d6 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00106bb:	41                   	inc    ecx
c00106bc:	83 f9 08             	cmp    ecx,0x8
c00106bf:	75 ce                	jne    c001068f <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00106c1:	83 ec 0c             	sub    esp,0xc
c00106c4:	be 01 00 00 00       	mov    esi,0x1
c00106c9:	68 d2 e8 01 c0       	push   0xc001e8d2
c00106ce:	e8 21 9f ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c00106d3:	83 c4 10             	add    esp,0x10
c00106d6:	83 c4 0c             	add    esp,0xc
c00106d9:	89 f0                	mov    eax,esi
c00106db:	5b                   	pop    ebx
c00106dc:	5e                   	pop    esi
c00106dd:	5f                   	pop    edi
c00106de:	5d                   	pop    ebp
c00106df:	c3                   	ret    

c00106e0 <KeCheckSignal(SigHandlerBlock*)>:
c00106e0:	55                   	push   ebp
c00106e1:	57                   	push   edi
c00106e2:	56                   	push   esi
c00106e3:	53                   	push   ebx
c00106e4:	51                   	push   ecx
c00106e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106e9:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00106f0:	75 07                	jne    c00106f9 <KeCheckSignal(SigHandlerBlock*)+0x19>
c00106f2:	31 c0                	xor    eax,eax
c00106f4:	e9 cc 00 00 00       	jmp    c00107c5 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00106f9:	31 c9                	xor    ecx,ecx
c00106fb:	bf 08 00 00 00       	mov    edi,0x8
c0010700:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0010706:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0010709:	99                   	cdq    
c001070a:	f7 ff                	idiv   edi
c001070c:	8b 94 93 9c 00 00 00 	mov    edx,DWORD PTR [ebx+edx*4+0x9c]
c0010713:	85 d2                	test   edx,edx
c0010715:	0f 84 94 00 00 00    	je     c00107af <KeCheckSignal(SigHandlerBlock*)+0xcf>
c001071b:	88 d1                	mov    cl,dl
c001071d:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010723:	bf 01 00 00 00       	mov    edi,0x1
c0010728:	89 04 24             	mov    DWORD PTR [esp],eax
c001072b:	d3 e7                	shl    edi,cl
c001072d:	bd 01 00 00 00       	mov    ebp,0x1
c0010732:	31 c9                	xor    ecx,ecx
c0010734:	89 e8                	mov    eax,ebp
c0010736:	d3 e0                	shl    eax,cl
c0010738:	85 04 24             	test   DWORD PTR [esp],eax
c001073b:	74 06                	je     c0010743 <KeCheckSignal(SigHandlerBlock*)+0x63>
c001073d:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010741:	75 af                	jne    c00106f2 <KeCheckSignal(SigHandlerBlock*)+0x12>
c0010743:	41                   	inc    ecx
c0010744:	83 f9 11             	cmp    ecx,0x11
c0010747:	75 eb                	jne    c0010734 <KeCheckSignal(SigHandlerBlock*)+0x54>
c0010749:	8d 4e 01             	lea    ecx,[esi+0x1]
c001074c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001074f:	89 8b bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],ecx
c0010755:	09 f8                	or     eax,edi
c0010757:	c7 84 b3 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+esi*4+0x9c],0x0
c0010762:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010768:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001076f:	31 c0                	xor    eax,eax
c0010771:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0010779:	74 09                	je     c0010784 <KeCheckSignal(SigHandlerBlock*)+0xa4>
c001077b:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0010782:	eb 06                	jmp    c001078a <KeCheckSignal(SigHandlerBlock*)+0xaa>
c0010784:	40                   	inc    eax
c0010785:	83 f8 08             	cmp    eax,0x8
c0010788:	75 e7                	jne    c0010771 <KeCheckSignal(SigHandlerBlock*)+0x91>
c001078a:	8b 04 93             	mov    eax,DWORD PTR [ebx+edx*4]
c001078d:	83 fa 09             	cmp    edx,0x9
c0010790:	75 07                	jne    c0010799 <KeCheckSignal(SigHandlerBlock*)+0xb9>
c0010792:	b8 58 05 01 c0       	mov    eax,0xc0010558
c0010797:	eb 2c                	jmp    c00107c5 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c0010799:	83 f8 01             	cmp    eax,0x1
c001079c:	0f 84 50 ff ff ff    	je     c00106f2 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107a2:	85 c0                	test   eax,eax
c00107a4:	75 1f                	jne    c00107c5 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107a6:	8b 04 95 c0 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0540]
c00107ad:	eb 16                	jmp    c00107c5 <KeCheckSignal(SigHandlerBlock*)+0xe5>
c00107af:	46                   	inc    esi
c00107b0:	41                   	inc    ecx
c00107b1:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00107b7:	83 f9 08             	cmp    ecx,0x8
c00107ba:	0f 85 40 ff ff ff    	jne    c0010700 <KeCheckSignal(SigHandlerBlock*)+0x20>
c00107c0:	e9 2d ff ff ff       	jmp    c00106f2 <KeCheckSignal(SigHandlerBlock*)+0x12>
c00107c5:	5a                   	pop    edx
c00107c6:	5b                   	pop    ebx
c00107c7:	5e                   	pop    esi
c00107c8:	5f                   	pop    edi
c00107c9:	5d                   	pop    ebp
c00107ca:	c3                   	ret    

c00107cb <KiCheckSignalZ>:
c00107cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00107d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00107d3:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00107d9:	e8 02 ff ff ff       	call   c00106e0 <KeCheckSignal(SigHandlerBlock*)>
c00107de:	5a                   	pop    edx
c00107df:	c3                   	ret    

c00107e0 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00107e0:	56                   	push   esi
c00107e1:	53                   	push   ebx
c00107e2:	bb 01 00 00 00       	mov    ebx,0x1
c00107e7:	52                   	push   edx
c00107e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00107ec:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00107f0:	d3 e3                	shl    ebx,cl
c00107f2:	83 f9 10             	cmp    ecx,0x10
c00107f5:	7f 08                	jg     c00107ff <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00107f7:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00107fd:	75 10                	jne    c001080f <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00107ff:	83 ec 0c             	sub    esp,0xc
c0010802:	68 e3 e8 01 c0       	push   0xc001e8e3
c0010807:	e8 6b fa ff ff       	call   c0010277 <KePanic(char const*)>
c001080c:	83 c4 10             	add    esp,0x10
c001080f:	f7 d3                	not    ebx
c0010811:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010817:	58                   	pop    eax
c0010818:	5b                   	pop    ebx
c0010819:	5e                   	pop    esi
c001081a:	c3                   	ret    

c001081b <SysSeekDir(regs*)>:
c001081b:	31 c0                	xor    eax,eax
c001081d:	31 d2                	xor    edx,edx
c001081f:	c3                   	ret    

c0010820 <SysTellDir(regs*)>:
c0010820:	31 c0                	xor    eax,eax
c0010822:	31 d2                	xor    edx,edx
c0010824:	c3                   	ret    

c0010825 <SysVerify(regs*)>:
c0010825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010829:	31 d2                	xor    edx,edx
c001082b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001082e:	c3                   	ret    

c001082f <SysGetArgc(regs*)>:
c001082f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010834:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010837:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001083d:	99                   	cdq    
c001083e:	c3                   	ret    

c001083f <SysTTYName(regs*)>:
c001083f:	b8 01 00 00 00       	mov    eax,0x1
c0010844:	31 d2                	xor    edx,edx
c0010846:	c3                   	ret    

c0010847 <SysFormatDisk(regs*)>:
c0010847:	56                   	push   esi
c0010848:	53                   	push   ebx
c0010849:	50                   	push   eax
c001084a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001084e:	8b 1d b4 1f 02 c0    	mov    ebx,DWORD PTR ds:0xc0021fb4
c0010854:	eb 28                	jmp    c001087e <SysFormatDisk(regs*)+0x37>
c0010856:	83 ec 0c             	sub    esp,0xc
c0010859:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001085c:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001085f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010861:	51                   	push   ecx
c0010862:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010865:	51                   	push   ecx
c0010866:	50                   	push   eax
c0010867:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c001086e:	50                   	push   eax
c001086f:	53                   	push   ebx
c0010870:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010873:	83 c4 20             	add    esp,0x20
c0010876:	83 f8 08             	cmp    eax,0x8
c0010879:	75 12                	jne    c001088d <SysFormatDisk(regs*)+0x46>
c001087b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001087e:	85 db                	test   ebx,ebx
c0010880:	75 d4                	jne    c0010856 <SysFormatDisk(regs*)+0xf>
c0010882:	59                   	pop    ecx
c0010883:	b8 03 00 00 00       	mov    eax,0x3
c0010888:	31 d2                	xor    edx,edx
c001088a:	5b                   	pop    ebx
c001088b:	5e                   	pop    esi
c001088c:	c3                   	ret    
c001088d:	85 c0                	test   eax,eax
c001088f:	74 1b                	je     c00108ac <SysFormatDisk(regs*)+0x65>
c0010891:	83 f8 09             	cmp    eax,0x9
c0010894:	74 0b                	je     c00108a1 <SysFormatDisk(regs*)+0x5a>
c0010896:	59                   	pop    ecx
c0010897:	b8 02 00 00 00       	mov    eax,0x2
c001089c:	31 d2                	xor    edx,edx
c001089e:	5b                   	pop    ebx
c001089f:	5e                   	pop    esi
c00108a0:	c3                   	ret    
c00108a1:	59                   	pop    ecx
c00108a2:	b8 01 00 00 00       	mov    eax,0x1
c00108a7:	31 d2                	xor    edx,edx
c00108a9:	5b                   	pop    ebx
c00108aa:	5e                   	pop    esi
c00108ab:	c3                   	ret    
c00108ac:	59                   	pop    ecx
c00108ad:	31 c0                	xor    eax,eax
c00108af:	31 d2                	xor    edx,edx
c00108b1:	5b                   	pop    ebx
c00108b2:	5e                   	pop    esi
c00108b3:	c3                   	ret    

c00108b4 <SysSetDiskVolumeLabel(regs*)>:
c00108b4:	56                   	push   esi
c00108b5:	53                   	push   ebx
c00108b6:	53                   	push   ebx
c00108b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00108bb:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00108be:	83 f8 19             	cmp    eax,0x19
c00108c1:	77 2d                	ja     c00108f0 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108c3:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c00108ca:	85 c9                	test   ecx,ecx
c00108cc:	74 22                	je     c00108f0 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108ce:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00108d1:	85 db                	test   ebx,ebx
c00108d3:	74 1b                	je     c00108f0 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108d5:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00108db:	85 d2                	test   edx,edx
c00108dd:	74 11                	je     c00108f0 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00108df:	8b 32                	mov    esi,DWORD PTR [edx]
c00108e1:	53                   	push   ebx
c00108e2:	50                   	push   eax
c00108e3:	51                   	push   ecx
c00108e4:	52                   	push   edx
c00108e5:	ff 56 58             	call   DWORD PTR [esi+0x58]
c00108e8:	83 c4 10             	add    esp,0x10
c00108eb:	99                   	cdq    
c00108ec:	59                   	pop    ecx
c00108ed:	5b                   	pop    ebx
c00108ee:	5e                   	pop    esi
c00108ef:	c3                   	ret    
c00108f0:	59                   	pop    ecx
c00108f1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00108f6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108fb:	5b                   	pop    ebx
c00108fc:	5e                   	pop    esi
c00108fd:	c3                   	ret    

c00108fe <SysGetDiskVolumeLabel(regs*)>:
c00108fe:	57                   	push   edi
c00108ff:	56                   	push   esi
c0010900:	53                   	push   ebx
c0010901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010905:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010908:	83 fa 19             	cmp    edx,0x19
c001090b:	77 38                	ja     c0010945 <SysGetDiskVolumeLabel(regs*)+0x47>
c001090d:	8b 0c 95 20 44 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdbbe0]
c0010914:	85 c9                	test   ecx,ecx
c0010916:	74 2d                	je     c0010945 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010918:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001091b:	85 db                	test   ebx,ebx
c001091d:	74 26                	je     c0010945 <SysGetDiskVolumeLabel(regs*)+0x47>
c001091f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010922:	85 f6                	test   esi,esi
c0010924:	74 1f                	je     c0010945 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010926:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001092c:	85 c0                	test   eax,eax
c001092e:	74 15                	je     c0010945 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010930:	83 ec 0c             	sub    esp,0xc
c0010933:	8b 38                	mov    edi,DWORD PTR [eax]
c0010935:	56                   	push   esi
c0010936:	53                   	push   ebx
c0010937:	52                   	push   edx
c0010938:	51                   	push   ecx
c0010939:	50                   	push   eax
c001093a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001093d:	83 c4 20             	add    esp,0x20
c0010940:	99                   	cdq    
c0010941:	5b                   	pop    ebx
c0010942:	5e                   	pop    esi
c0010943:	5f                   	pop    edi
c0010944:	c3                   	ret    
c0010945:	5b                   	pop    ebx
c0010946:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001094b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010950:	5e                   	pop    esi
c0010951:	5f                   	pop    edi
c0010952:	c3                   	ret    

c0010953 <SysShutdown(regs*)>:
c0010953:	83 ec 0c             	sub    esp,0xc
c0010956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001095d:	85 c0                	test   eax,eax
c001095f:	74 18                	je     c0010979 <SysShutdown(regs*)+0x26>
c0010961:	83 f8 01             	cmp    eax,0x1
c0010964:	74 38                	je     c001099e <SysShutdown(regs*)+0x4b>
c0010966:	83 f8 02             	cmp    eax,0x2
c0010969:	74 24                	je     c001098f <SysShutdown(regs*)+0x3c>
c001096b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010970:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010975:	83 c4 0c             	add    esp,0xc
c0010978:	c3                   	ret    
c0010979:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001097e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010980:	6a 00                	push   0x0
c0010982:	6a 00                	push   0x0
c0010984:	6a 00                	push   0x0
c0010986:	50                   	push   eax
c0010987:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001098a:	83 c4 10             	add    esp,0x10
c001098d:	eb dc                	jmp    c001096b <SysShutdown(regs*)+0x18>
c001098f:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0010994:	8b 10                	mov    edx,DWORD PTR [eax]
c0010996:	6a 00                	push   0x0
c0010998:	6a 00                	push   0x0
c001099a:	6a 01                	push   0x1
c001099c:	eb e8                	jmp    c0010986 <SysShutdown(regs*)+0x33>
c001099e:	a1 a0 44 02 c0       	mov    eax,ds:0xc00244a0
c00109a3:	85 c0                	test   eax,eax
c00109a5:	74 02                	je     c00109a9 <SysShutdown(regs*)+0x56>
c00109a7:	ff d0                	call   eax
c00109a9:	31 c0                	xor    eax,eax
c00109ab:	31 d2                	xor    edx,edx
c00109ad:	83 c4 0c             	add    esp,0xc
c00109b0:	c3                   	ret    

c00109b1 <SysRealpath(regs*)>:
c00109b1:	83 ec 0c             	sub    esp,0xc
c00109b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00109bb:	85 d2                	test   edx,edx
c00109bd:	74 07                	je     c00109c6 <SysRealpath(regs*)+0x15>
c00109bf:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00109c2:	85 c0                	test   eax,eax
c00109c4:	75 0b                	jne    c00109d1 <SysRealpath(regs*)+0x20>
c00109c6:	b8 01 00 00 00       	mov    eax,0x1
c00109cb:	31 d2                	xor    edx,edx
c00109cd:	83 c4 0c             	add    esp,0xc
c00109d0:	c3                   	ret    
c00109d1:	51                   	push   ecx
c00109d2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00109d8:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00109db:	81 c1 0c 01 00 00    	add    ecx,0x10c
c00109e1:	51                   	push   ecx
c00109e2:	52                   	push   edx
c00109e3:	50                   	push   eax
c00109e4:	e8 d7 9f ff ff       	call   c000a9c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c00109e9:	83 c4 10             	add    esp,0x10
c00109ec:	31 c0                	xor    eax,eax
c00109ee:	31 d2                	xor    edx,edx
c00109f0:	83 c4 0c             	add    esp,0xc
c00109f3:	c3                   	ret    

c00109f4 <SysReadDir(regs*)>:
c00109f4:	53                   	push   ebx
c00109f5:	83 ec 18             	sub    esp,0x18
c00109f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00109fc:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00109ff:	83 f8 02             	cmp    eax,0x2
c0010a02:	76 61                	jbe    c0010a65 <SysReadDir(regs*)+0x71>
c0010a04:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010a0b:	77 49                	ja     c0010a56 <SysReadDir(regs*)+0x62>
c0010a0d:	83 ec 0c             	sub    esp,0xc
c0010a10:	50                   	push   eax
c0010a11:	e8 19 87 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010a16:	83 c4 10             	add    esp,0x10
c0010a19:	85 c0                	test   eax,eax
c0010a1b:	74 39                	je     c0010a56 <SysReadDir(regs*)+0x62>
c0010a1d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010a25:	83 ec 0c             	sub    esp,0xc
c0010a28:	8b 10                	mov    edx,DWORD PTR [eax]
c0010a2a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010a2e:	51                   	push   ecx
c0010a2f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010a32:	51                   	push   ecx
c0010a33:	6a 00                	push   0x0
c0010a35:	68 10 01 00 00       	push   0x110
c0010a3a:	50                   	push   eax
c0010a3b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010a3e:	83 c4 20             	add    esp,0x20
c0010a41:	85 c0                	test   eax,eax
c0010a43:	74 29                	je     c0010a6e <SysReadDir(regs*)+0x7a>
c0010a45:	83 f8 07             	cmp    eax,0x7
c0010a48:	74 1b                	je     c0010a65 <SysReadDir(regs*)+0x71>
c0010a4a:	b8 02 00 00 00       	mov    eax,0x2
c0010a4f:	31 d2                	xor    edx,edx
c0010a51:	83 c4 18             	add    esp,0x18
c0010a54:	5b                   	pop    ebx
c0010a55:	c3                   	ret    
c0010a56:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a5b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a60:	83 c4 18             	add    esp,0x18
c0010a63:	5b                   	pop    ebx
c0010a64:	c3                   	ret    
c0010a65:	b8 01 00 00 00       	mov    eax,0x1
c0010a6a:	31 d2                	xor    edx,edx
c0010a6c:	eb e3                	jmp    c0010a51 <SysReadDir(regs*)+0x5d>
c0010a6e:	31 c0                	xor    eax,eax
c0010a70:	31 d2                	xor    edx,edx
c0010a72:	eb dd                	jmp    c0010a51 <SysReadDir(regs*)+0x5d>

c0010a74 <SysIsATTY(regs*)>:
c0010a74:	83 ec 0c             	sub    esp,0xc
c0010a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a7e:	83 f8 02             	cmp    eax,0x2
c0010a81:	76 07                	jbe    c0010a8a <SysIsATTY(regs*)+0x16>
c0010a83:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010a88:	75 28                	jne    c0010ab2 <SysIsATTY(regs*)+0x3e>
c0010a8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a8f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010a98:	85 c0                	test   eax,eax
c0010a9a:	74 26                	je     c0010ac2 <SysIsATTY(regs*)+0x4e>
c0010a9c:	83 ec 0c             	sub    esp,0xc
c0010a9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0010aa1:	50                   	push   eax
c0010aa2:	ff 12                	call   DWORD PTR [edx]
c0010aa4:	31 d2                	xor    edx,edx
c0010aa6:	25 ff 00 00 00       	and    eax,0xff
c0010aab:	83 c4 10             	add    esp,0x10
c0010aae:	83 c4 0c             	add    esp,0xc
c0010ab1:	c3                   	ret    
c0010ab2:	83 ec 0c             	sub    esp,0xc
c0010ab5:	50                   	push   eax
c0010ab6:	e8 74 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010abb:	83 c4 10             	add    esp,0x10
c0010abe:	85 c0                	test   eax,eax
c0010ac0:	75 da                	jne    c0010a9c <SysIsATTY(regs*)+0x28>
c0010ac2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ac7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010acc:	83 c4 0c             	add    esp,0xc
c0010acf:	c3                   	ret    

c0010ad0 <SysSeek(regs*)>:
c0010ad0:	53                   	push   ebx
c0010ad1:	83 ec 08             	sub    esp,0x8
c0010ad4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ad8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010adb:	8d 50 fd             	lea    edx,[eax-0x3]
c0010ade:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010ae4:	77 34                	ja     c0010b1a <SysSeek(regs*)+0x4a>
c0010ae6:	83 ec 0c             	sub    esp,0xc
c0010ae9:	50                   	push   eax
c0010aea:	e8 40 86 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010aef:	83 c4 0c             	add    esp,0xc
c0010af2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010af5:	31 db                	xor    ebx,ebx
c0010af7:	53                   	push   ebx
c0010af8:	51                   	push   ecx
c0010af9:	50                   	push   eax
c0010afa:	e8 e9 a1 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c0010aff:	83 c4 10             	add    esp,0x10
c0010b02:	85 c0                	test   eax,eax
c0010b04:	0f 95 c0             	setne  al
c0010b07:	31 d2                	xor    edx,edx
c0010b09:	25 ff 00 00 00       	and    eax,0xff
c0010b0e:	f7 d8                	neg    eax
c0010b10:	83 d2 00             	adc    edx,0x0
c0010b13:	83 c4 08             	add    esp,0x8
c0010b16:	f7 da                	neg    edx
c0010b18:	5b                   	pop    ebx
c0010b19:	c3                   	ret    
c0010b1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b1f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b24:	83 c4 08             	add    esp,0x8
c0010b27:	5b                   	pop    ebx
c0010b28:	c3                   	ret    

c0010b29 <SysTell(regs*)>:
c0010b29:	53                   	push   ebx
c0010b2a:	83 ec 08             	sub    esp,0x8
c0010b2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b31:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b34:	83 f8 02             	cmp    eax,0x2
c0010b37:	76 50                	jbe    c0010b89 <SysTell(regs*)+0x60>
c0010b39:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010b3e:	76 19                	jbe    c0010b59 <SysTell(regs*)+0x30>
c0010b40:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b43:	31 d2                	xor    edx,edx
c0010b45:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010b4b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b52:	31 c0                	xor    eax,eax
c0010b54:	83 c4 08             	add    esp,0x8
c0010b57:	5b                   	pop    ebx
c0010b58:	c3                   	ret    
c0010b59:	83 ec 0c             	sub    esp,0xc
c0010b5c:	50                   	push   eax
c0010b5d:	e8 cd 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010b62:	5a                   	pop    edx
c0010b63:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010b66:	59                   	pop    ecx
c0010b67:	53                   	push   ebx
c0010b68:	50                   	push   eax
c0010b69:	e8 d0 a1 ff ff       	call   c000ad3e <File::tell(unsigned long long*)>
c0010b6e:	83 c4 10             	add    esp,0x10
c0010b71:	85 c0                	test   eax,eax
c0010b73:	0f 95 c0             	setne  al
c0010b76:	31 d2                	xor    edx,edx
c0010b78:	25 ff 00 00 00       	and    eax,0xff
c0010b7d:	f7 d8                	neg    eax
c0010b7f:	83 d2 00             	adc    edx,0x0
c0010b82:	83 c4 08             	add    esp,0x8
c0010b85:	f7 da                	neg    edx
c0010b87:	5b                   	pop    ebx
c0010b88:	c3                   	ret    
c0010b89:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010b8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b93:	83 c4 08             	add    esp,0x8
c0010b96:	5b                   	pop    ebx
c0010b97:	c3                   	ret    

c0010b98 <SysSize(regs*)>:
c0010b98:	53                   	push   ebx
c0010b99:	83 ec 18             	sub    esp,0x18
c0010b9c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010ba0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ba3:	83 f8 02             	cmp    eax,0x2
c0010ba6:	76 56                	jbe    c0010bfe <SysSize(regs*)+0x66>
c0010ba8:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010bad:	76 19                	jbe    c0010bc8 <SysSize(regs*)+0x30>
c0010baf:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010bb2:	31 d2                	xor    edx,edx
c0010bb4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010bba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010bc1:	31 c0                	xor    eax,eax
c0010bc3:	83 c4 18             	add    esp,0x18
c0010bc6:	5b                   	pop    ebx
c0010bc7:	c3                   	ret    
c0010bc8:	83 ec 0c             	sub    esp,0xc
c0010bcb:	50                   	push   eax
c0010bcc:	e8 5e 85 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010bd1:	83 c4 0c             	add    esp,0xc
c0010bd4:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010bd8:	52                   	push   edx
c0010bd9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010bdc:	52                   	push   edx
c0010bdd:	50                   	push   eax
c0010bde:	e8 f3 a2 ff ff       	call   c000aed6 <File::stat(unsigned long long*, bool*)>
c0010be3:	83 c4 10             	add    esp,0x10
c0010be6:	85 c0                	test   eax,eax
c0010be8:	0f 95 c0             	setne  al
c0010beb:	31 d2                	xor    edx,edx
c0010bed:	25 ff 00 00 00       	and    eax,0xff
c0010bf2:	f7 d8                	neg    eax
c0010bf4:	83 d2 00             	adc    edx,0x0
c0010bf7:	83 c4 18             	add    esp,0x18
c0010bfa:	f7 da                	neg    edx
c0010bfc:	5b                   	pop    ebx
c0010bfd:	c3                   	ret    
c0010bfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c03:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c08:	83 c4 18             	add    esp,0x18
c0010c0b:	5b                   	pop    ebx
c0010c0c:	c3                   	ret    

c0010c0d <SysSizeFromFilename(regs*)>:
c0010c0d:	57                   	push   edi
c0010c0e:	56                   	push   esi
c0010c0f:	53                   	push   ebx
c0010c10:	83 ec 20             	sub    esp,0x20
c0010c13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c17:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0010c1a:	83 fb 02             	cmp    ebx,0x2
c0010c1d:	0f 86 8c 00 00 00    	jbe    c0010caf <SysSizeFromFilename(regs*)+0xa2>
c0010c23:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0010c29:	76 1b                	jbe    c0010c46 <SysSizeFromFilename(regs*)+0x39>
c0010c2b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010c2e:	31 d2                	xor    edx,edx
c0010c30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010c36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c3d:	83 c4 20             	add    esp,0x20
c0010c40:	31 c0                	xor    eax,eax
c0010c42:	5b                   	pop    ebx
c0010c43:	5e                   	pop    esi
c0010c44:	5f                   	pop    edi
c0010c45:	c3                   	ret    
c0010c46:	83 ec 0c             	sub    esp,0xc
c0010c49:	68 14 01 00 00       	push   0x114
c0010c4e:	e8 66 6b ff ff       	call   c00077b9 <malloc>
c0010c53:	83 c4 0c             	add    esp,0xc
c0010c56:	89 c7                	mov    edi,eax
c0010c58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c60:	50                   	push   eax
c0010c61:	53                   	push   ebx
c0010c62:	57                   	push   edi
c0010c63:	e8 02 9f ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c0010c68:	83 c4 0c             	add    esp,0xc
c0010c6b:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010c6f:	50                   	push   eax
c0010c70:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010c73:	52                   	push   edx
c0010c74:	57                   	push   edi
c0010c75:	e8 5c a2 ff ff       	call   c000aed6 <File::stat(unsigned long long*, bool*)>
c0010c7a:	83 c4 10             	add    esp,0x10
c0010c7d:	85 ff                	test   edi,edi
c0010c7f:	74 14                	je     c0010c95 <SysSizeFromFilename(regs*)+0x88>
c0010c81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010c85:	8b 17                	mov    edx,DWORD PTR [edi]
c0010c87:	83 ec 0c             	sub    esp,0xc
c0010c8a:	57                   	push   edi
c0010c8b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010c8e:	83 c4 10             	add    esp,0x10
c0010c91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010c95:	85 c0                	test   eax,eax
c0010c97:	0f 95 c0             	setne  al
c0010c9a:	31 d2                	xor    edx,edx
c0010c9c:	25 ff 00 00 00       	and    eax,0xff
c0010ca1:	f7 d8                	neg    eax
c0010ca3:	83 d2 00             	adc    edx,0x0
c0010ca6:	83 c4 20             	add    esp,0x20
c0010ca9:	f7 da                	neg    edx
c0010cab:	5b                   	pop    ebx
c0010cac:	5e                   	pop    esi
c0010cad:	5f                   	pop    edi
c0010cae:	c3                   	ret    
c0010caf:	83 c4 20             	add    esp,0x20
c0010cb2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cb7:	5b                   	pop    ebx
c0010cb8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cbd:	5e                   	pop    esi
c0010cbe:	5f                   	pop    edi
c0010cbf:	c3                   	ret    

c0010cc0 <SysClose(regs*)>:
c0010cc0:	53                   	push   ebx
c0010cc1:	83 ec 08             	sub    esp,0x8
c0010cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010cc8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010ccb:	83 f8 02             	cmp    eax,0x2
c0010cce:	76 41                	jbe    c0010d11 <SysClose(regs*)+0x51>
c0010cd0:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010cd6:	83 fa 01             	cmp    edx,0x1
c0010cd9:	76 2d                	jbe    c0010d08 <SysClose(regs*)+0x48>
c0010cdb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ce0:	77 2f                	ja     c0010d11 <SysClose(regs*)+0x51>
c0010ce2:	83 ec 0c             	sub    esp,0xc
c0010ce5:	50                   	push   eax
c0010ce6:	e8 44 84 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010ceb:	89 c3                	mov    ebx,eax
c0010ced:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cf0:	e8 93 9f ff ff       	call   c000ac88 <File::close()>
c0010cf5:	83 c4 10             	add    esp,0x10
c0010cf8:	85 db                	test   ebx,ebx
c0010cfa:	74 0c                	je     c0010d08 <SysClose(regs*)+0x48>
c0010cfc:	83 ec 0c             	sub    esp,0xc
c0010cff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d01:	53                   	push   ebx
c0010d02:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d05:	83 c4 10             	add    esp,0x10
c0010d08:	31 c0                	xor    eax,eax
c0010d0a:	31 d2                	xor    edx,edx
c0010d0c:	83 c4 08             	add    esp,0x8
c0010d0f:	5b                   	pop    ebx
c0010d10:	c3                   	ret    
c0010d11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d16:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d1b:	83 c4 08             	add    esp,0x8
c0010d1e:	5b                   	pop    ebx
c0010d1f:	c3                   	ret    

c0010d20 <SysOpenDir(regs*)>:
c0010d20:	57                   	push   edi
c0010d21:	56                   	push   esi
c0010d22:	53                   	push   ebx
c0010d23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d27:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d2a:	85 c0                	test   eax,eax
c0010d2c:	0f 84 e7 00 00 00    	je     c0010e19 <SysOpenDir(regs*)+0xf9>
c0010d32:	83 ec 0c             	sub    esp,0xc
c0010d35:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010d38:	56                   	push   esi
c0010d39:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010d3c:	57                   	push   edi
c0010d3d:	50                   	push   eax
c0010d3e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010d41:	50                   	push   eax
c0010d42:	68 f4 e8 01 c0       	push   0xc001e8f4
c0010d47:	e8 a8 98 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0010d4c:	83 c4 18             	add    esp,0x18
c0010d4f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d52:	50                   	push   eax
c0010d53:	68 1a e9 01 c0       	push   0xc001e91a
c0010d58:	e8 97 98 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0010d5d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010d64:	e8 50 6a ff ff       	call   c00077b9 <malloc>
c0010d69:	83 c4 0c             	add    esp,0xc
c0010d6c:	89 c6                	mov    esi,eax
c0010d6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d76:	50                   	push   eax
c0010d77:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d7a:	50                   	push   eax
c0010d7b:	56                   	push   esi
c0010d7c:	e8 13 a3 ff ff       	call   c000b094 <Directory::Directory(char const*, Process*)>
c0010d81:	c7 04 24 0e f7 01 c0 	mov    DWORD PTR [esp],0xc001f70e
c0010d88:	e8 67 98 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0010d8d:	83 c4 10             	add    esp,0x10
c0010d90:	85 f6                	test   esi,esi
c0010d92:	0f 84 8f 00 00 00    	je     c0010e27 <SysOpenDir(regs*)+0x107>
c0010d98:	83 ec 0c             	sub    esp,0xc
c0010d9b:	68 2f e9 01 c0       	push   0xc001e92f
c0010da0:	e8 4f 98 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0010da5:	58                   	pop    eax
c0010da6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010da9:	5a                   	pop    edx
c0010daa:	51                   	push   ecx
c0010dab:	68 33 e9 01 c0       	push   0xc001e933
c0010db0:	e8 3f 98 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0010db5:	89 34 24             	mov    DWORD PTR [esp],esi
c0010db8:	e8 97 a3 ff ff       	call   c000b154 <Directory::open()>
c0010dbd:	c7 04 24 2b d7 01 c0 	mov    DWORD PTR [esp],0xc001d72b
c0010dc4:	89 c7                	mov    edi,eax
c0010dc6:	e8 29 98 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0010dcb:	83 c4 10             	add    esp,0x10
c0010dce:	85 ff                	test   edi,edi
c0010dd0:	75 37                	jne    c0010e09 <SysOpenDir(regs*)+0xe9>
c0010dd2:	83 ec 0c             	sub    esp,0xc
c0010dd5:	68 44 e9 01 c0       	push   0xc001e944
c0010dda:	e8 15 98 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0010ddf:	89 34 24             	mov    DWORD PTR [esp],esi
c0010de2:	e8 53 80 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0010de7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010dea:	89 02                	mov    DWORD PTR [edx],eax
c0010dec:	c1 f8 1f             	sar    eax,0x1f
c0010def:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010df2:	c7 04 24 48 e9 01 c0 	mov    DWORD PTR [esp],0xc001e948
c0010df9:	e8 f6 97 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0010dfe:	83 c4 10             	add    esp,0x10
c0010e01:	31 c0                	xor    eax,eax
c0010e03:	5b                   	pop    ebx
c0010e04:	31 d2                	xor    edx,edx
c0010e06:	5e                   	pop    esi
c0010e07:	5f                   	pop    edi
c0010e08:	c3                   	ret    
c0010e09:	83 ec 0c             	sub    esp,0xc
c0010e0c:	68 40 e9 01 c0       	push   0xc001e940
c0010e11:	e8 de 97 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0010e16:	83 c4 10             	add    esp,0x10
c0010e19:	5b                   	pop    ebx
c0010e1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e1f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e24:	5e                   	pop    esi
c0010e25:	5f                   	pop    edi
c0010e26:	c3                   	ret    
c0010e27:	83 ec 0c             	sub    esp,0xc
c0010e2a:	68 2b e9 01 c0       	push   0xc001e92b
c0010e2f:	eb e0                	jmp    c0010e11 <SysOpenDir(regs*)+0xf1>

c0010e31 <SysCloseDir(regs*)>:
c0010e31:	53                   	push   ebx
c0010e32:	83 ec 08             	sub    esp,0x8
c0010e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e39:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e3c:	8d 50 fd             	lea    edx,[eax-0x3]
c0010e3f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010e45:	77 2f                	ja     c0010e76 <SysCloseDir(regs*)+0x45>
c0010e47:	83 ec 0c             	sub    esp,0xc
c0010e4a:	50                   	push   eax
c0010e4b:	e8 df 82 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0010e50:	89 c3                	mov    ebx,eax
c0010e52:	89 04 24             	mov    DWORD PTR [esp],eax
c0010e55:	e8 56 a3 ff ff       	call   c000b1b0 <Directory::close()>
c0010e5a:	83 c4 10             	add    esp,0x10
c0010e5d:	85 db                	test   ebx,ebx
c0010e5f:	74 0c                	je     c0010e6d <SysCloseDir(regs*)+0x3c>
c0010e61:	83 ec 0c             	sub    esp,0xc
c0010e64:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e66:	53                   	push   ebx
c0010e67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e6a:	83 c4 10             	add    esp,0x10
c0010e6d:	31 c0                	xor    eax,eax
c0010e6f:	31 d2                	xor    edx,edx
c0010e71:	83 c4 08             	add    esp,0x8
c0010e74:	5b                   	pop    ebx
c0010e75:	c3                   	ret    
c0010e76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010e7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010e80:	83 c4 08             	add    esp,0x8
c0010e83:	5b                   	pop    ebx
c0010e84:	c3                   	ret    

c0010e85 <SysMakeDir(regs*)>:
c0010e85:	56                   	push   esi
c0010e86:	53                   	push   ebx
c0010e87:	83 ec 10             	sub    esp,0x10
c0010e8a:	68 14 01 00 00       	push   0x114
c0010e8f:	e8 25 69 ff ff       	call   c00077b9 <malloc>
c0010e94:	83 c4 0c             	add    esp,0xc
c0010e97:	89 c3                	mov    ebx,eax
c0010e99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e9e:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010ea1:	56                   	push   esi
c0010ea2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010ea6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ea9:	50                   	push   eax
c0010eaa:	53                   	push   ebx
c0010eab:	e8 e4 a1 ff ff       	call   c000b094 <Directory::Directory(char const*, Process*)>
c0010eb0:	83 c4 10             	add    esp,0x10
c0010eb3:	85 db                	test   ebx,ebx
c0010eb5:	74 32                	je     c0010ee9 <SysMakeDir(regs*)+0x64>
c0010eb7:	83 ec 0c             	sub    esp,0xc
c0010eba:	53                   	push   ebx
c0010ebb:	e8 74 a4 ff ff       	call   c000b334 <Directory::create()>
c0010ec0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ec3:	89 c6                	mov    esi,eax
c0010ec5:	e8 e6 a2 ff ff       	call   c000b1b0 <Directory::close()>
c0010eca:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ecf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010ed2:	83 c4 10             	add    esp,0x10
c0010ed5:	31 c0                	xor    eax,eax
c0010ed7:	59                   	pop    ecx
c0010ed8:	85 f6                	test   esi,esi
c0010eda:	5b                   	pop    ebx
c0010edb:	0f 95 c0             	setne  al
c0010ede:	5e                   	pop    esi
c0010edf:	31 d2                	xor    edx,edx
c0010ee1:	f7 d8                	neg    eax
c0010ee3:	83 d2 00             	adc    edx,0x0
c0010ee6:	f7 da                	neg    edx
c0010ee8:	c3                   	ret    
c0010ee9:	59                   	pop    ecx
c0010eea:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010eef:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ef4:	5b                   	pop    ebx
c0010ef5:	5e                   	pop    esi
c0010ef6:	c3                   	ret    

c0010ef7 <SysWait(regs*)>:
c0010ef7:	83 ec 10             	sub    esp,0x10
c0010efa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010efe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010f01:	52                   	push   edx
c0010f02:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010f05:	51                   	push   ecx
c0010f06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f09:	50                   	push   eax
c0010f0a:	e8 89 2b 00 00       	call   c0013a98 <waitTask(int, int*, int)>
c0010f0f:	83 c4 1c             	add    esp,0x1c
c0010f12:	99                   	cdq    
c0010f13:	c3                   	ret    

c0010f14 <SysNotImpl(regs*)>:
c0010f14:	83 ec 18             	sub    esp,0x18
c0010f17:	68 4c e9 01 c0       	push   0xc001e94c
c0010f1c:	e8 56 f3 ff ff       	call   c0010277 <KePanic(char const*)>
c0010f21:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f26:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f2b:	83 c4 1c             	add    esp,0x1c
c0010f2e:	c3                   	ret    

c0010f2f <SysPanic(regs*)>:
c0010f2f:	83 ec 18             	sub    esp,0x18
c0010f32:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f36:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010f39:	50                   	push   eax
c0010f3a:	e8 38 f3 ff ff       	call   c0010277 <KePanic(char const*)>
c0010f3f:	b8 01 00 00 00       	mov    eax,0x1
c0010f44:	31 d2                	xor    edx,edx
c0010f46:	83 c4 1c             	add    esp,0x1c
c0010f49:	c3                   	ret    

c0010f4a <SysRmdir(regs*)>:
c0010f4a:	56                   	push   esi
c0010f4b:	53                   	push   ebx
c0010f4c:	83 ec 20             	sub    esp,0x20
c0010f4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010f53:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010f56:	68 14 01 00 00       	push   0x114
c0010f5b:	e8 59 68 ff ff       	call   c00077b9 <malloc>
c0010f60:	83 c4 0c             	add    esp,0xc
c0010f63:	89 c3                	mov    ebx,eax
c0010f65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f6a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f6d:	50                   	push   eax
c0010f6e:	56                   	push   esi
c0010f6f:	53                   	push   ebx
c0010f70:	e8 f5 9b ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c0010f75:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f78:	e8 25 9e ff ff       	call   c000ada2 <File::unlink()>
c0010f7d:	83 c4 10             	add    esp,0x10
c0010f80:	85 db                	test   ebx,ebx
c0010f82:	74 14                	je     c0010f98 <SysRmdir(regs*)+0x4e>
c0010f84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f88:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010f8a:	83 ec 0c             	sub    esp,0xc
c0010f8d:	53                   	push   ebx
c0010f8e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010f91:	83 c4 10             	add    esp,0x10
c0010f94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f98:	85 c0                	test   eax,eax
c0010f9a:	0f 95 c0             	setne  al
c0010f9d:	31 d2                	xor    edx,edx
c0010f9f:	25 ff 00 00 00       	and    eax,0xff
c0010fa4:	f7 d8                	neg    eax
c0010fa6:	83 d2 00             	adc    edx,0x0
c0010fa9:	83 c4 14             	add    esp,0x14
c0010fac:	f7 da                	neg    edx
c0010fae:	5b                   	pop    ebx
c0010faf:	5e                   	pop    esi
c0010fb0:	c3                   	ret    

c0010fb1 <SysUnlink(regs*)>:
c0010fb1:	56                   	push   esi
c0010fb2:	53                   	push   ebx
c0010fb3:	83 ec 20             	sub    esp,0x20
c0010fb6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010fba:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010fbd:	68 14 01 00 00       	push   0x114
c0010fc2:	e8 f2 67 ff ff       	call   c00077b9 <malloc>
c0010fc7:	83 c4 0c             	add    esp,0xc
c0010fca:	89 c3                	mov    ebx,eax
c0010fcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fd1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fd4:	50                   	push   eax
c0010fd5:	56                   	push   esi
c0010fd6:	53                   	push   ebx
c0010fd7:	e8 8e 9b ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c0010fdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fdf:	e8 be 9d ff ff       	call   c000ada2 <File::unlink()>
c0010fe4:	83 c4 10             	add    esp,0x10
c0010fe7:	85 db                	test   ebx,ebx
c0010fe9:	74 14                	je     c0010fff <SysUnlink(regs*)+0x4e>
c0010feb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010fef:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010ff1:	83 ec 0c             	sub    esp,0xc
c0010ff4:	53                   	push   ebx
c0010ff5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010ff8:	83 c4 10             	add    esp,0x10
c0010ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fff:	85 c0                	test   eax,eax
c0011001:	0f 95 c0             	setne  al
c0011004:	31 d2                	xor    edx,edx
c0011006:	25 ff 00 00 00       	and    eax,0xff
c001100b:	f7 d8                	neg    eax
c001100d:	83 d2 00             	adc    edx,0x0
c0011010:	83 c4 14             	add    esp,0x14
c0011013:	f7 da                	neg    edx
c0011015:	5b                   	pop    ebx
c0011016:	5e                   	pop    esi
c0011017:	c3                   	ret    

c0011018 <SysGetArgv(regs*)>:
c0011018:	83 ec 0c             	sub    esp,0xc
c001101b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001101f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011022:	85 c0                	test   eax,eax
c0011024:	78 2c                	js     c0011052 <SysGetArgv(regs*)+0x3a>
c0011026:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001102c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001102f:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011035:	7d 1b                	jge    c0011052 <SysGetArgv(regs*)+0x3a>
c0011037:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001103e:	85 c0                	test   eax,eax
c0011040:	74 18                	je     c001105a <SysGetArgv(regs*)+0x42>
c0011042:	83 ec 08             	sub    esp,0x8
c0011045:	50                   	push   eax
c0011046:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011049:	50                   	push   eax
c001104a:	e8 b1 f5 fe ff       	call   c0000600 <strcpy>
c001104f:	83 c4 10             	add    esp,0x10
c0011052:	31 c0                	xor    eax,eax
c0011054:	31 d2                	xor    edx,edx
c0011056:	83 c4 0c             	add    esp,0xc
c0011059:	c3                   	ret    
c001105a:	b8 01 00 00 00       	mov    eax,0x1
c001105f:	31 d2                	xor    edx,edx
c0011061:	83 c4 0c             	add    esp,0xc
c0011064:	c3                   	ret    

c0011065 <SysUSleep(regs*)>:
c0011065:	83 ec 1c             	sub    esp,0x1c
c0011068:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001106c:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001106f:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011072:	6a 00                	push   0x0
c0011074:	6a 64                	push   0x64
c0011076:	52                   	push   edx
c0011077:	50                   	push   eax
c0011078:	e8 53 b1 00 00       	call   c001c1d0 <__udivdi3>
c001107d:	83 c4 14             	add    esp,0x14
c0011080:	50                   	push   eax
c0011081:	e8 e6 2a 00 00       	call   c0013b6c <milliTenthSleep(unsigned int)>
c0011086:	31 c0                	xor    eax,eax
c0011088:	31 d2                	xor    edx,edx
c001108a:	83 c4 1c             	add    esp,0x1c
c001108d:	c3                   	ret    

c001108e <SysSpawn(regs*)>:
c001108e:	56                   	push   esi
c001108f:	53                   	push   ebx
c0011090:	50                   	push   eax
c0011091:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011095:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011098:	85 c0                	test   eax,eax
c001109a:	75 08                	jne    c00110a4 <SysSpawn(regs*)+0x16>
c001109c:	59                   	pop    ecx
c001109d:	31 c0                	xor    eax,eax
c001109f:	31 d2                	xor    edx,edx
c00110a1:	5b                   	pop    ebx
c00110a2:	5e                   	pop    esi
c00110a3:	c3                   	ret    
c00110a4:	83 ec 0c             	sub    esp,0xc
c00110a7:	68 24 07 00 00       	push   0x724
c00110ac:	e8 08 67 ff ff       	call   c00077b9 <malloc>
c00110b1:	83 c4 10             	add    esp,0x10
c00110b4:	89 c6                	mov    esi,eax
c00110b6:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00110b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110bc:	85 c0                	test   eax,eax
c00110be:	75 33                	jne    c00110f3 <SysSpawn(regs*)+0x65>
c00110c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110c8:	52                   	push   edx
c00110c9:	50                   	push   eax
c00110ca:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c00110cd:	53                   	push   ebx
c00110ce:	56                   	push   esi
c00110cf:	e8 44 21 00 00       	call   c0013218 <Process::Process(char const*, Process*, char**)>
c00110d4:	83 c4 10             	add    esp,0x10
c00110d7:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00110de:	75 bc                	jne    c001109c <SysSpawn(regs*)+0xe>
c00110e0:	83 ec 0c             	sub    esp,0xc
c00110e3:	56                   	push   esi
c00110e4:	e8 5b 26 00 00       	call   c0013744 <Process::createUserThread()>
c00110e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00110eb:	83 c4 10             	add    esp,0x10
c00110ee:	99                   	cdq    
c00110ef:	59                   	pop    ecx
c00110f0:	5b                   	pop    ebx
c00110f1:	5e                   	pop    esi
c00110f2:	c3                   	ret    
c00110f3:	31 c0                	xor    eax,eax
c00110f5:	eb d1                	jmp    c00110c8 <SysSpawn(regs*)+0x3a>

c00110f7 <SysGetEnv(regs*)>:
c00110f7:	57                   	push   edi
c00110f8:	56                   	push   esi
c00110f9:	53                   	push   ebx
c00110fa:	83 ec 1c             	sub    esp,0x1c
c00110fd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011101:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011106:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011109:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001110c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001110f:	50                   	push   eax
c0011110:	e8 1a f0 ff ff       	call   c001012f <Krnl::getProcessTotalEnvCount(Process*)>
c0011115:	83 c4 10             	add    esp,0x10
c0011118:	39 c7                	cmp    edi,eax
c001111a:	7c 14                	jl     c0011130 <SysGetEnv(regs*)+0x39>
c001111c:	85 f6                	test   esi,esi
c001111e:	75 0b                	jne    c001112b <SysGetEnv(regs*)+0x34>
c0011120:	83 c4 10             	add    esp,0x10
c0011123:	31 c0                	xor    eax,eax
c0011125:	5b                   	pop    ebx
c0011126:	31 d2                	xor    edx,edx
c0011128:	5e                   	pop    esi
c0011129:	5f                   	pop    edi
c001112a:	c3                   	ret    
c001112b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001112e:	eb f0                	jmp    c0011120 <SysGetEnv(regs*)+0x29>
c0011130:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011134:	52                   	push   edx
c0011135:	57                   	push   edi
c0011136:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001113c:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001113f:	51                   	push   ecx
c0011140:	50                   	push   eax
c0011141:	e8 09 f0 ff ff       	call   c001014f <Krnl::getProcessEnvPair(Process*, int)>
c0011146:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011149:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001114d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011151:	83 c4 0c             	add    esp,0xc
c0011154:	85 db                	test   ebx,ebx
c0011156:	75 23                	jne    c001117b <SysGetEnv(regs*)+0x84>
c0011158:	83 ec 0c             	sub    esp,0xc
c001115b:	50                   	push   eax
c001115c:	e8 df f3 fe ff       	call   c0000540 <strlen>
c0011161:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011164:	89 c3                	mov    ebx,eax
c0011166:	e8 d5 f3 fe ff       	call   c0000540 <strlen>
c001116b:	31 d2                	xor    edx,edx
c001116d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011171:	83 c4 10             	add    esp,0x10
c0011174:	83 c4 10             	add    esp,0x10
c0011177:	5b                   	pop    ebx
c0011178:	5e                   	pop    esi
c0011179:	5f                   	pop    edi
c001117a:	c3                   	ret    
c001117b:	83 ec 08             	sub    esp,0x8
c001117e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011181:	50                   	push   eax
c0011182:	56                   	push   esi
c0011183:	e8 78 f4 fe ff       	call   c0000600 <strcpy>
c0011188:	58                   	pop    eax
c0011189:	5a                   	pop    edx
c001118a:	68 66 e9 01 c0       	push   0xc001e966
c001118f:	56                   	push   esi
c0011190:	e8 2b f6 fe ff       	call   c00007c0 <strcat>
c0011195:	59                   	pop    ecx
c0011196:	5b                   	pop    ebx
c0011197:	57                   	push   edi
c0011198:	56                   	push   esi
c0011199:	e8 22 f6 fe ff       	call   c00007c0 <strcat>
c001119e:	83 c4 10             	add    esp,0x10
c00111a1:	e9 7a ff ff ff       	jmp    c0011120 <SysGetEnv(regs*)+0x29>

c00111a6 <SysSetFatAttrib(regs*)>:
c00111a6:	57                   	push   edi
c00111a7:	56                   	push   esi
c00111a8:	53                   	push   ebx
c00111a9:	83 ec 1c             	sub    esp,0x1c
c00111ac:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00111b0:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00111b3:	68 14 01 00 00       	push   0x114
c00111b8:	e8 fc 65 ff ff       	call   c00077b9 <malloc>
c00111bd:	83 c4 0c             	add    esp,0xc
c00111c0:	89 c3                	mov    ebx,eax
c00111c2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111ca:	50                   	push   eax
c00111cb:	57                   	push   edi
c00111cc:	53                   	push   ebx
c00111cd:	e8 98 99 ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c00111d2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00111d5:	83 c4 0c             	add    esp,0xc
c00111d8:	0f b6 d4             	movzx  edx,ah
c00111db:	25 ff 00 00 00       	and    eax,0xff
c00111e0:	52                   	push   edx
c00111e1:	50                   	push   eax
c00111e2:	53                   	push   ebx
c00111e3:	e8 54 9c ff ff       	call   c000ae3c <File::chfatattr(unsigned char, unsigned char)>
c00111e8:	83 c4 10             	add    esp,0x10
c00111eb:	85 db                	test   ebx,ebx
c00111ed:	74 14                	je     c0011203 <SysSetFatAttrib(regs*)+0x5d>
c00111ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111f3:	8b 13                	mov    edx,DWORD PTR [ebx]
c00111f5:	83 ec 0c             	sub    esp,0xc
c00111f8:	53                   	push   ebx
c00111f9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00111fc:	83 c4 10             	add    esp,0x10
c00111ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011203:	85 c0                	test   eax,eax
c0011205:	0f 95 c0             	setne  al
c0011208:	31 d2                	xor    edx,edx
c001120a:	25 ff 00 00 00       	and    eax,0xff
c001120f:	f7 d8                	neg    eax
c0011211:	83 d2 00             	adc    edx,0x0
c0011214:	83 c4 10             	add    esp,0x10
c0011217:	f7 da                	neg    edx
c0011219:	5b                   	pop    ebx
c001121a:	5e                   	pop    esi
c001121b:	5f                   	pop    edi
c001121c:	c3                   	ret    

c001121d <SysPipe(regs*)>:
c001121d:	57                   	push   edi
c001121e:	56                   	push   esi
c001121f:	53                   	push   ebx
c0011220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011224:	83 ec 0c             	sub    esp,0xc
c0011227:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001122a:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001122d:	6a 20                	push   0x20
c001122f:	e8 85 65 ff ff       	call   c00077b9 <malloc>
c0011234:	89 c3                	mov    ebx,eax
c0011236:	58                   	pop    eax
c0011237:	5a                   	pop    edx
c0011238:	68 00 50 00 00       	push   0x5000
c001123d:	53                   	push   ebx
c001123e:	e8 7b 6e ff ff       	call   c00080be <Pipe::Pipe(int)>
c0011243:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011246:	e8 ef 7b ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c001124b:	89 07                	mov    DWORD PTR [edi],eax
c001124d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011250:	e8 e5 7b ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011255:	83 c4 10             	add    esp,0x10
c0011258:	89 06                	mov    DWORD PTR [esi],eax
c001125a:	31 d2                	xor    edx,edx
c001125c:	5b                   	pop    ebx
c001125d:	31 c0                	xor    eax,eax
c001125f:	5e                   	pop    esi
c0011260:	5f                   	pop    edi
c0011261:	c3                   	ret    

c0011262 <SysGetUnixTime(regs*)>:
c0011262:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011267:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001126d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011271:	e9 04 a3 ff ff       	jmp    c000b57a <Clock::timeInSecondsLocal()>

c0011276 <string_ends_with(char const*, char const*)>:
c0011276:	57                   	push   edi
c0011277:	56                   	push   esi
c0011278:	53                   	push   ebx
c0011279:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001127d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011281:	83 ec 0c             	sub    esp,0xc
c0011284:	53                   	push   ebx
c0011285:	e8 b6 f2 fe ff       	call   c0000540 <strlen>
c001128a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001128d:	89 c6                	mov    esi,eax
c001128f:	e8 ac f2 fe ff       	call   c0000540 <strlen>
c0011294:	83 c4 10             	add    esp,0x10
c0011297:	39 c6                	cmp    esi,eax
c0011299:	7d 06                	jge    c00112a1 <string_ends_with(char const*, char const*)+0x2b>
c001129b:	5b                   	pop    ebx
c001129c:	31 c0                	xor    eax,eax
c001129e:	5e                   	pop    esi
c001129f:	5f                   	pop    edi
c00112a0:	c3                   	ret    
c00112a1:	83 ec 08             	sub    esp,0x8
c00112a4:	29 c6                	sub    esi,eax
c00112a6:	57                   	push   edi
c00112a7:	01 f3                	add    ebx,esi
c00112a9:	53                   	push   ebx
c00112aa:	e8 31 f4 fe ff       	call   c00006e0 <strcmp>
c00112af:	83 c4 10             	add    esp,0x10
c00112b2:	85 c0                	test   eax,eax
c00112b4:	5b                   	pop    ebx
c00112b5:	0f 94 c0             	sete   al
c00112b8:	5e                   	pop    esi
c00112b9:	25 ff 00 00 00       	and    eax,0xff
c00112be:	5f                   	pop    edi
c00112bf:	c3                   	ret    

c00112c0 <SysOpen(regs*)>:
c00112c0:	56                   	push   esi
c00112c1:	53                   	push   ebx
c00112c2:	81 ec 04 01 00 00    	sub    esp,0x104
c00112c8:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00112cf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00112d2:	85 d2                	test   edx,edx
c00112d4:	0f 84 cc 01 00 00    	je     c00114a6 <SysOpen(regs*)+0x1e6>
c00112da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112dd:	85 c0                	test   eax,eax
c00112df:	0f 84 c1 01 00 00    	je     c00114a6 <SysOpen(regs*)+0x1e6>
c00112e5:	83 ec 08             	sub    esp,0x8
c00112e8:	50                   	push   eax
c00112e9:	68 68 e9 01 c0       	push   0xc001e968
c00112ee:	e8 01 93 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c00112f3:	83 c4 0c             	add    esp,0xc
c00112f6:	68 75 e9 01 c0       	push   0xc001e975
c00112fb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00112fe:	50                   	push   eax
c00112ff:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011303:	56                   	push   esi
c0011304:	e8 b7 96 ff ff       	call   c000a9c0 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011309:	89 34 24             	mov    DWORD PTR [esp],esi
c001130c:	e8 2f f2 fe ff       	call   c0000540 <strlen>
c0011311:	83 c4 10             	add    esp,0x10
c0011314:	48                   	dec    eax
c0011315:	74 1d                	je     c0011334 <SysOpen(regs*)+0x74>
c0011317:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001131a:	eb 0f                	jmp    c001132b <SysOpen(regs*)+0x6b>
c001131c:	80 fa 3a             	cmp    dl,0x3a
c001131f:	74 0f                	je     c0011330 <SysOpen(regs*)+0x70>
c0011321:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011325:	48                   	dec    eax
c0011326:	74 0c                	je     c0011334 <SysOpen(regs*)+0x74>
c0011328:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001132b:	80 fa 2e             	cmp    dl,0x2e
c001132e:	75 ec                	jne    c001131c <SysOpen(regs*)+0x5c>
c0011330:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011334:	83 ec 08             	sub    esp,0x8
c0011337:	68 79 e9 01 c0       	push   0xc001e979
c001133c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001133f:	50                   	push   eax
c0011340:	e8 31 ff ff ff       	call   c0011276 <string_ends_with(char const*, char const*)>
c0011345:	83 c4 10             	add    esp,0x10
c0011348:	85 c0                	test   eax,eax
c001134a:	74 1d                	je     c0011369 <SysOpen(regs*)+0xa9>
c001134c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001134f:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011355:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001135c:	81 c4 04 01 00 00    	add    esp,0x104
c0011362:	31 c0                	xor    eax,eax
c0011364:	31 d2                	xor    edx,edx
c0011366:	5b                   	pop    ebx
c0011367:	5e                   	pop    esi
c0011368:	c3                   	ret    
c0011369:	83 ec 08             	sub    esp,0x8
c001136c:	68 7e e9 01 c0       	push   0xc001e97e
c0011371:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011374:	50                   	push   eax
c0011375:	e8 fc fe ff ff       	call   c0011276 <string_ends_with(char const*, char const*)>
c001137a:	83 c4 10             	add    esp,0x10
c001137d:	85 c0                	test   eax,eax
c001137f:	75 cb                	jne    c001134c <SysOpen(regs*)+0x8c>
c0011381:	83 ec 08             	sub    esp,0x8
c0011384:	68 7a e9 01 c0       	push   0xc001e97a
c0011389:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001138c:	50                   	push   eax
c001138d:	e8 4e f3 fe ff       	call   c00006e0 <strcmp>
c0011392:	83 c4 10             	add    esp,0x10
c0011395:	85 c0                	test   eax,eax
c0011397:	74 b3                	je     c001134c <SysOpen(regs*)+0x8c>
c0011399:	83 ec 08             	sub    esp,0x8
c001139c:	68 79 e9 01 c0       	push   0xc001e979
c00113a1:	56                   	push   esi
c00113a2:	e8 cf fe ff ff       	call   c0011276 <string_ends_with(char const*, char const*)>
c00113a7:	83 c4 10             	add    esp,0x10
c00113aa:	85 c0                	test   eax,eax
c00113ac:	75 9e                	jne    c001134c <SysOpen(regs*)+0x8c>
c00113ae:	83 ec 08             	sub    esp,0x8
c00113b1:	68 83 e9 01 c0       	push   0xc001e983
c00113b6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113b9:	50                   	push   eax
c00113ba:	e8 b7 fe ff ff       	call   c0011276 <string_ends_with(char const*, char const*)>
c00113bf:	83 c4 10             	add    esp,0x10
c00113c2:	85 c0                	test   eax,eax
c00113c4:	0f 85 ef 00 00 00    	jne    c00114b9 <SysOpen(regs*)+0x1f9>
c00113ca:	83 ec 08             	sub    esp,0x8
c00113cd:	68 88 e9 01 c0       	push   0xc001e988
c00113d2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00113d5:	50                   	push   eax
c00113d6:	e8 9b fe ff ff       	call   c0011276 <string_ends_with(char const*, char const*)>
c00113db:	83 c4 10             	add    esp,0x10
c00113de:	85 c0                	test   eax,eax
c00113e0:	0f 85 d3 00 00 00    	jne    c00114b9 <SysOpen(regs*)+0x1f9>
c00113e6:	83 ec 08             	sub    esp,0x8
c00113e9:	68 84 e9 01 c0       	push   0xc001e984
c00113ee:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00113f1:	51                   	push   ecx
c00113f2:	e8 e9 f2 fe ff       	call   c00006e0 <strcmp>
c00113f7:	83 c4 10             	add    esp,0x10
c00113fa:	85 c0                	test   eax,eax
c00113fc:	0f 84 b7 00 00 00    	je     c00114b9 <SysOpen(regs*)+0x1f9>
c0011402:	83 ec 08             	sub    esp,0x8
c0011405:	68 83 e9 01 c0       	push   0xc001e983
c001140a:	56                   	push   esi
c001140b:	e8 66 fe ff ff       	call   c0011276 <string_ends_with(char const*, char const*)>
c0011410:	83 c4 10             	add    esp,0x10
c0011413:	85 c0                	test   eax,eax
c0011415:	0f 85 9e 00 00 00    	jne    c00114b9 <SysOpen(regs*)+0x1f9>
c001141b:	83 ec 0c             	sub    esp,0xc
c001141e:	68 14 01 00 00       	push   0x114
c0011423:	e8 91 63 ff ff       	call   c00077b9 <malloc>
c0011428:	83 c4 0c             	add    esp,0xc
c001142b:	89 c6                	mov    esi,eax
c001142d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011432:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011435:	50                   	push   eax
c0011436:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011439:	52                   	push   edx
c001143a:	56                   	push   esi
c001143b:	e8 2a 97 ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c0011440:	83 c4 10             	add    esp,0x10
c0011443:	85 f6                	test   esi,esi
c0011445:	74 5f                	je     c00114a6 <SysOpen(regs*)+0x1e6>
c0011447:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001144a:	89 d0                	mov    eax,edx
c001144c:	25 ff 00 00 00       	and    eax,0xff
c0011451:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0011454:	89 d0                	mov    eax,edx
c0011456:	83 e0 01             	and    eax,0x1
c0011459:	f6 c2 02             	test   dl,0x2
c001145c:	74 03                	je     c0011461 <SysOpen(regs*)+0x1a1>
c001145e:	83 c8 02             	or     eax,0x2
c0011461:	f6 c2 04             	test   dl,0x4
c0011464:	74 03                	je     c0011469 <SysOpen(regs*)+0x1a9>
c0011466:	83 c8 04             	or     eax,0x4
c0011469:	f6 c2 08             	test   dl,0x8
c001146c:	74 03                	je     c0011471 <SysOpen(regs*)+0x1b1>
c001146e:	83 c8 0a             	or     eax,0xa
c0011471:	83 e2 10             	and    edx,0x10
c0011474:	74 03                	je     c0011479 <SysOpen(regs*)+0x1b9>
c0011476:	83 c8 12             	or     eax,0x12
c0011479:	83 ec 08             	sub    esp,0x8
c001147c:	50                   	push   eax
c001147d:	56                   	push   esi
c001147e:	e8 a7 97 ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c0011483:	83 c4 10             	add    esp,0x10
c0011486:	85 c0                	test   eax,eax
c0011488:	75 1c                	jne    c00114a6 <SysOpen(regs*)+0x1e6>
c001148a:	83 ec 0c             	sub    esp,0xc
c001148d:	56                   	push   esi
c001148e:	e8 a7 79 ff ff       	call   c0008e3a <UnixFile::getFileDescriptor()>
c0011493:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011496:	83 c4 10             	add    esp,0x10
c0011499:	89 02                	mov    DWORD PTR [edx],eax
c001149b:	c1 f8 1f             	sar    eax,0x1f
c001149e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00114a1:	e9 b6 fe ff ff       	jmp    c001135c <SysOpen(regs*)+0x9c>
c00114a6:	81 c4 04 01 00 00    	add    esp,0x104
c00114ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114b1:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114b6:	5b                   	pop    ebx
c00114b7:	5e                   	pop    esi
c00114b8:	c3                   	ret    
c00114b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00114bc:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00114c2:	e9 8e fe ff ff       	jmp    c0011355 <SysOpen(regs*)+0x95>

c00114c7 <KeSystemCall(regs*, void*)>:
c00114c7:	53                   	push   ebx
c00114c8:	83 ec 10             	sub    esp,0x10
c00114cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00114cf:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00114d2:	68 8d e9 01 c0       	push   0xc001e98d
c00114d7:	e8 18 91 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c00114dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00114df:	83 c4 10             	add    esp,0x10
c00114e2:	83 f8 32             	cmp    eax,0x32
c00114e5:	77 16                	ja     c00114fd <KeSystemCall(regs*, void*)+0x36>
c00114e7:	8b 14 85 20 fb 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe04e0]
c00114ee:	85 d2                	test   edx,edx
c00114f0:	74 0b                	je     c00114fd <KeSystemCall(regs*, void*)+0x36>
c00114f2:	83 ec 0c             	sub    esp,0xc
c00114f5:	53                   	push   ebx
c00114f6:	ff d2                	call   edx
c00114f8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00114fb:	eb 0d                	jmp    c001150a <KeSystemCall(regs*, void*)+0x43>
c00114fd:	52                   	push   edx
c00114fe:	52                   	push   edx
c00114ff:	50                   	push   eax
c0011500:	68 9d e9 01 c0       	push   0xc001e99d
c0011505:	e8 ea 90 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001150a:	83 c4 10             	add    esp,0x10
c001150d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011512:	31 d2                	xor    edx,edx
c0011514:	83 c4 08             	add    esp,0x8
c0011517:	5b                   	pop    ebx
c0011518:	c3                   	ret    

c0011519 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0011519:	55                   	push   ebp
c001151a:	57                   	push   edi
c001151b:	56                   	push   esi
c001151c:	53                   	push   ebx
c001151d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011523:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001152a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001152c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001152f:	80 fb 40             	cmp    bl,0x40
c0011532:	75 1b                	jne    c001154f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0011534:	8a 16                	mov    dl,BYTE PTR [esi]
c0011536:	84 d2                	test   dl,dl
c0011538:	0f 84 f1 00 00 00    	je     c001162f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001153e:	8d 46 01             	lea    eax,[esi+0x1]
c0011541:	80 fa 3a             	cmp    dl,0x3a
c0011544:	74 04                	je     c001154a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0011546:	89 c6                	mov    esi,eax
c0011548:	eb ea                	jmp    c0011534 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001154a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001154d:	89 c6                	mov    esi,eax
c001154f:	50                   	push   eax
c0011550:	6a 40                	push   0x40
c0011552:	6a 00                	push   0x0
c0011554:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011558:	50                   	push   eax
c0011559:	e8 72 ef fe ff       	call   c00004d0 <memset>
c001155e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0011565:	31 c0                	xor    eax,eax
c0011567:	83 c4 10             	add    esp,0x10
c001156a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001156c:	84 c9                	test   cl,cl
c001156e:	0f 84 bb 00 00 00    	je     c001162f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011574:	3d c7 00 00 00       	cmp    eax,0xc7
c0011579:	0f 8f b0 00 00 00    	jg     c001162f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001157f:	80 f9 0a             	cmp    cl,0xa
c0011582:	0f 85 98 00 00 00    	jne    c0011620 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0011588:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001158d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011591:	a8 df                	test   al,0xdf
c0011593:	0f 94 c1             	sete   cl
c0011596:	3c 23                	cmp    al,0x23
c0011598:	0f 94 c2             	sete   dl
c001159b:	08 d1                	or     cl,dl
c001159d:	75 4a                	jne    c00115e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001159f:	8d 50 f7             	lea    edx,[eax-0x9]
c00115a2:	80 fa 01             	cmp    dl,0x1
c00115a5:	76 42                	jbe    c00115e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115a7:	3c 5b                	cmp    al,0x5b
c00115a9:	75 42                	jne    c00115ed <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00115ab:	80 fb 40             	cmp    bl,0x40
c00115ae:	75 39                	jne    c00115e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00115b0:	83 ec 0c             	sub    esp,0xc
c00115b3:	8d 54 24 65          	lea    edx,[esp+0x65]
c00115b7:	52                   	push   edx
c00115b8:	e8 83 ef fe ff       	call   c0000540 <strlen>
c00115bd:	83 c4 10             	add    esp,0x10
c00115c0:	83 f8 3f             	cmp    eax,0x3f
c00115c3:	77 6a                	ja     c001162f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00115c5:	50                   	push   eax
c00115c6:	50                   	push   eax
c00115c7:	8d 54 24 61          	lea    edx,[esp+0x61]
c00115cb:	52                   	push   edx
c00115cc:	8d 54 24 24          	lea    edx,[esp+0x24]
c00115d0:	52                   	push   edx
c00115d1:	e8 2a f0 fe ff       	call   c0000600 <strcpy>
c00115d6:	58                   	pop    eax
c00115d7:	8d 54 24 24          	lea    edx,[esp+0x24]
c00115db:	52                   	push   edx
c00115dc:	e8 5f ef fe ff       	call   c0000540 <strlen>
c00115e1:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00115e6:	83 c4 10             	add    esp,0x10
c00115e9:	31 d2                	xor    edx,edx
c00115eb:	eb 3a                	jmp    c0011627 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00115ed:	80 fb 40             	cmp    bl,0x40
c00115f0:	74 06                	je     c00115f8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00115f2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00115f6:	eb 20                	jmp    c0011618 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00115f8:	50                   	push   eax
c00115f9:	50                   	push   eax
c00115fa:	55                   	push   ebp
c00115fb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00115ff:	50                   	push   eax
c0011600:	e8 db f0 fe ff       	call   c00006e0 <strcmp>
c0011605:	83 c4 10             	add    esp,0x10
c0011608:	85 c0                	test   eax,eax
c001160a:	75 dd                	jne    c00115e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001160c:	eb e4                	jmp    c00115f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001160e:	8d 50 01             	lea    edx,[eax+0x1]
c0011611:	80 f9 3d             	cmp    cl,0x3d
c0011614:	74 1d                	je     c0011633 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0011616:	89 d0                	mov    eax,edx
c0011618:	8a 08                	mov    cl,BYTE PTR [eax]
c001161a:	84 c9                	test   cl,cl
c001161c:	75 f0                	jne    c001160e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001161e:	eb 0f                	jmp    c001162f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011620:	8d 50 01             	lea    edx,[eax+0x1]
c0011623:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0011627:	47                   	inc    edi
c0011628:	89 d0                	mov    eax,edx
c001162a:	e9 3b ff ff ff       	jmp    c001156a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001162f:	31 c0                	xor    eax,eax
c0011631:	eb 33                	jmp    c0011666 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0011633:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011637:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001163a:	50                   	push   eax
c001163b:	50                   	push   eax
c001163c:	8d 44 24 60          	lea    eax,[esp+0x60]
c0011640:	50                   	push   eax
c0011641:	56                   	push   esi
c0011642:	e8 99 f0 fe ff       	call   c00006e0 <strcmp>
c0011647:	83 c4 10             	add    esp,0x10
c001164a:	85 c0                	test   eax,eax
c001164c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011650:	75 97                	jne    c00115e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011652:	51                   	push   ecx
c0011653:	51                   	push   ecx
c0011654:	52                   	push   edx
c0011655:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001165c:	e8 9f ef fe ff       	call   c0000600 <strcpy>
c0011661:	83 c4 10             	add    esp,0x10
c0011664:	b0 01                	mov    al,0x1
c0011666:	81 c4 2c 01 00 00    	add    esp,0x12c
c001166c:	5b                   	pop    ebx
c001166d:	5e                   	pop    esi
c001166e:	5f                   	pop    edi
c001166f:	5d                   	pop    ebp
c0011670:	c3                   	ret    

c0011671 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0011671:	57                   	push   edi
c0011672:	56                   	push   esi
c0011673:	53                   	push   ebx
c0011674:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001167a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0011681:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0011688:	53                   	push   ebx
c0011689:	e8 b2 ee fe ff       	call   c0000540 <strlen>
c001168e:	89 34 24             	mov    DWORD PTR [esp],esi
c0011691:	89 c7                	mov    edi,eax
c0011693:	e8 a8 ee fe ff       	call   c0000540 <strlen>
c0011698:	83 c4 10             	add    esp,0x10
c001169b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001169f:	3d ff 00 00 00       	cmp    eax,0xff
c00116a4:	0f 87 d3 00 00 00    	ja     c001177d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00116aa:	57                   	push   edi
c00116ab:	57                   	push   edi
c00116ac:	56                   	push   esi
c00116ad:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00116b1:	56                   	push   esi
c00116b2:	e8 49 ef fe ff       	call   c0000600 <strcpy>
c00116b7:	58                   	pop    eax
c00116b8:	5a                   	pop    edx
c00116b9:	68 5a ec 01 c0       	push   0xc001ec5a
c00116be:	56                   	push   esi
c00116bf:	e8 fc f0 fe ff       	call   c00007c0 <strcat>
c00116c4:	59                   	pop    ecx
c00116c5:	5f                   	pop    edi
c00116c6:	53                   	push   ebx
c00116c7:	56                   	push   esi
c00116c8:	e8 f3 f0 fe ff       	call   c00007c0 <strcat>
c00116cd:	58                   	pop    eax
c00116ce:	5a                   	pop    edx
c00116cf:	68 b1 e9 01 c0       	push   0xc001e9b1
c00116d4:	56                   	push   esi
c00116d5:	e8 e6 f0 fe ff       	call   c00007c0 <strcat>
c00116da:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00116e1:	e8 d3 60 ff ff       	call   c00077b9 <malloc>
c00116e6:	83 c4 0c             	add    esp,0xc
c00116e9:	89 c3                	mov    ebx,eax
c00116eb:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c00116f1:	56                   	push   esi
c00116f2:	50                   	push   eax
c00116f3:	e8 72 94 ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c00116f8:	83 c4 10             	add    esp,0x10
c00116fb:	85 db                	test   ebx,ebx
c00116fd:	74 7e                	je     c001177d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00116ff:	51                   	push   ecx
c0011700:	51                   	push   ecx
c0011701:	6a 01                	push   0x1
c0011703:	53                   	push   ebx
c0011704:	e8 21 95 ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c0011709:	83 c4 10             	add    esp,0x10
c001170c:	85 c0                	test   eax,eax
c001170e:	74 08                	je     c0011718 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011710:	83 ec 0c             	sub    esp,0xc
c0011713:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011715:	53                   	push   ebx
c0011716:	eb 5f                	jmp    c0011777 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0011718:	52                   	push   edx
c0011719:	8d 44 24 17          	lea    eax,[esp+0x17]
c001171d:	50                   	push   eax
c001171e:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011722:	50                   	push   eax
c0011723:	53                   	push   ebx
c0011724:	e8 ad 97 ff ff       	call   c000aed6 <File::stat(unsigned long long*, bool*)>
c0011729:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001172d:	83 c4 10             	add    esp,0x10
c0011730:	89 c1                	mov    ecx,eax
c0011732:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0011736:	74 31                	je     c0011769 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0011738:	83 ec 0c             	sub    esp,0xc
c001173b:	50                   	push   eax
c001173c:	e8 78 60 ff ff       	call   c00077b9 <malloc>
c0011741:	89 c6                	mov    esi,eax
c0011743:	58                   	pop    eax
c0011744:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011746:	8d 54 24 20          	lea    edx,[esp+0x20]
c001174a:	52                   	push   edx
c001174b:	56                   	push   esi
c001174c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011750:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011754:	53                   	push   ebx
c0011755:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011758:	83 c4 20             	add    esp,0x20
c001175b:	85 c0                	test   eax,eax
c001175d:	75 0a                	jne    c0011769 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001175f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011763:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011767:	74 18                	je     c0011781 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0011769:	83 ec 0c             	sub    esp,0xc
c001176c:	53                   	push   ebx
c001176d:	e8 16 95 ff ff       	call   c000ac88 <File::close()>
c0011772:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011774:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011777:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001177a:	83 c4 10             	add    esp,0x10
c001177d:	31 c0                	xor    eax,eax
c001177f:	eb 3b                	jmp    c00117bc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0011781:	83 ec 0c             	sub    esp,0xc
c0011784:	53                   	push   ebx
c0011785:	e8 fe 94 ff ff       	call   c000ac88 <File::close()>
c001178a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001178c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001178f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011792:	83 c4 0c             	add    esp,0xc
c0011795:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001179c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00117a3:	56                   	push   esi
c00117a4:	e8 70 fd ff ff       	call   c0011519 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00117a9:	89 34 24             	mov    DWORD PTR [esp],esi
c00117ac:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00117b0:	e8 14 60 ff ff       	call   c00077c9 <free>
c00117b5:	83 c4 10             	add    esp,0x10
c00117b8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00117bc:	81 c4 20 01 00 00    	add    esp,0x120
c00117c2:	5b                   	pop    ebx
c00117c3:	5e                   	pop    esi
c00117c4:	5f                   	pop    edi
c00117c5:	c3                   	ret    

c00117c6 <Reg::getLine(char*, char*, char*)>:
c00117c6:	57                   	push   edi
c00117c7:	56                   	push   esi
c00117c8:	53                   	push   ebx
c00117c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00117d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00117d5:	57                   	push   edi
c00117d6:	56                   	push   esi
c00117d7:	53                   	push   ebx
c00117d8:	68 b6 e9 01 c0       	push   0xc001e9b6
c00117dd:	e8 8f fe ff ff       	call   c0011671 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00117e2:	83 c4 10             	add    esp,0x10
c00117e5:	84 c0                	test   al,al
c00117e7:	75 10                	jne    c00117f9 <Reg::getLine(char*, char*, char*)+0x33>
c00117e9:	57                   	push   edi
c00117ea:	56                   	push   esi
c00117eb:	53                   	push   ebx
c00117ec:	68 db e9 01 c0       	push   0xc001e9db
c00117f1:	e8 7b fe ff ff       	call   c0011671 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00117f6:	83 c4 10             	add    esp,0x10
c00117f9:	5b                   	pop    ebx
c00117fa:	5e                   	pop    esi
c00117fb:	5f                   	pop    edi
c00117fc:	c3                   	ret    

c00117fd <Reg::readInt(char*, char*, int*)>:
c00117fd:	55                   	push   ebp
c00117fe:	57                   	push   edi
c00117ff:	56                   	push   esi
c0011800:	53                   	push   ebx
c0011801:	81 ec f0 00 00 00    	sub    esp,0xf0
c0011807:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001180b:	57                   	push   edi
c001180c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011813:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001181a:	e8 a7 ff ff ff       	call   c00117c6 <Reg::getLine(char*, char*, char*)>
c001181f:	83 c4 10             	add    esp,0x10
c0011822:	84 c0                	test   al,al
c0011824:	0f 84 b3 00 00 00    	je     c00118dd <Reg::readInt(char*, char*, int*)+0xe0>
c001182a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001182e:	80 fa 2b             	cmp    dl,0x2b
c0011831:	74 0c                	je     c001183f <Reg::readInt(char*, char*, int*)+0x42>
c0011833:	80 fa 2d             	cmp    dl,0x2d
c0011836:	75 0e                	jne    c0011846 <Reg::readInt(char*, char*, int*)+0x49>
c0011838:	ba 01 00 00 00       	mov    edx,0x1
c001183d:	eb 0b                	jmp    c001184a <Reg::readInt(char*, char*, int*)+0x4d>
c001183f:	ba 01 00 00 00       	mov    edx,0x1
c0011844:	eb 02                	jmp    c0011848 <Reg::readInt(char*, char*, int*)+0x4b>
c0011846:	31 d2                	xor    edx,edx
c0011848:	31 c0                	xor    eax,eax
c001184a:	be 0a 00 00 00       	mov    esi,0xa
c001184f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0011854:	75 20                	jne    c0011876 <Reg::readInt(char*, char*, int*)+0x79>
c0011856:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001185a:	80 f9 78             	cmp    cl,0x78
c001185d:	75 0a                	jne    c0011869 <Reg::readInt(char*, char*, int*)+0x6c>
c001185f:	83 c2 02             	add    edx,0x2
c0011862:	be 10 00 00 00       	mov    esi,0x10
c0011867:	eb 0d                	jmp    c0011876 <Reg::readInt(char*, char*, int*)+0x79>
c0011869:	80 f9 62             	cmp    cl,0x62
c001186c:	75 08                	jne    c0011876 <Reg::readInt(char*, char*, int*)+0x79>
c001186e:	83 c2 02             	add    edx,0x2
c0011871:	be 02 00 00 00       	mov    esi,0x2
c0011876:	01 d7                	add    edi,edx
c0011878:	31 d2                	xor    edx,edx
c001187a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001187c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0011880:	80 fb 0d             	cmp    bl,0xd
c0011883:	0f 94 c3             	sete   bl
c0011886:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001188b:	0f 94 c1             	sete   cl
c001188e:	08 cb                	or     bl,cl
c0011890:	75 3a                	jne    c00118cc <Reg::readInt(char*, char*, int*)+0xcf>
c0011892:	0f af d6             	imul   edx,esi
c0011895:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001189a:	83 fe 10             	cmp    esi,0x10
c001189d:	75 26                	jne    c00118c5 <Reg::readInt(char*, char*, int*)+0xc8>
c001189f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00118a3:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00118a6:	89 e9                	mov    ecx,ebp
c00118a8:	80 f9 05             	cmp    cl,0x5
c00118ab:	77 06                	ja     c00118b3 <Reg::readInt(char*, char*, int*)+0xb6>
c00118ad:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00118b1:	eb 16                	jmp    c00118c9 <Reg::readInt(char*, char*, int*)+0xcc>
c00118b3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00118b7:	83 e9 61             	sub    ecx,0x61
c00118ba:	80 f9 05             	cmp    cl,0x5
c00118bd:	77 06                	ja     c00118c5 <Reg::readInt(char*, char*, int*)+0xc8>
c00118bf:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00118c3:	eb 04                	jmp    c00118c9 <Reg::readInt(char*, char*, int*)+0xcc>
c00118c5:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00118c9:	47                   	inc    edi
c00118ca:	eb ae                	jmp    c001187a <Reg::readInt(char*, char*, int*)+0x7d>
c00118cc:	84 c0                	test   al,al
c00118ce:	74 02                	je     c00118d2 <Reg::readInt(char*, char*, int*)+0xd5>
c00118d0:	f7 da                	neg    edx
c00118d2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00118d9:	89 10                	mov    DWORD PTR [eax],edx
c00118db:	88 d8                	mov    al,bl
c00118dd:	81 c4 ec 00 00 00    	add    esp,0xec
c00118e3:	5b                   	pop    ebx
c00118e4:	5e                   	pop    esi
c00118e5:	5f                   	pop    edi
c00118e6:	5d                   	pop    ebp
c00118e7:	c3                   	ret    

c00118e8 <Reg::readString(char*, char*, char*, int)>:
c00118e8:	57                   	push   edi
c00118e9:	56                   	push   esi
c00118ea:	53                   	push   ebx
c00118eb:	81 ec d4 00 00 00    	sub    esp,0xd4
c00118f1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00118f8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00118fc:	57                   	push   edi
c00118fd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011904:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001190b:	e8 b6 fe ff ff       	call   c00117c6 <Reg::getLine(char*, char*, char*)>
c0011910:	83 c4 10             	add    esp,0x10
c0011913:	89 c6                	mov    esi,eax
c0011915:	84 c0                	test   al,al
c0011917:	74 44                	je     c001195d <Reg::readString(char*, char*, char*, int)+0x75>
c0011919:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011920:	31 c0                	xor    eax,eax
c0011922:	4a                   	dec    edx
c0011923:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0011926:	84 c9                	test   cl,cl
c0011928:	74 0f                	je     c0011939 <Reg::readString(char*, char*, char*, int)+0x51>
c001192a:	39 c2                	cmp    edx,eax
c001192c:	7e 0b                	jle    c0011939 <Reg::readString(char*, char*, char*, int)+0x51>
c001192e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0011931:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0011936:	40                   	inc    eax
c0011937:	eb ea                	jmp    c0011923 <Reg::readString(char*, char*, char*, int)+0x3b>
c0011939:	83 ec 0c             	sub    esp,0xc
c001193c:	53                   	push   ebx
c001193d:	e8 fe eb fe ff       	call   c0000540 <strlen>
c0011942:	83 c4 10             	add    esp,0x10
c0011945:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001194a:	75 11                	jne    c001195d <Reg::readString(char*, char*, char*, int)+0x75>
c001194c:	83 ec 0c             	sub    esp,0xc
c001194f:	53                   	push   ebx
c0011950:	e8 eb eb fe ff       	call   c0000540 <strlen>
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001195d:	81 c4 d0 00 00 00    	add    esp,0xd0
c0011963:	89 f0                	mov    eax,esi
c0011965:	5b                   	pop    ebx
c0011966:	5e                   	pop    esi
c0011967:	5f                   	pop    edi
c0011968:	c3                   	ret    

c0011969 <Reg::readBool(char*, char*, bool*)>:
c0011969:	83 ec 20             	sub    esp,0x20
c001196c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0011970:	50                   	push   eax
c0011971:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011975:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011979:	e8 7f fe ff ff       	call   c00117fd <Reg::readInt(char*, char*, int*)>
c001197e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0011983:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0011987:	0f 95 02             	setne  BYTE PTR [edx]
c001198a:	83 c4 2c             	add    esp,0x2c
c001198d:	c3                   	ret    

c001198e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001198e:	53                   	push   ebx
c001198f:	83 ec 1c             	sub    esp,0x1c
c0011992:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0011996:	8d 44 24 13          	lea    eax,[esp+0x13]
c001199a:	50                   	push   eax
c001199b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001199f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119a3:	e8 c1 ff ff ff       	call   c0011969 <Reg::readBool(char*, char*, bool*)>
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	84 c0                	test   al,al
c00119ad:	74 04                	je     c00119b3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00119af:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00119b3:	88 d8                	mov    al,bl
c00119b5:	83 c4 18             	add    esp,0x18
c00119b8:	5b                   	pop    ebx
c00119b9:	c3                   	ret    

c00119ba <Reg::readIntWithDefault(char*, char*, int)>:
c00119ba:	53                   	push   ebx
c00119bb:	83 ec 1c             	sub    esp,0x1c
c00119be:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00119c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00119c6:	50                   	push   eax
c00119c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00119cf:	e8 29 fe ff ff       	call   c00117fd <Reg::readInt(char*, char*, int*)>
c00119d4:	83 c4 10             	add    esp,0x10
c00119d7:	84 c0                	test   al,al
c00119d9:	74 04                	je     c00119df <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00119db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119df:	89 d8                	mov    eax,ebx
c00119e1:	83 c4 18             	add    esp,0x18
c00119e4:	5b                   	pop    ebx
c00119e5:	c3                   	ret    

c00119e6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00119e6:	57                   	push   edi
c00119e7:	56                   	push   esi
c00119e8:	56                   	push   esi
c00119e9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00119ed:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00119f1:	56                   	push   esi
c00119f2:	57                   	push   edi
c00119f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119fb:	e8 e8 fe ff ff       	call   c00118e8 <Reg::readString(char*, char*, char*, int)>
c0011a00:	83 c4 10             	add    esp,0x10
c0011a03:	84 c0                	test   al,al
c0011a05:	75 1a                	jne    c0011a21 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0011a07:	51                   	push   ecx
c0011a08:	56                   	push   esi
c0011a09:	6a 00                	push   0x0
c0011a0b:	57                   	push   edi
c0011a0c:	e8 bf ea fe ff       	call   c00004d0 <memset>
c0011a11:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011a14:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a18:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a1a:	83 c4 10             	add    esp,0x10
c0011a1d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011a21:	89 f8                	mov    eax,edi
c0011a23:	5a                   	pop    edx
c0011a24:	5e                   	pop    esi
c0011a25:	5f                   	pop    edi
c0011a26:	c3                   	ret    

c0011a27 <SysEject(regs*)>:
c0011a27:	83 ec 0c             	sub    esp,0xc
c0011a2a:	83 ca ff             	or     edx,0xffffffff
c0011a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a31:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011a34:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a39:	83 e9 41             	sub    ecx,0x41
c0011a3c:	83 f9 19             	cmp    ecx,0x19
c0011a3f:	77 18                	ja     c0011a59 <SysEject(regs*)+0x32>
c0011a41:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0011a48:	85 c9                	test   ecx,ecx
c0011a4a:	74 0d                	je     c0011a59 <SysEject(regs*)+0x32>
c0011a4c:	83 ec 0c             	sub    esp,0xc
c0011a4f:	51                   	push   ecx
c0011a50:	e8 5d b2 ff ff       	call   c000ccb2 <LogicalDisk::eject()>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	99                   	cdq    
c0011a59:	83 c4 0c             	add    esp,0xc
c0011a5c:	c3                   	ret    

c0011a5d <SysExit(regs*)>:
c0011a5d:	83 ec 18             	sub    esp,0x18
c0011a60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011a64:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a67:	e8 24 27 00 00       	call   c0014190 <terminateTask(int)>
c0011a6c:	83 c8 ff             	or     eax,0xffffffff
c0011a6f:	83 c4 1c             	add    esp,0x1c
c0011a72:	89 c2                	mov    edx,eax
c0011a74:	c3                   	ret    

c0011a75 <SysGetCwd(regs*)>:
c0011a75:	83 ec 10             	sub    esp,0x10
c0011a78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011a7c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0011a7f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011a82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a87:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011a8a:	e8 dd 8e ff ff       	call   c000a96c <Fs::getcwd(Process*, char*, int)>
c0011a8f:	83 c4 1c             	add    esp,0x1c
c0011a92:	99                   	cdq    
c0011a93:	c3                   	ret    

c0011a94 <SysGetPID(regs*)>:
c0011a94:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a99:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a9e:	99                   	cdq    
c0011a9f:	c3                   	ret    

c0011aa0 <SysGetRAMData(regs*)>:
c0011aa0:	8b 0d e8 1e 02 c0    	mov    ecx,DWORD PTR ds:0xc0021ee8
c0011aa6:	69 05 e4 1e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0021ee4,0xc8
c0011ab0:	99                   	cdq    
c0011ab1:	f7 f9                	idiv   ecx
c0011ab3:	c1 e0 18             	shl    eax,0x18
c0011ab6:	09 c8                	or     eax,ecx
c0011ab8:	99                   	cdq    
c0011ab9:	c3                   	ret    

c0011aba <SysGetVGAPtr(regs*)>:
c0011aba:	55                   	push   ebp
c0011abb:	57                   	push   edi
c0011abc:	56                   	push   esi
c0011abd:	53                   	push   ebx
c0011abe:	83 ec 18             	sub    esp,0x18
c0011ac1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ac5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011ac8:	e8 c3 21 00 00       	call   c0013c90 <Thr::processFromPID(int)>
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	89 c1                	mov    ecx,eax
c0011ad2:	b8 01 00 00 00       	mov    eax,0x1
c0011ad7:	85 c9                	test   ecx,ecx
c0011ad9:	74 57                	je     c0011b32 <SysGetVGAPtr(regs*)+0x78>
c0011adb:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011ae1:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011ae5:	74 0c                	je     c0011af3 <SysGetVGAPtr(regs*)+0x39>
c0011ae7:	83 ec 0c             	sub    esp,0xc
c0011aea:	55                   	push   ebp
c0011aeb:	e8 07 69 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011af0:	83 c4 10             	add    esp,0x10
c0011af3:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0011af6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011af9:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011afe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b00:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011b03:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b06:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011b0c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b0f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011b12:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0011b18:	50                   	push   eax
c0011b19:	50                   	push   eax
c0011b1a:	68 f6 e9 01 c0       	push   0xc001e9f6
c0011b1f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b22:	05 a8 0f 00 00       	add    eax,0xfa8
c0011b27:	50                   	push   eax
c0011b28:	e8 d3 ea fe ff       	call   c0000600 <strcpy>
c0011b2d:	83 c4 10             	add    esp,0x10
c0011b30:	31 c0                	xor    eax,eax
c0011b32:	83 c4 0c             	add    esp,0xc
c0011b35:	31 d2                	xor    edx,edx
c0011b37:	5b                   	pop    ebx
c0011b38:	5e                   	pop    esi
c0011b39:	5f                   	pop    edi
c0011b3a:	5d                   	pop    ebp
c0011b3b:	c3                   	ret    

c0011b3c <SysLoadDLL(regs*)>:
c0011b3c:	56                   	push   esi
c0011b3d:	53                   	push   ebx
c0011b3e:	31 d2                	xor    edx,edx
c0011b40:	51                   	push   ecx
c0011b41:	b8 01 00 00 00       	mov    eax,0x1
c0011b46:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011b4a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0011b4e:	0f 84 8c 00 00 00    	je     c0011be0 <SysLoadDLL(regs*)+0xa4>
c0011b54:	83 ec 0c             	sub    esp,0xc
c0011b57:	68 14 01 00 00       	push   0x114
c0011b5c:	e8 58 5c ff ff       	call   c00077b9 <malloc>
c0011b61:	83 c4 0c             	add    esp,0xc
c0011b64:	89 c3                	mov    ebx,eax
c0011b66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b6b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011b6e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011b71:	53                   	push   ebx
c0011b72:	e8 f3 8f ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c0011b77:	83 c4 10             	add    esp,0x10
c0011b7a:	31 d2                	xor    edx,edx
c0011b7c:	b8 02 00 00 00       	mov    eax,0x2
c0011b81:	85 db                	test   ebx,ebx
c0011b83:	74 5b                	je     c0011be0 <SysLoadDLL(regs*)+0xa4>
c0011b85:	83 ec 0c             	sub    esp,0xc
c0011b88:	53                   	push   ebx
c0011b89:	e8 0a 93 ff ff       	call   c000ae98 <File::exists()>
c0011b8e:	83 c4 10             	add    esp,0x10
c0011b91:	84 c0                	test   al,al
c0011b93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011b95:	75 11                	jne    c0011ba8 <SysLoadDLL(regs*)+0x6c>
c0011b97:	83 ec 0c             	sub    esp,0xc
c0011b9a:	53                   	push   ebx
c0011b9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011b9e:	83 c4 10             	add    esp,0x10
c0011ba1:	b8 03 00 00 00       	mov    eax,0x3
c0011ba6:	eb 36                	jmp    c0011bde <SysLoadDLL(regs*)+0xa2>
c0011ba8:	83 ec 0c             	sub    esp,0xc
c0011bab:	53                   	push   ebx
c0011bac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011baf:	58                   	pop    eax
c0011bb0:	5a                   	pop    edx
c0011bb1:	6a 00                	push   0x0
c0011bb3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0011bb6:	e8 86 12 00 00       	call   c0012e41 <Thr::loadDLL(char const*, bool)>
c0011bbb:	83 c4 10             	add    esp,0x10
c0011bbe:	89 c1                	mov    ecx,eax
c0011bc0:	31 d2                	xor    edx,edx
c0011bc2:	b8 04 00 00 00       	mov    eax,0x4
c0011bc7:	85 c9                	test   ecx,ecx
c0011bc9:	74 15                	je     c0011be0 <SysLoadDLL(regs*)+0xa4>
c0011bcb:	53                   	push   ebx
c0011bcc:	53                   	push   ebx
c0011bcd:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0011bd3:	51                   	push   ecx
c0011bd4:	e8 99 14 00 00       	call   c0013072 <Thr::executeDLL(unsigned long, void*)>
c0011bd9:	83 c4 10             	add    esp,0x10
c0011bdc:	31 c0                	xor    eax,eax
c0011bde:	31 d2                	xor    edx,edx
c0011be0:	59                   	pop    ecx
c0011be1:	5b                   	pop    ebx
c0011be2:	5e                   	pop    esi
c0011be3:	c3                   	ret    

c0011be4 <SysRead(regs*)>:
c0011be4:	57                   	push   edi
c0011be5:	56                   	push   esi
c0011be6:	53                   	push   ebx
c0011be7:	83 ec 10             	sub    esp,0x10
c0011bea:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bee:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011bf1:	83 f8 02             	cmp    eax,0x2
c0011bf4:	77 10                	ja     c0011c06 <SysRead(regs*)+0x22>
c0011bf6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bfb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bfe:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011c04:	eb 0e                	jmp    c0011c14 <SysRead(regs*)+0x30>
c0011c06:	83 ec 0c             	sub    esp,0xc
c0011c09:	50                   	push   eax
c0011c0a:	e8 20 75 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011c0f:	83 c4 10             	add    esp,0x10
c0011c12:	89 c1                	mov    ecx,eax
c0011c14:	83 c8 ff             	or     eax,0xffffffff
c0011c17:	85 c9                	test   ecx,ecx
c0011c19:	89 c2                	mov    edx,eax
c0011c1b:	74 28                	je     c0011c45 <SysRead(regs*)+0x61>
c0011c1d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011c25:	31 ff                	xor    edi,edi
c0011c27:	83 ec 0c             	sub    esp,0xc
c0011c2a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011c2c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011c30:	52                   	push   edx
c0011c31:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011c34:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011c37:	57                   	push   edi
c0011c38:	56                   	push   esi
c0011c39:	51                   	push   ecx
c0011c3a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011c3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c41:	83 c4 20             	add    esp,0x20
c0011c44:	99                   	cdq    
c0011c45:	83 c4 10             	add    esp,0x10
c0011c48:	5b                   	pop    ebx
c0011c49:	5e                   	pop    esi
c0011c4a:	5f                   	pop    edi
c0011c4b:	c3                   	ret    

c0011c4c <SysRegisterSignal(regs*)>:
c0011c4c:	83 ec 18             	sub    esp,0x18
c0011c4f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c53:	6a 00                	push   0x0
c0011c55:	6a 00                	push   0x0
c0011c57:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011c5a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011c5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c62:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c65:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c6b:	e8 bd e9 ff ff       	call   c001062d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0011c70:	83 c4 2c             	add    esp,0x2c
c0011c73:	99                   	cdq    
c0011c74:	c3                   	ret    

c0011c75 <SysSbrk(regs*)>:
c0011c75:	56                   	push   esi
c0011c76:	53                   	push   ebx
c0011c77:	83 ec 0c             	sub    esp,0xc
c0011c7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011c7e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011c81:	68 00 ea 01 c0       	push   0xc001ea00
c0011c86:	e8 69 89 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0011c8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c90:	8b 5b 20             	mov    ebx,DWORD PTR [ebx+0x20]
c0011c93:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c96:	83 c4 10             	add    esp,0x10
c0011c99:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0011c9f:	85 db                	test   ebx,ebx
c0011ca1:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0011ca4:	74 02                	je     c0011ca8 <SysSbrk(regs*)+0x33>
c0011ca6:	79 06                	jns    c0011cae <SysSbrk(regs*)+0x39>
c0011ca8:	89 f0                	mov    eax,esi
c0011caa:	31 d2                	xor    edx,edx
c0011cac:	eb 2a                	jmp    c0011cd8 <SysSbrk(regs*)+0x63>
c0011cae:	83 c8 ff             	or     eax,0xffffffff
c0011cb1:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0011cb7:	89 c2                	mov    edx,eax
c0011cb9:	77 1d                	ja     c0011cd8 <SysSbrk(regs*)+0x63>
c0011cbb:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0011cc1:	50                   	push   eax
c0011cc2:	c1 ea 0c             	shr    edx,0xc
c0011cc5:	68 07 0c 00 00       	push   0xc07
c0011cca:	52                   	push   edx
c0011ccb:	51                   	push   ecx
c0011ccc:	e8 2b 7d ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0011cd1:	89 f0                	mov    eax,esi
c0011cd3:	31 d2                	xor    edx,edx
c0011cd5:	83 c4 10             	add    esp,0x10
c0011cd8:	59                   	pop    ecx
c0011cd9:	5b                   	pop    ebx
c0011cda:	5e                   	pop    esi
c0011cdb:	c3                   	ret    

c0011cdc <SysSetCwd(regs*)>:
c0011cdc:	83 ec 14             	sub    esp,0x14
c0011cdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ce3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0011ce6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ceb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011cee:	e8 44 92 ff ff       	call   c000af37 <Fs::setcwd(Process*, char*)>
c0011cf3:	83 c4 1c             	add    esp,0x1c
c0011cf6:	99                   	cdq    
c0011cf7:	c3                   	ret    

c0011cf8 <SysSetTime(regs*)>:
c0011cf8:	55                   	push   ebp
c0011cf9:	31 c9                	xor    ecx,ecx
c0011cfb:	57                   	push   edi
c0011cfc:	bd 0c 00 00 00       	mov    ebp,0xc
c0011d01:	56                   	push   esi
c0011d02:	53                   	push   ebx
c0011d03:	31 db                	xor    ebx,ebx
c0011d05:	83 ec 10             	sub    esp,0x10
c0011d08:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011d0c:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011d0f:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0011d12:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0011d15:	89 c2                	mov    edx,eax
c0011d17:	66 81 ef 6c 07       	sub    di,0x76c
c0011d1c:	83 e2 1f             	and    edx,0x1f
c0011d1f:	c1 e7 10             	shl    edi,0x10
c0011d22:	42                   	inc    edx
c0011d23:	c1 e8 05             	shr    eax,0x5
c0011d26:	88 d1                	mov    cl,dl
c0011d28:	31 d2                	xor    edx,edx
c0011d2a:	f7 f5                	div    ebp
c0011d2c:	89 dd                	mov    ebp,ebx
c0011d2e:	88 d5                	mov    ch,dl
c0011d30:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0011d36:	0f b7 c1             	movzx  eax,cx
c0011d39:	31 d2                	xor    edx,edx
c0011d3b:	09 f8                	or     eax,edi
c0011d3d:	bf 3c 00 00 00       	mov    edi,0x3c
c0011d42:	89 c1                	mov    ecx,eax
c0011d44:	89 f0                	mov    eax,esi
c0011d46:	f7 f7                	div    edi
c0011d48:	c1 e2 10             	shl    edx,0x10
c0011d4b:	09 d5                	or     ebp,edx
c0011d4d:	31 d2                	xor    edx,edx
c0011d4f:	89 eb                	mov    ebx,ebp
c0011d51:	f7 f7                	div    edi
c0011d53:	bf 10 0e 00 00       	mov    edi,0xe10
c0011d58:	88 d7                	mov    bh,dl
c0011d5a:	89 f0                	mov    eax,esi
c0011d5c:	31 d2                	xor    edx,edx
c0011d5e:	f7 f7                	div    edi
c0011d60:	bf 18 00 00 00       	mov    edi,0x18
c0011d65:	31 d2                	xor    edx,edx
c0011d67:	f7 f7                	div    edi
c0011d69:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0011d6e:	88 d3                	mov    bl,dl
c0011d70:	53                   	push   ebx
c0011d71:	51                   	push   ecx
c0011d72:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0011d78:	e8 cb 99 ff ff       	call   c000b748 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0011d7d:	83 c4 1c             	add    esp,0x1c
c0011d80:	83 f0 01             	xor    eax,0x1
c0011d83:	5b                   	pop    ebx
c0011d84:	0f b6 c0             	movzx  eax,al
c0011d87:	5e                   	pop    esi
c0011d88:	31 d2                	xor    edx,edx
c0011d8a:	5f                   	pop    edi
c0011d8b:	5d                   	pop    ebp
c0011d8c:	c3                   	ret    

c0011d8d <SysTimezone(regs*)>:
c0011d8d:	53                   	push   ebx
c0011d8e:	83 ec 08             	sub    esp,0x8
c0011d91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011d95:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0011d99:	75 17                	jne    c0011db2 <SysTimezone(regs*)+0x25>
c0011d9b:	83 ec 0c             	sub    esp,0xc
c0011d9e:	68 0c ea 01 c0       	push   0xc001ea0c
c0011da3:	e8 4c 88 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0011da8:	83 c8 ff             	or     eax,0xffffffff
c0011dab:	83 c4 10             	add    esp,0x10
c0011dae:	89 c2                	mov    edx,eax
c0011db0:	eb 20                	jmp    c0011dd2 <SysTimezone(regs*)+0x45>
c0011db2:	83 ec 0c             	sub    esp,0xc
c0011db5:	68 21 ea 01 c0       	push   0xc001ea21
c0011dba:	e8 35 88 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0011dbf:	58                   	pop    eax
c0011dc0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011dc3:	e8 dc 96 ff ff       	call   c000b4a4 <User::loadClockSettings(int)>
c0011dc8:	83 c4 10             	add    esp,0x10
c0011dcb:	b8 01 00 00 00       	mov    eax,0x1
c0011dd0:	31 d2                	xor    edx,edx
c0011dd2:	83 c4 08             	add    esp,0x8
c0011dd5:	5b                   	pop    ebx
c0011dd6:	c3                   	ret    

c0011dd7 <SysWrite(regs*)>:
c0011dd7:	57                   	push   edi
c0011dd8:	56                   	push   esi
c0011dd9:	53                   	push   ebx
c0011dda:	83 ec 10             	sub    esp,0x10
c0011ddd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011de1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011de4:	83 f8 02             	cmp    eax,0x2
c0011de7:	77 10                	ja     c0011df9 <SysWrite(regs*)+0x22>
c0011de9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011df1:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011df7:	eb 0e                	jmp    c0011e07 <SysWrite(regs*)+0x30>
c0011df9:	83 ec 0c             	sub    esp,0xc
c0011dfc:	50                   	push   eax
c0011dfd:	e8 2d 73 ff ff       	call   c000912f <getFromFileDescriptor(int)>
c0011e02:	83 c4 10             	add    esp,0x10
c0011e05:	89 c1                	mov    ecx,eax
c0011e07:	83 c8 ff             	or     eax,0xffffffff
c0011e0a:	85 c9                	test   ecx,ecx
c0011e0c:	89 c2                	mov    edx,eax
c0011e0e:	74 28                	je     c0011e38 <SysWrite(regs*)+0x61>
c0011e10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e18:	31 ff                	xor    edi,edi
c0011e1a:	83 ec 0c             	sub    esp,0xc
c0011e1d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011e1f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011e23:	52                   	push   edx
c0011e24:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011e27:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011e2a:	57                   	push   edi
c0011e2b:	56                   	push   esi
c0011e2c:	51                   	push   ecx
c0011e2d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011e30:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e34:	83 c4 20             	add    esp,0x20
c0011e37:	99                   	cdq    
c0011e38:	83 c4 10             	add    esp,0x10
c0011e3b:	5b                   	pop    ebx
c0011e3c:	5e                   	pop    esi
c0011e3d:	5f                   	pop    edi
c0011e3e:	c3                   	ret    

c0011e3f <SysWsbe(regs*)>:
c0011e3f:	57                   	push   edi
c0011e40:	b9 0b 00 00 00       	mov    ecx,0xb
c0011e45:	56                   	push   esi
c0011e46:	be 60 ea 01 c0       	mov    esi,0xc001ea60
c0011e4b:	53                   	push   ebx
c0011e4c:	83 ec 30             	sub    esp,0x30
c0011e4f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011e53:	fc                   	cld    
c0011e54:	83 ec 0c             	sub    esp,0xc
c0011e57:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011e59:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011e5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e62:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e65:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0011e6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e6d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0011e70:	57                   	push   edi
c0011e71:	e8 ca e6 fe ff       	call   c0000540 <strlen>
c0011e76:	5a                   	pop    edx
c0011e77:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0011e7b:	52                   	push   edx
c0011e7c:	31 d2                	xor    edx,edx
c0011e7e:	57                   	push   edi
c0011e7f:	52                   	push   edx
c0011e80:	50                   	push   eax
c0011e81:	56                   	push   esi
c0011e82:	ff d3                	call   ebx
c0011e84:	83 c4 14             	add    esp,0x14
c0011e87:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011e8b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0011e8e:	e8 fd 22 00 00       	call   c0014190 <terminateTask(int)>
c0011e93:	83 c4 40             	add    esp,0x40
c0011e96:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011e9b:	5b                   	pop    ebx
c0011e9c:	31 d2                	xor    edx,edx
c0011e9e:	5e                   	pop    esi
c0011e9f:	5f                   	pop    edi
c0011ea0:	c3                   	ret    

c0011ea1 <SysYield(regs*)>:
c0011ea1:	83 ec 0c             	sub    esp,0xc
c0011ea4:	fa                   	cli    
c0011ea5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011eab:	e8 bc 19 00 00       	call   c001386c <schedule()>
c0011eb0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0011eb5:	48                   	dec    eax
c0011eb6:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0011ebb:	75 01                	jne    c0011ebe <SysYield(regs*)+0x1d>
c0011ebd:	fb                   	sti    
c0011ebe:	31 c0                	xor    eax,eax
c0011ec0:	31 d2                	xor    edx,edx
c0011ec2:	83 c4 0c             	add    esp,0xc
c0011ec5:	c3                   	ret    

c0011ec6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011ec6:	55                   	push   ebp
c0011ec7:	57                   	push   edi
c0011ec8:	56                   	push   esi
c0011ec9:	53                   	push   ebx
c0011eca:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011ed0:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011ed8:	0f 95 c2             	setne  dl
c0011edb:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011ee3:	0f 94 c0             	sete   al
c0011ee6:	84 c2                	test   dl,al
c0011ee8:	74 34                	je     c0011f1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011eea:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011ef5:	74 27                	je     c0011f1e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011ef7:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011efe:	05 00 10 00 00       	add    eax,0x1000
c0011f03:	89 c1                	mov    ecx,eax
c0011f05:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f0a:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011f10:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011f17:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011f1e:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011f25:	83 ec 0c             	sub    esp,0xc
c0011f28:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011f2e:	6a 01                	push   0x1
c0011f30:	e8 50 73 ff ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0011f35:	83 c4 10             	add    esp,0x10
c0011f38:	89 c3                	mov    ebx,eax
c0011f3a:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011f40:	0f 86 25 01 00 00    	jbe    c001206b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011f46:	c1 ee 0c             	shr    esi,0xc
c0011f49:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011f50:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011f54:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011f5c:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011f63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f67:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011f6e:	29 ef                	sub    edi,ebp
c0011f70:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011f74:	0f 83 f8 00 00 00    	jae    c0012072 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011f7a:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011f80:	76 05                	jbe    c0011f87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011f82:	bf 00 10 00 00       	mov    edi,0x1000
c0011f87:	83 ec 0c             	sub    esp,0xc
c0011f8a:	31 d2                	xor    edx,edx
c0011f8c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011f93:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011f95:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011f99:	50                   	push   eax
c0011f9a:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011f9e:	56                   	push   esi
c0011f9f:	52                   	push   edx
c0011fa0:	57                   	push   edi
c0011fa1:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011fa8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011fab:	83 c4 20             	add    esp,0x20
c0011fae:	85 c0                	test   eax,eax
c0011fb0:	75 06                	jne    c0011fb8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011fb2:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011fb6:	74 13                	je     c0011fcb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011fb8:	83 ec 0c             	sub    esp,0xc
c0011fbb:	53                   	push   ebx
c0011fbc:	e8 b8 75 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0011fc1:	83 c4 10             	add    esp,0x10
c0011fc4:	31 c0                	xor    eax,eax
c0011fc6:	e9 7c 01 00 00       	jmp    c0012147 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011fcb:	fa                   	cli    
c0011fcc:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0011fd2:	e8 be 5a ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011fd7:	6a 07                	push   0x7
c0011fd9:	89 c7                	mov    edi,eax
c0011fdb:	53                   	push   ebx
c0011fdc:	50                   	push   eax
c0011fdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fe2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fe5:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011feb:	e8 08 79 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ff0:	83 c4 0c             	add    esp,0xc
c0011ff3:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011ffa:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012000:	6a 00                	push   0x0
c0012002:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012007:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001200a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0012010:	e8 55 77 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c0012015:	58                   	pop    eax
c0012016:	5a                   	pop    edx
c0012017:	68 07 0c 00 00       	push   0xc07
c001201c:	55                   	push   ebp
c001201d:	57                   	push   edi
c001201e:	89 df                	mov    edi,ebx
c0012020:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0012027:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001202d:	6a 00                	push   0x0
c001202f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012034:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012037:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001203d:	e8 ee 7c ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012042:	b9 00 10 00 00       	mov    ecx,0x1000
c0012047:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012049:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001204e:	83 c4 20             	add    esp,0x20
c0012051:	48                   	dec    eax
c0012052:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012057:	85 c0                	test   eax,eax
c0012059:	75 01                	jne    c001205c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c001205b:	fb                   	sti    
c001205c:	81 c5 00 10 00 00    	add    ebp,0x1000
c0012062:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0012066:	e9 f1 fe ff ff       	jmp    c0011f5c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c001206b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0012072:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0012079:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001207f:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0012085:	0f 86 ae 00 00 00    	jbe    c0012139 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c001208b:	fa                   	cli    
c001208c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0012092:	c1 ee 0c             	shr    esi,0xc
c0012095:	51                   	push   ecx
c0012096:	31 ff                	xor    edi,edi
c0012098:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001209f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120a5:	6a 00                	push   0x0
c00120a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120af:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120b5:	e8 b0 76 ff ff       	call   c000976a <VAS::mapOtherVASIn(bool, VAS*)>
c00120ba:	83 c4 10             	add    esp,0x10
c00120bd:	e8 d3 59 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00120c2:	47                   	inc    edi
c00120c3:	6a 07                	push   0x7
c00120c5:	53                   	push   ebx
c00120c6:	50                   	push   eax
c00120c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120cb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00120d1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00120d4:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00120da:	e8 19 78 ff ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120df:	58                   	pop    eax
c00120e0:	5a                   	pop    edx
c00120e1:	68 07 0c 00 00       	push   0xc07
c00120e6:	55                   	push   ebp
c00120e7:	81 c5 00 10 00 00    	add    ebp,0x1000
c00120ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120f1:	50                   	push   eax
c00120f2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00120f9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00120ff:	6a 00                	push   0x0
c0012101:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012106:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012109:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001210f:	e8 1c 7c ff ff       	call   c0009d30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0012114:	83 c4 1c             	add    esp,0x1c
c0012117:	68 00 10 00 00       	push   0x1000
c001211c:	6a 00                	push   0x0
c001211e:	53                   	push   ebx
c001211f:	e8 ac e3 fe ff       	call   c00004d0 <memset>
c0012124:	83 c4 10             	add    esp,0x10
c0012127:	39 fe                	cmp    esi,edi
c0012129:	77 92                	ja     c00120bd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c001212b:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0012130:	48                   	dec    eax
c0012131:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0012136:	75 01                	jne    c0012139 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0012138:	fb                   	sti    
c0012139:	83 ec 0c             	sub    esp,0xc
c001213c:	53                   	push   ebx
c001213d:	e8 37 74 ff ff       	call   c0009579 <Virt::freeKernelVirtualPages(unsigned long)>
c0012142:	83 c4 10             	add    esp,0x10
c0012145:	b0 01                	mov    al,0x1
c0012147:	81 c4 2c 10 00 00    	add    esp,0x102c
c001214d:	5b                   	pop    ebx
c001214e:	5e                   	pop    esi
c001214f:	5f                   	pop    edi
c0012150:	5d                   	pop    ebp
c0012151:	c3                   	ret    

c0012152 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0012152:	55                   	push   ebp
c0012153:	57                   	push   edi
c0012154:	56                   	push   esi
c0012155:	53                   	push   ebx
c0012156:	83 ec 48             	sub    esp,0x48
c0012159:	68 14 01 00 00       	push   0x114
c001215e:	e8 56 56 ff ff       	call   c00077b9 <malloc>
c0012163:	83 c4 0c             	add    esp,0xc
c0012166:	89 c6                	mov    esi,eax
c0012168:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001216c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012170:	50                   	push   eax
c0012171:	e8 f4 89 ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c0012176:	58                   	pop    eax
c0012177:	5a                   	pop    edx
c0012178:	6a 01                	push   0x1
c001217a:	56                   	push   esi
c001217b:	e8 aa 8a ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c0012180:	83 c4 10             	add    esp,0x10
c0012183:	85 c0                	test   eax,eax
c0012185:	0f 85 47 01 00 00    	jne    c00122d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001218b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0012193:	83 ec 0c             	sub    esp,0xc
c0012196:	6a 34                	push   0x34
c0012198:	e8 1c 56 ff ff       	call   c00077b9 <malloc>
c001219d:	89 c3                	mov    ebx,eax
c001219f:	58                   	pop    eax
c00121a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00121a2:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00121a6:	57                   	push   edi
c00121a7:	53                   	push   ebx
c00121a8:	6a 00                	push   0x0
c00121aa:	6a 34                	push   0x34
c00121ac:	56                   	push   esi
c00121ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00121b0:	83 c4 20             	add    esp,0x20
c00121b3:	85 c0                	test   eax,eax
c00121b5:	0f 85 17 01 00 00    	jne    c00122d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121bb:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00121c1:	0f 85 0b 01 00 00    	jne    c00122d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00121ca:	85 c0                	test   eax,eax
c00121cc:	0f 84 00 01 00 00    	je     c00122d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121d2:	31 d2                	xor    edx,edx
c00121d4:	55                   	push   ebp
c00121d5:	52                   	push   edx
c00121d6:	50                   	push   eax
c00121d7:	56                   	push   esi
c00121d8:	e8 0b 8b ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c00121dd:	83 c4 10             	add    esp,0x10
c00121e0:	85 c0                	test   eax,eax
c00121e2:	0f 85 ea 00 00 00    	jne    c00122d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00121e8:	83 ec 0c             	sub    esp,0xc
c00121eb:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00121ee:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00121f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00121f6:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00121fa:	0f af c2             	imul   eax,edx
c00121fd:	50                   	push   eax
c00121fe:	e8 b6 55 ff ff       	call   c00077b9 <malloc>
c0012203:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012205:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012209:	89 3c 24             	mov    DWORD PTR [esp],edi
c001220c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012210:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0012214:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0012218:	0f af c2             	imul   eax,edx
c001221b:	99                   	cdq    
c001221c:	52                   	push   edx
c001221d:	50                   	push   eax
c001221e:	56                   	push   esi
c001221f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012222:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0012225:	83 c4 20             	add    esp,0x20
c0012228:	85 c0                	test   eax,eax
c001222a:	0f 84 a2 00 00 00    	je     c00122d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012230:	31 d2                	xor    edx,edx
c0012232:	51                   	push   ecx
c0012233:	52                   	push   edx
c0012234:	50                   	push   eax
c0012235:	56                   	push   esi
c0012236:	e8 ad 8a ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c001223b:	83 c4 10             	add    esp,0x10
c001223e:	85 c0                	test   eax,eax
c0012240:	0f 85 8c 00 00 00    	jne    c00122d2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0012246:	83 ec 0c             	sub    esp,0xc
c0012249:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001224d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012251:	31 ed                	xor    ebp,ebp
c0012253:	0f af c2             	imul   eax,edx
c0012256:	50                   	push   eax
c0012257:	e8 5d 55 ff ff       	call   c00077b9 <malloc>
c001225c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001225e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012262:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012269:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001226d:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0012271:	0f af c2             	imul   eax,edx
c0012274:	99                   	cdq    
c0012275:	52                   	push   edx
c0012276:	50                   	push   eax
c0012277:	56                   	push   esi
c0012278:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001227b:	83 c4 20             	add    esp,0x20
c001227e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012286:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001228a:	0f 86 80 00 00 00    	jbe    c0012310 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012290:	0f b7 fd             	movzx  edi,bp
c0012293:	c1 e7 05             	shl    edi,0x5
c0012296:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001229a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001229d:	75 6b                	jne    c001230a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001229f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00122a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122a6:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00122a9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00122ad:	52                   	push   edx
c00122ae:	31 d2                	xor    edx,edx
c00122b0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00122b3:	52                   	push   edx
c00122b4:	50                   	push   eax
c00122b5:	56                   	push   esi
c00122b6:	e8 2d 8a ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c00122bb:	83 c4 10             	add    esp,0x10
c00122be:	85 c0                	test   eax,eax
c00122c0:	74 17                	je     c00122d9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00122c2:	83 ec 0c             	sub    esp,0xc
c00122c5:	68 8c ea 01 c0       	push   0xc001ea8c
c00122ca:	e8 25 83 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c00122cf:	83 c4 10             	add    esp,0x10
c00122d2:	31 c0                	xor    eax,eax
c00122d4:	e9 87 00 00 00       	jmp    c0012360 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00122d9:	83 ec 0c             	sub    esp,0xc
c00122dc:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00122df:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00122e2:	50                   	push   eax
c00122e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00122e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00122eb:	56                   	push   esi
c00122ec:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00122f0:	e8 d1 fb ff ff       	call   c0011ec6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00122f5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122f9:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00122fd:	83 c4 20             	add    esp,0x20
c0012300:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0012304:	73 04                	jae    c001230a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012306:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001230a:	45                   	inc    ebp
c001230b:	e9 76 ff ff ff       	jmp    c0012286 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0012310:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0012314:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001231c:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0012322:	83 ec 0c             	sub    esp,0xc
c0012325:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c001232b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012330:	05 00 10 00 00       	add    eax,0x1000
c0012335:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012338:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001233c:	e8 88 54 ff ff       	call   c00077c9 <free>
c0012341:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012344:	e8 80 54 ff ff       	call   c00077c9 <free>
c0012349:	58                   	pop    eax
c001234a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001234e:	e8 76 54 ff ff       	call   c00077c9 <free>
c0012353:	89 34 24             	mov    DWORD PTR [esp],esi
c0012356:	e8 2d 89 ff ff       	call   c000ac88 <File::close()>
c001235b:	83 c4 10             	add    esp,0x10
c001235e:	b0 01                	mov    al,0x1
c0012360:	83 c4 3c             	add    esp,0x3c
c0012363:	5b                   	pop    ebx
c0012364:	5e                   	pop    esi
c0012365:	5f                   	pop    edi
c0012366:	5d                   	pop    ebp
c0012367:	c3                   	ret    

c0012368 <Thr::runtimeReferenceHelper()>:
c0012368:	83 ec 18             	sub    esp,0x18
c001236b:	68 94 ea 01 c0       	push   0xc001ea94
c0012370:	e8 7f 82 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0012375:	fa                   	cli    
c0012376:	83 c4 10             	add    esp,0x10
c0012379:	eb fe                	jmp    c0012379 <Thr::runtimeReferenceHelper()+0x11>

c001237b <Thr::getAddressOfKernelSymbol(char const*)>:
c001237b:	57                   	push   edi
c001237c:	56                   	push   esi
c001237d:	53                   	push   ebx
c001237e:	31 db                	xor    ebx,ebx
c0012380:	39 1d 40 51 02 c0    	cmp    DWORD PTR ds:0xc0025140,ebx
c0012386:	7e 3c                	jle    c00123c4 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012388:	8b 34 9d c0 50 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdaf40]
c001238f:	31 ff                	xor    edi,edi
c0012391:	39 3c 9d c0 4f 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdb040],edi
c0012398:	7e 27                	jle    c00123c1 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001239a:	50                   	push   eax
c001239b:	50                   	push   eax
c001239c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123a0:	8b 06                	mov    eax,DWORD PTR [esi]
c00123a2:	03 04 9d 40 50 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdafc0]
c00123a9:	50                   	push   eax
c00123aa:	e8 31 e3 fe ff       	call   c00006e0 <strcmp>
c00123af:	83 c4 10             	add    esp,0x10
c00123b2:	85 c0                	test   eax,eax
c00123b4:	75 05                	jne    c00123bb <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00123b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00123b9:	eb 0b                	jmp    c00123c6 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00123bb:	83 c6 10             	add    esi,0x10
c00123be:	47                   	inc    edi
c00123bf:	eb d0                	jmp    c0012391 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00123c1:	43                   	inc    ebx
c00123c2:	eb bc                	jmp    c0012380 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00123c4:	31 c0                	xor    eax,eax
c00123c6:	5b                   	pop    ebx
c00123c7:	5e                   	pop    esi
c00123c8:	5f                   	pop    edi
c00123c9:	c3                   	ret    

c00123ca <Thr::loadKernelSymbolTable(char const*)>:
c00123ca:	55                   	push   ebp
c00123cb:	57                   	push   edi
c00123cc:	56                   	push   esi
c00123cd:	53                   	push   ebx
c00123ce:	83 ec 68             	sub    esp,0x68
c00123d1:	8b 35 90 51 02 c0    	mov    esi,DWORD PTR ds:0xc0025190
c00123d7:	68 14 01 00 00       	push   0x114
c00123dc:	e8 d8 53 ff ff       	call   c00077b9 <malloc>
c00123e1:	83 c4 0c             	add    esp,0xc
c00123e4:	89 c3                	mov    ebx,eax
c00123e6:	56                   	push   esi
c00123e7:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00123eb:	50                   	push   eax
c00123ec:	e8 79 87 ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c00123f1:	5e                   	pop    esi
c00123f2:	5f                   	pop    edi
c00123f3:	6a 01                	push   0x1
c00123f5:	53                   	push   ebx
c00123f6:	e8 2f 88 ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c00123fb:	83 c4 10             	add    esp,0x10
c00123fe:	85 c0                	test   eax,eax
c0012400:	74 0a                	je     c001240c <Thr::loadKernelSymbolTable(char const*)+0x42>
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	68 b6 ea 01 c0       	push   0xc001eab6
c001240a:	eb 34                	jmp    c0012440 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001240c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0012414:	83 ec 0c             	sub    esp,0xc
c0012417:	6a 34                	push   0x34
c0012419:	e8 9b 53 ff ff       	call   c00077b9 <malloc>
c001241e:	59                   	pop    ecx
c001241f:	89 c7                	mov    edi,eax
c0012421:	8d 74 24 34          	lea    esi,[esp+0x34]
c0012425:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012427:	56                   	push   esi
c0012428:	57                   	push   edi
c0012429:	6a 00                	push   0x0
c001242b:	6a 34                	push   0x34
c001242d:	53                   	push   ebx
c001242e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012431:	83 c4 20             	add    esp,0x20
c0012434:	85 c0                	test   eax,eax
c0012436:	74 17                	je     c001244f <Thr::loadKernelSymbolTable(char const*)+0x85>
c0012438:	83 ec 0c             	sub    esp,0xc
c001243b:	68 cd ea 01 c0       	push   0xc001eacd
c0012440:	e8 32 de ff ff       	call   c0010277 <KePanic(char const*)>
c0012445:	83 c4 10             	add    esp,0x10
c0012448:	31 c0                	xor    eax,eax
c001244a:	e9 31 02 00 00       	jmp    c0012680 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001244f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012455:	75 e1                	jne    c0012438 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012457:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001245a:	85 c0                	test   eax,eax
c001245c:	74 da                	je     c0012438 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001245e:	52                   	push   edx
c001245f:	31 d2                	xor    edx,edx
c0012461:	52                   	push   edx
c0012462:	50                   	push   eax
c0012463:	53                   	push   ebx
c0012464:	e8 7f 88 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c0012469:	83 c4 10             	add    esp,0x10
c001246c:	85 c0                	test   eax,eax
c001246e:	75 c8                	jne    c0012438 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012470:	83 ec 0c             	sub    esp,0xc
c0012473:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012477:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001247b:	31 ed                	xor    ebp,ebp
c001247d:	0f af c2             	imul   eax,edx
c0012480:	50                   	push   eax
c0012481:	e8 33 53 ff ff       	call   c00077b9 <malloc>
c0012486:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012488:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001248c:	89 34 24             	mov    DWORD PTR [esp],esi
c001248f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012493:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012497:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001249b:	0f af c2             	imul   eax,edx
c001249e:	99                   	cdq    
c001249f:	52                   	push   edx
c00124a0:	50                   	push   eax
c00124a1:	53                   	push   ebx
c00124a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00124a5:	83 c4 20             	add    esp,0x20
c00124a8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00124b0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00124b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00124c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00124c8:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00124cc:	0f 86 aa 00 00 00    	jbe    c001257c <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00124d2:	0f b7 f5             	movzx  esi,bp
c00124d5:	6b f6 28             	imul   esi,esi,0x28
c00124d8:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00124dc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00124df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124e3:	50                   	push   eax
c00124e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00124e8:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00124ec:	8b 16                	mov    edx,DWORD PTR [esi]
c00124ee:	6b c0 28             	imul   eax,eax,0x28
c00124f1:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00124f5:	89 d0                	mov    eax,edx
c00124f7:	31 d2                	xor    edx,edx
c00124f9:	52                   	push   edx
c00124fa:	50                   	push   eax
c00124fb:	53                   	push   ebx
c00124fc:	e8 e7 87 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c0012501:	83 c4 0c             	add    esp,0xc
c0012504:	6a 20                	push   0x20
c0012506:	6a 00                	push   0x0
c0012508:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001250c:	52                   	push   edx
c001250d:	e8 be df fe ff       	call   c00004d0 <memset>
c0012512:	58                   	pop    eax
c0012513:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012515:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012519:	51                   	push   ecx
c001251a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001251e:	52                   	push   edx
c001251f:	6a 00                	push   0x0
c0012521:	6a 1f                	push   0x1f
c0012523:	53                   	push   ebx
c0012524:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012527:	83 c4 18             	add    esp,0x18
c001252a:	68 e4 ea 01 c0       	push   0xc001eae4
c001252f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012533:	52                   	push   edx
c0012534:	e8 a7 e1 fe ff       	call   c00006e0 <strcmp>
c0012539:	83 c4 10             	add    esp,0x10
c001253c:	85 c0                	test   eax,eax
c001253e:	75 0f                	jne    c001254f <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012540:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012543:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012547:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001254b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001254f:	50                   	push   eax
c0012550:	50                   	push   eax
c0012551:	68 ec ea 01 c0       	push   0xc001eaec
c0012556:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001255a:	50                   	push   eax
c001255b:	e8 80 e1 fe ff       	call   c00006e0 <strcmp>
c0012560:	83 c4 10             	add    esp,0x10
c0012563:	85 c0                	test   eax,eax
c0012565:	75 0f                	jne    c0012576 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012567:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001256a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001256e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012572:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012576:	45                   	inc    ebp
c0012577:	e9 4c ff ff ff       	jmp    c00124c8 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001257c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0012581:	75 10                	jne    c0012593 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0012583:	83 ec 0c             	sub    esp,0xc
c0012586:	68 f4 ea 01 c0       	push   0xc001eaf4
c001258b:	e8 e7 dc ff ff       	call   c0010277 <KePanic(char const*)>
c0012590:	83 c4 10             	add    esp,0x10
c0012593:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012598:	75 10                	jne    c00125aa <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001259a:	83 ec 0c             	sub    esp,0xc
c001259d:	68 f4 ea 01 c0       	push   0xc001eaf4
c00125a2:	e8 d0 dc ff ff       	call   c0010277 <KePanic(char const*)>
c00125a7:	83 c4 10             	add    esp,0x10
c00125aa:	31 d2                	xor    edx,edx
c00125ac:	50                   	push   eax
c00125ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125b1:	52                   	push   edx
c00125b2:	50                   	push   eax
c00125b3:	53                   	push   ebx
c00125b4:	e8 2f 87 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c00125b9:	5a                   	pop    edx
c00125ba:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00125be:	e8 f6 51 ff ff       	call   c00077b9 <malloc>
c00125c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00125c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125cb:	31 c9                	xor    ecx,ecx
c00125cd:	5e                   	pop    esi
c00125ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125d0:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00125d4:	55                   	push   ebp
c00125d5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125d9:	51                   	push   ecx
c00125da:	52                   	push   edx
c00125db:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00125df:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00125e3:	53                   	push   ebx
c00125e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00125e7:	83 c4 14             	add    esp,0x14
c00125ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00125ee:	e8 c6 51 ff ff       	call   c00077b9 <malloc>
c00125f3:	89 c6                	mov    esi,eax
c00125f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00125f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00125fa:	56                   	push   esi
c00125fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00125ff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012603:	51                   	push   ecx
c0012604:	52                   	push   edx
c0012605:	53                   	push   ebx
c0012606:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001260d:	8b 15 40 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025140
c0012613:	83 c4 1c             	add    esp,0x1c
c0012616:	c1 e8 04             	shr    eax,0x4
c0012619:	89 04 95 c0 4f 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb040],eax
c0012620:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012624:	31 d2                	xor    edx,edx
c0012626:	52                   	push   edx
c0012627:	50                   	push   eax
c0012628:	53                   	push   ebx
c0012629:	e8 ba 86 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c001262e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012630:	31 d2                	xor    edx,edx
c0012632:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012635:	56                   	push   esi
c0012636:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001263a:	52                   	push   edx
c001263b:	50                   	push   eax
c001263c:	53                   	push   ebx
c001263d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012640:	83 c4 14             	add    esp,0x14
c0012643:	53                   	push   ebx
c0012644:	e8 3f 86 ff ff       	call   c000ac88 <File::close()>
c0012649:	5d                   	pop    ebp
c001264a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001264e:	e8 76 51 ff ff       	call   c00077c9 <free>
c0012653:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012656:	e8 6e 51 ff ff       	call   c00077c9 <free>
c001265b:	a1 40 51 02 c0       	mov    eax,ds:0xc0025140
c0012660:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012664:	8d 50 01             	lea    edx,[eax+0x1]
c0012667:	89 0c 85 c0 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf40],ecx
c001266e:	89 34 85 40 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdafc0],esi
c0012675:	89 15 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edx
c001267b:	83 c4 10             	add    esp,0x10
c001267e:	b0 01                	mov    al,0x1
c0012680:	83 c4 5c             	add    esp,0x5c
c0012683:	5b                   	pop    ebx
c0012684:	5e                   	pop    esi
c0012685:	5f                   	pop    edi
c0012686:	5d                   	pop    ebp
c0012687:	c3                   	ret    

c0012688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012688:	55                   	push   ebp
c0012689:	57                   	push   edi
c001268a:	56                   	push   esi
c001268b:	53                   	push   ebx
c001268c:	81 ec 68 03 00 00    	sub    esp,0x368
c0012692:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012699:	8b 1d 90 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025190
c001269f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00126a3:	68 14 01 00 00       	push   0x114
c00126a8:	e8 0c 51 ff ff       	call   c00077b9 <malloc>
c00126ad:	83 c4 0c             	add    esp,0xc
c00126b0:	89 c5                	mov    ebp,eax
c00126b2:	53                   	push   ebx
c00126b3:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00126ba:	50                   	push   eax
c00126bb:	e8 aa 84 ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c00126c0:	5e                   	pop    esi
c00126c1:	5f                   	pop    edi
c00126c2:	6a 01                	push   0x1
c00126c4:	55                   	push   ebp
c00126c5:	e8 60 85 ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c00126ca:	83 c4 10             	add    esp,0x10
c00126cd:	85 c0                	test   eax,eax
c00126cf:	0f 85 a7 06 00 00    	jne    c0012d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00126d5:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00126dd:	83 ec 0c             	sub    esp,0xc
c00126e0:	6a 34                	push   0x34
c00126e2:	e8 d2 50 ff ff       	call   c00077b9 <malloc>
c00126e7:	5b                   	pop    ebx
c00126e8:	89 c7                	mov    edi,eax
c00126ea:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00126ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00126f1:	53                   	push   ebx
c00126f2:	57                   	push   edi
c00126f3:	6a 00                	push   0x0
c00126f5:	6a 34                	push   0x34
c00126f7:	55                   	push   ebp
c00126f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126fb:	83 c4 20             	add    esp,0x20
c00126fe:	85 c0                	test   eax,eax
c0012700:	0f 85 76 06 00 00    	jne    c0012d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012706:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001270c:	0f 85 6a 06 00 00    	jne    c0012d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012712:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0012715:	85 c0                	test   eax,eax
c0012717:	0f 84 5f 06 00 00    	je     c0012d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001271d:	31 d2                	xor    edx,edx
c001271f:	51                   	push   ecx
c0012720:	52                   	push   edx
c0012721:	50                   	push   eax
c0012722:	55                   	push   ebp
c0012723:	e8 c0 85 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c0012728:	83 c4 10             	add    esp,0x10
c001272b:	85 c0                	test   eax,eax
c001272d:	0f 85 49 06 00 00    	jne    c0012d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012733:	83 ec 0c             	sub    esp,0xc
c0012736:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012739:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001273d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0012741:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012745:	0f af c2             	imul   eax,edx
c0012748:	50                   	push   eax
c0012749:	e8 6b 50 ff ff       	call   c00077b9 <malloc>
c001274e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012751:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012755:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012758:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001275c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012760:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012764:	0f af c2             	imul   eax,edx
c0012767:	99                   	cdq    
c0012768:	52                   	push   edx
c0012769:	50                   	push   eax
c001276a:	55                   	push   ebp
c001276b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001276e:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0012771:	83 c4 20             	add    esp,0x20
c0012774:	85 c0                	test   eax,eax
c0012776:	0f 84 00 06 00 00    	je     c0012d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001277c:	52                   	push   edx
c001277d:	31 d2                	xor    edx,edx
c001277f:	52                   	push   edx
c0012780:	50                   	push   eax
c0012781:	55                   	push   ebp
c0012782:	e8 61 85 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c0012787:	83 c4 10             	add    esp,0x10
c001278a:	85 c0                	test   eax,eax
c001278c:	0f 85 ea 05 00 00    	jne    c0012d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012792:	83 ec 0c             	sub    esp,0xc
c0012795:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012799:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001279d:	31 f6                	xor    esi,esi
c001279f:	0f af c2             	imul   eax,edx
c00127a2:	50                   	push   eax
c00127a3:	e8 11 50 ff ff       	call   c00077b9 <malloc>
c00127a8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127ab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00127af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127b2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127b6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00127ba:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00127be:	0f af c2             	imul   eax,edx
c00127c1:	99                   	cdq    
c00127c2:	52                   	push   edx
c00127c3:	50                   	push   eax
c00127c4:	55                   	push   ebp
c00127c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127c8:	83 c4 20             	add    esp,0x20
c00127cb:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00127cf:	0f 86 8a 00 00 00    	jbe    c001285f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00127d5:	0f b7 de             	movzx  ebx,si
c00127d8:	c1 e3 05             	shl    ebx,0x5
c00127db:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00127df:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00127e2:	75 75                	jne    c0012859 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00127e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00127e7:	31 d2                	xor    edx,edx
c00127e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127ed:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00127f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127f4:	50                   	push   eax
c00127f5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00127f8:	52                   	push   edx
c00127f9:	50                   	push   eax
c00127fa:	55                   	push   ebp
c00127fb:	e8 e8 84 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c0012800:	83 c4 10             	add    esp,0x10
c0012803:	85 c0                	test   eax,eax
c0012805:	0f 85 71 05 00 00    	jne    c0012d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001280b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0012812:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012815:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012819:	31 d2                	xor    edx,edx
c001281b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001281f:	83 ec 0c             	sub    esp,0xc
c0012822:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012826:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001282d:	50                   	push   eax
c001282e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012832:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012836:	52                   	push   edx
c0012837:	50                   	push   eax
c0012838:	55                   	push   ebp
c0012839:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001283c:	83 c4 1c             	add    esp,0x1c
c001283f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0012842:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0012845:	50                   	push   eax
c0012846:	6a 00                	push   0x0
c0012848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001284c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012850:	50                   	push   eax
c0012851:	e8 7a dc fe ff       	call   c00004d0 <memset>
c0012856:	83 c4 10             	add    esp,0x10
c0012859:	46                   	inc    esi
c001285a:	e9 6c ff ff ff       	jmp    c00127cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001285f:	53                   	push   ebx
c0012860:	31 db                	xor    ebx,ebx
c0012862:	68 00 01 00 00       	push   0x100
c0012867:	6a 00                	push   0x0
c0012869:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001286d:	50                   	push   eax
c001286e:	e8 5d dc fe ff       	call   c00004d0 <memset>
c0012873:	83 c4 0c             	add    esp,0xc
c0012876:	68 00 01 00 00       	push   0x100
c001287b:	6a 00                	push   0x0
c001287d:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0012884:	50                   	push   eax
c0012885:	e8 46 dc fe ff       	call   c00004d0 <memset>
c001288a:	83 c4 10             	add    esp,0x10
c001288d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012895:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001289d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00128a5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00128ad:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00128b5:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00128b9:	0f 86 30 01 00 00    	jbe    c00129ef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00128bf:	0f b7 f3             	movzx  esi,bx
c00128c2:	6b f6 28             	imul   esi,esi,0x28
c00128c5:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00128c9:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00128cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00128d0:	52                   	push   edx
c00128d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00128d5:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00128d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00128db:	6b d2 28             	imul   edx,edx,0x28
c00128de:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00128e2:	31 d2                	xor    edx,edx
c00128e4:	52                   	push   edx
c00128e5:	50                   	push   eax
c00128e6:	55                   	push   ebp
c00128e7:	e8 fc 83 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c00128ec:	83 c4 0c             	add    esp,0xc
c00128ef:	6a 20                	push   0x20
c00128f1:	6a 00                	push   0x0
c00128f3:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00128fa:	51                   	push   ecx
c00128fb:	e8 d0 db fe ff       	call   c00004d0 <memset>
c0012900:	59                   	pop    ecx
c0012901:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012904:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012908:	52                   	push   edx
c0012909:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012910:	51                   	push   ecx
c0012911:	6a 00                	push   0x0
c0012913:	6a 1f                	push   0x1f
c0012915:	55                   	push   ebp
c0012916:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012919:	83 c4 1c             	add    esp,0x1c
c001291c:	6a 09                	push   0x9
c001291e:	68 0e eb 01 c0       	push   0xc001eb0e
c0012923:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001292a:	51                   	push   ecx
c001292b:	e8 60 da fe ff       	call   c0000390 <memcmp>
c0012930:	83 c4 10             	add    esp,0x10
c0012933:	85 c0                	test   eax,eax
c0012935:	75 21                	jne    c0012958 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012937:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001293b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001293f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012943:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012947:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001294a:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012951:	89 d0                	mov    eax,edx
c0012953:	40                   	inc    eax
c0012954:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012958:	50                   	push   eax
c0012959:	6a 09                	push   0x9
c001295b:	68 18 eb 01 c0       	push   0xc001eb18
c0012960:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012967:	50                   	push   eax
c0012968:	e8 23 da fe ff       	call   c0000390 <memcmp>
c001296d:	83 c4 10             	add    esp,0x10
c0012970:	85 c0                	test   eax,eax
c0012972:	75 21                	jne    c0012995 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0012974:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012978:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001297c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012980:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012984:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012987:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001298e:	89 d0                	mov    eax,edx
c0012990:	40                   	inc    eax
c0012991:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012995:	50                   	push   eax
c0012996:	50                   	push   eax
c0012997:	68 e4 ea 01 c0       	push   0xc001eae4
c001299c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00129a3:	50                   	push   eax
c00129a4:	e8 37 dd fe ff       	call   c00006e0 <strcmp>
c00129a9:	83 c4 10             	add    esp,0x10
c00129ac:	85 c0                	test   eax,eax
c00129ae:	75 0f                	jne    c00129bf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00129b0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00129b3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00129bf:	50                   	push   eax
c00129c0:	50                   	push   eax
c00129c1:	68 ec ea 01 c0       	push   0xc001eaec
c00129c6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00129cd:	50                   	push   eax
c00129ce:	e8 0d dd fe ff       	call   c00006e0 <strcmp>
c00129d3:	83 c4 10             	add    esp,0x10
c00129d6:	85 c0                	test   eax,eax
c00129d8:	75 0f                	jne    c00129e9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00129da:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00129dd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00129e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00129e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00129e9:	43                   	inc    ebx
c00129ea:	e9 c6 fe ff ff       	jmp    c00128b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00129ef:	31 d2                	xor    edx,edx
c00129f1:	50                   	push   eax
c00129f2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00129f6:	52                   	push   edx
c00129f7:	50                   	push   eax
c00129f8:	55                   	push   ebp
c00129f9:	e8 ea 82 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c00129fe:	58                   	pop    eax
c00129ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012a03:	e8 b1 4d ff ff       	call   c00077b9 <malloc>
c0012a08:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a0b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a0f:	31 d2                	xor    edx,edx
c0012a11:	58                   	pop    eax
c0012a12:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012a16:	53                   	push   ebx
c0012a17:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012a1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a1f:	52                   	push   edx
c0012a20:	50                   	push   eax
c0012a21:	55                   	push   ebp
c0012a22:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a25:	83 c4 14             	add    esp,0x14
c0012a28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a2c:	e8 88 4d ff ff       	call   c00077b9 <malloc>
c0012a31:	31 d2                	xor    edx,edx
c0012a33:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012a37:	83 c4 0c             	add    esp,0xc
c0012a3a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012a3e:	52                   	push   edx
c0012a3f:	50                   	push   eax
c0012a40:	55                   	push   ebp
c0012a41:	e8 a2 82 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c0012a46:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012a49:	31 d2                	xor    edx,edx
c0012a4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a4e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012a52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a56:	52                   	push   edx
c0012a57:	50                   	push   eax
c0012a58:	55                   	push   ebp
c0012a59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012a5c:	83 c4 20             	add    esp,0x20
c0012a5f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012a67:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012a6b:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012a6f:	0f 84 0b 03 00 00    	je     c0012d80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c0012a75:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012a7c:	31 d2                	xor    edx,edx
c0012a7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a82:	c1 e8 03             	shr    eax,0x3
c0012a85:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012a89:	51                   	push   ecx
c0012a8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012a8e:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0012a92:	52                   	push   edx
c0012a93:	50                   	push   eax
c0012a94:	55                   	push   ebp
c0012a95:	e8 4e 82 ff ff       	call   c000ace8 <File::seek(unsigned long long)>
c0012a9a:	5b                   	pop    ebx
c0012a9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a9f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0012aa6:	e8 0e 4d ff ff       	call   c00077b9 <malloc>
c0012aab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012aae:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012ab2:	31 d2                	xor    edx,edx
c0012ab4:	5e                   	pop    esi
c0012ab5:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012ab9:	50                   	push   eax
c0012aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012abe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012ac2:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012ac9:	52                   	push   edx
c0012aca:	50                   	push   eax
c0012acb:	55                   	push   ebp
c0012acc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012acf:	83 c4 20             	add    esp,0x20
c0012ad2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012ada:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012ade:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c0012ae2:	0f 8d 7c 02 00 00    	jge    c0012d64 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012ae8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012aec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012af0:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0012af5:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012af8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012afc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b00:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0012b04:	89 d8                	mov    eax,ebx
c0012b06:	c1 e8 08             	shr    eax,0x8
c0012b09:	89 c6                	mov    esi,eax
c0012b0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012b0f:	c1 e6 04             	shl    esi,0x4
c0012b12:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0012b16:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012b19:	85 d2                	test   edx,edx
c0012b1b:	0f 85 bf 00 00 00    	jne    c0012be0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b21:	83 ec 0c             	sub    esp,0xc
c0012b24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b28:	03 06                	add    eax,DWORD PTR [esi]
c0012b2a:	50                   	push   eax
c0012b2b:	e8 4b f8 ff ff       	call   c001237b <Thr::getAddressOfKernelSymbol(char const*)>
c0012b30:	83 c4 10             	add    esp,0x10
c0012b33:	89 c2                	mov    edx,eax
c0012b35:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012b3a:	85 c0                	test   eax,eax
c0012b3c:	0f 85 9e 00 00 00    	jne    c0012be0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b42:	83 ec 0c             	sub    esp,0xc
c0012b45:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b49:	03 06                	add    eax,DWORD PTR [esi]
c0012b4b:	50                   	push   eax
c0012b4c:	e8 77 d8 ff ff       	call   c00103c8 <KeResolveCompatibilitySymbol(char*)>
c0012b51:	83 c4 10             	add    esp,0x10
c0012b54:	89 c2                	mov    edx,eax
c0012b56:	85 c0                	test   eax,eax
c0012b58:	0f 85 82 00 00 00    	jne    c0012be0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012b5e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0012b62:	50                   	push   eax
c0012b63:	50                   	push   eax
c0012b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b68:	03 06                	add    eax,DWORD PTR [esi]
c0012b6a:	50                   	push   eax
c0012b6b:	68 22 eb 01 c0       	push   0xc001eb22
c0012b70:	e8 7f 7a ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0012b75:	58                   	pop    eax
c0012b76:	5a                   	pop    edx
c0012b77:	68 3c eb 01 c0       	push   0xc001eb3c
c0012b7c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b83:	50                   	push   eax
c0012b84:	e8 77 da fe ff       	call   c0000600 <strcpy>
c0012b89:	59                   	pop    ecx
c0012b8a:	58                   	pop    eax
c0012b8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012b8f:	03 06                	add    eax,DWORD PTR [esi]
c0012b91:	50                   	push   eax
c0012b92:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012b99:	50                   	push   eax
c0012b9a:	e8 21 dc fe ff       	call   c00007c0 <strcat>
c0012b9f:	58                   	pop    eax
c0012ba0:	5a                   	pop    edx
c0012ba1:	68 d2 eb 01 c0       	push   0xc001ebd2
c0012ba6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bad:	50                   	push   eax
c0012bae:	e8 0d dc fe ff       	call   c00007c0 <strcat>
c0012bb3:	83 c4 10             	add    esp,0x10
c0012bb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012bbb:	0f 84 5d 01 00 00    	je     c0012d1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012bc1:	83 ec 0c             	sub    esp,0xc
c0012bc4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012bcb:	50                   	push   eax
c0012bcc:	e8 a6 d6 ff ff       	call   c0010277 <KePanic(char const*)>
c0012bd1:	83 c4 10             	add    esp,0x10
c0012bd4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012bd8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012bdc:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012be0:	80 fb 01             	cmp    bl,0x1
c0012be3:	0f 85 88 00 00 00    	jne    c0012c71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012be9:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012bf0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012bf4:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012bf8:	01 ce                	add    esi,ecx
c0012bfa:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c00:	0f 94 c0             	sete   al
c0012c03:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c09:	0f 94 c3             	sete   bl
c0012c0c:	09 c3                	or     ebx,eax
c0012c0e:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c10:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012c15:	74 41                	je     c0012c58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012c17:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c1a:	84 db                	test   bl,bl
c0012c1c:	75 15                	jne    c0012c33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012c1e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c22:	66 83 f8 0c          	cmp    ax,0xc
c0012c26:	76 05                	jbe    c0012c2d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012c28:	b8 0c 00 00 00       	mov    eax,0xc
c0012c2d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012c31:	76 37                	jbe    c0012c6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c33:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012c37:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012c3c:	0f 84 dc 00 00 00    	je     c0012d1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012c42:	83 ec 0c             	sub    esp,0xc
c0012c45:	68 53 eb 01 c0       	push   0xc001eb53
c0012c4a:	e8 28 d6 ff ff       	call   c0010277 <KePanic(char const*)>
c0012c4f:	83 c4 10             	add    esp,0x10
c0012c52:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012c56:	eb 12                	jmp    c0012c6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c58:	01 c1                	add    ecx,eax
c0012c5a:	84 db                	test   bl,bl
c0012c5c:	75 0c                	jne    c0012c6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c5e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c62:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0012c66:	77 02                	ja     c0012c6a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012c68:	01 d1                	add    ecx,edx
c0012c6a:	89 0e                	mov    DWORD PTR [esi],ecx
c0012c6c:	e9 ea 00 00 00       	jmp    c0012d5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012c71:	80 fb 02             	cmp    bl,0x2
c0012c74:	75 7c                	jne    c0012cf2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012c76:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012c7d:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012c81:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012c85:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012c8b:	74 20                	je     c0012cad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c8d:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012c93:	74 18                	je     c0012cad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012c95:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012c99:	b9 0a 00 00 00       	mov    ecx,0xa
c0012c9e:	66 83 f8 0e          	cmp    ax,0xe
c0012ca2:	77 03                	ja     c0012ca7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012ca4:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012ca7:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012cab:	76 1f                	jbe    c0012ccc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012cad:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012cb1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012cb6:	74 66                	je     c0012d1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012cb8:	83 ec 0c             	sub    esp,0xc
c0012cbb:	68 6f eb 01 c0       	push   0xc001eb6f
c0012cc0:	e8 b2 d5 ff ff       	call   c0010277 <KePanic(char const*)>
c0012cc5:	83 c4 10             	add    esp,0x10
c0012cc8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012ccc:	8b 06                	mov    eax,DWORD PTR [esi]
c0012cce:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012cd3:	74 13                	je     c0012ce8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012cd5:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012cd9:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012ce0:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012ce4:	01 c8                	add    eax,ecx
c0012ce6:	eb 04                	jmp    c0012cec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012ce8:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012cec:	01 c2                	add    edx,eax
c0012cee:	89 16                	mov    DWORD PTR [esi],edx
c0012cf0:	eb 69                	jmp    c0012d5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012cf2:	0f b6 db             	movzx  ebx,bl
c0012cf5:	50                   	push   eax
c0012cf6:	50                   	push   eax
c0012cf7:	53                   	push   ebx
c0012cf8:	68 8b eb 01 c0       	push   0xc001eb8b
c0012cfd:	e8 f2 78 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012d0a:	74 12                	je     c0012d1e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012d0c:	83 ec 0c             	sub    esp,0xc
c0012d0f:	68 96 eb 01 c0       	push   0xc001eb96
c0012d14:	e8 5e d5 ff ff       	call   c0010277 <KePanic(char const*)>
c0012d19:	83 c4 10             	add    esp,0x10
c0012d1c:	eb 3d                	jmp    c0012d5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012d1e:	83 ec 0c             	sub    esp,0xc
c0012d21:	55                   	push   ebp
c0012d22:	e8 61 7f ff ff       	call   c000ac88 <File::close()>
c0012d27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d2a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d30:	59                   	pop    ecx
c0012d31:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d35:	e8 8f 4a ff ff       	call   c00077c9 <free>
c0012d3a:	5b                   	pop    ebx
c0012d3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d3f:	e8 85 4a ff ff       	call   c00077c9 <free>
c0012d44:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d47:	e8 7d 4a ff ff       	call   c00077c9 <free>
c0012d4c:	5e                   	pop    esi
c0012d4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d51:	e8 73 4a ff ff       	call   c00077c9 <free>
c0012d56:	83 c4 10             	add    esp,0x10
c0012d59:	eb 21                	jmp    c0012d7c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012d5b:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012d5f:	e9 76 fd ff ff       	jmp    c0012ada <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012d64:	83 ec 0c             	sub    esp,0xc
c0012d67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012d6b:	e8 59 4a ff ff       	call   c00077c9 <free>
c0012d70:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012d74:	83 c4 10             	add    esp,0x10
c0012d77:	e9 eb fc ff ff       	jmp    c0012a67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012d7c:	31 c0                	xor    eax,eax
c0012d7e:	eb 33                	jmp    c0012db3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012d80:	83 ec 0c             	sub    esp,0xc
c0012d83:	55                   	push   ebp
c0012d84:	e8 ff 7e ff ff       	call   c000ac88 <File::close()>
c0012d89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d8c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012d8f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012d92:	58                   	pop    eax
c0012d93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d97:	e8 2d 4a ff ff       	call   c00077c9 <free>
c0012d9c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012d9f:	e8 25 4a ff ff       	call   c00077c9 <free>
c0012da4:	5a                   	pop    edx
c0012da5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da9:	e8 1b 4a ff ff       	call   c00077c9 <free>
c0012dae:	83 c4 10             	add    esp,0x10
c0012db1:	b0 01                	mov    al,0x1
c0012db3:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012db9:	5b                   	pop    ebx
c0012dba:	5e                   	pop    esi
c0012dbb:	5f                   	pop    edi
c0012dbc:	5d                   	pop    ebp
c0012dbd:	c3                   	ret    

c0012dbe <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012dbe:	56                   	push   esi
c0012dbf:	31 d2                	xor    edx,edx
c0012dc1:	53                   	push   ebx
c0012dc2:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012dc8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012dcc:	39 d3                	cmp    ebx,edx
c0012dce:	7e 1b                	jle    c0012deb <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012dd0:	8b 04 95 c0 4b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb440]
c0012dd7:	39 c8                	cmp    eax,ecx
c0012dd9:	77 0d                	ja     c0012de8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012ddb:	8b 34 95 c0 49 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb640]
c0012de2:	01 c6                	add    esi,eax
c0012de4:	39 ce                	cmp    esi,ecx
c0012de6:	77 05                	ja     c0012ded <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012de8:	42                   	inc    edx
c0012de9:	eb e1                	jmp    c0012dcc <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012deb:	31 c0                	xor    eax,eax
c0012ded:	5b                   	pop    ebx
c0012dee:	5e                   	pop    esi
c0012def:	c3                   	ret    

c0012df0 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012df0:	53                   	push   ebx
c0012df1:	31 c0                	xor    eax,eax
c0012df3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012df7:	8b 1d a0 49 02 c0    	mov    ebx,DWORD PTR ds:0xc00249a0
c0012dfd:	39 c3                	cmp    ebx,eax
c0012dff:	7e 22                	jle    c0012e23 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012e01:	8b 14 85 c0 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb440]
c0012e08:	39 ca                	cmp    edx,ecx
c0012e0a:	77 14                	ja     c0012e20 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012e0c:	03 14 85 c0 49 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb640]
c0012e13:	39 ca                	cmp    edx,ecx
c0012e15:	76 09                	jbe    c0012e20 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012e17:	8b 04 85 c0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb240]
c0012e1e:	eb 05                	jmp    c0012e25 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012e20:	40                   	inc    eax
c0012e21:	eb da                	jmp    c0012dfd <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012e23:	31 c0                	xor    eax,eax
c0012e25:	5b                   	pop    ebx
c0012e26:	c3                   	ret    

c0012e27 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012e27:	53                   	push   ebx
c0012e28:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e2c:	53                   	push   ebx
c0012e2d:	e8 8c ff ff ff       	call   c0012dbe <Thr::getDriverBaseFromAddress(unsigned long)>
c0012e32:	5a                   	pop    edx
c0012e33:	31 d2                	xor    edx,edx
c0012e35:	85 c0                	test   eax,eax
c0012e37:	74 04                	je     c0012e3d <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012e39:	89 da                	mov    edx,ebx
c0012e3b:	29 c2                	sub    edx,eax
c0012e3d:	89 d0                	mov    eax,edx
c0012e3f:	5b                   	pop    ebx
c0012e40:	c3                   	ret    

c0012e41 <Thr::loadDLL(char const*, bool)>:
c0012e41:	55                   	push   ebp
c0012e42:	57                   	push   edi
c0012e43:	56                   	push   esi
c0012e44:	53                   	push   ebx
c0012e45:	81 ec 34 01 00 00    	sub    esp,0x134
c0012e4b:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012e52:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012e59:	56                   	push   esi
c0012e5a:	68 ae eb 01 c0       	push   0xc001ebae
c0012e5f:	e8 90 77 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0012e64:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012e6b:	e8 49 49 ff ff       	call   c00077b9 <malloc>
c0012e70:	83 c4 0c             	add    esp,0xc
c0012e73:	89 c3                	mov    ebx,eax
c0012e75:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0012e7b:	56                   	push   esi
c0012e7c:	50                   	push   eax
c0012e7d:	e8 e8 7c ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c0012e82:	83 c4 10             	add    esp,0x10
c0012e85:	85 db                	test   ebx,ebx
c0012e87:	75 3c                	jne    c0012ec5 <Thr::loadDLL(char const*, bool)+0x84>
c0012e89:	89 f8                	mov    eax,edi
c0012e8b:	84 c0                	test   al,al
c0012e8d:	0f 84 d2 01 00 00    	je     c0013065 <Thr::loadDLL(char const*, bool)+0x224>
c0012e93:	55                   	push   ebp
c0012e94:	55                   	push   ebp
c0012e95:	68 bf eb 01 c0       	push   0xc001ebbf
c0012e9a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012e9e:	55                   	push   ebp
c0012e9f:	e8 5c d7 fe ff       	call   c0000600 <strcpy>
c0012ea4:	58                   	pop    eax
c0012ea5:	5a                   	pop    edx
c0012ea6:	56                   	push   esi
c0012ea7:	55                   	push   ebp
c0012ea8:	e8 13 d9 fe ff       	call   c00007c0 <strcat>
c0012ead:	59                   	pop    ecx
c0012eae:	58                   	pop    eax
c0012eaf:	68 d2 eb 01 c0       	push   0xc001ebd2
c0012eb4:	55                   	push   ebp
c0012eb5:	e8 06 d9 fe ff       	call   c00007c0 <strcat>
c0012eba:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ebd:	e8 b5 d3 ff ff       	call   c0010277 <KePanic(char const*)>
c0012ec2:	83 c4 10             	add    esp,0x10
c0012ec5:	51                   	push   ecx
c0012ec6:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012eca:	50                   	push   eax
c0012ecb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012ecf:	50                   	push   eax
c0012ed0:	53                   	push   ebx
c0012ed1:	e8 00 80 ff ff       	call   c000aed6 <File::stat(unsigned long long*, bool*)>
c0012ed6:	83 c4 10             	add    esp,0x10
c0012ed9:	85 db                	test   ebx,ebx
c0012edb:	74 0c                	je     c0012ee9 <Thr::loadDLL(char const*, bool)+0xa8>
c0012edd:	83 ec 0c             	sub    esp,0xc
c0012ee0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012ee2:	53                   	push   ebx
c0012ee3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ee6:	83 c4 10             	add    esp,0x10
c0012ee9:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012eee:	75 0a                	jne    c0012efa <Thr::loadDLL(char const*, bool)+0xb9>
c0012ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012ef4:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012ef8:	75 3c                	jne    c0012f36 <Thr::loadDLL(char const*, bool)+0xf5>
c0012efa:	89 f8                	mov    eax,edi
c0012efc:	84 c0                	test   al,al
c0012efe:	0f 84 49 01 00 00    	je     c001304d <Thr::loadDLL(char const*, bool)+0x20c>
c0012f04:	51                   	push   ecx
c0012f05:	51                   	push   ecx
c0012f06:	68 bf eb 01 c0       	push   0xc001ebbf
c0012f0b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012f0f:	53                   	push   ebx
c0012f10:	e8 eb d6 fe ff       	call   c0000600 <strcpy>
c0012f15:	5d                   	pop    ebp
c0012f16:	58                   	pop    eax
c0012f17:	56                   	push   esi
c0012f18:	53                   	push   ebx
c0012f19:	e8 a2 d8 fe ff       	call   c00007c0 <strcat>
c0012f1e:	58                   	pop    eax
c0012f1f:	5a                   	pop    edx
c0012f20:	68 d2 eb 01 c0       	push   0xc001ebd2
c0012f25:	53                   	push   ebx
c0012f26:	e8 95 d8 fe ff       	call   c00007c0 <strcat>
c0012f2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012f2e:	e8 44 d3 ff ff       	call   c0010277 <KePanic(char const*)>
c0012f33:	83 c4 10             	add    esp,0x10
c0012f36:	52                   	push   edx
c0012f37:	6a 03                	push   0x3
c0012f39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f3d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012f41:	05 ff 0f 00 00       	add    eax,0xfff
c0012f46:	83 d2 00             	adc    edx,0x0
c0012f49:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012f4d:	50                   	push   eax
c0012f4e:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0012f54:	e8 a3 6a ff ff       	call   c00099fc <VAS::allocatePages(int, int)>
c0012f59:	59                   	pop    ecx
c0012f5a:	89 c3                	mov    ebx,eax
c0012f5c:	5d                   	pop    ebp
c0012f5d:	50                   	push   eax
c0012f5e:	68 f6 d7 01 c0       	push   0xc001d7f6
c0012f63:	e8 8c 76 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0012f68:	89 34 24             	mov    DWORD PTR [esp],esi
c0012f6b:	e8 d0 d5 fe ff       	call   c0000540 <strlen>
c0012f70:	8b 2d a0 49 02 c0    	mov    ebp,DWORD PTR ds:0xc00249a0
c0012f76:	40                   	inc    eax
c0012f77:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f7a:	e8 3a 48 ff ff       	call   c00077b9 <malloc>
c0012f7f:	89 04 ad c0 4d 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdb240],eax
c0012f86:	58                   	pop    eax
c0012f87:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012f8c:	5a                   	pop    edx
c0012f8d:	56                   	push   esi
c0012f8e:	ff 34 85 c0 4d 02 c0 	push   DWORD PTR [eax*4-0x3ffdb240]
c0012f95:	e8 66 d6 fe ff       	call   c0000600 <strcpy>
c0012f9a:	a1 a0 49 02 c0       	mov    eax,ds:0xc00249a0
c0012f9f:	8d 50 01             	lea    edx,[eax+0x1]
c0012fa2:	89 1c 85 c0 4b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb440],ebx
c0012fa9:	89 15 a0 49 02 c0    	mov    DWORD PTR ds:0xc00249a0,edx
c0012faf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012fb3:	83 c4 0c             	add    esp,0xc
c0012fb6:	89 14 85 c0 49 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb640],edx
c0012fbd:	6a 01                	push   0x1
c0012fbf:	53                   	push   ebx
c0012fc0:	56                   	push   esi
c0012fc1:	e8 c2 f6 ff ff       	call   c0012688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012fc6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012fca:	83 c4 10             	add    esp,0x10
c0012fcd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fd2:	0f 85 89 00 00 00    	jne    c0013061 <Thr::loadDLL(char const*, bool)+0x220>
c0012fd8:	89 f8                	mov    eax,edi
c0012fda:	84 c0                	test   al,al
c0012fdc:	74 73                	je     c0013051 <Thr::loadDLL(char const*, bool)+0x210>
c0012fde:	83 ec 0c             	sub    esp,0xc
c0012fe1:	68 d4 eb 01 c0       	push   0xc001ebd4
c0012fe6:	e8 8c d2 ff ff       	call   c0010277 <KePanic(char const*)>
c0012feb:	83 c4 10             	add    esp,0x10
c0012fee:	eb 61                	jmp    c0013051 <Thr::loadDLL(char const*, bool)+0x210>
c0012ff0:	50                   	push   eax
c0012ff1:	50                   	push   eax
c0012ff2:	89 e8                	mov    eax,ebp
c0012ff4:	c1 e0 0c             	shl    eax,0xc
c0012ff7:	01 d8                	add    eax,ebx
c0012ff9:	50                   	push   eax
c0012ffa:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c0013000:	e8 55 65 ff ff       	call   c000955a <VAS::getPageTableEntry(unsigned long)>
c0013005:	83 c4 10             	add    esp,0x10
c0013008:	8b 00                	mov    eax,DWORD PTR [eax]
c001300a:	a8 60                	test   al,0x60
c001300c:	75 11                	jne    c001301f <Thr::loadDLL(char const*, bool)+0x1de>
c001300e:	83 ec 0c             	sub    esp,0xc
c0013011:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013016:	50                   	push   eax
c0013017:	e8 17 4a ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c001301c:	83 c4 10             	add    esp,0x10
c001301f:	45                   	inc    ebp
c0013020:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013024:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013028:	05 ff 0f 00 00       	add    eax,0xfff
c001302d:	bf 00 00 00 00       	mov    edi,0x0
c0013032:	83 d2 00             	adc    edx,0x0
c0013035:	0f ac d0 0c          	shrd   eax,edx,0xc
c0013039:	c1 ea 0c             	shr    edx,0xc
c001303c:	39 c5                	cmp    ebp,eax
c001303e:	89 d1                	mov    ecx,edx
c0013040:	89 f8                	mov    eax,edi
c0013042:	19 c8                	sbb    eax,ecx
c0013044:	72 aa                	jb     c0012ff0 <Thr::loadDLL(char const*, bool)+0x1af>
c0013046:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001304b:	75 18                	jne    c0013065 <Thr::loadDLL(char const*, bool)+0x224>
c001304d:	31 db                	xor    ebx,ebx
c001304f:	eb 14                	jmp    c0013065 <Thr::loadDLL(char const*, bool)+0x224>
c0013051:	83 ec 0c             	sub    esp,0xc
c0013054:	68 f3 eb 01 c0       	push   0xc001ebf3
c0013059:	e8 19 d2 ff ff       	call   c0010277 <KePanic(char const*)>
c001305e:	83 c4 10             	add    esp,0x10
c0013061:	31 ed                	xor    ebp,ebp
c0013063:	eb bb                	jmp    c0013020 <Thr::loadDLL(char const*, bool)+0x1df>
c0013065:	81 c4 2c 01 00 00    	add    esp,0x12c
c001306b:	89 d8                	mov    eax,ebx
c001306d:	5b                   	pop    ebx
c001306e:	5e                   	pop    esi
c001306f:	5f                   	pop    edi
c0013070:	5d                   	pop    ebp
c0013071:	c3                   	ret    

c0013072 <Thr::executeDLL(unsigned long, void*)>:
c0013072:	56                   	push   esi
c0013073:	53                   	push   ebx
c0013074:	52                   	push   edx
c0013075:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013079:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001307d:	85 db                	test   ebx,ebx
c001307f:	75 10                	jne    c0013091 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0013081:	83 ec 0c             	sub    esp,0xc
c0013084:	68 0f ec 01 c0       	push   0xc001ec0f
c0013089:	e8 e9 d1 ff ff       	call   c0010277 <KePanic(char const*)>
c001308e:	83 c4 10             	add    esp,0x10
c0013091:	50                   	push   eax
c0013092:	50                   	push   eax
c0013093:	53                   	push   ebx
c0013094:	68 39 ec 01 c0       	push   0xc001ec39
c0013099:	e8 56 75 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001309e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00130a2:	89 d8                	mov    eax,ebx
c00130a4:	83 c4 14             	add    esp,0x14
c00130a7:	5b                   	pop    ebx
c00130a8:	5e                   	pop    esi
c00130a9:	ff e0                	jmp    eax
c00130ab:	90                   	nop

c00130ac <userModeEntryPoint(void*)>:
c00130ac:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00130b1:	48                   	dec    eax
c00130b2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00130b7:	75 03                	jne    c00130bc <userModeEntryPoint(void*)+0x10>
c00130b9:	fb                   	sti    
c00130ba:	66 90                	xchg   ax,ax
c00130bc:	fb                   	sti    
c00130bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00130c5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00130cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00130cf:	e9 6b d1 fe ff       	jmp    c000023f <goToUsermode>

c00130d4 <changeTSS>:
c00130d4:	83 ec 14             	sub    esp,0x14
c00130d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00130dc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00130df:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00130e4:	c1 e2 15             	shl    edx,0x15
c00130e7:	29 d0                	sub    eax,edx
c00130e9:	50                   	push   eax
c00130ea:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00130ef:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00130f5:	05 7c 11 00 00       	add    eax,0x117c
c00130fa:	50                   	push   eax
c00130fb:	e8 d8 5a ff ff       	call   c0008bd8 <TSS::setESP(unsigned long)>
c0013100:	83 c4 1c             	add    esp,0x1c
c0013103:	c3                   	ret    

c0013104 <switchToThread(ThreadControlBlock*)>:
c0013104:	57                   	push   edi
c0013105:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001310a:	56                   	push   esi
c001310b:	85 c0                	test   eax,eax
c001310d:	53                   	push   ebx
c001310e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013112:	0f 85 90 00 00 00    	jne    c00131a8 <switchToThread(ThreadControlBlock*)+0xa4>
c0013118:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c001311b:	80 fa ff             	cmp    dl,0xff
c001311e:	0f 84 80 00 00 00    	je     c00131a4 <switchToThread(ThreadControlBlock*)+0xa0>
c0013124:	81 e2 ff 00 00 00    	and    edx,0xff
c001312a:	b8 00 04 00 00       	mov    eax,0x400
c001312f:	29 d0                	sub    eax,edx
c0013131:	d1 f8                	sar    eax,1
c0013133:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0013136:	66 90                	xchg   ax,ax
c0013138:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c001313b:	e8 1d 26 00 00       	call   c001575d <HalQueryPerformanceCounter()>
c0013140:	a3 a8 51 02 c0       	mov    ds:0xc00251a8,eax
c0013145:	89 15 ac 51 02 c0    	mov    DWORD PTR ds:0xc00251ac,edx
c001314b:	89 c6                	mov    esi,eax
c001314d:	89 d7                	mov    edi,edx
c001314f:	2b 35 98 51 02 c0    	sub    esi,DWORD PTR ds:0xc0025198
c0013155:	a3 98 51 02 c0       	mov    ds:0xc0025198,eax
c001315a:	1b 3d 9c 51 02 c0    	sbb    edi,DWORD PTR ds:0xc002519c
c0013160:	89 35 a0 51 02 c0    	mov    DWORD PTR ds:0xc00251a0,esi
c0013166:	89 3d a4 51 02 c0    	mov    DWORD PTR ds:0xc00251a4,edi
c001316c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013172:	89 15 9c 51 02 c0    	mov    DWORD PTR ds:0xc002519c,edx
c0013178:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001317b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001317e:	01 c6                	add    esi,eax
c0013180:	11 d7                	adc    edi,edx
c0013182:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0013185:	83 ec 0c             	sub    esp,0xc
c0013188:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001318b:	53                   	push   ebx
c001318c:	e8 e6 d0 fe ff       	call   c0000277 <switchToThreadASM>
c0013191:	0f 20 c0             	mov    eax,cr0
c0013194:	83 c8 08             	or     eax,0x8
c0013197:	0f 22 c0             	mov    cr0,eax
c001319a:	83 c4 10             	add    esp,0x10
c001319d:	5b                   	pop    ebx
c001319e:	5e                   	pop    esi
c001319f:	5f                   	pop    edi
c00131a0:	c3                   	ret    
c00131a1:	8d 76 00             	lea    esi,[esi+0x0]
c00131a4:	31 c0                	xor    eax,eax
c00131a6:	eb 90                	jmp    c0013138 <switchToThread(ThreadControlBlock*)+0x34>
c00131a8:	5b                   	pop    ebx
c00131a9:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c00131b3:	5e                   	pop    esi
c00131b4:	5f                   	pop    edi
c00131b5:	c3                   	ret    
c00131b6:	66 90                	xchg   ax,ax

c00131b8 <Process::addArgs(char**)>:
c00131b8:	57                   	push   edi
c00131b9:	56                   	push   esi
c00131ba:	53                   	push   ebx
c00131bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00131c3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00131cd:	85 ff                	test   edi,edi
c00131cf:	74 43                	je     c0013214 <Process::addArgs(char**)+0x5c>
c00131d1:	8b 07                	mov    eax,DWORD PTR [edi]
c00131d3:	85 c0                	test   eax,eax
c00131d5:	74 3d                	je     c0013214 <Process::addArgs(char**)+0x5c>
c00131d7:	31 db                	xor    ebx,ebx
c00131d9:	8d 76 00             	lea    esi,[esi+0x0]
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	50                   	push   eax
c00131e0:	e8 5b d3 fe ff       	call   c0000540 <strlen>
c00131e5:	40                   	inc    eax
c00131e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00131e9:	e8 cb 45 ff ff       	call   c00077b9 <malloc>
c00131ee:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00131f5:	5a                   	pop    edx
c00131f6:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00131f9:	59                   	pop    ecx
c00131fa:	43                   	inc    ebx
c00131fb:	52                   	push   edx
c00131fc:	50                   	push   eax
c00131fd:	e8 fe d3 fe ff       	call   c0000600 <strcpy>
c0013202:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0013208:	83 c4 10             	add    esp,0x10
c001320b:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001320e:	85 c0                	test   eax,eax
c0013210:	75 ca                	jne    c00131dc <Process::addArgs(char**)+0x24>
c0013212:	66 90                	xchg   ax,ax
c0013214:	5b                   	pop    ebx
c0013215:	5e                   	pop    esi
c0013216:	5f                   	pop    edi
c0013217:	c3                   	ret    

c0013218 <Process::Process(char const*, Process*, char**)>:
c0013218:	56                   	push   esi
c0013219:	53                   	push   ebx
c001321a:	83 ec 14             	sub    esp,0x14
c001321d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013221:	05 0c 02 00 00       	add    eax,0x20c
c0013226:	bb 07 00 00 00       	mov    ebx,0x7
c001322b:	89 c6                	mov    esi,eax
c001322d:	8d 76 00             	lea    esi,[esi+0x0]
c0013230:	85 db                	test   ebx,ebx
c0013232:	78 14                	js     c0013248 <Process::Process(char const*, Process*, char**)+0x30>
c0013234:	83 ec 0c             	sub    esp,0xc
c0013237:	56                   	push   esi
c0013238:	e8 9f 98 00 00       	call   c001cadc <ThreadControlBlock::ThreadControlBlock()>
c001323d:	83 c4 10             	add    esp,0x10
c0013240:	83 c6 5f             	add    esi,0x5f
c0013243:	4b                   	dec    ebx
c0013244:	eb ea                	jmp    c0013230 <Process::Process(char const*, Process*, char**)+0x18>
c0013246:	66 90                	xchg   ax,ax
c0013248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001324c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013257:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001325e:	83 ec 0c             	sub    esp,0xc
c0013261:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013265:	e8 02 ce ff ff       	call   c001006c <Krnl::newProcessEnv(Process*)>
c001326a:	83 c4 10             	add    esp,0x10
c001326d:	89 c2                	mov    edx,eax
c001326f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013273:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013279:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001327d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013286:	a1 ec fb 01 c0       	mov    eax,ds:0xc001fbec
c001328b:	8d 50 01             	lea    edx,[eax+0x1]
c001328e:	89 15 ec fb 01 c0    	mov    DWORD PTR ds:0xc001fbec,edx
c0013294:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013298:	89 02                	mov    DWORD PTR [edx],eax
c001329a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00132a2:	83 ec 0c             	sub    esp,0xc
c00132a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00132a9:	e8 0b 45 ff ff       	call   c00077b9 <malloc>
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	89 c3                	mov    ebx,eax
c00132b3:	83 ec 08             	sub    esp,0x8
c00132b6:	6a 00                	push   0x0
c00132b8:	53                   	push   ebx
c00132b9:	e8 60 6b ff ff       	call   c0009e1e <VAS::VAS(bool)>
c00132be:	83 c4 10             	add    esp,0x10
c00132c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132c5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00132cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132cf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00132d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00132e1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00132e7:	e8 f6 d2 ff ff       	call   c00105e2 <KeInitSignals()>
c00132ec:	89 c2                	mov    edx,eax
c00132ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132f2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00132f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00132fc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013302:	85 c0                	test   eax,eax
c0013304:	74 42                	je     c0013348 <Process::Process(char const*, Process*, char**)+0x130>
c0013306:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001330a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013310:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013316:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001331a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013320:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013324:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001332a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013334:	05 0c 01 00 00       	add    eax,0x10c
c0013339:	83 ec 08             	sub    esp,0x8
c001333c:	52                   	push   edx
c001333d:	50                   	push   eax
c001333e:	e8 bd d2 fe ff       	call   c0000600 <strcpy>
c0013343:	83 c4 10             	add    esp,0x10
c0013346:	eb 64                	jmp    c00133ac <Process::Process(char const*, Process*, char**)+0x194>
c0013348:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0013350:	83 ec 0c             	sub    esp,0xc
c0013353:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013357:	e8 5d 44 ff ff       	call   c00077b9 <malloc>
c001335c:	83 c4 10             	add    esp,0x10
c001335f:	89 c3                	mov    ebx,eax
c0013361:	83 ec 08             	sub    esp,0x8
c0013364:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013368:	53                   	push   ebx
c0013369:	e8 8c 55 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c001336e:	83 c4 10             	add    esp,0x10
c0013371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013375:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001337b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001337f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013385:	83 ec 0c             	sub    esp,0xc
c0013388:	50                   	push   eax
c0013389:	e8 0c 4e ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c001338e:	83 c4 10             	add    esp,0x10
c0013391:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013395:	05 0c 01 00 00       	add    eax,0x10c
c001339a:	83 ec 08             	sub    esp,0x8
c001339d:	68 58 ec 01 c0       	push   0xc001ec58
c00133a2:	50                   	push   eax
c00133a3:	e8 58 d2 fe ff       	call   c0000600 <strcpy>
c00133a8:	83 c4 10             	add    esp,0x10
c00133ab:	90                   	nop
c00133ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133b0:	83 c0 0c             	add    eax,0xc
c00133b3:	83 ec 08             	sub    esp,0x8
c00133b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133ba:	50                   	push   eax
c00133bb:	e8 40 d2 fe ff       	call   c0000600 <strcpy>
c00133c0:	83 c4 10             	add    esp,0x10
c00133c3:	83 ec 08             	sub    esp,0x8
c00133c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133ce:	e8 e5 fd ff ff       	call   c00131b8 <Process::addArgs(char**)>
c00133d3:	83 c4 10             	add    esp,0x10
c00133d6:	83 ec 08             	sub    esp,0x8
c00133d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133e1:	e8 6c ed ff ff       	call   c0012152 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00133e6:	83 c4 10             	add    esp,0x10
c00133e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00133ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00133f1:	83 f0 01             	xor    eax,0x1
c00133f4:	88 c2                	mov    dl,al
c00133f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00133fa:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0013400:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013404:	25 ff 00 00 00       	and    eax,0xff
c0013409:	83 ec 08             	sub    esp,0x8
c001340c:	50                   	push   eax
c001340d:	68 b0 ec 01 c0       	push   0xc001ecb0
c0013412:	e8 dd 71 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0013417:	83 c4 10             	add    esp,0x10
c001341a:	90                   	nop
c001341b:	83 c4 14             	add    esp,0x14
c001341e:	5b                   	pop    ebx
c001341f:	5e                   	pop    esi
c0013420:	c3                   	ret    
c0013421:	90                   	nop
c0013422:	66 90                	xchg   ax,ax

c0013424 <Process::Process(bool, char const*, Process*, char**)>:
c0013424:	56                   	push   esi
c0013425:	53                   	push   ebx
c0013426:	83 ec 24             	sub    esp,0x24
c0013429:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001342d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013431:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013435:	05 0c 02 00 00       	add    eax,0x20c
c001343a:	bb 07 00 00 00       	mov    ebx,0x7
c001343f:	89 c6                	mov    esi,eax
c0013441:	8d 76 00             	lea    esi,[esi+0x0]
c0013444:	85 db                	test   ebx,ebx
c0013446:	78 14                	js     c001345c <Process::Process(bool, char const*, Process*, char**)+0x38>
c0013448:	83 ec 0c             	sub    esp,0xc
c001344b:	56                   	push   esi
c001344c:	e8 8b 96 00 00       	call   c001cadc <ThreadControlBlock::ThreadControlBlock()>
c0013451:	83 c4 10             	add    esp,0x10
c0013454:	83 c6 5f             	add    esi,0x5f
c0013457:	4b                   	dec    ebx
c0013458:	eb ea                	jmp    c0013444 <Process::Process(bool, char const*, Process*, char**)+0x20>
c001345a:	66 90                	xchg   ax,ax
c001345c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013460:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0013467:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001346b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0013472:	83 ec 0c             	sub    esp,0xc
c0013475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013479:	e8 ee cb ff ff       	call   c001006c <Krnl::newProcessEnv(Process*)>
c001347e:	83 c4 10             	add    esp,0x10
c0013481:	89 c2                	mov    edx,eax
c0013483:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013487:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001348d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013491:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001349a:	a1 ec fb 01 c0       	mov    eax,ds:0xc001fbec
c001349f:	8d 50 01             	lea    edx,[eax+0x1]
c00134a2:	89 15 ec fb 01 c0    	mov    DWORD PTR ds:0xc001fbec,edx
c00134a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00134ac:	89 02                	mov    DWORD PTR [edx],eax
c00134ae:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00134b6:	83 ec 0c             	sub    esp,0xc
c00134b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00134bd:	e8 f7 42 ff ff       	call   c00077b9 <malloc>
c00134c2:	83 c4 10             	add    esp,0x10
c00134c5:	89 c3                	mov    ebx,eax
c00134c7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00134cb:	25 ff 00 00 00       	and    eax,0xff
c00134d0:	83 ec 08             	sub    esp,0x8
c00134d3:	50                   	push   eax
c00134d4:	53                   	push   ebx
c00134d5:	e8 44 69 ff ff       	call   c0009e1e <VAS::VAS(bool)>
c00134da:	83 c4 10             	add    esp,0x10
c00134dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00134e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134eb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00134f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134f9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00134fd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013503:	e8 da d0 ff ff       	call   c00105e2 <KeInitSignals()>
c0013508:	89 c2                	mov    edx,eax
c001350a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001350e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0013514:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013518:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001351e:	85 c0                	test   eax,eax
c0013520:	74 42                	je     c0013564 <Process::Process(bool, char const*, Process*, char**)+0x140>
c0013522:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013526:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001352c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013536:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001353c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013540:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013546:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001354c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013550:	05 0c 01 00 00       	add    eax,0x10c
c0013555:	83 ec 08             	sub    esp,0x8
c0013558:	52                   	push   edx
c0013559:	50                   	push   eax
c001355a:	e8 a1 d0 fe ff       	call   c0000600 <strcpy>
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	eb 64                	jmp    c00135c8 <Process::Process(bool, char const*, Process*, char**)+0x1a4>
c0013564:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c001356c:	83 ec 0c             	sub    esp,0xc
c001356f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013573:	e8 41 42 ff ff       	call   c00077b9 <malloc>
c0013578:	83 c4 10             	add    esp,0x10
c001357b:	89 c3                	mov    ebx,eax
c001357d:	83 ec 08             	sub    esp,0x8
c0013580:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013584:	53                   	push   ebx
c0013585:	e8 70 53 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c001358a:	83 c4 10             	add    esp,0x10
c001358d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013591:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0013597:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001359b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00135a1:	83 ec 0c             	sub    esp,0xc
c00135a4:	50                   	push   eax
c00135a5:	e8 f0 4b ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00135aa:	83 c4 10             	add    esp,0x10
c00135ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135b1:	05 0c 01 00 00       	add    eax,0x10c
c00135b6:	83 ec 08             	sub    esp,0x8
c00135b9:	68 58 ec 01 c0       	push   0xc001ec58
c00135be:	50                   	push   eax
c00135bf:	e8 3c d0 fe ff       	call   c0000600 <strcpy>
c00135c4:	83 c4 10             	add    esp,0x10
c00135c7:	90                   	nop
c00135c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135cc:	83 c0 0c             	add    eax,0xc
c00135cf:	83 ec 08             	sub    esp,0x8
c00135d2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00135d6:	50                   	push   eax
c00135d7:	e8 24 d0 fe ff       	call   c0000600 <strcpy>
c00135dc:	83 c4 10             	add    esp,0x10
c00135df:	83 ec 08             	sub    esp,0x8
c00135e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00135e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00135ea:	e8 c9 fb ff ff       	call   c00131b8 <Process::addArgs(char**)>
c00135ef:	83 c4 10             	add    esp,0x10
c00135f2:	90                   	nop
c00135f3:	83 c4 24             	add    esp,0x24
c00135f6:	5b                   	pop    ebx
c00135f7:	5e                   	pop    esi
c00135f8:	c3                   	ret    
c00135f9:	8d 76 00             	lea    esi,[esi+0x0]

c00135fc <taskStartupFunction>:
c00135fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013601:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013604:	c3                   	ret    
c0013605:	90                   	nop
c0013606:	66 90                	xchg   ax,ax

c0013608 <Semaphore::Semaphore(int)>:
c0013608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001360c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013610:	89 10                	mov    DWORD PTR [eax],edx
c0013612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013616:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001361d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013621:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013628:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001362c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013633:	90                   	nop
c0013634:	c3                   	ret    
c0013635:	90                   	nop
c0013636:	66 90                	xchg   ax,ax

c0013638 <Mutex::Mutex()>:
c0013638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001363c:	6a 01                	push   0x1
c001363e:	50                   	push   eax
c001363f:	e8 c4 ff ff ff       	call   c0013608 <Semaphore::Semaphore(int)>
c0013644:	83 c4 08             	add    esp,0x8
c0013647:	90                   	nop
c0013648:	c3                   	ret    
c0013649:	90                   	nop
c001364a:	66 90                	xchg   ax,ax

c001364c <Process::createThread(void (*)(void*), void*, int)>:
c001364c:	57                   	push   edi
c001364d:	31 c9                	xor    ecx,ecx
c001364f:	56                   	push   esi
c0013650:	53                   	push   ebx
c0013651:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013655:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001365c:	89 f2                	mov    edx,esi
c001365e:	66 90                	xchg   ax,ax
c0013660:	31 c0                	xor    eax,eax
c0013662:	66 89 d0             	mov    ax,dx
c0013665:	83 e2 01             	and    edx,0x1
c0013668:	74 12                	je     c001367c <Process::createThread(void (*)(void*), void*, int)+0x30>
c001366a:	d1 f8                	sar    eax,1
c001366c:	41                   	inc    ecx
c001366d:	89 c2                	mov    edx,eax
c001366f:	83 f9 10             	cmp    ecx,0x10
c0013672:	75 ec                	jne    c0013660 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0013674:	31 db                	xor    ebx,ebx
c0013676:	89 d8                	mov    eax,ebx
c0013678:	5b                   	pop    ebx
c0013679:	5e                   	pop    esi
c001367a:	5f                   	pop    edi
c001367b:	c3                   	ret    
c001367c:	b8 01 00 00 00       	mov    eax,0x1
c0013681:	d3 e0                	shl    eax,cl
c0013683:	09 c6                	or     esi,eax
c0013685:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0013688:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001368f:	01 c0                	add    eax,eax
c0013691:	01 c8                	add    eax,ecx
c0013693:	8d 04 80             	lea    eax,[eax+eax*4]
c0013696:	01 d8                	add    eax,ebx
c0013698:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001369f:	75 0b                	jne    c00136ac <Process::createThread(void (*)(void*), void*, int)+0x60>
c00136a1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00136ab:	90                   	nop
c00136ac:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00136b2:	83 ec 08             	sub    esp,0x8
c00136b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00136b8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00136bb:	01 c0                	add    eax,eax
c00136bd:	01 c8                	add    eax,ecx
c00136bf:	8d 3c 80             	lea    edi,[eax+eax*4]
c00136c2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00136c5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00136cb:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00136d1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00136d5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00136db:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00136e1:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00136e8:	89 ca                	mov    edx,ecx
c00136ea:	f7 da                	neg    edx
c00136ec:	c1 e2 15             	shl    edx,0x15
c00136ef:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00136f5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00136fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136ff:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013709:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001370f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013713:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013719:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013723:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001372d:	53                   	push   ebx
c001372e:	68 84 51 02 c0       	push   0xc0025184
c0013733:	e8 44 91 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013738:	83 c4 10             	add    esp,0x10
c001373b:	89 d8                	mov    eax,ebx
c001373d:	5b                   	pop    ebx
c001373e:	5e                   	pop    esi
c001373f:	5f                   	pop    edi
c0013740:	c3                   	ret    
c0013741:	90                   	nop
c0013742:	66 90                	xchg   ax,ax

c0013744 <Process::createUserThread()>:
c0013744:	83 ec 0c             	sub    esp,0xc
c0013747:	68 80 00 00 00       	push   0x80
c001374c:	6a 00                	push   0x0
c001374e:	68 ac 30 01 c0       	push   0xc00130ac
c0013753:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013757:	50                   	push   eax
c0013758:	e8 ef fe ff ff       	call   c001364c <Process::createThread(void (*)(void*), void*, int)>
c001375d:	83 c4 1c             	add    esp,0x1c
c0013760:	c3                   	ret    
c0013761:	8d 76 00             	lea    esi,[esi+0x0]

c0013764 <setupMultitasking(void (*)())>:
c0013764:	56                   	push   esi
c0013765:	53                   	push   ebx
c0013766:	53                   	push   ebx
c0013767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001376b:	eb 13                	jmp    c0013780 <setupMultitasking(void (*)())+0x1c>
c001376d:	8d 76 00             	lea    esi,[esi+0x0]
c0013770:	83 ec 0c             	sub    esp,0xc
c0013773:	68 84 51 02 c0       	push   0xc0025184
c0013778:	e8 47 90 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001377d:	83 c4 10             	add    esp,0x10
c0013780:	83 ec 0c             	sub    esp,0xc
c0013783:	68 84 51 02 c0       	push   0xc0025184
c0013788:	e8 13 90 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001378d:	83 c4 10             	add    esp,0x10
c0013790:	84 c0                	test   al,al
c0013792:	74 dc                	je     c0013770 <setupMultitasking(void (*)())+0xc>
c0013794:	83 ec 0c             	sub    esp,0xc
c0013797:	68 24 07 00 00       	push   0x724
c001379c:	e8 18 40 ff ff       	call   c00077b9 <malloc>
c00137a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00137a8:	89 c3                	mov    ebx,eax
c00137aa:	6a 00                	push   0x0
c00137ac:	68 5c ec 01 c0       	push   0xc001ec5c
c00137b1:	6a 01                	push   0x1
c00137b3:	50                   	push   eax
c00137b4:	e8 6b fc ff ff       	call   c0013424 <Process::Process(bool, char const*, Process*, char**)>
c00137b9:	83 c4 14             	add    esp,0x14
c00137bc:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00137c2:	89 1d 90 51 02 c0    	mov    DWORD PTR ds:0xc0025190,ebx
c00137c8:	50                   	push   eax
c00137c9:	e8 29 4c ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00137ce:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00137d6:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00137e0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00137e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00137e9:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00137f3:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00137f9:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c00137ff:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013809:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013813:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001381d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013823:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013829:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013833:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013839:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0013843:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013849:	5a                   	pop    edx
c001384a:	59                   	pop    ecx
c001384b:	68 58 ec 01 c0       	push   0xc001ec58
c0013850:	50                   	push   eax
c0013851:	e8 aa cd fe ff       	call   c0000600 <strcpy>
c0013856:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c001385d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013861:	83 c4 14             	add    esp,0x14
c0013864:	5b                   	pop    ebx
c0013865:	5e                   	pop    esi
c0013866:	e9 fe c9 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001386b:	90                   	nop

c001386c <schedule()>:
c001386c:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c0013872:	85 d2                	test   edx,edx
c0013874:	74 0e                	je     c0013884 <schedule()+0x18>
c0013876:	c7 05 60 51 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x1
c0013880:	c3                   	ret    
c0013881:	8d 76 00             	lea    esi,[esi+0x0]
c0013884:	53                   	push   ebx
c0013885:	83 ec 14             	sub    esp,0x14
c0013888:	68 84 51 02 c0       	push   0xc0025184
c001388d:	e8 0e 8f 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013892:	83 c4 10             	add    esp,0x10
c0013895:	84 c0                	test   al,al
c0013897:	75 3b                	jne    c00138d4 <schedule()+0x68>
c0013899:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001389e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00138a1:	4a                   	dec    edx
c00138a2:	74 38                	je     c00138dc <schedule()+0x70>
c00138a4:	83 ec 0c             	sub    esp,0xc
c00138a7:	68 84 51 02 c0       	push   0xc0025184
c00138ac:	e8 0b 8f 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00138b1:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c00138b8:	89 c3                	mov    ebx,eax
c00138ba:	e8 05 8f 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00138bf:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00138c6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138c9:	e8 36 f8 ff ff       	call   c0013104 <switchToThread(ThreadControlBlock*)>
c00138ce:	83 c4 10             	add    esp,0x10
c00138d1:	8d 76 00             	lea    esi,[esi+0x0]
c00138d4:	83 c4 08             	add    esp,0x8
c00138d7:	5b                   	pop    ebx
c00138d8:	c3                   	ret    
c00138d9:	8d 76 00             	lea    esi,[esi+0x0]
c00138dc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00138e3:	83 ec 08             	sub    esp,0x8
c00138e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00138eb:	50                   	push   eax
c00138ec:	68 84 51 02 c0       	push   0xc0025184
c00138f1:	e8 86 8f 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00138f6:	83 c4 10             	add    esp,0x10
c00138f9:	eb a9                	jmp    c00138a4 <schedule()+0x38>
c00138fb:	90                   	nop

c00138fc <Semaphore::tryAcquire()>:
c00138fc:	53                   	push   ebx
c00138fd:	83 ec 08             	sub    esp,0x8
c0013900:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013904:	fa                   	cli    
c0013905:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001390a:	8d 50 01             	lea    edx,[eax+0x1]
c001390d:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0013913:	8b 15 64 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025164
c0013919:	8d 5a 01             	lea    ebx,[edx+0x1]
c001391c:	89 1d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ebx
c0013922:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013925:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013927:	7c 33                	jl     c001395c <Semaphore::tryAcquire()+0x60>
c0013929:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c001392f:	85 d2                	test   edx,edx
c0013931:	75 0d                	jne    c0013940 <Semaphore::tryAcquire()+0x44>
c0013933:	8b 15 60 51 02 c0    	mov    edx,DWORD PTR ds:0xc0025160
c0013939:	85 d2                	test   edx,edx
c001393b:	75 6b                	jne    c00139a8 <Semaphore::tryAcquire()+0xac>
c001393d:	8d 76 00             	lea    esi,[esi+0x0]
c0013940:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013945:	85 c0                	test   eax,eax
c0013947:	74 0b                	je     c0013954 <Semaphore::tryAcquire()+0x58>
c0013949:	8d 76 00             	lea    esi,[esi+0x0]
c001394c:	31 c0                	xor    eax,eax
c001394e:	83 c4 08             	add    esp,0x8
c0013951:	5b                   	pop    ebx
c0013952:	c3                   	ret    
c0013953:	90                   	nop
c0013954:	fb                   	sti    
c0013955:	83 c4 08             	add    esp,0x8
c0013958:	5b                   	pop    ebx
c0013959:	c3                   	ret    
c001395a:	66 90                	xchg   ax,ax
c001395c:	43                   	inc    ebx
c001395d:	89 15 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,edx
c0013963:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0013966:	85 d2                	test   edx,edx
c0013968:	75 22                	jne    c001398c <Semaphore::tryAcquire()+0x90>
c001396a:	8b 0d 60 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025160
c0013970:	85 c9                	test   ecx,ecx
c0013972:	74 18                	je     c001398c <Semaphore::tryAcquire()+0x90>
c0013974:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001397e:	e8 e9 fe ff ff       	call   c001386c <schedule()>
c0013983:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013988:	48                   	dec    eax
c0013989:	8d 76 00             	lea    esi,[esi+0x0]
c001398c:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013991:	85 c0                	test   eax,eax
c0013993:	75 0b                	jne    c00139a0 <Semaphore::tryAcquire()+0xa4>
c0013995:	fb                   	sti    
c0013996:	b0 01                	mov    al,0x1
c0013998:	83 c4 08             	add    esp,0x8
c001399b:	5b                   	pop    ebx
c001399c:	c3                   	ret    
c001399d:	8d 76 00             	lea    esi,[esi+0x0]
c00139a0:	b0 01                	mov    al,0x1
c00139a2:	83 c4 08             	add    esp,0x8
c00139a5:	5b                   	pop    ebx
c00139a6:	c3                   	ret    
c00139a7:	90                   	nop
c00139a8:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00139b2:	e8 b5 fe ff ff       	call   c001386c <schedule()>
c00139b7:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00139bc:	48                   	dec    eax
c00139bd:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00139c2:	85 c0                	test   eax,eax
c00139c4:	75 86                	jne    c001394c <Semaphore::tryAcquire()+0x50>
c00139c6:	eb 8c                	jmp    c0013954 <Semaphore::tryAcquire()+0x58>

c00139c8 <Semaphore::assertLocked(char const*)>:
c00139c8:	83 ec 0c             	sub    esp,0xc
c00139cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139cf:	fa                   	cli    
c00139d0:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00139d6:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00139db:	8d 48 01             	lea    ecx,[eax+0x1]
c00139de:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c00139e4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00139e6:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00139e9:	7c 29                	jl     c0013a14 <Semaphore::assertLocked(char const*)+0x4c>
c00139eb:	90                   	nop
c00139ec:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00139f1:	85 c0                	test   eax,eax
c00139f3:	75 0b                	jne    c0013a00 <Semaphore::assertLocked(char const*)+0x38>
c00139f5:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00139fa:	85 c0                	test   eax,eax
c00139fc:	75 2e                	jne    c0013a2c <Semaphore::assertLocked(char const*)+0x64>
c00139fe:	66 90                	xchg   ax,ax
c0013a00:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a05:	48                   	dec    eax
c0013a06:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a0b:	75 03                	jne    c0013a10 <Semaphore::assertLocked(char const*)+0x48>
c0013a0d:	fb                   	sti    
c0013a0e:	66 90                	xchg   ax,ax
c0013a10:	83 c4 0c             	add    esp,0xc
c0013a13:	c3                   	ret    
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013a1b:	52                   	push   edx
c0013a1c:	e8 56 c8 ff ff       	call   c0010277 <KePanic(char const*)>
c0013a21:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013a26:	83 c4 10             	add    esp,0x10
c0013a29:	48                   	dec    eax
c0013a2a:	eb c0                	jmp    c00139ec <Semaphore::assertLocked(char const*)+0x24>
c0013a2c:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013a36:	e8 31 fe ff ff       	call   c001386c <schedule()>
c0013a3b:	eb c3                	jmp    c0013a00 <Semaphore::assertLocked(char const*)+0x38>
c0013a3d:	8d 76 00             	lea    esi,[esi+0x0]

c0013a40 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013a40:	83 ec 0c             	sub    esp,0xc
c0013a43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a4c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a4f:	e8 18 fe ff ff       	call   c001386c <schedule()>
c0013a54:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a59:	48                   	dec    eax
c0013a5a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a5f:	75 03                	jne    c0013a64 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013a61:	fb                   	sti    
c0013a62:	66 90                	xchg   ax,ax
c0013a64:	83 c4 0c             	add    esp,0xc
c0013a67:	c3                   	ret    

c0013a68 <blockTask(TaskState)>:
c0013a68:	83 ec 0c             	sub    esp,0xc
c0013a6b:	fa                   	cli    
c0013a6c:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013a72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a7b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013a7e:	e8 e9 fd ff ff       	call   c001386c <schedule()>
c0013a83:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013a88:	48                   	dec    eax
c0013a89:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013a8e:	75 04                	jne    c0013a94 <blockTask(TaskState)+0x2c>
c0013a90:	fb                   	sti    
c0013a91:	8d 76 00             	lea    esi,[esi+0x0]
c0013a94:	83 c4 0c             	add    esp,0xc
c0013a97:	c3                   	ret    

c0013a98 <waitTask(int, int*, int)>:
c0013a98:	83 ec 18             	sub    esp,0x18
c0013a9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013aa0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013aa4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013aa7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013aab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ab0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013ab3:	6a 07                	push   0x7
c0013ab5:	e8 ae ff ff ff       	call   c0013a68 <blockTask(TaskState)>
c0013aba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013abf:	83 c4 10             	add    esp,0x10
c0013ac2:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013ac5:	85 d2                	test   edx,edx
c0013ac7:	74 0b                	je     c0013ad4 <waitTask(int, int*, int)+0x3c>
c0013ac9:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0013acc:	89 02                	mov    DWORD PTR [edx],eax
c0013ace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ad3:	90                   	nop
c0013ad4:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013ad7:	83 c4 0c             	add    esp,0xc
c0013ada:	c3                   	ret    
c0013adb:	90                   	nop

c0013adc <milliTenthSleepUntil(unsigned int)>:
c0013adc:	83 ec 0c             	sub    esp,0xc
c0013adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ae3:	39 05 8c 44 02 c0    	cmp    DWORD PTR ds:0xc002448c,eax
c0013ae9:	76 05                	jbe    c0013af0 <milliTenthSleepUntil(unsigned int)+0x14>
c0013aeb:	90                   	nop
c0013aec:	83 c4 0c             	add    esp,0xc
c0013aef:	c3                   	ret    
c0013af0:	fa                   	cli    
c0013af1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013af7:	83 ec 08             	sub    esp,0x8
c0013afa:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c0013b00:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b06:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013b09:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013b0f:	52                   	push   edx
c0013b10:	68 78 51 02 c0       	push   0xc0025178
c0013b15:	e8 62 8d 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b1a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013b21:	e8 42 ff ff ff       	call   c0013a68 <blockTask(TaskState)>
c0013b26:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013b2b:	83 c4 10             	add    esp,0x10
c0013b2e:	48                   	dec    eax
c0013b2f:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013b34:	85 c0                	test   eax,eax
c0013b36:	75 0c                	jne    c0013b44 <milliTenthSleepUntil(unsigned int)+0x68>
c0013b38:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013b3d:	85 c0                	test   eax,eax
c0013b3f:	75 17                	jne    c0013b58 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013b41:	8d 76 00             	lea    esi,[esi+0x0]
c0013b44:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013b49:	48                   	dec    eax
c0013b4a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013b4f:	75 9b                	jne    c0013aec <milliTenthSleepUntil(unsigned int)+0x10>
c0013b51:	fb                   	sti    
c0013b52:	83 c4 0c             	add    esp,0xc
c0013b55:	c3                   	ret    
c0013b56:	66 90                	xchg   ax,ax
c0013b58:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013b62:	e8 05 fd ff ff       	call   c001386c <schedule()>
c0013b67:	eb db                	jmp    c0013b44 <milliTenthSleepUntil(unsigned int)+0x68>
c0013b69:	8d 76 00             	lea    esi,[esi+0x0]

c0013b6c <milliTenthSleep(unsigned int)>:
c0013b6c:	a1 8c 44 02 c0       	mov    eax,ds:0xc002448c
c0013b71:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0013b75:	e9 62 ff ff ff       	jmp    c0013adc <milliTenthSleepUntil(unsigned int)>
c0013b7a:	66 90                	xchg   ax,ax

c0013b7c <sleep(unsigned int)>:
c0013b7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b80:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b83:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b86:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b89:	8d 04 80             	lea    eax,[eax+eax*4]
c0013b8c:	c1 e0 04             	shl    eax,0x4
c0013b8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b93:	eb d7                	jmp    c0013b6c <milliTenthSleep(unsigned int)>
c0013b95:	90                   	nop
c0013b96:	66 90                	xchg   ax,ax

c0013b98 <Semaphore::acquire()>:
c0013b98:	83 ec 0c             	sub    esp,0xc
c0013b9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b9f:	fa                   	cli    
c0013ba0:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013ba5:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013bab:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bae:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0013bb4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013bb7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013bb9:	7d 2d                	jge    c0013be8 <Semaphore::acquire()+0x50>
c0013bbb:	41                   	inc    ecx
c0013bbc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0013bbf:	90                   	nop
c0013bc0:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0013bc5:	85 c0                	test   eax,eax
c0013bc7:	75 0b                	jne    c0013bd4 <Semaphore::acquire()+0x3c>
c0013bc9:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c0013bce:	85 c0                	test   eax,eax
c0013bd0:	75 62                	jne    c0013c34 <Semaphore::acquire()+0x9c>
c0013bd2:	66 90                	xchg   ax,ax
c0013bd4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013bd9:	48                   	dec    eax
c0013bda:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013bdf:	75 03                	jne    c0013be4 <Semaphore::acquire()+0x4c>
c0013be1:	fb                   	sti    
c0013be2:	66 90                	xchg   ax,ax
c0013be4:	83 c4 0c             	add    esp,0xc
c0013be7:	c3                   	ret    
c0013be8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013bf4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013bf7:	85 c9                	test   ecx,ecx
c0013bf9:	74 4d                	je     c0013c48 <Semaphore::acquire()+0xb0>
c0013bfb:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013bfe:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013c04:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013c07:	90                   	nop
c0013c08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c0d:	83 ec 0c             	sub    esp,0xc
c0013c10:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013c13:	68 d8 ec 01 c0       	push   0xc001ecd8
c0013c18:	e8 d7 69 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0013c1d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013c24:	e8 3f fe ff ff       	call   c0013a68 <blockTask(TaskState)>
c0013c29:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0013c2e:	83 c4 10             	add    esp,0x10
c0013c31:	48                   	dec    eax
c0013c32:	eb 8c                	jmp    c0013bc0 <Semaphore::acquire()+0x28>
c0013c34:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0013c3e:	e8 29 fc ff ff       	call   c001386c <schedule()>
c0013c43:	eb 8f                	jmp    c0013bd4 <Semaphore::acquire()+0x3c>
c0013c45:	8d 76 00             	lea    esi,[esi+0x0]
c0013c48:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c4d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013c50:	eb b6                	jmp    c0013c08 <Semaphore::acquire()+0x70>
c0013c52:	66 90                	xchg   ax,ax

c0013c54 <taskReturned>:
c0013c54:	83 ec 18             	sub    esp,0x18
c0013c57:	68 f8 ec 01 c0       	push   0xc001ecf8
c0013c5c:	e8 16 c6 ff ff       	call   c0010277 <KePanic(char const*)>
c0013c61:	83 c4 10             	add    esp,0x10
c0013c64:	83 ec 0c             	sub    esp,0xc
c0013c67:	6a 02                	push   0x2
c0013c69:	e8 fa fd ff ff       	call   c0013a68 <blockTask(TaskState)>
c0013c6e:	fa                   	cli    
c0013c6f:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c75:	e8 f2 fb ff ff       	call   c001386c <schedule()>
c0013c7a:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013c7f:	83 c4 10             	add    esp,0x10
c0013c82:	48                   	dec    eax
c0013c83:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013c88:	85 c0                	test   eax,eax
c0013c8a:	75 d8                	jne    c0013c64 <taskReturned+0x10>
c0013c8c:	fb                   	sti    
c0013c8d:	eb d5                	jmp    c0013c64 <taskReturned+0x10>
c0013c8f:	90                   	nop

c0013c90 <Thr::processFromPID(int)>:
c0013c90:	57                   	push   edi
c0013c91:	56                   	push   esi
c0013c92:	53                   	push   ebx
c0013c93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c97:	fa                   	cli    
c0013c98:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013c9e:	83 ec 0c             	sub    esp,0xc
c0013ca1:	68 84 51 02 c0       	push   0xc0025184
c0013ca6:	e8 11 8b 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	89 c7                	mov    edi,eax
c0013cb0:	eb 16                	jmp    c0013cc8 <Thr::processFromPID(int)+0x38>
c0013cb2:	66 90                	xchg   ax,ax
c0013cb4:	83 ec 0c             	sub    esp,0xc
c0013cb7:	68 84 51 02 c0       	push   0xc0025184
c0013cbc:	e8 fb 8a 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cc1:	83 c4 10             	add    esp,0x10
c0013cc4:	39 f8                	cmp    eax,edi
c0013cc6:	74 4c                	je     c0013d14 <Thr::processFromPID(int)+0x84>
c0013cc8:	83 ec 0c             	sub    esp,0xc
c0013ccb:	68 84 51 02 c0       	push   0xc0025184
c0013cd0:	e8 e7 8a 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cd5:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013cdc:	89 c3                	mov    ebx,eax
c0013cde:	e8 e1 8a 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013ce3:	58                   	pop    eax
c0013ce4:	5a                   	pop    edx
c0013ce5:	53                   	push   ebx
c0013ce6:	68 84 51 02 c0       	push   0xc0025184
c0013ceb:	e8 8c 8b 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cf0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	39 30                	cmp    DWORD PTR [eax],esi
c0013cf8:	75 ba                	jne    c0013cb4 <Thr::processFromPID(int)+0x24>
c0013cfa:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013cff:	48                   	dec    eax
c0013d00:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d05:	74 09                	je     c0013d10 <Thr::processFromPID(int)+0x80>
c0013d07:	90                   	nop
c0013d08:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013d0b:	5b                   	pop    ebx
c0013d0c:	5e                   	pop    esi
c0013d0d:	5f                   	pop    edi
c0013d0e:	c3                   	ret    
c0013d0f:	90                   	nop
c0013d10:	fb                   	sti    
c0013d11:	eb f5                	jmp    c0013d08 <Thr::processFromPID(int)+0x78>
c0013d13:	90                   	nop
c0013d14:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d19:	48                   	dec    eax
c0013d1a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d1f:	75 07                	jne    c0013d28 <Thr::processFromPID(int)+0x98>
c0013d21:	fb                   	sti    
c0013d22:	5b                   	pop    ebx
c0013d23:	5e                   	pop    esi
c0013d24:	5f                   	pop    edi
c0013d25:	c3                   	ret    
c0013d26:	66 90                	xchg   ax,ax
c0013d28:	5b                   	pop    ebx
c0013d29:	31 c0                	xor    eax,eax
c0013d2b:	5e                   	pop    esi
c0013d2c:	5f                   	pop    edi
c0013d2d:	c3                   	ret    
c0013d2e:	66 90                	xchg   ax,ax

c0013d30 <unblockTask(ThreadControlBlock*)>:
c0013d30:	53                   	push   ebx
c0013d31:	83 ec 08             	sub    esp,0x8
c0013d34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d38:	fa                   	cli    
c0013d39:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0013d3f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d42:	85 c0                	test   eax,eax
c0013d44:	74 66                	je     c0013dac <unblockTask(ThreadControlBlock*)+0x7c>
c0013d46:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d49:	48                   	dec    eax
c0013d4a:	74 38                	je     c0013d84 <unblockTask(ThreadControlBlock*)+0x54>
c0013d4c:	83 ec 0c             	sub    esp,0xc
c0013d4f:	68 84 51 02 c0       	push   0xc0025184
c0013d54:	e8 63 8a 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d59:	83 c4 10             	add    esp,0x10
c0013d5c:	85 c0                	test   eax,eax
c0013d5e:	75 1c                	jne    c0013d7c <unblockTask(ThreadControlBlock*)+0x4c>
c0013d60:	eb 5e                	jmp    c0013dc0 <unblockTask(ThreadControlBlock*)+0x90>
c0013d62:	66 90                	xchg   ax,ax
c0013d64:	83 ec 08             	sub    esp,0x8
c0013d67:	50                   	push   eax
c0013d68:	68 84 51 02 c0       	push   0xc0025184
c0013d6d:	e8 fa 8d 00 00       	call   c001cb6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013d72:	83 c4 10             	add    esp,0x10
c0013d75:	85 c0                	test   eax,eax
c0013d77:	74 47                	je     c0013dc0 <unblockTask(ThreadControlBlock*)+0x90>
c0013d79:	8d 76 00             	lea    esi,[esi+0x0]
c0013d7c:	39 c3                	cmp    ebx,eax
c0013d7e:	75 e4                	jne    c0013d64 <unblockTask(ThreadControlBlock*)+0x34>
c0013d80:	eb 12                	jmp    c0013d94 <unblockTask(ThreadControlBlock*)+0x64>
c0013d82:	66 90                	xchg   ax,ax
c0013d84:	83 ec 0c             	sub    esp,0xc
c0013d87:	68 7a ec 01 c0       	push   0xc001ec7a
c0013d8c:	e8 63 68 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0013d91:	83 c4 10             	add    esp,0x10
c0013d94:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0013d99:	48                   	dec    eax
c0013d9a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0013d9f:	75 03                	jne    c0013da4 <unblockTask(ThreadControlBlock*)+0x74>
c0013da1:	fb                   	sti    
c0013da2:	66 90                	xchg   ax,ax
c0013da4:	83 c4 08             	add    esp,0x8
c0013da7:	5b                   	pop    ebx
c0013da8:	c3                   	ret    
c0013da9:	8d 76 00             	lea    esi,[esi+0x0]
c0013dac:	83 ec 0c             	sub    esp,0xc
c0013daf:	68 63 ec 01 c0       	push   0xc001ec63
c0013db4:	e8 3b 68 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0013db9:	83 c4 10             	add    esp,0x10
c0013dbc:	eb d6                	jmp    c0013d94 <unblockTask(ThreadControlBlock*)+0x64>
c0013dbe:	66 90                	xchg   ax,ax
c0013dc0:	83 ec 08             	sub    esp,0x8
c0013dc3:	53                   	push   ebx
c0013dc4:	68 84 51 02 c0       	push   0xc0025184
c0013dc9:	e8 ae 8a 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013dce:	83 c4 10             	add    esp,0x10
c0013dd1:	eb c1                	jmp    c0013d94 <unblockTask(ThreadControlBlock*)+0x64>
c0013dd3:	90                   	nop

c0013dd4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013dd4:	55                   	push   ebp
c0013dd5:	57                   	push   edi
c0013dd6:	56                   	push   esi
c0013dd7:	53                   	push   ebx
c0013dd8:	83 ec 1c             	sub    esp,0x1c
c0013ddb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013ddf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013de2:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013de8:	85 ed                	test   ebp,ebp
c0013dea:	7e 24                	jle    c0013e10 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013dec:	31 f6                	xor    esi,esi
c0013dee:	66 90                	xchg   ax,ax
c0013df0:	83 ec 0c             	sub    esp,0xc
c0013df3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013dfa:	46                   	inc    esi
c0013dfb:	57                   	push   edi
c0013dfc:	e8 c8 39 ff ff       	call   c00077c9 <free>
c0013e01:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013e04:	83 c4 10             	add    esp,0x10
c0013e07:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013e0d:	7f e1                	jg     c0013df0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013e0f:	90                   	nop
c0013e10:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013e1a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013e1f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013e22:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013e25:	d3 c0                	rol    eax,cl
c0013e27:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013e2e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e31:	89 f7                	mov    edi,esi
c0013e33:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013e3b:	0f 85 77 01 00 00    	jne    c0013fb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013e41:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013e47:	85 ed                	test   ebp,ebp
c0013e49:	74 1d                	je     c0013e68 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013e4b:	83 ec 0c             	sub    esp,0xc
c0013e4e:	55                   	push   ebp
c0013e4f:	e8 34 c1 ff ff       	call   c000ff88 <EnvVarContainer::~EnvVarContainer()>
c0013e54:	59                   	pop    ecx
c0013e55:	5e                   	pop    esi
c0013e56:	6a 0c                	push   0xc
c0013e58:	55                   	push   ebp
c0013e59:	e8 a0 66 ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c0013e5e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013e61:	83 c4 10             	add    esp,0x10
c0013e64:	89 f7                	mov    edi,esi
c0013e66:	66 90                	xchg   ax,ax
c0013e68:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e6e:	85 c0                	test   eax,eax
c0013e70:	0f 84 b6 00 00 00    	je     c0013f2c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e76:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013e79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e7d:	31 c9                	xor    ecx,ecx
c0013e7f:	eb 17                	jmp    c0013e98 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013e81:	8d 76 00             	lea    esi,[esi+0x0]
c0013e84:	41                   	inc    ecx
c0013e85:	83 f9 10             	cmp    ecx,0x10
c0013e88:	0f 84 9e 00 00 00    	je     c0013f2c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013e8e:	66 90                	xchg   ax,ax
c0013e90:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013e96:	66 90                	xchg   ax,ax
c0013e98:	31 d2                	xor    edx,edx
c0013e9a:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013ea1:	d3 fa                	sar    edx,cl
c0013ea3:	83 e2 01             	and    edx,0x1
c0013ea6:	74 dc                	je     c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013ea8:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013eab:	01 d2                	add    edx,edx
c0013ead:	01 ca                	add    edx,ecx
c0013eaf:	8d 14 92             	lea    edx,[edx+edx*4]
c0013eb2:	01 d0                	add    eax,edx
c0013eb4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013eba:	83 fd 07             	cmp    ebp,0x7
c0013ebd:	75 c5                	jne    c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013ebf:	05 40 02 00 00       	add    eax,0x240
c0013ec4:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013ec7:	83 fd ff             	cmp    ebp,0xffffffff
c0013eca:	0f 8c f0 00 00 00    	jl     c0013fc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013ed0:	0f 84 ae 01 00 00    	je     c0014084 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013ed6:	85 ed                	test   ebp,ebp
c0013ed8:	0f 84 92 01 00 00    	je     c0014070 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013ede:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013ee0:	75 a2                	jne    c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013ee2:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013ee8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013eec:	01 d0                	add    eax,edx
c0013eee:	66 90                	xchg   ax,ax
c0013ef0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013ef4:	83 ec 0c             	sub    esp,0xc
c0013ef7:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013efd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f00:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013f06:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013f0d:	50                   	push   eax
c0013f0e:	e8 1d fe ff ff       	call   c0013d30 <unblockTask(ThreadControlBlock*)>
c0013f13:	83 c4 10             	add    esp,0x10
c0013f16:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013f19:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013f1d:	89 f7                	mov    edi,esi
c0013f1f:	41                   	inc    ecx
c0013f20:	83 f9 10             	cmp    ecx,0x10
c0013f23:	0f 85 67 ff ff ff    	jne    c0013e90 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013f29:	8d 76 00             	lea    esi,[esi+0x0]
c0013f2c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013f32:	85 c0                	test   eax,eax
c0013f34:	74 62                	je     c0013f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013f36:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013f3c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013f42:	74 54                	je     c0013f98 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013f44:	83 ec 0c             	sub    esp,0xc
c0013f47:	68 84 51 02 c0       	push   0xc0025184
c0013f4c:	e8 6b 88 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013f51:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0013f58:	89 c7                	mov    edi,eax
c0013f5a:	e8 41 88 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013f5f:	83 c4 10             	add    esp,0x10
c0013f62:	84 c0                	test   al,al
c0013f64:	0f 84 ce 00 00 00    	je     c0014038 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013f6a:	66 90                	xchg   ax,ax
c0013f6c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f6f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013f75:	85 d2                	test   edx,edx
c0013f77:	74 0f                	je     c0013f88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013f79:	83 ec 0c             	sub    esp,0xc
c0013f7c:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f7e:	52                   	push   edx
c0013f7f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f82:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013f85:	83 c4 10             	add    esp,0x10
c0013f88:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013f92:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013f95:	8d 76 00             	lea    esi,[esi+0x0]
c0013f98:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013f9e:	85 db                	test   ebx,ebx
c0013fa0:	74 16                	je     c0013fb8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013fa2:	83 ec 0c             	sub    esp,0xc
c0013fa5:	53                   	push   ebx
c0013fa6:	e8 e9 57 ff ff       	call   c0009794 <VAS::~VAS()>
c0013fab:	58                   	pop    eax
c0013fac:	5a                   	pop    edx
c0013fad:	6a 14                	push   0x14
c0013faf:	53                   	push   ebx
c0013fb0:	e8 49 65 ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c0013fb5:	83 c4 10             	add    esp,0x10
c0013fb8:	83 c4 1c             	add    esp,0x1c
c0013fbb:	5b                   	pop    ebx
c0013fbc:	5e                   	pop    esi
c0013fbd:	5f                   	pop    edi
c0013fbe:	5d                   	pop    ebp
c0013fbf:	c3                   	ret    
c0013fc0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	68 2c ed 01 c0       	push   0xc001ed2c
c0013fcc:	e8 a6 c2 ff ff       	call   c0010277 <KePanic(char const*)>
c0013fd1:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013fd4:	83 c4 10             	add    esp,0x10
c0013fd7:	89 f7                	mov    edi,esi
c0013fd9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013fdd:	e9 a2 fe ff ff       	jmp    c0013e84 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013fe2:	66 90                	xchg   ax,ax
c0013fe4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013fea:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013ff0:	75 1e                	jne    c0014010 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013ff2:	83 ec 0c             	sub    esp,0xc
c0013ff5:	68 94 ed 01 c0       	push   0xc001ed94
c0013ffa:	e8 f5 65 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0013fff:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014006:	e8 5d fa ff ff       	call   c0013a68 <blockTask(TaskState)>
c001400b:	83 c4 10             	add    esp,0x10
c001400e:	66 90                	xchg   ax,ax
c0014010:	83 ec 08             	sub    esp,0x8
c0014013:	56                   	push   esi
c0014014:	68 84 51 02 c0       	push   0xc0025184
c0014019:	e8 5e 88 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001401e:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c0014025:	e8 92 87 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001402a:	83 c4 10             	add    esp,0x10
c001402d:	39 f8                	cmp    eax,edi
c001402f:	0f 84 37 ff ff ff    	je     c0013f6c <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0014035:	8d 76 00             	lea    esi,[esi+0x0]
c0014038:	83 ec 0c             	sub    esp,0xc
c001403b:	68 84 51 02 c0       	push   0xc0025184
c0014040:	e8 77 87 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014045:	c7 04 24 84 51 02 c0 	mov    DWORD PTR [esp],0xc0025184
c001404c:	89 c6                	mov    esi,eax
c001404e:	e8 71 87 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014053:	83 c4 10             	add    esp,0x10
c0014056:	39 f3                	cmp    ebx,esi
c0014058:	74 b6                	je     c0014010 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001405a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001405d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014060:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0014066:	75 a8                	jne    c0014010 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0014068:	e9 77 ff ff ff       	jmp    c0013fe4 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c001406d:	8d 76 00             	lea    esi,[esi+0x0]
c0014070:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	68 60 ed 01 c0       	push   0xc001ed60
c001407c:	e9 4b ff ff ff       	jmp    c0013fcc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0014081:	8d 76 00             	lea    esi,[esi+0x0]
c0014084:	8b 36                	mov    esi,DWORD PTR [esi]
c0014086:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001408a:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c001408d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014090:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0014096:	01 d7                	add    edi,edx
c0014098:	89 f8                	mov    eax,edi
c001409a:	e9 51 fe ff ff       	jmp    c0013ef0 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c001409f:	90                   	nop

c00140a0 <cleanerTaskFunction(void*)>:
c00140a0:	53                   	push   ebx
c00140a1:	83 ec 08             	sub    esp,0x8
c00140a4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00140a9:	48                   	dec    eax
c00140aa:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00140af:	75 03                	jne    c00140b4 <cleanerTaskFunction(void*)+0x14>
c00140b1:	fb                   	sti    
c00140b2:	66 90                	xchg   ax,ax
c00140b4:	fa                   	cli    
c00140b5:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00140ba:	80 3d 4c 51 02 c0 00 	cmp    BYTE PTR ds:0xc002514c,0x0
c00140c1:	8d 50 01             	lea    edx,[eax+0x1]
c00140c4:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c00140ca:	0f 84 ac 00 00 00    	je     c001417c <cleanerTaskFunction(void*)+0xdc>
c00140d0:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00140d5:	85 c0                	test   eax,eax
c00140d7:	75 03                	jne    c00140dc <cleanerTaskFunction(void*)+0x3c>
c00140d9:	fb                   	sti    
c00140da:	66 90                	xchg   ax,ax
c00140dc:	c6 05 4c 51 02 c0 00 	mov    BYTE PTR ds:0xc002514c,0x0
c00140e3:	fa                   	cli    
c00140e4:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140ea:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00140f0:	fa                   	cli    
c00140f1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00140f7:	eb 2b                	jmp    c0014124 <cleanerTaskFunction(void*)+0x84>
c00140f9:	8d 76 00             	lea    esi,[esi+0x0]
c00140fc:	83 ec 0c             	sub    esp,0xc
c00140ff:	68 6c 51 02 c0       	push   0xc002516c
c0014104:	e8 b3 86 00 00       	call   c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014109:	c7 04 24 6c 51 02 c0 	mov    DWORD PTR [esp],0xc002516c
c0014110:	89 c3                	mov    ebx,eax
c0014112:	e8 ad 86 00 00       	call   c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0014117:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001411a:	e8 b5 fc ff ff       	call   c0013dd4 <cleanupTerminatedTask(ThreadControlBlock*)>
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	66 90                	xchg   ax,ax
c0014124:	83 ec 0c             	sub    esp,0xc
c0014127:	68 6c 51 02 c0       	push   0xc002516c
c001412c:	e8 6f 86 00 00       	call   c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0014131:	83 c4 10             	add    esp,0x10
c0014134:	84 c0                	test   al,al
c0014136:	74 c4                	je     c00140fc <cleanerTaskFunction(void*)+0x5c>
c0014138:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001413d:	48                   	dec    eax
c001413e:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014143:	75 03                	jne    c0014148 <cleanerTaskFunction(void*)+0xa8>
c0014145:	fb                   	sti    
c0014146:	66 90                	xchg   ax,ax
c0014148:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c001414d:	48                   	dec    eax
c001414e:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c0014153:	0f 85 4b ff ff ff    	jne    c00140a4 <cleanerTaskFunction(void*)+0x4>
c0014159:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c001415e:	85 c0                	test   eax,eax
c0014160:	0f 84 3e ff ff ff    	je     c00140a4 <cleanerTaskFunction(void*)+0x4>
c0014166:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c0014170:	e8 f7 f6 ff ff       	call   c001386c <schedule()>
c0014175:	e9 2a ff ff ff       	jmp    c00140a4 <cleanerTaskFunction(void*)+0x4>
c001417a:	66 90                	xchg   ax,ax
c001417c:	83 ec 0c             	sub    esp,0xc
c001417f:	6a 02                	push   0x2
c0014181:	e8 ba f8 ff ff       	call   c0013a40 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014186:	83 c4 10             	add    esp,0x10
c0014189:	e9 4e ff ff ff       	jmp    c00140dc <cleanerTaskFunction(void*)+0x3c>
c001418e:	66 90                	xchg   ax,ax

c0014190 <terminateTask(int)>:
c0014190:	83 ec 14             	sub    esp,0x14
c0014193:	fa                   	cli    
c0014194:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001419a:	ff 05 64 51 02 c0    	inc    DWORD PTR ds:0xc0025164
c00141a0:	fa                   	cli    
c00141a1:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00141a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00141ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141b0:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00141b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141b8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00141bb:	50                   	push   eax
c00141bc:	68 6c 51 02 c0       	push   0xc002516c
c00141c1:	e8 b6 86 00 00       	call   c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00141c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141cb:	83 c4 10             	add    esp,0x10
c00141ce:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00141d5:	a1 48 51 02 c0       	mov    eax,ds:0xc0025148
c00141da:	85 c0                	test   eax,eax
c00141dc:	74 5e                	je     c001423c <terminateTask(int)+0xac>
c00141de:	83 ec 0c             	sub    esp,0xc
c00141e1:	c6 05 4c 51 02 c0 01 	mov    BYTE PTR ds:0xc002514c,0x1
c00141e8:	50                   	push   eax
c00141e9:	e8 42 fb ff ff       	call   c0013d30 <unblockTask(ThreadControlBlock*)>
c00141ee:	83 c4 10             	add    esp,0x10
c00141f1:	8d 76 00             	lea    esi,[esi+0x0]
c00141f4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00141f9:	48                   	dec    eax
c00141fa:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00141ff:	75 03                	jne    c0014204 <terminateTask(int)+0x74>
c0014201:	fb                   	sti    
c0014202:	66 90                	xchg   ax,ax
c0014204:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014209:	48                   	dec    eax
c001420a:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c001420f:	75 0b                	jne    c001421c <terminateTask(int)+0x8c>
c0014211:	83 3d 60 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025160,0x0
c0014218:	75 36                	jne    c0014250 <terminateTask(int)+0xc0>
c001421a:	66 90                	xchg   ax,ax
c001421c:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014221:	48                   	dec    eax
c0014222:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014227:	75 03                	jne    c001422c <terminateTask(int)+0x9c>
c0014229:	fb                   	sti    
c001422a:	66 90                	xchg   ax,ax
c001422c:	fa                   	cli    
c001422d:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014233:	90                   	nop
c0014234:	e8 33 f6 ff ff       	call   c001386c <schedule()>
c0014239:	eb e1                	jmp    c001421c <terminateTask(int)+0x8c>
c001423b:	90                   	nop
c001423c:	83 ec 0c             	sub    esp,0xc
c001423f:	68 91 ec 01 c0       	push   0xc001ec91
c0014244:	e8 ab 63 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0014249:	83 c4 10             	add    esp,0x10
c001424c:	eb a6                	jmp    c00141f4 <terminateTask(int)+0x64>
c001424e:	66 90                	xchg   ax,ax
c0014250:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c001425a:	eb d8                	jmp    c0014234 <terminateTask(int)+0xa4>

c001425c <Thr::terminateFromIRQ(int)>:
c001425c:	83 ec 18             	sub    esp,0x18
c001425f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014263:	50                   	push   eax
c0014264:	e8 27 ff ff ff       	call   c0014190 <terminateTask(int)>
c0014269:	90                   	nop
c001426a:	66 90                	xchg   ax,ax

c001426c <Semaphore::release()>:
c001426c:	83 ec 0c             	sub    esp,0xc
c001426f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014273:	fa                   	cli    
c0014274:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c0014279:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001427f:	8d 48 01             	lea    ecx,[eax+0x1]
c0014282:	89 0d 64 51 02 c0    	mov    DWORD PTR ds:0xc0025164,ecx
c0014288:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001428b:	85 c9                	test   ecx,ecx
c001428d:	74 41                	je     c00142d0 <Semaphore::release()+0x64>
c001428f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014292:	83 ec 0c             	sub    esp,0xc
c0014295:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014298:	51                   	push   ecx
c0014299:	e8 92 fa ff ff       	call   c0013d30 <unblockTask(ThreadControlBlock*)>
c001429e:	a1 64 51 02 c0       	mov    eax,ds:0xc0025164
c00142a3:	83 c4 10             	add    esp,0x10
c00142a6:	48                   	dec    eax
c00142a7:	90                   	nop
c00142a8:	a3 64 51 02 c0       	mov    ds:0xc0025164,eax
c00142ad:	85 c0                	test   eax,eax
c00142af:	75 0b                	jne    c00142bc <Semaphore::release()+0x50>
c00142b1:	a1 60 51 02 c0       	mov    eax,ds:0xc0025160
c00142b6:	85 c0                	test   eax,eax
c00142b8:	75 1e                	jne    c00142d8 <Semaphore::release()+0x6c>
c00142ba:	66 90                	xchg   ax,ax
c00142bc:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00142c1:	48                   	dec    eax
c00142c2:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00142c7:	75 03                	jne    c00142cc <Semaphore::release()+0x60>
c00142c9:	fb                   	sti    
c00142ca:	66 90                	xchg   ax,ax
c00142cc:	83 c4 0c             	add    esp,0xc
c00142cf:	c3                   	ret    
c00142d0:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00142d3:	eb d3                	jmp    c00142a8 <Semaphore::release()+0x3c>
c00142d5:	8d 76 00             	lea    esi,[esi+0x0]
c00142d8:	c7 05 60 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025160,0x0
c00142e2:	e8 85 f5 ff ff       	call   c001386c <schedule()>
c00142e7:	eb d3                	jmp    c00142bc <Semaphore::release()+0x50>
c00142e9:	8d 76 00             	lea    esi,[esi+0x0]

c00142ec <__static_initialization_and_destruction_0(int, int)>:
c00142ec:	83 ec 0c             	sub    esp,0xc
c00142ef:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00142f4:	0f 85 8e 00 00 00    	jne    c0014388 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00142fa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014302:	0f 85 80 00 00 00    	jne    c0014388 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014308:	83 ec 0c             	sub    esp,0xc
c001430b:	68 84 51 02 c0       	push   0xc0025184
c0014310:	e8 13 88 00 00       	call   c001cb28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014315:	83 c4 10             	add    esp,0x10
c0014318:	83 ec 04             	sub    esp,0x4
c001431b:	68 44 f8 01 c0       	push   0xc001f844
c0014320:	68 84 51 02 c0       	push   0xc0025184
c0014325:	68 d8 ca 01 c0       	push   0xc001cad8
c001432a:	e8 7f 61 ff ff       	call   c000a4ae <__cxa_atexit>
c001432f:	83 c4 10             	add    esp,0x10
c0014332:	83 ec 0c             	sub    esp,0xc
c0014335:	68 78 51 02 c0       	push   0xc0025178
c001433a:	e8 e9 87 00 00       	call   c001cb28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001433f:	83 c4 10             	add    esp,0x10
c0014342:	83 ec 04             	sub    esp,0x4
c0014345:	68 44 f8 01 c0       	push   0xc001f844
c001434a:	68 78 51 02 c0       	push   0xc0025178
c001434f:	68 d8 ca 01 c0       	push   0xc001cad8
c0014354:	e8 55 61 ff ff       	call   c000a4ae <__cxa_atexit>
c0014359:	83 c4 10             	add    esp,0x10
c001435c:	83 ec 0c             	sub    esp,0xc
c001435f:	68 6c 51 02 c0       	push   0xc002516c
c0014364:	e8 bf 87 00 00       	call   c001cb28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014369:	83 c4 10             	add    esp,0x10
c001436c:	83 ec 04             	sub    esp,0x4
c001436f:	68 44 f8 01 c0       	push   0xc001f844
c0014374:	68 6c 51 02 c0       	push   0xc002516c
c0014379:	68 d8 ca 01 c0       	push   0xc001cad8
c001437e:	e8 2b 61 ff ff       	call   c000a4ae <__cxa_atexit>
c0014383:	83 c4 10             	add    esp,0x10
c0014386:	66 90                	xchg   ax,ax
c0014388:	90                   	nop
c0014389:	83 c4 0c             	add    esp,0xc
c001438c:	c3                   	ret    
c001438d:	8d 76 00             	lea    esi,[esi+0x0]

c0014390 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0014390:	83 ec 0c             	sub    esp,0xc
c0014393:	83 ec 08             	sub    esp,0x8
c0014396:	68 ff ff 00 00       	push   0xffff
c001439b:	6a 01                	push   0x1
c001439d:	e8 4a ff ff ff       	call   c00142ec <__static_initialization_and_destruction_0(int, int)>
c00143a2:	83 c4 10             	add    esp,0x10
c00143a5:	83 c4 0c             	add    esp,0xc
c00143a8:	c3                   	ret    

c00143a9 <Vm::inbv(unsigned short)>:
c00143a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00143ad:	66 81 fa fe fe       	cmp    dx,0xfefe
c00143b2:	75 06                	jne    c00143ba <Vm::inbv(unsigned short)+0x11>
c00143b4:	a0 cc 51 02 c0       	mov    al,ds:0xc00251cc
c00143b9:	c3                   	ret    
c00143ba:	ec                   	in     al,dx
c00143bb:	c3                   	ret    

c00143bc <Vm::outbv(unsigned short, unsigned char)>:
c00143bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00143c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00143c4:	66 81 fa fe fe       	cmp    dx,0xfefe
c00143c9:	75 25                	jne    c00143f0 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00143cb:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c00143d1:	8d 51 01             	lea    edx,[ecx+0x1]
c00143d4:	88 81 e0 51 02 c0    	mov    BYTE PTR [ecx-0x3ffdae20],al
c00143da:	89 15 cc 51 02 c0    	mov    DWORD PTR ds:0xc00251cc,edx
c00143e0:	83 fa 20             	cmp    edx,0x20
c00143e3:	75 0c                	jne    c00143f1 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00143e5:	c7 05 cc 51 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x1f
c00143ef:	c3                   	ret    
c00143f0:	ee                   	out    dx,al
c00143f1:	c3                   	ret    

c00143f2 <Vm::realToLinear(unsigned short, unsigned short)>:
c00143f2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00143f7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00143fc:	c1 e0 04             	shl    eax,0x4
c00143ff:	01 d0                	add    eax,edx
c0014401:	c3                   	ret    

c0014402 <Vm::getSegment(unsigned int)>:
c0014402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014406:	c1 e8 10             	shr    eax,0x10
c0014409:	c3                   	ret    

c001440a <Vm::getOffset(unsigned int)>:
c001440a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001440e:	c3                   	ret    

c001440f <Vm::mainloop2()>:
c001440f:	83 ec 18             	sub    esp,0x18
c0014412:	fa                   	cli    
c0014413:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014419:	6a 02                	push   0x2
c001441b:	c6 05 c5 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c5,0x1
c0014422:	e8 19 f6 ff ff       	call   c0013a40 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014427:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001442c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014430:	52                   	push   edx
c0014431:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014435:	52                   	push   edx
c0014436:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001443a:	52                   	push   edx
c001443b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001443f:	50                   	push   eax
c0014440:	e8 ca bd fe ff       	call   c000020f <goToVM86>
c0014445:	83 c4 2c             	add    esp,0x2c
c0014448:	c3                   	ret    

c0014449 <Vm::mainVm8086Loop(void*)>:
c0014449:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001444e:	48                   	dec    eax
c001444f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014454:	75 01                	jne    c0014457 <Vm::mainVm8086Loop(void*)+0xe>
c0014456:	fb                   	sti    
c0014457:	eb b6                	jmp    c001440f <Vm::mainloop2()>

c0014459 <Vm::mainloop3(unsigned long)>:
c0014459:	83 ec 18             	sub    esp,0x18
c001445c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014460:	fa                   	cli    
c0014461:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014467:	6a 02                	push   0x2
c0014469:	c6 05 c4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251c4,0x1
c0014470:	a3 c0 51 02 c0       	mov    ds:0xc00251c0,eax
c0014475:	e8 c6 f5 ff ff       	call   c0013a40 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001447a:	83 c4 1c             	add    esp,0x1c
c001447d:	eb 90                	jmp    c001440f <Vm::mainloop2()>

c001447f <Vm::initialise8086()>:
c001447f:	83 ec 0c             	sub    esp,0xc
c0014482:	68 80 00 00 00       	push   0x80
c0014487:	6a 00                	push   0x0
c0014489:	68 49 44 01 c0       	push   0xc0014449
c001448e:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0014494:	e8 b3 f1 ff ff       	call   c001364c <Process::createThread(void (*)(void*), void*, int)>
c0014499:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00144a0:	a3 c8 51 02 c0       	mov    ds:0xc00251c8,eax
c00144a5:	68 00 01 00 00       	push   0x100
c00144aa:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00144af:	6a 00                	push   0x0
c00144b1:	6a 00                	push   0x0
c00144b3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00144b9:	e8 34 57 ff ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00144be:	83 c4 2c             	add    esp,0x2c
c00144c1:	c3                   	ret    

c00144c2 <Vm::finish8086()>:
c00144c2:	53                   	push   ebx
c00144c3:	83 ec 08             	sub    esp,0x8
c00144c6:	fa                   	cli    
c00144c7:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c00144cd:	80 3d c4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c4,0x0
c00144d4:	75 15                	jne    c00144eb <Vm::finish8086()+0x29>
c00144d6:	e8 91 f3 ff ff       	call   c001386c <schedule()>
c00144db:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00144e0:	48                   	dec    eax
c00144e1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00144e6:	75 de                	jne    c00144c6 <Vm::finish8086()+0x4>
c00144e8:	fb                   	sti    
c00144e9:	eb db                	jmp    c00144c6 <Vm::finish8086()+0x4>
c00144eb:	83 ec 0c             	sub    esp,0xc
c00144ee:	8b 1d c0 51 02 c0    	mov    ebx,DWORD PTR ds:0xc00251c0
c00144f4:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c00144fa:	c6 05 c4 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c4,0x0
c0014501:	e8 2a f8 ff ff       	call   c0013d30 <unblockTask(ThreadControlBlock*)>
c0014506:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001450b:	83 c4 10             	add    esp,0x10
c001450e:	8d 50 ff             	lea    edx,[eax-0x1]
c0014511:	89 15 68 51 02 c0    	mov    DWORD PTR ds:0xc0025168,edx
c0014517:	85 d2                	test   edx,edx
c0014519:	75 01                	jne    c001451c <Vm::finish8086()+0x5a>
c001451b:	fb                   	sti    
c001451c:	89 d8                	mov    eax,ebx
c001451e:	83 c4 08             	add    esp,0x8
c0014521:	5b                   	pop    ebx
c0014522:	c3                   	ret    

c0014523 <Vm::getOutput8086(unsigned char*)>:
c0014523:	57                   	push   edi
c0014524:	8b 0d cc 51 02 c0    	mov    ecx,DWORD PTR ds:0xc00251cc
c001452a:	56                   	push   esi
c001452b:	be e0 51 02 c0       	mov    esi,0xc00251e0
c0014530:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014534:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014536:	a1 cc 51 02 c0       	mov    eax,ds:0xc00251cc
c001453b:	5e                   	pop    esi
c001453c:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014546:	5f                   	pop    edi
c0014547:	c3                   	ret    

c0014548 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014548:	55                   	push   ebp
c0014549:	57                   	push   edi
c001454a:	56                   	push   esi
c001454b:	53                   	push   ebx
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014553:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0014557:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001455b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001455f:	fa                   	cli    
c0014560:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c0014566:	80 3d c5 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251c5,0x0
c001456d:	75 15                	jne    c0014584 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001456f:	e8 f8 f2 ff ff       	call   c001386c <schedule()>
c0014574:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014579:	48                   	dec    eax
c001457a:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001457f:	75 de                	jne    c001455f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014581:	fb                   	sti    
c0014582:	eb db                	jmp    c001455f <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014584:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c0014589:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014593:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0014597:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001459b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001459f:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00145a3:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00145a7:	0f b7 ff             	movzx  edi,di
c00145aa:	0f b7 f6             	movzx  esi,si
c00145ad:	50                   	push   eax
c00145ae:	6a 20                	push   0x20
c00145b0:	6a 00                	push   0x0
c00145b2:	68 e0 51 02 c0       	push   0xc00251e0
c00145b7:	e8 14 bf fe ff       	call   c00004d0 <memset>
c00145bc:	5a                   	pop    edx
c00145bd:	59                   	pop    ecx
c00145be:	57                   	push   edi
c00145bf:	56                   	push   esi
c00145c0:	e8 2d fe ff ff       	call   c00143f2 <Vm::realToLinear(unsigned short, unsigned short)>
c00145c5:	83 c4 10             	add    esp,0x10
c00145c8:	89 c7                	mov    edi,eax
c00145ca:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00145ce:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00145d2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00145d4:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00145d9:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c00145e0:	48                   	dec    eax
c00145e1:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00145e6:	75 01                	jne    c00145e9 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00145e8:	fb                   	sti    
c00145e9:	83 ec 0c             	sub    esp,0xc
c00145ec:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c00145f2:	e8 39 f7 ff ff       	call   c0013d30 <unblockTask(ThreadControlBlock*)>
c00145f7:	83 c4 1c             	add    esp,0x1c
c00145fa:	b0 01                	mov    al,0x1
c00145fc:	5b                   	pop    ebx
c00145fd:	5e                   	pop    esi
c00145fe:	5f                   	pop    edi
c00145ff:	5d                   	pop    ebp
c0014600:	c3                   	ret    

c0014601 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014601:	55                   	push   ebp
c0014602:	57                   	push   edi
c0014603:	56                   	push   esi
c0014604:	53                   	push   ebx
c0014605:	83 ec 2c             	sub    esp,0x2c
c0014608:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001460c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014610:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014614:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014618:	fa                   	cli    
c0014619:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001461f:	0f b6 35 c5 51 02 c0 	movzx  esi,BYTE PTR ds:0xc00251c5
c0014626:	89 f0                	mov    eax,esi
c0014628:	84 c0                	test   al,al
c001462a:	75 1d                	jne    c0014649 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001462c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014630:	e8 37 f2 ff ff       	call   c001386c <schedule()>
c0014635:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001463a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001463e:	48                   	dec    eax
c001463f:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014644:	75 d2                	jne    c0014618 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014646:	fb                   	sti    
c0014647:	eb cf                	jmp    c0014618 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014649:	a1 c8 51 02 c0       	mov    eax,ds:0xc00251c8
c001464e:	c7 05 cc 51 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00251cc,0x0
c0014658:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c001465c:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014660:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0014664:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014668:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001466c:	50                   	push   eax
c001466d:	6a 20                	push   0x20
c001466f:	6a 00                	push   0x0
c0014671:	68 e0 51 02 c0       	push   0xc00251e0
c0014676:	e8 55 be fe ff       	call   c00004d0 <memset>
c001467b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014682:	e8 32 31 ff ff       	call   c00077b9 <malloc>
c0014687:	83 c4 0c             	add    esp,0xc
c001468a:	89 c3                	mov    ebx,eax
c001468c:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0014692:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0014696:	50                   	push   eax
c0014697:	e8 ce 64 ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c001469c:	83 c4 10             	add    esp,0x10
c001469f:	85 db                	test   ebx,ebx
c00146a1:	75 0a                	jne    c00146ad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00146a3:	83 ec 0c             	sub    esp,0xc
c00146a6:	68 bc ed 01 c0       	push   0xc001edbc
c00146ab:	eb 3e                	jmp    c00146eb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00146ad:	50                   	push   eax
c00146ae:	8d 44 24 17          	lea    eax,[esp+0x17]
c00146b2:	50                   	push   eax
c00146b3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00146b7:	50                   	push   eax
c00146b8:	53                   	push   ebx
c00146b9:	e8 18 68 ff ff       	call   c000aed6 <File::stat(unsigned long long*, bool*)>
c00146be:	83 c4 10             	add    esp,0x10
c00146c1:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00146c6:	74 0a                	je     c00146d2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00146c8:	83 ec 0c             	sub    esp,0xc
c00146cb:	68 d0 ed 01 c0       	push   0xc001edd0
c00146d0:	eb 19                	jmp    c00146eb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00146d2:	51                   	push   ecx
c00146d3:	51                   	push   ecx
c00146d4:	6a 01                	push   0x1
c00146d6:	53                   	push   ebx
c00146d7:	e8 4e 65 ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c00146dc:	83 c4 10             	add    esp,0x10
c00146df:	85 c0                	test   eax,eax
c00146e1:	74 24                	je     c0014707 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00146e3:	83 ec 0c             	sub    esp,0xc
c00146e6:	68 e9 ed 01 c0       	push   0xc001ede9
c00146eb:	e8 87 bb ff ff       	call   c0010277 <KePanic(char const*)>
c00146f0:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00146f5:	83 c4 10             	add    esp,0x10
c00146f8:	48                   	dec    eax
c00146f9:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00146fe:	85 c0                	test   eax,eax
c0014700:	75 01                	jne    c0014703 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014702:	fb                   	sti    
c0014703:	31 f6                	xor    esi,esi
c0014705:	eb 58                	jmp    c001475f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014707:	0f b7 ed             	movzx  ebp,bp
c001470a:	50                   	push   eax
c001470b:	0f b7 ff             	movzx  edi,di
c001470e:	50                   	push   eax
c001470f:	55                   	push   ebp
c0014710:	57                   	push   edi
c0014711:	e8 dc fc ff ff       	call   c00143f2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014716:	5a                   	pop    edx
c0014717:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014719:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001471d:	51                   	push   ecx
c001471e:	50                   	push   eax
c001471f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014723:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014727:	53                   	push   ebx
c0014728:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001472b:	83 c4 14             	add    esp,0x14
c001472e:	53                   	push   ebx
c001472f:	e8 54 65 ff ff       	call   c000ac88 <File::close()>
c0014734:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c0014739:	83 c4 10             	add    esp,0x10
c001473c:	48                   	dec    eax
c001473d:	c6 05 c5 51 02 c0 00 	mov    BYTE PTR ds:0xc00251c5,0x0
c0014744:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0014749:	85 c0                	test   eax,eax
c001474b:	75 01                	jne    c001474e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001474d:	fb                   	sti    
c001474e:	83 ec 0c             	sub    esp,0xc
c0014751:	ff 35 c8 51 02 c0    	push   DWORD PTR ds:0xc00251c8
c0014757:	e8 d4 f5 ff ff       	call   c0013d30 <unblockTask(ThreadControlBlock*)>
c001475c:	83 c4 10             	add    esp,0x10
c001475f:	83 c4 2c             	add    esp,0x2c
c0014762:	89 f0                	mov    eax,esi
c0014764:	5b                   	pop    ebx
c0014765:	5e                   	pop    esi
c0014766:	5f                   	pop    edi
c0014767:	5d                   	pop    ebp
c0014768:	c3                   	ret    

c0014769 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014769:	57                   	push   edi
c001476a:	56                   	push   esi
c001476b:	53                   	push   ebx
c001476c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014774:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014778:	83 e8 06             	sub    eax,0x6
c001477b:	0f b7 c0             	movzx  eax,ax
c001477e:	50                   	push   eax
c001477f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0014784:	50                   	push   eax
c0014785:	e8 68 fc ff ff       	call   c00143f2 <Vm::realToLinear(unsigned short, unsigned short)>
c001478a:	5a                   	pop    edx
c001478b:	5e                   	pop    esi
c001478c:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001478f:	8d 56 fa             	lea    edx,[esi-0x6]
c0014792:	81 e2 ff ff 00 00    	and    edx,0xffff
c0014798:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001479b:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001479e:	83 c2 02             	add    edx,0x2
c00147a1:	66 89 10             	mov    WORD PTR [eax],dx
c00147a4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00147a7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00147ab:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00147ae:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00147b2:	89 d6                	mov    esi,edx
c00147b4:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00147ba:	66 81 e6 ff fd       	and    si,0xfdff
c00147bf:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00147c3:	74 07                	je     c00147cc <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00147c5:	89 d6                	mov    esi,edx
c00147c7:	66 81 ce 00 02       	or     si,0x200
c00147cc:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00147d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147d5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00147d9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00147e1:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00147e4:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c00147ec:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c00147ef:	5b                   	pop    ebx
c00147f0:	5e                   	pop    esi
c00147f1:	5f                   	pop    edi
c00147f2:	c3                   	ret    

c00147f3 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c00147f3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00147f8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00147fd:	c1 e0 04             	shl    eax,0x4
c0014800:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014803:	c3                   	ret    

c0014804 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014804:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014809:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001480e:	c1 e0 04             	shl    eax,0x4
c0014811:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014815:	c3                   	ret    

c0014816 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014816:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001481b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014820:	c1 e0 04             	shl    eax,0x4
c0014823:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014826:	c3                   	ret    

c0014827 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014827:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001482c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014831:	c1 e0 04             	shl    eax,0x4
c0014834:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014838:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001483b:	c3                   	ret    

c001483c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001483c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014841:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014846:	c1 e0 04             	shl    eax,0x4
c0014849:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001484d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014851:	c3                   	ret    

c0014852 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0014852:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014857:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001485c:	c1 e0 04             	shl    eax,0x4
c001485f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014863:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0014866:	c3                   	ret    

c0014867 <Vm::faultHandler(regs*)>:
c0014867:	55                   	push   ebp
c0014868:	57                   	push   edi
c0014869:	56                   	push   esi
c001486a:	53                   	push   ebx
c001486b:	83 ec 1c             	sub    esp,0x1c
c001486e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0014872:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014875:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014879:	0f b7 f8             	movzx  edi,ax
c001487c:	52                   	push   edx
c001487d:	0f b7 c0             	movzx  eax,ax
c0014880:	50                   	push   eax
c0014881:	e8 6c fb ff ff       	call   c00143f2 <Vm::realToLinear(unsigned short, unsigned short)>
c0014886:	5a                   	pop    edx
c0014887:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001488a:	59                   	pop    ecx
c001488b:	89 c1                	mov    ecx,eax
c001488d:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014890:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014894:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014899:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001489d:	0f b7 c5             	movzx  eax,bp
c00148a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00148a4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00148a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00148ac:	e8 41 fb ff ff       	call   c00143f2 <Vm::realToLinear(unsigned short, unsigned short)>
c00148b1:	5e                   	pop    esi
c00148b2:	be 06 00 00 00       	mov    esi,0x6
c00148b7:	5a                   	pop    edx
c00148b8:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00148bd:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00148c2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00148c5:	80 fa 9d             	cmp    dl,0x9d
c00148c8:	0f 84 2c 02 00 00    	je     c0014afa <Vm::faultHandler(regs*)+0x293>
c00148ce:	0f 87 91 00 00 00    	ja     c0014965 <Vm::faultHandler(regs*)+0xfe>
c00148d4:	80 fa 66             	cmp    dl,0x66
c00148d7:	0f 84 98 01 00 00    	je     c0014a75 <Vm::faultHandler(regs*)+0x20e>
c00148dd:	77 47                	ja     c0014926 <Vm::faultHandler(regs*)+0xbf>
c00148df:	80 fa 36             	cmp    dl,0x36
c00148e2:	0f 84 80 01 00 00    	je     c0014a68 <Vm::faultHandler(regs*)+0x201>
c00148e8:	77 1a                	ja     c0014904 <Vm::faultHandler(regs*)+0x9d>
c00148ea:	80 fa 26             	cmp    dl,0x26
c00148ed:	0f 84 4e 01 00 00    	je     c0014a41 <Vm::faultHandler(regs*)+0x1da>
c00148f3:	80 fa 2e             	cmp    dl,0x2e
c00148f6:	0f 85 e2 05 00 00    	jne    c0014ede <Vm::faultHandler(regs*)+0x677>
c00148fc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00148ff:	31 f6                	xor    esi,esi
c0014901:	41                   	inc    ecx
c0014902:	eb be                	jmp    c00148c2 <Vm::faultHandler(regs*)+0x5b>
c0014904:	80 fa 64             	cmp    dl,0x64
c0014907:	0f 84 41 01 00 00    	je     c0014a4e <Vm::faultHandler(regs*)+0x1e7>
c001490d:	0f 87 48 01 00 00    	ja     c0014a5b <Vm::faultHandler(regs*)+0x1f4>
c0014913:	80 fa 3e             	cmp    dl,0x3e
c0014916:	0f 85 c2 05 00 00    	jne    c0014ede <Vm::faultHandler(regs*)+0x677>
c001491c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001491f:	be 01 00 00 00       	mov    esi,0x1
c0014924:	eb db                	jmp    c0014901 <Vm::faultHandler(regs*)+0x9a>
c0014926:	80 fa 6d             	cmp    dl,0x6d
c0014929:	0f 84 ec 02 00 00    	je     c0014c1b <Vm::faultHandler(regs*)+0x3b4>
c001492f:	77 17                	ja     c0014948 <Vm::faultHandler(regs*)+0xe1>
c0014931:	80 fa 67             	cmp    dl,0x67
c0014934:	0f 84 48 01 00 00    	je     c0014a82 <Vm::faultHandler(regs*)+0x21b>
c001493a:	80 fa 6c             	cmp    dl,0x6c
c001493d:	0f 84 69 02 00 00    	je     c0014bac <Vm::faultHandler(regs*)+0x345>
c0014943:	e9 96 05 00 00       	jmp    c0014ede <Vm::faultHandler(regs*)+0x677>
c0014948:	80 fa 6f             	cmp    dl,0x6f
c001494b:	0f 84 f4 03 00 00    	je     c0014d45 <Vm::faultHandler(regs*)+0x4de>
c0014951:	0f 82 59 03 00 00    	jb     c0014cb0 <Vm::faultHandler(regs*)+0x449>
c0014957:	80 fa 9c             	cmp    dl,0x9c
c001495a:	0f 84 2f 01 00 00    	je     c0014a8f <Vm::faultHandler(regs*)+0x228>
c0014960:	e9 79 05 00 00       	jmp    c0014ede <Vm::faultHandler(regs*)+0x677>
c0014965:	80 fa ec             	cmp    dl,0xec
c0014968:	0f 84 14 05 00 00    	je     c0014e82 <Vm::faultHandler(regs*)+0x61b>
c001496e:	77 7b                	ja     c00149eb <Vm::faultHandler(regs*)+0x184>
c0014970:	80 fa e4             	cmp    dl,0xe4
c0014973:	0f 84 93 04 00 00    	je     c0014e0c <Vm::faultHandler(regs*)+0x5a5>
c0014979:	77 53                	ja     c00149ce <Vm::faultHandler(regs*)+0x167>
c001497b:	80 fa cd             	cmp    dl,0xcd
c001497e:	0f 84 d9 01 00 00    	je     c0014b5d <Vm::faultHandler(regs*)+0x2f6>
c0014984:	80 fa cf             	cmp    dl,0xcf
c0014987:	0f 85 51 05 00 00    	jne    c0014ede <Vm::faultHandler(regs*)+0x677>
c001498d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014990:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0014993:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0014997:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001499a:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001499e:	81 ca 00 02 02 00    	or     edx,0x20200
c00149a4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00149a7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00149ab:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00149b1:	66 c1 e8 09          	shr    ax,0x9
c00149b5:	83 e0 01             	and    eax,0x1
c00149b8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00149bb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00149be:	83 c0 06             	add    eax,0x6
c00149c1:	25 ff ff 00 00       	and    eax,0xffff
c00149c6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00149c9:	e9 0c 05 00 00       	jmp    c0014eda <Vm::faultHandler(regs*)+0x673>
c00149ce:	80 fa e6             	cmp    dl,0xe6
c00149d1:	0f 84 7f 04 00 00    	je     c0014e56 <Vm::faultHandler(regs*)+0x5ef>
c00149d7:	0f 82 4b 04 00 00    	jb     c0014e28 <Vm::faultHandler(regs*)+0x5c1>
c00149dd:	80 fa e7             	cmp    dl,0xe7
c00149e0:	0f 84 87 04 00 00    	je     c0014e6d <Vm::faultHandler(regs*)+0x606>
c00149e6:	e9 f3 04 00 00       	jmp    c0014ede <Vm::faultHandler(regs*)+0x677>
c00149eb:	80 fa ef             	cmp    dl,0xef
c00149ee:	0f 84 d1 04 00 00    	je     c0014ec5 <Vm::faultHandler(regs*)+0x65e>
c00149f4:	77 28                	ja     c0014a1e <Vm::faultHandler(regs*)+0x1b7>
c00149f6:	80 fa ed             	cmp    dl,0xed
c00149f9:	0f 84 9f 04 00 00    	je     c0014e9e <Vm::faultHandler(regs*)+0x637>
c00149ff:	80 fa ee             	cmp    dl,0xee
c0014a02:	0f 85 d6 04 00 00    	jne    c0014ede <Vm::faultHandler(regs*)+0x677>
c0014a08:	50                   	push   eax
c0014a09:	50                   	push   eax
c0014a0a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014a0e:	50                   	push   eax
c0014a0f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014a13:	50                   	push   eax
c0014a14:	e8 a3 f9 ff ff       	call   c00143bc <Vm::outbv(unsigned short, unsigned char)>
c0014a19:	e9 9f 04 00 00       	jmp    c0014ebd <Vm::faultHandler(regs*)+0x656>
c0014a1e:	80 fa fa             	cmp    dl,0xfa
c0014a21:	0f 84 69 01 00 00    	je     c0014b90 <Vm::faultHandler(regs*)+0x329>
c0014a27:	80 fa fb             	cmp    dl,0xfb
c0014a2a:	0f 84 6e 01 00 00    	je     c0014b9e <Vm::faultHandler(regs*)+0x337>
c0014a30:	80 fa f3             	cmp    dl,0xf3
c0014a33:	0f 85 a5 04 00 00    	jne    c0014ede <Vm::faultHandler(regs*)+0x677>
c0014a39:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a3c:	e9 c0 fe ff ff       	jmp    c0014901 <Vm::faultHandler(regs*)+0x9a>
c0014a41:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a44:	be 02 00 00 00       	mov    esi,0x2
c0014a49:	e9 b3 fe ff ff       	jmp    c0014901 <Vm::faultHandler(regs*)+0x9a>
c0014a4e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a51:	be 03 00 00 00       	mov    esi,0x3
c0014a56:	e9 a6 fe ff ff       	jmp    c0014901 <Vm::faultHandler(regs*)+0x9a>
c0014a5b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a5e:	be 04 00 00 00       	mov    esi,0x4
c0014a63:	e9 99 fe ff ff       	jmp    c0014901 <Vm::faultHandler(regs*)+0x9a>
c0014a68:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a6b:	be 05 00 00 00       	mov    esi,0x5
c0014a70:	e9 8c fe ff ff       	jmp    c0014901 <Vm::faultHandler(regs*)+0x9a>
c0014a75:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a78:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014a7d:	e9 7f fe ff ff       	jmp    c0014901 <Vm::faultHandler(regs*)+0x9a>
c0014a82:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014a85:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0014a8a:	e9 72 fe ff ff       	jmp    c0014901 <Vm::faultHandler(regs*)+0x9a>
c0014a8f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0014a92:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014a96:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014a9b:	74 30                	je     c0014acd <Vm::faultHandler(regs*)+0x266>
c0014a9d:	83 e9 04             	sub    ecx,0x4
c0014aa0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014aa6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014aac:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014aaf:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014ab2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014ab8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014abc:	0f 84 15 04 00 00    	je     c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014ac2:	80 ce 02             	or     dh,0x2
c0014ac5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014ac8:	e9 0a 04 00 00       	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014acd:	83 e9 02             	sub    ecx,0x2
c0014ad0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014ad6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014ad9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014add:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014ae3:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014ae7:	74 05                	je     c0014aee <Vm::faultHandler(regs*)+0x287>
c0014ae9:	80 ce 02             	or     dh,0x2
c0014aec:	eb 03                	jmp    c0014af1 <Vm::faultHandler(regs*)+0x28a>
c0014aee:	80 e6 fd             	and    dh,0xfd
c0014af1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014af5:	e9 dd 03 00 00       	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014afa:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014aff:	74 2a                	je     c0014b2b <Vm::faultHandler(regs*)+0x2c4>
c0014b01:	8b 10                	mov    edx,DWORD PTR [eax]
c0014b03:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014b09:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b0f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b12:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b14:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b1a:	c1 e8 09             	shr    eax,0x9
c0014b1d:	83 e0 01             	and    eax,0x1
c0014b20:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b23:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b26:	83 c0 04             	add    eax,0x4
c0014b29:	eb 25                	jmp    c0014b50 <Vm::faultHandler(regs*)+0x2e9>
c0014b2b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014b2e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014b34:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014b37:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014b3a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014b40:	66 c1 e8 09          	shr    ax,0x9
c0014b44:	83 e0 01             	and    eax,0x1
c0014b47:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014b4a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014b4d:	83 c0 02             	add    eax,0x2
c0014b50:	25 ff ff 00 00       	and    eax,0xffff
c0014b55:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014b58:	e9 7a 03 00 00       	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014b5d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b61:	3c ee                	cmp    al,0xee
c0014b63:	75 10                	jne    c0014b75 <Vm::faultHandler(regs*)+0x30e>
c0014b65:	83 ec 0c             	sub    esp,0xc
c0014b68:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014b6b:	e8 e9 f8 ff ff       	call   c0014459 <Vm::mainloop3(unsigned long)>
c0014b70:	e9 4b 03 00 00       	jmp    c0014ec0 <Vm::faultHandler(regs*)+0x659>
c0014b75:	83 ec 0c             	sub    esp,0xc
c0014b78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b80:	51                   	push   ecx
c0014b81:	50                   	push   eax
c0014b82:	53                   	push   ebx
c0014b83:	e8 e1 fb ff ff       	call   c0014769 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0014b88:	83 c4 20             	add    esp,0x20
c0014b8b:	e9 4a 03 00 00       	jmp    c0014eda <Vm::faultHandler(regs*)+0x673>
c0014b90:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b95:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014b99:	e9 39 03 00 00       	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014b9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ba3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014ba7:	e9 2b 03 00 00       	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014bac:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014baf:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014bb4:	74 2b                	je     c0014be1 <Vm::faultHandler(regs*)+0x37a>
c0014bb6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0014bbd:	76 22                	jbe    c0014be1 <Vm::faultHandler(regs*)+0x37a>
c0014bbf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014bc3:	50                   	push   eax
c0014bc4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014bc8:	50                   	push   eax
c0014bc9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014bcd:	50                   	push   eax
c0014bce:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014bd2:	50                   	push   eax
c0014bd3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bd7:	50                   	push   eax
c0014bd8:	6a 6c                	push   0x6c
c0014bda:	6a 6c                	push   0x6c
c0014bdc:	e9 b9 01 00 00       	jmp    c0014d9a <Vm::faultHandler(regs*)+0x533>
c0014be1:	83 ec 0c             	sub    esp,0xc
c0014be4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014be8:	0f b7 f6             	movzx  esi,si
c0014beb:	50                   	push   eax
c0014bec:	e8 b8 f7 ff ff       	call   c00143a9 <Vm::inbv(unsigned short)>
c0014bf1:	83 c4 0c             	add    esp,0xc
c0014bf4:	0f b6 c0             	movzx  eax,al
c0014bf7:	50                   	push   eax
c0014bf8:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014bfc:	50                   	push   eax
c0014bfd:	56                   	push   esi
c0014bfe:	e8 24 fc ff ff       	call   c0014827 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014c03:	83 c4 10             	add    esp,0x10
c0014c06:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c09:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c0d:	74 03                	je     c0014c12 <Vm::faultHandler(regs*)+0x3ab>
c0014c0f:	48                   	dec    eax
c0014c10:	eb 01                	jmp    c0014c13 <Vm::faultHandler(regs*)+0x3ac>
c0014c12:	40                   	inc    eax
c0014c13:	0f b7 c0             	movzx  eax,ax
c0014c16:	e9 8d 00 00 00       	jmp    c0014ca8 <Vm::faultHandler(regs*)+0x441>
c0014c1b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014c1e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c21:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014c26:	74 29                	je     c0014c51 <Vm::faultHandler(regs*)+0x3ea>
c0014c28:	3d ff ff 00 00       	cmp    eax,0xffff
c0014c2d:	76 22                	jbe    c0014c51 <Vm::faultHandler(regs*)+0x3ea>
c0014c2f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c33:	50                   	push   eax
c0014c34:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c38:	50                   	push   eax
c0014c39:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c3d:	50                   	push   eax
c0014c3e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c42:	50                   	push   eax
c0014c43:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c47:	50                   	push   eax
c0014c48:	6a 6d                	push   0x6d
c0014c4a:	6a 6d                	push   0x6d
c0014c4c:	e9 49 01 00 00       	jmp    c0014d9a <Vm::faultHandler(regs*)+0x533>
c0014c51:	0f b7 c8             	movzx  ecx,ax
c0014c54:	0f b7 f6             	movzx  esi,si
c0014c57:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014c5a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c5f:	74 20                	je     c0014c81 <Vm::faultHandler(regs*)+0x41a>
c0014c61:	ed                   	in     eax,dx
c0014c62:	55                   	push   ebp
c0014c63:	50                   	push   eax
c0014c64:	51                   	push   ecx
c0014c65:	56                   	push   esi
c0014c66:	e8 e7 fb ff ff       	call   c0014852 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014c6b:	83 c4 10             	add    esp,0x10
c0014c6e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c71:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c75:	74 05                	je     c0014c7c <Vm::faultHandler(regs*)+0x415>
c0014c77:	83 e8 04             	sub    eax,0x4
c0014c7a:	eb 27                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x43c>
c0014c7c:	83 c0 04             	add    eax,0x4
c0014c7f:	eb 22                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x43c>
c0014c81:	66 ed                	in     ax,dx
c0014c83:	0f b7 c0             	movzx  eax,ax
c0014c86:	57                   	push   edi
c0014c87:	50                   	push   eax
c0014c88:	51                   	push   ecx
c0014c89:	56                   	push   esi
c0014c8a:	e8 ad fb ff ff       	call   c001483c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0014c8f:	83 c4 10             	add    esp,0x10
c0014c92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014c95:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014c99:	74 05                	je     c0014ca0 <Vm::faultHandler(regs*)+0x439>
c0014c9b:	83 e8 02             	sub    eax,0x2
c0014c9e:	eb 03                	jmp    c0014ca3 <Vm::faultHandler(regs*)+0x43c>
c0014ca0:	83 c0 02             	add    eax,0x2
c0014ca3:	25 ff ff 00 00       	and    eax,0xffff
c0014ca8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014cab:	e9 27 02 00 00       	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014cb0:	8d 46 ff             	lea    eax,[esi-0x1]
c0014cb3:	3c 05                	cmp    al,0x5
c0014cb5:	77 24                	ja     c0014cdb <Vm::faultHandler(regs*)+0x474>
c0014cb7:	0f b6 c0             	movzx  eax,al
c0014cba:	ff 24 85 5c ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe11a4]
c0014cc1:	0f b7 fd             	movzx  edi,bp
c0014cc4:	eb 15                	jmp    c0014cdb <Vm::faultHandler(regs*)+0x474>
c0014cc6:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014cca:	eb 0f                	jmp    c0014cdb <Vm::faultHandler(regs*)+0x474>
c0014ccc:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014cd0:	eb 09                	jmp    c0014cdb <Vm::faultHandler(regs*)+0x474>
c0014cd2:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014cd6:	eb 03                	jmp    c0014cdb <Vm::faultHandler(regs*)+0x474>
c0014cd8:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014cdb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014cde:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014ce3:	74 29                	je     c0014d0e <Vm::faultHandler(regs*)+0x4a7>
c0014ce5:	3d ff ff 00 00       	cmp    eax,0xffff
c0014cea:	76 22                	jbe    c0014d0e <Vm::faultHandler(regs*)+0x4a7>
c0014cec:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014cf0:	50                   	push   eax
c0014cf1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014cf5:	50                   	push   eax
c0014cf6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014cfa:	50                   	push   eax
c0014cfb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014cff:	50                   	push   eax
c0014d00:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d04:	50                   	push   eax
c0014d05:	6a 6e                	push   0x6e
c0014d07:	6a 6e                	push   0x6e
c0014d09:	e9 8c 00 00 00       	jmp    c0014d9a <Vm::faultHandler(regs*)+0x533>
c0014d0e:	0f b7 c0             	movzx  eax,ax
c0014d11:	52                   	push   edx
c0014d12:	52                   	push   edx
c0014d13:	50                   	push   eax
c0014d14:	57                   	push   edi
c0014d15:	e8 d9 fa ff ff       	call   c00147f3 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014d1a:	59                   	pop    ecx
c0014d1b:	0f b6 c0             	movzx  eax,al
c0014d1e:	5e                   	pop    esi
c0014d1f:	50                   	push   eax
c0014d20:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014d24:	50                   	push   eax
c0014d25:	e8 92 f6 ff ff       	call   c00143bc <Vm::outbv(unsigned short, unsigned char)>
c0014d2a:	83 c4 10             	add    esp,0x10
c0014d2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014d30:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014d34:	74 03                	je     c0014d39 <Vm::faultHandler(regs*)+0x4d2>
c0014d36:	48                   	dec    eax
c0014d37:	eb 01                	jmp    c0014d3a <Vm::faultHandler(regs*)+0x4d3>
c0014d39:	40                   	inc    eax
c0014d3a:	0f b7 c0             	movzx  eax,ax
c0014d3d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014d40:	e9 92 01 00 00       	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014d45:	8d 46 ff             	lea    eax,[esi-0x1]
c0014d48:	3c 05                	cmp    al,0x5
c0014d4a:	77 1f                	ja     c0014d6b <Vm::faultHandler(regs*)+0x504>
c0014d4c:	0f b6 c0             	movzx  eax,al
c0014d4f:	ff 24 85 74 ee 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe118c]
c0014d56:	89 ef                	mov    edi,ebp
c0014d58:	eb 11                	jmp    c0014d6b <Vm::faultHandler(regs*)+0x504>
c0014d5a:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014d5d:	eb 0c                	jmp    c0014d6b <Vm::faultHandler(regs*)+0x504>
c0014d5f:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014d62:	eb 07                	jmp    c0014d6b <Vm::faultHandler(regs*)+0x504>
c0014d64:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014d67:	eb 02                	jmp    c0014d6b <Vm::faultHandler(regs*)+0x504>
c0014d69:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014d6b:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014d6e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014d73:	74 37                	je     c0014dac <Vm::faultHandler(regs*)+0x545>
c0014d75:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014d7b:	76 2f                	jbe    c0014dac <Vm::faultHandler(regs*)+0x545>
c0014d7d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014d81:	50                   	push   eax
c0014d82:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014d86:	50                   	push   eax
c0014d87:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014d8b:	50                   	push   eax
c0014d8c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014d90:	50                   	push   eax
c0014d91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014d95:	50                   	push   eax
c0014d96:	6a 6f                	push   0x6f
c0014d98:	6a 6f                	push   0x6f
c0014d9a:	68 02 ee 01 c0       	push   0xc001ee02
c0014d9f:	e8 50 58 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0014da4:	83 c4 20             	add    esp,0x20
c0014da7:	e9 86 01 00 00       	jmp    c0014f32 <Vm::faultHandler(regs*)+0x6cb>
c0014dac:	0f b7 d7             	movzx  edx,di
c0014daf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014db2:	0f b7 c6             	movzx  eax,si
c0014db5:	81 e1 00 04 00 00    	and    ecx,0x400
c0014dbb:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014dbe:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014dc3:	74 1d                	je     c0014de2 <Vm::faultHandler(regs*)+0x57b>
c0014dc5:	55                   	push   ebp
c0014dc6:	55                   	push   ebp
c0014dc7:	50                   	push   eax
c0014dc8:	52                   	push   edx
c0014dc9:	e8 48 fa ff ff       	call   c0014816 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014dce:	83 c4 10             	add    esp,0x10
c0014dd1:	89 fa                	mov    edx,edi
c0014dd3:	ef                   	out    dx,eax
c0014dd4:	85 c9                	test   ecx,ecx
c0014dd6:	74 05                	je     c0014ddd <Vm::faultHandler(regs*)+0x576>
c0014dd8:	83 ee 04             	sub    esi,0x4
c0014ddb:	eb 21                	jmp    c0014dfe <Vm::faultHandler(regs*)+0x597>
c0014ddd:	83 c6 04             	add    esi,0x4
c0014de0:	eb 1c                	jmp    c0014dfe <Vm::faultHandler(regs*)+0x597>
c0014de2:	55                   	push   ebp
c0014de3:	55                   	push   ebp
c0014de4:	50                   	push   eax
c0014de5:	52                   	push   edx
c0014de6:	e8 19 fa ff ff       	call   c0014804 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014deb:	83 c4 10             	add    esp,0x10
c0014dee:	89 fa                	mov    edx,edi
c0014df0:	66 ef                	out    dx,ax
c0014df2:	85 c9                	test   ecx,ecx
c0014df4:	74 05                	je     c0014dfb <Vm::faultHandler(regs*)+0x594>
c0014df6:	83 ee 02             	sub    esi,0x2
c0014df9:	eb 03                	jmp    c0014dfe <Vm::faultHandler(regs*)+0x597>
c0014dfb:	83 c6 02             	add    esi,0x2
c0014dfe:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014e04:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014e07:	e9 cb 00 00 00       	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014e0c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e13:	83 ec 0c             	sub    esp,0xc
c0014e16:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e1a:	50                   	push   eax
c0014e1b:	e8 89 f5 ff ff       	call   c00143a9 <Vm::inbv(unsigned short)>
c0014e20:	0f b6 c0             	movzx  eax,al
c0014e23:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e26:	eb 3f                	jmp    c0014e67 <Vm::faultHandler(regs*)+0x600>
c0014e28:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e2d:	74 07                	je     c0014e36 <Vm::faultHandler(regs*)+0x5cf>
c0014e2f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e33:	ed                   	in     eax,dx
c0014e34:	eb 14                	jmp    c0014e4a <Vm::faultHandler(regs*)+0x5e3>
c0014e36:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014e39:	66 31 f6             	xor    si,si
c0014e3c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014e3f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e43:	66 ed                	in     ax,dx
c0014e45:	0f b7 c0             	movzx  eax,ax
c0014e48:	09 f0                	or     eax,esi
c0014e4a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014e4d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e51:	e9 84 00 00 00       	jmp    c0014eda <Vm::faultHandler(regs*)+0x673>
c0014e56:	52                   	push   edx
c0014e57:	52                   	push   edx
c0014e58:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014e5c:	50                   	push   eax
c0014e5d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014e61:	50                   	push   eax
c0014e62:	e8 55 f5 ff ff       	call   c00143bc <Vm::outbv(unsigned short, unsigned char)>
c0014e67:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014e6b:	eb 53                	jmp    c0014ec0 <Vm::faultHandler(regs*)+0x659>
c0014e6d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014e70:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014e74:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014e79:	74 03                	je     c0014e7e <Vm::faultHandler(regs*)+0x617>
c0014e7b:	ef                   	out    dx,eax
c0014e7c:	eb cf                	jmp    c0014e4d <Vm::faultHandler(regs*)+0x5e6>
c0014e7e:	66 ef                	out    dx,ax
c0014e80:	eb cb                	jmp    c0014e4d <Vm::faultHandler(regs*)+0x5e6>
c0014e82:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014e89:	83 ec 0c             	sub    esp,0xc
c0014e8c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014e90:	50                   	push   eax
c0014e91:	e8 13 f5 ff ff       	call   c00143a9 <Vm::inbv(unsigned short)>
c0014e96:	0f b6 c0             	movzx  eax,al
c0014e99:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014e9c:	eb 1f                	jmp    c0014ebd <Vm::faultHandler(regs*)+0x656>
c0014e9e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014ea1:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ea6:	74 03                	je     c0014eab <Vm::faultHandler(regs*)+0x644>
c0014ea8:	ed                   	in     eax,dx
c0014ea9:	eb 0d                	jmp    c0014eb8 <Vm::faultHandler(regs*)+0x651>
c0014eab:	66 ed                	in     ax,dx
c0014ead:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014eb0:	0f b7 c0             	movzx  eax,ax
c0014eb3:	66 31 d2             	xor    dx,dx
c0014eb6:	09 d0                	or     eax,edx
c0014eb8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014ebb:	eb 1a                	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014ebd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014ec0:	83 c4 10             	add    esp,0x10
c0014ec3:	eb 15                	jmp    c0014eda <Vm::faultHandler(regs*)+0x673>
c0014ec5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014ec8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014ecb:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014ed0:	74 03                	je     c0014ed5 <Vm::faultHandler(regs*)+0x66e>
c0014ed2:	ef                   	out    dx,eax
c0014ed3:	eb 02                	jmp    c0014ed7 <Vm::faultHandler(regs*)+0x670>
c0014ed5:	66 ef                	out    dx,ax
c0014ed7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014eda:	b0 01                	mov    al,0x1
c0014edc:	eb 56                	jmp    c0014f34 <Vm::faultHandler(regs*)+0x6cd>
c0014ede:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ee2:	50                   	push   eax
c0014ee3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ee7:	50                   	push   eax
c0014ee8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014eec:	50                   	push   eax
c0014eed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014ef1:	50                   	push   eax
c0014ef2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014ef6:	50                   	push   eax
c0014ef7:	52                   	push   edx
c0014ef8:	52                   	push   edx
c0014ef9:	68 2f ee 01 c0       	push   0xc001ee2f
c0014efe:	e8 f1 56 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0014f03:	83 c4 20             	add    esp,0x20
c0014f06:	83 ec 0c             	sub    esp,0xc
c0014f09:	6a 60                	push   0x60
c0014f0b:	e8 99 f4 ff ff       	call   c00143a9 <Vm::inbv(unsigned short)>
c0014f10:	83 c4 10             	add    esp,0x10
c0014f13:	3c 1c                	cmp    al,0x1c
c0014f15:	74 04                	je     c0014f1b <Vm::faultHandler(regs*)+0x6b4>
c0014f17:	3c 5a                	cmp    al,0x5a
c0014f19:	75 eb                	jne    c0014f06 <Vm::faultHandler(regs*)+0x69f>
c0014f1b:	3c 5a                	cmp    al,0x5a
c0014f1d:	74 04                	je     c0014f23 <Vm::faultHandler(regs*)+0x6bc>
c0014f1f:	3c 1c                	cmp    al,0x1c
c0014f21:	75 0f                	jne    c0014f32 <Vm::faultHandler(regs*)+0x6cb>
c0014f23:	83 ec 0c             	sub    esp,0xc
c0014f26:	6a 60                	push   0x60
c0014f28:	e8 7c f4 ff ff       	call   c00143a9 <Vm::inbv(unsigned short)>
c0014f2d:	83 c4 10             	add    esp,0x10
c0014f30:	eb e9                	jmp    c0014f1b <Vm::faultHandler(regs*)+0x6b4>
c0014f32:	31 c0                	xor    eax,eax
c0014f34:	83 c4 1c             	add    esp,0x1c
c0014f37:	5b                   	pop    ebx
c0014f38:	5e                   	pop    esi
c0014f39:	5f                   	pop    edi
c0014f3a:	5d                   	pop    ebp
c0014f3b:	c3                   	ret    

c0014f3c <noCopro(unsigned long)>:
c0014f3c:	c3                   	ret    

c0014f3d <nmiHandler(regs*, void*)>:
c0014f3d:	83 ec 0c             	sub    esp,0xc
c0014f40:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0014f45:	83 ec 0c             	sub    esp,0xc
c0014f48:	50                   	push   eax
c0014f49:	e8 8c 20 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014f4e:	83 c4 10             	add    esp,0x10
c0014f51:	90                   	nop
c0014f52:	83 c4 0c             	add    esp,0xc
c0014f55:	c3                   	ret    

c0014f56 <doubleFault(regs*, void*)>:
c0014f56:	55                   	push   ebp
c0014f57:	89 e5                	mov    ebp,esp
c0014f59:	83 ec 08             	sub    esp,0x8
c0014f5c:	83 ec 0c             	sub    esp,0xc
c0014f5f:	68 8c ee 01 c0       	push   0xc001ee8c
c0014f64:	e8 0e b3 ff ff       	call   c0010277 <KePanic(char const*)>
c0014f69:	83 c4 10             	add    esp,0x10
c0014f6c:	90                   	nop
c0014f6d:	c9                   	leave  
c0014f6e:	c3                   	ret    

c0014f6f <displayDebugInfo(regs*)>:
c0014f6f:	83 ec 1c             	sub    esp,0x1c
c0014f72:	0f 20 c0             	mov    eax,cr0
c0014f75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014f79:	0f 20 d0             	mov    eax,cr2
c0014f7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014f80:	0f 20 d8             	mov    eax,cr3
c0014f83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014f87:	0f 20 e0             	mov    eax,cr4
c0014f8a:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f91:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014f94:	83 ec 08             	sub    esp,0x8
c0014f97:	50                   	push   eax
c0014f98:	68 a8 ee 01 c0       	push   0xc001eea8
c0014f9d:	e8 52 56 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0014fa2:	83 c4 10             	add    esp,0x10
c0014fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fa9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014fac:	83 ec 08             	sub    esp,0x8
c0014faf:	50                   	push   eax
c0014fb0:	68 99 ee 01 c0       	push   0xc001ee99
c0014fb5:	e8 3a 56 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0014fba:	83 c4 10             	add    esp,0x10
c0014fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fc1:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014fc4:	83 ec 08             	sub    esp,0x8
c0014fc7:	50                   	push   eax
c0014fc8:	68 a4 ee 01 c0       	push   0xc001eea4
c0014fcd:	e8 22 56 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0014fd2:	83 c4 10             	add    esp,0x10
c0014fd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fd9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fdc:	83 ec 08             	sub    esp,0x8
c0014fdf:	50                   	push   eax
c0014fe0:	68 b3 ee 01 c0       	push   0xc001eeb3
c0014fe5:	e8 0a 56 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0014fea:	83 c4 10             	add    esp,0x10
c0014fed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ff1:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014ff4:	83 ec 08             	sub    esp,0x8
c0014ff7:	50                   	push   eax
c0014ff8:	68 be ee 01 c0       	push   0xc001eebe
c0014ffd:	e8 f2 55 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0015002:	83 c4 10             	add    esp,0x10
c0015005:	83 ec 08             	sub    esp,0x8
c0015008:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001500c:	68 c9 ee 01 c0       	push   0xc001eec9
c0015011:	e8 de 55 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0015016:	83 c4 10             	add    esp,0x10
c0015019:	83 ec 08             	sub    esp,0x8
c001501c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015020:	68 d4 ee 01 c0       	push   0xc001eed4
c0015025:	e8 ca 55 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001502a:	83 c4 10             	add    esp,0x10
c001502d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015032:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015038:	83 ec 0c             	sub    esp,0xc
c001503b:	50                   	push   eax
c001503c:	e8 b6 33 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0015041:	83 c4 10             	add    esp,0x10
c0015044:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015049:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001504f:	83 ec 08             	sub    esp,0x8
c0015052:	68 df ee 01 c0       	push   0xc001eedf
c0015057:	50                   	push   eax
c0015058:	e8 d9 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001505d:	83 c4 10             	add    esp,0x10
c0015060:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015065:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001506b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0015070:	8b 12                	mov    edx,DWORD PTR [edx]
c0015072:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015075:	83 c2 0c             	add    edx,0xc
c0015078:	83 ec 08             	sub    esp,0x8
c001507b:	52                   	push   edx
c001507c:	50                   	push   eax
c001507d:	e8 b4 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015082:	83 c4 10             	add    esp,0x10
c0015085:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001508a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015090:	83 ec 08             	sub    esp,0x8
c0015093:	68 e8 ee 01 c0       	push   0xc001eee8
c0015098:	50                   	push   eax
c0015099:	e8 98 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001509e:	83 c4 10             	add    esp,0x10
c00150a1:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150a6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150b0:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c00150b3:	83 ec 08             	sub    esp,0x8
c00150b6:	52                   	push   edx
c00150b7:	50                   	push   eax
c00150b8:	e8 33 36 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150bd:	83 c4 10             	add    esp,0x10
c00150c0:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150cb:	83 ec 08             	sub    esp,0x8
c00150ce:	68 f0 ee 01 c0       	push   0xc001eef0
c00150d3:	50                   	push   eax
c00150d4:	e8 5d 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00150d9:	83 c4 10             	add    esp,0x10
c00150dc:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00150e1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00150e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00150eb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00150ee:	83 ec 08             	sub    esp,0x8
c00150f1:	52                   	push   edx
c00150f2:	50                   	push   eax
c00150f3:	e8 f8 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00150f8:	83 c4 10             	add    esp,0x10
c00150fb:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015100:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015106:	83 ec 08             	sub    esp,0x8
c0015109:	68 f8 ee 01 c0       	push   0xc001eef8
c001510e:	50                   	push   eax
c001510f:	e8 22 36 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015114:	83 c4 10             	add    esp,0x10
c0015117:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001511c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015122:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015126:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0015129:	83 ec 08             	sub    esp,0x8
c001512c:	52                   	push   edx
c001512d:	50                   	push   eax
c001512e:	e8 bd 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015133:	83 c4 10             	add    esp,0x10
c0015136:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001513b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015141:	83 ec 08             	sub    esp,0x8
c0015144:	68 00 ef 01 c0       	push   0xc001ef00
c0015149:	50                   	push   eax
c001514a:	e8 e7 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001514f:	83 c4 10             	add    esp,0x10
c0015152:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015157:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001515d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015161:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015164:	83 ec 08             	sub    esp,0x8
c0015167:	52                   	push   edx
c0015168:	50                   	push   eax
c0015169:	e8 82 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001516e:	83 c4 10             	add    esp,0x10
c0015171:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015176:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001517c:	83 ec 08             	sub    esp,0x8
c001517f:	68 08 ef 01 c0       	push   0xc001ef08
c0015184:	50                   	push   eax
c0015185:	e8 ac 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001518a:	83 c4 10             	add    esp,0x10
c001518d:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015192:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015198:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001519c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001519f:	83 ec 08             	sub    esp,0x8
c00151a2:	52                   	push   edx
c00151a3:	50                   	push   eax
c00151a4:	e8 47 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151a9:	83 c4 10             	add    esp,0x10
c00151ac:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151b7:	83 ec 08             	sub    esp,0x8
c00151ba:	68 10 ef 01 c0       	push   0xc001ef10
c00151bf:	50                   	push   eax
c00151c0:	e8 71 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151c5:	83 c4 10             	add    esp,0x10
c00151c8:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151cd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00151d7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00151da:	83 ec 08             	sub    esp,0x8
c00151dd:	52                   	push   edx
c00151de:	50                   	push   eax
c00151df:	e8 0c 35 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c00151e4:	83 c4 10             	add    esp,0x10
c00151e7:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c00151ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00151f2:	83 ec 08             	sub    esp,0x8
c00151f5:	68 18 ef 01 c0       	push   0xc001ef18
c00151fa:	50                   	push   eax
c00151fb:	e8 36 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015200:	83 c4 10             	add    esp,0x10
c0015203:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015208:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001520e:	83 ec 08             	sub    esp,0x8
c0015211:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015215:	50                   	push   eax
c0015216:	e8 d5 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c001521b:	83 c4 10             	add    esp,0x10
c001521e:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015223:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015229:	83 ec 08             	sub    esp,0x8
c001522c:	68 21 ef 01 c0       	push   0xc001ef21
c0015231:	50                   	push   eax
c0015232:	e8 ff 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015237:	83 c4 10             	add    esp,0x10
c001523a:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001523f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015245:	83 ec 08             	sub    esp,0x8
c0015248:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001524c:	50                   	push   eax
c001524d:	e8 9e 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015252:	83 c4 10             	add    esp,0x10
c0015255:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c001525a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015260:	83 ec 08             	sub    esp,0x8
c0015263:	68 29 ef 01 c0       	push   0xc001ef29
c0015268:	50                   	push   eax
c0015269:	e8 c8 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001526e:	83 c4 10             	add    esp,0x10
c0015271:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0015276:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001527c:	83 ec 08             	sub    esp,0x8
c001527f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0015283:	50                   	push   eax
c0015284:	e8 67 34 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0015289:	83 c4 10             	add    esp,0x10
c001528c:	fa                   	cli    
c001528d:	f4                   	hlt    
c001528e:	eb fe                	jmp    c001528e <displayDebugInfo(regs*)+0x31f>

c0015290 <HalSystemIdle()>:
c0015290:	56                   	push   esi
c0015291:	53                   	push   ebx
c0015292:	83 ec 14             	sub    esp,0x14
c0015295:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001529a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00152a0:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c00152a6:	83 e0 04             	and    eax,0x4
c00152a9:	84 c0                	test   al,al
c00152ab:	0f 95 c0             	setne  al
c00152ae:	84 c0                	test   al,al
c00152b0:	74 4c                	je     c00152fe <HalSystemIdle()+0x6e>
c00152b2:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00152b7:	83 ec 08             	sub    esp,0x8
c00152ba:	68 e1 00 00 00       	push   0xe1
c00152bf:	50                   	push   eax
c00152c0:	e8 2d 1b ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c00152c5:	83 c4 10             	add    esp,0x10
c00152c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00152cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00152d0:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00152d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00152d9:	83 e2 02             	and    edx,0x2
c00152dc:	89 d3                	mov    ebx,edx
c00152de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00152e2:	83 e2 00             	and    edx,0x0
c00152e5:	89 d6                	mov    esi,edx
c00152e7:	56                   	push   esi
c00152e8:	53                   	push   ebx
c00152e9:	68 e1 00 00 00       	push   0xe1
c00152ee:	50                   	push   eax
c00152ef:	e8 2a 1b ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c00152f4:	83 c4 10             	add    esp,0x10
c00152f7:	e8 98 ae fe ff       	call   c0000194 <doTPAUSE>
c00152fc:	eb 01                	jmp    c00152ff <HalSystemIdle()+0x6f>
c00152fe:	f4                   	hlt    
c00152ff:	90                   	nop
c0015300:	83 c4 14             	add    esp,0x14
c0015303:	5b                   	pop    ebx
c0015304:	5e                   	pop    esi
c0015305:	c3                   	ret    

c0015306 <displayProgramFault(char const*)>:
c0015306:	83 ec 0c             	sub    esp,0xc
c0015309:	83 ec 0c             	sub    esp,0xc
c001530c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015310:	e8 df 52 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0015315:	83 c4 10             	add    esp,0x10
c0015318:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001531d:	8b 00                	mov    eax,DWORD PTR [eax]
c001531f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015322:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015328:	85 c0                	test   eax,eax
c001532a:	74 21                	je     c001534d <displayProgramFault(char const*)+0x47>
c001532c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015331:	8b 00                	mov    eax,DWORD PTR [eax]
c0015333:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015336:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001533c:	6a 04                	push   0x4
c001533e:	6a 0f                	push   0xf
c0015340:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015344:	50                   	push   eax
c0015345:	e8 5e 34 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001534a:	83 c4 10             	add    esp,0x10
c001534d:	90                   	nop
c001534e:	83 c4 0c             	add    esp,0xc
c0015351:	c3                   	ret    

c0015352 <gpFault(regs*, void*)>:
c0015352:	83 ec 1c             	sub    esp,0x1c
c0015355:	c7 05 10 52 02 c0 67 48 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc0014867
c001535f:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c0015364:	85 c0                	test   eax,eax
c0015366:	74 1c                	je     c0015384 <gpFault(regs*, void*)+0x32>
c0015368:	a1 10 52 02 c0       	mov    eax,ds:0xc0025210
c001536d:	83 ec 0c             	sub    esp,0xc
c0015370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015374:	ff d0                	call   eax
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001537d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015382:	75 2e                	jne    c00153b2 <gpFault(regs*, void*)+0x60>
c0015384:	83 ec 0c             	sub    esp,0xc
c0015387:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001538b:	e8 df fb ff ff       	call   c0014f6f <displayDebugInfo(regs*)>
c0015390:	83 c4 10             	add    esp,0x10
c0015393:	83 ec 0c             	sub    esp,0xc
c0015396:	68 31 ef 01 c0       	push   0xc001ef31
c001539b:	e8 66 ff ff ff       	call   c0015306 <displayProgramFault(char const*)>
c00153a0:	83 c4 10             	add    esp,0x10
c00153a3:	83 ec 0c             	sub    esp,0xc
c00153a6:	6a 00                	push   0x0
c00153a8:	e8 af ee ff ff       	call   c001425c <Thr::terminateFromIRQ(int)>
c00153ad:	83 c4 10             	add    esp,0x10
c00153b0:	eb 01                	jmp    c00153b3 <gpFault(regs*, void*)+0x61>
c00153b2:	90                   	nop
c00153b3:	83 c4 1c             	add    esp,0x1c
c00153b6:	c3                   	ret    

c00153b7 <pgFault(regs*, void*)>:
c00153b7:	83 ec 1c             	sub    esp,0x1c
c00153ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153be:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153c1:	0f 20 d0             	mov    eax,cr2
c00153c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00153c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00153cc:	83 ec 04             	sub    esp,0x4
c00153cf:	52                   	push   edx
c00153d0:	50                   	push   eax
c00153d1:	68 10 f0 01 c0       	push   0xc001f010
c00153d6:	e8 19 52 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c00153db:	83 c4 10             	add    esp,0x10
c00153de:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00153e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153e8:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00153ee:	0f 20 d2             	mov    edx,cr2
c00153f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00153f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00153f9:	83 ec 08             	sub    esp,0x8
c00153fc:	52                   	push   edx
c00153fd:	50                   	push   eax
c00153fe:	e8 e5 4d ff ff       	call   c000a1e8 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015403:	83 c4 10             	add    esp,0x10
c0015406:	84 c0                	test   al,al
c0015408:	75 2e                	jne    c0015438 <pgFault(regs*, void*)+0x81>
c001540a:	83 ec 0c             	sub    esp,0xc
c001540d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015411:	e8 59 fb ff ff       	call   c0014f6f <displayDebugInfo(regs*)>
c0015416:	83 c4 10             	add    esp,0x10
c0015419:	83 ec 0c             	sub    esp,0xc
c001541c:	68 4a ef 01 c0       	push   0xc001ef4a
c0015421:	e8 e0 fe ff ff       	call   c0015306 <displayProgramFault(char const*)>
c0015426:	83 c4 10             	add    esp,0x10
c0015429:	83 ec 0c             	sub    esp,0xc
c001542c:	6a 00                	push   0x0
c001542e:	e8 29 ee ff ff       	call   c001425c <Thr::terminateFromIRQ(int)>
c0015433:	83 c4 10             	add    esp,0x10
c0015436:	eb 01                	jmp    c0015439 <pgFault(regs*, void*)+0x82>
c0015438:	90                   	nop
c0015439:	83 c4 1c             	add    esp,0x1c
c001543c:	c3                   	ret    

c001543d <otherISRHandler(regs*, void*)>:
c001543d:	83 ec 0c             	sub    esp,0xc
c0015440:	83 ec 0c             	sub    esp,0xc
c0015443:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015447:	e8 23 fb ff ff       	call   c0014f6f <displayDebugInfo(regs*)>
c001544c:	83 c4 10             	add    esp,0x10
c001544f:	83 ec 0c             	sub    esp,0xc
c0015452:	68 38 f0 01 c0       	push   0xc001f038
c0015457:	e8 aa fe ff ff       	call   c0015306 <displayProgramFault(char const*)>
c001545c:	83 c4 10             	add    esp,0x10
c001545f:	83 ec 0c             	sub    esp,0xc
c0015462:	6a 00                	push   0x0
c0015464:	e8 f3 ed ff ff       	call   c001425c <Thr::terminateFromIRQ(int)>
c0015469:	83 c4 10             	add    esp,0x10
c001546c:	90                   	nop
c001546d:	83 c4 0c             	add    esp,0xc
c0015470:	c3                   	ret    

c0015471 <opcodeFault(regs*, void*)>:
c0015471:	55                   	push   ebp
c0015472:	89 e5                	mov    ebp,esp
c0015474:	83 ec 08             	sub    esp,0x8
c0015477:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001547d:	83 ec 08             	sub    esp,0x8
c0015480:	50                   	push   eax
c0015481:	68 55 ef 01 c0       	push   0xc001ef55
c0015486:	e8 69 51 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001548b:	83 c4 10             	add    esp,0x10
c001548e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015493:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015499:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001549f:	84 c0                	test   al,al
c00154a1:	74 21                	je     c00154c4 <opcodeFault(regs*, void*)+0x53>
c00154a3:	83 ec 0c             	sub    esp,0xc
c00154a6:	68 60 f0 01 c0       	push   0xc001f060
c00154ab:	e8 44 51 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c00154b0:	83 c4 10             	add    esp,0x10
c00154b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154b9:	8d 50 19             	lea    edx,[eax+0x19]
c00154bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154c2:	eb 2b                	jmp    c00154ef <opcodeFault(regs*, void*)+0x7e>
c00154c4:	83 ec 0c             	sub    esp,0xc
c00154c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154ca:	e8 a0 fa ff ff       	call   c0014f6f <displayDebugInfo(regs*)>
c00154cf:	83 c4 10             	add    esp,0x10
c00154d2:	83 ec 0c             	sub    esp,0xc
c00154d5:	68 63 ef 01 c0       	push   0xc001ef63
c00154da:	e8 27 fe ff ff       	call   c0015306 <displayProgramFault(char const*)>
c00154df:	83 c4 10             	add    esp,0x10
c00154e2:	83 ec 0c             	sub    esp,0xc
c00154e5:	6a 00                	push   0x0
c00154e7:	e8 70 ed ff ff       	call   c001425c <Thr::terminateFromIRQ(int)>
c00154ec:	83 c4 10             	add    esp,0x10
c00154ef:	c9                   	leave  
c00154f0:	c3                   	ret    

c00154f1 <i386SaveCoprocessor(void*)>:
c00154f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00154f5:	83 c0 3f             	add    eax,0x3f
c00154f8:	83 e0 c0             	and    eax,0xffffffc0
c00154fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00154ff:	ff 25 0c 52 02 c0    	jmp    DWORD PTR ds:0xc002520c

c0015505 <i386LoadCoprocessor(void*)>:
c0015505:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015509:	83 c0 3f             	add    eax,0x3f
c001550c:	83 e0 c0             	and    eax,0xffffffc0
c001550f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015513:	ff 25 08 52 02 c0    	jmp    DWORD PTR ds:0xc0025208

c0015519 <x87EmulHandler(regs*, void*)>:
c0015519:	53                   	push   ebx
c001551a:	83 ec 08             	sub    esp,0x8
c001551d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015522:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015526:	74 10                	je     c0015538 <x87EmulHandler(regs*, void*)+0x1f>
c0015528:	83 ec 0c             	sub    esp,0xc
c001552b:	68 70 ef 01 c0       	push   0xc001ef70
c0015530:	e8 42 ad ff ff       	call   c0010277 <KePanic(char const*)>
c0015535:	83 c4 10             	add    esp,0x10
c0015538:	0f 20 c0             	mov    eax,cr0
c001553b:	a8 08                	test   al,0x8
c001553d:	74 59                	je     c0015598 <x87EmulHandler(regs*, void*)+0x7f>
c001553f:	0f 06                	clts   
c0015541:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c0015546:	85 c0                	test   eax,eax
c0015548:	74 0e                	je     c0015558 <x87EmulHandler(regs*, void*)+0x3f>
c001554a:	83 ec 0c             	sub    esp,0xc
c001554d:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015550:	e8 9c ff ff ff       	call   c00154f1 <i386SaveCoprocessor(void*)>
c0015555:	83 c4 10             	add    esp,0x10
c0015558:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001555e:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0015562:	75 12                	jne    c0015576 <x87EmulHandler(regs*, void*)+0x5d>
c0015564:	83 ec 0c             	sub    esp,0xc
c0015567:	68 40 02 00 00       	push   0x240
c001556c:	e8 48 22 ff ff       	call   c00077b9 <malloc>
c0015571:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0015574:	eb 10                	jmp    c0015586 <x87EmulHandler(regs*, void*)+0x6d>
c0015576:	83 ec 0c             	sub    esp,0xc
c0015579:	a1 04 52 02 c0       	mov    eax,ds:0xc0025204
c001557e:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015581:	e8 7f ff ff ff       	call   c0015505 <i386LoadCoprocessor(void*)>
c0015586:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001558b:	83 c4 10             	add    esp,0x10
c001558e:	a3 04 52 02 c0       	mov    ds:0xc0025204,eax
c0015593:	83 c4 08             	add    esp,0x8
c0015596:	5b                   	pop    ebx
c0015597:	c3                   	ret    
c0015598:	83 ec 0c             	sub    esp,0xc
c001559b:	68 84 ef 01 c0       	push   0xc001ef84
c00155a0:	e8 4f 50 ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c00155a5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00155ad:	83 c4 18             	add    esp,0x18
c00155b0:	5b                   	pop    ebx
c00155b1:	e9 a6 ec ff ff       	jmp    c001425c <Thr::terminateFromIRQ(int)>

c00155b6 <HalInitialiseCoprocessor()>:
c00155b6:	83 ec 10             	sub    esp,0x10
c00155b9:	c7 05 04 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025204,0x0
c00155c3:	6a 00                	push   0x0
c00155c5:	68 19 55 01 c0       	push   0xc0015519
c00155ca:	6a 07                	push   0x7
c00155cc:	e8 97 69 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00155d1:	e8 9a 65 00 00       	call   c001bb70 <avxDetect>
c00155d6:	83 c4 10             	add    esp,0x10
c00155d9:	85 c0                	test   eax,eax
c00155db:	74 1c                	je     c00155f9 <HalInitialiseCoprocessor()+0x43>
c00155dd:	c7 05 0c 52 02 c0 9a bb 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001bb9a
c00155e7:	c7 05 08 52 02 c0 ab bb 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001bbab
c00155f1:	83 c4 0c             	add    esp,0xc
c00155f4:	e9 c3 65 00 00       	jmp    c001bbbc <avxInit>
c00155f9:	e8 52 68 00 00       	call   c001be50 <absolutelyNoChanceInHell>
c00155fe:	85 c0                	test   eax,eax
c0015600:	74 1c                	je     c001561e <HalInitialiseCoprocessor()+0x68>
c0015602:	c7 05 0c 52 02 c0 68 be 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001be68
c001560c:	c7 05 08 52 02 c0 70 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001be70
c0015616:	83 c4 0c             	add    esp,0xc
c0015619:	e9 5a 68 00 00       	jmp    c001be78 <sseInit>
c001561e:	e8 73 68 00 00       	call   c001be96 <x87Detect>
c0015623:	85 c0                	test   eax,eax
c0015625:	74 1c                	je     c0015643 <HalInitialiseCoprocessor()+0x8d>
c0015627:	c7 05 0c 52 02 c0 b1 be 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001beb1
c0015631:	c7 05 08 52 02 c0 b8 be 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc001beb8
c001563b:	83 c4 0c             	add    esp,0xc
c001563e:	e9 7c 68 00 00       	jmp    c001bebf <x87Init>
c0015643:	c7 05 0c 52 02 c0 3c 4f 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc0014f3c
c001564d:	c7 05 08 52 02 c0 3c 4f 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc0014f3c
c0015657:	0f 20 c0             	mov    eax,cr0
c001565a:	83 c8 04             	or     eax,0x4
c001565d:	0f 22 c0             	mov    cr0,eax
c0015660:	83 c4 0c             	add    esp,0xc
c0015663:	c3                   	ret    

c0015664 <HalPanic(char const*)>:
c0015664:	53                   	push   ebx
c0015665:	83 ec 10             	sub    esp,0x10
c0015668:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001566c:	fa                   	cli    
c001566d:	53                   	push   ebx
c001566e:	68 9a ef 01 c0       	push   0xc001ef9a
c0015673:	e8 7c 4f ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0015678:	83 c4 0c             	add    esp,0xc
c001567b:	6a 01                	push   0x1
c001567d:	6a 0f                	push   0xf
c001567f:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015685:	e8 c0 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001568a:	58                   	pop    eax
c001568b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015691:	e8 ac 2d ff ff       	call   c0008442 <VgaText::clearScreen()>
c0015696:	5a                   	pop    edx
c0015697:	59                   	pop    ecx
c0015698:	68 a8 d8 01 c0       	push   0xc001d8a8
c001569d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156a3:	e8 da 2b ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00156a8:	83 c4 0c             	add    esp,0xc
c00156ab:	6a 01                	push   0x1
c00156ad:	6a 0f                	push   0xf
c00156af:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156b5:	e8 90 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156ba:	58                   	pop    eax
c00156bb:	5a                   	pop    edx
c00156bc:	68 b3 ef 01 c0       	push   0xc001efb3
c00156c1:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156c7:	e8 6a 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156cc:	83 c4 0c             	add    esp,0xc
c00156cf:	6a 0f                	push   0xf
c00156d1:	6a 01                	push   0x1
c00156d3:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156d9:	e8 6c 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00156de:	59                   	pop    ecx
c00156df:	58                   	pop    eax
c00156e0:	68 bc ef 01 c0       	push   0xc001efbc
c00156e5:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156eb:	e8 46 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00156f0:	83 c4 0c             	add    esp,0xc
c00156f3:	6a 01                	push   0x1
c00156f5:	6a 0f                	push   0xf
c00156f7:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c00156fd:	e8 48 2b ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015702:	58                   	pop    eax
c0015703:	5a                   	pop    edx
c0015704:	68 00 f0 01 c0       	push   0xc001f000
c0015709:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001570f:	e8 22 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015714:	59                   	pop    ecx
c0015715:	58                   	pop    eax
c0015716:	68 c9 ef 01 c0       	push   0xc001efc9
c001571b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015721:	e8 10 30 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015726:	58                   	pop    eax
c0015727:	5a                   	pop    edx
c0015728:	68 03 f0 01 c0       	push   0xc001f003
c001572d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015733:	e8 fe 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015738:	59                   	pop    ecx
c0015739:	58                   	pop    eax
c001573a:	53                   	push   ebx
c001573b:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015741:	e8 f0 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015746:	58                   	pop    eax
c0015747:	5a                   	pop    edx
c0015748:	68 00 f0 01 c0       	push   0xc001f000
c001574d:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c0015753:	e8 de 2f ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015758:	83 c4 10             	add    esp,0x10
c001575b:	eb fe                	jmp    c001575b <HalPanic(char const*)+0xf7>

c001575d <HalQueryPerformanceCounter()>:
c001575d:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015762:	31 d2                	xor    edx,edx
c0015764:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001576a:	31 c0                	xor    eax,eax
c001576c:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015773:	74 02                	je     c0015777 <HalQueryPerformanceCounter()+0x1a>
c0015775:	0f 31                	rdtsc  
c0015777:	c3                   	ret    

c0015778 <HalInitialise()>:
c0015778:	53                   	push   ebx
c0015779:	83 ec 08             	sub    esp,0x8
c001577c:	e8 1a 6a ff ff       	call   c000c19b <setupINTS()>
c0015781:	80 3d 80 47 02 c0 00 	cmp    BYTE PTR ds:0xc0024780,0x0
c0015788:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001578d:	75 07                	jne    c0015796 <HalInitialise()+0x1e>
c001578f:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c0015796:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001579c:	83 e0 01             	and    eax,0x1
c001579f:	a2 00 52 02 c0       	mov    ds:0xc0025200,al
c00157a4:	e8 a7 02 00 00       	call   c0015a50 <picOpen()>
c00157a9:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c00157b0:	74 0a                	je     c00157bc <HalInitialise()+0x44>
c00157b2:	e8 e1 01 00 00       	call   c0015998 <picDisable()>
c00157b7:	e8 26 5d 00 00       	call   c001b4e2 <apicOpen()>
c00157bc:	bb 0f 00 00 00       	mov    ebx,0xf
c00157c1:	50                   	push   eax
c00157c2:	6a 00                	push   0x0
c00157c4:	68 3d 54 01 c0       	push   0xc001543d
c00157c9:	6a 00                	push   0x0
c00157cb:	e8 98 67 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157d0:	83 c4 0c             	add    esp,0xc
c00157d3:	6a 00                	push   0x0
c00157d5:	68 3d 54 01 c0       	push   0xc001543d
c00157da:	6a 01                	push   0x1
c00157dc:	e8 87 67 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157e1:	83 c4 0c             	add    esp,0xc
c00157e4:	6a 00                	push   0x0
c00157e6:	68 3d 4f 01 c0       	push   0xc0014f3d
c00157eb:	6a 02                	push   0x2
c00157ed:	e8 76 67 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00157f2:	83 c4 0c             	add    esp,0xc
c00157f5:	6a 00                	push   0x0
c00157f7:	68 3d 54 01 c0       	push   0xc001543d
c00157fc:	6a 03                	push   0x3
c00157fe:	e8 65 67 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015803:	83 c4 0c             	add    esp,0xc
c0015806:	6a 00                	push   0x0
c0015808:	68 3d 54 01 c0       	push   0xc001543d
c001580d:	6a 04                	push   0x4
c001580f:	e8 54 67 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015814:	83 c4 0c             	add    esp,0xc
c0015817:	6a 00                	push   0x0
c0015819:	68 3d 54 01 c0       	push   0xc001543d
c001581e:	6a 05                	push   0x5
c0015820:	e8 43 67 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015825:	83 c4 0c             	add    esp,0xc
c0015828:	6a 00                	push   0x0
c001582a:	68 71 54 01 c0       	push   0xc0015471
c001582f:	6a 06                	push   0x6
c0015831:	e8 32 67 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015836:	83 c4 0c             	add    esp,0xc
c0015839:	6a 00                	push   0x0
c001583b:	68 56 4f 01 c0       	push   0xc0014f56
c0015840:	6a 08                	push   0x8
c0015842:	e8 21 67 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015847:	83 c4 0c             	add    esp,0xc
c001584a:	6a 00                	push   0x0
c001584c:	68 3d 54 01 c0       	push   0xc001543d
c0015851:	6a 09                	push   0x9
c0015853:	e8 10 67 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015858:	83 c4 0c             	add    esp,0xc
c001585b:	6a 00                	push   0x0
c001585d:	68 3d 54 01 c0       	push   0xc001543d
c0015862:	6a 0a                	push   0xa
c0015864:	e8 ff 66 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015869:	83 c4 0c             	add    esp,0xc
c001586c:	6a 00                	push   0x0
c001586e:	68 3d 54 01 c0       	push   0xc001543d
c0015873:	6a 0b                	push   0xb
c0015875:	e8 ee 66 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001587a:	83 c4 0c             	add    esp,0xc
c001587d:	6a 00                	push   0x0
c001587f:	68 52 53 01 c0       	push   0xc0015352
c0015884:	6a 0d                	push   0xd
c0015886:	e8 dd 66 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001588b:	83 c4 0c             	add    esp,0xc
c001588e:	6a 00                	push   0x0
c0015890:	68 b7 53 01 c0       	push   0xc00153b7
c0015895:	6a 0e                	push   0xe
c0015897:	e8 cc 66 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001589c:	83 c4 10             	add    esp,0x10
c001589f:	50                   	push   eax
c00158a0:	6a 00                	push   0x0
c00158a2:	68 3d 54 01 c0       	push   0xc001543d
c00158a7:	53                   	push   ebx
c00158a8:	43                   	inc    ebx
c00158a9:	e8 ba 66 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158ae:	83 c4 10             	add    esp,0x10
c00158b1:	83 fb 1e             	cmp    ebx,0x1e
c00158b4:	75 e9                	jne    c001589f <HalInitialise()+0x127>
c00158b6:	50                   	push   eax
c00158b7:	6a 00                	push   0x0
c00158b9:	68 c7 14 01 c0       	push   0xc00114c7
c00158be:	6a 60                	push   0x60
c00158c0:	e8 a3 66 ff ff       	call   c000bf68 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00158c5:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c00158ca:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00158d4:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00158db:	e8 d9 1e ff ff       	call   c00077b9 <malloc>
c00158e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00158e3:	89 c3                	mov    ebx,eax
c00158e5:	e8 2e 09 00 00       	call   c0016218 <RTC::RTC()>
c00158ea:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00158f4:	5a                   	pop    edx
c00158f5:	59                   	pop    ecx
c00158f6:	53                   	push   ebx
c00158f7:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00158fd:	e8 32 61 ff ff       	call   c000ba34 <Device::addChild(Device*)>
c0015902:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015904:	6a 00                	push   0x0
c0015906:	6a 00                	push   0x0
c0015908:	6a 00                	push   0x0
c001590a:	53                   	push   ebx
c001590b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001590e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0015913:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015919:	83 c4 28             	add    esp,0x28
c001591c:	5b                   	pop    ebx
c001591d:	c3                   	ret    

c001591e <HalMakeBeep(int)>:
c001591e:	53                   	push   ebx
c001591f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015923:	85 db                	test   ebx,ebx
c0015925:	75 07                	jne    c001592e <HalMakeBeep(int)+0x10>
c0015927:	e4 61                	in     al,0x61
c0015929:	83 e0 fc             	and    eax,0xfffffffc
c001592c:	eb 26                	jmp    c0015954 <HalMakeBeep(int)+0x36>
c001592e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015933:	99                   	cdq    
c0015934:	f7 fb                	idiv   ebx
c0015936:	89 c1                	mov    ecx,eax
c0015938:	b0 b6                	mov    al,0xb6
c001593a:	e6 43                	out    0x43,al
c001593c:	88 c8                	mov    al,cl
c001593e:	e6 42                	out    0x42,al
c0015940:	89 c8                	mov    eax,ecx
c0015942:	c1 e8 08             	shr    eax,0x8
c0015945:	e6 42                	out    0x42,al
c0015947:	e4 61                	in     al,0x61
c0015949:	88 c2                	mov    dl,al
c001594b:	83 ca 03             	or     edx,0x3
c001594e:	38 c2                	cmp    dl,al
c0015950:	74 04                	je     c0015956 <HalMakeBeep(int)+0x38>
c0015952:	88 d0                	mov    al,dl
c0015954:	e6 61                	out    0x61,al
c0015956:	5b                   	pop    ebx
c0015957:	c3                   	ret    

c0015958 <HalGetRand()>:
c0015958:	31 c0                	xor    eax,eax
c001595a:	c3                   	ret    

c001595b <HalEndOfInterrupt(int)>:
c001595b:	80 3d 00 52 02 c0 00 	cmp    BYTE PTR ds:0xc0025200,0x0
c0015962:	74 23                	je     c0015987 <HalEndOfInterrupt(int)+0x2c>
c0015964:	83 ec 14             	sub    esp,0x14
c0015967:	6a 1b                	push   0x1b
c0015969:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001596f:	e8 7e 14 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0015974:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015979:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015983:	83 c4 1c             	add    esp,0x1c
c0015986:	c3                   	ret    
c0015987:	e9 54 02 00 00       	jmp    c0015be0 <picEOI(int)>

c001598c <HalRestart()>:
c001598c:	c3                   	ret    

c001598d <HalShutdown()>:
c001598d:	c3                   	ret    

c001598e <HalSleep()>:
c001598e:	c3                   	ret    
c001598f:	90                   	nop

c0015990 <picIoWait()>:
c0015990:	eb 00                	jmp    c0015992 <picIoWait()+0x2>
c0015992:	eb 00                	jmp    c0015994 <picIoWait()+0x4>
c0015994:	90                   	nop
c0015995:	c3                   	ret    
c0015996:	66 90                	xchg   ax,ax

c0015998 <picDisable()>:
c0015998:	83 ec 10             	sub    esp,0x10
c001599b:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00159a2:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00159a7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00159ab:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00159b0:	ee                   	out    dx,al
c00159b1:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00159b8:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00159bd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00159c1:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00159c6:	ee                   	out    dx,al
c00159c7:	90                   	nop
c00159c8:	83 c4 10             	add    esp,0x10
c00159cb:	c3                   	ret    

c00159cc <picGetIRQReg(int)>:
c00159cc:	83 ec 10             	sub    esp,0x10
c00159cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159d3:	25 ff 00 00 00       	and    eax,0xff
c00159d8:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00159df:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00159e3:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00159e7:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00159ec:	ee                   	out    dx,al
c00159ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159f1:	25 ff 00 00 00       	and    eax,0xff
c00159f6:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00159fd:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015a01:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015a05:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015a0a:	ee                   	out    dx,al
c0015a0b:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0015a12:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0015a17:	89 c2                	mov    edx,eax
c0015a19:	ec                   	in     al,dx
c0015a1a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015a1e:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015a22:	25 ff 00 00 00       	and    eax,0xff
c0015a27:	c1 e0 08             	shl    eax,0x8
c0015a2a:	89 c1                	mov    ecx,eax
c0015a2c:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0015a33:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015a38:	89 c2                	mov    edx,eax
c0015a3a:	ec                   	in     al,dx
c0015a3b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015a3f:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0015a43:	25 ff 00 00 00       	and    eax,0xff
c0015a48:	09 c8                	or     eax,ecx
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	c3                   	ret    
c0015a4e:	66 90                	xchg   ax,ax

c0015a50 <picOpen()>:
c0015a50:	83 ec 50             	sub    esp,0x50
c0015a53:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015a5a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015a5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015a63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a67:	ee                   	out    dx,al
c0015a68:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015a6f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0015a74:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015a78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a7c:	ee                   	out    dx,al
c0015a7d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0015a85:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015a8d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0015a94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015a98:	89 c2                	mov    edx,eax
c0015a9a:	ec                   	in     al,dx
c0015a9b:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015a9f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015aa3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0015aa7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0015aae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ab2:	89 c2                	mov    edx,eax
c0015ab4:	ec                   	in     al,dx
c0015ab5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015ab9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015abd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0015ac1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0015ac8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0015acd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0015ad1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ad5:	ee                   	out    dx,al
c0015ad6:	e8 b5 fe ff ff       	call   c0015990 <picIoWait()>
c0015adb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0015ae2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0015ae7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015aeb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015aef:	ee                   	out    dx,al
c0015af0:	e8 9b fe ff ff       	call   c0015990 <picIoWait()>
c0015af5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015af9:	25 ff 00 00 00       	and    eax,0xff
c0015afe:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0015b05:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015b09:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015b0d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015b11:	ee                   	out    dx,al
c0015b12:	e8 79 fe ff ff       	call   c0015990 <picIoWait()>
c0015b17:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015b1b:	25 ff 00 00 00       	and    eax,0xff
c0015b20:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0015b27:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015b2b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015b2f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0015b33:	ee                   	out    dx,al
c0015b34:	e8 57 fe ff ff       	call   c0015990 <picIoWait()>
c0015b39:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015b40:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0015b45:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015b49:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015b4d:	ee                   	out    dx,al
c0015b4e:	e8 3d fe ff ff       	call   c0015990 <picIoWait()>
c0015b53:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015b5a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015b5f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0015b63:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0015b67:	ee                   	out    dx,al
c0015b68:	e8 23 fe ff ff       	call   c0015990 <picIoWait()>
c0015b6d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0015b74:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015b79:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015b7d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015b81:	ee                   	out    dx,al
c0015b82:	e8 09 fe ff ff       	call   c0015990 <picIoWait()>
c0015b87:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015b8e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0015b93:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015b97:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015b9b:	ee                   	out    dx,al
c0015b9c:	e8 ef fd ff ff       	call   c0015990 <picIoWait()>
c0015ba1:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c0015ba5:	25 ff 00 00 00       	and    eax,0xff
c0015baa:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0015bb1:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0015bb5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0015bb9:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0015bbd:	ee                   	out    dx,al
c0015bbe:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c0015bc2:	25 ff 00 00 00       	and    eax,0xff
c0015bc7:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0015bce:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0015bd2:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0015bd6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0015bda:	ee                   	out    dx,al
c0015bdb:	90                   	nop
c0015bdc:	83 c4 50             	add    esp,0x50
c0015bdf:	c3                   	ret    

c0015be0 <picEOI(int)>:
c0015be0:	83 ec 10             	sub    esp,0x10
c0015be3:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015be8:	75 22                	jne    c0015c0c <picEOI(int)+0x2c>
c0015bea:	6a 0b                	push   0xb
c0015bec:	e8 db fd ff ff       	call   c00159cc <picGetIRQReg(int)>
c0015bf1:	83 c4 04             	add    esp,0x4
c0015bf4:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015bf9:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015bfe:	25 ff ff 00 00       	and    eax,0xffff
c0015c03:	25 80 00 00 00       	and    eax,0x80
c0015c08:	74 72                	je     c0015c7c <picEOI(int)+0x9c>
c0015c0a:	66 90                	xchg   ax,ax
c0015c0c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015c11:	75 31                	jne    c0015c44 <picEOI(int)+0x64>
c0015c13:	6a 0b                	push   0xb
c0015c15:	e8 b2 fd ff ff       	call   c00159cc <picGetIRQReg(int)>
c0015c1a:	83 c4 04             	add    esp,0x4
c0015c1d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0015c22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c26:	66 85 c0             	test   ax,ax
c0015c29:	78 19                	js     c0015c44 <picEOI(int)+0x64>
c0015c2b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0015c32:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0015c37:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015c3b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015c40:	ee                   	out    dx,al
c0015c41:	eb 3d                	jmp    c0015c80 <picEOI(int)+0xa0>
c0015c43:	90                   	nop
c0015c44:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015c49:	7e 19                	jle    c0015c64 <picEOI(int)+0x84>
c0015c4b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015c52:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0015c57:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015c5b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015c60:	ee                   	out    dx,al
c0015c61:	8d 76 00             	lea    esi,[esi+0x0]
c0015c64:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015c6b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015c70:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0015c74:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015c79:	ee                   	out    dx,al
c0015c7a:	eb 04                	jmp    c0015c80 <picEOI(int)+0xa0>
c0015c7c:	90                   	nop
c0015c7d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c80:	83 c4 10             	add    esp,0x10
c0015c83:	c3                   	ret    

c0015c84 <RTC::open(int, int, void*)>:
c0015c84:	31 c0                	xor    eax,eax
c0015c86:	c3                   	ret    
c0015c87:	90                   	nop

c0015c88 <RTC::close(int, int, void*)>:
c0015c88:	31 c0                	xor    eax,eax
c0015c8a:	c3                   	ret    
c0015c8b:	90                   	nop

c0015c8c <RTC::timeInSecondsUTC()>:
c0015c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015c90:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015c96:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015c9c:	c3                   	ret    
c0015c9d:	90                   	nop

c0015c9e <RTC::timeInDatetimeUTC()>:
c0015c9e:	53                   	push   ebx
c0015c9f:	83 ec 14             	sub    esp,0x14
c0015ca2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015caa:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cac:	50                   	push   eax
c0015cad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015cb0:	83 c4 0c             	add    esp,0xc
c0015cb3:	52                   	push   edx
c0015cb4:	50                   	push   eax
c0015cb5:	53                   	push   ebx
c0015cb6:	e8 ed 5a ff ff       	call   c000b7a8 <secondsToDatetime(unsigned long long)>
c0015cbb:	89 d8                	mov    eax,ebx
c0015cbd:	83 c4 14             	add    esp,0x14
c0015cc0:	5b                   	pop    ebx
c0015cc1:	c2 04 00             	ret    0x4

c0015cc4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0015cc4:	56                   	push   esi
c0015cc5:	53                   	push   ebx
c0015cc6:	83 ec 14             	sub    esp,0x14
c0015cc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015ccd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ccf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0015cd2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015cd6:	52                   	push   edx
c0015cd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cdb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cdf:	50                   	push   eax
c0015ce0:	e8 c3 5a ff ff       	call   c000b7a8 <secondsToDatetime(unsigned long long)>
c0015ce5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ce9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015ced:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015cf1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0015cf5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015cf9:	89 f0                	mov    eax,esi
c0015cfb:	83 c4 20             	add    esp,0x20
c0015cfe:	5b                   	pop    ebx
c0015cff:	5e                   	pop    esi
c0015d00:	ff e0                	jmp    eax

c0015d02 <RTC::~RTC()>:
c0015d02:	83 ec 0c             	sub    esp,0xc
c0015d05:	ba a0 f0 01 c0       	mov    edx,0xc001f0a0
c0015d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d0e:	89 10                	mov    DWORD PTR [eax],edx
c0015d10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d14:	83 ec 0c             	sub    esp,0xc
c0015d17:	50                   	push   eax
c0015d18:	e8 0f 58 ff ff       	call   c000b52c <Clock::~Clock()>
c0015d1d:	83 c4 10             	add    esp,0x10
c0015d20:	90                   	nop
c0015d21:	83 c4 0c             	add    esp,0xc
c0015d24:	c3                   	ret    
c0015d25:	90                   	nop

c0015d26 <RTC::~RTC()>:
c0015d26:	83 ec 0c             	sub    esp,0xc
c0015d29:	83 ec 0c             	sub    esp,0xc
c0015d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d30:	e8 cd ff ff ff       	call   c0015d02 <RTC::~RTC()>
c0015d35:	83 c4 10             	add    esp,0x10
c0015d38:	83 ec 08             	sub    esp,0x8
c0015d3b:	68 60 01 00 00       	push   0x160
c0015d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d44:	e8 b5 47 ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c0015d49:	83 c4 10             	add    esp,0x10
c0015d4c:	83 c4 0c             	add    esp,0xc
c0015d4f:	c3                   	ret    

c0015d50 <RTC::get_update_in_progress_flag()>:
c0015d50:	83 ec 14             	sub    esp,0x14
c0015d53:	6a 0a                	push   0xa
c0015d55:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015d5b:	e8 46 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d60:	83 c4 1c             	add    esp,0x1c
c0015d63:	c0 e8 07             	shr    al,0x7
c0015d66:	c3                   	ret    
c0015d67:	90                   	nop

c0015d68 <RTC::completeRTCRefresh()>:
c0015d68:	55                   	push   ebp
c0015d69:	57                   	push   edi
c0015d6a:	56                   	push   esi
c0015d6b:	53                   	push   ebx
c0015d6c:	83 ec 2c             	sub    esp,0x2c
c0015d6f:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015d75:	83 ec 0c             	sub    esp,0xc
c0015d78:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015d7c:	e8 cf ff ff ff       	call   c0015d50 <RTC::get_update_in_progress_flag()>
c0015d81:	83 c4 10             	add    esp,0x10
c0015d84:	84 c0                	test   al,al
c0015d86:	74 0e                	je     c0015d96 <RTC::completeRTCRefresh()+0x2e>
c0015d88:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015d8e:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015d94:	73 df                	jae    c0015d75 <RTC::completeRTCRefresh()+0xd>
c0015d96:	55                   	push   ebp
c0015d97:	55                   	push   ebp
c0015d98:	6a 00                	push   0x0
c0015d9a:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015da0:	e8 01 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015da5:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015da9:	58                   	pop    eax
c0015daa:	5a                   	pop    edx
c0015dab:	6a 02                	push   0x2
c0015dad:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015db3:	e8 ee 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015db8:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0015dbc:	59                   	pop    ecx
c0015dbd:	5b                   	pop    ebx
c0015dbe:	6a 04                	push   0x4
c0015dc0:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dc6:	e8 db 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dcb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0015dcf:	5e                   	pop    esi
c0015dd0:	5f                   	pop    edi
c0015dd1:	6a 07                	push   0x7
c0015dd3:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dd9:	e8 c8 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015dde:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0015de2:	5d                   	pop    ebp
c0015de3:	58                   	pop    eax
c0015de4:	6a 08                	push   0x8
c0015de6:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dec:	e8 b5 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015df1:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0015df5:	58                   	pop    eax
c0015df6:	5a                   	pop    edx
c0015df7:	6a 09                	push   0x9
c0015df9:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015dff:	e8 a2 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e04:	83 c4 10             	add    esp,0x10
c0015e07:	0f b6 e8             	movzx  ebp,al
c0015e0a:	8b 1d 8c 44 02 c0    	mov    ebx,DWORD PTR ds:0xc002448c
c0015e10:	83 ec 0c             	sub    esp,0xc
c0015e13:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015e17:	e8 34 ff ff ff       	call   c0015d50 <RTC::get_update_in_progress_flag()>
c0015e1c:	83 c4 10             	add    esp,0x10
c0015e1f:	84 c0                	test   al,al
c0015e21:	74 0e                	je     c0015e31 <RTC::completeRTCRefresh()+0xc9>
c0015e23:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015e29:	3b 05 8c 44 02 c0    	cmp    eax,DWORD PTR ds:0xc002448c
c0015e2f:	73 df                	jae    c0015e10 <RTC::completeRTCRefresh()+0xa8>
c0015e31:	50                   	push   eax
c0015e32:	50                   	push   eax
c0015e33:	6a 00                	push   0x0
c0015e35:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e3b:	e8 66 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e40:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015e44:	58                   	pop    eax
c0015e45:	5a                   	pop    edx
c0015e46:	6a 02                	push   0x2
c0015e48:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e4e:	e8 53 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e53:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015e57:	59                   	pop    ecx
c0015e58:	5b                   	pop    ebx
c0015e59:	6a 04                	push   0x4
c0015e5b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e61:	e8 40 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e66:	5e                   	pop    esi
c0015e67:	88 c3                	mov    bl,al
c0015e69:	5f                   	pop    edi
c0015e6a:	6a 07                	push   0x7
c0015e6c:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e72:	e8 2f 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e77:	89 c6                	mov    esi,eax
c0015e79:	58                   	pop    eax
c0015e7a:	5a                   	pop    edx
c0015e7b:	6a 08                	push   0x8
c0015e7d:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e83:	e8 1e 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e88:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015e8c:	59                   	pop    ecx
c0015e8d:	5f                   	pop    edi
c0015e8e:	6a 09                	push   0x9
c0015e90:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015e96:	e8 0b 10 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015e9b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015e9f:	0f b6 f8             	movzx  edi,al
c0015ea2:	83 c4 10             	add    esp,0x10
c0015ea5:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015ea9:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015ead:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015eb1:	89 f1                	mov    ecx,esi
c0015eb3:	0f 94 c0             	sete   al
c0015eb6:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015eba:	0f 94 c2             	sete   dl
c0015ebd:	21 d0                	and    eax,edx
c0015ebf:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015ec3:	0f 94 c2             	sete   dl
c0015ec6:	21 c2                	and    edx,eax
c0015ec8:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015ecc:	0f 94 c0             	sete   al
c0015ecf:	21 d0                	and    eax,edx
c0015ed1:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015ed5:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015ed9:	0f 94 c1             	sete   cl
c0015edc:	84 c8                	test   al,cl
c0015ede:	75 29                	jne    c0015f09 <RTC::completeRTCRefresh()+0x1a1>
c0015ee0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015ee4:	89 fd                	mov    ebp,edi
c0015ee6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015eea:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015eee:	89 f0                	mov    eax,esi
c0015ef0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015ef4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015ef8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015efc:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f00:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015f04:	e9 01 ff ff ff       	jmp    c0015e0a <RTC::completeRTCRefresh()+0xa2>
c0015f09:	39 fd                	cmp    ebp,edi
c0015f0b:	75 d3                	jne    c0015ee0 <RTC::completeRTCRefresh()+0x178>
c0015f0d:	55                   	push   ebp
c0015f0e:	55                   	push   ebp
c0015f0f:	6a 0b                	push   0xb
c0015f11:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0015f17:	e8 8a 0f ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015f1c:	83 c4 10             	add    esp,0x10
c0015f1f:	89 c5                	mov    ebp,eax
c0015f21:	a8 04                	test   al,0x4
c0015f23:	75 78                	jne    c0015f9d <RTC::completeRTCRefresh()+0x235>
c0015f25:	b1 0a                	mov    cl,0xa
c0015f27:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015f2b:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015f2f:	83 e2 0f             	and    edx,0xf
c0015f32:	c0 e8 04             	shr    al,0x4
c0015f35:	c1 ef 04             	shr    edi,0x4
c0015f38:	f6 e1                	mul    cl
c0015f3a:	6b ff 0a             	imul   edi,edi,0xa
c0015f3d:	01 d0                	add    eax,edx
c0015f3f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015f43:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015f47:	83 e2 0f             	and    edx,0xf
c0015f4a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015f4e:	c0 e8 04             	shr    al,0x4
c0015f51:	f6 e1                	mul    cl
c0015f53:	01 d0                	add    eax,edx
c0015f55:	88 da                	mov    dl,bl
c0015f57:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015f5b:	83 e2 0f             	and    edx,0xf
c0015f5e:	88 d8                	mov    al,bl
c0015f60:	83 e3 80             	and    ebx,0xffffff80
c0015f63:	c0 e8 04             	shr    al,0x4
c0015f66:	83 e0 07             	and    eax,0x7
c0015f69:	f6 e1                	mul    cl
c0015f6b:	01 d0                	add    eax,edx
c0015f6d:	89 f2                	mov    edx,esi
c0015f6f:	09 c3                	or     ebx,eax
c0015f71:	83 e2 0f             	and    edx,0xf
c0015f74:	89 f0                	mov    eax,esi
c0015f76:	c0 e8 04             	shr    al,0x4
c0015f79:	f6 e1                	mul    cl
c0015f7b:	8d 34 02             	lea    esi,[edx+eax*1]
c0015f7e:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015f82:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015f86:	83 e2 0f             	and    edx,0xf
c0015f89:	c0 e8 04             	shr    al,0x4
c0015f8c:	f6 e1                	mul    cl
c0015f8e:	01 d0                	add    eax,edx
c0015f90:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015f94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f98:	83 e0 0f             	and    eax,0xf
c0015f9b:	01 c7                	add    edi,eax
c0015f9d:	83 e5 02             	and    ebp,0x2
c0015fa0:	75 14                	jne    c0015fb6 <RTC::completeRTCRefresh()+0x24e>
c0015fa2:	84 db                	test   bl,bl
c0015fa4:	79 10                	jns    c0015fb6 <RTC::completeRTCRefresh()+0x24e>
c0015fa6:	83 e3 7f             	and    ebx,0x7f
c0015fa9:	b9 18 00 00 00       	mov    ecx,0x18
c0015fae:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015fb1:	99                   	cdq    
c0015fb2:	f7 f9                	idiv   ecx
c0015fb4:	88 d3                	mov    bl,dl
c0015fb6:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015fbc:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015fc2:	77 06                	ja     c0015fca <RTC::completeRTCRefresh()+0x262>
c0015fc4:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015fca:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015fcf:	31 d2                	xor    edx,edx
c0015fd1:	c1 e1 10             	shl    ecx,0x10
c0015fd4:	89 d7                	mov    edi,edx
c0015fd6:	c1 e5 10             	shl    ebp,0x10
c0015fd9:	31 c0                	xor    eax,eax
c0015fdb:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015fe1:	09 cf                	or     edi,ecx
c0015fe3:	89 fa                	mov    edx,edi
c0015fe5:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015fe9:	88 da                	mov    dl,bl
c0015feb:	89 f3                	mov    ebx,esi
c0015fed:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015ff1:	88 d8                	mov    al,bl
c0015ff3:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015ff7:	0f b7 c8             	movzx  ecx,ax
c0015ffa:	09 e9                	or     ecx,ebp
c0015ffc:	89 c8                	mov    eax,ecx
c0015ffe:	51                   	push   ecx
c0015fff:	51                   	push   ecx
c0016000:	52                   	push   edx
c0016001:	50                   	push   eax
c0016002:	e8 14 56 ff ff       	call   c000b61b <datetimeToSeconds(datetime_t)>
c0016007:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001600b:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0016011:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0016017:	83 c4 3c             	add    esp,0x3c
c001601a:	5b                   	pop    ebx
c001601b:	5e                   	pop    esi
c001601c:	5f                   	pop    edi
c001601d:	5d                   	pop    ebp
c001601e:	c3                   	ret    
c001601f:	90                   	nop

c0016020 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0016020:	55                   	push   ebp
c0016021:	57                   	push   edi
c0016022:	56                   	push   esi
c0016023:	53                   	push   ebx
c0016024:	83 ec 30             	sub    esp,0x30
c0016027:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c001602b:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001602f:	6a 00                	push   0x0
c0016031:	6a 00                	push   0x0
c0016033:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016039:	e8 7e 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001603e:	83 c4 0c             	add    esp,0xc
c0016041:	6a 00                	push   0x0
c0016043:	6a 02                	push   0x2
c0016045:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001604b:	e8 6c 0f ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016050:	31 d2                	xor    edx,edx
c0016052:	89 f9                	mov    ecx,edi
c0016054:	89 f8                	mov    eax,edi
c0016056:	c1 e9 10             	shr    ecx,0x10
c0016059:	0f b6 c4             	movzx  eax,ah
c001605c:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0016060:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0016064:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016068:	b9 64 00 00 00       	mov    ecx,0x64
c001606d:	89 f0                	mov    eax,esi
c001606f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0016073:	89 f0                	mov    eax,esi
c0016075:	0f b6 c4             	movzx  eax,ah
c0016078:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001607c:	89 f0                	mov    eax,esi
c001607e:	c1 e8 10             	shr    eax,0x10
c0016081:	66 f7 f1             	div    cx
c0016084:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0016089:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c001608e:	59                   	pop    ecx
c001608f:	5b                   	pop    ebx
c0016090:	89 fb                	mov    ebx,edi
c0016092:	6a 0b                	push   0xb
c0016094:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001609a:	e8 07 0e ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001609f:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c00160a3:	83 c4 10             	add    esp,0x10
c00160a6:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c00160ab:	75 74                	jne    c0016121 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c00160ad:	b2 0a                	mov    dl,0xa
c00160af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00160b3:	0f b6 c1             	movzx  eax,cl
c00160b6:	f6 f2                	div    dl
c00160b8:	88 c3                	mov    bl,al
c00160ba:	88 e0                	mov    al,ah
c00160bc:	c1 e3 04             	shl    ebx,0x4
c00160bf:	09 c3                	or     ebx,eax
c00160c1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00160c6:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c00160ca:	f6 f2                	div    dl
c00160cc:	88 c1                	mov    cl,al
c00160ce:	88 e0                	mov    al,ah
c00160d0:	c1 e1 04             	shl    ecx,0x4
c00160d3:	09 c1                	or     ecx,eax
c00160d5:	89 f8                	mov    eax,edi
c00160d7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00160db:	0f b6 c0             	movzx  eax,al
c00160de:	f6 f2                	div    dl
c00160e0:	88 c3                	mov    bl,al
c00160e2:	88 e0                	mov    al,ah
c00160e4:	c1 e3 04             	shl    ebx,0x4
c00160e7:	09 c3                	or     ebx,eax
c00160e9:	89 f0                	mov    eax,esi
c00160eb:	0f b6 c0             	movzx  eax,al
c00160ee:	f6 f2                	div    dl
c00160f0:	88 c1                	mov    cl,al
c00160f2:	88 e0                	mov    al,ah
c00160f4:	c1 e1 04             	shl    ecx,0x4
c00160f7:	09 c1                	or     ecx,eax
c00160f9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00160fe:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0016102:	f6 f2                	div    dl
c0016104:	88 c1                	mov    cl,al
c0016106:	88 e0                	mov    al,ah
c0016108:	c1 e1 04             	shl    ecx,0x4
c001610b:	09 c1                	or     ecx,eax
c001610d:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0016112:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0016116:	f6 f2                	div    dl
c0016118:	89 c5                	mov    ebp,eax
c001611a:	88 e0                	mov    al,ah
c001611c:	c1 e5 04             	shl    ebp,0x4
c001611f:	09 c5                	or     ebp,eax
c0016121:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0016126:	75 17                	jne    c001613f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016128:	80 fb 0b             	cmp    bl,0xb
c001612b:	76 0c                	jbe    c0016139 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c001612d:	80 eb 0c             	sub    bl,0xc
c0016130:	75 02                	jne    c0016134 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0016132:	b3 0c                	mov    bl,0xc
c0016134:	83 cb 80             	or     ebx,0xffffff80
c0016137:	eb 06                	jmp    c001613f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0016139:	84 db                	test   bl,bl
c001613b:	75 02                	jne    c001613f <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c001613d:	b3 0c                	mov    bl,0xc
c001613f:	0f b6 db             	movzx  ebx,bl
c0016142:	50                   	push   eax
c0016143:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0016148:	50                   	push   eax
c0016149:	6a 00                	push   0x0
c001614b:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016151:	e8 66 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016156:	83 c4 0c             	add    esp,0xc
c0016159:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001615e:	50                   	push   eax
c001615f:	6a 02                	push   0x2
c0016161:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016167:	e8 50 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001616c:	83 c4 0c             	add    esp,0xc
c001616f:	53                   	push   ebx
c0016170:	6a 04                	push   0x4
c0016172:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c0016178:	e8 3f 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c001617d:	83 c4 0c             	add    esp,0xc
c0016180:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0016185:	50                   	push   eax
c0016186:	6a 07                	push   0x7
c0016188:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c001618e:	e8 29 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0016193:	83 c4 0c             	add    esp,0xc
c0016196:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001619b:	50                   	push   eax
c001619c:	6a 08                	push   0x8
c001619e:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161a4:	e8 13 0e ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161a9:	83 c4 0c             	add    esp,0xc
c00161ac:	89 e8                	mov    eax,ebp
c00161ae:	0f b6 e8             	movzx  ebp,al
c00161b1:	55                   	push   ebp
c00161b2:	6a 09                	push   0x9
c00161b4:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161ba:	e8 fd 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00161bf:	5a                   	pop    edx
c00161c0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00161c4:	e8 9f fb ff ff       	call   c0015d68 <RTC::completeRTCRefresh()>
c00161c9:	83 c4 3c             	add    esp,0x3c
c00161cc:	b0 01                	mov    al,0x1
c00161ce:	5b                   	pop    ebx
c00161cf:	5e                   	pop    esi
c00161d0:	5f                   	pop    edi
c00161d1:	5d                   	pop    ebp
c00161d2:	c3                   	ret    

c00161d3 <rtcIRQHandler(regs*, void*)>:
c00161d3:	53                   	push   ebx
c00161d4:	83 ec 10             	sub    esp,0x10
c00161d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00161db:	6a 0c                	push   0xc
c00161dd:	ff 35 b8 1e 02 c0    	push   DWORD PTR ds:0xc0021eb8
c00161e3:	e8 be 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00161e8:	83 c4 10             	add    esp,0x10
c00161eb:	84 c0                	test   al,al
c00161ed:	79 24                	jns    c0016213 <rtcIRQHandler(regs*, void*)+0x40>
c00161ef:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00161f6:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00161fd:	66 ff 05 14 52 02 c0 	inc    WORD PTR ds:0xc0025214
c0016204:	75 0d                	jne    c0016213 <rtcIRQHandler(regs*, void*)+0x40>
c0016206:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001620a:	83 c4 08             	add    esp,0x8
c001620d:	5b                   	pop    ebx
c001620e:	e9 55 fb ff ff       	jmp    c0015d68 <RTC::completeRTCRefresh()>
c0016213:	83 c4 08             	add    esp,0x8
c0016216:	5b                   	pop    ebx
c0016217:	c3                   	ret    

c0016218 <RTC::RTC()>:
c0016218:	83 ec 1c             	sub    esp,0x1c
c001621b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001621f:	83 ec 08             	sub    esp,0x8
c0016222:	68 83 f0 01 c0       	push   0xc001f083
c0016227:	50                   	push   eax
c0016228:	e8 c9 52 ff ff       	call   c000b4f6 <Clock::Clock(char const*)>
c001622d:	83 c4 10             	add    esp,0x10
c0016230:	ba a0 f0 01 c0       	mov    edx,0xc001f0a0
c0016235:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016239:	89 10                	mov    DWORD PTR [eax],edx
c001623b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001623f:	83 ec 0c             	sub    esp,0xc
c0016242:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016246:	6a 01                	push   0x1
c0016248:	68 d3 61 01 c0       	push   0xc00161d3
c001624d:	6a 08                	push   0x8
c001624f:	50                   	push   eax
c0016250:	e8 8b 57 ff ff       	call   c000b9e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0016255:	83 c4 20             	add    esp,0x20
c0016258:	89 c2                	mov    edx,eax
c001625a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001625e:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0016264:	fa                   	cli    
c0016265:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001626a:	40                   	inc    eax
c001626b:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c0016270:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0016275:	83 ec 08             	sub    esp,0x8
c0016278:	6a 0b                	push   0xb
c001627a:	50                   	push   eax
c001627b:	e8 26 0c ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0016280:	83 c4 10             	add    esp,0x10
c0016283:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016287:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001628c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0016290:	83 ca 10             	or     edx,0x10
c0016293:	81 e2 ff 00 00 00    	and    edx,0xff
c0016299:	83 ec 04             	sub    esp,0x4
c001629c:	52                   	push   edx
c001629d:	6a 0b                	push   0xb
c001629f:	50                   	push   eax
c00162a0:	e8 17 0d ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c00162a5:	83 c4 10             	add    esp,0x10
c00162a8:	83 ec 0c             	sub    esp,0xc
c00162ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00162af:	e8 b4 fa ff ff       	call   c0015d68 <RTC::completeRTCRefresh()>
c00162b4:	83 c4 10             	add    esp,0x10
c00162b7:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00162bc:	48                   	dec    eax
c00162bd:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c00162c2:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c00162c7:	85 c0                	test   eax,eax
c00162c9:	75 01                	jne    c00162cc <RTC::RTC()+0xb4>
c00162cb:	fb                   	sti    
c00162cc:	90                   	nop
c00162cd:	83 c4 1c             	add    esp,0x1c
c00162d0:	c3                   	ret    
c00162d1:	66 90                	xchg   ax,ax
c00162d3:	90                   	nop

c00162d4 <HalConsoleScroll(int, int)>:
c00162d4:	83 ec 10             	sub    esp,0x10
c00162d7:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c00162df:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00162e7:	90                   	nop
c00162e8:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c00162ed:	0f 8f e1 00 00 00    	jg     c00163d4 <HalConsoleScroll(int, int)+0x100>
c00162f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00162fb:	90                   	nop
c00162fc:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0016304:	0f 8f be 00 00 00    	jg     c00163c8 <HalConsoleScroll(int, int)+0xf4>
c001630a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001630e:	89 d0                	mov    eax,edx
c0016310:	c1 e0 02             	shl    eax,0x2
c0016313:	01 d0                	add    eax,edx
c0016315:	c1 e0 05             	shl    eax,0x5
c0016318:	89 c2                	mov    edx,eax
c001631a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001631e:	01 d0                	add    eax,edx
c0016320:	89 c2                	mov    edx,eax
c0016322:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016326:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0016329:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001632d:	89 d0                	mov    eax,edx
c001632f:	c1 e0 02             	shl    eax,0x2
c0016332:	01 d0                	add    eax,edx
c0016334:	c1 e0 05             	shl    eax,0x5
c0016337:	89 c2                	mov    edx,eax
c0016339:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001633d:	01 d0                	add    eax,edx
c001633f:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0016345:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016349:	01 c2                	add    edx,eax
c001634b:	8a 01                	mov    al,BYTE PTR [ecx]
c001634d:	88 02                	mov    BYTE PTR [edx],al
c001634f:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0016354:	75 66                	jne    c00163bc <HalConsoleScroll(int, int)+0xe8>
c0016356:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001635a:	83 e0 01             	and    eax,0x1
c001635d:	74 39                	je     c0016398 <HalConsoleScroll(int, int)+0xc4>
c001635f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016363:	83 e0 0f             	and    eax,0xf
c0016366:	88 c2                	mov    dl,al
c0016368:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001636c:	c1 e0 04             	shl    eax,0x4
c001636f:	88 d1                	mov    cl,dl
c0016371:	09 c1                	or     ecx,eax
c0016373:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016377:	89 d0                	mov    eax,edx
c0016379:	c1 e0 02             	shl    eax,0x2
c001637c:	01 d0                	add    eax,edx
c001637e:	c1 e0 05             	shl    eax,0x5
c0016381:	89 c2                	mov    edx,eax
c0016383:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016387:	01 d0                	add    eax,edx
c0016389:	89 c2                	mov    edx,eax
c001638b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001638f:	01 d0                	add    eax,edx
c0016391:	88 ca                	mov    dl,cl
c0016393:	88 10                	mov    BYTE PTR [eax],dl
c0016395:	eb 25                	jmp    c00163bc <HalConsoleScroll(int, int)+0xe8>
c0016397:	90                   	nop
c0016398:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001639c:	89 d0                	mov    eax,edx
c001639e:	c1 e0 02             	shl    eax,0x2
c00163a1:	01 d0                	add    eax,edx
c00163a3:	c1 e0 05             	shl    eax,0x5
c00163a6:	89 c2                	mov    edx,eax
c00163a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00163ac:	01 d0                	add    eax,edx
c00163ae:	89 c2                	mov    edx,eax
c00163b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163b4:	01 d0                	add    eax,edx
c00163b6:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00163b9:	8d 76 00             	lea    esi,[esi+0x0]
c00163bc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00163c0:	e9 37 ff ff ff       	jmp    c00162fc <HalConsoleScroll(int, int)+0x28>
c00163c5:	8d 76 00             	lea    esi,[esi+0x0]
c00163c8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00163cc:	e9 17 ff ff ff       	jmp    c00162e8 <HalConsoleScroll(int, int)+0x14>
c00163d1:	8d 76 00             	lea    esi,[esi+0x0]
c00163d4:	90                   	nop
c00163d5:	83 c4 10             	add    esp,0x10
c00163d8:	c3                   	ret    
c00163d9:	8d 76 00             	lea    esi,[esi+0x0]

c00163dc <HalConsoleWriteCharacter(char, int, int, int, int)>:
c00163dc:	83 ec 14             	sub    esp,0x14
c00163df:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00163e3:	88 04 24             	mov    BYTE PTR [esp],al
c00163e6:	8a 04 24             	mov    al,BYTE PTR [esp]
c00163e9:	25 ff 00 00 00       	and    eax,0xff
c00163ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00163f2:	89 d1                	mov    ecx,edx
c00163f4:	83 e1 0f             	and    ecx,0xf
c00163f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00163fb:	c1 e2 04             	shl    edx,0x4
c00163fe:	81 e2 ff 00 00 00    	and    edx,0xff
c0016404:	09 ca                	or     edx,ecx
c0016406:	c1 e2 08             	shl    edx,0x8
c0016409:	09 d0                	or     eax,edx
c001640b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016410:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016418:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001641c:	89 d0                	mov    eax,edx
c001641e:	c1 e0 02             	shl    eax,0x2
c0016421:	01 d0                	add    eax,edx
c0016423:	c1 e0 04             	shl    eax,0x4
c0016426:	89 c2                	mov    edx,eax
c0016428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001642c:	01 d0                	add    eax,edx
c001642e:	01 c0                	add    eax,eax
c0016430:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0016434:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016438:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001643d:	66 89 02             	mov    WORD PTR [edx],ax
c0016440:	90                   	nop
c0016441:	83 c4 14             	add    esp,0x14
c0016444:	c3                   	ret    
c0016445:	8d 76 00             	lea    esi,[esi+0x0]

c0016448 <HalConsoleCursorUpdate(int, int)>:
c0016448:	83 ec 20             	sub    esp,0x20
c001644b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001644f:	89 c2                	mov    edx,eax
c0016451:	89 d0                	mov    eax,edx
c0016453:	c1 e0 02             	shl    eax,0x2
c0016456:	01 d0                	add    eax,edx
c0016458:	c1 e0 04             	shl    eax,0x4
c001645b:	89 c2                	mov    edx,eax
c001645d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016461:	01 d0                	add    eax,edx
c0016463:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016468:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001646f:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0016474:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016478:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001647c:	ee                   	out    dx,al
c001647d:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0016482:	25 ff 00 00 00       	and    eax,0xff
c0016487:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001648e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0016492:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0016496:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001649a:	ee                   	out    dx,al
c001649b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00164a2:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00164a7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00164ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00164af:	ee                   	out    dx,al
c00164b0:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00164b5:	66 c1 e8 08          	shr    ax,0x8
c00164b9:	25 ff 00 00 00       	and    eax,0xff
c00164be:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00164c5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00164c9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00164cd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00164d1:	ee                   	out    dx,al
c00164d2:	90                   	nop
c00164d3:	83 c4 20             	add    esp,0x20
c00164d6:	c3                   	ret    
c00164d7:	90                   	nop

c00164d8 <FAT::getName()>:
c00164d8:	b8 d4 f0 01 c0       	mov    eax,0xc001f0d4
c00164dd:	c3                   	ret    
c00164de:	66 90                	xchg   ax,ax

c00164e0 <FAT::tell(void*, unsigned long long*)>:
c00164e0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00164e5:	75 09                	jne    c00164f0 <FAT::tell(void*, unsigned long long*)+0x10>
c00164e7:	b8 04 00 00 00       	mov    eax,0x4
c00164ec:	c3                   	ret    
c00164ed:	8d 76 00             	lea    esi,[esi+0x0]
c00164f0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00164f5:	75 09                	jne    c0016500 <FAT::tell(void*, unsigned long long*)+0x20>
c00164f7:	b8 04 00 00 00       	mov    eax,0x4
c00164fc:	c3                   	ret    
c00164fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016500:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016504:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0016507:	ba 00 00 00 00       	mov    edx,0x0
c001650c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016510:	89 01                	mov    DWORD PTR [ecx],eax
c0016512:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016515:	b8 00 00 00 00       	mov    eax,0x0
c001651a:	c3                   	ret    
c001651b:	90                   	nop

c001651c <FAT::stat(void*, unsigned long long*)>:
c001651c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016521:	75 09                	jne    c001652c <FAT::stat(void*, unsigned long long*)+0x10>
c0016523:	b8 04 00 00 00       	mov    eax,0x4
c0016528:	c3                   	ret    
c0016529:	8d 76 00             	lea    esi,[esi+0x0]
c001652c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016531:	75 09                	jne    c001653c <FAT::stat(void*, unsigned long long*)+0x20>
c0016533:	b8 04 00 00 00       	mov    eax,0x4
c0016538:	c3                   	ret    
c0016539:	8d 76 00             	lea    esi,[esi+0x0]
c001653c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016540:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0016543:	ba 00 00 00 00       	mov    edx,0x0
c0016548:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001654c:	89 01                	mov    DWORD PTR [ecx],eax
c001654e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016551:	b8 00 00 00 00       	mov    eax,0x0
c0016556:	c3                   	ret    
c0016557:	90                   	nop

c0016558 <FAT::~FAT()>:
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	ba 20 f1 01 c0       	mov    edx,0xc001f120
c0016560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016564:	89 10                	mov    DWORD PTR [eax],edx
c0016566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001656a:	83 ec 0c             	sub    esp,0xc
c001656d:	50                   	push   eax
c001656e:	e8 c7 43 ff ff       	call   c000a93a <Filesystem::~Filesystem()>
c0016573:	83 c4 10             	add    esp,0x10
c0016576:	90                   	nop
c0016577:	83 c4 0c             	add    esp,0xc
c001657a:	c3                   	ret    
c001657b:	90                   	nop

c001657c <FAT::~FAT()>:
c001657c:	83 ec 0c             	sub    esp,0xc
c001657f:	83 ec 0c             	sub    esp,0xc
c0016582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016586:	e8 cd ff ff ff       	call   c0016558 <FAT::~FAT()>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	83 ec 08             	sub    esp,0x8
c0016591:	6a 08                	push   0x8
c0016593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016597:	e8 62 3f ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001659c:	83 c4 10             	add    esp,0x10
c001659f:	83 c4 0c             	add    esp,0xc
c00165a2:	c3                   	ret    
c00165a3:	90                   	nop

c00165a4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00165a4:	83 ec 1c             	sub    esp,0x1c
c00165a7:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00165ae:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00165b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165b7:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00165be:	83 f8 ff             	cmp    eax,0xffffffff
c00165c1:	75 35                	jne    c00165f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00165c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00165c7:	88 c2                	mov    dl,al
c00165c9:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165ce:	01 d0                	add    eax,edx
c00165d0:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00165d4:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c00165da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00165de:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c00165e5:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00165ea:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165ee:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00165f5:	eb 19                	jmp    c0016610 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00165f7:	90                   	nop
c00165f8:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00165fc:	88 c2                	mov    dl,al
c00165fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016602:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016609:	01 d0                	add    eax,edx
c001660b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001660f:	90                   	nop
c0016610:	83 ec 04             	sub    esp,0x4
c0016613:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016617:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001661b:	8d 44 24 15          	lea    eax,[esp+0x15]
c001661f:	50                   	push   eax
c0016620:	e8 2f e8 fe ff       	call   c0004e54 <f_getlabel>
c0016625:	83 c4 10             	add    esp,0x10
c0016628:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001662c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016631:	75 09                	jne    c001663c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0016633:	b8 00 00 00 00       	mov    eax,0x0
c0016638:	eb 0a                	jmp    c0016644 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001663a:	66 90                	xchg   ax,ax
c001663c:	b8 01 00 00 00       	mov    eax,0x1
c0016641:	8d 76 00             	lea    esi,[esi+0x0]
c0016644:	83 c4 1c             	add    esp,0x1c
c0016647:	c3                   	ret    

c0016648 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016648:	57                   	push   edi
c0016649:	83 ec 58             	sub    esp,0x58
c001664c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0016654:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016658:	b8 00 00 00 00       	mov    eax,0x0
c001665d:	b9 0f 00 00 00       	mov    ecx,0xf
c0016662:	fc                   	cld    
c0016663:	89 d7                	mov    edi,edx
c0016665:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0016667:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001666b:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016672:	83 f8 ff             	cmp    eax,0xffffffff
c0016675:	75 35                	jne    c00166ac <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0016677:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001667b:	88 c2                	mov    dl,al
c001667d:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016682:	01 d0                	add    eax,edx
c0016684:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016688:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001668e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016692:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016699:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001669e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00166a2:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00166a9:	eb 19                	jmp    c00166c4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00166ab:	90                   	nop
c00166ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00166b0:	88 c2                	mov    dl,al
c00166b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00166b6:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c00166bd:	01 d0                	add    eax,edx
c00166bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00166c3:	90                   	nop
c00166c4:	83 ec 08             	sub    esp,0x8
c00166c7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00166cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00166cf:	50                   	push   eax
c00166d0:	e8 eb a0 fe ff       	call   c00007c0 <strcat>
c00166d5:	83 c4 10             	add    esp,0x10
c00166d8:	83 ec 0c             	sub    esp,0xc
c00166db:	8d 44 24 18          	lea    eax,[esp+0x18]
c00166df:	50                   	push   eax
c00166e0:	e8 c0 e8 fe ff       	call   c0004fa5 <f_setlabel>
c00166e5:	83 c4 10             	add    esp,0x10
c00166e8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00166ec:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00166f1:	75 09                	jne    c00166fc <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00166f3:	b8 00 00 00 00       	mov    eax,0x0
c00166f8:	eb 0a                	jmp    c0016704 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00166fa:	66 90                	xchg   ax,ax
c00166fc:	b8 01 00 00 00       	mov    eax,0x1
c0016701:	8d 76 00             	lea    esi,[esi+0x0]
c0016704:	83 c4 58             	add    esp,0x58
c0016707:	5f                   	pop    edi
c0016708:	c3                   	ret    
c0016709:	90                   	nop
c001670a:	66 90                	xchg   ax,ax

c001670c <FAT::format(LogicalDisk*, int, char const*, int)>:
c001670c:	83 ec 2c             	sub    esp,0x2c
c001670f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0016717:	83 ec 08             	sub    esp,0x8
c001671a:	68 f8 f0 01 c0       	push   0xc001f0f8
c001671f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016723:	e8 b8 9f fe ff       	call   c00006e0 <strcmp>
c0016728:	83 c4 10             	add    esp,0x10
c001672b:	85 c0                	test   eax,eax
c001672d:	0f 94 c0             	sete   al
c0016730:	84 c0                	test   al,al
c0016732:	74 10                	je     c0016744 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0016734:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001673c:	e9 b3 00 00 00       	jmp    c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016741:	8d 76 00             	lea    esi,[esi+0x0]
c0016744:	83 ec 08             	sub    esp,0x8
c0016747:	68 ea f0 01 c0       	push   0xc001f0ea
c001674c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016750:	e8 8b 9f fe ff       	call   c00006e0 <strcmp>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	85 c0                	test   eax,eax
c001675a:	0f 94 c0             	sete   al
c001675d:	84 c0                	test   al,al
c001675f:	74 0f                	je     c0016770 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016761:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016769:	e9 86 00 00 00       	jmp    c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001676e:	66 90                	xchg   ax,ax
c0016770:	83 ec 08             	sub    esp,0x8
c0016773:	68 f0 f0 01 c0       	push   0xc001f0f0
c0016778:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001677c:	e8 5f 9f fe ff       	call   c00006e0 <strcmp>
c0016781:	83 c4 10             	add    esp,0x10
c0016784:	85 c0                	test   eax,eax
c0016786:	0f 94 c0             	sete   al
c0016789:	84 c0                	test   al,al
c001678b:	74 0b                	je     c0016798 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001678d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016795:	eb 5d                	jmp    c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016797:	90                   	nop
c0016798:	83 ec 08             	sub    esp,0x8
c001679b:	68 bc cf 01 c0       	push   0xc001cfbc
c00167a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167a4:	e8 37 9f fe ff       	call   c00006e0 <strcmp>
c00167a9:	83 c4 10             	add    esp,0x10
c00167ac:	85 c0                	test   eax,eax
c00167ae:	0f 94 c0             	sete   al
c00167b1:	84 c0                	test   al,al
c00167b3:	74 0b                	je     c00167c0 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00167b5:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00167bd:	eb 35                	jmp    c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167bf:	90                   	nop
c00167c0:	83 ec 08             	sub    esp,0x8
c00167c3:	68 f6 f0 01 c0       	push   0xc001f0f6
c00167c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00167cc:	e8 0f 9f fe ff       	call   c00006e0 <strcmp>
c00167d1:	83 c4 10             	add    esp,0x10
c00167d4:	85 c0                	test   eax,eax
c00167d6:	0f 94 c0             	sete   al
c00167d9:	84 c0                	test   al,al
c00167db:	74 0b                	je     c00167e8 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00167dd:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00167e5:	eb 0d                	jmp    c00167f4 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00167e7:	90                   	nop
c00167e8:	b8 08 00 00 00       	mov    eax,0x8
c00167ed:	e9 ea 00 00 00       	jmp    c00168dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00167f2:	66 90                	xchg   ax,ax
c00167f4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00167fb:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016800:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016804:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c001680b:	83 f8 ff             	cmp    eax,0xffffffff
c001680e:	75 34                	jne    c0016844 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016810:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016814:	88 c2                	mov    dl,al
c0016816:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c001681b:	01 d0                	add    eax,edx
c001681d:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016821:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c0016827:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001682b:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c0016832:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016837:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001683b:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c0016842:	eb 18                	jmp    c001685c <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c0016844:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016848:	88 c2                	mov    dl,al
c001684a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001684e:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016855:	01 d0                	add    eax,edx
c0016857:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001685b:	90                   	nop
c001685c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016860:	88 04 24             	mov    BYTE PTR [esp],al
c0016863:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016867:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001686b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016873:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016878:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016880:	83 ec 0c             	sub    esp,0xc
c0016883:	68 00 20 00 00       	push   0x2000
c0016888:	e8 2c 0f ff ff       	call   c00077b9 <malloc>
c001688d:	83 c4 10             	add    esp,0x10
c0016890:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016894:	68 00 20 00 00       	push   0x2000
c0016899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001689d:	8d 44 24 08          	lea    eax,[esp+0x8]
c00168a1:	50                   	push   eax
c00168a2:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00168a6:	50                   	push   eax
c00168a7:	e8 e9 e9 fe ff       	call   c0005295 <f_mkfs>
c00168ac:	83 c4 10             	add    esp,0x10
c00168af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00168b3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00168b8:	75 0a                	jne    c00168c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00168ba:	b8 00 00 00 00       	mov    eax,0x0
c00168bf:	eb 1b                	jmp    c00168dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168c1:	8d 76 00             	lea    esi,[esi+0x0]
c00168c4:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00168c9:	75 09                	jne    c00168d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00168cb:	b8 09 00 00 00       	mov    eax,0x9
c00168d0:	eb 0a                	jmp    c00168dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00168d2:	66 90                	xchg   ax,ax
c00168d4:	b8 01 00 00 00       	mov    eax,0x1
c00168d9:	8d 76 00             	lea    esi,[esi+0x0]
c00168dc:	83 c4 2c             	add    esp,0x2c
c00168df:	c3                   	ret    

c00168e0 <FAT::tryMount(LogicalDisk*, int)>:
c00168e0:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00168e6:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c00168eb:	83 f8 14             	cmp    eax,0x14
c00168ee:	75 18                	jne    c0016908 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	68 fc f0 01 c0       	push   0xc001f0fc
c00168f8:	e8 7a 99 ff ff       	call   c0010277 <KePanic(char const*)>
c00168fd:	83 c4 10             	add    esp,0x10
c0016900:	b0 00                	mov    al,0x0
c0016902:	e9 e9 01 00 00       	jmp    c0016af0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016907:	90                   	nop
c0016908:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001690f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016915:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001691b:	3d 00 02 00 00       	cmp    eax,0x200
c0016920:	74 0a                	je     c001692c <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0016922:	b0 00                	mov    al,0x0
c0016924:	e9 c7 01 00 00       	jmp    c0016af0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016929:	8d 76 00             	lea    esi,[esi+0x0]
c001692c:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0016934:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001693b:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0016942:	83 f8 ff             	cmp    eax,0xffffffff
c0016945:	74 09                	je     c0016950 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0016947:	b0 01                	mov    al,0x1
c0016949:	e9 a2 01 00 00       	jmp    c0016af0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001694e:	66 90                	xchg   ax,ax
c0016950:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001695a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0016962:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016969:	88 c2                	mov    dl,al
c001696b:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016970:	01 d0                	add    eax,edx
c0016972:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016979:	8b 15 20 52 02 c0    	mov    edx,DWORD PTR ds:0xc0025220
c001697f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016986:	89 14 85 40 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdadc0],edx
c001698d:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016992:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016999:	89 14 85 c0 52 02 c0 	mov    DWORD PTR [eax*4-0x3ffdad40],edx
c00169a0:	83 ec 0c             	sub    esp,0xc
c00169a3:	68 34 02 00 00       	push   0x234
c00169a8:	e8 0c 0e ff ff       	call   c00077b9 <malloc>
c00169ad:	83 c4 10             	add    esp,0x10
c00169b0:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00169b7:	83 ec 04             	sub    esp,0x4
c00169ba:	6a 00                	push   0x0
c00169bc:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00169c3:	50                   	push   eax
c00169c4:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169cb:	e8 eb d0 fe ff       	call   c0003abb <f_mount>
c00169d0:	83 c4 10             	add    esp,0x10
c00169d3:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00169da:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00169e2:	74 1c                	je     c0016a00 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00169e4:	83 ec 0c             	sub    esp,0xc
c00169e7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00169ee:	e8 e6 0d ff ff       	call   c00077d9 <rfree>
c00169f3:	83 c4 10             	add    esp,0x10
c00169f6:	b0 00                	mov    al,0x0
c00169f8:	e9 f3 00 00 00       	jmp    c0016af0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00169fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016a00:	83 ec 04             	sub    esp,0x4
c0016a03:	68 00 01 00 00       	push   0x100
c0016a08:	6a 00                	push   0x0
c0016a0a:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a11:	50                   	push   eax
c0016a12:	e8 b9 9a fe ff       	call   c00004d0 <memset>
c0016a17:	83 c4 10             	add    esp,0x10
c0016a1a:	83 ec 08             	sub    esp,0x8
c0016a1d:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016a24:	50                   	push   eax
c0016a25:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a2c:	50                   	push   eax
c0016a2d:	e8 8e 9d fe ff       	call   c00007c0 <strcat>
c0016a32:	83 c4 10             	add    esp,0x10
c0016a35:	83 ec 08             	sub    esp,0x8
c0016a38:	68 0a f1 01 c0       	push   0xc001f10a
c0016a3d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016a44:	50                   	push   eax
c0016a45:	e8 76 9d fe ff       	call   c00007c0 <strcat>
c0016a4a:	83 c4 10             	add    esp,0x10
c0016a4d:	83 ec 04             	sub    esp,0x4
c0016a50:	6a 01                	push   0x1
c0016a52:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016a59:	50                   	push   eax
c0016a5a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a5e:	50                   	push   eax
c0016a5f:	e8 b9 d0 fe ff       	call   c0003b1d <f_open>
c0016a64:	83 c4 10             	add    esp,0x10
c0016a67:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016a6e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0016a75:	85 c0                	test   eax,eax
c0016a77:	74 0b                	je     c0016a84 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016a79:	78 31                	js     c0016aac <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a7b:	83 e8 04             	sub    eax,0x4
c0016a7e:	83 f8 01             	cmp    eax,0x1
c0016a81:	77 29                	ja     c0016aac <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016a83:	90                   	nop
c0016a84:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016a8c:	83 ec 0c             	sub    esp,0xc
c0016a8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016a93:	50                   	push   eax
c0016a94:	e8 37 d8 fe ff       	call   c00042d0 <f_close>
c0016a99:	83 c4 10             	add    esp,0x10
c0016a9c:	90                   	nop
c0016a9d:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c0016aa5:	74 41                	je     c0016ae8 <FAT::tryMount(LogicalDisk*, int)+0x208>
c0016aa7:	eb 33                	jmp    c0016adc <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0016aa9:	8d 76 00             	lea    esi,[esi+0x0]
c0016aac:	83 ec 0c             	sub    esp,0xc
c0016aaf:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016ab6:	e8 1e 0d ff ff       	call   c00077d9 <rfree>
c0016abb:	83 c4 10             	add    esp,0x10
c0016abe:	83 ec 04             	sub    esp,0x4
c0016ac1:	6a 00                	push   0x0
c0016ac3:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0016aca:	50                   	push   eax
c0016acb:	6a 00                	push   0x0
c0016acd:	e8 e9 cf fe ff       	call   c0003abb <f_mount>
c0016ad2:	83 c4 10             	add    esp,0x10
c0016ad5:	b0 00                	mov    al,0x0
c0016ad7:	eb 17                	jmp    c0016af0 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0016adc:	a1 20 52 02 c0       	mov    eax,ds:0xc0025220
c0016ae1:	40                   	inc    eax
c0016ae2:	a3 20 52 02 c0       	mov    ds:0xc0025220,eax
c0016ae7:	90                   	nop
c0016ae8:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016aef:	90                   	nop
c0016af0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0016af6:	c3                   	ret    
c0016af7:	90                   	nop

c0016af8 <FAT::allocateSwapfile(char const*, int)>:
c0016af8:	55                   	push   ebp
c0016af9:	57                   	push   edi
c0016afa:	56                   	push   esi
c0016afb:	53                   	push   ebx
c0016afc:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0016b02:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016b0d:	83 ec 0c             	sub    esp,0xc
c0016b10:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0016b17:	e8 9d 0c ff ff       	call   c00077b9 <malloc>
c0016b1c:	83 c4 10             	add    esp,0x10
c0016b1f:	89 c7                	mov    edi,eax
c0016b21:	a1 90 51 02 c0       	mov    eax,ds:0xc0025190
c0016b26:	83 ec 04             	sub    esp,0x4
c0016b29:	50                   	push   eax
c0016b2a:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016b31:	57                   	push   edi
c0016b32:	e8 33 40 ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c0016b37:	83 c4 10             	add    esp,0x10
c0016b3a:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016b41:	83 ec 04             	sub    esp,0x4
c0016b44:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016b48:	50                   	push   eax
c0016b49:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016b4d:	50                   	push   eax
c0016b4e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b55:	e8 7c 43 ff ff       	call   c000aed6 <File::stat(unsigned long long*, bool*)>
c0016b5a:	83 c4 10             	add    esp,0x10
c0016b5d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016b64:	c1 e0 14             	shl    eax,0x14
c0016b67:	89 c7                	mov    edi,eax
c0016b69:	89 c5                	mov    ebp,eax
c0016b6b:	c1 fd 1f             	sar    ebp,0x1f
c0016b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016b76:	89 f9                	mov    ecx,edi
c0016b78:	31 c1                	xor    ecx,eax
c0016b7a:	89 cb                	mov    ebx,ecx
c0016b7c:	89 e9                	mov    ecx,ebp
c0016b7e:	31 d1                	xor    ecx,edx
c0016b80:	89 ce                	mov    esi,ecx
c0016b82:	89 f0                	mov    eax,esi
c0016b84:	09 d8                	or     eax,ebx
c0016b86:	0f 84 9c 00 00 00    	je     c0016c28 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016b8c:	83 ec 0c             	sub    esp,0xc
c0016b8f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016b96:	e8 07 42 ff ff       	call   c000ada2 <File::unlink()>
c0016b9b:	83 c4 10             	add    esp,0x10
c0016b9e:	83 ec 08             	sub    esp,0x8
c0016ba1:	6a 12                	push   0x12
c0016ba3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016baa:	e8 7b 40 ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c0016baf:	83 c4 10             	add    esp,0x10
c0016bb2:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bb9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016bbf:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016bc6:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0016bcd:	c1 e0 14             	shl    eax,0x14
c0016bd0:	83 ec 04             	sub    esp,0x4
c0016bd3:	6a 01                	push   0x1
c0016bd5:	50                   	push   eax
c0016bd6:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0016bdd:	e8 53 e5 fe ff       	call   c0005135 <f_expand>
c0016be2:	83 c4 10             	add    esp,0x10
c0016be5:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bee:	83 c0 10             	add    eax,0x10
c0016bf1:	8b 00                	mov    eax,DWORD PTR [eax]
c0016bf3:	83 ec 0c             	sub    esp,0xc
c0016bf6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016bfa:	52                   	push   edx
c0016bfb:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016bff:	52                   	push   edx
c0016c00:	6a 00                	push   0x0
c0016c02:	68 00 04 00 00       	push   0x400
c0016c07:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c0e:	ff d0                	call   eax
c0016c10:	83 c4 20             	add    esp,0x20
c0016c13:	83 ec 0c             	sub    esp,0xc
c0016c16:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c1d:	e8 66 40 ff ff       	call   c000ac88 <File::close()>
c0016c22:	83 c4 10             	add    esp,0x10
c0016c25:	8d 76 00             	lea    esi,[esi+0x0]
c0016c28:	83 ec 08             	sub    esp,0x8
c0016c2b:	6a 01                	push   0x1
c0016c2d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c34:	e8 f1 3f ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c0016c39:	83 c4 10             	add    esp,0x10
c0016c3c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c45:	83 c0 0c             	add    eax,0xc
c0016c48:	8b 00                	mov    eax,DWORD PTR [eax]
c0016c4a:	83 ec 0c             	sub    esp,0xc
c0016c4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016c51:	52                   	push   edx
c0016c52:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0016c56:	52                   	push   edx
c0016c57:	6a 00                	push   0x0
c0016c59:	6a 04                	push   0x4
c0016c5b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016c62:	ff d0                	call   eax
c0016c64:	83 c4 20             	add    esp,0x20
c0016c67:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016c6e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0016c74:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016c7b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0016c82:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0016c85:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016c96:	e8 ed 3f ff ff       	call   c000ac88 <File::close()>
c0016c9b:	83 c4 10             	add    esp,0x10
c0016c9e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0016ca5:	ba 00 00 00 00       	mov    edx,0x0
c0016caa:	81 c4 3c 04 00 00    	add    esp,0x43c
c0016cb0:	5b                   	pop    ebx
c0016cb1:	5e                   	pop    esi
c0016cb2:	5f                   	pop    edi
c0016cb3:	5d                   	pop    ebp
c0016cb4:	c3                   	ret    
c0016cb5:	90                   	nop
c0016cb6:	66 90                	xchg   ax,ax

c0016cb8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0016cb8:	57                   	push   edi
c0016cb9:	56                   	push   esi
c0016cba:	53                   	push   ebx
c0016cbb:	81 ec 50 02 00 00    	sub    esp,0x250
c0016cc1:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0016cc9:	74 0d                	je     c0016cd8 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0016ccb:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0016cd3:	75 0f                	jne    c0016ce4 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0016cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016cd8:	b8 04 00 00 00       	mov    eax,0x4
c0016cdd:	e9 36 01 00 00       	jmp    c0016e18 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016ce2:	66 90                	xchg   ax,ax
c0016ce4:	83 ec 08             	sub    esp,0x8
c0016ce7:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016cee:	50                   	push   eax
c0016cef:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0016cf6:	e8 98 d8 fe ff       	call   c0004593 <f_readdir>
c0016cfb:	83 c4 10             	add    esp,0x10
c0016cfe:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0016d05:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016d0c:	83 ec 0c             	sub    esp,0xc
c0016d0f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016d16:	83 c0 16             	add    eax,0x16
c0016d19:	50                   	push   eax
c0016d1a:	e8 21 98 fe ff       	call   c0000540 <strlen>
c0016d1f:	83 c4 10             	add    esp,0x10
c0016d22:	ba 00 00 00 00       	mov    edx,0x0
c0016d27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016d2b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016d2f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0016d36:	25 ff 00 00 00       	and    eax,0xff
c0016d3b:	83 e0 10             	and    eax,0x10
c0016d3e:	74 08                	je     c0016d48 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016d40:	b8 02 00 00 00       	mov    eax,0x2
c0016d45:	eb 09                	jmp    c0016d50 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0016d47:	90                   	nop
c0016d48:	b8 01 00 00 00       	mov    eax,0x1
c0016d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d54:	83 ec 08             	sub    esp,0x8
c0016d57:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016d5e:	83 c0 16             	add    eax,0x16
c0016d61:	50                   	push   eax
c0016d62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d66:	83 c0 10             	add    eax,0x10
c0016d69:	50                   	push   eax
c0016d6a:	e8 91 98 fe ff       	call   c0000600 <strcpy>
c0016d6f:	83 c4 10             	add    esp,0x10
c0016d72:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016d79:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016d80:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d84:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016d8b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0016d92:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016d99:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016da0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0016da7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0016dae:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0016db5:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0016dbc:	89 c6                	mov    esi,eax
c0016dbe:	89 d7                	mov    edi,edx
c0016dc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dc2:	89 c8                	mov    eax,ecx
c0016dc4:	89 fa                	mov    edx,edi
c0016dc6:	89 f3                	mov    ebx,esi
c0016dc8:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0016dcf:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0016dd6:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0016ddd:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0016de4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016dea:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016df1:	84 c0                	test   al,al
c0016df3:	75 07                	jne    c0016dfc <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c0016df5:	b8 07 00 00 00       	mov    eax,0x7
c0016dfa:	eb 1c                	jmp    c0016e18 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016dfc:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0016e03:	85 c0                	test   eax,eax
c0016e05:	75 09                	jne    c0016e10 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c0016e07:	b8 00 00 00 00       	mov    eax,0x0
c0016e0c:	eb 0a                	jmp    c0016e18 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016e0e:	66 90                	xchg   ax,ax
c0016e10:	b8 01 00 00 00       	mov    eax,0x1
c0016e15:	8d 76 00             	lea    esi,[esi+0x0]
c0016e18:	81 c4 50 02 00 00    	add    esp,0x250
c0016e1e:	5b                   	pop    ebx
c0016e1f:	5e                   	pop    esi
c0016e20:	5f                   	pop    edi
c0016e21:	c3                   	ret    
c0016e22:	66 90                	xchg   ax,ax

c0016e24 <FAT::read(void*, unsigned long, void*, int*)>:
c0016e24:	83 ec 1c             	sub    esp,0x1c
c0016e27:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e2c:	74 0a                	je     c0016e38 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016e2e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e33:	75 0b                	jne    c0016e40 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016e35:	8d 76 00             	lea    esi,[esi+0x0]
c0016e38:	b8 04 00 00 00       	mov    eax,0x4
c0016e3d:	eb 41                	jmp    c0016e80 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e3f:	90                   	nop
c0016e40:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016e44:	50                   	push   eax
c0016e45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016e49:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016e4d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016e51:	e8 92 cf fe ff       	call   c0003de8 <f_read>
c0016e56:	83 c4 10             	add    esp,0x10
c0016e59:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e5d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e61:	89 c2                	mov    edx,eax
c0016e63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016e67:	89 10                	mov    DWORD PTR [eax],edx
c0016e69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e6d:	85 c0                	test   eax,eax
c0016e6f:	75 07                	jne    c0016e78 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016e71:	b8 00 00 00 00       	mov    eax,0x0
c0016e76:	eb 08                	jmp    c0016e80 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016e78:	b8 01 00 00 00       	mov    eax,0x1
c0016e7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e80:	83 c4 1c             	add    esp,0x1c
c0016e83:	c3                   	ret    

c0016e84 <FAT::write(void*, unsigned long, void*, int*)>:
c0016e84:	83 ec 1c             	sub    esp,0x1c
c0016e87:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016e8c:	74 0a                	je     c0016e98 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016e8e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016e93:	75 0b                	jne    c0016ea0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016e95:	8d 76 00             	lea    esi,[esi+0x0]
c0016e98:	b8 04 00 00 00       	mov    eax,0x4
c0016e9d:	eb 41                	jmp    c0016ee0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016e9f:	90                   	nop
c0016ea0:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016ea4:	50                   	push   eax
c0016ea5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016ea9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016ead:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016eb1:	e8 31 d1 fe ff       	call   c0003fe7 <f_write>
c0016eb6:	83 c4 10             	add    esp,0x10
c0016eb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ebd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ec1:	89 c2                	mov    edx,eax
c0016ec3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ec7:	89 10                	mov    DWORD PTR [eax],edx
c0016ec9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ecd:	85 c0                	test   eax,eax
c0016ecf:	75 07                	jne    c0016ed8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016ed1:	b8 00 00 00 00       	mov    eax,0x0
c0016ed6:	eb 08                	jmp    c0016ee0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016ed8:	b8 01 00 00 00       	mov    eax,0x1
c0016edd:	8d 76 00             	lea    esi,[esi+0x0]
c0016ee0:	83 c4 1c             	add    esp,0x1c
c0016ee3:	c3                   	ret    

c0016ee4 <FAT::close(void*)>:
c0016ee4:	83 ec 1c             	sub    esp,0x1c
c0016ee7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016eec:	75 0a                	jne    c0016ef8 <FAT::close(void*)+0x14>
c0016eee:	b8 04 00 00 00       	mov    eax,0x4
c0016ef3:	eb 3f                	jmp    c0016f34 <FAT::close(void*)+0x50>
c0016ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ef8:	83 ec 0c             	sub    esp,0xc
c0016efb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016eff:	e8 cc d3 fe ff       	call   c00042d0 <f_close>
c0016f04:	83 c4 10             	add    esp,0x10
c0016f07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f0b:	83 ec 0c             	sub    esp,0xc
c0016f0e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f12:	e8 b2 08 ff ff       	call   c00077c9 <free>
c0016f17:	83 c4 10             	add    esp,0x10
c0016f1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f1e:	85 c0                	test   eax,eax
c0016f20:	75 0a                	jne    c0016f2c <FAT::close(void*)+0x48>
c0016f22:	b8 00 00 00 00       	mov    eax,0x0
c0016f27:	eb 0b                	jmp    c0016f34 <FAT::close(void*)+0x50>
c0016f29:	8d 76 00             	lea    esi,[esi+0x0]
c0016f2c:	b8 01 00 00 00       	mov    eax,0x1
c0016f31:	8d 76 00             	lea    esi,[esi+0x0]
c0016f34:	83 c4 1c             	add    esp,0x1c
c0016f37:	c3                   	ret    

c0016f38 <FAT::closeDir(void*)>:
c0016f38:	83 ec 1c             	sub    esp,0x1c
c0016f3b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016f40:	75 0a                	jne    c0016f4c <FAT::closeDir(void*)+0x14>
c0016f42:	b8 04 00 00 00       	mov    eax,0x4
c0016f47:	eb 3f                	jmp    c0016f88 <FAT::closeDir(void*)+0x50>
c0016f49:	8d 76 00             	lea    esi,[esi+0x0]
c0016f4c:	83 ec 0c             	sub    esp,0xc
c0016f4f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f53:	e8 19 d6 fe ff       	call   c0004571 <f_closedir>
c0016f58:	83 c4 10             	add    esp,0x10
c0016f5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f5f:	83 ec 0c             	sub    esp,0xc
c0016f62:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016f66:	e8 5e 08 ff ff       	call   c00077c9 <free>
c0016f6b:	83 c4 10             	add    esp,0x10
c0016f6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f72:	85 c0                	test   eax,eax
c0016f74:	75 0a                	jne    c0016f80 <FAT::closeDir(void*)+0x48>
c0016f76:	b8 00 00 00 00       	mov    eax,0x0
c0016f7b:	eb 0b                	jmp    c0016f88 <FAT::closeDir(void*)+0x50>
c0016f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f80:	b8 01 00 00 00       	mov    eax,0x1
c0016f85:	8d 76 00             	lea    esi,[esi+0x0]
c0016f88:	83 c4 1c             	add    esp,0x1c
c0016f8b:	c3                   	ret    

c0016f8c <FAT::seek(void*, unsigned long long)>:
c0016f8c:	83 ec 2c             	sub    esp,0x2c
c0016f8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016f93:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016f97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f9f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016fa4:	75 0a                	jne    c0016fb0 <FAT::seek(void*, unsigned long long)+0x24>
c0016fa6:	b8 04 00 00 00       	mov    eax,0x4
c0016fab:	eb 33                	jmp    c0016fe0 <FAT::seek(void*, unsigned long long)+0x54>
c0016fad:	8d 76 00             	lea    esi,[esi+0x0]
c0016fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fb4:	83 ec 08             	sub    esp,0x8
c0016fb7:	50                   	push   eax
c0016fb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016fbc:	e8 3e d3 fe ff       	call   c00042ff <f_lseek>
c0016fc1:	83 c4 10             	add    esp,0x10
c0016fc4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fcc:	85 c0                	test   eax,eax
c0016fce:	75 08                	jne    c0016fd8 <FAT::seek(void*, unsigned long long)+0x4c>
c0016fd0:	b8 00 00 00 00       	mov    eax,0x0
c0016fd5:	eb 09                	jmp    c0016fe0 <FAT::seek(void*, unsigned long long)+0x54>
c0016fd7:	90                   	nop
c0016fd8:	b8 01 00 00 00       	mov    eax,0x1
c0016fdd:	8d 76 00             	lea    esi,[esi+0x0]
c0016fe0:	83 c4 2c             	add    esp,0x2c
c0016fe3:	c3                   	ret    

c0016fe4 <fatWrapperReadDisk>:
c0016fe4:	53                   	push   ebx
c0016fe5:	83 ec 18             	sub    esp,0x18
c0016fe8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016ff0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016ff4:	25 ff 00 00 00       	and    eax,0xff
c0016ff9:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017000:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017004:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017008:	ba 00 00 00 00       	mov    edx,0x0
c001700d:	83 ec 0c             	sub    esp,0xc
c0017010:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017014:	53                   	push   ebx
c0017015:	52                   	push   edx
c0017016:	50                   	push   eax
c0017017:	51                   	push   ecx
c0017018:	e8 ff 5c ff ff       	call   c000cd1c <LogicalDisk::read(unsigned long long, int, void*)>
c001701d:	83 c4 20             	add    esp,0x20
c0017020:	83 c4 18             	add    esp,0x18
c0017023:	5b                   	pop    ebx
c0017024:	c3                   	ret    
c0017025:	8d 76 00             	lea    esi,[esi+0x0]

c0017028 <fatWrapperWriteDisk>:
c0017028:	53                   	push   ebx
c0017029:	83 ec 18             	sub    esp,0x18
c001702c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017030:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017034:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017038:	25 ff 00 00 00       	and    eax,0xff
c001703d:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c0017044:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017048:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001704c:	ba 00 00 00 00       	mov    edx,0x0
c0017051:	83 ec 0c             	sub    esp,0xc
c0017054:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017058:	53                   	push   ebx
c0017059:	52                   	push   edx
c001705a:	50                   	push   eax
c001705b:	51                   	push   ecx
c001705c:	e8 27 5d ff ff       	call   c000cd88 <LogicalDisk::write(unsigned long long, int, void*)>
c0017061:	83 c4 20             	add    esp,0x20
c0017064:	83 c4 18             	add    esp,0x18
c0017067:	5b                   	pop    ebx
c0017068:	c3                   	ret    
c0017069:	8d 76 00             	lea    esi,[esi+0x0]

c001706c <fatWrapperIoctl>:
c001706c:	53                   	push   ebx
c001706d:	83 ec 28             	sub    esp,0x28
c0017070:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017074:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017078:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001707c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017080:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0017085:	75 35                	jne    c00170bc <fatWrapperIoctl+0x50>
c0017087:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001708b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001708f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017093:	25 ff 00 00 00       	and    eax,0xff
c0017098:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c001709f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00170a5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00170af:	66 89 02             	mov    WORD PTR [edx],ax
c00170b2:	b8 00 00 00 00       	mov    eax,0x0
c00170b7:	e9 c4 00 00 00       	jmp    c0017180 <fatWrapperIoctl+0x114>
c00170bc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00170c1:	75 75                	jne    c0017138 <fatWrapperIoctl+0xcc>
c00170c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00170c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170cb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170cf:	25 ff 00 00 00       	and    eax,0xff
c00170d4:	8b 04 85 20 44 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbbe0]
c00170db:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00170e1:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00170e7:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00170ed:	89 c8                	mov    eax,ecx
c00170ef:	89 da                	mov    edx,ebx
c00170f1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00170f5:	c1 e0 0a             	shl    eax,0xa
c00170f8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00170fc:	81 e1 ff 00 00 00    	and    ecx,0xff
c0017102:	8b 0c 8d 20 44 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdbbe0]
c0017109:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001710f:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0017115:	89 cb                	mov    ebx,ecx
c0017117:	c1 fb 1f             	sar    ebx,0x1f
c001711a:	53                   	push   ebx
c001711b:	51                   	push   ecx
c001711c:	52                   	push   edx
c001711d:	50                   	push   eax
c001711e:	e8 ad 50 00 00       	call   c001c1d0 <__udivdi3>
c0017123:	83 c4 10             	add    esp,0x10
c0017126:	89 c2                	mov    edx,eax
c0017128:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001712c:	89 10                	mov    DWORD PTR [eax],edx
c001712e:	b8 00 00 00 00       	mov    eax,0x0
c0017133:	eb 4b                	jmp    c0017180 <fatWrapperIoctl+0x114>
c0017135:	8d 76 00             	lea    esi,[esi+0x0]
c0017138:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001713d:	75 09                	jne    c0017148 <fatWrapperIoctl+0xdc>
c001713f:	b8 00 00 00 00       	mov    eax,0x0
c0017144:	eb 3a                	jmp    c0017180 <fatWrapperIoctl+0x114>
c0017146:	66 90                	xchg   ax,ax
c0017148:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001714d:	75 19                	jne    c0017168 <fatWrapperIoctl+0xfc>
c001714f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017153:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017157:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001715b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0017161:	b8 00 00 00 00       	mov    eax,0x0
c0017166:	eb 18                	jmp    c0017180 <fatWrapperIoctl+0x114>
c0017168:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001716d:	75 09                	jne    c0017178 <fatWrapperIoctl+0x10c>
c001716f:	b8 00 00 00 00       	mov    eax,0x0
c0017174:	eb 0a                	jmp    c0017180 <fatWrapperIoctl+0x114>
c0017176:	66 90                	xchg   ax,ax
c0017178:	b8 04 00 00 00       	mov    eax,0x4
c001717d:	8d 76 00             	lea    esi,[esi+0x0]
c0017180:	83 c4 28             	add    esp,0x28
c0017183:	5b                   	pop    ebx
c0017184:	c3                   	ret    
c0017185:	90                   	nop
c0017186:	66 90                	xchg   ax,ax

c0017188 <FAT::FAT()>:
c0017188:	83 ec 1c             	sub    esp,0x1c
c001718b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001718f:	83 ec 0c             	sub    esp,0xc
c0017192:	50                   	push   eax
c0017193:	e8 7e 37 ff ff       	call   c000a916 <Filesystem::Filesystem()>
c0017198:	83 c4 10             	add    esp,0x10
c001719b:	ba 20 f1 01 c0       	mov    edx,0xc001f120
c00171a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171a4:	89 10                	mov    DWORD PTR [eax],edx
c00171a6:	c7 05 20 52 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025220,0x0
c00171b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00171b8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00171bd:	7f 15                	jg     c00171d4 <FAT::FAT()+0x4c>
c00171bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171c3:	c7 04 85 40 52 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdadc0],0xffffffff
c00171ce:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00171d2:	eb e4                	jmp    c00171b8 <FAT::FAT()+0x30>
c00171d4:	90                   	nop
c00171d5:	83 c4 1c             	add    esp,0x1c
c00171d8:	c3                   	ret    
c00171d9:	90                   	nop
c00171da:	66 90                	xchg   ax,ax

c00171dc <FAT::fixFilepath(char*)>:
c00171dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171e0:	8a 00                	mov    al,BYTE PTR [eax]
c00171e2:	3c 40                	cmp    al,0x40
c00171e4:	7e 2e                	jle    c0017214 <FAT::fixFilepath(char*)+0x38>
c00171e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171ea:	8a 00                	mov    al,BYTE PTR [eax]
c00171ec:	83 e8 41             	sub    eax,0x41
c00171ef:	88 c2                	mov    dl,al
c00171f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171f5:	88 10                	mov    BYTE PTR [eax],dl
c00171f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00171fb:	8a 00                	mov    al,BYTE PTR [eax]
c00171fd:	0f be c0             	movsx  eax,al
c0017200:	8b 04 85 40 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdadc0]
c0017207:	83 c0 30             	add    eax,0x30
c001720a:	88 c2                	mov    dl,al
c001720c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017210:	88 10                	mov    BYTE PTR [eax],dl
c0017212:	66 90                	xchg   ax,ax
c0017214:	90                   	nop
c0017215:	c3                   	ret    
c0017216:	66 90                	xchg   ax,ax

c0017218 <FAT::open(char const*, void**, FileOpenMode)>:
c0017218:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001721e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017226:	74 0c                	je     c0017234 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0017228:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017230:	75 0e                	jne    c0017240 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0017232:	66 90                	xchg   ax,ax
c0017234:	b8 04 00 00 00       	mov    eax,0x4
c0017239:	e9 0a 01 00 00       	jmp    c0017348 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001723e:	66 90                	xchg   ax,ax
c0017240:	83 ec 08             	sub    esp,0x8
c0017243:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001724a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001724e:	50                   	push   eax
c001724f:	e8 ac 93 fe ff       	call   c0000600 <strcpy>
c0017254:	83 c4 10             	add    esp,0x10
c0017257:	83 ec 08             	sub    esp,0x8
c001725a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001725e:	50                   	push   eax
c001725f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017266:	e8 71 ff ff ff       	call   c00171dc <FAT::fixFilepath(char*)>
c001726b:	83 c4 10             	add    esp,0x10
c001726e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0017276:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001727d:	83 e0 01             	and    eax,0x1
c0017280:	74 0a                	je     c001728c <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0017282:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001728a:	66 90                	xchg   ax,ax
c001728c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0017293:	83 e0 04             	and    eax,0x4
c0017296:	74 10                	je     c00172a8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0017298:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00172a0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00172a8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172af:	83 e0 02             	and    eax,0x2
c00172b2:	74 08                	je     c00172bc <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c00172b4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00172bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172c3:	83 e0 08             	and    eax,0x8
c00172c6:	74 08                	je     c00172d0 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c00172c8:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00172d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00172d7:	83 e0 10             	and    eax,0x10
c00172da:	74 08                	je     c00172e4 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00172dc:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00172e4:	83 ec 0c             	sub    esp,0xc
c00172e7:	68 28 02 00 00       	push   0x228
c00172ec:	e8 c8 04 ff ff       	call   c00077b9 <malloc>
c00172f1:	83 c4 10             	add    esp,0x10
c00172f4:	89 c2                	mov    edx,eax
c00172f6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00172fd:	89 10                	mov    DWORD PTR [eax],edx
c00172ff:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0017306:	31 d2                	xor    edx,edx
c0017308:	88 c2                	mov    dl,al
c001730a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0017311:	8b 00                	mov    eax,DWORD PTR [eax]
c0017313:	83 ec 04             	sub    esp,0x4
c0017316:	52                   	push   edx
c0017317:	8d 54 24 10          	lea    edx,[esp+0x10]
c001731b:	52                   	push   edx
c001731c:	50                   	push   eax
c001731d:	e8 fb c7 fe ff       	call   c0003b1d <f_open>
c0017322:	83 c4 10             	add    esp,0x10
c0017325:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001732c:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0017334:	74 0a                	je     c0017340 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0017336:	b8 01 00 00 00       	mov    eax,0x1
c001733b:	eb 0b                	jmp    c0017348 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c001733d:	8d 76 00             	lea    esi,[esi+0x0]
c0017340:	b8 00 00 00 00       	mov    eax,0x0
c0017345:	8d 76 00             	lea    esi,[esi+0x0]
c0017348:	81 c4 1c 01 00 00    	add    esp,0x11c
c001734e:	c3                   	ret    
c001734f:	90                   	nop

c0017350 <FAT::openDir(char const*, void**)>:
c0017350:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017356:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001735e:	74 0c                	je     c001736c <FAT::openDir(char const*, void**)+0x1c>
c0017360:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0017368:	75 0e                	jne    c0017378 <FAT::openDir(char const*, void**)+0x28>
c001736a:	66 90                	xchg   ax,ax
c001736c:	b8 04 00 00 00       	mov    eax,0x4
c0017371:	e9 82 00 00 00       	jmp    c00173f8 <FAT::openDir(char const*, void**)+0xa8>
c0017376:	66 90                	xchg   ax,ax
c0017378:	83 ec 08             	sub    esp,0x8
c001737b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017382:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017386:	50                   	push   eax
c0017387:	e8 74 92 fe ff       	call   c0000600 <strcpy>
c001738c:	83 c4 10             	add    esp,0x10
c001738f:	83 ec 08             	sub    esp,0x8
c0017392:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017396:	50                   	push   eax
c0017397:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001739e:	e8 39 fe ff ff       	call   c00171dc <FAT::fixFilepath(char*)>
c00173a3:	83 c4 10             	add    esp,0x10
c00173a6:	83 ec 0c             	sub    esp,0xc
c00173a9:	6a 30                	push   0x30
c00173ab:	e8 09 04 ff ff       	call   c00077b9 <malloc>
c00173b0:	83 c4 10             	add    esp,0x10
c00173b3:	89 c2                	mov    edx,eax
c00173b5:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173bc:	89 10                	mov    DWORD PTR [eax],edx
c00173be:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00173c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00173c7:	83 ec 08             	sub    esp,0x8
c00173ca:	8d 54 24 14          	lea    edx,[esp+0x14]
c00173ce:	52                   	push   edx
c00173cf:	50                   	push   eax
c00173d0:	e8 d1 d0 fe ff       	call   c00044a6 <f_opendir>
c00173d5:	83 c4 10             	add    esp,0x10
c00173d8:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00173df:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00173e7:	74 07                	je     c00173f0 <FAT::openDir(char const*, void**)+0xa0>
c00173e9:	b8 01 00 00 00       	mov    eax,0x1
c00173ee:	eb 08                	jmp    c00173f8 <FAT::openDir(char const*, void**)+0xa8>
c00173f0:	b8 00 00 00 00       	mov    eax,0x0
c00173f5:	8d 76 00             	lea    esi,[esi+0x0]
c00173f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00173fe:	c3                   	ret    
c00173ff:	90                   	nop

c0017400 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0017400:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017406:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001740e:	75 0c                	jne    c001741c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017410:	b8 04 00 00 00       	mov    eax,0x4
c0017415:	e9 d6 00 00 00       	jmp    c00174f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001741a:	66 90                	xchg   ax,ax
c001741c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0017424:	75 0a                	jne    c0017430 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0017426:	b8 04 00 00 00       	mov    eax,0x4
c001742b:	e9 c0 00 00 00       	jmp    c00174f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017430:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017438:	75 0a                	jne    c0017444 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001743a:	b8 04 00 00 00       	mov    eax,0x4
c001743f:	e9 ac 00 00 00       	jmp    c00174f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017444:	83 ec 08             	sub    esp,0x8
c0017447:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001744e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017455:	50                   	push   eax
c0017456:	e8 a5 91 fe ff       	call   c0000600 <strcpy>
c001745b:	83 c4 10             	add    esp,0x10
c001745e:	83 ec 08             	sub    esp,0x8
c0017461:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017468:	50                   	push   eax
c0017469:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017470:	e8 67 fd ff ff       	call   c00171dc <FAT::fixFilepath(char*)>
c0017475:	83 c4 10             	add    esp,0x10
c0017478:	83 ec 08             	sub    esp,0x8
c001747b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001747f:	50                   	push   eax
c0017480:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0017487:	50                   	push   eax
c0017488:	e8 98 d1 fe ff       	call   c0004625 <f_stat>
c001748d:	83 c4 10             	add    esp,0x10
c0017490:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0017497:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001749e:	85 c0                	test   eax,eax
c00174a0:	74 0a                	je     c00174ac <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c00174a2:	83 f8 04             	cmp    eax,0x4
c00174a5:	74 39                	je     c00174e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c00174a7:	eb 3f                	jmp    c00174e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00174a9:	8d 76 00             	lea    esi,[esi+0x0]
c00174ac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00174b0:	25 ff 00 00 00       	and    eax,0xff
c00174b5:	83 e0 10             	and    eax,0x10
c00174b8:	0f 95 c2             	setne  dl
c00174bb:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00174c2:	88 10                	mov    BYTE PTR [eax],dl
c00174c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174c8:	ba 00 00 00 00       	mov    edx,0x0
c00174cd:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00174d4:	89 01                	mov    DWORD PTR [ecx],eax
c00174d6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00174d9:	b8 00 00 00 00       	mov    eax,0x0
c00174de:	eb 10                	jmp    c00174f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174e0:	b8 02 00 00 00       	mov    eax,0x2
c00174e5:	eb 09                	jmp    c00174f0 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00174e7:	90                   	nop
c00174e8:	b8 01 00 00 00       	mov    eax,0x1
c00174ed:	8d 76 00             	lea    esi,[esi+0x0]
c00174f0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00174f6:	c3                   	ret    
c00174f7:	90                   	nop

c00174f8 <FAT::unlink(char const*)>:
c00174f8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00174fe:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0017506:	75 08                	jne    c0017510 <FAT::unlink(char const*)+0x18>
c0017508:	b8 04 00 00 00       	mov    eax,0x4
c001750d:	eb 61                	jmp    c0017570 <FAT::unlink(char const*)+0x78>
c001750f:	90                   	nop
c0017510:	83 ec 08             	sub    esp,0x8
c0017513:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001751a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001751e:	50                   	push   eax
c001751f:	e8 dc 90 fe ff       	call   c0000600 <strcpy>
c0017524:	83 c4 10             	add    esp,0x10
c0017527:	83 ec 08             	sub    esp,0x8
c001752a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001752e:	50                   	push   eax
c001752f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017536:	e8 a1 fc ff ff       	call   c00171dc <FAT::fixFilepath(char*)>
c001753b:	83 c4 10             	add    esp,0x10
c001753e:	83 ec 0c             	sub    esp,0xc
c0017541:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017545:	50                   	push   eax
c0017546:	e8 3f d3 fe ff       	call   c000488a <f_unlink>
c001754b:	83 c4 10             	add    esp,0x10
c001754e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017555:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001755c:	85 c0                	test   eax,eax
c001755e:	75 08                	jne    c0017568 <FAT::unlink(char const*)+0x70>
c0017560:	b8 00 00 00 00       	mov    eax,0x0
c0017565:	eb 09                	jmp    c0017570 <FAT::unlink(char const*)+0x78>
c0017567:	90                   	nop
c0017568:	b8 01 00 00 00       	mov    eax,0x1
c001756d:	8d 76 00             	lea    esi,[esi+0x0]
c0017570:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017576:	c3                   	ret    
c0017577:	90                   	nop

c0017578 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017578:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001757e:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0017585:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001758c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017590:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017594:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001759c:	75 0a                	jne    c00175a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001759e:	b8 04 00 00 00       	mov    eax,0x4
c00175a3:	e9 54 01 00 00       	jmp    c00176fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00175a8:	83 ec 08             	sub    esp,0x8
c00175ab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00175b2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00175b6:	50                   	push   eax
c00175b7:	e8 44 90 fe ff       	call   c0000600 <strcpy>
c00175bc:	83 c4 10             	add    esp,0x10
c00175bf:	83 ec 08             	sub    esp,0x8
c00175c2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00175c6:	50                   	push   eax
c00175c7:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00175ce:	e8 09 fc ff ff       	call   c00171dc <FAT::fixFilepath(char*)>
c00175d3:	83 c4 10             	add    esp,0x10
c00175d6:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00175de:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00175e6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00175ea:	25 ff 00 00 00       	and    eax,0xff
c00175ef:	83 e0 01             	and    eax,0x1
c00175f2:	74 08                	je     c00175fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00175f4:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00175fc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017600:	25 ff 00 00 00       	and    eax,0xff
c0017605:	83 e0 02             	and    eax,0x2
c0017608:	74 0a                	je     c0017614 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c001760a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0017612:	66 90                	xchg   ax,ax
c0017614:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017618:	25 ff 00 00 00       	and    eax,0xff
c001761d:	83 e0 04             	and    eax,0x4
c0017620:	74 0a                	je     c001762c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c0017622:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001762a:	66 90                	xchg   ax,ax
c001762c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017630:	25 ff 00 00 00       	and    eax,0xff
c0017635:	83 e0 08             	and    eax,0x8
c0017638:	74 0a                	je     c0017644 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c001763a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0017642:	66 90                	xchg   ax,ax
c0017644:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017648:	25 ff 00 00 00       	and    eax,0xff
c001764d:	83 e0 01             	and    eax,0x1
c0017650:	74 0a                	je     c001765c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c0017652:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001765a:	66 90                	xchg   ax,ax
c001765c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017660:	25 ff 00 00 00       	and    eax,0xff
c0017665:	83 e0 02             	and    eax,0x2
c0017668:	74 0a                	je     c0017674 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001766a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0017672:	66 90                	xchg   ax,ax
c0017674:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017678:	25 ff 00 00 00       	and    eax,0xff
c001767d:	83 e0 04             	and    eax,0x4
c0017680:	74 0a                	je     c001768c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c0017682:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001768a:	66 90                	xchg   ax,ax
c001768c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017690:	25 ff 00 00 00       	and    eax,0xff
c0017695:	83 e0 08             	and    eax,0x8
c0017698:	74 0a                	je     c00176a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c001769a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00176a2:	66 90                	xchg   ax,ax
c00176a4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00176ab:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00176b2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00176b9:	31 d2                	xor    edx,edx
c00176bb:	88 c2                	mov    dl,al
c00176bd:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00176c4:	25 ff 00 00 00       	and    eax,0xff
c00176c9:	83 ec 04             	sub    esp,0x4
c00176cc:	52                   	push   edx
c00176cd:	50                   	push   eax
c00176ce:	8d 44 24 24          	lea    eax,[esp+0x24]
c00176d2:	50                   	push   eax
c00176d3:	e8 25 d6 fe ff       	call   c0004cfd <f_chmod>
c00176d8:	83 c4 10             	add    esp,0x10
c00176db:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00176e2:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00176e9:	85 c0                	test   eax,eax
c00176eb:	75 07                	jne    c00176f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00176ed:	b8 00 00 00 00       	mov    eax,0x0
c00176f2:	eb 08                	jmp    c00176fc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00176f4:	b8 01 00 00 00       	mov    eax,0x1
c00176f9:	8d 76 00             	lea    esi,[esi+0x0]
c00176fc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017702:	c3                   	ret    
c0017703:	90                   	nop

c0017704 <FAT::rename(char const*, char const*)>:
c0017704:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001770a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0017712:	74 0c                	je     c0017720 <FAT::rename(char const*, char const*)+0x1c>
c0017714:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001771c:	75 0e                	jne    c001772c <FAT::rename(char const*, char const*)+0x28>
c001771e:	66 90                	xchg   ax,ax
c0017720:	b8 04 00 00 00       	mov    eax,0x4
c0017725:	e9 9e 00 00 00       	jmp    c00177c8 <FAT::rename(char const*, char const*)+0xc4>
c001772a:	66 90                	xchg   ax,ax
c001772c:	83 ec 08             	sub    esp,0x8
c001772f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017736:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001773d:	50                   	push   eax
c001773e:	e8 bd 8e fe ff       	call   c0000600 <strcpy>
c0017743:	83 c4 10             	add    esp,0x10
c0017746:	83 ec 08             	sub    esp,0x8
c0017749:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017750:	50                   	push   eax
c0017751:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017758:	e8 7f fa ff ff       	call   c00171dc <FAT::fixFilepath(char*)>
c001775d:	83 c4 10             	add    esp,0x10
c0017760:	83 ec 08             	sub    esp,0x8
c0017763:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001776a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001776e:	50                   	push   eax
c001776f:	e8 8c 8e fe ff       	call   c0000600 <strcpy>
c0017774:	83 c4 10             	add    esp,0x10
c0017777:	83 ec 08             	sub    esp,0x8
c001777a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001777e:	50                   	push   eax
c001777f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017786:	e8 51 fa ff ff       	call   c00171dc <FAT::fixFilepath(char*)>
c001778b:	83 c4 10             	add    esp,0x10
c001778e:	83 ec 08             	sub    esp,0x8
c0017791:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017795:	50                   	push   eax
c0017796:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001779d:	50                   	push   eax
c001779e:	e8 a4 d3 fe ff       	call   c0004b47 <f_rename>
c00177a3:	83 c4 10             	add    esp,0x10
c00177a6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00177ad:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00177b4:	85 c0                	test   eax,eax
c00177b6:	75 08                	jne    c00177c0 <FAT::rename(char const*, char const*)+0xbc>
c00177b8:	b8 00 00 00 00       	mov    eax,0x0
c00177bd:	eb 09                	jmp    c00177c8 <FAT::rename(char const*, char const*)+0xc4>
c00177bf:	90                   	nop
c00177c0:	b8 01 00 00 00       	mov    eax,0x1
c00177c5:	8d 76 00             	lea    esi,[esi+0x0]
c00177c8:	81 c4 1c 02 00 00    	add    esp,0x21c
c00177ce:	c3                   	ret    
c00177cf:	90                   	nop

c00177d0 <FAT::mkdir(char const*)>:
c00177d0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00177d6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00177de:	75 08                	jne    c00177e8 <FAT::mkdir(char const*)+0x18>
c00177e0:	b8 04 00 00 00       	mov    eax,0x4
c00177e5:	eb 61                	jmp    c0017848 <FAT::mkdir(char const*)+0x78>
c00177e7:	90                   	nop
c00177e8:	83 ec 08             	sub    esp,0x8
c00177eb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00177f2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177f6:	50                   	push   eax
c00177f7:	e8 04 8e fe ff       	call   c0000600 <strcpy>
c00177fc:	83 c4 10             	add    esp,0x10
c00177ff:	83 ec 08             	sub    esp,0x8
c0017802:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017806:	50                   	push   eax
c0017807:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001780e:	e8 c9 f9 ff ff       	call   c00171dc <FAT::fixFilepath(char*)>
c0017813:	83 c4 10             	add    esp,0x10
c0017816:	83 ec 0c             	sub    esp,0xc
c0017819:	8d 44 24 18          	lea    eax,[esp+0x18]
c001781d:	50                   	push   eax
c001781e:	e8 89 d1 fe ff       	call   c00049ac <f_mkdir>
c0017823:	83 c4 10             	add    esp,0x10
c0017826:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001782d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017834:	85 c0                	test   eax,eax
c0017836:	75 08                	jne    c0017840 <FAT::mkdir(char const*)+0x70>
c0017838:	b8 00 00 00 00       	mov    eax,0x0
c001783d:	eb 09                	jmp    c0017848 <FAT::mkdir(char const*)+0x78>
c001783f:	90                   	nop
c0017840:	b8 01 00 00 00       	mov    eax,0x1
c0017845:	8d 76 00             	lea    esi,[esi+0x0]
c0017848:	81 c4 1c 01 00 00    	add    esp,0x11c
c001784e:	c3                   	ret    
c001784f:	90                   	nop

c0017850 <FAT::exists(char const*)>:
c0017850:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0017856:	83 ec 08             	sub    esp,0x8
c0017859:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017860:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017864:	50                   	push   eax
c0017865:	e8 96 8d fe ff       	call   c0000600 <strcpy>
c001786a:	83 c4 10             	add    esp,0x10
c001786d:	83 ec 08             	sub    esp,0x8
c0017870:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017874:	50                   	push   eax
c0017875:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001787c:	e8 5b f9 ff ff       	call   c00171dc <FAT::fixFilepath(char*)>
c0017881:	83 c4 10             	add    esp,0x10
c0017884:	83 ec 08             	sub    esp,0x8
c0017887:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001788e:	50                   	push   eax
c001788f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017893:	50                   	push   eax
c0017894:	e8 8c cd fe ff       	call   c0004625 <f_stat>
c0017899:	83 c4 10             	add    esp,0x10
c001789c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00178a3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00178aa:	85 c0                	test   eax,eax
c00178ac:	75 06                	jne    c00178b4 <FAT::exists(char const*)+0x64>
c00178ae:	b0 01                	mov    al,0x1
c00178b0:	eb 06                	jmp    c00178b8 <FAT::exists(char const*)+0x68>
c00178b2:	66 90                	xchg   ax,ax
c00178b4:	b0 00                	mov    al,0x0
c00178b6:	66 90                	xchg   ax,ax
c00178b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00178be:	c3                   	ret    
c00178bf:	90                   	nop

c00178c0 <isoReadDiscSectorHelper>:
c00178c0:	83 ec 2c             	sub    esp,0x2c
c00178c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178c7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00178cb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00178d0:	83 e8 41             	sub    eax,0x41
c00178d3:	8b 0c 85 20 44 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbbe0]
c00178da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178de:	ba 00 00 00 00       	mov    edx,0x0
c00178e3:	83 ec 0c             	sub    esp,0xc
c00178e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00178ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178ee:	52                   	push   edx
c00178ef:	50                   	push   eax
c00178f0:	51                   	push   ecx
c00178f1:	e8 26 54 ff ff       	call   c000cd1c <LogicalDisk::read(unsigned long long, int, void*)>
c00178f6:	83 c4 20             	add    esp,0x20
c00178f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00178fd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0017902:	74 0c                	je     c0017910 <isoReadDiscSectorHelper+0x50>
c0017904:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017908:	c1 e0 0b             	shl    eax,0xb
c001790b:	eb 0b                	jmp    c0017918 <isoReadDiscSectorHelper+0x58>
c001790d:	8d 76 00             	lea    esi,[esi+0x0]
c0017910:	b8 00 00 00 00       	mov    eax,0x0
c0017915:	8d 76 00             	lea    esi,[esi+0x0]
c0017918:	83 c4 2c             	add    esp,0x2c
c001791b:	c3                   	ret    

c001791c <iso_kprintf>:
c001791c:	83 ec 0c             	sub    esp,0xc
c001791f:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017924:	83 ec 08             	sub    esp,0x8
c0017927:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001792b:	50                   	push   eax
c001792c:	e8 05 0e ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	90                   	nop
c0017935:	83 c4 0c             	add    esp,0xc
c0017938:	c3                   	ret    
c0017939:	8d 76 00             	lea    esi,[esi+0x0]

c001793c <iso_kprintfd>:
c001793c:	83 ec 0c             	sub    esp,0xc
c001793f:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017944:	83 ec 08             	sub    esp,0x8
c0017947:	68 80 f1 01 c0       	push   0xc001f180
c001794c:	50                   	push   eax
c001794d:	e8 e4 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017952:	83 c4 10             	add    esp,0x10
c0017955:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c001795a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001795e:	83 ec 08             	sub    esp,0x8
c0017961:	52                   	push   edx
c0017962:	50                   	push   eax
c0017963:	e8 88 0d ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017968:	83 c4 10             	add    esp,0x10
c001796b:	a1 04 1f 02 c0       	mov    eax,ds:0xc0021f04
c0017970:	83 ec 08             	sub    esp,0x8
c0017973:	68 01 f0 01 c0       	push   0xc001f001
c0017978:	50                   	push   eax
c0017979:	e8 b8 0d ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001797e:	83 c4 10             	add    esp,0x10
c0017981:	90                   	nop
c0017982:	83 c4 0c             	add    esp,0xc
c0017985:	c3                   	ret    

c0017986 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017986:	b8 08 00 00 00       	mov    eax,0x8
c001798b:	c3                   	ret    

c001798c <ISO9660::getName()>:
c001798c:	b8 83 f1 01 c0       	mov    eax,0xc001f183
c0017991:	c3                   	ret    

c0017992 <ISO9660::closeDir(void*)>:
c0017992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017996:	8b 00                	mov    eax,DWORD PTR [eax]
c0017998:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001799b:	90                   	nop

c001799c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001799c:	b8 01 00 00 00       	mov    eax,0x1
c00179a1:	c3                   	ret    

c00179a2 <ISO9660::unlink(char const*)>:
c00179a2:	b8 01 00 00 00       	mov    eax,0x1
c00179a7:	c3                   	ret    

c00179a8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00179a8:	b8 03 00 00 00       	mov    eax,0x3
c00179ad:	c3                   	ret    

c00179ae <ISO9660::rename(char const*, char const*)>:
c00179ae:	b8 01 00 00 00       	mov    eax,0x1
c00179b3:	c3                   	ret    

c00179b4 <ISO9660::mkdir(char const*)>:
c00179b4:	b8 01 00 00 00       	mov    eax,0x1
c00179b9:	c3                   	ret    

c00179ba <ISO9660::~ISO9660()>:
c00179ba:	83 ec 0c             	sub    esp,0xc
c00179bd:	ba d4 f1 01 c0       	mov    edx,0xc001f1d4
c00179c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179c6:	89 10                	mov    DWORD PTR [eax],edx
c00179c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179cc:	83 ec 0c             	sub    esp,0xc
c00179cf:	50                   	push   eax
c00179d0:	e8 65 2f ff ff       	call   c000a93a <Filesystem::~Filesystem()>
c00179d5:	83 c4 10             	add    esp,0x10
c00179d8:	90                   	nop
c00179d9:	83 c4 0c             	add    esp,0xc
c00179dc:	c3                   	ret    
c00179dd:	90                   	nop

c00179de <ISO9660::~ISO9660()>:
c00179de:	83 ec 0c             	sub    esp,0xc
c00179e1:	83 ec 0c             	sub    esp,0xc
c00179e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179e8:	e8 cd ff ff ff       	call   c00179ba <ISO9660::~ISO9660()>
c00179ed:	83 c4 10             	add    esp,0x10
c00179f0:	83 ec 08             	sub    esp,0x8
c00179f3:	6a 08                	push   0x8
c00179f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00179f9:	e8 00 2b ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c00179fe:	83 c4 10             	add    esp,0x10
c0017a01:	83 c4 0c             	add    esp,0xc
c0017a04:	c3                   	ret    
c0017a05:	90                   	nop

c0017a06 <ISO9660::exists(char const*)>:
c0017a06:	83 ec 18             	sub    esp,0x18
c0017a09:	68 9e f1 01 c0       	push   0xc001f19e
c0017a0e:	e8 64 88 ff ff       	call   c0010277 <KePanic(char const*)>
c0017a13:	31 c0                	xor    eax,eax
c0017a15:	83 c4 1c             	add    esp,0x1c
c0017a18:	c3                   	ret    
c0017a19:	90                   	nop

c0017a1a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017a1a:	56                   	push   esi
c0017a1b:	53                   	push   ebx
c0017a1c:	50                   	push   eax
c0017a1d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017a21:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017a25:	85 db                	test   ebx,ebx
c0017a27:	0f 84 82 00 00 00    	je     c0017aaf <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017a2d:	85 f6                	test   esi,esi
c0017a2f:	74 7e                	je     c0017aaf <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017a31:	ba 03 00 00 00       	mov    edx,0x3
c0017a36:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017a3b:	75 77                	jne    c0017ab4 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a3d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017a40:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017a46:	74 34                	je     c0017a7c <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017a48:	83 ec 0c             	sub    esp,0xc
c0017a4b:	50                   	push   eax
c0017a4c:	e8 6e ed fe ff       	call   c00067bf <init_percd>
c0017a51:	83 c4 10             	add    esp,0x10
c0017a54:	ba 0b 00 00 00       	mov    edx,0xb
c0017a59:	40                   	inc    eax
c0017a5a:	74 58                	je     c0017ab4 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017a5c:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017a63:	74 10                	je     c0017a75 <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c0017a65:	83 ec 0c             	sub    esp,0xc
c0017a68:	68 bc f1 01 c0       	push   0xc001f1bc
c0017a6d:	e8 05 88 ff ff       	call   c0010277 <KePanic(char const*)>
c0017a72:	83 c4 10             	add    esp,0x10
c0017a75:	8a 03                	mov    al,BYTE PTR [ebx]
c0017a77:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017a7c:	83 ec 0c             	sub    esp,0xc
c0017a7f:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017a86:	83 c3 03             	add    ebx,0x3
c0017a89:	50                   	push   eax
c0017a8a:	e8 30 ed fe ff       	call   c00067bf <init_percd>
c0017a8f:	59                   	pop    ecx
c0017a90:	58                   	pop    eax
c0017a91:	6a 00                	push   0x0
c0017a93:	53                   	push   ebx
c0017a94:	e8 64 e8 fe ff       	call   c00062fd <iso_open>
c0017a99:	83 c4 10             	add    esp,0x10
c0017a9c:	ba 01 00 00 00       	mov    edx,0x1
c0017aa1:	83 f8 ff             	cmp    eax,0xffffffff
c0017aa4:	74 0e                	je     c0017ab4 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017aa6:	83 c0 64             	add    eax,0x64
c0017aa9:	31 d2                	xor    edx,edx
c0017aab:	89 06                	mov    DWORD PTR [esi],eax
c0017aad:	eb 05                	jmp    c0017ab4 <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017aaf:	ba 04 00 00 00       	mov    edx,0x4
c0017ab4:	89 d0                	mov    eax,edx
c0017ab6:	5a                   	pop    edx
c0017ab7:	5b                   	pop    ebx
c0017ab8:	5e                   	pop    esi
c0017ab9:	c3                   	ret    

c0017aba <ISO9660::openDir(char const*, void**)>:
c0017aba:	56                   	push   esi
c0017abb:	53                   	push   ebx
c0017abc:	50                   	push   eax
c0017abd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017ac1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017ac5:	85 db                	test   ebx,ebx
c0017ac7:	74 76                	je     c0017b3f <ISO9660::openDir(char const*, void**)+0x85>
c0017ac9:	85 f6                	test   esi,esi
c0017acb:	74 72                	je     c0017b3f <ISO9660::openDir(char const*, void**)+0x85>
c0017acd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017ad0:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017ad6:	74 34                	je     c0017b0c <ISO9660::openDir(char const*, void**)+0x52>
c0017ad8:	83 ec 0c             	sub    esp,0xc
c0017adb:	50                   	push   eax
c0017adc:	e8 de ec fe ff       	call   c00067bf <init_percd>
c0017ae1:	83 c4 10             	add    esp,0x10
c0017ae4:	ba 0b 00 00 00       	mov    edx,0xb
c0017ae9:	40                   	inc    eax
c0017aea:	74 58                	je     c0017b44 <ISO9660::openDir(char const*, void**)+0x8a>
c0017aec:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017af3:	74 10                	je     c0017b05 <ISO9660::openDir(char const*, void**)+0x4b>
c0017af5:	83 ec 0c             	sub    esp,0xc
c0017af8:	68 bc f1 01 c0       	push   0xc001f1bc
c0017afd:	e8 75 87 ff ff       	call   c0010277 <KePanic(char const*)>
c0017b02:	83 c4 10             	add    esp,0x10
c0017b05:	8a 03                	mov    al,BYTE PTR [ebx]
c0017b07:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017b0c:	83 ec 0c             	sub    esp,0xc
c0017b0f:	0f be 05 20 53 02 c0 	movsx  eax,BYTE PTR ds:0xc0025320
c0017b16:	83 c3 03             	add    ebx,0x3
c0017b19:	50                   	push   eax
c0017b1a:	e8 a0 ec fe ff       	call   c00067bf <init_percd>
c0017b1f:	59                   	pop    ecx
c0017b20:	58                   	pop    eax
c0017b21:	6a 01                	push   0x1
c0017b23:	53                   	push   ebx
c0017b24:	e8 d4 e7 fe ff       	call   c00062fd <iso_open>
c0017b29:	83 c4 10             	add    esp,0x10
c0017b2c:	ba 01 00 00 00       	mov    edx,0x1
c0017b31:	83 f8 ff             	cmp    eax,0xffffffff
c0017b34:	74 0e                	je     c0017b44 <ISO9660::openDir(char const*, void**)+0x8a>
c0017b36:	83 c0 64             	add    eax,0x64
c0017b39:	31 d2                	xor    edx,edx
c0017b3b:	89 06                	mov    DWORD PTR [esi],eax
c0017b3d:	eb 05                	jmp    c0017b44 <ISO9660::openDir(char const*, void**)+0x8a>
c0017b3f:	ba 04 00 00 00       	mov    edx,0x4
c0017b44:	89 d0                	mov    eax,edx
c0017b46:	5a                   	pop    edx
c0017b47:	5b                   	pop    ebx
c0017b48:	5e                   	pop    esi
c0017b49:	c3                   	ret    

c0017b4a <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017b4a:	53                   	push   ebx
c0017b4b:	83 ec 08             	sub    esp,0x8
c0017b4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b52:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017b56:	85 c0                	test   eax,eax
c0017b58:	74 25                	je     c0017b7f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b5a:	85 db                	test   ebx,ebx
c0017b5c:	74 21                	je     c0017b7f <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017b5e:	83 e8 64             	sub    eax,0x64
c0017b61:	52                   	push   edx
c0017b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b66:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b6a:	50                   	push   eax
c0017b6b:	e8 35 e8 fe ff       	call   c00063a5 <iso_read>
c0017b70:	83 c4 10             	add    esp,0x10
c0017b73:	89 03                	mov    DWORD PTR [ebx],eax
c0017b75:	09 d0                	or     eax,edx
c0017b77:	0f 94 c0             	sete   al
c0017b7a:	0f b6 c0             	movzx  eax,al
c0017b7d:	eb 05                	jmp    c0017b84 <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017b7f:	b8 04 00 00 00       	mov    eax,0x4
c0017b84:	83 c4 08             	add    esp,0x8
c0017b87:	5b                   	pop    ebx
c0017b88:	c3                   	ret    
c0017b89:	90                   	nop

c0017b8a <ISO9660::seek(void*, unsigned long long)>:
c0017b8a:	57                   	push   edi
c0017b8b:	56                   	push   esi
c0017b8c:	b8 04 00 00 00       	mov    eax,0x4
c0017b91:	51                   	push   ecx
c0017b92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b96:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017b9a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017b9e:	85 d2                	test   edx,edx
c0017ba0:	74 1c                	je     c0017bbe <ISO9660::seek(void*, unsigned long long)+0x34>
c0017ba2:	6a 00                	push   0x0
c0017ba4:	83 ea 64             	sub    edx,0x64
c0017ba7:	57                   	push   edi
c0017ba8:	56                   	push   esi
c0017ba9:	52                   	push   edx
c0017baa:	e8 0c e9 fe ff       	call   c00064bb <iso_seek>
c0017baf:	83 c4 10             	add    esp,0x10
c0017bb2:	31 f0                	xor    eax,esi
c0017bb4:	31 fa                	xor    edx,edi
c0017bb6:	09 d0                	or     eax,edx
c0017bb8:	0f 95 c0             	setne  al
c0017bbb:	0f b6 c0             	movzx  eax,al
c0017bbe:	5a                   	pop    edx
c0017bbf:	5e                   	pop    esi
c0017bc0:	5f                   	pop    edi
c0017bc1:	c3                   	ret    

c0017bc2 <ISO9660::tell(void*, unsigned long long*)>:
c0017bc2:	53                   	push   ebx
c0017bc3:	83 ec 08             	sub    esp,0x8
c0017bc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017bce:	85 c0                	test   eax,eax
c0017bd0:	74 1c                	je     c0017bee <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bd2:	85 db                	test   ebx,ebx
c0017bd4:	74 18                	je     c0017bee <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017bd6:	83 ec 0c             	sub    esp,0xc
c0017bd9:	83 e8 64             	sub    eax,0x64
c0017bdc:	50                   	push   eax
c0017bdd:	e8 5d e9 fe ff       	call   c000653f <iso_tell>
c0017be2:	83 c4 10             	add    esp,0x10
c0017be5:	89 03                	mov    DWORD PTR [ebx],eax
c0017be7:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017bea:	31 c0                	xor    eax,eax
c0017bec:	eb 05                	jmp    c0017bf3 <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017bee:	b8 04 00 00 00       	mov    eax,0x4
c0017bf3:	83 c4 08             	add    esp,0x8
c0017bf6:	5b                   	pop    ebx
c0017bf7:	c3                   	ret    

c0017bf8 <ISO9660::stat(void*, unsigned long long*)>:
c0017bf8:	53                   	push   ebx
c0017bf9:	83 ec 08             	sub    esp,0x8
c0017bfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017c00:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017c04:	85 c0                	test   eax,eax
c0017c06:	74 20                	je     c0017c28 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c08:	85 db                	test   ebx,ebx
c0017c0a:	74 1c                	je     c0017c28 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017c0c:	83 ec 0c             	sub    esp,0xc
c0017c0f:	83 e8 64             	sub    eax,0x64
c0017c12:	50                   	push   eax
c0017c13:	e8 58 e9 fe ff       	call   c0006570 <iso_total>
c0017c18:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017c1f:	89 03                	mov    DWORD PTR [ebx],eax
c0017c21:	83 c4 10             	add    esp,0x10
c0017c24:	31 c0                	xor    eax,eax
c0017c26:	eb 05                	jmp    c0017c2d <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017c28:	b8 04 00 00 00       	mov    eax,0x4
c0017c2d:	83 c4 08             	add    esp,0x8
c0017c30:	5b                   	pop    ebx
c0017c31:	c3                   	ret    

c0017c32 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0017c32:	55                   	push   ebp
c0017c33:	57                   	push   edi
c0017c34:	56                   	push   esi
c0017c35:	53                   	push   ebx
c0017c36:	83 ec 0c             	sub    esp,0xc
c0017c39:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017c3d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017c41:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017c45:	85 ff                	test   edi,edi
c0017c47:	0f 94 c2             	sete   dl
c0017c4a:	85 f6                	test   esi,esi
c0017c4c:	0f 94 c0             	sete   al
c0017c4f:	08 c2                	or     dl,al
c0017c51:	0f 85 9e 00 00 00    	jne    c0017cf5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017c57:	85 db                	test   ebx,ebx
c0017c59:	0f 84 96 00 00 00    	je     c0017cf5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017c5f:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0017c62:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017c68:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017c6f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017c72:	3a 05 20 53 02 c0    	cmp    al,BYTE PTR ds:0xc0025320
c0017c78:	74 34                	je     c0017cae <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017c7a:	83 ec 0c             	sub    esp,0xc
c0017c7d:	50                   	push   eax
c0017c7e:	e8 3c eb fe ff       	call   c00067bf <init_percd>
c0017c83:	83 c4 10             	add    esp,0x10
c0017c86:	ba 0b 00 00 00       	mov    edx,0xb
c0017c8b:	40                   	inc    eax
c0017c8c:	74 6c                	je     c0017cfa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017c8e:	80 3d 20 53 02 c0 00 	cmp    BYTE PTR ds:0xc0025320,0x0
c0017c95:	74 10                	je     c0017ca7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c0017c97:	83 ec 0c             	sub    esp,0xc
c0017c9a:	68 bc f1 01 c0       	push   0xc001f1bc
c0017c9f:	e8 d3 85 ff ff       	call   c0010277 <KePanic(char const*)>
c0017ca4:	83 c4 10             	add    esp,0x10
c0017ca7:	8a 03                	mov    al,BYTE PTR [ebx]
c0017ca9:	a2 20 53 02 c0       	mov    ds:0xc0025320,al
c0017cae:	83 c3 03             	add    ebx,0x3
c0017cb1:	52                   	push   edx
c0017cb2:	52                   	push   edx
c0017cb3:	6a 00                	push   0x0
c0017cb5:	53                   	push   ebx
c0017cb6:	e8 42 e6 fe ff       	call   c00062fd <iso_open>
c0017cbb:	83 c4 10             	add    esp,0x10
c0017cbe:	89 c5                	mov    ebp,eax
c0017cc0:	83 f8 ff             	cmp    eax,0xffffffff
c0017cc3:	75 0f                	jne    c0017cd4 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c0017cc5:	50                   	push   eax
c0017cc6:	50                   	push   eax
c0017cc7:	6a 01                	push   0x1
c0017cc9:	53                   	push   ebx
c0017cca:	e8 2e e6 fe ff       	call   c00062fd <iso_open>
c0017ccf:	c6 07 01             	mov    BYTE PTR [edi],0x1
c0017cd2:	eb 1a                	jmp    c0017cee <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c0017cd4:	83 ec 0c             	sub    esp,0xc
c0017cd7:	50                   	push   eax
c0017cd8:	e8 93 e8 fe ff       	call   c0006570 <iso_total>
c0017cdd:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017ce4:	89 06                	mov    DWORD PTR [esi],eax
c0017ce6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ce9:	e8 99 e6 fe ff       	call   c0006387 <iso_close>
c0017cee:	83 c4 10             	add    esp,0x10
c0017cf1:	31 d2                	xor    edx,edx
c0017cf3:	eb 05                	jmp    c0017cfa <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c0017cf5:	ba 04 00 00 00       	mov    edx,0x4
c0017cfa:	83 c4 0c             	add    esp,0xc
c0017cfd:	89 d0                	mov    eax,edx
c0017cff:	5b                   	pop    ebx
c0017d00:	5e                   	pop    esi
c0017d01:	5f                   	pop    edi
c0017d02:	5d                   	pop    ebp
c0017d03:	c3                   	ret    

c0017d04 <ISO9660::close(void*)>:
c0017d04:	83 ec 0c             	sub    esp,0xc
c0017d07:	b8 04 00 00 00       	mov    eax,0x4
c0017d0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d10:	85 d2                	test   edx,edx
c0017d12:	74 11                	je     c0017d25 <ISO9660::close(void*)+0x21>
c0017d14:	83 ec 0c             	sub    esp,0xc
c0017d17:	83 ea 64             	sub    edx,0x64
c0017d1a:	52                   	push   edx
c0017d1b:	e8 67 e6 fe ff       	call   c0006387 <iso_close>
c0017d20:	83 c4 10             	add    esp,0x10
c0017d23:	31 c0                	xor    eax,eax
c0017d25:	83 c4 0c             	add    esp,0xc
c0017d28:	c3                   	ret    
c0017d29:	90                   	nop

c0017d2a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017d2a:	55                   	push   ebp
c0017d2b:	57                   	push   edi
c0017d2c:	56                   	push   esi
c0017d2d:	53                   	push   ebx
c0017d2e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017d34:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017d3b:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0017d42:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017d49:	85 c0                	test   eax,eax
c0017d4b:	0f 84 96 00 00 00    	je     c0017de7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d51:	85 db                	test   ebx,ebx
c0017d53:	0f 84 8e 00 00 00    	je     c0017de7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017d59:	83 ec 0c             	sub    esp,0xc
c0017d5c:	83 e8 64             	sub    eax,0x64
c0017d5f:	50                   	push   eax
c0017d60:	e8 5c e8 fe ff       	call   c00065c1 <iso_readdir>
c0017d65:	83 c4 10             	add    esp,0x10
c0017d68:	89 c6                	mov    esi,eax
c0017d6a:	85 c0                	test   eax,eax
c0017d6c:	75 18                	jne    c0017d86 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017d6e:	52                   	push   edx
c0017d6f:	68 10 01 00 00       	push   0x110
c0017d74:	6a 00                	push   0x0
c0017d76:	57                   	push   edi
c0017d77:	e8 54 87 fe ff       	call   c00004d0 <memset>
c0017d7c:	83 c4 10             	add    esp,0x10
c0017d7f:	b8 01 00 00 00       	mov    eax,0x1
c0017d84:	eb 66                	jmp    c0017dec <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017d86:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0017d8c:	8d 68 08             	lea    ebp,[eax+0x8]
c0017d8f:	83 ec 0c             	sub    esp,0xc
c0017d92:	55                   	push   ebp
c0017d93:	e8 a8 87 fe ff       	call   c0000540 <strlen>
c0017d98:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017da0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017da4:	83 c4 10             	add    esp,0x10
c0017da7:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c0017dab:	75 0a                	jne    c0017db7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c0017dad:	b8 02 00 00 00       	mov    eax,0x2
c0017db2:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c0017db5:	74 05                	je     c0017dbc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c0017db7:	b8 01 00 00 00       	mov    eax,0x1
c0017dbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017dc0:	50                   	push   eax
c0017dc1:	50                   	push   eax
c0017dc2:	55                   	push   ebp
c0017dc3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0017dc7:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0017dcb:	50                   	push   eax
c0017dcc:	e8 2f 88 fe ff       	call   c0000600 <strcpy>
c0017dd1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0017dd8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017dda:	31 c0                	xor    eax,eax
c0017ddc:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c0017de2:	83 c4 10             	add    esp,0x10
c0017de5:	eb 05                	jmp    c0017dec <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c0017de7:	b8 04 00 00 00       	mov    eax,0x4
c0017dec:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017df2:	5b                   	pop    ebx
c0017df3:	5e                   	pop    esi
c0017df4:	5f                   	pop    edi
c0017df5:	5d                   	pop    ebp
c0017df6:	c3                   	ret    

c0017df7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017df7:	57                   	push   edi
c0017df8:	56                   	push   esi
c0017df9:	53                   	push   ebx
c0017dfa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017dfe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017e02:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e06:	39 35 24 53 02 c0    	cmp    DWORD PTR ds:0xc0025324,esi
c0017e0c:	75 08                	jne    c0017e16 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017e0e:	38 1d f0 fb 01 c0    	cmp    BYTE PTR ds:0xc001fbf0,bl
c0017e14:	74 4a                	je     c0017e60 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e16:	83 ec 0c             	sub    esp,0xc
c0017e19:	31 d2                	xor    edx,edx
c0017e1b:	68 40 53 02 c0       	push   0xc0025340
c0017e20:	0f be c3             	movsx  eax,bl
c0017e23:	6a 01                	push   0x1
c0017e25:	52                   	push   edx
c0017e26:	56                   	push   esi
c0017e27:	ff 34 85 1c 43 02 c0 	push   DWORD PTR [eax*4-0x3ffdbce4]
c0017e2e:	e8 e9 4e ff ff       	call   c000cd1c <LogicalDisk::read(unsigned long long, int, void*)>
c0017e33:	83 c4 20             	add    esp,0x20
c0017e36:	85 c0                	test   eax,eax
c0017e38:	75 0e                	jne    c0017e48 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017e3a:	89 35 24 53 02 c0    	mov    DWORD PTR ds:0xc0025324,esi
c0017e40:	88 1d f0 fb 01 c0    	mov    BYTE PTR ds:0xc001fbf0,bl
c0017e46:	eb 18                	jmp    c0017e60 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017e48:	50                   	push   eax
c0017e49:	68 00 08 00 00       	push   0x800
c0017e4e:	6a 00                	push   0x0
c0017e50:	57                   	push   edi
c0017e51:	e8 7a 86 fe ff       	call   c00004d0 <memset>
c0017e56:	83 c4 10             	add    esp,0x10
c0017e59:	b8 01 00 00 00       	mov    eax,0x1
c0017e5e:	eb 0e                	jmp    c0017e6e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017e60:	be 40 53 02 c0       	mov    esi,0xc0025340
c0017e65:	b9 00 08 00 00       	mov    ecx,0x800
c0017e6a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017e6c:	31 c0                	xor    eax,eax
c0017e6e:	5b                   	pop    ebx
c0017e6f:	5e                   	pop    esi
c0017e70:	5f                   	pop    edi
c0017e71:	c3                   	ret    

c0017e72 <ISO9660::tryMount(LogicalDisk*, int)>:
c0017e72:	53                   	push   ebx
c0017e73:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017e79:	c7 05 24 53 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0025324,0xdeadbeef
c0017e83:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0017e8a:	8d 58 41             	lea    ebx,[eax+0x41]
c0017e8d:	0f be db             	movsx  ebx,bl
c0017e90:	53                   	push   ebx
c0017e91:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017e95:	50                   	push   eax
c0017e96:	6a 10                	push   0x10
c0017e98:	e8 5a ff ff ff       	call   c0017df7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0017e9d:	83 c4 10             	add    esp,0x10
c0017ea0:	31 d2                	xor    edx,edx
c0017ea2:	85 c0                	test   eax,eax
c0017ea4:	75 33                	jne    c0017ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ea6:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0017eab:	75 2c                	jne    c0017ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ead:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0017eb2:	75 25                	jne    c0017ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017eb4:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0017eb9:	75 1e                	jne    c0017ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ebb:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0017ec0:	75 17                	jne    c0017ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ec2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0017ec7:	75 10                	jne    c0017ed9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c0017ec9:	83 ec 0c             	sub    esp,0xc
c0017ecc:	53                   	push   ebx
c0017ecd:	e8 ed e8 fe ff       	call   c00067bf <init_percd>
c0017ed2:	83 c4 10             	add    esp,0x10
c0017ed5:	40                   	inc    eax
c0017ed6:	0f 95 c2             	setne  dl
c0017ed9:	88 d0                	mov    al,dl
c0017edb:	81 c4 08 08 00 00    	add    esp,0x808
c0017ee1:	5b                   	pop    ebx
c0017ee2:	c3                   	ret    
c0017ee3:	90                   	nop

c0017ee4 <ISO9660::ISO9660()>:
c0017ee4:	83 ec 0c             	sub    esp,0xc
c0017ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017eeb:	83 ec 0c             	sub    esp,0xc
c0017eee:	50                   	push   eax
c0017eef:	e8 22 2a ff ff       	call   c000a916 <Filesystem::Filesystem()>
c0017ef4:	83 c4 10             	add    esp,0x10
c0017ef7:	ba d4 f1 01 c0       	mov    edx,0xc001f1d4
c0017efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f00:	89 10                	mov    DWORD PTR [eax],edx
c0017f02:	e8 ba e9 fe ff       	call   c00068c1 <fs_iso9660_init>
c0017f07:	90                   	nop
c0017f08:	83 c4 0c             	add    esp,0xc
c0017f0b:	c3                   	ret    

c0017f0c <SoundCard::beginPlayback()>:
c0017f0c:	c7 44 24 04 34 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f234
c0017f14:	e9 5e 83 ff ff       	jmp    c0010277 <KePanic(char const*)>
c0017f19:	90                   	nop

c0017f1a <SoundCard::stopPlayback()>:
c0017f1a:	c7 44 24 04 34 f2 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f234
c0017f22:	e9 50 83 ff ff       	jmp    c0010277 <KePanic(char const*)>
c0017f27:	90                   	nop

c0017f28 <SoundCard::SoundCard(char const*)>:
c0017f28:	83 ec 1c             	sub    esp,0x1c
c0017f2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f2f:	83 ec 08             	sub    esp,0x8
c0017f32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017f36:	50                   	push   eax
c0017f37:	e8 90 3c ff ff       	call   c000bbcc <Device::Device(char const*)>
c0017f3c:	83 c4 10             	add    esp,0x10
c0017f3f:	ba 80 f2 01 c0       	mov    edx,0xc001f280
c0017f44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f48:	89 10                	mov    DWORD PTR [eax],edx
c0017f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017f55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f59:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017f63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f67:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017f71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f75:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f83:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017f8d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017f95:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017f9a:	7f 19                	jg     c0017fb5 <SoundCard::SoundCard(char const*)+0x8d>
c0017f9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017fa4:	83 c2 54             	add    edx,0x54
c0017fa7:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017faf:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017fb3:	eb e0                	jmp    c0017f95 <SoundCard::SoundCard(char const*)+0x6d>
c0017fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fb9:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017fc0:	90                   	nop
c0017fc1:	83 c4 1c             	add    esp,0x1c
c0017fc4:	c3                   	ret    
c0017fc5:	90                   	nop

c0017fc6 <SoundCard::~SoundCard()>:
c0017fc6:	83 ec 0c             	sub    esp,0xc
c0017fc9:	ba 80 f2 01 c0       	mov    edx,0xc001f280
c0017fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fd2:	89 10                	mov    DWORD PTR [eax],edx
c0017fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fd8:	83 ec 0c             	sub    esp,0xc
c0017fdb:	50                   	push   eax
c0017fdc:	e8 55 39 ff ff       	call   c000b936 <Device::~Device()>
c0017fe1:	83 c4 10             	add    esp,0x10
c0017fe4:	90                   	nop
c0017fe5:	83 c4 0c             	add    esp,0xc
c0017fe8:	c3                   	ret    
c0017fe9:	90                   	nop

c0017fea <SoundCard::~SoundCard()>:
c0017fea:	83 ec 0c             	sub    esp,0xc
c0017fed:	83 ec 0c             	sub    esp,0xc
c0017ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ff4:	e8 cd ff ff ff       	call   c0017fc6 <SoundCard::~SoundCard()>
c0017ff9:	83 c4 10             	add    esp,0x10
c0017ffc:	83 ec 08             	sub    esp,0x8
c0017fff:	68 e8 01 00 00       	push   0x1e8
c0018004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018008:	e8 f1 24 ff ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001800d:	83 c4 10             	add    esp,0x10
c0018010:	83 c4 0c             	add    esp,0xc
c0018013:	c3                   	ret    

c0018014 <SoundCard::configureRates(int, int, int)>:
c0018014:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018018:	31 c0                	xor    eax,eax
c001801a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0018021:	75 20                	jne    c0018043 <SoundCard::configureRates(int, int, int)+0x2f>
c0018023:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018027:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001802d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018031:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0018037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001803b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0018041:	b0 01                	mov    al,0x1
c0018043:	c3                   	ret    

c0018044 <SoundCard::getSamples16(int, short*)>:
c0018044:	55                   	push   ebp
c0018045:	57                   	push   edi
c0018046:	31 ff                	xor    edi,edi
c0018048:	56                   	push   esi
c0018049:	53                   	push   ebx
c001804a:	31 db                	xor    ebx,ebx
c001804c:	83 ec 10             	sub    esp,0x10
c001804f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0018053:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0018057:	8d 04 36             	lea    eax,[esi+esi*1]
c001805a:	50                   	push   eax
c001805b:	6a 00                	push   0x0
c001805d:	55                   	push   ebp
c001805e:	e8 6d 84 fe ff       	call   c00004d0 <memset>
c0018063:	83 c4 10             	add    esp,0x10
c0018066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001806a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0018071:	85 c0                	test   eax,eax
c0018073:	74 1b                	je     c0018090 <SoundCard::getSamples16(int, short*)+0x4c>
c0018075:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0018079:	75 15                	jne    c0018090 <SoundCard::getSamples16(int, short*)+0x4c>
c001807b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001807f:	55                   	push   ebp
c0018080:	56                   	push   esi
c0018081:	50                   	push   eax
c0018082:	e8 ed 02 00 00       	call   c0018374 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0018087:	83 c4 10             	add    esp,0x10
c001808a:	39 c7                	cmp    edi,eax
c001808c:	7d 02                	jge    c0018090 <SoundCard::getSamples16(int, short*)+0x4c>
c001808e:	89 c7                	mov    edi,eax
c0018090:	43                   	inc    ebx
c0018091:	83 fb 20             	cmp    ebx,0x20
c0018094:	75 d0                	jne    c0018066 <SoundCard::getSamples16(int, short*)+0x22>
c0018096:	83 c4 0c             	add    esp,0xc
c0018099:	89 f8                	mov    eax,edi
c001809b:	5b                   	pop    ebx
c001809c:	5e                   	pop    esi
c001809d:	5f                   	pop    edi
c001809e:	5d                   	pop    ebp
c001809f:	c3                   	ret    

c00180a0 <SoundCard::getSamples32(int, int*)>:
c00180a0:	55                   	push   ebp
c00180a1:	57                   	push   edi
c00180a2:	31 ff                	xor    edi,edi
c00180a4:	56                   	push   esi
c00180a5:	31 f6                	xor    esi,esi
c00180a7:	53                   	push   ebx
c00180a8:	83 ec 10             	sub    esp,0x10
c00180ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180af:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00180b3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00180b7:	c1 e0 02             	shl    eax,0x2
c00180ba:	50                   	push   eax
c00180bb:	6a 00                	push   0x0
c00180bd:	55                   	push   ebp
c00180be:	e8 0d 84 fe ff       	call   c00004d0 <memset>
c00180c3:	83 c4 10             	add    esp,0x10
c00180c6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c00180cd:	85 c0                	test   eax,eax
c00180cf:	74 1b                	je     c00180ec <SoundCard::getSamples32(int, int*)+0x4c>
c00180d1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c00180d5:	75 15                	jne    c00180ec <SoundCard::getSamples32(int, int*)+0x4c>
c00180d7:	53                   	push   ebx
c00180d8:	55                   	push   ebp
c00180d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180dd:	50                   	push   eax
c00180de:	e8 55 03 00 00       	call   c0018438 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c00180e3:	83 c4 10             	add    esp,0x10
c00180e6:	39 c6                	cmp    esi,eax
c00180e8:	7d 02                	jge    c00180ec <SoundCard::getSamples32(int, int*)+0x4c>
c00180ea:	89 c6                	mov    esi,eax
c00180ec:	47                   	inc    edi
c00180ed:	83 ff 20             	cmp    edi,0x20
c00180f0:	75 d4                	jne    c00180c6 <SoundCard::getSamples32(int, int*)+0x26>
c00180f2:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c00180f8:	85 f6                	test   esi,esi
c00180fa:	75 0f                	jne    c001810b <SoundCard::getSamples32(int, int*)+0x6b>
c00180fc:	84 c0                	test   al,al
c00180fe:	74 1b                	je     c001811b <SoundCard::getSamples32(int, int*)+0x7b>
c0018100:	83 ec 0c             	sub    esp,0xc
c0018103:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018105:	53                   	push   ebx
c0018106:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0018109:	eb 0d                	jmp    c0018118 <SoundCard::getSamples32(int, int*)+0x78>
c001810b:	84 c0                	test   al,al
c001810d:	75 0c                	jne    c001811b <SoundCard::getSamples32(int, int*)+0x7b>
c001810f:	83 ec 0c             	sub    esp,0xc
c0018112:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018114:	53                   	push   ebx
c0018115:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0018118:	83 c4 10             	add    esp,0x10
c001811b:	83 c4 0c             	add    esp,0xc
c001811e:	89 f0                	mov    eax,esi
c0018120:	5b                   	pop    ebx
c0018121:	5e                   	pop    esi
c0018122:	5f                   	pop    edi
c0018123:	5d                   	pop    ebp
c0018124:	c3                   	ret    
c0018125:	90                   	nop

c0018126 <SoundCard::addChannel(SoundPort*)>:
c0018126:	83 ec 0c             	sub    esp,0xc
c0018129:	31 c0                	xor    eax,eax
c001812b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001812f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0018137:	74 1b                	je     c0018154 <SoundCard::addChannel(SoundPort*)+0x2e>
c0018139:	40                   	inc    eax
c001813a:	83 f8 20             	cmp    eax,0x20
c001813d:	75 f0                	jne    c001812f <SoundCard::addChannel(SoundPort*)+0x9>
c001813f:	83 ec 0c             	sub    esp,0xc
c0018142:	68 59 f2 01 c0       	push   0xc001f259
c0018147:	e8 2b 81 ff ff       	call   c0010277 <KePanic(char const*)>
c001814c:	83 c4 10             	add    esp,0x10
c001814f:	83 c8 ff             	or     eax,0xffffffff
c0018152:	eb 0b                	jmp    c001815f <SoundCard::addChannel(SoundPort*)+0x39>
c0018154:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018158:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001815f:	83 c4 0c             	add    esp,0xc
c0018162:	c3                   	ret    
c0018163:	90                   	nop

c0018164 <SoundCard::removeChannel(int)>:
c0018164:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018168:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001816c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0018177:	c3                   	ret    

c0018178 <SoundPort::SoundPort(int, int, int, int)>:
c0018178:	83 ec 0c             	sub    esp,0xc
c001817b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001817f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001818a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001818e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018192:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018196:	89 10                	mov    DWORD PTR [eax],edx
c0018198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181a0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00181a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00181ae:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c00181b3:	75 13                	jne    c00181c8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c00181b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00181bb:	05 a0 0f 00 00       	add    eax,0xfa0
c00181c0:	01 c0                	add    eax,eax
c00181c2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00181c6:	66 90                	xchg   ax,ax
c00181c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00181d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00181d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181d7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00181de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00181e5:	c1 e0 02             	shl    eax,0x2
c00181e8:	83 ec 0c             	sub    esp,0xc
c00181eb:	50                   	push   eax
c00181ec:	e8 c8 f5 fe ff       	call   c00077b9 <malloc>
c00181f1:	83 c4 10             	add    esp,0x10
c00181f4:	89 c2                	mov    edx,eax
c00181f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181fa:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00181fd:	90                   	nop
c00181fe:	83 c4 0c             	add    esp,0xc
c0018201:	c3                   	ret    
c0018202:	66 90                	xchg   ax,ax

c0018204 <SoundPort::~SoundPort()>:
c0018204:	83 ec 0c             	sub    esp,0xc
c0018207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001820e:	85 c0                	test   eax,eax
c0018210:	74 1e                	je     c0018230 <SoundPort::~SoundPort()+0x2c>
c0018212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018216:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018219:	83 ec 0c             	sub    esp,0xc
c001821c:	50                   	push   eax
c001821d:	e8 a7 f5 fe ff       	call   c00077c9 <free>
c0018222:	83 c4 10             	add    esp,0x10
c0018225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018229:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018230:	90                   	nop
c0018231:	83 c4 0c             	add    esp,0xc
c0018234:	c3                   	ret    
c0018235:	90                   	nop
c0018236:	66 90                	xchg   ax,ax

c0018238 <SoundPort::unpause()>:
c0018238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001823c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0018240:	c3                   	ret    
c0018241:	90                   	nop
c0018242:	66 90                	xchg   ax,ax

c0018244 <SoundPort::pause()>:
c0018244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018248:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001824c:	c3                   	ret    
c001824d:	90                   	nop
c001824e:	66 90                	xchg   ax,ax

c0018250 <SoundPort::getBufferUsed()>:
c0018250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018254:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018257:	c3                   	ret    

c0018258 <SoundPort::getBufferSize()>:
c0018258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001825c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001825f:	c3                   	ret    

c0018260 <SoundPort::buffer16(short*, int)>:
c0018260:	55                   	push   ebp
c0018261:	57                   	push   edi
c0018262:	56                   	push   esi
c0018263:	53                   	push   ebx
c0018264:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018268:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001826c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001826f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0018272:	74 68                	je     c00182dc <SoundPort::buffer16(short*, int)+0x7c>
c0018274:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018278:	85 c9                	test   ecx,ecx
c001827a:	7e 60                	jle    c00182dc <SoundPort::buffer16(short*, int)+0x7c>
c001827c:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0018280:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018283:	c1 e1 0f             	shl    ecx,0xf
c0018286:	8d 70 01             	lea    esi,[eax+0x1]
c0018289:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001828c:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001828f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0018292:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018295:	74 4d                	je     c00182e4 <SoundPort::buffer16(short*, int)+0x84>
c0018297:	31 f6                	xor    esi,esi
c0018299:	eb 21                	jmp    c00182bc <SoundPort::buffer16(short*, int)+0x5c>
c001829b:	90                   	nop
c001829c:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c00182a1:	8d 79 01             	lea    edi,[ecx+0x1]
c00182a4:	c1 e3 0f             	shl    ebx,0xf
c00182a7:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c00182aa:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c00182ad:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c00182b0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182b3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c00182b6:	74 1c                	je     c00182d4 <SoundPort::buffer16(short*, int)+0x74>
c00182b8:	89 c6                	mov    esi,eax
c00182ba:	66 90                	xchg   ax,ax
c00182bc:	8d 46 01             	lea    eax,[esi+0x1]
c00182bf:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00182c3:	75 d7                	jne    c001829c <SoundPort::buffer16(short*, int)+0x3c>
c00182c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00182c9:	8d 76 00             	lea    esi,[esi+0x0]
c00182cc:	5b                   	pop    ebx
c00182cd:	5e                   	pop    esi
c00182ce:	5f                   	pop    edi
c00182cf:	5d                   	pop    ebp
c00182d0:	c3                   	ret    
c00182d1:	8d 76 00             	lea    esi,[esi+0x0]
c00182d4:	5b                   	pop    ebx
c00182d5:	8d 46 02             	lea    eax,[esi+0x2]
c00182d8:	5e                   	pop    esi
c00182d9:	5f                   	pop    edi
c00182da:	5d                   	pop    ebp
c00182db:	c3                   	ret    
c00182dc:	5b                   	pop    ebx
c00182dd:	31 c0                	xor    eax,eax
c00182df:	5e                   	pop    esi
c00182e0:	5f                   	pop    edi
c00182e1:	5d                   	pop    ebp
c00182e2:	c3                   	ret    
c00182e3:	90                   	nop
c00182e4:	b8 01 00 00 00       	mov    eax,0x1
c00182e9:	eb e1                	jmp    c00182cc <SoundPort::buffer16(short*, int)+0x6c>
c00182eb:	90                   	nop

c00182ec <SoundPort::buffer32(int*, int)>:
c00182ec:	55                   	push   ebp
c00182ed:	57                   	push   edi
c00182ee:	56                   	push   esi
c00182ef:	53                   	push   ebx
c00182f0:	51                   	push   ecx
c00182f1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182f9:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00182fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018300:	89 04 24             	mov    DWORD PTR [esp],eax
c0018303:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018306:	74 5c                	je     c0018364 <SoundPort::buffer32(int*, int)+0x78>
c0018308:	85 c0                	test   eax,eax
c001830a:	7e 58                	jle    c0018364 <SoundPort::buffer32(int*, int)+0x78>
c001830c:	8d 71 01             	lea    esi,[ecx+0x1]
c001830f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0018312:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0018315:	8b 37                	mov    esi,DWORD PTR [edi]
c0018317:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001831a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001831d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0018320:	74 4a                	je     c001836c <SoundPort::buffer32(int*, int)+0x80>
c0018322:	31 f6                	xor    esi,esi
c0018324:	eb 1e                	jmp    c0018344 <SoundPort::buffer32(int*, int)+0x58>
c0018326:	66 90                	xchg   ax,ax
c0018328:	8d 69 01             	lea    ebp,[ecx+0x1]
c001832b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001832e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0018331:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018334:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0018338:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001833b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001833e:	74 18                	je     c0018358 <SoundPort::buffer32(int*, int)+0x6c>
c0018340:	89 de                	mov    esi,ebx
c0018342:	66 90                	xchg   ax,ax
c0018344:	8d 5e 01             	lea    ebx,[esi+0x1]
c0018347:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001834a:	75 dc                	jne    c0018328 <SoundPort::buffer32(int*, int)+0x3c>
c001834c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001834f:	90                   	nop
c0018350:	5a                   	pop    edx
c0018351:	5b                   	pop    ebx
c0018352:	5e                   	pop    esi
c0018353:	5f                   	pop    edi
c0018354:	5d                   	pop    ebp
c0018355:	c3                   	ret    
c0018356:	66 90                	xchg   ax,ax
c0018358:	5a                   	pop    edx
c0018359:	8d 46 02             	lea    eax,[esi+0x2]
c001835c:	5b                   	pop    ebx
c001835d:	5e                   	pop    esi
c001835e:	5f                   	pop    edi
c001835f:	5d                   	pop    ebp
c0018360:	c3                   	ret    
c0018361:	8d 76 00             	lea    esi,[esi+0x0]
c0018364:	5a                   	pop    edx
c0018365:	31 c0                	xor    eax,eax
c0018367:	5b                   	pop    ebx
c0018368:	5e                   	pop    esi
c0018369:	5f                   	pop    edi
c001836a:	5d                   	pop    ebp
c001836b:	c3                   	ret    
c001836c:	b8 01 00 00 00       	mov    eax,0x1
c0018371:	eb dd                	jmp    c0018350 <SoundPort::buffer32(int*, int)+0x64>
c0018373:	90                   	nop

c0018374 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0018374:	57                   	push   edi
c0018375:	56                   	push   esi
c0018376:	53                   	push   ebx
c0018377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001837b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001837f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0018385:	39 03                	cmp    DWORD PTR [ebx],eax
c0018387:	74 13                	je     c001839c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0018389:	83 ec 0c             	sub    esp,0xc
c001838c:	68 ac f2 01 c0       	push   0xc001f2ac
c0018391:	e8 e1 7e ff ff       	call   c0010277 <KePanic(char const*)>
c0018396:	83 c4 10             	add    esp,0x10
c0018399:	8d 76 00             	lea    esi,[esi+0x0]
c001839c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c00183a2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c00183a5:	74 11                	je     c00183b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c00183a7:	83 ec 0c             	sub    esp,0xc
c00183aa:	68 eb f2 01 c0       	push   0xc001f2eb
c00183af:	e8 c3 7e ff ff       	call   c0010277 <KePanic(char const*)>
c00183b4:	83 c4 10             	add    esp,0x10
c00183b7:	90                   	nop
c00183b8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c00183be:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c00183c1:	74 11                	je     c00183d4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c00183c3:	83 ec 0c             	sub    esp,0xc
c00183c6:	68 eb f2 01 c0       	push   0xc001f2eb
c00183cb:	e8 a7 7e ff ff       	call   c0010277 <KePanic(char const*)>
c00183d0:	83 c4 10             	add    esp,0x10
c00183d3:	90                   	nop
c00183d4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00183d7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c00183db:	7e 07                	jle    c00183e4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c00183dd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00183e1:	8d 76 00             	lea    esi,[esi+0x0]
c00183e4:	85 f6                	test   esi,esi
c00183e6:	7e 2c                	jle    c0018414 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c00183e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183ec:	8d 3c 36             	lea    edi,[esi+esi*1]
c00183ef:	31 c9                	xor    ecx,ecx
c00183f1:	01 d7                	add    edi,edx
c00183f3:	90                   	nop
c00183f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00183f7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c00183fa:	85 c0                	test   eax,eax
c00183fc:	79 06                	jns    c0018404 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c00183fe:	05 ff 7f 00 00       	add    eax,0x7fff
c0018403:	90                   	nop
c0018404:	c1 f8 0f             	sar    eax,0xf
c0018407:	83 c1 04             	add    ecx,0x4
c001840a:	66 01 02             	add    WORD PTR [edx],ax
c001840d:	83 c2 02             	add    edx,0x2
c0018410:	39 d7                	cmp    edi,edx
c0018412:	75 e0                	jne    c00183f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0018414:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0018417:	50                   	push   eax
c0018418:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001841b:	29 f0                	sub    eax,esi
c001841d:	c1 e0 02             	shl    eax,0x2
c0018420:	50                   	push   eax
c0018421:	8d 04 b2             	lea    eax,[edx+esi*4]
c0018424:	50                   	push   eax
c0018425:	52                   	push   edx
c0018426:	e8 b5 7f fe ff       	call   c00003e0 <memmove>
c001842b:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001842e:	83 c4 10             	add    esp,0x10
c0018431:	89 f0                	mov    eax,esi
c0018433:	5b                   	pop    ebx
c0018434:	5e                   	pop    esi
c0018435:	5f                   	pop    edi
c0018436:	c3                   	ret    
c0018437:	90                   	nop

c0018438 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0018438:	57                   	push   edi
c0018439:	56                   	push   esi
c001843a:	53                   	push   ebx
c001843b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001843f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018443:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018447:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001844d:	39 06                	cmp    DWORD PTR [esi],eax
c001844f:	74 13                	je     c0018464 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0018451:	83 ec 0c             	sub    esp,0xc
c0018454:	68 cc f2 01 c0       	push   0xc001f2cc
c0018459:	e8 19 7e ff ff       	call   c0010277 <KePanic(char const*)>
c001845e:	83 c4 10             	add    esp,0x10
c0018461:	8d 76 00             	lea    esi,[esi+0x0]
c0018464:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001846a:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001846d:	74 11                	je     c0018480 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001846f:	83 ec 0c             	sub    esp,0xc
c0018472:	68 07 f3 01 c0       	push   0xc001f307
c0018477:	e8 fb 7d ff ff       	call   c0010277 <KePanic(char const*)>
c001847c:	83 c4 10             	add    esp,0x10
c001847f:	90                   	nop
c0018480:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0018486:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0018489:	74 11                	je     c001849c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001848b:	83 ec 0c             	sub    esp,0xc
c001848e:	68 07 f3 01 c0       	push   0xc001f307
c0018493:	e8 df 7d ff ff       	call   c0010277 <KePanic(char const*)>
c0018498:	83 c4 10             	add    esp,0x10
c001849b:	90                   	nop
c001849c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001849f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c00184a3:	7e 07                	jle    c00184ac <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c00184a5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00184a9:	8d 76 00             	lea    esi,[esi+0x0]
c00184ac:	85 ff                	test   edi,edi
c00184ae:	7e 1c                	jle    c00184cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c00184b0:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c00184b7:	31 c0                	xor    eax,eax
c00184b9:	8d 76 00             	lea    esi,[esi+0x0]
c00184bc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184bf:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c00184c2:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c00184c5:	83 c0 04             	add    eax,0x4
c00184c8:	39 c1                	cmp    ecx,eax
c00184ca:	75 f0                	jne    c00184bc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c00184cc:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00184cf:	50                   	push   eax
c00184d0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00184d3:	29 f8                	sub    eax,edi
c00184d5:	c1 e0 02             	shl    eax,0x2
c00184d8:	50                   	push   eax
c00184d9:	8d 04 ba             	lea    eax,[edx+edi*4]
c00184dc:	50                   	push   eax
c00184dd:	52                   	push   edx
c00184de:	e8 fd 7e fe ff       	call   c00003e0 <memmove>
c00184e3:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c00184e6:	83 c4 10             	add    esp,0x10
c00184e9:	89 f8                	mov    eax,edi
c00184eb:	5b                   	pop    ebx
c00184ec:	5e                   	pop    esi
c00184ed:	5f                   	pop    edi
c00184ee:	c3                   	ret    
c00184ef:	90                   	nop

c00184f0 <PCI::open(int, int, void*)>:
c00184f0:	83 ec 18             	sub    esp,0x18
c00184f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184fb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018501:	8b 10                	mov    edx,DWORD PTR [eax]
c0018503:	50                   	push   eax
c0018504:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0018507:	31 c0                	xor    eax,eax
c0018509:	83 c4 1c             	add    esp,0x1c
c001850c:	c3                   	ret    
c001850d:	90                   	nop

c001850e <PCI::close(int, int, void*)>:
c001850e:	31 c0                	xor    eax,eax
c0018510:	c3                   	ret    
c0018511:	90                   	nop

c0018512 <PCI::PCI()>:
c0018512:	83 ec 0c             	sub    esp,0xc
c0018515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018519:	83 ec 08             	sub    esp,0x8
c001851c:	68 23 f3 01 c0       	push   0xc001f323
c0018521:	50                   	push   eax
c0018522:	e8 61 2e ff ff       	call   c000b388 <Bus::Bus(char const*)>
c0018527:	83 c4 10             	add    esp,0x10
c001852a:	ba cc f3 01 c0       	mov    edx,0xc001f3cc
c001852f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018533:	89 10                	mov    DWORD PTR [eax],edx
c0018535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018539:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0018543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018547:	a3 40 5b 02 c0       	mov    ds:0xc0025b40,eax
c001854c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018550:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018556:	31 d2                	xor    edx,edx
c0018558:	88 c2                	mov    dl,al
c001855a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001855e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0018565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018569:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001856f:	31 d2                	xor    edx,edx
c0018571:	88 c2                	mov    dl,al
c0018573:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018577:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001857c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018580:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018586:	8d 50 01             	lea    edx,[eax+0x1]
c0018589:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001858d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0018593:	31 d2                	xor    edx,edx
c0018595:	88 c2                	mov    dl,al
c0018597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001859b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001859f:	83 c9 c0             	or     ecx,0xffffffc0
c00185a2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00185a6:	90                   	nop
c00185a7:	83 c4 0c             	add    esp,0xc
c00185aa:	c3                   	ret    
c00185ab:	90                   	nop

c00185ac <PCI::readBAR8(unsigned int, int)>:
c00185ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185b4:	f6 c2 01             	test   dl,0x1
c00185b7:	74 07                	je     c00185c0 <PCI::readBAR8(unsigned int, int)+0x14>
c00185b9:	83 e2 fc             	and    edx,0xfffffffc
c00185bc:	01 c2                	add    edx,eax
c00185be:	ec                   	in     al,dx
c00185bf:	c3                   	ret    
c00185c0:	83 e2 f0             	and    edx,0xfffffff0
c00185c3:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00185c6:	c3                   	ret    
c00185c7:	90                   	nop

c00185c8 <PCI::readBAR16(unsigned int, int)>:
c00185c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185d0:	f6 c2 01             	test   dl,0x1
c00185d3:	74 08                	je     c00185dd <PCI::readBAR16(unsigned int, int)+0x15>
c00185d5:	83 e2 fc             	and    edx,0xfffffffc
c00185d8:	01 c2                	add    edx,eax
c00185da:	66 ed                	in     ax,dx
c00185dc:	c3                   	ret    
c00185dd:	83 e2 f0             	and    edx,0xfffffff0
c00185e0:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00185e4:	c3                   	ret    
c00185e5:	90                   	nop

c00185e6 <PCI::readBAR32(unsigned int, int)>:
c00185e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00185ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00185ee:	f6 c2 01             	test   dl,0x1
c00185f1:	74 07                	je     c00185fa <PCI::readBAR32(unsigned int, int)+0x14>
c00185f3:	83 e2 fc             	and    edx,0xfffffffc
c00185f6:	01 c2                	add    edx,eax
c00185f8:	ed                   	in     eax,dx
c00185f9:	c3                   	ret    
c00185fa:	83 e2 f0             	and    edx,0xfffffff0
c00185fd:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018600:	c3                   	ret    
c0018601:	90                   	nop

c0018602 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018602:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018606:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001860a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001860e:	f6 c2 01             	test   dl,0x1
c0018611:	74 07                	je     c001861a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018613:	83 e2 fc             	and    edx,0xfffffffc
c0018616:	01 ca                	add    edx,ecx
c0018618:	ee                   	out    dx,al
c0018619:	c3                   	ret    
c001861a:	83 e2 f0             	and    edx,0xfffffff0
c001861d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018620:	c3                   	ret    
c0018621:	90                   	nop

c0018622 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018622:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018626:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001862a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001862e:	f6 c2 01             	test   dl,0x1
c0018631:	74 08                	je     c001863b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018633:	83 e2 fc             	and    edx,0xfffffffc
c0018636:	01 ca                	add    edx,ecx
c0018638:	66 ef                	out    dx,ax
c001863a:	c3                   	ret    
c001863b:	83 e2 f0             	and    edx,0xfffffff0
c001863e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018642:	c3                   	ret    
c0018643:	90                   	nop

c0018644 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018644:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001864c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018650:	f6 c2 01             	test   dl,0x1
c0018653:	74 07                	je     c001865c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018655:	83 e2 fc             	and    edx,0xfffffffc
c0018658:	01 ca                	add    edx,ecx
c001865a:	ef                   	out    dx,eax
c001865b:	c3                   	ret    
c001865c:	83 e2 f0             	and    edx,0xfffffff0
c001865f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018662:	c3                   	ret    
c0018663:	90                   	nop

c0018664 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018664:	55                   	push   ebp
c0018665:	57                   	push   edi
c0018666:	56                   	push   esi
c0018667:	53                   	push   ebx
c0018668:	83 ec 0c             	sub    esp,0xc
c001866b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001866f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018673:	89 f0                	mov    eax,esi
c0018675:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018679:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001867d:	3c 07                	cmp    al,0x7
c001867f:	76 10                	jbe    c0018691 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018681:	83 ec 0c             	sub    esp,0xc
c0018684:	68 2b f3 01 c0       	push   0xc001f32b
c0018689:	e8 e9 7b ff ff       	call   c0010277 <KePanic(char const*)>
c001868e:	83 c4 10             	add    esp,0x10
c0018691:	80 fb 0f             	cmp    bl,0xf
c0018694:	76 10                	jbe    c00186a6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0018696:	83 ec 0c             	sub    esp,0xc
c0018699:	68 5b f3 01 c0       	push   0xc001f35b
c001869e:	e8 d4 7b ff ff       	call   c0010277 <KePanic(char const*)>
c00186a3:	83 c4 10             	add    esp,0x10
c00186a6:	8d 04 36             	lea    eax,[esi+esi*1]
c00186a9:	ba f8 0c 00 00       	mov    edx,0xcf8
c00186ae:	83 c8 f0             	or     eax,0xfffffff0
c00186b1:	ee                   	out    dx,al
c00186b2:	ba fa 0c 00 00       	mov    edx,0xcfa
c00186b7:	89 e8                	mov    eax,ebp
c00186b9:	ee                   	out    dx,al
c00186ba:	83 c4 0c             	add    esp,0xc
c00186bd:	89 d8                	mov    eax,ebx
c00186bf:	66 81 e7 fc 00       	and    di,0xfc
c00186c4:	5b                   	pop    ebx
c00186c5:	c1 e0 08             	shl    eax,0x8
c00186c8:	5e                   	pop    esi
c00186c9:	09 f8                	or     eax,edi
c00186cb:	5f                   	pop    edi
c00186cc:	66 0d 00 c0          	or     ax,0xc000
c00186d0:	5d                   	pop    ebp
c00186d1:	c3                   	ret    

c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00186d2:	57                   	push   edi
c00186d3:	56                   	push   esi
c00186d4:	53                   	push   ebx
c00186d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00186d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186dd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00186e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00186eb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186ef:	83 ff 01             	cmp    edi,0x1
c00186f2:	75 3e                	jne    c0018732 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c00186f4:	89 de                	mov    esi,ebx
c00186f6:	0f b6 c0             	movzx  eax,al
c00186f9:	81 e6 fc 00 00 00    	and    esi,0xfc
c00186ff:	c1 e0 10             	shl    eax,0x10
c0018702:	0f b6 c9             	movzx  ecx,cl
c0018705:	09 f0                	or     eax,esi
c0018707:	c1 e1 08             	shl    ecx,0x8
c001870a:	0f b6 d2             	movzx  edx,dl
c001870d:	09 c8                	or     eax,ecx
c001870f:	c1 e2 0b             	shl    edx,0xb
c0018712:	09 d0                	or     eax,edx
c0018714:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018719:	0d 00 00 00 80       	or     eax,0x80000000
c001871e:	ef                   	out    dx,eax
c001871f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018724:	ed                   	in     eax,dx
c0018725:	83 e3 02             	and    ebx,0x2
c0018728:	0f b6 cb             	movzx  ecx,bl
c001872b:	c1 e1 03             	shl    ecx,0x3
c001872e:	d3 e8                	shr    eax,cl
c0018730:	eb 43                	jmp    c0018775 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018732:	83 ff 02             	cmp    edi,0x2
c0018735:	75 2c                	jne    c0018763 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0018737:	83 ec 0c             	sub    esp,0xc
c001873a:	0f b6 c9             	movzx  ecx,cl
c001873d:	0f b6 d2             	movzx  edx,dl
c0018740:	0f b6 fb             	movzx  edi,bl
c0018743:	0f b6 c0             	movzx  eax,al
c0018746:	57                   	push   edi
c0018747:	51                   	push   ecx
c0018748:	52                   	push   edx
c0018749:	50                   	push   eax
c001874a:	56                   	push   esi
c001874b:	e8 14 ff ff ff       	call   c0018664 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018750:	89 c2                	mov    edx,eax
c0018752:	ed                   	in     eax,dx
c0018753:	83 e3 02             	and    ebx,0x2
c0018756:	83 c4 20             	add    esp,0x20
c0018759:	0f b6 cb             	movzx  ecx,bl
c001875c:	c1 e1 03             	shl    ecx,0x3
c001875f:	d3 e8                	shr    eax,cl
c0018761:	eb 12                	jmp    c0018775 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018763:	83 ec 0c             	sub    esp,0xc
c0018766:	68 8b f3 01 c0       	push   0xc001f38b
c001876b:	e8 07 7b ff ff       	call   c0010277 <KePanic(char const*)>
c0018770:	83 c4 10             	add    esp,0x10
c0018773:	31 c0                	xor    eax,eax
c0018775:	5b                   	pop    ebx
c0018776:	5e                   	pop    esi
c0018777:	5f                   	pop    edi
c0018778:	c3                   	ret    
c0018779:	90                   	nop

c001877a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001877a:	83 ec 18             	sub    esp,0x18
c001877d:	6a 00                	push   0x0
c001877f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018784:	50                   	push   eax
c0018785:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001878a:	50                   	push   eax
c001878b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018790:	50                   	push   eax
c0018791:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018795:	e8 38 ff ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001879a:	83 c4 2c             	add    esp,0x2c
c001879d:	c3                   	ret    

c001879e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001879e:	83 ec 18             	sub    esp,0x18
c00187a1:	6a 0e                	push   0xe
c00187a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187a8:	50                   	push   eax
c00187a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187ae:	50                   	push   eax
c00187af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00187b4:	50                   	push   eax
c00187b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187b9:	e8 14 ff ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187be:	83 c4 2c             	add    esp,0x2c
c00187c1:	0f b6 c0             	movzx  eax,al
c00187c4:	c3                   	ret    
c00187c5:	90                   	nop

c00187c6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00187c6:	55                   	push   ebp
c00187c7:	57                   	push   edi
c00187c8:	56                   	push   esi
c00187c9:	53                   	push   ebx
c00187ca:	83 ec 18             	sub    esp,0x18
c00187cd:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00187d2:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00187d7:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00187dc:	6a 0a                	push   0xa
c00187de:	56                   	push   esi
c00187df:	55                   	push   ebp
c00187e0:	57                   	push   edi
c00187e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187e5:	e8 e8 fe ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00187ea:	83 c4 14             	add    esp,0x14
c00187ed:	89 c3                	mov    ebx,eax
c00187ef:	6a 0a                	push   0xa
c00187f1:	0f b6 db             	movzx  ebx,bl
c00187f4:	56                   	push   esi
c00187f5:	55                   	push   ebp
c00187f6:	57                   	push   edi
c00187f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00187fb:	e8 d2 fe ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018800:	83 c4 2c             	add    esp,0x2c
c0018803:	25 00 ff 00 00       	and    eax,0xff00
c0018808:	09 d8                	or     eax,ebx
c001880a:	5b                   	pop    ebx
c001880b:	5e                   	pop    esi
c001880c:	5f                   	pop    edi
c001880d:	5d                   	pop    ebp
c001880e:	c3                   	ret    
c001880f:	90                   	nop

c0018810 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018810:	83 ec 18             	sub    esp,0x18
c0018813:	6a 08                	push   0x8
c0018815:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001881a:	50                   	push   eax
c001881b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018820:	50                   	push   eax
c0018821:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018826:	50                   	push   eax
c0018827:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001882b:	e8 a2 fe ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018830:	83 c4 2c             	add    esp,0x2c
c0018833:	0f b6 c4             	movzx  eax,ah
c0018836:	c3                   	ret    
c0018837:	90                   	nop

c0018838 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018838:	83 ec 18             	sub    esp,0x18
c001883b:	6a 08                	push   0x8
c001883d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018842:	50                   	push   eax
c0018843:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018848:	50                   	push   eax
c0018849:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001884e:	50                   	push   eax
c001884f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018853:	e8 7a fe ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018858:	83 c4 2c             	add    esp,0x2c
c001885b:	c3                   	ret    

c001885c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001885c:	83 ec 18             	sub    esp,0x18
c001885f:	6a 3c                	push   0x3c
c0018861:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018866:	50                   	push   eax
c0018867:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001886c:	50                   	push   eax
c001886d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018872:	50                   	push   eax
c0018873:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018877:	e8 56 fe ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001887c:	83 c4 2c             	add    esp,0x2c
c001887f:	c3                   	ret    

c0018880 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018880:	83 ec 18             	sub    esp,0x18
c0018883:	6a 18                	push   0x18
c0018885:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001888a:	50                   	push   eax
c001888b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018890:	50                   	push   eax
c0018891:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018896:	50                   	push   eax
c0018897:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001889b:	e8 32 fe ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188a0:	83 c4 2c             	add    esp,0x2c
c00188a3:	0f b6 c4             	movzx  eax,ah
c00188a6:	c3                   	ret    
c00188a7:	90                   	nop

c00188a8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00188a8:	55                   	push   ebp
c00188a9:	57                   	push   edi
c00188aa:	56                   	push   esi
c00188ab:	53                   	push   ebx
c00188ac:	83 ec 28             	sub    esp,0x28
c00188af:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00188b3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00188b8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00188bd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00188c2:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00188c9:	8d 43 12             	lea    eax,[ebx+0x12]
c00188cc:	83 c3 10             	add    ebx,0x10
c00188cf:	0f b6 c0             	movzx  eax,al
c00188d2:	0f b6 db             	movzx  ebx,bl
c00188d5:	50                   	push   eax
c00188d6:	51                   	push   ecx
c00188d7:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00188db:	57                   	push   edi
c00188dc:	55                   	push   ebp
c00188dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188e1:	e8 ec fd ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188e6:	83 c4 14             	add    esp,0x14
c00188e9:	89 c6                	mov    esi,eax
c00188eb:	53                   	push   ebx
c00188ec:	c1 e6 10             	shl    esi,0x10
c00188ef:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00188f3:	51                   	push   ecx
c00188f4:	57                   	push   edi
c00188f5:	55                   	push   ebp
c00188f6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188fa:	e8 d3 fd ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00188ff:	83 c4 3c             	add    esp,0x3c
c0018902:	0f b7 c0             	movzx  eax,ax
c0018905:	5b                   	pop    ebx
c0018906:	09 f0                	or     eax,esi
c0018908:	5e                   	pop    esi
c0018909:	5f                   	pop    edi
c001890a:	5d                   	pop    ebp
c001890b:	c3                   	ret    

c001890c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001890c:	55                   	push   ebp
c001890d:	57                   	push   edi
c001890e:	56                   	push   esi
c001890f:	53                   	push   ebx
c0018910:	83 ec 0c             	sub    esp,0xc
c0018913:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018917:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001891b:	89 f5                	mov    ebp,esi
c001891d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018923:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018927:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001892b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001892f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018933:	83 f9 01             	cmp    ecx,0x1
c0018936:	75 5d                	jne    c0018995 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018938:	0f b6 c8             	movzx  ecx,al
c001893b:	0f b6 d2             	movzx  edx,dl
c001893e:	c1 e1 10             	shl    ecx,0x10
c0018941:	c1 e2 0b             	shl    edx,0xb
c0018944:	89 f0                	mov    eax,esi
c0018946:	25 fc 00 00 00       	and    eax,0xfc
c001894b:	09 c1                	or     ecx,eax
c001894d:	89 e8                	mov    eax,ebp
c001894f:	0f b6 c0             	movzx  eax,al
c0018952:	c1 e0 08             	shl    eax,0x8
c0018955:	09 c1                	or     ecx,eax
c0018957:	09 d1                	or     ecx,edx
c0018959:	ba f8 0c 00 00       	mov    edx,0xcf8
c001895e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018964:	89 c8                	mov    eax,ecx
c0018966:	ef                   	out    dx,eax
c0018967:	ba fc 0c 00 00       	mov    edx,0xcfc
c001896c:	ed                   	in     eax,dx
c001896d:	0f b7 db             	movzx  ebx,bx
c0018970:	83 e6 02             	and    esi,0x2
c0018973:	74 0a                	je     c001897f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018975:	0f b7 d0             	movzx  edx,ax
c0018978:	c1 e3 10             	shl    ebx,0x10
c001897b:	09 d3                	or     ebx,edx
c001897d:	eb 05                	jmp    c0018984 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001897f:	66 31 c0             	xor    ax,ax
c0018982:	09 c3                	or     ebx,eax
c0018984:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018989:	89 c8                	mov    eax,ecx
c001898b:	ef                   	out    dx,eax
c001898c:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018991:	89 d8                	mov    eax,ebx
c0018993:	eb 41                	jmp    c00189d6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0018995:	83 f9 02             	cmp    ecx,0x2
c0018998:	75 45                	jne    c00189df <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001899a:	83 ec 0c             	sub    esp,0xc
c001899d:	0f b6 d2             	movzx  edx,dl
c00189a0:	89 f1                	mov    ecx,esi
c00189a2:	0f b6 c0             	movzx  eax,al
c00189a5:	0f b6 f1             	movzx  esi,cl
c00189a8:	89 e9                	mov    ecx,ebp
c00189aa:	56                   	push   esi
c00189ab:	0f b6 c9             	movzx  ecx,cl
c00189ae:	51                   	push   ecx
c00189af:	52                   	push   edx
c00189b0:	50                   	push   eax
c00189b1:	57                   	push   edi
c00189b2:	e8 ad fc ff ff       	call   c0018664 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00189b7:	89 c2                	mov    edx,eax
c00189b9:	ed                   	in     eax,dx
c00189ba:	83 c4 20             	add    esp,0x20
c00189bd:	0f b7 db             	movzx  ebx,bx
c00189c0:	f6 c2 02             	test   dl,0x2
c00189c3:	74 0c                	je     c00189d1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00189c5:	0f b7 c8             	movzx  ecx,ax
c00189c8:	89 d8                	mov    eax,ebx
c00189ca:	c1 e0 10             	shl    eax,0x10
c00189cd:	09 c8                	or     eax,ecx
c00189cf:	eb 05                	jmp    c00189d6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00189d1:	66 31 c0             	xor    ax,ax
c00189d4:	09 d8                	or     eax,ebx
c00189d6:	ef                   	out    dx,eax
c00189d7:	83 c4 0c             	add    esp,0xc
c00189da:	5b                   	pop    ebx
c00189db:	5e                   	pop    esi
c00189dc:	5f                   	pop    edi
c00189dd:	5d                   	pop    ebp
c00189de:	c3                   	ret    
c00189df:	c7 44 24 20 8b f3 01 c0 	mov    DWORD PTR [esp+0x20],0xc001f38b
c00189e7:	83 c4 0c             	add    esp,0xc
c00189ea:	5b                   	pop    ebx
c00189eb:	5e                   	pop    esi
c00189ec:	5f                   	pop    edi
c00189ed:	5d                   	pop    ebp
c00189ee:	e9 84 78 ff ff       	jmp    c0010277 <KePanic(char const*)>
c00189f3:	90                   	nop

c00189f4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00189f4:	55                   	push   ebp
c00189f5:	57                   	push   edi
c00189f6:	56                   	push   esi
c00189f7:	53                   	push   ebx
c00189f8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00189fe:	80 3d 4c 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025b4c,0x0
c0018a05:	0f 85 84 00 00 00    	jne    c0018a8f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018a0b:	83 ec 0c             	sub    esp,0xc
c0018a0e:	68 14 01 00 00       	push   0x114
c0018a13:	e8 a1 ed fe ff       	call   c00077b9 <malloc>
c0018a18:	83 c4 0c             	add    esp,0xc
c0018a1b:	89 c3                	mov    ebx,eax
c0018a1d:	ff 35 90 51 02 c0    	push   DWORD PTR ds:0xc0025190
c0018a23:	68 91 f3 01 c0       	push   0xc001f391
c0018a28:	50                   	push   eax
c0018a29:	e8 3c 21 ff ff       	call   c000ab6a <File::File(char const*, Process*)>
c0018a2e:	5a                   	pop    edx
c0018a2f:	59                   	pop    ecx
c0018a30:	6a 01                	push   0x1
c0018a32:	53                   	push   ebx
c0018a33:	e8 f2 21 ff ff       	call   c000ac2a <File::open(FileOpenMode)>
c0018a38:	83 c4 0c             	add    esp,0xc
c0018a3b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018a3f:	50                   	push   eax
c0018a40:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018a44:	50                   	push   eax
c0018a45:	53                   	push   ebx
c0018a46:	e8 8b 24 ff ff       	call   c000aed6 <File::stat(unsigned long long*, bool*)>
c0018a4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a4f:	40                   	inc    eax
c0018a50:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a53:	e8 61 ed fe ff       	call   c00077b9 <malloc>
c0018a58:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018a5c:	a3 48 5b 02 c0       	mov    ds:0xc0025b48,eax
c0018a61:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018a65:	5e                   	pop    esi
c0018a66:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018a68:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018a6c:	51                   	push   ecx
c0018a6d:	50                   	push   eax
c0018a6e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a72:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a76:	53                   	push   ebx
c0018a77:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018a7a:	83 c4 14             	add    esp,0x14
c0018a7d:	53                   	push   ebx
c0018a7e:	e8 05 22 ff ff       	call   c000ac88 <File::close()>
c0018a83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018a87:	83 c4 10             	add    esp,0x10
c0018a8a:	a3 44 5b 02 c0       	mov    ds:0xc0025b44,eax
c0018a8f:	a1 44 5b 02 c0       	mov    eax,ds:0xc0025b44
c0018a94:	8b 15 48 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025b48
c0018a9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0018a9d:	31 ff                	xor    edi,edi
c0018a9f:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0018aa7:	31 f6                	xor    esi,esi
c0018aa9:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0018aae:	31 db                	xor    ebx,ebx
c0018ab0:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0018ab8:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018abd:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c0018ac4:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0018ac8:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0018acf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018ad3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018ad6:	0f 8e 6b 01 00 00    	jle    c0018c47 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018adc:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018adf:	d4 40                	aam    0x40
c0018ae1:	d5 39                	aad    0x39
c0018ae3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ae7:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018aeb:	d4 40                	aam    0x40
c0018aed:	d5 39                	aad    0x39
c0018aef:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018af3:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0018af7:	d4 40                	aam    0x40
c0018af9:	d5 39                	aad    0x39
c0018afb:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018aff:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018b03:	d4 40                	aam    0x40
c0018b05:	d5 39                	aad    0x39
c0018b07:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018b0b:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018b0f:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018b13:	3c 56                	cmp    al,0x56
c0018b15:	74 45                	je     c0018b5c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0018b17:	d4 40                	aam    0x40
c0018b19:	d5 39                	aad    0x39
c0018b1b:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b1e:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018b22:	0f b6 c9             	movzx  ecx,cl
c0018b25:	c1 e1 04             	shl    ecx,0x4
c0018b28:	d4 40                	aam    0x40
c0018b2a:	d5 39                	aad    0x39
c0018b2c:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b2f:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018b33:	0f b6 db             	movzx  ebx,bl
c0018b36:	09 cb                	or     ebx,ecx
c0018b38:	c1 e3 04             	shl    ebx,0x4
c0018b3b:	d4 40                	aam    0x40
c0018b3d:	d5 39                	aad    0x39
c0018b3f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018b42:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0018b46:	0f b6 c9             	movzx  ecx,cl
c0018b49:	09 cb                	or     ebx,ecx
c0018b4b:	c1 e3 04             	shl    ebx,0x4
c0018b4e:	89 d9                	mov    ecx,ebx
c0018b50:	d4 40                	aam    0x40
c0018b52:	d5 39                	aad    0x39
c0018b54:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018b57:	0f b6 db             	movzx  ebx,bl
c0018b5a:	09 cb                	or     ebx,ecx
c0018b5c:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018b60:	80 f9 44             	cmp    cl,0x44
c0018b63:	74 47                	je     c0018bac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018b65:	88 c8                	mov    al,cl
c0018b67:	d4 40                	aam    0x40
c0018b69:	d5 39                	aad    0x39
c0018b6b:	83 e8 30             	sub    eax,0x30
c0018b6e:	0f b6 e8             	movzx  ebp,al
c0018b71:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018b75:	c1 e5 04             	shl    ebp,0x4
c0018b78:	d4 40                	aam    0x40
c0018b7a:	d5 39                	aad    0x39
c0018b7c:	83 e8 30             	sub    eax,0x30
c0018b7f:	0f b6 f0             	movzx  esi,al
c0018b82:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c0018b86:	09 ee                	or     esi,ebp
c0018b88:	c1 e6 04             	shl    esi,0x4
c0018b8b:	d4 40                	aam    0x40
c0018b8d:	d5 39                	aad    0x39
c0018b8f:	83 e8 30             	sub    eax,0x30
c0018b92:	0f b6 e8             	movzx  ebp,al
c0018b95:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0018b99:	09 ee                	or     esi,ebp
c0018b9b:	c1 e6 04             	shl    esi,0x4
c0018b9e:	89 f5                	mov    ebp,esi
c0018ba0:	d4 40                	aam    0x40
c0018ba2:	d5 39                	aad    0x39
c0018ba4:	83 e8 30             	sub    eax,0x30
c0018ba7:	0f b6 f0             	movzx  esi,al
c0018baa:	09 ee                	or     esi,ebp
c0018bac:	83 c7 10             	add    edi,0x10
c0018baf:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c0018bb3:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018bb6:	3c 0a                	cmp    al,0xa
c0018bb8:	74 09                	je     c0018bc3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c0018bba:	45                   	inc    ebp
c0018bbb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0018bbe:	75 16                	jne    c0018bd6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c0018bc0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0018bc3:	3c 0a                	cmp    al,0xa
c0018bc5:	0f 94 c0             	sete   al
c0018bc8:	0f b6 c0             	movzx  eax,al
c0018bcb:	01 c7                	add    edi,eax
c0018bcd:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c0018bd2:	75 0c                	jne    c0018be0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0018bd4:	eb 15                	jmp    c0018beb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0018bd6:	47                   	inc    edi
c0018bd7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0018bda:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018bde:	eb d3                	jmp    c0018bb3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018be0:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018be5:	0f 85 e8 fe ff ff    	jne    c0018ad3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018beb:	80 f9 44             	cmp    cl,0x44
c0018bee:	74 0b                	je     c0018bfb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018bf0:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018bf5:	0f 85 d8 fe ff ff    	jne    c0018ad3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018bfb:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018bff:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c03:	c1 e1 04             	shl    ecx,0x4
c0018c06:	83 e8 30             	sub    eax,0x30
c0018c09:	09 c8                	or     eax,ecx
c0018c0b:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018c0f:	0f 85 be fe ff ff    	jne    c0018ad3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c15:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018c19:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c1d:	c1 e1 04             	shl    ecx,0x4
c0018c20:	83 e8 30             	sub    eax,0x30
c0018c23:	09 c8                	or     eax,ecx
c0018c25:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018c29:	0f 85 a4 fe ff ff    	jne    c0018ad3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018c2f:	50                   	push   eax
c0018c30:	50                   	push   eax
c0018c31:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018c35:	50                   	push   eax
c0018c36:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018c3d:	e8 be 79 fe ff       	call   c0000600 <strcpy>
c0018c42:	83 c4 10             	add    esp,0x10
c0018c45:	eb 15                	jmp    c0018c5c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0018c47:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c4e:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018c59:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018c5c:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018c63:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018c69:	5b                   	pop    ebx
c0018c6a:	5e                   	pop    esi
c0018c6b:	5f                   	pop    edi
c0018c6c:	5d                   	pop    ebp
c0018c6d:	c3                   	ret    

c0018c6e <PCI::checkBus(unsigned char)>:
c0018c6e:	56                   	push   esi
c0018c6f:	53                   	push   ebx
c0018c70:	31 f6                	xor    esi,esi
c0018c72:	51                   	push   ecx
c0018c73:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c0018c77:	0f b6 c3             	movzx  eax,bl
c0018c7a:	52                   	push   edx
c0018c7b:	56                   	push   esi
c0018c7c:	46                   	inc    esi
c0018c7d:	50                   	push   eax
c0018c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018c82:	e8 f3 02 00 00       	call   c0018f7a <PCI::checkDevice(unsigned char, unsigned char)>
c0018c87:	83 c4 10             	add    esp,0x10
c0018c8a:	83 fe 20             	cmp    esi,0x20
c0018c8d:	75 e8                	jne    c0018c77 <PCI::checkBus(unsigned char)+0x9>
c0018c8f:	58                   	pop    eax
c0018c90:	5b                   	pop    ebx
c0018c91:	5e                   	pop    esi
c0018c92:	c3                   	ret    
c0018c93:	90                   	nop

c0018c94 <PCI::foundDevice(PCIDeviceInfo)>:
c0018c94:	55                   	push   ebp
c0018c95:	57                   	push   edi
c0018c96:	56                   	push   esi
c0018c97:	53                   	push   ebx
c0018c98:	83 ec 1c             	sub    esp,0x1c
c0018c9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018c9f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0018ca5:	0f 84 52 01 00 00    	je     c0018dfd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018cab:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0018caf:	66 81 f9 06 04       	cmp    cx,0x406
c0018cb4:	75 2c                	jne    c0018ce2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0018cb6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0018cbb:	50                   	push   eax
c0018cbc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0018cc1:	50                   	push   eax
c0018cc2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0018cc7:	50                   	push   eax
c0018cc8:	56                   	push   esi
c0018cc9:	e8 b2 fb ff ff       	call   c0018880 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0018cce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0018cd2:	0f b6 c0             	movzx  eax,al
c0018cd5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018cd9:	83 c4 2c             	add    esp,0x2c
c0018cdc:	5b                   	pop    ebx
c0018cdd:	5e                   	pop    esi
c0018cde:	5f                   	pop    edi
c0018cdf:	5d                   	pop    ebp
c0018ce0:	eb 8c                	jmp    c0018c6e <PCI::checkBus(unsigned char)>
c0018ce2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018ce6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018cec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018cf0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018cf4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018cf8:	88 d3                	mov    bl,dl
c0018cfa:	85 c0                	test   eax,eax
c0018cfc:	74 33                	je     c0018d31 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018cfe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018d01:	85 d2                	test   edx,edx
c0018d03:	74 28                	je     c0018d2d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d05:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018d0b:	31 ef                	xor    edi,ebp
c0018d0d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018d13:	75 18                	jne    c0018d2d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d15:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018d19:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018d1f:	75 0c                	jne    c0018d2d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018d21:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0018d27:	0f 84 d0 00 00 00    	je     c0018dfd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0018d2f:	eb c9                	jmp    c0018cfa <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018d31:	66 81 f9 01 06       	cmp    cx,0x601
c0018d36:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018d3a:	75 19                	jne    c0018d55 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018d3c:	83 ec 0c             	sub    esp,0xc
c0018d3f:	68 64 01 00 00       	push   0x164
c0018d44:	e8 70 ea fe ff       	call   c00077b9 <malloc>
c0018d49:	89 c5                	mov    ebp,eax
c0018d4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d4e:	e8 47 0e 00 00       	call   c0019b9a <SATABus::SATABus()>
c0018d53:	eb 1e                	jmp    c0018d73 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018d55:	66 81 f9 01 01       	cmp    cx,0x101
c0018d5a:	75 60                	jne    c0018dbc <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018d5c:	83 ec 0c             	sub    esp,0xc
c0018d5f:	68 70 02 00 00       	push   0x270
c0018d64:	e8 50 ea fe ff       	call   c00077b9 <malloc>
c0018d69:	89 c5                	mov    ebp,eax
c0018d6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0018d6e:	e8 cb 02 00 00       	call   c001903e <IDE::IDE()>
c0018d73:	58                   	pop    eax
c0018d74:	5a                   	pop    edx
c0018d75:	55                   	push   ebp
c0018d76:	56                   	push   esi
c0018d77:	e8 b8 2c ff ff       	call   c000ba34 <Device::addChild(Device*)>
c0018d7c:	83 ec 1c             	sub    esp,0x1c
c0018d7f:	b9 09 00 00 00       	mov    ecx,0x9
c0018d84:	fc                   	cld    
c0018d85:	89 e7                	mov    edi,esp
c0018d87:	89 de                	mov    esi,ebx
c0018d89:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018d8b:	55                   	push   ebp
c0018d8c:	e8 e9 2b ff ff       	call   c000b97a <Device::preOpenPCI(PCIDeviceInfo)>
c0018d91:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018d94:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0018d98:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0018da0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0018da8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0018db0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0018db3:	83 c4 4c             	add    esp,0x4c
c0018db6:	5b                   	pop    ebx
c0018db7:	5e                   	pop    esi
c0018db8:	5f                   	pop    edi
c0018db9:	5d                   	pop    ebp
c0018dba:	ff e0                	jmp    eax
c0018dbc:	83 ec 0c             	sub    esp,0xc
c0018dbf:	68 58 01 00 00       	push   0x158
c0018dc4:	e8 f0 e9 fe ff       	call   c00077b9 <malloc>
c0018dc9:	89 c5                	mov    ebp,eax
c0018dcb:	58                   	pop    eax
c0018dcc:	5a                   	pop    edx
c0018dcd:	68 aa f3 01 c0       	push   0xc001f3aa
c0018dd2:	55                   	push   ebp
c0018dd3:	e8 fa 2e ff ff       	call   c000bcd2 <DriverlessDevice::DriverlessDevice(char const*)>
c0018dd8:	59                   	pop    ecx
c0018dd9:	5f                   	pop    edi
c0018dda:	55                   	push   ebp
c0018ddb:	56                   	push   esi
c0018ddc:	e8 53 2c ff ff       	call   c000ba34 <Device::addChild(Device*)>
c0018de1:	b9 09 00 00 00       	mov    ecx,0x9
c0018de6:	fc                   	cld    
c0018de7:	89 df                	mov    edi,ebx
c0018de9:	89 de                	mov    esi,ebx
c0018deb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018ded:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018df1:	83 c4 2c             	add    esp,0x2c
c0018df4:	5b                   	pop    ebx
c0018df5:	5e                   	pop    esi
c0018df6:	5f                   	pop    edi
c0018df7:	5d                   	pop    ebp
c0018df8:	e9 7d 2b ff ff       	jmp    c000b97a <Device::preOpenPCI(PCIDeviceInfo)>
c0018dfd:	83 c4 1c             	add    esp,0x1c
c0018e00:	5b                   	pop    ebx
c0018e01:	5e                   	pop    esi
c0018e02:	5f                   	pop    edi
c0018e03:	5d                   	pop    ebp
c0018e04:	c3                   	ret    
c0018e05:	90                   	nop

c0018e06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0018e06:	55                   	push   ebp
c0018e07:	57                   	push   edi
c0018e08:	56                   	push   esi
c0018e09:	53                   	push   ebx
c0018e0a:	83 ec 68             	sub    esp,0x68
c0018e0d:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018e11:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018e18:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018e1c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018e23:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018e28:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018e2c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018e33:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018e38:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018e3c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018e41:	6a 0c                	push   0xc
c0018e43:	57                   	push   edi
c0018e44:	53                   	push   ebx
c0018e45:	56                   	push   esi
c0018e46:	55                   	push   ebp
c0018e47:	e8 86 f8 ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e4c:	83 c4 20             	add    esp,0x20
c0018e4f:	57                   	push   edi
c0018e50:	53                   	push   ebx
c0018e51:	56                   	push   esi
c0018e52:	55                   	push   ebp
c0018e53:	e8 6e f9 ff ff       	call   c00187c6 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018e58:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018e5d:	57                   	push   edi
c0018e5e:	53                   	push   ebx
c0018e5f:	56                   	push   esi
c0018e60:	55                   	push   ebp
c0018e61:	e8 f6 f9 ff ff       	call   c001885c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0018e66:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018e6a:	83 c4 14             	add    esp,0x14
c0018e6d:	6a 3c                	push   0x3c
c0018e6f:	57                   	push   edi
c0018e70:	53                   	push   ebx
c0018e71:	56                   	push   esi
c0018e72:	55                   	push   ebp
c0018e73:	e8 5a f8 ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018e78:	0f b6 c4             	movzx  eax,ah
c0018e7b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018e7f:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0018e83:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0018e87:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c0018e8c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c0018e92:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c0018e98:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0018e9c:	83 c4 20             	add    esp,0x20
c0018e9f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018ea4:	74 30                	je     c0018ed6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018ea6:	31 c0                	xor    eax,eax
c0018ea8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0018eac:	7e 28                	jle    c0018ed6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c0018eae:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c0018eb6:	39 cb                	cmp    ebx,ecx
c0018eb8:	75 19                	jne    c0018ed3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018eba:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c0018ec2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0018ec6:	75 0b                	jne    c0018ed3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c0018ec8:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c0018ecf:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c0018ed3:	40                   	inc    eax
c0018ed4:	eb d2                	jmp    c0018ea8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c0018ed6:	31 d2                	xor    edx,edx
c0018ed8:	83 ec 0c             	sub    esp,0xc
c0018edb:	57                   	push   edi
c0018edc:	53                   	push   ebx
c0018edd:	56                   	push   esi
c0018ede:	52                   	push   edx
c0018edf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018ee3:	55                   	push   ebp
c0018ee4:	e8 bf f9 ff ff       	call   c00188a8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018ee9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018eed:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018ef1:	42                   	inc    edx
c0018ef2:	83 c4 20             	add    esp,0x20
c0018ef5:	83 fa 06             	cmp    edx,0x6
c0018ef8:	75 de                	jne    c0018ed8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018efa:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018eff:	83 ec 0c             	sub    esp,0xc
c0018f02:	86 e0                	xchg   al,ah
c0018f04:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018f09:	6a 02                	push   0x2
c0018f0b:	57                   	push   edi
c0018f0c:	53                   	push   ebx
c0018f0d:	56                   	push   esi
c0018f0e:	55                   	push   ebp
c0018f0f:	e8 be f7 ff ff       	call   c00186d2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018f14:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018f19:	83 c4 20             	add    esp,0x20
c0018f1c:	57                   	push   edi
c0018f1d:	53                   	push   ebx
c0018f1e:	56                   	push   esi
c0018f1f:	55                   	push   ebp
c0018f20:	e8 eb f8 ff ff       	call   c0018810 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018f25:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018f29:	57                   	push   edi
c0018f2a:	53                   	push   ebx
c0018f2b:	56                   	push   esi
c0018f2c:	55                   	push   ebp
c0018f2d:	e8 48 f8 ff ff       	call   c001877a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f32:	b9 09 00 00 00       	mov    ecx,0x9
c0018f37:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018f3c:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018f40:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018f44:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018f48:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018f4c:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018f50:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018f54:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018f58:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018f5c:	83 ec 0c             	sub    esp,0xc
c0018f5f:	fc                   	cld    
c0018f60:	89 e7                	mov    edi,esp
c0018f62:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018f66:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018f68:	55                   	push   ebp
c0018f69:	e8 26 fd ff ff       	call   c0018c94 <PCI::foundDevice(PCIDeviceInfo)>
c0018f6e:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018f74:	5b                   	pop    ebx
c0018f75:	5e                   	pop    esi
c0018f76:	5f                   	pop    edi
c0018f77:	5d                   	pop    ebp
c0018f78:	c3                   	ret    
c0018f79:	90                   	nop

c0018f7a <PCI::checkDevice(unsigned char, unsigned char)>:
c0018f7a:	55                   	push   ebp
c0018f7b:	57                   	push   edi
c0018f7c:	56                   	push   esi
c0018f7d:	53                   	push   ebx
c0018f7e:	83 ec 0c             	sub    esp,0xc
c0018f81:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f85:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018f8a:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018f8f:	6a 00                	push   0x0
c0018f91:	56                   	push   esi
c0018f92:	57                   	push   edi
c0018f93:	55                   	push   ebp
c0018f94:	e8 e1 f7 ff ff       	call   c001877a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018f99:	6a 00                	push   0x0
c0018f9b:	56                   	push   esi
c0018f9c:	57                   	push   edi
c0018f9d:	55                   	push   ebp
c0018f9e:	e8 63 fe ff ff       	call   c0018e06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fa3:	83 c4 20             	add    esp,0x20
c0018fa6:	6a 00                	push   0x0
c0018fa8:	56                   	push   esi
c0018fa9:	57                   	push   edi
c0018faa:	55                   	push   ebp
c0018fab:	e8 ee f7 ff ff       	call   c001879e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018fb0:	83 c4 10             	add    esp,0x10
c0018fb3:	84 c0                	test   al,al
c0018fb5:	79 27                	jns    c0018fde <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018fb7:	bb 01 00 00 00       	mov    ebx,0x1
c0018fbc:	53                   	push   ebx
c0018fbd:	56                   	push   esi
c0018fbe:	57                   	push   edi
c0018fbf:	55                   	push   ebp
c0018fc0:	e8 b5 f7 ff ff       	call   c001877a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018fc5:	83 c4 10             	add    esp,0x10
c0018fc8:	66 40                	inc    ax
c0018fca:	74 0c                	je     c0018fd8 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018fcc:	53                   	push   ebx
c0018fcd:	56                   	push   esi
c0018fce:	57                   	push   edi
c0018fcf:	55                   	push   ebp
c0018fd0:	e8 31 fe ff ff       	call   c0018e06 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018fd5:	83 c4 10             	add    esp,0x10
c0018fd8:	43                   	inc    ebx
c0018fd9:	83 fb 08             	cmp    ebx,0x8
c0018fdc:	75 de                	jne    c0018fbc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018fde:	83 c4 0c             	add    esp,0xc
c0018fe1:	5b                   	pop    ebx
c0018fe2:	5e                   	pop    esi
c0018fe3:	5f                   	pop    edi
c0018fe4:	5d                   	pop    ebp
c0018fe5:	c3                   	ret    

c0018fe6 <PCI::detect()>:
c0018fe6:	56                   	push   esi
c0018fe7:	53                   	push   ebx
c0018fe8:	53                   	push   ebx
c0018fe9:	31 db                	xor    ebx,ebx
c0018feb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018fef:	6a 00                	push   0x0
c0018ff1:	6a 00                	push   0x0
c0018ff3:	6a 00                	push   0x0
c0018ff5:	56                   	push   esi
c0018ff6:	e8 a3 f7 ff ff       	call   c001879e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ffb:	83 c4 10             	add    esp,0x10
c0018ffe:	a8 80                	test   al,0x80
c0019000:	75 21                	jne    c0019023 <PCI::detect()+0x3d>
c0019002:	51                   	push   ecx
c0019003:	51                   	push   ecx
c0019004:	6a 00                	push   0x0
c0019006:	56                   	push   esi
c0019007:	e8 62 fc ff ff       	call   c0018c6e <PCI::checkBus(unsigned char)>
c001900c:	83 c4 10             	add    esp,0x10
c001900f:	eb 24                	jmp    c0019035 <PCI::detect()+0x4f>
c0019011:	52                   	push   edx
c0019012:	52                   	push   edx
c0019013:	53                   	push   ebx
c0019014:	43                   	inc    ebx
c0019015:	56                   	push   esi
c0019016:	e8 53 fc ff ff       	call   c0018c6e <PCI::checkBus(unsigned char)>
c001901b:	83 c4 10             	add    esp,0x10
c001901e:	83 fb 08             	cmp    ebx,0x8
c0019021:	74 12                	je     c0019035 <PCI::detect()+0x4f>
c0019023:	53                   	push   ebx
c0019024:	6a 00                	push   0x0
c0019026:	6a 00                	push   0x0
c0019028:	56                   	push   esi
c0019029:	e8 4c f7 ff ff       	call   c001877a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001902e:	83 c4 10             	add    esp,0x10
c0019031:	66 40                	inc    ax
c0019033:	74 dc                	je     c0019011 <PCI::detect()+0x2b>
c0019035:	58                   	pop    eax
c0019036:	5b                   	pop    ebx
c0019037:	5e                   	pop    esi
c0019038:	c3                   	ret    
c0019039:	90                   	nop

c001903a <IDE::close(int, int, void*)>:
c001903a:	83 c8 ff             	or     eax,0xffffffff
c001903d:	c3                   	ret    

c001903e <IDE::IDE()>:
c001903e:	83 ec 0c             	sub    esp,0xc
c0019041:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019045:	83 ec 08             	sub    esp,0x8
c0019048:	68 f0 f3 01 c0       	push   0xc001f3f0
c001904d:	50                   	push   eax
c001904e:	e8 25 2d ff ff       	call   c000bd78 <HardDiskController::HardDiskController(char const*)>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	ba 80 f4 01 c0       	mov    edx,0xc001f480
c001905b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001905f:	89 10                	mov    DWORD PTR [eax],edx
c0019061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019065:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001906c:	90                   	nop
c001906d:	83 c4 0c             	add    esp,0xc
c0019070:	c3                   	ret    
c0019071:	90                   	nop

c0019072 <IDE::prepareInterrupt(unsigned char)>:
c0019072:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019077:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001907b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0019083:	c3                   	ret    

c0019084 <selectDrive(unsigned char, unsigned char)>:
c0019084:	c3                   	ret    
c0019085:	90                   	nop

c0019086 <IDE::getBase(unsigned char)>:
c0019086:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001908b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001908f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0019097:	c3                   	ret    

c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0019098:	55                   	push   ebp
c0019099:	57                   	push   edi
c001909a:	56                   	push   esi
c001909b:	53                   	push   ebx
c001909c:	83 ec 1c             	sub    esp,0x1c
c001909f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00190a3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00190a7:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00190aa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00190ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00190b2:	80 f9 03             	cmp    cl,0x3
c00190b5:	77 51                	ja     c0019108 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00190b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00190bb:	0f b6 f2             	movzx  esi,dl
c00190be:	0f b6 db             	movzx  ebx,bl
c00190c1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00190c4:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00190c8:	83 ca 80             	or     edx,0xffffff80
c00190cb:	0f b6 d2             	movzx  edx,dl
c00190ce:	52                   	push   edx
c00190cf:	6a 0c                	push   0xc
c00190d1:	56                   	push   esi
c00190d2:	57                   	push   edi
c00190d3:	e8 c0 ff ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00190d8:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00190dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00190e1:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00190e5:	ee                   	out    dx,al
c00190e6:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00190eb:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00190ef:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00190f3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190f7:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00190ff:	83 c4 2c             	add    esp,0x2c
c0019102:	5b                   	pop    ebx
c0019103:	5e                   	pop    esi
c0019104:	5f                   	pop    edi
c0019105:	5d                   	pop    ebp
c0019106:	eb 90                	jmp    c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019108:	80 fb 07             	cmp    bl,0x7
c001910b:	77 12                	ja     c001911f <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001910d:	0f b6 d2             	movzx  edx,dl
c0019110:	0f b6 db             	movzx  ebx,bl
c0019113:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001911b:	89 da                	mov    edx,ebx
c001911d:	eb 2f                	jmp    c001914e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001911f:	80 fb 0d             	cmp    bl,0xd
c0019122:	77 13                	ja     c0019137 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0019124:	0f b6 d2             	movzx  edx,dl
c0019127:	0f b6 db             	movzx  ebx,bl
c001912a:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0019131:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0019135:	eb 17                	jmp    c001914e <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0019137:	80 fb 15             	cmp    bl,0x15
c001913a:	77 13                	ja     c001914f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001913c:	0f b6 d2             	movzx  edx,dl
c001913f:	0f b6 db             	movzx  ebx,bl
c0019142:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001914a:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001914e:	ee                   	out    dx,al
c001914f:	83 c4 1c             	add    esp,0x1c
c0019152:	5b                   	pop    ebx
c0019153:	5e                   	pop    esi
c0019154:	5f                   	pop    edi
c0019155:	5d                   	pop    ebp
c0019156:	c3                   	ret    
c0019157:	90                   	nop

c0019158 <IDE::read(unsigned char, unsigned char)>:
c0019158:	55                   	push   ebp
c0019159:	57                   	push   edi
c001915a:	56                   	push   esi
c001915b:	53                   	push   ebx
c001915c:	83 ec 1c             	sub    esp,0x1c
c001915f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0019163:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019167:	8d 43 f8             	lea    eax,[ebx-0x8]
c001916a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001916e:	3c 03                	cmp    al,0x3
c0019170:	77 43                	ja     c00191b5 <IDE::read(unsigned char, unsigned char)+0x5d>
c0019172:	0f b6 f2             	movzx  esi,dl
c0019175:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0019178:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001917c:	83 c8 80             	or     eax,0xffffff80
c001917f:	0f b6 c0             	movzx  eax,al
c0019182:	50                   	push   eax
c0019183:	6a 0c                	push   0xc
c0019185:	56                   	push   esi
c0019186:	57                   	push   edi
c0019187:	e8 0c ff ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001918c:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0019191:	0f b6 c3             	movzx  eax,bl
c0019194:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0019198:	ec                   	in     al,dx
c0019199:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001919d:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00191a2:	52                   	push   edx
c00191a3:	6a 0c                	push   0xc
c00191a5:	56                   	push   esi
c00191a6:	57                   	push   edi
c00191a7:	e8 ec fe ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00191ac:	83 c4 20             	add    esp,0x20
c00191af:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00191b3:	eb 49                	jmp    c00191fe <IDE::read(unsigned char, unsigned char)+0xa6>
c00191b5:	80 fb 07             	cmp    bl,0x7
c00191b8:	77 12                	ja     c00191cc <IDE::read(unsigned char, unsigned char)+0x74>
c00191ba:	0f b6 d2             	movzx  edx,dl
c00191bd:	0f b6 c3             	movzx  eax,bl
c00191c0:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00191c8:	89 c2                	mov    edx,eax
c00191ca:	eb 31                	jmp    c00191fd <IDE::read(unsigned char, unsigned char)+0xa5>
c00191cc:	80 fb 0d             	cmp    bl,0xd
c00191cf:	77 13                	ja     c00191e4 <IDE::read(unsigned char, unsigned char)+0x8c>
c00191d1:	0f b6 d2             	movzx  edx,dl
c00191d4:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00191db:	0f b6 d3             	movzx  edx,bl
c00191de:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00191e2:	eb 19                	jmp    c00191fd <IDE::read(unsigned char, unsigned char)+0xa5>
c00191e4:	31 c0                	xor    eax,eax
c00191e6:	80 fb 15             	cmp    bl,0x15
c00191e9:	77 13                	ja     c00191fe <IDE::read(unsigned char, unsigned char)+0xa6>
c00191eb:	0f b6 d2             	movzx  edx,dl
c00191ee:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00191f6:	0f b6 d3             	movzx  edx,bl
c00191f9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00191fd:	ec                   	in     al,dx
c00191fe:	83 c4 1c             	add    esp,0x1c
c0019201:	5b                   	pop    ebx
c0019202:	5e                   	pop    esi
c0019203:	5f                   	pop    edi
c0019204:	5d                   	pop    ebp
c0019205:	c3                   	ret    

c0019206 <IDE::waitInterrupt(unsigned char)>:
c0019206:	57                   	push   edi
c0019207:	56                   	push   esi
c0019208:	31 f6                	xor    esi,esi
c001920a:	53                   	push   ebx
c001920b:	83 ec 10             	sub    esp,0x10
c001920e:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0019212:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019216:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001921a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001921f:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0019226:	84 db                	test   bl,bl
c0019228:	75 33                	jne    c001925d <IDE::waitInterrupt(unsigned char)+0x57>
c001922a:	52                   	push   edx
c001922b:	6a 0c                	push   0xc
c001922d:	50                   	push   eax
c001922e:	57                   	push   edi
c001922f:	e8 24 ff ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019234:	83 c4 10             	add    esp,0x10
c0019237:	a8 01                	test   al,0x1
c0019239:	75 2a                	jne    c0019265 <IDE::waitInterrupt(unsigned char)+0x5f>
c001923b:	f7 c6 04 00 00 00    	test   esi,0x4
c0019241:	75 12                	jne    c0019255 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019243:	83 fe 32             	cmp    esi,0x32
c0019246:	7e 0d                	jle    c0019255 <IDE::waitInterrupt(unsigned char)+0x4f>
c0019248:	83 ec 0c             	sub    esp,0xc
c001924b:	6a 64                	push   0x64
c001924d:	e8 1a a9 ff ff       	call   c0013b6c <milliTenthSleep(unsigned int)>
c0019252:	83 c4 10             	add    esp,0x10
c0019255:	83 fe 3c             	cmp    esi,0x3c
c0019258:	74 0b                	je     c0019265 <IDE::waitInterrupt(unsigned char)+0x5f>
c001925a:	46                   	inc    esi
c001925b:	eb bd                	jmp    c001921a <IDE::waitInterrupt(unsigned char)+0x14>
c001925d:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0019265:	83 c4 10             	add    esp,0x10
c0019268:	88 d8                	mov    al,bl
c001926a:	5b                   	pop    ebx
c001926b:	5e                   	pop    esi
c001926c:	5f                   	pop    edi
c001926d:	c3                   	ret    

c001926e <ideChannel0IRQHandler(regs*, void*)>:
c001926e:	83 ec 10             	sub    esp,0x10
c0019271:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019275:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001927c:	6a 07                	push   0x7
c001927e:	6a 00                	push   0x0
c0019280:	50                   	push   eax
c0019281:	e8 d2 fe ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019286:	83 c4 1c             	add    esp,0x1c
c0019289:	c3                   	ret    

c001928a <ideChannel1IRQHandler(regs*, void*)>:
c001928a:	83 ec 10             	sub    esp,0x10
c001928d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019291:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0019298:	6a 07                	push   0x7
c001929a:	6a 01                	push   0x1
c001929c:	50                   	push   eax
c001929d:	e8 b6 fe ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c00192a2:	83 c4 1c             	add    esp,0x1c
c00192a5:	c3                   	ret    

c00192a6 <IDE::enableIRQs(unsigned char, bool)>:
c00192a6:	57                   	push   edi
c00192a7:	56                   	push   esi
c00192a8:	be 04 00 00 00       	mov    esi,0x4
c00192ad:	53                   	push   ebx
c00192ae:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00192b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00192b7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00192bc:	0f 94 c0             	sete   al
c00192bf:	01 c0                	add    eax,eax
c00192c1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00192c8:	0f b6 c0             	movzx  eax,al
c00192cb:	50                   	push   eax
c00192cc:	6a 0c                	push   0xc
c00192ce:	57                   	push   edi
c00192cf:	53                   	push   ebx
c00192d0:	e8 c3 fd ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00192d5:	83 c4 10             	add    esp,0x10
c00192d8:	50                   	push   eax
c00192d9:	6a 0c                	push   0xc
c00192db:	57                   	push   edi
c00192dc:	53                   	push   ebx
c00192dd:	e8 76 fe ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c00192e2:	83 c4 10             	add    esp,0x10
c00192e5:	4e                   	dec    esi
c00192e6:	75 f0                	jne    c00192d8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00192e8:	5b                   	pop    ebx
c00192e9:	5e                   	pop    esi
c00192ea:	5f                   	pop    edi
c00192eb:	c3                   	ret    

c00192ec <IDE::open(int, int, void*)>:
c00192ec:	55                   	push   ebp
c00192ed:	57                   	push   edi
c00192ee:	56                   	push   esi
c00192ef:	53                   	push   ebx
c00192f0:	83 ec 1c             	sub    esp,0x1c
c00192f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00192f7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0019300:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0019309:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0019310:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0019317:	0f 85 b0 02 00 00    	jne    c00195cd <IDE::open(int, int, void*)+0x2e1>
c001931d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0019323:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0019327:	83 e0 7f             	and    eax,0x7f
c001932a:	3c 05                	cmp    al,0x5
c001932c:	74 04                	je     c0019332 <IDE::open(int, int, void*)+0x46>
c001932e:	3c 0f                	cmp    al,0xf
c0019330:	75 32                	jne    c0019364 <IDE::open(int, int, void*)+0x78>
c0019332:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0019338:	83 e0 fc             	and    eax,0xfffffffc
c001933b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019342:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0019348:	83 e0 fc             	and    eax,0xfffffffc
c001934b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019352:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0019358:	83 e0 fc             	and    eax,0xfffffffc
c001935b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019362:	eb 14                	jmp    c0019378 <IDE::open(int, int, void*)+0x8c>
c0019364:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001936e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0019378:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001937f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0019386:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001938a:	89 c6                	mov    esi,eax
c001938c:	bf f8 0c 00 00       	mov    edi,0xcf8
c0019391:	c1 e6 10             	shl    esi,0x10
c0019394:	89 e8                	mov    eax,ebp
c0019396:	89 fa                	mov    edx,edi
c0019398:	c1 e0 0b             	shl    eax,0xb
c001939b:	09 f0                	or     eax,esi
c001939d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00193a4:	c1 e6 08             	shl    esi,0x8
c00193a7:	09 c6                	or     esi,eax
c00193a9:	89 f0                	mov    eax,esi
c00193ab:	0d 08 00 00 80       	or     eax,0x80000008
c00193b0:	ef                   	out    dx,eax
c00193b1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00193b6:	89 ca                	mov    edx,ecx
c00193b8:	ed                   	in     eax,dx
c00193b9:	c1 e8 10             	shr    eax,0x10
c00193bc:	3d ff ff 00 00       	cmp    eax,0xffff
c00193c1:	0f 84 f5 00 00 00    	je     c00194bc <IDE::open(int, int, void*)+0x1d0>
c00193c7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00193cd:	89 fa                	mov    edx,edi
c00193cf:	89 f0                	mov    eax,esi
c00193d1:	ef                   	out    dx,eax
c00193d2:	b0 fe                	mov    al,0xfe
c00193d4:	89 ca                	mov    edx,ecx
c00193d6:	ee                   	out    dx,al
c00193d7:	89 f0                	mov    eax,esi
c00193d9:	89 fa                	mov    edx,edi
c00193db:	ef                   	out    dx,eax
c00193dc:	89 ca                	mov    edx,ecx
c00193de:	ed                   	in     eax,dx
c00193df:	3c fe                	cmp    al,0xfe
c00193e1:	0f 85 a9 00 00 00    	jne    c0019490 <IDE::open(int, int, void*)+0x1a4>
c00193e7:	8b 15 b8 1e 02 c0    	mov    edx,DWORD PTR ds:0xc0021eb8
c00193ed:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c00193f4:	74 33                	je     c0019429 <IDE::open(int, int, void*)+0x13d>
c00193f6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00193fc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0019400:	40                   	inc    eax
c0019401:	83 ec 0c             	sub    esp,0xc
c0019404:	0f b6 c0             	movzx  eax,al
c0019407:	50                   	push   eax
c0019408:	55                   	push   ebp
c0019409:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001940d:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0019413:	51                   	push   ecx
c0019414:	e8 77 53 ff ff       	call   c000e790 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0019419:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001941e:	83 c4 1c             	add    esp,0x1c
c0019421:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019427:	eb 0a                	jmp    c0019433 <IDE::open(int, int, void*)+0x147>
c0019429:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0019433:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001943a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0019441:	c1 e1 10             	shl    ecx,0x10
c0019444:	c1 e0 08             	shl    eax,0x8
c0019447:	bf f8 0c 00 00       	mov    edi,0xcf8
c001944c:	09 c1                	or     ecx,eax
c001944e:	89 fa                	mov    edx,edi
c0019450:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0019457:	c1 e0 0b             	shl    eax,0xb
c001945a:	09 c1                	or     ecx,eax
c001945c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0019462:	89 c8                	mov    eax,ecx
c0019464:	ef                   	out    dx,eax
c0019465:	be fc 0c 00 00       	mov    esi,0xcfc
c001946a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0019470:	89 f2                	mov    edx,esi
c0019472:	ee                   	out    dx,al
c0019473:	89 c8                	mov    eax,ecx
c0019475:	89 fa                	mov    edx,edi
c0019477:	ef                   	out    dx,eax
c0019478:	89 f2                	mov    edx,esi
c001947a:	ed                   	in     eax,dx
c001947b:	0f b6 c0             	movzx  eax,al
c001947e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0019484:	74 46                	je     c00194cc <IDE::open(int, int, void*)+0x1e0>
c0019486:	83 ec 0c             	sub    esp,0xc
c0019489:	68 08 f4 01 c0       	push   0xc001f408
c001948e:	eb 34                	jmp    c00194c4 <IDE::open(int, int, void*)+0x1d8>
c0019490:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0019499:	75 17                	jne    c00194b2 <IDE::open(int, int, void*)+0x1c6>
c001949b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00194a0:	74 07                	je     c00194a9 <IDE::open(int, int, void*)+0x1bd>
c00194a2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00194a7:	75 09                	jne    c00194b2 <IDE::open(int, int, void*)+0x1c6>
c00194a9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00194b0:	eb 1a                	jmp    c00194cc <IDE::open(int, int, void*)+0x1e0>
c00194b2:	83 ec 0c             	sub    esp,0xc
c00194b5:	68 10 f4 01 c0       	push   0xc001f410
c00194ba:	eb 08                	jmp    c00194c4 <IDE::open(int, int, void*)+0x1d8>
c00194bc:	83 ec 0c             	sub    esp,0xc
c00194bf:	68 41 f4 01 c0       	push   0xc001f441
c00194c4:	e8 ae 6d ff ff       	call   c0010277 <KePanic(char const*)>
c00194c9:	83 c4 10             	add    esp,0x10
c00194cc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00194d3:	79 1a                	jns    c00194ef <IDE::open(int, int, void*)+0x203>
c00194d5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00194db:	83 e0 fc             	and    eax,0xfffffffc
c00194de:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00194e5:	83 c0 08             	add    eax,0x8
c00194e8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00194ef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194f5:	89 c2                	mov    edx,eax
c00194f7:	83 e2 0f             	and    edx,0xf
c00194fa:	66 83 fa 08          	cmp    dx,0x8
c00194fe:	75 0a                	jne    c001950a <IDE::open(int, int, void*)+0x21e>
c0019500:	83 e8 02             	sub    eax,0x2
c0019503:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001950a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019510:	89 c2                	mov    edx,eax
c0019512:	83 e2 0f             	and    edx,0xf
c0019515:	66 83 fa 08          	cmp    dx,0x8
c0019519:	75 0a                	jne    c0019525 <IDE::open(int, int, void*)+0x239>
c001951b:	83 e8 02             	sub    eax,0x2
c001951e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019525:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001952c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0019533:	89 d0                	mov    eax,edx
c0019535:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019538:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001953c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019540:	8d 4a 01             	lea    ecx,[edx+0x1]
c0019543:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019548:	0f b6 c9             	movzx  ecx,cl
c001954b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0019552:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0019555:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019559:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001955d:	8d 50 02             	lea    edx,[eax+0x2]
c0019560:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0019565:	0f b6 d2             	movzx  edx,dl
c0019568:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001956e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019571:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019575:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019579:	8d 48 03             	lea    ecx,[eax+0x3]
c001957c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019581:	0f b6 c9             	movzx  ecx,cl
c0019584:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001958a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001958d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019591:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0019595:	8d 50 04             	lea    edx,[eax+0x4]
c0019598:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001959e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00195a3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00195aa:	66 85 f6             	test   si,si
c00195ad:	74 5b                	je     c001960a <IDE::open(int, int, void*)+0x31e>
c00195af:	0f b6 d2             	movzx  edx,dl
c00195b2:	83 c0 05             	add    eax,0x5
c00195b5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00195b8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00195bc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00195c0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00195c6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00195cb:	eb 3d                	jmp    c001960a <IDE::open(int, int, void*)+0x31e>
c00195cd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00195d3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00195da:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00195e1:	66 05 06 02          	add    ax,0x206
c00195e5:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00195ec:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c00195f3:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00195fa:	66 05 06 02          	add    ax,0x206
c00195fe:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019605:	e9 e5 fe ff ff       	jmp    c00194ef <IDE::open(int, int, void*)+0x203>
c001960a:	50                   	push   eax
c001960b:	50                   	push   eax
c001960c:	6a 00                	push   0x0
c001960e:	53                   	push   ebx
c001960f:	e8 5e fa ff ff       	call   c0019072 <IDE::prepareInterrupt(unsigned char)>
c0019614:	5a                   	pop    edx
c0019615:	59                   	pop    ecx
c0019616:	6a 01                	push   0x1
c0019618:	53                   	push   ebx
c0019619:	e8 54 fa ff ff       	call   c0019072 <IDE::prepareInterrupt(unsigned char)>
c001961e:	83 c4 0c             	add    esp,0xc
c0019621:	6a 00                	push   0x0
c0019623:	6a 00                	push   0x0
c0019625:	53                   	push   ebx
c0019626:	e8 7b fc ff ff       	call   c00192a6 <IDE::enableIRQs(unsigned char, bool)>
c001962b:	83 c4 0c             	add    esp,0xc
c001962e:	6a 00                	push   0x0
c0019630:	6a 01                	push   0x1
c0019632:	53                   	push   ebx
c0019633:	e8 6e fc ff ff       	call   c00192a6 <IDE::enableIRQs(unsigned char, bool)>
c0019638:	83 c4 10             	add    esp,0x10
c001963b:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019642:	74 34                	je     c0019678 <IDE::open(int, int, void*)+0x38c>
c0019644:	83 ec 0c             	sub    esp,0xc
c0019647:	53                   	push   ebx
c0019648:	6a 01                	push   0x1
c001964a:	68 6e 92 01 c0       	push   0xc001926e
c001964f:	6a 0e                	push   0xe
c0019651:	53                   	push   ebx
c0019652:	e8 89 23 ff ff       	call   c000b9e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019657:	83 c4 14             	add    esp,0x14
c001965a:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019660:	53                   	push   ebx
c0019661:	6a 01                	push   0x1
c0019663:	68 8a 92 01 c0       	push   0xc001928a
c0019668:	6a 0f                	push   0xf
c001966a:	53                   	push   ebx
c001966b:	e8 70 23 ff ff       	call   c000b9e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019670:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0019676:	eb 38                	jmp    c00196b0 <IDE::open(int, int, void*)+0x3c4>
c0019678:	83 ec 0c             	sub    esp,0xc
c001967b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0019685:	53                   	push   ebx
c0019686:	6a 00                	push   0x0
c0019688:	68 6e 92 01 c0       	push   0xc001926e
c001968d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0019693:	53                   	push   ebx
c0019694:	e8 47 23 ff ff       	call   c000b9e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019699:	83 c4 14             	add    esp,0x14
c001969c:	53                   	push   ebx
c001969d:	6a 00                	push   0x0
c001969f:	68 8a 92 01 c0       	push   0xc001928a
c00196a4:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00196aa:	53                   	push   ebx
c00196ab:	e8 30 23 ff ff       	call   c000b9e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00196b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00196b2:	83 c4 20             	add    esp,0x20
c00196b5:	83 ec 0c             	sub    esp,0xc
c00196b8:	53                   	push   ebx
c00196b9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00196bc:	83 c4 0c             	add    esp,0xc
c00196bf:	6a 07                	push   0x7
c00196c1:	6a 00                	push   0x0
c00196c3:	53                   	push   ebx
c00196c4:	e8 8f fa ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c00196c9:	83 c4 0c             	add    esp,0xc
c00196cc:	6a 07                	push   0x7
c00196ce:	6a 01                	push   0x1
c00196d0:	53                   	push   ebx
c00196d1:	e8 82 fa ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c00196d6:	83 c4 0c             	add    esp,0xc
c00196d9:	6a 01                	push   0x1
c00196db:	6a 00                	push   0x0
c00196dd:	53                   	push   ebx
c00196de:	e8 c3 fb ff ff       	call   c00192a6 <IDE::enableIRQs(unsigned char, bool)>
c00196e3:	83 c4 0c             	add    esp,0xc
c00196e6:	6a 01                	push   0x1
c00196e8:	6a 01                	push   0x1
c00196ea:	53                   	push   ebx
c00196eb:	e8 b6 fb ff ff       	call   c00192a6 <IDE::enableIRQs(unsigned char, bool)>
c00196f0:	83 c4 2c             	add    esp,0x2c
c00196f3:	31 c0                	xor    eax,eax
c00196f5:	5b                   	pop    ebx
c00196f6:	5e                   	pop    esi
c00196f7:	5f                   	pop    edi
c00196f8:	5d                   	pop    ebp
c00196f9:	c3                   	ret    

c00196fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00196fa:	55                   	push   ebp
c00196fb:	57                   	push   edi
c00196fc:	56                   	push   esi
c00196fd:	53                   	push   ebx
c00196fe:	83 ec 1c             	sub    esp,0x1c
c0019701:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019705:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019709:	8d 50 f8             	lea    edx,[eax-0x8]
c001970c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019710:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019714:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019718:	80 fa 03             	cmp    dl,0x3
c001971b:	77 5d                	ja     c001977a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001971d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019725:	0f b6 db             	movzx  ebx,bl
c0019728:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001972b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001972f:	83 ca 80             	or     edx,0xffffff80
c0019732:	0f b6 d2             	movzx  edx,dl
c0019735:	52                   	push   edx
c0019736:	6a 0c                	push   0xc
c0019738:	53                   	push   ebx
c0019739:	56                   	push   esi
c001973a:	e8 59 f9 ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001973f:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019744:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019748:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001974c:	0f b6 c0             	movzx  eax,al
c001974f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019753:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019755:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001975a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001975e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019762:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019766:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001976e:	83 c4 2c             	add    esp,0x2c
c0019771:	5b                   	pop    ebx
c0019772:	5e                   	pop    esi
c0019773:	5f                   	pop    edi
c0019774:	5d                   	pop    ebp
c0019775:	e9 1e f9 ff ff       	jmp    c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001977a:	3c 07                	cmp    al,0x7
c001977c:	77 10                	ja     c001978e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001977e:	0f b6 db             	movzx  ebx,bl
c0019781:	0f b6 d0             	movzx  edx,al
c0019784:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001978c:	eb 2d                	jmp    c00197bb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001978e:	3c 0d                	cmp    al,0xd
c0019790:	77 13                	ja     c00197a5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0019792:	0f b6 db             	movzx  ebx,bl
c0019795:	0f b6 c0             	movzx  eax,al
c0019798:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001979f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00197a3:	eb 16                	jmp    c00197bb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00197a5:	3c 15                	cmp    al,0x15
c00197a7:	77 14                	ja     c00197bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00197a9:	0f b6 db             	movzx  ebx,bl
c00197ac:	0f b6 c0             	movzx  eax,al
c00197af:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00197b7:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00197bb:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00197bd:	83 c4 1c             	add    esp,0x1c
c00197c0:	5b                   	pop    ebx
c00197c1:	5e                   	pop    esi
c00197c2:	5f                   	pop    edi
c00197c3:	5d                   	pop    ebp
c00197c4:	c3                   	ret    
c00197c5:	90                   	nop

c00197c6 <IDE::detect()>:
c00197c6:	55                   	push   ebp
c00197c7:	57                   	push   edi
c00197c8:	56                   	push   esi
c00197c9:	53                   	push   ebx
c00197ca:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00197d0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00197d7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00197de:	0f 85 97 02 00 00    	jne    c0019a7b <IDE::detect()+0x2b5>
c00197e4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00197eb:	31 f6                	xor    esi,esi
c00197ed:	31 ed                	xor    ebp,ebp
c00197ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00197f7:	89 e8                	mov    eax,ebp
c00197f9:	c1 e0 06             	shl    eax,0x6
c00197fc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019804:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019808:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001980c:	c1 e0 04             	shl    eax,0x4
c001980f:	83 c8 a0             	or     eax,0xffffffa0
c0019812:	0f b6 c0             	movzx  eax,al
c0019815:	50                   	push   eax
c0019816:	6a 06                	push   0x6
c0019818:	56                   	push   esi
c0019819:	53                   	push   ebx
c001981a:	e8 79 f8 ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001981f:	83 c4 0c             	add    esp,0xc
c0019822:	6a 0c                	push   0xc
c0019824:	56                   	push   esi
c0019825:	53                   	push   ebx
c0019826:	e8 2d f9 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c001982b:	83 c4 0c             	add    esp,0xc
c001982e:	6a 0c                	push   0xc
c0019830:	56                   	push   esi
c0019831:	53                   	push   ebx
c0019832:	e8 21 f9 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019837:	83 c4 0c             	add    esp,0xc
c001983a:	6a 0c                	push   0xc
c001983c:	56                   	push   esi
c001983d:	53                   	push   ebx
c001983e:	e8 15 f9 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019843:	83 c4 0c             	add    esp,0xc
c0019846:	6a 0c                	push   0xc
c0019848:	56                   	push   esi
c0019849:	53                   	push   ebx
c001984a:	e8 09 f9 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c001984f:	68 ec 00 00 00       	push   0xec
c0019854:	6a 07                	push   0x7
c0019856:	56                   	push   esi
c0019857:	53                   	push   ebx
c0019858:	e8 3b f8 ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001985d:	83 c4 1c             	add    esp,0x1c
c0019860:	6a 0c                	push   0xc
c0019862:	56                   	push   esi
c0019863:	53                   	push   ebx
c0019864:	e8 ef f8 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019869:	83 c4 0c             	add    esp,0xc
c001986c:	6a 0c                	push   0xc
c001986e:	56                   	push   esi
c001986f:	53                   	push   ebx
c0019870:	e8 e3 f8 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019875:	83 c4 0c             	add    esp,0xc
c0019878:	6a 0c                	push   0xc
c001987a:	56                   	push   esi
c001987b:	53                   	push   ebx
c001987c:	e8 d7 f8 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019881:	83 c4 0c             	add    esp,0xc
c0019884:	6a 0c                	push   0xc
c0019886:	56                   	push   esi
c0019887:	53                   	push   ebx
c0019888:	e8 cb f8 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c001988d:	83 c4 0c             	add    esp,0xc
c0019890:	6a 0c                	push   0xc
c0019892:	56                   	push   esi
c0019893:	53                   	push   ebx
c0019894:	e8 bf f8 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019899:	83 c4 10             	add    esp,0x10
c001989c:	84 c0                	test   al,al
c001989e:	0f 84 5f 01 00 00    	je     c0019a03 <IDE::detect()+0x23d>
c00198a4:	31 ff                	xor    edi,edi
c00198a6:	50                   	push   eax
c00198a7:	6a 0c                	push   0xc
c00198a9:	56                   	push   esi
c00198aa:	53                   	push   ebx
c00198ab:	e8 a8 f8 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c00198b0:	83 c4 10             	add    esp,0x10
c00198b3:	a8 01                	test   al,0x1
c00198b5:	0f 85 69 01 00 00    	jne    c0019a24 <IDE::detect()+0x25e>
c00198bb:	84 c0                	test   al,al
c00198bd:	78 04                	js     c00198c3 <IDE::detect()+0xfd>
c00198bf:	a8 08                	test   al,0x8
c00198c1:	75 23                	jne    c00198e6 <IDE::detect()+0x120>
c00198c3:	47                   	inc    edi
c00198c4:	81 ff 17 01 00 00    	cmp    edi,0x117
c00198ca:	7e da                	jle    c00198a6 <IDE::detect()+0xe0>
c00198cc:	83 ec 0c             	sub    esp,0xc
c00198cf:	6a 32                	push   0x32
c00198d1:	e8 96 a2 ff ff       	call   c0013b6c <milliTenthSleep(unsigned int)>
c00198d6:	83 c4 10             	add    esp,0x10
c00198d9:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00198df:	75 c5                	jne    c00198a6 <IDE::detect()+0xe0>
c00198e1:	e9 3e 01 00 00       	jmp    c0019a24 <IDE::detect()+0x25e>
c00198e6:	31 c9                	xor    ecx,ecx
c00198e8:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00198ec:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00198f0:	83 ec 0c             	sub    esp,0xc
c00198f3:	68 80 00 00 00       	push   0x80
c00198f8:	57                   	push   edi
c00198f9:	6a 00                	push   0x0
c00198fb:	56                   	push   esi
c00198fc:	53                   	push   ebx
c00198fd:	e8 f8 fd ff ff       	call   c00196fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019902:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0019907:	89 e8                	mov    eax,ebp
c0019909:	89 d1                	mov    ecx,edx
c001990b:	c1 e0 06             	shl    eax,0x6
c001990e:	01 d8                	add    eax,ebx
c0019910:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0019917:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001991e:	89 f2                	mov    edx,esi
c0019920:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0019926:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001992a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019930:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019934:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001993b:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019943:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001994a:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019952:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019958:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001995f:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019965:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019969:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001996d:	83 c4 20             	add    esp,0x20
c0019970:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019973:	83 c0 02             	add    eax,0x2
c0019976:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001997c:	83 c7 02             	add    edi,0x2
c001997f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0019982:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0019988:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001998c:	75 e2                	jne    c0019970 <IDE::detect()+0x1aa>
c001998e:	89 e8                	mov    eax,ebp
c0019990:	c1 e0 06             	shl    eax,0x6
c0019993:	01 d8                	add    eax,ebx
c0019995:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001999b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00199a2:	66 c1 ea 09          	shr    dx,0x9
c00199a6:	83 e2 01             	and    edx,0x1
c00199a9:	84 c9                	test   cl,cl
c00199ab:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00199b1:	75 22                	jne    c00199d5 <IDE::detect()+0x20f>
c00199b3:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00199ba:	74 46                	je     c0019a02 <IDE::detect()+0x23c>
c00199bc:	83 ec 0c             	sub    esp,0xc
c00199bf:	68 7c 01 00 00       	push   0x17c
c00199c4:	e8 f0 dd fe ff       	call   c00077b9 <malloc>
c00199c9:	89 c7                	mov    edi,eax
c00199cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00199ce:	e8 11 05 00 00       	call   c0019ee4 <ATA::ATA()>
c00199d3:	eb 17                	jmp    c00199ec <IDE::detect()+0x226>
c00199d5:	83 ec 0c             	sub    esp,0xc
c00199d8:	68 84 01 00 00       	push   0x184
c00199dd:	e8 d7 dd fe ff       	call   c00077b9 <malloc>
c00199e2:	89 c7                	mov    edi,eax
c00199e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00199e7:	e8 f0 0a 00 00       	call   c001a4dc <ATAPI::ATAPI()>
c00199ec:	5a                   	pop    edx
c00199ed:	59                   	pop    ecx
c00199ee:	57                   	push   edi
c00199ef:	53                   	push   ebx
c00199f0:	e8 3f 20 ff ff       	call   c000ba34 <Device::addChild(Device*)>
c00199f5:	8b 07                	mov    eax,DWORD PTR [edi]
c00199f7:	53                   	push   ebx
c00199f8:	55                   	push   ebp
c00199f9:	6a 00                	push   0x0
c00199fb:	57                   	push   edi
c00199fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00199ff:	83 c4 20             	add    esp,0x20
c0019a02:	45                   	inc    ebp
c0019a03:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019a08:	74 0d                	je     c0019a17 <IDE::detect()+0x251>
c0019a0a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019a12:	e9 e0 fd ff ff       	jmp    c00197f7 <IDE::detect()+0x31>
c0019a17:	4e                   	dec    esi
c0019a18:	74 61                	je     c0019a7b <IDE::detect()+0x2b5>
c0019a1a:	be 01 00 00 00       	mov    esi,0x1
c0019a1f:	e9 cb fd ff ff       	jmp    c00197ef <IDE::detect()+0x29>
c0019a24:	50                   	push   eax
c0019a25:	6a 04                	push   0x4
c0019a27:	56                   	push   esi
c0019a28:	53                   	push   ebx
c0019a29:	e8 2a f7 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019a2e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019a32:	83 c4 0c             	add    esp,0xc
c0019a35:	6a 05                	push   0x5
c0019a37:	56                   	push   esi
c0019a38:	53                   	push   ebx
c0019a39:	e8 1a f7 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019a3e:	83 c4 10             	add    esp,0x10
c0019a41:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019a45:	80 fa 14             	cmp    dl,0x14
c0019a48:	75 04                	jne    c0019a4e <IDE::detect()+0x288>
c0019a4a:	3c eb                	cmp    al,0xeb
c0019a4c:	eb 07                	jmp    c0019a55 <IDE::detect()+0x28f>
c0019a4e:	3c 96                	cmp    al,0x96
c0019a50:	75 b1                	jne    c0019a03 <IDE::detect()+0x23d>
c0019a52:	80 fa 69             	cmp    dl,0x69
c0019a55:	75 ac                	jne    c0019a03 <IDE::detect()+0x23d>
c0019a57:	68 a1 00 00 00       	push   0xa1
c0019a5c:	6a 07                	push   0x7
c0019a5e:	56                   	push   esi
c0019a5f:	53                   	push   ebx
c0019a60:	e8 33 f6 ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a65:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019a6c:	e8 fb a0 ff ff       	call   c0013b6c <milliTenthSleep(unsigned int)>
c0019a71:	83 c4 10             	add    esp,0x10
c0019a74:	b1 01                	mov    cl,0x1
c0019a76:	e9 6d fe ff ff       	jmp    c00198e8 <IDE::detect()+0x122>
c0019a7b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019a81:	5b                   	pop    ebx
c0019a82:	5e                   	pop    esi
c0019a83:	5f                   	pop    edi
c0019a84:	5d                   	pop    ebp
c0019a85:	c3                   	ret    

c0019a86 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0019a86:	55                   	push   ebp
c0019a87:	57                   	push   edi
c0019a88:	56                   	push   esi
c0019a89:	53                   	push   ebx
c0019a8a:	83 ec 1c             	sub    esp,0x1c
c0019a8d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a91:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019a95:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019a99:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0019a9d:	88 c3                	mov    bl,al
c0019a9f:	84 c0                	test   al,al
c0019aa1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019aa5:	0f 84 81 00 00 00    	je     c0019b2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019aab:	83 ec 0c             	sub    esp,0xc
c0019aae:	68 6b f4 01 c0       	push   0xc001f46b
c0019ab3:	e8 3c 0b ff ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c0019ab8:	83 c4 10             	add    esp,0x10
c0019abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019abf:	3c 01                	cmp    al,0x1
c0019ac1:	74 63                	je     c0019b26 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0019ac3:	3c 02                	cmp    al,0x2
c0019ac5:	75 53                	jne    c0019b1a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0019ac7:	01 f6                	add    esi,esi
c0019ac9:	09 ee                	or     esi,ebp
c0019acb:	50                   	push   eax
c0019acc:	89 f0                	mov    eax,esi
c0019ace:	6a 01                	push   0x1
c0019ad0:	0f b6 f0             	movzx  esi,al
c0019ad3:	c1 e6 06             	shl    esi,0x6
c0019ad6:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019ade:	50                   	push   eax
c0019adf:	57                   	push   edi
c0019ae0:	e8 73 f6 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019ae5:	83 c4 10             	add    esp,0x10
c0019ae8:	a8 01                	test   al,0x1
c0019aea:	74 02                	je     c0019aee <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019aec:	b3 07                	mov    bl,0x7
c0019aee:	a8 02                	test   al,0x2
c0019af0:	74 02                	je     c0019af4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019af2:	b3 03                	mov    bl,0x3
c0019af4:	a8 04                	test   al,0x4
c0019af6:	74 02                	je     c0019afa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019af8:	b3 14                	mov    bl,0x14
c0019afa:	a8 08                	test   al,0x8
c0019afc:	74 02                	je     c0019b00 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019afe:	b3 03                	mov    bl,0x3
c0019b00:	a8 10                	test   al,0x10
c0019b02:	74 02                	je     c0019b06 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019b04:	b3 15                	mov    bl,0x15
c0019b06:	a8 20                	test   al,0x20
c0019b08:	74 02                	je     c0019b0c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019b0a:	b3 03                	mov    bl,0x3
c0019b0c:	a8 40                	test   al,0x40
c0019b0e:	74 02                	je     c0019b12 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019b10:	b3 16                	mov    bl,0x16
c0019b12:	84 c0                	test   al,al
c0019b14:	79 16                	jns    c0019b2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b16:	b3 0d                	mov    bl,0xd
c0019b18:	eb 12                	jmp    c0019b2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b1a:	3c 03                	cmp    al,0x3
c0019b1c:	74 0c                	je     c0019b2a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019b1e:	3c 04                	cmp    al,0x4
c0019b20:	75 0a                	jne    c0019b2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b22:	b3 08                	mov    bl,0x8
c0019b24:	eb 06                	jmp    c0019b2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b26:	b3 13                	mov    bl,0x13
c0019b28:	eb 02                	jmp    c0019b2c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019b2a:	b3 17                	mov    bl,0x17
c0019b2c:	83 c4 1c             	add    esp,0x1c
c0019b2f:	88 d8                	mov    al,bl
c0019b31:	5b                   	pop    ebx
c0019b32:	5e                   	pop    esi
c0019b33:	5f                   	pop    edi
c0019b34:	5d                   	pop    ebp
c0019b35:	c3                   	ret    

c0019b36 <IDE::polling(unsigned char, unsigned int)>:
c0019b36:	55                   	push   ebp
c0019b37:	bd 04 00 00 00       	mov    ebp,0x4
c0019b3c:	57                   	push   edi
c0019b3d:	56                   	push   esi
c0019b3e:	53                   	push   ebx
c0019b3f:	83 ec 0c             	sub    esp,0xc
c0019b42:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019b46:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019b4a:	0f b6 f3             	movzx  esi,bl
c0019b4d:	52                   	push   edx
c0019b4e:	6a 0c                	push   0xc
c0019b50:	56                   	push   esi
c0019b51:	57                   	push   edi
c0019b52:	e8 01 f6 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019b57:	83 c4 10             	add    esp,0x10
c0019b5a:	4d                   	dec    ebp
c0019b5b:	75 ed                	jne    c0019b4a <IDE::polling(unsigned char, unsigned int)+0x14>
c0019b5d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019b62:	50                   	push   eax
c0019b63:	6a 0c                	push   0xc
c0019b65:	56                   	push   esi
c0019b66:	57                   	push   edi
c0019b67:	e8 ec f5 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019b6c:	83 c4 10             	add    esp,0x10
c0019b6f:	a8 01                	test   al,0x1
c0019b71:	75 17                	jne    c0019b8a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b73:	a8 20                	test   al,0x20
c0019b75:	75 0f                	jne    c0019b86 <IDE::polling(unsigned char, unsigned int)+0x50>
c0019b77:	4b                   	dec    ebx
c0019b78:	74 10                	je     c0019b8a <IDE::polling(unsigned char, unsigned int)+0x54>
c0019b7a:	84 c0                	test   al,al
c0019b7c:	78 e4                	js     c0019b62 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b7e:	a8 08                	test   al,0x8
c0019b80:	74 e0                	je     c0019b62 <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019b82:	31 c0                	xor    eax,eax
c0019b84:	eb 06                	jmp    c0019b8c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b86:	b0 01                	mov    al,0x1
c0019b88:	eb 02                	jmp    c0019b8c <IDE::polling(unsigned char, unsigned int)+0x56>
c0019b8a:	b0 02                	mov    al,0x2
c0019b8c:	83 c4 0c             	add    esp,0xc
c0019b8f:	5b                   	pop    ebx
c0019b90:	5e                   	pop    esi
c0019b91:	5f                   	pop    edi
c0019b92:	5d                   	pop    ebp
c0019b93:	c3                   	ret    

c0019b94 <SATABus::close(int, int, void*)>:
c0019b94:	31 c0                	xor    eax,eax
c0019b96:	c3                   	ret    
c0019b97:	90                   	nop

c0019b98 <SATABus::detect()>:
c0019b98:	c3                   	ret    
c0019b99:	90                   	nop

c0019b9a <SATABus::SATABus()>:
c0019b9a:	83 ec 0c             	sub    esp,0xc
c0019b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ba1:	83 ec 08             	sub    esp,0x8
c0019ba4:	68 a4 f4 01 c0       	push   0xc001f4a4
c0019ba9:	50                   	push   eax
c0019baa:	e8 c9 21 ff ff       	call   c000bd78 <HardDiskController::HardDiskController(char const*)>
c0019baf:	83 c4 10             	add    esp,0x10
c0019bb2:	ba d0 f4 01 c0       	mov    edx,0xc001f4d0
c0019bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bbb:	89 10                	mov    DWORD PTR [eax],edx
c0019bbd:	83 ec 0c             	sub    esp,0xc
c0019bc0:	6a 50                	push   0x50
c0019bc2:	e8 8c df fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c0019bc7:	83 c4 10             	add    esp,0x10
c0019bca:	89 c2                	mov    edx,eax
c0019bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bd0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0019bd6:	83 ec 0c             	sub    esp,0xc
c0019bd9:	6a 50                	push   0x50
c0019bdb:	e8 a5 f6 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c0019be0:	83 c4 10             	add    esp,0x10
c0019be3:	89 c2                	mov    edx,eax
c0019be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019bef:	a1 b0 1f 02 c0       	mov    eax,ds:0xc0021fb0
c0019bf4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019bf8:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019bfe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c02:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019c08:	83 ec 0c             	sub    esp,0xc
c0019c0b:	6a 03                	push   0x3
c0019c0d:	6a 50                	push   0x50
c0019c0f:	51                   	push   ecx
c0019c10:	52                   	push   edx
c0019c11:	50                   	push   eax
c0019c12:	e8 db ff fe ff       	call   c0009bf2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0019c17:	83 c4 20             	add    esp,0x20
c0019c1a:	90                   	nop
c0019c1b:	83 c4 0c             	add    esp,0xc
c0019c1e:	c3                   	ret    
c0019c1f:	90                   	nop

c0019c20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019c20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c24:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0019c27:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019c2a:	09 c2                	or     edx,eax
c0019c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0019c36:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019c38:	31 c0                	xor    eax,eax
c0019c3a:	c1 e9 08             	shr    ecx,0x8
c0019c3d:	83 e1 0f             	and    ecx,0xf
c0019c40:	39 c8                	cmp    eax,ecx
c0019c42:	74 0a                	je     c0019c4e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019c44:	f6 c2 01             	test   dl,0x1
c0019c47:	74 08                	je     c0019c51 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019c49:	d1 ea                	shr    edx,1
c0019c4b:	40                   	inc    eax
c0019c4c:	eb f2                	jmp    c0019c40 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019c4e:	83 c8 ff             	or     eax,0xffffffff
c0019c51:	c3                   	ret    

c0019c52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019c52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019c56:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019c59:	89 c2                	mov    edx,eax
c0019c5b:	c1 ea 08             	shr    edx,0x8
c0019c5e:	83 e2 0f             	and    edx,0xf
c0019c61:	fe ca                	dec    dl
c0019c63:	75 31                	jne    c0019c96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c65:	83 e0 0f             	and    eax,0xf
c0019c68:	3c 03                	cmp    al,0x3
c0019c6a:	75 2a                	jne    c0019c96 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019c6c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019c6f:	b8 02 00 00 00       	mov    eax,0x2
c0019c74:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019c7a:	74 1c                	je     c0019c98 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c7c:	b8 04 00 00 00       	mov    eax,0x4
c0019c81:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0019c87:	74 0f                	je     c0019c98 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019c89:	31 c0                	xor    eax,eax
c0019c8b:	83 fa 03             	cmp    edx,0x3
c0019c8e:	0f 94 c0             	sete   al
c0019c91:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0019c95:	c3                   	ret    
c0019c96:	31 c0                	xor    eax,eax
c0019c98:	c3                   	ret    
c0019c99:	90                   	nop

c0019c9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0019c9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c9e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019ca1:	0f ba e2 0f          	bt     edx,0xf
c0019ca5:	72 f7                	jb     c0019c9e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0019ca7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019caa:	83 ca 10             	or     edx,0x10
c0019cad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cb0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cb3:	83 ca 01             	or     edx,0x1
c0019cb6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cb9:	c3                   	ret    

c0019cba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0019cba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019cbe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cc1:	83 e2 fe             	and    edx,0xfffffffe
c0019cc4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cc7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cca:	83 e2 ef             	and    edx,0xffffffef
c0019ccd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0019cd0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cd3:	0f ba e2 0e          	bt     edx,0xe
c0019cd7:	72 f7                	jb     c0019cd0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019cd9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019cdc:	0f ba e2 0f          	bt     edx,0xf
c0019ce0:	72 ee                	jb     c0019cd0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019ce2:	c3                   	ret    
c0019ce3:	90                   	nop

c0019ce4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019ce4:	55                   	push   ebp
c0019ce5:	57                   	push   edi
c0019ce6:	56                   	push   esi
c0019ce7:	53                   	push   ebx
c0019ce8:	83 ec 1c             	sub    esp,0x1c
c0019ceb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019cef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019cf3:	53                   	push   ebx
c0019cf4:	56                   	push   esi
c0019cf5:	e8 c0 ff ff ff       	call   c0019cba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019cfa:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019cfe:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d04:	83 ec 0c             	sub    esp,0xc
c0019d07:	c1 e5 0a             	shl    ebp,0xa
c0019d0a:	01 e8                	add    eax,ebp
c0019d0c:	89 03                	mov    DWORD PTR [ebx],eax
c0019d0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d10:	68 00 04 00 00       	push   0x400
c0019d15:	6a 00                	push   0x0
c0019d17:	50                   	push   eax
c0019d18:	e8 b3 67 fe ff       	call   c00004d0 <memset>
c0019d1d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019d23:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0019d27:	01 e8                	add    eax,ebp
c0019d29:	83 c4 1c             	add    esp,0x1c
c0019d2c:	89 03                	mov    DWORD PTR [ebx],eax
c0019d2e:	c1 e2 08             	shl    edx,0x8
c0019d31:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019d38:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019d3e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019d44:	01 f8                	add    eax,edi
c0019d46:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019d49:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019d4c:	68 00 01 00 00       	push   0x100
c0019d51:	6a 00                	push   0x0
c0019d53:	50                   	push   eax
c0019d54:	e8 77 67 fe ff       	call   c00004d0 <memset>
c0019d59:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019d5f:	01 fa                	add    edx,edi
c0019d61:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019d65:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019d68:	c1 e7 0d             	shl    edi,0xd
c0019d6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019d72:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019d78:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019d7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d82:	31 ff                	xor    edi,edi
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0019d8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d91:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0019d97:	83 c5 20             	add    ebp,0x20
c0019d9a:	01 f8                	add    eax,edi
c0019d9c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019d9f:	52                   	push   edx
c0019da0:	68 00 01 00 00       	push   0x100
c0019da5:	6a 00                	push   0x0
c0019da7:	50                   	push   eax
c0019da8:	e8 23 67 fe ff       	call   c00004d0 <memset>
c0019dad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019db1:	83 c4 10             	add    esp,0x10
c0019db4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0019dba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0019dc1:	01 f8                	add    eax,edi
c0019dc3:	81 c7 00 01 00 00    	add    edi,0x100
c0019dc9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0019dcc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0019dd2:	75 b3                	jne    c0019d87 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c0019dd4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019ddb:	50                   	push   eax
c0019ddc:	50                   	push   eax
c0019ddd:	53                   	push   ebx
c0019dde:	56                   	push   esi
c0019ddf:	e8 b6 fe ff ff       	call   c0019c9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019de4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019deb:	83 c4 2c             	add    esp,0x2c
c0019dee:	5b                   	pop    ebx
c0019def:	5e                   	pop    esi
c0019df0:	5f                   	pop    edi
c0019df1:	5d                   	pop    ebp
c0019df2:	c3                   	ret    
c0019df3:	90                   	nop

c0019df4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019df4:	55                   	push   ebp
c0019df5:	57                   	push   edi
c0019df6:	56                   	push   esi
c0019df7:	53                   	push   ebx
c0019df8:	31 db                	xor    ebx,ebx
c0019dfa:	83 ec 0c             	sub    esp,0xc
c0019dfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e01:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e05:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019e08:	f7 c7 01 00 00 00    	test   edi,0x1
c0019e0e:	74 7a                	je     c0019e8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e10:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019e14:	89 d8                	mov    eax,ebx
c0019e16:	c1 e0 07             	shl    eax,0x7
c0019e19:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019e20:	55                   	push   ebp
c0019e21:	56                   	push   esi
c0019e22:	e8 2b fe ff ff       	call   c0019c52 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0019e27:	5a                   	pop    edx
c0019e28:	83 f8 01             	cmp    eax,0x1
c0019e2b:	59                   	pop    ecx
c0019e2c:	75 21                	jne    c0019e4f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019e2e:	50                   	push   eax
c0019e2f:	53                   	push   ebx
c0019e30:	55                   	push   ebp
c0019e31:	56                   	push   esi
c0019e32:	e8 ad fe ff ff       	call   c0019ce4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e37:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019e3e:	e8 76 d9 fe ff       	call   c00077b9 <malloc>
c0019e43:	89 c5                	mov    ebp,eax
c0019e45:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e48:	e8 43 0d 00 00       	call   c001ab90 <SATA::SATA()>
c0019e4d:	eb 24                	jmp    c0019e73 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019e4f:	83 f8 04             	cmp    eax,0x4
c0019e52:	75 36                	jne    c0019e8a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019e54:	51                   	push   ecx
c0019e55:	53                   	push   ebx
c0019e56:	55                   	push   ebp
c0019e57:	56                   	push   esi
c0019e58:	e8 87 fe ff ff       	call   c0019ce4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019e5d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019e64:	e8 50 d9 fe ff       	call   c00077b9 <malloc>
c0019e69:	89 c5                	mov    ebp,eax
c0019e6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e6e:	e8 79 10 00 00       	call   c001aeec <SATAPI::SATAPI()>
c0019e73:	58                   	pop    eax
c0019e74:	5a                   	pop    edx
c0019e75:	55                   	push   ebp
c0019e76:	56                   	push   esi
c0019e77:	e8 b8 1b ff ff       	call   c000ba34 <Device::addChild(Device*)>
c0019e7c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019e7f:	56                   	push   esi
c0019e80:	6a 00                	push   0x0
c0019e82:	53                   	push   ebx
c0019e83:	55                   	push   ebp
c0019e84:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0019e87:	83 c4 20             	add    esp,0x20
c0019e8a:	d1 ef                	shr    edi,1
c0019e8c:	43                   	inc    ebx
c0019e8d:	83 fb 20             	cmp    ebx,0x20
c0019e90:	0f 85 72 ff ff ff    	jne    c0019e08 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0019e96:	83 c4 0c             	add    esp,0xc
c0019e99:	5b                   	pop    ebx
c0019e9a:	5e                   	pop    esi
c0019e9b:	5f                   	pop    edi
c0019e9c:	5d                   	pop    ebp
c0019e9d:	c3                   	ret    

c0019e9e <SATABus::open(int, int, void*)>:
c0019e9e:	83 ec 14             	sub    esp,0x14
c0019ea1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ea5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0019eab:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0019eb1:	52                   	push   edx
c0019eb2:	50                   	push   eax
c0019eb3:	e8 3c ff ff ff       	call   c0019df4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0019eb8:	31 c0                	xor    eax,eax
c0019eba:	83 c4 1c             	add    esp,0x1c
c0019ebd:	c3                   	ret    

c0019ebe <ATA::close(int, int, void*)>:
c0019ebe:	83 ec 0c             	sub    esp,0xc
c0019ec1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ec5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ecb:	85 c0                	test   eax,eax
c0019ecd:	74 0c                	je     c0019edb <ATA::close(int, int, void*)+0x1d>
c0019ecf:	83 ec 0c             	sub    esp,0xc
c0019ed2:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ed4:	50                   	push   eax
c0019ed5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019ed8:	83 c4 10             	add    esp,0x10
c0019edb:	31 c0                	xor    eax,eax
c0019edd:	83 c4 0c             	add    esp,0xc
c0019ee0:	c3                   	ret    
c0019ee1:	90                   	nop

c0019ee2 <ATA::powerSaving(PowerSavingLevel)>:
c0019ee2:	c3                   	ret    
c0019ee3:	90                   	nop

c0019ee4 <ATA::ATA()>:
c0019ee4:	83 ec 0c             	sub    esp,0xc
c0019ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eeb:	83 ec 04             	sub    esp,0x4
c0019eee:	68 00 02 00 00       	push   0x200
c0019ef3:	68 9d f5 01 c0       	push   0xc001f59d
c0019ef8:	50                   	push   eax
c0019ef9:	e8 04 1f ff ff       	call   c000be02 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019efe:	83 c4 10             	add    esp,0x10
c0019f01:	ba 10 f5 01 c0       	mov    edx,0xc001f510
c0019f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f0a:	89 10                	mov    DWORD PTR [eax],edx
c0019f0c:	90                   	nop
c0019f0d:	83 c4 0c             	add    esp,0xc
c0019f10:	c3                   	ret    
c0019f11:	90                   	nop

c0019f12 <ATA::flush(bool)>:
c0019f12:	53                   	push   ebx
c0019f13:	83 ec 08             	sub    esp,0x8
c0019f16:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019f1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f1f:	19 c0                	sbb    eax,eax
c0019f21:	83 e0 fd             	and    eax,0xfffffffd
c0019f24:	05 ea 00 00 00       	add    eax,0xea
c0019f29:	50                   	push   eax
c0019f2a:	6a 07                	push   0x7
c0019f2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f33:	50                   	push   eax
c0019f34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f3a:	e8 59 f1 ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f3f:	83 c4 0c             	add    esp,0xc
c0019f42:	6a 00                	push   0x0
c0019f44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f4b:	50                   	push   eax
c0019f4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f52:	e8 df fb ff ff       	call   c0019b36 <IDE::polling(unsigned char, unsigned int)>
c0019f57:	83 c4 18             	add    esp,0x18
c0019f5a:	5b                   	pop    ebx
c0019f5b:	c3                   	ret    

c0019f5c <ATA::readyForCommand()>:
c0019f5c:	56                   	push   esi
c0019f5d:	53                   	push   ebx
c0019f5e:	53                   	push   ebx
c0019f5f:	31 db                	xor    ebx,ebx
c0019f61:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f65:	51                   	push   ecx
c0019f66:	6a 0c                	push   0xc
c0019f68:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f6f:	50                   	push   eax
c0019f70:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f76:	e8 dd f1 ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c0019f7b:	83 c4 10             	add    esp,0x10
c0019f7e:	a8 88                	test   al,0x88
c0019f80:	74 1f                	je     c0019fa1 <ATA::readyForCommand()+0x45>
c0019f82:	43                   	inc    ebx
c0019f83:	83 fb 63             	cmp    ebx,0x63
c0019f86:	7e dd                	jle    c0019f65 <ATA::readyForCommand()+0x9>
c0019f88:	83 ec 0c             	sub    esp,0xc
c0019f8b:	6a 0a                	push   0xa
c0019f8d:	e8 da 9b ff ff       	call   c0013b6c <milliTenthSleep(unsigned int)>
c0019f92:	83 c4 10             	add    esp,0x10
c0019f95:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019f9b:	75 c8                	jne    c0019f65 <ATA::readyForCommand()+0x9>
c0019f9d:	31 c0                	xor    eax,eax
c0019f9f:	eb 02                	jmp    c0019fa3 <ATA::readyForCommand()+0x47>
c0019fa1:	b0 01                	mov    al,0x1
c0019fa3:	5a                   	pop    edx
c0019fa4:	5b                   	pop    ebx
c0019fa5:	5e                   	pop    esi
c0019fa6:	c3                   	ret    
c0019fa7:	90                   	nop

c0019fa8 <ATA::access(unsigned long long, int, void*, bool)>:
c0019fa8:	55                   	push   ebp
c0019fa9:	57                   	push   edi
c0019faa:	56                   	push   esi
c0019fab:	53                   	push   ebx
c0019fac:	83 ec 2c             	sub    esp,0x2c
c0019faf:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019fb3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019fb7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019fbb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019fbf:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019fc3:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019fc7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019fcb:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019fd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019fd5:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019fdb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019fdf:	c1 e0 06             	shl    eax,0x6
c0019fe2:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019fea:	74 5d                	je     c001a049 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019fec:	89 fa                	mov    edx,edi
c0019fee:	89 f0                	mov    eax,esi
c0019ff0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019ff4:	c1 ea 1c             	shr    edx,0x1c
c0019ff7:	89 d1                	mov    ecx,edx
c0019ff9:	09 c1                	or     ecx,eax
c0019ffb:	74 25                	je     c001a022 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019ffd:	31 ed                	xor    ebp,ebp
c0019fff:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001a006:	89 fa                	mov    edx,edi
c001a008:	89 f0                	mov    eax,esi
c001a00a:	0f ad d0             	shrd   eax,edx,cl
c001a00d:	d3 ea                	shr    edx,cl
c001a00f:	f6 c1 20             	test   cl,0x20
c001a012:	74 02                	je     c001a016 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001a014:	89 d0                	mov    eax,edx
c001a016:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001a01a:	45                   	inc    ebp
c001a01b:	83 fd 06             	cmp    ebp,0x6
c001a01e:	75 df                	jne    c0019fff <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001a020:	eb 76                	jmp    c001a098 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001a022:	89 f0                	mov    eax,esi
c001a024:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001a029:	89 fa                	mov    edx,edi
c001a02b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a032:	0f ac d0 10          	shrd   eax,edx,0x10
c001a036:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a03b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a03f:	c1 ee 18             	shr    esi,0x18
c001a042:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001a047:	eb 56                	jmp    c001a09f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a049:	6a 00                	push   0x0
c001a04b:	6a 3f                	push   0x3f
c001a04d:	57                   	push   edi
c001a04e:	56                   	push   esi
c001a04f:	e8 7c 22 00 00       	call   c001c2d0 <__umoddi3>
c001a054:	83 c4 10             	add    esp,0x10
c001a057:	40                   	inc    eax
c001a058:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001a05c:	6a 00                	push   0x0
c001a05e:	68 f0 03 00 00       	push   0x3f0
c001a063:	57                   	push   edi
c001a064:	56                   	push   esi
c001a065:	e8 66 21 00 00       	call   c001c1d0 <__udivdi3>
c001a06a:	83 c4 10             	add    esp,0x10
c001a06d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001a072:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001a079:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001a07e:	6a 00                	push   0x0
c001a080:	6a 3f                	push   0x3f
c001a082:	57                   	push   edi
c001a083:	56                   	push   esi
c001a084:	e8 47 21 00 00       	call   c001c1d0 <__udivdi3>
c001a089:	83 c4 10             	add    esp,0x10
c001a08c:	89 c6                	mov    esi,eax
c001a08e:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001a093:	83 e6 0f             	and    esi,0xf
c001a096:	eb 07                	jmp    c001a09f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001a098:	31 f6                	xor    esi,esi
c001a09a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001a09f:	bf 01 00 00 00       	mov    edi,0x1
c001a0a4:	50                   	push   eax
c001a0a5:	6a 00                	push   0x0
c001a0a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a0ae:	50                   	push   eax
c001a0af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a0b3:	e8 ee f1 ff ff       	call   c00192a6 <IDE::enableIRQs(unsigned char, bool)>
c001a0b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0bb:	e8 9c fe ff ff       	call   c0019f5c <ATA::readyForCommand()>
c001a0c0:	83 c4 10             	add    esp,0x10
c001a0c3:	84 c0                	test   al,al
c001a0c5:	0f 84 4e 02 00 00    	je     c001a319 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a0cb:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a0d1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a0d7:	c1 e0 04             	shl    eax,0x4
c001a0da:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001a0e1:	09 c6                	or     esi,eax
c001a0e3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001a0e8:	75 05                	jne    c001a0ef <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001a0ea:	83 ce a0             	or     esi,0xffffffa0
c001a0ed:	eb 03                	jmp    c001a0f2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001a0ef:	83 ce e0             	or     esi,0xffffffe0
c001a0f2:	89 f0                	mov    eax,esi
c001a0f4:	0f b6 f0             	movzx  esi,al
c001a0f7:	56                   	push   esi
c001a0f8:	6a 06                	push   0x6
c001a0fa:	51                   	push   ecx
c001a0fb:	52                   	push   edx
c001a0fc:	e8 97 ef ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a101:	83 c4 10             	add    esp,0x10
c001a104:	6a 00                	push   0x0
c001a106:	6a 01                	push   0x1
c001a108:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a10f:	50                   	push   eax
c001a110:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a116:	e8 7d ef ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a11b:	83 c4 10             	add    esp,0x10
c001a11e:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a123:	75 6e                	jne    c001a193 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001a125:	6a 00                	push   0x0
c001a127:	6a 08                	push   0x8
c001a129:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a130:	50                   	push   eax
c001a131:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a137:	e8 5c ef ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a13c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001a141:	50                   	push   eax
c001a142:	6a 09                	push   0x9
c001a144:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a14b:	50                   	push   eax
c001a14c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a152:	e8 41 ef ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a157:	83 c4 20             	add    esp,0x20
c001a15a:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001a15f:	50                   	push   eax
c001a160:	6a 0a                	push   0xa
c001a162:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a169:	50                   	push   eax
c001a16a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a170:	e8 23 ef ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a175:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001a17a:	50                   	push   eax
c001a17b:	6a 0b                	push   0xb
c001a17d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a184:	50                   	push   eax
c001a185:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a18b:	e8 08 ef ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a190:	83 c4 20             	add    esp,0x20
c001a193:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001a198:	50                   	push   eax
c001a199:	6a 02                	push   0x2
c001a19b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1a2:	50                   	push   eax
c001a1a3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1a9:	e8 ea ee ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1ae:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001a1b3:	50                   	push   eax
c001a1b4:	6a 03                	push   0x3
c001a1b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1bd:	50                   	push   eax
c001a1be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1c4:	e8 cf ee ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1c9:	83 c4 20             	add    esp,0x20
c001a1cc:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001a1d1:	50                   	push   eax
c001a1d2:	6a 04                	push   0x4
c001a1d4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1db:	50                   	push   eax
c001a1dc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1e2:	e8 b1 ee ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a1e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001a1ec:	50                   	push   eax
c001a1ed:	6a 05                	push   0x5
c001a1ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a1f6:	50                   	push   eax
c001a1f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a1fd:	e8 96 ee ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a202:	83 c4 20             	add    esp,0x20
c001a205:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001a20a:	0f 94 c0             	sete   al
c001a20d:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a212:	74 09                	je     c001a21d <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001a214:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001a21b:	eb 07                	jmp    c001a224 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001a21d:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001a224:	0f b6 c0             	movzx  eax,al
c001a227:	50                   	push   eax
c001a228:	6a 07                	push   0x7
c001a22a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a231:	50                   	push   eax
c001a232:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a238:	e8 5b ee ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a23d:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001a241:	83 c4 10             	add    esp,0x10
c001a244:	85 f6                	test   esi,esi
c001a246:	0f 84 ae 00 00 00    	je     c001a2fa <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001a24c:	50                   	push   eax
c001a24d:	6a 01                	push   0x1
c001a24f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a256:	50                   	push   eax
c001a257:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a25d:	e8 d4 f8 ff ff       	call   c0019b36 <IDE::polling(unsigned char, unsigned int)>
c001a262:	83 c4 10             	add    esp,0x10
c001a265:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001a26b:	84 c0                	test   al,al
c001a26d:	74 20                	je     c001a28f <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c001a26f:	0f b6 f8             	movzx  edi,al
c001a272:	0f b6 d2             	movzx  edx,dl
c001a275:	57                   	push   edi
c001a276:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001a27d:	50                   	push   eax
c001a27e:	52                   	push   edx
c001a27f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a285:	e8 fc f7 ff ff       	call   c0019a86 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a28a:	e9 87 00 00 00       	jmp    c001a316 <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c001a28f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a294:	74 33                	je     c001a2c9 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001a296:	31 ed                	xor    ebp,ebp
c001a298:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a29c:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001a2a0:	50                   	push   eax
c001a2a1:	50                   	push   eax
c001a2a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a2a9:	50                   	push   eax
c001a2aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2b0:	e8 d1 ed ff ff       	call   c0019086 <IDE::getBase(unsigned char)>
c001a2b5:	89 c2                	mov    edx,eax
c001a2b7:	89 f8                	mov    eax,edi
c001a2b9:	66 ef                	out    dx,ax
c001a2bb:	45                   	inc    ebp
c001a2bc:	83 c4 10             	add    esp,0x10
c001a2bf:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001a2c5:	75 d1                	jne    c001a298 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c001a2c7:	eb 23                	jmp    c001a2ec <ATA::access(unsigned long long, int, void*, bool)+0x344>
c001a2c9:	0f b6 d2             	movzx  edx,dl
c001a2cc:	51                   	push   ecx
c001a2cd:	51                   	push   ecx
c001a2ce:	52                   	push   edx
c001a2cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a2d5:	e8 ac ed ff ff       	call   c0019086 <IDE::getBase(unsigned char)>
c001a2da:	b9 00 01 00 00       	mov    ecx,0x100
c001a2df:	89 c2                	mov    edx,eax
c001a2e1:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001a2e5:	fc                   	cld    
c001a2e6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001a2e9:	83 c4 10             	add    esp,0x10
c001a2ec:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001a2f4:	4e                   	dec    esi
c001a2f5:	e9 4a ff ff ff       	jmp    c001a244 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c001a2fa:	31 ff                	xor    edi,edi
c001a2fc:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001a301:	74 16                	je     c001a319 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c001a303:	50                   	push   eax
c001a304:	50                   	push   eax
c001a305:	31 c0                	xor    eax,eax
c001a307:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001a30c:	0f 94 c0             	sete   al
c001a30f:	50                   	push   eax
c001a310:	53                   	push   ebx
c001a311:	e8 fc fb ff ff       	call   c0019f12 <ATA::flush(bool)>
c001a316:	83 c4 10             	add    esp,0x10
c001a319:	83 c4 2c             	add    esp,0x2c
c001a31c:	89 f8                	mov    eax,edi
c001a31e:	5b                   	pop    ebx
c001a31f:	5e                   	pop    esi
c001a320:	5f                   	pop    edi
c001a321:	5d                   	pop    ebp
c001a322:	c3                   	ret    
c001a323:	90                   	nop

c001a324 <ATA::read(unsigned long long, int, void*)>:
c001a324:	57                   	push   edi
c001a325:	b8 04 00 00 00       	mov    eax,0x4
c001a32a:	56                   	push   esi
c001a32b:	53                   	push   ebx
c001a32c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a330:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a334:	8d 7a ff             	lea    edi,[edx-0x1]
c001a337:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a33b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a33f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a345:	77 25                	ja     c001a36c <ATA::read(unsigned long long, int, void*)+0x48>
c001a347:	b8 06 00 00 00       	mov    eax,0x6
c001a34c:	85 f6                	test   esi,esi
c001a34e:	74 1c                	je     c001a36c <ATA::read(unsigned long long, int, void*)+0x48>
c001a350:	50                   	push   eax
c001a351:	50                   	push   eax
c001a352:	6a 00                	push   0x0
c001a354:	56                   	push   esi
c001a355:	52                   	push   edx
c001a356:	53                   	push   ebx
c001a357:	51                   	push   ecx
c001a358:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a35c:	e8 47 fc ff ff       	call   c0019fa8 <ATA::access(unsigned long long, int, void*, bool)>
c001a361:	83 c4 20             	add    esp,0x20
c001a364:	85 c0                	test   eax,eax
c001a366:	0f 95 c0             	setne  al
c001a369:	0f b6 c0             	movzx  eax,al
c001a36c:	5b                   	pop    ebx
c001a36d:	5e                   	pop    esi
c001a36e:	5f                   	pop    edi
c001a36f:	c3                   	ret    

c001a370 <ATA::write(unsigned long long, int, void*)>:
c001a370:	57                   	push   edi
c001a371:	b8 04 00 00 00       	mov    eax,0x4
c001a376:	56                   	push   esi
c001a377:	53                   	push   ebx
c001a378:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a37c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a380:	8d 7a ff             	lea    edi,[edx-0x1]
c001a383:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a387:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a38b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a391:	77 25                	ja     c001a3b8 <ATA::write(unsigned long long, int, void*)+0x48>
c001a393:	b8 06 00 00 00       	mov    eax,0x6
c001a398:	85 f6                	test   esi,esi
c001a39a:	74 1c                	je     c001a3b8 <ATA::write(unsigned long long, int, void*)+0x48>
c001a39c:	50                   	push   eax
c001a39d:	50                   	push   eax
c001a39e:	6a 01                	push   0x1
c001a3a0:	56                   	push   esi
c001a3a1:	52                   	push   edx
c001a3a2:	53                   	push   ebx
c001a3a3:	51                   	push   ecx
c001a3a4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a3a8:	e8 fb fb ff ff       	call   c0019fa8 <ATA::access(unsigned long long, int, void*, bool)>
c001a3ad:	83 c4 20             	add    esp,0x20
c001a3b0:	85 c0                	test   eax,eax
c001a3b2:	0f 95 c0             	setne  al
c001a3b5:	0f b6 c0             	movzx  eax,al
c001a3b8:	5b                   	pop    ebx
c001a3b9:	5e                   	pop    esi
c001a3ba:	5f                   	pop    edi
c001a3bb:	c3                   	ret    

c001a3bc <ATA::detectCHS()>:
c001a3bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a3c0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001a3c6:	c1 e0 06             	shl    eax,0x6
c001a3c9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001a3cf:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001a3d9:	c7 44 24 04 f4 f4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001f4f4
c001a3e1:	e9 91 5e ff ff       	jmp    c0010277 <KePanic(char const*)>

c001a3e6 <ATA::open(int, int, void*)>:
c001a3e6:	53                   	push   ebx
c001a3e7:	83 ec 08             	sub    esp,0x8
c001a3ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a3ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a3f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3f6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a3fc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a402:	c1 e0 06             	shl    eax,0x6
c001a405:	01 d0                	add    eax,edx
c001a407:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001a40e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001a414:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001a41b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a425:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001a42b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a432:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001a439:	75 0c                	jne    c001a447 <ATA::open(int, int, void*)+0x61>
c001a43b:	83 ec 0c             	sub    esp,0xc
c001a43e:	53                   	push   ebx
c001a43f:	e8 78 ff ff ff       	call   c001a3bc <ATA::detectCHS()>
c001a444:	83 c4 10             	add    esp,0x10
c001a447:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a44d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001a453:	c1 e0 06             	shl    eax,0x6
c001a456:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001a45d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a467:	d1 e8                	shr    eax,1
c001a469:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001a46f:	6a 04                	push   0x4
c001a471:	6a 0c                	push   0xc
c001a473:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a47a:	50                   	push   eax
c001a47b:	52                   	push   edx
c001a47c:	e8 17 ec ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a481:	90                   	nop
c001a482:	90                   	nop
c001a483:	6a 00                	push   0x0
c001a485:	6a 0c                	push   0xc
c001a487:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a48e:	50                   	push   eax
c001a48f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a495:	e8 fe eb ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a49a:	83 c4 14             	add    esp,0x14
c001a49d:	53                   	push   ebx
c001a49e:	e8 c7 19 ff ff       	call   c000be6a <PhysicalDisk::startCache()>
c001a4a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a4a6:	e8 77 2a ff ff       	call   c000cf22 <createPartitionsForDisk(PhysicalDisk*)>
c001a4ab:	31 c0                	xor    eax,eax
c001a4ad:	83 c4 18             	add    esp,0x18
c001a4b0:	5b                   	pop    ebx
c001a4b1:	c3                   	ret    

c001a4b2 <ATAPI::write(unsigned long long, int, void*)>:
c001a4b2:	b8 03 00 00 00       	mov    eax,0x3
c001a4b7:	c3                   	ret    

c001a4b8 <ATAPI::close(int, int, void*)>:
c001a4b8:	83 ec 0c             	sub    esp,0xc
c001a4bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4bf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a4c5:	85 c0                	test   eax,eax
c001a4c7:	74 0c                	je     c001a4d5 <ATAPI::close(int, int, void*)+0x1d>
c001a4c9:	83 ec 0c             	sub    esp,0xc
c001a4cc:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4ce:	50                   	push   eax
c001a4cf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a4d2:	83 c4 10             	add    esp,0x10
c001a4d5:	31 c0                	xor    eax,eax
c001a4d7:	83 c4 0c             	add    esp,0xc
c001a4da:	c3                   	ret    
c001a4db:	90                   	nop

c001a4dc <ATAPI::ATAPI()>:
c001a4dc:	83 ec 0c             	sub    esp,0xc
c001a4df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4e3:	83 ec 04             	sub    esp,0x4
c001a4e6:	68 00 08 00 00       	push   0x800
c001a4eb:	68 3d f6 01 c0       	push   0xc001f63d
c001a4f0:	50                   	push   eax
c001a4f1:	e8 0c 19 ff ff       	call   c000be02 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a4f6:	83 c4 10             	add    esp,0x10
c001a4f9:	ba 58 f5 01 c0       	mov    edx,0xc001f558
c001a4fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a502:	89 10                	mov    DWORD PTR [eax],edx
c001a504:	90                   	nop
c001a505:	83 c4 0c             	add    esp,0xc
c001a508:	c3                   	ret    
c001a509:	90                   	nop

c001a50a <ATAPI::readyForCommand()>:
c001a50a:	56                   	push   esi
c001a50b:	53                   	push   ebx
c001a50c:	53                   	push   ebx
c001a50d:	31 db                	xor    ebx,ebx
c001a50f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a513:	51                   	push   ecx
c001a514:	6a 0c                	push   0xc
c001a516:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a51d:	50                   	push   eax
c001a51e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a524:	e8 2f ec ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c001a529:	83 c4 10             	add    esp,0x10
c001a52c:	a8 88                	test   al,0x88
c001a52e:	74 25                	je     c001a555 <ATAPI::readyForCommand()+0x4b>
c001a530:	43                   	inc    ebx
c001a531:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a537:	7e da                	jle    c001a513 <ATAPI::readyForCommand()+0x9>
c001a539:	83 ec 0c             	sub    esp,0xc
c001a53c:	68 5e 01 00 00       	push   0x15e
c001a541:	e8 26 96 ff ff       	call   c0013b6c <milliTenthSleep(unsigned int)>
c001a546:	83 c4 10             	add    esp,0x10
c001a549:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a54f:	75 c2                	jne    c001a513 <ATAPI::readyForCommand()+0x9>
c001a551:	31 c0                	xor    eax,eax
c001a553:	eb 02                	jmp    c001a557 <ATAPI::readyForCommand()+0x4d>
c001a555:	b0 01                	mov    al,0x1
c001a557:	5a                   	pop    edx
c001a558:	5b                   	pop    ebx
c001a559:	5e                   	pop    esi
c001a55a:	c3                   	ret    
c001a55b:	90                   	nop

c001a55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a55c:	55                   	push   ebp
c001a55d:	57                   	push   edi
c001a55e:	56                   	push   esi
c001a55f:	53                   	push   ebx
c001a560:	83 ec 20             	sub    esp,0x20
c001a563:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a567:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a56b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a56f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a573:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a577:	6a 01                	push   0x1
c001a579:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a580:	50                   	push   eax
c001a581:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a587:	e8 1a ed ff ff       	call   c00192a6 <IDE::enableIRQs(unsigned char, bool)>
c001a58c:	5e                   	pop    esi
c001a58d:	58                   	pop    eax
c001a58e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a595:	50                   	push   eax
c001a596:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a59c:	e8 d1 ea ff ff       	call   c0019072 <IDE::prepareInterrupt(unsigned char)>
c001a5a1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a5a4:	e8 61 ff ff ff       	call   c001a50a <ATAPI::readyForCommand()>
c001a5a9:	83 c4 10             	add    esp,0x10
c001a5ac:	84 c0                	test   al,al
c001a5ae:	75 0a                	jne    c001a5ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a5b0:	bb 01 00 00 00       	mov    ebx,0x1
c001a5b5:	e9 57 02 00 00       	jmp    c001a811 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a5ba:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a5c0:	c1 e0 04             	shl    eax,0x4
c001a5c3:	0f b6 c0             	movzx  eax,al
c001a5c6:	50                   	push   eax
c001a5c7:	6a 06                	push   0x6
c001a5c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5d0:	50                   	push   eax
c001a5d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5d7:	e8 bc ea ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5dc:	6a 00                	push   0x0
c001a5de:	6a 01                	push   0x1
c001a5e0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a5e7:	50                   	push   eax
c001a5e8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a5ee:	e8 a5 ea ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a5f3:	83 c4 20             	add    esp,0x20
c001a5f6:	0f b6 c3             	movzx  eax,bl
c001a5f9:	0f b6 df             	movzx  ebx,bh
c001a5fc:	50                   	push   eax
c001a5fd:	6a 04                	push   0x4
c001a5ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a606:	50                   	push   eax
c001a607:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a60d:	e8 86 ea ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a612:	53                   	push   ebx
c001a613:	6a 05                	push   0x5
c001a615:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a61c:	50                   	push   eax
c001a61d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a623:	e8 70 ea ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a628:	83 c4 20             	add    esp,0x20
c001a62b:	68 a0 00 00 00       	push   0xa0
c001a630:	6a 07                	push   0x7
c001a632:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a639:	50                   	push   eax
c001a63a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a640:	e8 53 ea ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a645:	83 c4 0c             	add    esp,0xc
c001a648:	6a 01                	push   0x1
c001a64a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a651:	50                   	push   eax
c001a652:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a658:	e8 d9 f4 ff ff       	call   c0019b36 <IDE::polling(unsigned char, unsigned int)>
c001a65d:	83 c4 10             	add    esp,0x10
c001a660:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a666:	84 c0                	test   al,al
c001a668:	74 23                	je     c001a68d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a66a:	0f b6 d8             	movzx  ebx,al
c001a66d:	0f b6 d2             	movzx  edx,dl
c001a670:	53                   	push   ebx
c001a671:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a678:	50                   	push   eax
c001a679:	52                   	push   edx
c001a67a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a680:	e8 01 f4 ff ff       	call   c0019a86 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a685:	83 c4 10             	add    esp,0x10
c001a688:	e9 84 01 00 00       	jmp    c001a811 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a68d:	0f b6 d2             	movzx  edx,dl
c001a690:	53                   	push   ebx
c001a691:	53                   	push   ebx
c001a692:	52                   	push   edx
c001a693:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a699:	e8 e8 e9 ff ff       	call   c0019086 <IDE::getBase(unsigned char)>
c001a69e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a6a2:	b9 06 00 00 00       	mov    ecx,0x6
c001a6a7:	89 c2                	mov    edx,eax
c001a6a9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a6ac:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a6b0:	83 c4 10             	add    esp,0x10
c001a6b3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a6b9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a6c0:	85 db                	test   ebx,ebx
c001a6c2:	0f 84 ec 00 00 00    	je     c001a7b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a6c8:	51                   	push   ecx
c001a6c9:	51                   	push   ecx
c001a6ca:	52                   	push   edx
c001a6cb:	50                   	push   eax
c001a6cc:	e8 35 eb ff ff       	call   c0019206 <IDE::waitInterrupt(unsigned char)>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	84 c0                	test   al,al
c001a6d6:	0f 84 d4 fe ff ff    	je     c001a5b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a6dc:	56                   	push   esi
c001a6dd:	56                   	push   esi
c001a6de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6e5:	50                   	push   eax
c001a6e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a6ec:	e8 81 e9 ff ff       	call   c0019072 <IDE::prepareInterrupt(unsigned char)>
c001a6f1:	83 c4 0c             	add    esp,0xc
c001a6f4:	6a 04                	push   0x4
c001a6f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a6fd:	50                   	push   eax
c001a6fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a704:	e8 4f ea ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c001a709:	83 c4 0c             	add    esp,0xc
c001a70c:	89 c6                	mov    esi,eax
c001a70e:	6a 05                	push   0x5
c001a710:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a717:	50                   	push   eax
c001a718:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a71e:	e8 35 ea ff ff       	call   c0019158 <IDE::read(unsigned char, unsigned char)>
c001a723:	89 f1                	mov    ecx,esi
c001a725:	0f b6 c0             	movzx  eax,al
c001a728:	0f b6 f1             	movzx  esi,cl
c001a72b:	c1 e0 08             	shl    eax,0x8
c001a72e:	09 c6                	or     esi,eax
c001a730:	d1 fe                	sar    esi,1
c001a732:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a736:	83 c4 10             	add    esp,0x10
c001a739:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a73e:	74 41                	je     c001a781 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a740:	31 c9                	xor    ecx,ecx
c001a742:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a748:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a74f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a753:	75 0a                	jne    c001a75f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a755:	01 c9                	add    ecx,ecx
c001a757:	01 cd                	add    ebp,ecx
c001a759:	4b                   	dec    ebx
c001a75a:	e9 54 ff ff ff       	jmp    c001a6b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a75f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a764:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a768:	51                   	push   ecx
c001a769:	51                   	push   ecx
c001a76a:	52                   	push   edx
c001a76b:	50                   	push   eax
c001a76c:	e8 15 e9 ff ff       	call   c0019086 <IDE::getBase(unsigned char)>
c001a771:	89 c2                	mov    edx,eax
c001a773:	89 f0                	mov    eax,esi
c001a775:	66 ef                	out    dx,ax
c001a777:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a77b:	83 c4 10             	add    esp,0x10
c001a77e:	41                   	inc    ecx
c001a77f:	eb c1                	jmp    c001a742 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a781:	31 f6                	xor    esi,esi
c001a783:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a789:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a790:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a794:	75 06                	jne    c001a79c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a796:	01 f6                	add    esi,esi
c001a798:	01 f5                	add    ebp,esi
c001a79a:	eb bd                	jmp    c001a759 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a79c:	51                   	push   ecx
c001a79d:	51                   	push   ecx
c001a79e:	52                   	push   edx
c001a79f:	50                   	push   eax
c001a7a0:	e8 e1 e8 ff ff       	call   c0019086 <IDE::getBase(unsigned char)>
c001a7a5:	89 c2                	mov    edx,eax
c001a7a7:	66 ed                	in     ax,dx
c001a7a9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a7ae:	83 c4 10             	add    esp,0x10
c001a7b1:	46                   	inc    esi
c001a7b2:	eb cf                	jmp    c001a783 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a7b4:	51                   	push   ecx
c001a7b5:	51                   	push   ecx
c001a7b6:	52                   	push   edx
c001a7b7:	50                   	push   eax
c001a7b8:	e8 49 ea ff ff       	call   c0019206 <IDE::waitInterrupt(unsigned char)>
c001a7bd:	83 c4 10             	add    esp,0x10
c001a7c0:	84 c0                	test   al,al
c001a7c2:	0f 84 e8 fd ff ff    	je     c001a5b0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a7c8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a7cd:	52                   	push   edx
c001a7ce:	52                   	push   edx
c001a7cf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7d6:	50                   	push   eax
c001a7d7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7dd:	e8 90 e8 ff ff       	call   c0019072 <IDE::prepareInterrupt(unsigned char)>
c001a7e2:	83 c4 10             	add    esp,0x10
c001a7e5:	50                   	push   eax
c001a7e6:	50                   	push   eax
c001a7e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a7ee:	50                   	push   eax
c001a7ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a7f5:	e8 8c e8 ff ff       	call   c0019086 <IDE::getBase(unsigned char)>
c001a7fa:	8d 50 07             	lea    edx,[eax+0x7]
c001a7fd:	ec                   	in     al,dx
c001a7fe:	83 c4 10             	add    esp,0x10
c001a801:	a8 88                	test   al,0x88
c001a803:	74 0a                	je     c001a80f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a805:	4b                   	dec    ebx
c001a806:	75 dd                	jne    c001a7e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a808:	bb 02 00 00 00       	mov    ebx,0x2
c001a80d:	eb 02                	jmp    c001a811 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a80f:	31 db                	xor    ebx,ebx
c001a811:	83 c4 1c             	add    esp,0x1c
c001a814:	89 d8                	mov    eax,ebx
c001a816:	5b                   	pop    ebx
c001a817:	5e                   	pop    esi
c001a818:	5f                   	pop    edi
c001a819:	5d                   	pop    ebp
c001a81a:	c3                   	ret    
c001a81b:	90                   	nop

c001a81c <ATAPI::diskRemoved()>:
c001a81c:	53                   	push   ebx
c001a81d:	83 ec 14             	sub    esp,0x14
c001a820:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a824:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a82b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a831:	e8 6c 24 ff ff       	call   c000cca2 <LogicalDisk::unmount()>
c001a836:	58                   	pop    eax
c001a837:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a83d:	e8 a6 2d ff ff       	call   c000d5e8 <VCache::writeWriteBuffer()>
c001a842:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a848:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a84c:	83 c4 18             	add    esp,0x18
c001a84f:	5b                   	pop    ebx
c001a850:	e9 83 2d ff ff       	jmp    c000d5d8 <VCache::invalidateReadBuffer()>
c001a855:	90                   	nop

c001a856 <ATAPI::eject()>:
c001a856:	57                   	push   edi
c001a857:	b9 03 00 00 00       	mov    ecx,0x3
c001a85c:	53                   	push   ebx
c001a85d:	83 ec 14             	sub    esp,0x14
c001a860:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a864:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a868:	fc                   	cld    
c001a869:	31 c0                	xor    eax,eax
c001a86b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a86d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a872:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a877:	50                   	push   eax
c001a878:	50                   	push   eax
c001a879:	6a 00                	push   0x0
c001a87b:	6a 00                	push   0x0
c001a87d:	6a 00                	push   0x0
c001a87f:	6a 02                	push   0x2
c001a881:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a885:	50                   	push   eax
c001a886:	53                   	push   ebx
c001a887:	e8 d0 fc ff ff       	call   c001a55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a88c:	83 c4 14             	add    esp,0x14
c001a88f:	53                   	push   ebx
c001a890:	e8 87 ff ff ff       	call   c001a81c <ATAPI::diskRemoved()>
c001a895:	83 c4 24             	add    esp,0x24
c001a898:	31 c0                	xor    eax,eax
c001a89a:	5b                   	pop    ebx
c001a89b:	5f                   	pop    edi
c001a89c:	c3                   	ret    
c001a89d:	90                   	nop

c001a89e <ATAPI::diskInserted()>:
c001a89e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8a2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a8a9:	c3                   	ret    

c001a8aa <ATAPI::detectMedia()>:
c001a8aa:	56                   	push   esi
c001a8ab:	53                   	push   ebx
c001a8ac:	83 ec 28             	sub    esp,0x28
c001a8af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a8b3:	6a 0c                	push   0xc
c001a8b5:	6a 00                	push   0x0
c001a8b7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a8bb:	56                   	push   esi
c001a8bc:	e8 0f 5c fe ff       	call   c00004d0 <memset>
c001a8c1:	58                   	pop    eax
c001a8c2:	5a                   	pop    edx
c001a8c3:	6a 00                	push   0x0
c001a8c5:	6a 00                	push   0x0
c001a8c7:	6a 00                	push   0x0
c001a8c9:	6a 00                	push   0x0
c001a8cb:	56                   	push   esi
c001a8cc:	53                   	push   ebx
c001a8cd:	e8 8a fc ff ff       	call   c001a55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8d2:	83 c4 1c             	add    esp,0x1c
c001a8d5:	6a 0c                	push   0xc
c001a8d7:	6a 00                	push   0x0
c001a8d9:	56                   	push   esi
c001a8da:	e8 f1 5b fe ff       	call   c00004d0 <memset>
c001a8df:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a8e4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a8e9:	59                   	pop    ecx
c001a8ea:	58                   	pop    eax
c001a8eb:	6a 01                	push   0x1
c001a8ed:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a8f1:	50                   	push   eax
c001a8f2:	6a 00                	push   0x0
c001a8f4:	6a 12                	push   0x12
c001a8f6:	56                   	push   esi
c001a8f7:	53                   	push   ebx
c001a8f8:	e8 5f fc ff ff       	call   c001a55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a8fd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a901:	83 c4 20             	add    esp,0x20
c001a904:	83 e0 7f             	and    eax,0x7f
c001a907:	3c 70                	cmp    al,0x70
c001a909:	74 15                	je     c001a920 <ATAPI::detectMedia()+0x76>
c001a90b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a912:	75 0c                	jne    c001a920 <ATAPI::detectMedia()+0x76>
c001a914:	83 ec 0c             	sub    esp,0xc
c001a917:	53                   	push   ebx
c001a918:	e8 81 ff ff ff       	call   c001a89e <ATAPI::diskInserted()>
c001a91d:	83 c4 10             	add    esp,0x10
c001a920:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a924:	83 e0 0f             	and    eax,0xf
c001a927:	3c 02                	cmp    al,0x2
c001a929:	75 1b                	jne    c001a946 <ATAPI::detectMedia()+0x9c>
c001a92b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a930:	75 2d                	jne    c001a95f <ATAPI::detectMedia()+0xb5>
c001a932:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a939:	74 24                	je     c001a95f <ATAPI::detectMedia()+0xb5>
c001a93b:	83 ec 0c             	sub    esp,0xc
c001a93e:	53                   	push   ebx
c001a93f:	e8 d8 fe ff ff       	call   c001a81c <ATAPI::diskRemoved()>
c001a944:	eb 16                	jmp    c001a95c <ATAPI::detectMedia()+0xb2>
c001a946:	84 c0                	test   al,al
c001a948:	75 15                	jne    c001a95f <ATAPI::detectMedia()+0xb5>
c001a94a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a951:	75 0c                	jne    c001a95f <ATAPI::detectMedia()+0xb5>
c001a953:	83 ec 0c             	sub    esp,0xc
c001a956:	53                   	push   ebx
c001a957:	e8 42 ff ff ff       	call   c001a89e <ATAPI::diskInserted()>
c001a95c:	83 c4 10             	add    esp,0x10
c001a95f:	83 c4 24             	add    esp,0x24
c001a962:	5b                   	pop    ebx
c001a963:	5e                   	pop    esi
c001a964:	c3                   	ret    
c001a965:	90                   	nop

c001a966 <ATAPI::open(int, int, void*)>:
c001a966:	56                   	push   esi
c001a967:	53                   	push   ebx
c001a968:	50                   	push   eax
c001a969:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a96d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a971:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a975:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a97b:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a981:	c1 e0 06             	shl    eax,0x6
c001a984:	01 d0                	add    eax,edx
c001a986:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a98d:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a993:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a99a:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a9a4:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a9aa:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a9b1:	6a 04                	push   0x4
c001a9b3:	6a 0c                	push   0xc
c001a9b5:	51                   	push   ecx
c001a9b6:	52                   	push   edx
c001a9b7:	e8 dc e6 ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9bc:	90                   	nop
c001a9bd:	90                   	nop
c001a9be:	6a 00                	push   0x0
c001a9c0:	6a 0c                	push   0xc
c001a9c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a9c9:	50                   	push   eax
c001a9ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a9d0:	e8 c3 e6 ff ff       	call   c0019098 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a9d5:	83 c4 14             	add    esp,0x14
c001a9d8:	68 74 01 00 00       	push   0x174
c001a9dd:	e8 d7 cd fe ff       	call   c00077b9 <malloc>
c001a9e2:	83 c4 0c             	add    esp,0xc
c001a9e5:	89 c6                	mov    esi,eax
c001a9e7:	6a 00                	push   0x0
c001a9e9:	68 ff ff ff 7f       	push   0x7fffffff
c001a9ee:	6a 00                	push   0x0
c001a9f0:	6a 00                	push   0x0
c001a9f2:	53                   	push   ebx
c001a9f3:	68 f4 f6 01 c0       	push   0xc001f6f4
c001a9f8:	50                   	push   eax
c001a9f9:	e8 f0 20 ff ff       	call   c000caee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a9fe:	83 c4 14             	add    esp,0x14
c001aa01:	56                   	push   esi
c001aa02:	e8 9d 21 ff ff       	call   c000cba4 <LogicalDisk::assignDriveLetter()>
c001aa07:	5a                   	pop    edx
c001aa08:	0f be c0             	movsx  eax,al
c001aa0b:	59                   	pop    ecx
c001aa0c:	50                   	push   eax
c001aa0d:	68 40 f5 01 c0       	push   0xc001f540
c001aa12:	e8 dd fb fe ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001aa17:	58                   	pop    eax
c001aa18:	5a                   	pop    edx
c001aa19:	56                   	push   esi
c001aa1a:	53                   	push   ebx
c001aa1b:	e8 14 10 ff ff       	call   c000ba34 <Device::addChild(Device*)>
c001aa20:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001aa26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa29:	e8 3c 14 ff ff       	call   c000be6a <PhysicalDisk::startCache()>
c001aa2e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001aa35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aa38:	e8 6d fe ff ff       	call   c001a8aa <ATAPI::detectMedia()>
c001aa3d:	83 c4 14             	add    esp,0x14
c001aa40:	31 c0                	xor    eax,eax
c001aa42:	5b                   	pop    ebx
c001aa43:	5e                   	pop    esi
c001aa44:	c3                   	ret    
c001aa45:	90                   	nop

c001aa46 <ATAPI::read(unsigned long long, int, void*)>:
c001aa46:	55                   	push   ebp
c001aa47:	57                   	push   edi
c001aa48:	56                   	push   esi
c001aa49:	53                   	push   ebx
c001aa4a:	83 ec 1c             	sub    esp,0x1c
c001aa4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001aa51:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aa55:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001aa59:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aa60:	74 3c                	je     c001aa9e <ATAPI::read(unsigned long long, int, void*)+0x58>
c001aa62:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001aa66:	b9 03 00 00 00       	mov    ecx,0x3
c001aa6b:	fc                   	cld    
c001aa6c:	31 c0                	xor    eax,eax
c001aa6e:	0f ce                	bswap  esi
c001aa70:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001aa72:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001aa77:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001aa7b:	89 e8                	mov    eax,ebp
c001aa7d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001aa81:	50                   	push   eax
c001aa82:	50                   	push   eax
c001aa83:	55                   	push   ebp
c001aa84:	c1 e5 0b             	shl    ebp,0xb
c001aa87:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001aa8b:	6a 00                	push   0x0
c001aa8d:	55                   	push   ebp
c001aa8e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001aa92:	50                   	push   eax
c001aa93:	53                   	push   ebx
c001aa94:	e8 c3 fa ff ff       	call   c001a55c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001aa99:	83 c4 20             	add    esp,0x20
c001aa9c:	eb 1a                	jmp    c001aab8 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001aa9e:	83 ec 0c             	sub    esp,0xc
c001aaa1:	53                   	push   ebx
c001aaa2:	e8 03 fe ff ff       	call   c001a8aa <ATAPI::detectMedia()>
c001aaa7:	83 c4 10             	add    esp,0x10
c001aaaa:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001aab1:	75 af                	jne    c001aa62 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001aab3:	b8 02 00 00 00       	mov    eax,0x2
c001aab8:	83 c4 1c             	add    esp,0x1c
c001aabb:	5b                   	pop    ebx
c001aabc:	5e                   	pop    esi
c001aabd:	5f                   	pop    edi
c001aabe:	5d                   	pop    ebp
c001aabf:	c3                   	ret    

c001aac0 <SATA::close(int, int, void*)>:
c001aac0:	83 ec 0c             	sub    esp,0xc
c001aac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aac7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aacd:	85 c0                	test   eax,eax
c001aacf:	74 0c                	je     c001aadd <SATA::close(int, int, void*)+0x1d>
c001aad1:	83 ec 0c             	sub    esp,0xc
c001aad4:	8b 10                	mov    edx,DWORD PTR [eax]
c001aad6:	50                   	push   eax
c001aad7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aada:	83 c4 10             	add    esp,0x10
c001aadd:	31 c0                	xor    eax,eax
c001aadf:	83 c4 0c             	add    esp,0xc
c001aae2:	c3                   	ret    
c001aae3:	90                   	nop

c001aae4 <SATA::powerSaving(PowerSavingLevel)>:
c001aae4:	c3                   	ret    
c001aae5:	90                   	nop

c001aae6 <SATA::open(int, int, void*)>:
c001aae6:	56                   	push   esi
c001aae7:	53                   	push   ebx
c001aae8:	50                   	push   eax
c001aae9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aaed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aaf1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001aafb:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001ab01:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ab0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab0f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ab19:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001ab1f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ab26:	e8 6a cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ab2b:	89 c6                	mov    esi,eax
c001ab2d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ab33:	81 c6 00 10 00 00    	add    esi,0x1000
c001ab39:	e8 57 cf fe ff       	call   c0007a95 <Phys::allocatePage()>
c001ab3e:	39 c6                	cmp    esi,eax
c001ab40:	74 10                	je     c001ab52 <SATA::open(int, int, void*)+0x6c>
c001ab42:	83 ec 0c             	sub    esp,0xc
c001ab45:	68 88 f5 01 c0       	push   0xc001f588
c001ab4a:	e8 28 57 ff ff       	call   c0010277 <KePanic(char const*)>
c001ab4f:	83 c4 10             	add    esp,0x10
c001ab52:	83 ec 0c             	sub    esp,0xc
c001ab55:	6a 02                	push   0x2
c001ab57:	e8 29 e7 fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001ab5c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ab62:	6a 03                	push   0x3
c001ab64:	50                   	push   eax
c001ab65:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001ab6b:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001ab71:	e8 82 ed fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ab76:	83 c4 14             	add    esp,0x14
c001ab79:	53                   	push   ebx
c001ab7a:	e8 eb 12 ff ff       	call   c000be6a <PhysicalDisk::startCache()>
c001ab7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab82:	e8 9b 23 ff ff       	call   c000cf22 <createPartitionsForDisk(PhysicalDisk*)>
c001ab87:	83 c4 14             	add    esp,0x14
c001ab8a:	31 c0                	xor    eax,eax
c001ab8c:	5b                   	pop    ebx
c001ab8d:	5e                   	pop    esi
c001ab8e:	c3                   	ret    
c001ab8f:	90                   	nop

c001ab90 <SATA::SATA()>:
c001ab90:	83 ec 0c             	sub    esp,0xc
c001ab93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab97:	83 ec 04             	sub    esp,0x4
c001ab9a:	68 00 02 00 00       	push   0x200
c001ab9f:	68 9c f5 01 c0       	push   0xc001f59c
c001aba4:	50                   	push   eax
c001aba5:	e8 58 12 ff ff       	call   c000be02 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001abaa:	83 c4 10             	add    esp,0x10
c001abad:	ba 0c f6 01 c0       	mov    edx,0xc001f60c
c001abb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb6:	89 10                	mov    DWORD PTR [eax],edx
c001abb8:	90                   	nop
c001abb9:	83 c4 0c             	add    esp,0xc
c001abbc:	c3                   	ret    
c001abbd:	90                   	nop

c001abbe <SATA::access(unsigned long long, int, void*, bool)>:
c001abbe:	55                   	push   ebp
c001abbf:	57                   	push   edi
c001abc0:	56                   	push   esi
c001abc1:	53                   	push   ebx
c001abc2:	83 ec 2c             	sub    esp,0x2c
c001abc5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001abc9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001abcd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001abd1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001abd5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001abd9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001abde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001abe2:	7e 10                	jle    c001abf4 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001abe4:	83 ec 0c             	sub    esp,0xc
c001abe7:	68 ac f5 01 c0       	push   0xc001f5ac
c001abec:	e8 86 56 ff ff       	call   c0010277 <KePanic(char const*)>
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001abfa:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001ac00:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ac06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ac0a:	89 d0                	mov    eax,edx
c001ac0c:	c1 e0 07             	shl    eax,0x7
c001ac0f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac13:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001ac1d:	51                   	push   ecx
c001ac1e:	8d 42 02             	lea    eax,[edx+0x2]
c001ac21:	51                   	push   ecx
c001ac22:	c1 e0 07             	shl    eax,0x7
c001ac25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ac2d:	50                   	push   eax
c001ac2e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001ac34:	e8 e7 ef ff ff       	call   c0019c20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001ac39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ac3d:	83 c4 10             	add    esp,0x10
c001ac40:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001ac45:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ac49:	0f 84 4f 01 00 00    	je     c001ad9e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ac4f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ac53:	c1 e0 09             	shl    eax,0x9
c001ac56:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ac5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ac5f:	74 0e                	je     c001ac6f <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001ac61:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001ac67:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001ac6b:	89 c1                	mov    ecx,eax
c001ac6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac6f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ac73:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ac79:	8d 42 02             	lea    eax,[edx+0x2]
c001ac7c:	c1 e0 07             	shl    eax,0x7
c001ac7f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001ac83:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac85:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ac8b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001ac91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac95:	c1 e1 05             	shl    ecx,0x5
c001ac98:	01 c8                	add    eax,ecx
c001ac9a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001ac9e:	83 e1 01             	and    ecx,0x1
c001aca1:	89 ce                	mov    esi,ecx
c001aca3:	8a 08                	mov    cl,BYTE PTR [eax]
c001aca5:	c1 e6 06             	shl    esi,0x6
c001aca8:	83 e1 bf             	and    ecx,0xffffffbf
c001acab:	09 f1                	or     ecx,esi
c001acad:	88 08                	mov    BYTE PTR [eax],cl
c001acaf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001acb1:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001acb7:	81 c9 05 00 01 00    	or     ecx,0x10005
c001acbd:	89 08                	mov    DWORD PTR [eax],ecx
c001acbf:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001acc5:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001accb:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001acd1:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001acd4:	50                   	push   eax
c001acd5:	68 90 00 00 00       	push   0x90
c001acda:	6a 00                	push   0x0
c001acdc:	56                   	push   esi
c001acdd:	e8 ee 57 fe ff       	call   c00004d0 <memset>
c001ace2:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ace8:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001acec:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001acf2:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001acf6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001acfa:	83 c4 10             	add    esp,0x10
c001acfd:	48                   	dec    eax
c001acfe:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ad03:	89 c1                	mov    ecx,eax
c001ad05:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ad0b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ad10:	09 c8                	or     eax,ecx
c001ad12:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ad18:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ad1b:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001ad22:	66 25 00 7f          	and    ax,0x7f00
c001ad26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad2a:	66 0d 27 80          	or     ax,0x8027
c001ad2e:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001ad33:	66 89 06             	mov    WORD PTR [esi],ax
c001ad36:	19 c0                	sbb    eax,eax
c001ad38:	83 e0 f0             	and    eax,0xfffffff0
c001ad3b:	83 c0 35             	add    eax,0x35
c001ad3e:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ad41:	89 e8                	mov    eax,ebp
c001ad43:	c1 e8 10             	shr    eax,0x10
c001ad46:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ad49:	89 e8                	mov    eax,ebp
c001ad4b:	c1 e8 18             	shr    eax,0x18
c001ad4e:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ad51:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ad55:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ad58:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad5c:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ad5f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ad63:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ad67:	89 d6                	mov    esi,edx
c001ad69:	31 c0                	xor    eax,eax
c001ad6b:	c1 e6 07             	shl    esi,0x7
c001ad6e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ad72:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ad78:	80 e1 88             	and    cl,0x88
c001ad7b:	74 0a                	je     c001ad87 <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001ad7d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad82:	74 0a                	je     c001ad8e <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001ad84:	40                   	inc    eax
c001ad85:	eb eb                	jmp    c001ad72 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001ad87:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ad8c:	75 17                	jne    c001ada5 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001ad8e:	83 ec 0c             	sub    esp,0xc
c001ad91:	68 e5 f5 01 c0       	push   0xc001f5e5
c001ad96:	e8 59 f8 fe ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001ad9b:	83 c4 10             	add    esp,0x10
c001ad9e:	b8 01 00 00 00       	mov    eax,0x1
c001ada3:	eb 5d                	jmp    c001ae02 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001ada5:	b8 01 00 00 00       	mov    eax,0x1
c001adaa:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001adae:	c1 e2 07             	shl    edx,0x7
c001adb1:	d3 e0                	shl    eax,cl
c001adb3:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001adb7:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001adbd:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001adc3:	85 c8                	test   eax,ecx
c001adc5:	74 16                	je     c001addd <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001adc7:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001adcd:	0f ba e1 1e          	bt     ecx,0x1e
c001add1:	73 ea                	jae    c001adbd <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001add3:	83 ec 0c             	sub    esp,0xc
c001add6:	68 f3 f5 01 c0       	push   0xc001f5f3
c001addb:	eb b9                	jmp    c001ad96 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001addd:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001ade3:	0f ba e0 1e          	bt     eax,0x1e
c001ade7:	72 b5                	jb     c001ad9e <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001ade9:	31 c0                	xor    eax,eax
c001adeb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001adf0:	75 10                	jne    c001ae02 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001adf2:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001adf8:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001adfc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae02:	83 c4 2c             	add    esp,0x2c
c001ae05:	5b                   	pop    ebx
c001ae06:	5e                   	pop    esi
c001ae07:	5f                   	pop    edi
c001ae08:	5d                   	pop    ebp
c001ae09:	c3                   	ret    

c001ae0a <SATA::read(unsigned long long, int, void*)>:
c001ae0a:	57                   	push   edi
c001ae0b:	b8 04 00 00 00       	mov    eax,0x4
c001ae10:	56                   	push   esi
c001ae11:	53                   	push   ebx
c001ae12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae1a:	8d 7a ff             	lea    edi,[edx-0x1]
c001ae1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae21:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ae25:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ae2b:	77 25                	ja     c001ae52 <SATA::read(unsigned long long, int, void*)+0x48>
c001ae2d:	b8 06 00 00 00       	mov    eax,0x6
c001ae32:	85 f6                	test   esi,esi
c001ae34:	74 1c                	je     c001ae52 <SATA::read(unsigned long long, int, void*)+0x48>
c001ae36:	50                   	push   eax
c001ae37:	50                   	push   eax
c001ae38:	6a 00                	push   0x0
c001ae3a:	56                   	push   esi
c001ae3b:	52                   	push   edx
c001ae3c:	53                   	push   ebx
c001ae3d:	51                   	push   ecx
c001ae3e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae42:	e8 77 fd ff ff       	call   c001abbe <SATA::access(unsigned long long, int, void*, bool)>
c001ae47:	83 c4 20             	add    esp,0x20
c001ae4a:	85 c0                	test   eax,eax
c001ae4c:	0f 95 c0             	setne  al
c001ae4f:	0f b6 c0             	movzx  eax,al
c001ae52:	5b                   	pop    ebx
c001ae53:	5e                   	pop    esi
c001ae54:	5f                   	pop    edi
c001ae55:	c3                   	ret    

c001ae56 <SATA::write(unsigned long long, int, void*)>:
c001ae56:	55                   	push   ebp
c001ae57:	b8 04 00 00 00       	mov    eax,0x4
c001ae5c:	57                   	push   edi
c001ae5d:	56                   	push   esi
c001ae5e:	53                   	push   ebx
c001ae5f:	83 ec 0c             	sub    esp,0xc
c001ae62:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ae66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ae6a:	8d 73 ff             	lea    esi,[ebx-0x1]
c001ae6d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae71:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001ae75:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001ae7b:	77 3d                	ja     c001aeba <SATA::write(unsigned long long, int, void*)+0x64>
c001ae7d:	b8 06 00 00 00       	mov    eax,0x6
c001ae82:	85 ed                	test   ebp,ebp
c001ae84:	74 34                	je     c001aeba <SATA::write(unsigned long long, int, void*)+0x64>
c001ae86:	c1 e3 09             	shl    ebx,0x9
c001ae89:	01 eb                	add    ebx,ebp
c001ae8b:	89 d6                	mov    esi,edx
c001ae8d:	89 cf                	mov    edi,ecx
c001ae8f:	83 c6 01             	add    esi,0x1
c001ae92:	83 d7 00             	adc    edi,0x0
c001ae95:	50                   	push   eax
c001ae96:	50                   	push   eax
c001ae97:	6a 01                	push   0x1
c001ae99:	55                   	push   ebp
c001ae9a:	81 c5 00 02 00 00    	add    ebp,0x200
c001aea0:	6a 01                	push   0x1
c001aea2:	51                   	push   ecx
c001aea3:	52                   	push   edx
c001aea4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aea8:	e8 11 fd ff ff       	call   c001abbe <SATA::access(unsigned long long, int, void*, bool)>
c001aead:	83 c4 20             	add    esp,0x20
c001aeb0:	89 f2                	mov    edx,esi
c001aeb2:	89 f9                	mov    ecx,edi
c001aeb4:	39 dd                	cmp    ebp,ebx
c001aeb6:	75 d3                	jne    c001ae8b <SATA::write(unsigned long long, int, void*)+0x35>
c001aeb8:	31 c0                	xor    eax,eax
c001aeba:	83 c4 0c             	add    esp,0xc
c001aebd:	5b                   	pop    ebx
c001aebe:	5e                   	pop    esi
c001aebf:	5f                   	pop    edi
c001aec0:	5d                   	pop    ebp
c001aec1:	c3                   	ret    

c001aec2 <SATAPI::write(unsigned long long, int, void*)>:
c001aec2:	b8 03 00 00 00       	mov    eax,0x3
c001aec7:	c3                   	ret    

c001aec8 <SATAPI::close(int, int, void*)>:
c001aec8:	83 ec 0c             	sub    esp,0xc
c001aecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aecf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001aed5:	85 c0                	test   eax,eax
c001aed7:	74 0c                	je     c001aee5 <SATAPI::close(int, int, void*)+0x1d>
c001aed9:	83 ec 0c             	sub    esp,0xc
c001aedc:	8b 10                	mov    edx,DWORD PTR [eax]
c001aede:	50                   	push   eax
c001aedf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001aee2:	83 c4 10             	add    esp,0x10
c001aee5:	31 c0                	xor    eax,eax
c001aee7:	83 c4 0c             	add    esp,0xc
c001aeea:	c3                   	ret    
c001aeeb:	90                   	nop

c001aeec <SATAPI::SATAPI()>:
c001aeec:	83 ec 0c             	sub    esp,0xc
c001aeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef3:	83 ec 04             	sub    esp,0x4
c001aef6:	68 00 08 00 00       	push   0x800
c001aefb:	68 3c f6 01 c0       	push   0xc001f63c
c001af00:	50                   	push   eax
c001af01:	e8 fc 0e ff ff       	call   c000be02 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001af06:	83 c4 10             	add    esp,0x10
c001af09:	ba 44 f7 01 c0       	mov    edx,0xc001f744
c001af0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af12:	89 10                	mov    DWORD PTR [eax],edx
c001af14:	90                   	nop
c001af15:	83 c4 0c             	add    esp,0xc
c001af18:	c3                   	ret    
c001af19:	90                   	nop

c001af1a <SATAPI::diskRemoved()>:
c001af1a:	c3                   	ret    
c001af1b:	90                   	nop

c001af1c <SATAPI::diskInserted()>:
c001af1c:	83 ec 18             	sub    esp,0x18
c001af1f:	68 48 f6 01 c0       	push   0xc001f648
c001af24:	e8 cb f6 fe ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001af29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af2d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001af34:	83 c4 1c             	add    esp,0x1c
c001af37:	c3                   	ret    

c001af38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001af38:	55                   	push   ebp
c001af39:	57                   	push   edi
c001af3a:	56                   	push   esi
c001af3b:	53                   	push   ebx
c001af3c:	83 ec 38             	sub    esp,0x38
c001af3f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001af43:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001af47:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001af4b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af4f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001af53:	68 60 f6 01 c0       	push   0xc001f660
c001af58:	e8 97 f6 fe ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001af5d:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001af63:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001af69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001af6d:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001af73:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af77:	83 c0 02             	add    eax,0x2
c001af7a:	c1 e0 07             	shl    eax,0x7
c001af7d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af89:	c1 e0 07             	shl    eax,0x7
c001af8c:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001af90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001af94:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001af9e:	58                   	pop    eax
c001af9f:	5a                   	pop    edx
c001afa0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001afa4:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001afaa:	e8 71 ec ff ff       	call   c0019c20 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001afaf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001afb3:	83 c4 10             	add    esp,0x10
c001afb6:	b8 01 00 00 00       	mov    eax,0x1
c001afbb:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001afc0:	0f 84 49 02 00 00    	je     c001b20f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001afc6:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001afcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001afd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001afd2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001afd8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001afde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001afe2:	c1 e1 05             	shl    ecx,0x5
c001afe5:	01 c8                	add    eax,ecx
c001afe7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001afe9:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001afef:	81 c9 25 00 01 00    	or     ecx,0x10025
c001aff5:	89 08                	mov    DWORD PTR [eax],ecx
c001aff7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001affd:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001b003:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001b009:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001b00c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001b00f:	50                   	push   eax
c001b010:	68 90 00 00 00       	push   0x90
c001b015:	6a 00                	push   0x0
c001b017:	53                   	push   ebx
c001b018:	e8 b3 54 fe ff       	call   c00004d0 <memset>
c001b01d:	b9 0c 00 00 00       	mov    ecx,0xc
c001b022:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001b026:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b028:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001b02e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001b032:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001b038:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001b03c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001b040:	48                   	dec    eax
c001b041:	25 ff ff 3f 00       	and    eax,0x3fffff
c001b046:	89 c1                	mov    ecx,eax
c001b048:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001b04e:	25 00 00 c0 ff       	and    eax,0xffc00000
c001b053:	09 c8                	or     eax,ecx
c001b055:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001b05b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001b05e:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001b065:	66 25 00 7f          	and    ax,0x7f00
c001b069:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b06d:	66 0d 27 80          	or     ax,0x8027
c001b071:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001b075:	66 89 03             	mov    WORD PTR [ebx],ax
c001b078:	89 d0                	mov    eax,edx
c001b07a:	c1 ea 18             	shr    edx,0x18
c001b07d:	c1 e8 10             	shr    eax,0x10
c001b080:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001b083:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001b086:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001b08a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001b08d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b091:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001b094:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b098:	83 c4 10             	add    esp,0x10
c001b09b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001b09f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0a3:	31 c0                	xor    eax,eax
c001b0a5:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001b0ab:	80 e1 88             	and    cl,0x88
c001b0ae:	74 0a                	je     c001b0ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001b0b0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0b5:	74 0a                	je     c001b0c1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001b0b7:	40                   	inc    eax
c001b0b8:	eb eb                	jmp    c001b0a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001b0ba:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001b0bf:	75 43                	jne    c001b104 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001b0c1:	83 ec 0c             	sub    esp,0xc
c001b0c4:	68 7a f6 01 c0       	push   0xc001f67a
c001b0c9:	e8 26 f5 fe ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001b0ce:	58                   	pop    eax
c001b0cf:	5a                   	pop    edx
c001b0d0:	68 8f f6 01 c0       	push   0xc001f68f
c001b0d5:	ff 35 04 1f 02 c0    	push   DWORD PTR ds:0xc0021f04
c001b0db:	e8 56 d6 fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001b0e0:	59                   	pop    ecx
c001b0e1:	5b                   	pop    ebx
c001b0e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b0e6:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b0ec:	e8 c9 eb ff ff       	call   c0019cba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001b0f1:	5e                   	pop    esi
c001b0f2:	5f                   	pop    edi
c001b0f3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001b0f7:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001b0fd:	e8 98 eb ff ff       	call   c0019c9a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001b102:	eb 48                	jmp    c001b14c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001b104:	be 01 00 00 00       	mov    esi,0x1
c001b109:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001b10d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b111:	d3 e6                	shl    esi,cl
c001b113:	c1 e7 07             	shl    edi,0x7
c001b116:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001b11c:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001b121:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001b125:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001b12b:	85 c6                	test   esi,eax
c001b12d:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001b133:	0f 84 a3 00 00 00    	je     c001b1dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001b139:	0f ba e0 1e          	bt     eax,0x1e
c001b13d:	73 1a                	jae    c001b159 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001b13f:	83 ec 0c             	sub    esp,0xc
c001b142:	68 a1 f6 01 c0       	push   0xc001f6a1
c001b147:	e8 a8 f4 fe ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001b14c:	83 c4 10             	add    esp,0x10
c001b14f:	b8 01 00 00 00       	mov    eax,0x1
c001b154:	e9 b6 00 00 00       	jmp    c001b20f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001b159:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001b15f:	83 f8 0d             	cmp    eax,0xd
c001b162:	77 0a                	ja     c001b16e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001b164:	83 ec 0c             	sub    esp,0xc
c001b167:	68 c8 00 00 00       	push   0xc8
c001b16c:	eb 28                	jmp    c001b196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b16e:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001b174:	83 f8 0d             	cmp    eax,0xd
c001b177:	77 0a                	ja     c001b183 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001b179:	83 ec 0c             	sub    esp,0xc
c001b17c:	68 58 02 00 00       	push   0x258
c001b181:	eb 13                	jmp    c001b196 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001b183:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001b189:	83 f8 06             	cmp    eax,0x6
c001b18c:	77 10                	ja     c001b19e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001b18e:	83 ec 0c             	sub    esp,0xc
c001b191:	68 dc 05 00 00       	push   0x5dc
c001b196:	e8 d1 89 ff ff       	call   c0013b6c <milliTenthSleep(unsigned int)>
c001b19b:	83 c4 10             	add    esp,0x10
c001b19e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001b1a2:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001b1a5:	75 06                	jne    c001b1ad <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001b1a7:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001b1ab:	74 15                	je     c001b1c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b1ad:	83 fb 06             	cmp    ebx,0x6
c001b1b0:	77 10                	ja     c001b1c2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001b1b2:	83 ec 0c             	sub    esp,0xc
c001b1b5:	68 c4 09 00 00       	push   0x9c4
c001b1ba:	e8 ad 89 ff ff       	call   c0013b6c <milliTenthSleep(unsigned int)>
c001b1bf:	83 c4 10             	add    esp,0x10
c001b1c2:	43                   	inc    ebx
c001b1c3:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001b1c9:	0f 85 56 ff ff ff    	jne    c001b125 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001b1cf:	83 ec 0c             	sub    esp,0xc
c001b1d2:	68 b4 f6 01 c0       	push   0xc001f6b4
c001b1d7:	e9 6b ff ff ff       	jmp    c001b147 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b1dc:	0f ba e0 1e          	bt     eax,0x1e
c001b1e0:	73 0d                	jae    c001b1ef <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001b1e2:	83 ec 0c             	sub    esp,0xc
c001b1e5:	68 c8 f6 01 c0       	push   0xc001f6c8
c001b1ea:	e9 58 ff ff ff       	jmp    c001b147 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001b1ef:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001b1f4:	74 17                	je     c001b20d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b1f6:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001b1fb:	74 10                	je     c001b20d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001b1fd:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001b203:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001b207:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b20b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b20d:	31 c0                	xor    eax,eax
c001b20f:	83 c4 2c             	add    esp,0x2c
c001b212:	5b                   	pop    ebx
c001b213:	5e                   	pop    esi
c001b214:	5f                   	pop    edi
c001b215:	5d                   	pop    ebp
c001b216:	c3                   	ret    
c001b217:	90                   	nop

c001b218 <SATAPI::eject()>:
c001b218:	57                   	push   edi
c001b219:	b9 03 00 00 00       	mov    ecx,0x3
c001b21e:	83 ec 18             	sub    esp,0x18
c001b221:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b225:	fc                   	cld    
c001b226:	31 c0                	xor    eax,eax
c001b228:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b22a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001b22f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001b234:	50                   	push   eax
c001b235:	6a 00                	push   0x0
c001b237:	6a 00                	push   0x0
c001b239:	6a 00                	push   0x0
c001b23b:	6a 00                	push   0x0
c001b23d:	6a 02                	push   0x2
c001b23f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b243:	50                   	push   eax
c001b244:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b248:	e8 eb fc ff ff       	call   c001af38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b24d:	31 c0                	xor    eax,eax
c001b24f:	83 c4 38             	add    esp,0x38
c001b252:	5f                   	pop    edi
c001b253:	c3                   	ret    

c001b254 <SATAPI::detectMedia()>:
c001b254:	53                   	push   ebx
c001b255:	83 ec 14             	sub    esp,0x14
c001b258:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b25c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001b262:	e8 81 23 ff ff       	call   c000d5e8 <VCache::writeWriteBuffer()>
c001b267:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001b26d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b271:	83 c4 18             	add    esp,0x18
c001b274:	5b                   	pop    ebx
c001b275:	e9 5e 23 ff ff       	jmp    c000d5d8 <VCache::invalidateReadBuffer()>

c001b27a <SATAPI::open(int, int, void*)>:
c001b27a:	56                   	push   esi
c001b27b:	53                   	push   ebx
c001b27c:	51                   	push   ecx
c001b27d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b281:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b285:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001b28f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001b295:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001b29f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b2a3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001b2ad:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001b2b3:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001b2ba:	e8 d6 c7 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b2bf:	89 c6                	mov    esi,eax
c001b2c1:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001b2c7:	81 c6 00 10 00 00    	add    esi,0x1000
c001b2cd:	e8 c3 c7 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001b2d2:	39 c6                	cmp    esi,eax
c001b2d4:	74 10                	je     c001b2e6 <SATAPI::open(int, int, void*)+0x6c>
c001b2d6:	83 ec 0c             	sub    esp,0xc
c001b2d9:	68 dd f6 01 c0       	push   0xc001f6dd
c001b2de:	e8 94 4f ff ff       	call   c0010277 <KePanic(char const*)>
c001b2e3:	83 c4 10             	add    esp,0x10
c001b2e6:	83 ec 0c             	sub    esp,0xc
c001b2e9:	6a 02                	push   0x2
c001b2eb:	e8 95 df fe ff       	call   c0009285 <Virt::allocateKernelVirtualPages(int)>
c001b2f0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001b2f6:	6a 03                	push   0x3
c001b2f8:	50                   	push   eax
c001b2f9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001b2ff:	ff 35 b0 1f 02 c0    	push   DWORD PTR ds:0xc0021fb0
c001b305:	e8 ee e5 fe ff       	call   c00098f8 <VAS::mapPage(unsigned long, unsigned long, int)>
c001b30a:	83 c4 14             	add    esp,0x14
c001b30d:	68 74 01 00 00       	push   0x174
c001b312:	e8 a2 c4 fe ff       	call   c00077b9 <malloc>
c001b317:	83 c4 0c             	add    esp,0xc
c001b31a:	89 c6                	mov    esi,eax
c001b31c:	6a 00                	push   0x0
c001b31e:	68 ff ff ff 7f       	push   0x7fffffff
c001b323:	6a 00                	push   0x0
c001b325:	6a 00                	push   0x0
c001b327:	53                   	push   ebx
c001b328:	68 f3 f6 01 c0       	push   0xc001f6f3
c001b32d:	50                   	push   eax
c001b32e:	e8 bb 17 ff ff       	call   c000caee <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001b333:	83 c4 14             	add    esp,0x14
c001b336:	56                   	push   esi
c001b337:	e8 68 18 ff ff       	call   c000cba4 <LogicalDisk::assignDriveLetter()>
c001b33c:	5a                   	pop    edx
c001b33d:	0f be c0             	movsx  eax,al
c001b340:	59                   	pop    ecx
c001b341:	50                   	push   eax
c001b342:	68 40 f5 01 c0       	push   0xc001f540
c001b347:	e8 a8 f2 fe ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001b34c:	58                   	pop    eax
c001b34d:	5a                   	pop    edx
c001b34e:	56                   	push   esi
c001b34f:	53                   	push   ebx
c001b350:	e8 df 06 ff ff       	call   c000ba34 <Device::addChild(Device*)>
c001b355:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001b35b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b35e:	e8 07 0b ff ff       	call   c000be6a <PhysicalDisk::startCache()>
c001b363:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001b36a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b36d:	e8 e2 fe ff ff       	call   c001b254 <SATAPI::detectMedia()>
c001b372:	83 c4 14             	add    esp,0x14
c001b375:	31 c0                	xor    eax,eax
c001b377:	5b                   	pop    ebx
c001b378:	5e                   	pop    esi
c001b379:	c3                   	ret    

c001b37a <SATAPI::read(unsigned long long, int, void*)>:
c001b37a:	57                   	push   edi
c001b37b:	56                   	push   esi
c001b37c:	53                   	push   ebx
c001b37d:	83 ec 3c             	sub    esp,0x3c
c001b380:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b384:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001b388:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001b38c:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001b390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b394:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b398:	68 01 f7 01 c0       	push   0xc001f701
c001b39d:	e8 52 f2 fe ff       	call   c000a5f4 <Dbg::kprintf(char const*, ...)>
c001b3a2:	83 c4 10             	add    esp,0x10
c001b3a5:	83 fe 04             	cmp    esi,0x4
c001b3a8:	7e 10                	jle    c001b3ba <SATAPI::read(unsigned long long, int, void*)+0x40>
c001b3aa:	83 ec 0c             	sub    esp,0xc
c001b3ad:	68 12 f7 01 c0       	push   0xc001f712
c001b3b2:	e8 c0 4e ff ff       	call   c0010277 <KePanic(char const*)>
c001b3b7:	83 c4 10             	add    esp,0x10
c001b3ba:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001b3c0:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001b3c6:	51                   	push   ecx
c001b3c7:	50                   	push   eax
c001b3c8:	83 c0 02             	add    eax,0x2
c001b3cb:	c1 e0 07             	shl    eax,0x7
c001b3ce:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001b3d4:	50                   	push   eax
c001b3d5:	52                   	push   edx
c001b3d6:	e8 09 e9 ff ff       	call   c0019ce4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001b3db:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001b3df:	b9 03 00 00 00       	mov    ecx,0x3
c001b3e4:	fc                   	cld    
c001b3e5:	31 c0                	xor    eax,eax
c001b3e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b3e9:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001b3ee:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001b3f3:	83 c4 0c             	add    esp,0xc
c001b3f6:	6a 00                	push   0x0
c001b3f8:	6a 00                	push   0x0
c001b3fa:	6a 00                	push   0x0
c001b3fc:	6a 00                	push   0x0
c001b3fe:	6a 02                	push   0x2
c001b400:	8d 44 24 30          	lea    eax,[esp+0x30]
c001b404:	50                   	push   eax
c001b405:	53                   	push   ebx
c001b406:	e8 2d fb ff ff       	call   c001af38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b40b:	83 c4 20             	add    esp,0x20
c001b40e:	85 c0                	test   eax,eax
c001b410:	75 44                	jne    c001b456 <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001b412:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b416:	b9 03 00 00 00       	mov    ecx,0x3
c001b41b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001b41d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b421:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001b426:	0f c8                	bswap  eax
c001b428:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001b42c:	89 f0                	mov    eax,esi
c001b42e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b432:	50                   	push   eax
c001b433:	56                   	push   esi
c001b434:	c1 e6 0b             	shl    esi,0xb
c001b437:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b43b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b43f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b443:	56                   	push   esi
c001b444:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001b448:	50                   	push   eax
c001b449:	53                   	push   ebx
c001b44a:	e8 e9 fa ff ff       	call   c001af38 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001b44f:	83 c4 20             	add    esp,0x20
c001b452:	85 c0                	test   eax,eax
c001b454:	74 14                	je     c001b46a <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001b456:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b45a:	83 ec 0c             	sub    esp,0xc
c001b45d:	53                   	push   ebx
c001b45e:	e8 f1 fd ff ff       	call   c001b254 <SATAPI::detectMedia()>
c001b463:	83 c4 10             	add    esp,0x10
c001b466:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b46a:	83 c4 30             	add    esp,0x30
c001b46d:	5b                   	pop    ebx
c001b46e:	5e                   	pop    esi
c001b46f:	5f                   	pop    edi
c001b470:	c3                   	ret    
c001b471:	90                   	nop

c001b472 <IOAPIC::close(int, int, void*)>:
c001b472:	b8 00 00 00 00       	mov    eax,0x0
c001b477:	c3                   	ret    

c001b478 <apicGetBase()>:
c001b478:	55                   	push   ebp
c001b479:	89 e5                	mov    ebp,esp
c001b47b:	83 ec 18             	sub    esp,0x18
c001b47e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b483:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001b489:	83 e0 08             	and    eax,0x8
c001b48c:	84 c0                	test   al,al
c001b48e:	75 07                	jne    c001b497 <apicGetBase()+0x1f>
c001b490:	b8 00 00 00 00       	mov    eax,0x0
c001b495:	eb 21                	jmp    c001b4b8 <apicGetBase()+0x40>
c001b497:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b49c:	83 ec 08             	sub    esp,0x8
c001b49f:	6a 1b                	push   0x1b
c001b4a1:	50                   	push   eax
c001b4a2:	e8 4b b9 fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001b4a7:	83 c4 10             	add    esp,0x10
c001b4aa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b4ad:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001b4b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b4b3:	25 00 00 ff ff       	and    eax,0xffff0000
c001b4b8:	c9                   	leave  
c001b4b9:	c3                   	ret    

c001b4ba <IOAPIC::IOAPIC()>:
c001b4ba:	83 ec 0c             	sub    esp,0xc
c001b4bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4c1:	83 ec 08             	sub    esp,0x8
c001b4c4:	68 74 f7 01 c0       	push   0xc001f774
c001b4c9:	50                   	push   eax
c001b4ca:	e8 fd 06 ff ff       	call   c000bbcc <Device::Device(char const*)>
c001b4cf:	83 c4 10             	add    esp,0x10
c001b4d2:	ba 84 f7 01 c0       	mov    edx,0xc001f784
c001b4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4db:	89 10                	mov    DWORD PTR [eax],edx
c001b4dd:	90                   	nop
c001b4de:	83 c4 0c             	add    esp,0xc
c001b4e1:	c3                   	ret    

c001b4e2 <apicOpen()>:
c001b4e2:	55                   	push   ebp
c001b4e3:	89 e5                	mov    ebp,esp
c001b4e5:	53                   	push   ebx
c001b4e6:	83 ec 34             	sub    esp,0x34
c001b4e9:	a0 a0 5b 02 c0       	mov    al,ds:0xc0025ba0
c001b4ee:	83 f0 01             	xor    eax,0x1
c001b4f1:	84 c0                	test   al,al
c001b4f3:	0f 84 9d 00 00 00    	je     c001b596 <apicOpen()+0xb4>
c001b4f9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b4fd:	a0 80 47 02 c0       	mov    al,ds:0xc0024780
c001b502:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b505:	0f 83 84 00 00 00    	jae    c001b58f <apicOpen()+0xad>
c001b50b:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b512:	83 ec 0c             	sub    esp,0xc
c001b515:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b518:	e8 9c c2 fe ff       	call   c00077b9 <malloc>
c001b51d:	83 c4 10             	add    esp,0x10
c001b520:	89 c3                	mov    ebx,eax
c001b522:	83 ec 0c             	sub    esp,0xc
c001b525:	53                   	push   ebx
c001b526:	e8 8f ff ff ff       	call   c001b4ba <IOAPIC::IOAPIC()>
c001b52b:	83 c4 10             	add    esp,0x10
c001b52e:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b531:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b534:	25 ff 00 00 00       	and    eax,0xff
c001b539:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b53c:	89 14 85 80 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda480],edx
c001b543:	a1 60 5b 02 c0       	mov    eax,ds:0xc0025b60
c001b548:	40                   	inc    eax
c001b549:	a3 60 5b 02 c0       	mov    ds:0xc0025b60,eax
c001b54e:	a1 b8 1e 02 c0       	mov    eax,ds:0xc0021eb8
c001b553:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b559:	83 ec 08             	sub    esp,0x8
c001b55c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b55f:	50                   	push   eax
c001b560:	e8 cf 04 ff ff       	call   c000ba34 <Device::addChild(Device*)>
c001b565:	83 c4 10             	add    esp,0x10
c001b568:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b56b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b56d:	83 c0 08             	add    eax,0x8
c001b570:	8b 10                	mov    edx,DWORD PTR [eax]
c001b572:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b575:	25 ff 00 00 00       	and    eax,0xff
c001b57a:	6a 00                	push   0x0
c001b57c:	6a 00                	push   0x0
c001b57e:	50                   	push   eax
c001b57f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b582:	ff d2                	call   edx
c001b584:	83 c4 10             	add    esp,0x10
c001b587:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b58a:	e9 6e ff ff ff       	jmp    c001b4fd <apicOpen()+0x1b>
c001b58f:	c6 05 a0 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025ba0,0x1
c001b596:	e8 dd fe ff ff       	call   c001b478 <apicGetBase()>
c001b59b:	05 f0 00 00 00       	add    eax,0xf0
c001b5a0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b5a3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5a6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5a8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b5ab:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b5b2:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b5b9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b5bc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b5bf:	89 10                	mov    DWORD PTR [eax],edx
c001b5c1:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b5c8:	a1 d0 46 02 c0       	mov    eax,ds:0xc00246d0
c001b5cd:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b5d0:	7d 70                	jge    c001b642 <apicOpen()+0x160>
c001b5d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5d5:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b5dc:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b5df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5e2:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b5e9:	c1 e8 08             	shr    eax,0x8
c001b5ec:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b5f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b5f3:	8b 04 85 e0 46 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb920]
c001b5fa:	c1 e8 18             	shr    eax,0x18
c001b5fd:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b600:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b604:	75 37                	jne    c001b63d <apicOpen()+0x15b>
c001b606:	e8 6d fe ff ff       	call   c001b478 <apicGetBase()>
c001b60b:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b60f:	75 07                	jne    c001b618 <apicOpen()+0x136>
c001b611:	ba 60 03 00 00       	mov    edx,0x360
c001b616:	eb 05                	jmp    c001b61d <apicOpen()+0x13b>
c001b618:	ba 50 03 00 00       	mov    edx,0x350
c001b61d:	01 d0                	add    eax,edx
c001b61f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b622:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b625:	8b 00                	mov    eax,DWORD PTR [eax]
c001b627:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b62a:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b631:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b635:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b638:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b63b:	89 10                	mov    DWORD PTR [eax],edx
c001b63d:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b640:	eb 86                	jmp    c001b5c8 <apicOpen()+0xe6>
c001b642:	90                   	nop
c001b643:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b646:	c9                   	leave  
c001b647:	c3                   	ret    

c001b648 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b648:	55                   	push   ebp
c001b649:	89 e5                	mov    ebp,esp
c001b64b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b64e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b654:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b657:	72 1d                	jb     c001b676 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b65c:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b665:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b66b:	01 d0                	add    eax,edx
c001b66d:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b670:	73 04                	jae    c001b676 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b672:	b0 01                	mov    al,0x1
c001b674:	eb 02                	jmp    c001b678 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b676:	b0 00                	mov    al,0x0
c001b678:	5d                   	pop    ebp
c001b679:	c3                   	ret    

c001b67a <IOAPIC::read(int)>:
c001b67a:	55                   	push   ebp
c001b67b:	89 e5                	mov    ebp,esp
c001b67d:	83 ec 10             	sub    esp,0x10
c001b680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b683:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b689:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b68c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b68f:	31 d2                	xor    edx,edx
c001b691:	88 c2                	mov    dl,al
c001b693:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b696:	89 10                	mov    DWORD PTR [eax],edx
c001b698:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b69b:	83 c0 10             	add    eax,0x10
c001b69e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b6a0:	c9                   	leave  
c001b6a1:	c3                   	ret    

c001b6a2 <IOAPIC::open(int, int, void*)>:
c001b6a2:	55                   	push   ebp
c001b6a3:	89 e5                	mov    ebp,esp
c001b6a5:	57                   	push   edi
c001b6a6:	56                   	push   esi
c001b6a7:	53                   	push   ebx
c001b6a8:	83 ec 04             	sub    esp,0x4
c001b6ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b6b1:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b6b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6c0:	8b 14 85 c0 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb840]
c001b6c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ca:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6d3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b6d9:	8b 14 85 40 48 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb7c0]
c001b6e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6e3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b6e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6ec:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b6f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b6f5:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b6fb:	89 c6                	mov    esi,eax
c001b6fd:	81 e6 ff 00 00 00    	and    esi,0xff
c001b703:	89 d0                	mov    eax,edx
c001b705:	ba 00 00 00 00       	mov    edx,0x0
c001b70a:	89 c7                	mov    edi,eax
c001b70c:	83 e7 ff             	and    edi,0xffffffff
c001b70f:	89 f9                	mov    ecx,edi
c001b711:	89 d0                	mov    eax,edx
c001b713:	25 ff 00 00 00       	and    eax,0xff
c001b718:	89 c3                	mov    ebx,eax
c001b71a:	89 c8                	mov    eax,ecx
c001b71c:	89 da                	mov    edx,ebx
c001b71e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b721:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b724:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b728:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b72c:	83 e0 00             	and    eax,0x0
c001b72f:	09 d0                	or     eax,edx
c001b731:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b738:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b73e:	8d 50 01             	lea    edx,[eax+0x1]
c001b741:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b744:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b74a:	31 d2                	xor    edx,edx
c001b74c:	88 c2                	mov    dl,al
c001b74e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b751:	83 c2 08             	add    edx,0x8
c001b754:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b758:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b75e:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b764:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b768:	6a 01                	push   0x1
c001b76a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b76d:	e8 08 ff ff ff       	call   c001b67a <IOAPIC::read(int)>
c001b772:	83 c4 08             	add    esp,0x8
c001b775:	c1 f8 10             	sar    eax,0x10
c001b778:	25 ff 00 00 00       	and    eax,0xff
c001b77d:	8d 50 01             	lea    edx,[eax+0x1]
c001b780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b783:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b789:	b8 00 00 00 00       	mov    eax,0x0
c001b78e:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b791:	5b                   	pop    ebx
c001b792:	5e                   	pop    esi
c001b793:	5f                   	pop    edi
c001b794:	5d                   	pop    ebp
c001b795:	c3                   	ret    

c001b796 <IOAPIC::write(int, int)>:
c001b796:	55                   	push   ebp
c001b797:	89 e5                	mov    ebp,esp
c001b799:	83 ec 10             	sub    esp,0x10
c001b79c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b79f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b7a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b7a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7ab:	31 d2                	xor    edx,edx
c001b7ad:	88 c2                	mov    dl,al
c001b7af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7b2:	89 10                	mov    DWORD PTR [eax],edx
c001b7b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b7b7:	8d 50 10             	lea    edx,[eax+0x10]
c001b7ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7bd:	89 02                	mov    DWORD PTR [edx],eax
c001b7bf:	90                   	nop
c001b7c0:	c9                   	leave  
c001b7c1:	c3                   	ret    

c001b7c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b7c2:	55                   	push   ebp
c001b7c3:	89 e5                	mov    ebp,esp
c001b7c5:	53                   	push   ebx
c001b7c6:	83 ec 2c             	sub    esp,0x2c
c001b7c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b7cc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b7cf:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b7d2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b7d5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b7d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7db:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b7de:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b7e1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b7e4:	88 d8                	mov    al,bl
c001b7e6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b7e9:	88 c8                	mov    al,cl
c001b7eb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b7ee:	88 d0                	mov    al,dl
c001b7f0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b7f3:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b7f6:	25 ff 00 00 00       	and    eax,0xff
c001b7fb:	83 c0 08             	add    eax,0x8
c001b7fe:	01 c0                	add    eax,eax
c001b800:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b803:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b806:	25 ff 00 00 00       	and    eax,0xff
c001b80b:	83 c0 08             	add    eax,0x8
c001b80e:	01 c0                	add    eax,eax
c001b810:	40                   	inc    eax
c001b811:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b814:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b817:	50                   	push   eax
c001b818:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b81b:	e8 5a fe ff ff       	call   c001b67a <IOAPIC::read(int)>
c001b820:	83 c4 08             	add    esp,0x8
c001b823:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b826:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b82d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b830:	c1 e0 18             	shl    eax,0x18
c001b833:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b836:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b839:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b83c:	52                   	push   edx
c001b83d:	50                   	push   eax
c001b83e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b841:	e8 50 ff ff ff       	call   c001b796 <IOAPIC::write(int, int)>
c001b846:	83 c4 0c             	add    esp,0xc
c001b849:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b84c:	50                   	push   eax
c001b84d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b850:	e8 25 fe ff ff       	call   c001b67a <IOAPIC::read(int)>
c001b855:	83 c4 08             	add    esp,0x8
c001b858:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b85b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b862:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b869:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b870:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b874:	74 09                	je     c001b87f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b876:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b87d:	eb 07                	jmp    c001b886 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b87f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b886:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b88a:	74 09                	je     c001b895 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b88c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b893:	eb 07                	jmp    c001b89c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b895:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b89c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b8a3:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b8a6:	25 ff 00 00 00       	and    eax,0xff
c001b8ab:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b8ae:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b8b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b8b4:	52                   	push   edx
c001b8b5:	50                   	push   eax
c001b8b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b8b9:	e8 d8 fe ff ff       	call   c001b796 <IOAPIC::write(int, int)>
c001b8be:	83 c4 0c             	add    esp,0xc
c001b8c1:	90                   	nop
c001b8c2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b8c5:	c9                   	leave  
c001b8c6:	c3                   	ret    
c001b8c7:	90                   	nop

c001b8c8 <APICTimer::close(int, int, void*)>:
c001b8c8:	b8 00 00 00 00       	mov    eax,0x0
c001b8cd:	c3                   	ret    
c001b8ce:	66 90                	xchg   ax,ax

c001b8d0 <apicTimerHandler(regs*, void*)>:
c001b8d0:	83 ec 0c             	sub    esp,0xc
c001b8d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8d7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b8d9:	b8 10 27 00 00       	mov    eax,0x2710
c001b8de:	ba 00 00 00 00       	mov    edx,0x0
c001b8e3:	f7 f1                	div    ecx
c001b8e5:	83 ec 0c             	sub    esp,0xc
c001b8e8:	50                   	push   eax
c001b8e9:	e8 1a 1a ff ff       	call   c000d308 <timerHandler(unsigned int)>
c001b8ee:	83 c4 10             	add    esp,0x10
c001b8f1:	90                   	nop
c001b8f2:	83 c4 0c             	add    esp,0xc
c001b8f5:	c3                   	ret    
c001b8f6:	66 90                	xchg   ax,ax

c001b8f8 <APICTimer::open(int, int, void*)>:
c001b8f8:	83 ec 0c             	sub    esp,0xc
c001b8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001b901:	83 c0 24             	add    eax,0x24
c001b904:	8b 00                	mov    eax,DWORD PTR [eax]
c001b906:	83 ec 08             	sub    esp,0x8
c001b909:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b90d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b911:	ff d0                	call   eax
c001b913:	83 c4 10             	add    esp,0x10
c001b916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b91a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b91e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b928:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b92c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b936:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b93c:	83 ec 0c             	sub    esp,0xc
c001b93f:	51                   	push   ecx
c001b940:	6a 01                	push   0x1
c001b942:	68 d0 b8 01 c0       	push   0xc001b8d0
c001b947:	52                   	push   edx
c001b948:	50                   	push   eax
c001b949:	e8 92 00 ff ff       	call   c000b9e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b94e:	83 c4 20             	add    esp,0x20
c001b951:	89 c2                	mov    edx,eax
c001b953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b957:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b95d:	b8 00 00 00 00       	mov    eax,0x0
c001b962:	83 c4 0c             	add    esp,0xc
c001b965:	c3                   	ret    
c001b966:	66 90                	xchg   ax,ax

c001b968 <APICTimer::write(int)>:
c001b968:	83 ec 0c             	sub    esp,0xc
c001b96b:	83 ec 0c             	sub    esp,0xc
c001b96e:	68 a8 f7 01 c0       	push   0xc001f7a8
c001b973:	e8 ff 48 ff ff       	call   c0010277 <KePanic(char const*)>
c001b978:	83 c4 10             	add    esp,0x10
c001b97b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b97f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b983:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b989:	90                   	nop
c001b98a:	83 c4 0c             	add    esp,0xc
c001b98d:	c3                   	ret    
c001b98e:	66 90                	xchg   ax,ax

c001b990 <APICTimer::APICTimer()>:
c001b990:	83 ec 0c             	sub    esp,0xc
c001b993:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b997:	83 ec 08             	sub    esp,0x8
c001b99a:	68 b8 f7 01 c0       	push   0xc001f7b8
c001b99f:	50                   	push   eax
c001b9a0:	e8 97 18 ff ff       	call   c000d23c <Timer::Timer(char const*)>
c001b9a5:	83 c4 10             	add    esp,0x10
c001b9a8:	ba cc f7 01 c0       	mov    edx,0xc001f7cc
c001b9ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9b1:	89 10                	mov    DWORD PTR [eax],edx
c001b9b3:	90                   	nop
c001b9b4:	83 c4 0c             	add    esp,0xc
c001b9b7:	c3                   	ret    

c001b9b8 <PIT::write(int)>:
c001b9b8:	83 ec 10             	sub    esp,0x10
c001b9bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9bf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b9c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b9c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9cd:	a3 a4 5b 02 c0       	mov    ds:0xc0025ba4,eax
c001b9d2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b9d7:	99                   	cdq    
c001b9d8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b9dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9e0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b9e7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b9ec:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b9f0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b9f5:	ee                   	out    dx,al
c001b9f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9fa:	25 ff 00 00 00       	and    eax,0xff
c001b9ff:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ba06:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ba0a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ba0e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ba13:	ee                   	out    dx,al
c001ba14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba18:	c1 f8 08             	sar    eax,0x8
c001ba1b:	25 ff 00 00 00       	and    eax,0xff
c001ba20:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001ba27:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ba2b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ba2f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001ba34:	ee                   	out    dx,al
c001ba35:	90                   	nop
c001ba36:	83 c4 10             	add    esp,0x10
c001ba39:	c3                   	ret    
c001ba3a:	66 90                	xchg   ax,ax

c001ba3c <pitHandler(regs*, void*)>:
c001ba3c:	83 ec 0c             	sub    esp,0xc
c001ba3f:	8b 0d a4 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba4
c001ba45:	b8 10 27 00 00       	mov    eax,0x2710
c001ba4a:	99                   	cdq    
c001ba4b:	f7 f9                	idiv   ecx
c001ba4d:	83 ec 0c             	sub    esp,0xc
c001ba50:	50                   	push   eax
c001ba51:	e8 b2 18 ff ff       	call   c000d308 <timerHandler(unsigned int)>
c001ba56:	83 c4 10             	add    esp,0x10
c001ba59:	90                   	nop
c001ba5a:	83 c4 0c             	add    esp,0xc
c001ba5d:	c3                   	ret    
c001ba5e:	66 90                	xchg   ax,ax

c001ba60 <PIT::open(int, int, void*)>:
c001ba60:	83 ec 0c             	sub    esp,0xc
c001ba63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba67:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba69:	83 c0 24             	add    eax,0x24
c001ba6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba6e:	83 ec 08             	sub    esp,0x8
c001ba71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba79:	ff d0                	call   eax
c001ba7b:	83 c4 10             	add    esp,0x10
c001ba7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba82:	83 ec 0c             	sub    esp,0xc
c001ba85:	6a 00                	push   0x0
c001ba87:	6a 01                	push   0x1
c001ba89:	68 3c ba 01 c0       	push   0xc001ba3c
c001ba8e:	6a 00                	push   0x0
c001ba90:	50                   	push   eax
c001ba91:	e8 4a ff fe ff       	call   c000b9e0 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ba96:	83 c4 20             	add    esp,0x20
c001ba99:	89 c2                	mov    edx,eax
c001ba9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba9f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001baa5:	b8 00 00 00 00       	mov    eax,0x0
c001baaa:	83 c4 0c             	add    esp,0xc
c001baad:	c3                   	ret    
c001baae:	66 90                	xchg   ax,ax

c001bab0 <PIT::close(int, int, void*)>:
c001bab0:	83 ec 0c             	sub    esp,0xc
c001bab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bab7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001bac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bac5:	6a 01                	push   0x1
c001bac7:	68 3c ba 01 c0       	push   0xc001ba3c
c001bacc:	6a 00                	push   0x0
c001bace:	50                   	push   eax
c001bacf:	e8 42 ff fe ff       	call   c000ba16 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001bad4:	83 c4 10             	add    esp,0x10
c001bad7:	b8 00 00 00 00       	mov    eax,0x0
c001badc:	83 c4 0c             	add    esp,0xc
c001badf:	c3                   	ret    

c001bae0 <PIT::PIT()>:
c001bae0:	83 ec 0c             	sub    esp,0xc
c001bae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae7:	83 ec 08             	sub    esp,0x8
c001baea:	68 f4 f7 01 c0       	push   0xc001f7f4
c001baef:	50                   	push   eax
c001baf0:	e8 47 17 ff ff       	call   c000d23c <Timer::Timer(char const*)>
c001baf5:	83 c4 10             	add    esp,0x10
c001baf8:	ba 1c f8 01 c0       	mov    edx,0xc001f81c
c001bafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb01:	89 10                	mov    DWORD PTR [eax],edx
c001bb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb07:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb0d:	31 d2                	xor    edx,edx
c001bb0f:	88 c2                	mov    dl,al
c001bb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb15:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001bb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb20:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb26:	31 d2                	xor    edx,edx
c001bb28:	88 c2                	mov    dl,al
c001bb2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001bb33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb3d:	8d 50 01             	lea    edx,[eax+0x1]
c001bb40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb44:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bb4a:	31 d2                	xor    edx,edx
c001bb4c:	88 c2                	mov    dl,al
c001bb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb52:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bb56:	83 e1 3f             	and    ecx,0x3f
c001bb59:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bb5d:	90                   	nop
c001bb5e:	83 c4 0c             	add    esp,0xc
c001bb61:	c3                   	ret    
c001bb62:	66 90                	xchg   ax,ax
c001bb64:	66 90                	xchg   ax,ax
c001bb66:	66 90                	xchg   ax,ax
c001bb68:	66 90                	xchg   ax,ax
c001bb6a:	66 90                	xchg   ax,ax
c001bb6c:	66 90                	xchg   ax,ax
c001bb6e:	66 90                	xchg   ax,ax

c001bb70 <avxDetect>:
c001bb70:	b8 01 00 00 00       	mov    eax,0x1
c001bb75:	0f a2                	cpuid  
c001bb77:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001bb7d:	74 15                	je     c001bb94 <avxDetect.noAVX>
c001bb7f:	b8 01 00 00 00       	mov    eax,0x1
c001bb84:	0f a2                	cpuid  
c001bb86:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001bb8c:	74 06                	je     c001bb94 <avxDetect.noAVX>
c001bb8e:	b8 01 00 00 00       	mov    eax,0x1
c001bb93:	c3                   	ret    

c001bb94 <avxDetect.noAVX>:
c001bb94:	b8 00 00 00 00       	mov    eax,0x0
c001bb99:	c3                   	ret    

c001bb9a <avxSave>:
c001bb9a:	53                   	push   ebx
c001bb9b:	52                   	push   edx
c001bb9c:	31 c0                	xor    eax,eax
c001bb9e:	48                   	dec    eax
c001bb9f:	89 c2                	mov    edx,eax
c001bba1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bba5:	0f ae 23             	xsave  [ebx]
c001bba8:	5a                   	pop    edx
c001bba9:	5b                   	pop    ebx
c001bbaa:	c3                   	ret    

c001bbab <avxLoad>:
c001bbab:	53                   	push   ebx
c001bbac:	52                   	push   edx
c001bbad:	31 c0                	xor    eax,eax
c001bbaf:	48                   	dec    eax
c001bbb0:	89 c2                	mov    edx,eax
c001bbb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bbb6:	0f ae 2b             	xrstor [ebx]
c001bbb9:	5a                   	pop    edx
c001bbba:	5b                   	pop    ebx
c001bbbb:	c3                   	ret    

c001bbbc <avxInit>:
c001bbbc:	e8 b7 02 00 00       	call   c001be78 <sseInit>
c001bbc1:	50                   	push   eax
c001bbc2:	51                   	push   ecx
c001bbc3:	0f 20 e0             	mov    eax,cr4
c001bbc6:	0d 00 00 04 00       	or     eax,0x40000
c001bbcb:	0f 22 e0             	mov    cr4,eax
c001bbce:	31 c9                	xor    ecx,ecx
c001bbd0:	0f 01 d0             	xgetbv 
c001bbd3:	0d 07 00 00 00       	or     eax,0x7
c001bbd8:	0f 01 d1             	xsetbv 
c001bbdb:	59                   	pop    ecx
c001bbdc:	58                   	pop    eax
c001bbdd:	c3                   	ret    

c001bbde <avxClose>:
c001bbde:	c3                   	ret    

c001bbdf <wouldSheSayYes>:
c001bbdf:	c3                   	ret    
c001bbe0:	49                   	dec    ecx
c001bbe1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001bbe5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001bbe9:	75 20                	jne    c001bc0b <isr0+0xb>
c001bbeb:	4e                   	dec    esi
c001bbec:	79 61                	jns    c001bc4f <isr7+0x3>
c001bbee:	68 2e 2e 2e 00       	push   0x2e2e2e
c001bbf3:	66 90                	xchg   ax,ax
c001bbf5:	66 90                	xchg   ax,ax
c001bbf7:	66 90                	xchg   ax,ax
c001bbf9:	66 90                	xchg   ax,ax
c001bbfb:	66 90                	xchg   ax,ax
c001bbfd:	66 90                	xchg   ax,ax
c001bbff:	90                   	nop

c001bc00 <isr0>:
c001bc00:	fa                   	cli    
c001bc01:	68 00 00 00 00       	push   0x0
c001bc06:	68 00 00 00 00       	push   0x0
c001bc0b:	e9 44 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc10 <isr1>:
c001bc10:	fa                   	cli    
c001bc11:	6a 00                	push   0x0
c001bc13:	6a 01                	push   0x1
c001bc15:	e9 3a 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc1a <isr2>:
c001bc1a:	fa                   	cli    
c001bc1b:	6a 00                	push   0x0
c001bc1d:	6a 02                	push   0x2
c001bc1f:	e9 30 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc24 <isr3>:
c001bc24:	fa                   	cli    
c001bc25:	6a 00                	push   0x0
c001bc27:	6a 03                	push   0x3
c001bc29:	e9 26 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc2e <isr4>:
c001bc2e:	fa                   	cli    
c001bc2f:	6a 00                	push   0x0
c001bc31:	6a 04                	push   0x4
c001bc33:	e9 1c 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc38 <isr5>:
c001bc38:	fa                   	cli    
c001bc39:	6a 00                	push   0x0
c001bc3b:	6a 05                	push   0x5
c001bc3d:	e9 12 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc42 <isr6>:
c001bc42:	fa                   	cli    
c001bc43:	6a 00                	push   0x0
c001bc45:	6a 06                	push   0x6
c001bc47:	e9 08 01 00 00       	jmp    c001bd54 <int_common_stub>

c001bc4c <isr7>:
c001bc4c:	fa                   	cli    
c001bc4d:	6a 00                	push   0x0
c001bc4f:	6a 07                	push   0x7
c001bc51:	e9 fe 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc56 <isr8>:
c001bc56:	fa                   	cli    
c001bc57:	6a 08                	push   0x8
c001bc59:	e9 f6 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc5e <isr9>:
c001bc5e:	fa                   	cli    
c001bc5f:	6a 00                	push   0x0
c001bc61:	6a 09                	push   0x9
c001bc63:	e9 ec 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc68 <isr10>:
c001bc68:	fa                   	cli    
c001bc69:	6a 0a                	push   0xa
c001bc6b:	e9 e4 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc70 <isr11>:
c001bc70:	fa                   	cli    
c001bc71:	6a 0b                	push   0xb
c001bc73:	e9 dc 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc78 <isr12>:
c001bc78:	fa                   	cli    
c001bc79:	6a 0c                	push   0xc
c001bc7b:	e9 d4 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc80 <isr13>:
c001bc80:	fa                   	cli    
c001bc81:	6a 0d                	push   0xd
c001bc83:	e9 cc 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc88 <isr14>:
c001bc88:	fa                   	cli    
c001bc89:	6a 0e                	push   0xe
c001bc8b:	e9 c4 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc90 <isr15>:
c001bc90:	fa                   	cli    
c001bc91:	6a 00                	push   0x0
c001bc93:	6a 0f                	push   0xf
c001bc95:	e9 ba 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bc9a <isr16>:
c001bc9a:	fa                   	cli    
c001bc9b:	6a 00                	push   0x0
c001bc9d:	6a 10                	push   0x10
c001bc9f:	e9 b0 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bca4 <isr17>:
c001bca4:	fa                   	cli    
c001bca5:	6a 00                	push   0x0
c001bca7:	6a 11                	push   0x11
c001bca9:	e9 a6 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcae <isr18>:
c001bcae:	fa                   	cli    
c001bcaf:	6a 00                	push   0x0
c001bcb1:	6a 12                	push   0x12
c001bcb3:	e9 9c 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcb8 <irq3>:
c001bcb8:	fa                   	cli    
c001bcb9:	6a 00                	push   0x0
c001bcbb:	6a 23                	push   0x23
c001bcbd:	e9 92 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcc2 <irq4>:
c001bcc2:	fa                   	cli    
c001bcc3:	6a 00                	push   0x0
c001bcc5:	6a 24                	push   0x24
c001bcc7:	e9 88 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bccc <irq5>:
c001bccc:	fa                   	cli    
c001bccd:	6a 00                	push   0x0
c001bccf:	6a 25                	push   0x25
c001bcd1:	e9 7e 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcd6 <irq6>:
c001bcd6:	fa                   	cli    
c001bcd7:	6a 00                	push   0x0
c001bcd9:	6a 26                	push   0x26
c001bcdb:	e9 74 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bce0 <irq7>:
c001bce0:	fa                   	cli    
c001bce1:	6a 00                	push   0x0
c001bce3:	6a 27                	push   0x27
c001bce5:	e9 6a 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcea <irq8>:
c001bcea:	fa                   	cli    
c001bceb:	6a 00                	push   0x0
c001bced:	6a 28                	push   0x28
c001bcef:	e9 60 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcf4 <irq9>:
c001bcf4:	fa                   	cli    
c001bcf5:	6a 00                	push   0x0
c001bcf7:	6a 29                	push   0x29
c001bcf9:	e9 56 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bcfe <irq10>:
c001bcfe:	fa                   	cli    
c001bcff:	6a 00                	push   0x0
c001bd01:	6a 2a                	push   0x2a
c001bd03:	e9 4c 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd08 <irq11>:
c001bd08:	fa                   	cli    
c001bd09:	6a 00                	push   0x0
c001bd0b:	6a 2b                	push   0x2b
c001bd0d:	e9 42 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd12 <irq12>:
c001bd12:	fa                   	cli    
c001bd13:	6a 00                	push   0x0
c001bd15:	6a 2c                	push   0x2c
c001bd17:	e9 38 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd1c <irq13>:
c001bd1c:	fa                   	cli    
c001bd1d:	6a 00                	push   0x0
c001bd1f:	6a 2d                	push   0x2d
c001bd21:	e9 2e 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd26 <irq14>:
c001bd26:	fa                   	cli    
c001bd27:	6a 00                	push   0x0
c001bd29:	6a 2e                	push   0x2e
c001bd2b:	e9 24 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd30 <irq15>:
c001bd30:	fa                   	cli    
c001bd31:	6a 00                	push   0x0
c001bd33:	6a 2f                	push   0x2f
c001bd35:	e9 1a 00 00 00       	jmp    c001bd54 <int_common_stub>

c001bd3a <irq1>:
c001bd3a:	fa                   	cli    
c001bd3b:	6a 00                	push   0x0
c001bd3d:	6a 21                	push   0x21
c001bd3f:	eb 13                	jmp    c001bd54 <int_common_stub>

c001bd41 <irq2>:
c001bd41:	fa                   	cli    
c001bd42:	6a 00                	push   0x0
c001bd44:	6a 22                	push   0x22
c001bd46:	eb 0c                	jmp    c001bd54 <int_common_stub>

c001bd48 <isr96>:
c001bd48:	6a 00                	push   0x0
c001bd4a:	6a 60                	push   0x60
c001bd4c:	fb                   	sti    
c001bd4d:	eb 37                	jmp    c001bd86 <syscall_common_stub>

c001bd4f <irq0>:
c001bd4f:	fa                   	cli    
c001bd50:	6a 00                	push   0x0
c001bd52:	6a 20                	push   0x20

c001bd54 <int_common_stub>:
c001bd54:	60                   	pusha  
c001bd55:	1e                   	push   ds
c001bd56:	06                   	push   es
c001bd57:	0f a0                	push   fs
c001bd59:	0f a8                	push   gs
c001bd5b:	66 b8 10 00          	mov    ax,0x10
c001bd5f:	66 8e d8             	mov    ds,ax
c001bd62:	66 8e c0             	mov    es,ax
c001bd65:	66 8e e0             	mov    fs,ax
c001bd68:	66 8e e8             	mov    gs,ax
c001bd6b:	54                   	push   esp
c001bd6c:	fc                   	cld    
c001bd6d:	e8 6e 01 ff ff       	call   c000bee0 <int_handler>
c001bd72:	81 c4 04 00 00 00    	add    esp,0x4
c001bd78:	0f a9                	pop    gs
c001bd7a:	0f a1                	pop    fs
c001bd7c:	07                   	pop    es
c001bd7d:	1f                   	pop    ds
c001bd7e:	61                   	popa   
c001bd7f:	81 c4 08 00 00 00    	add    esp,0x8
c001bd85:	cf                   	iret   

c001bd86 <syscall_common_stub>:
c001bd86:	60                   	pusha  
c001bd87:	1e                   	push   ds
c001bd88:	06                   	push   es
c001bd89:	0f a0                	push   fs
c001bd8b:	0f a8                	push   gs
c001bd8d:	66 b8 10 00          	mov    ax,0x10
c001bd91:	66 8e d8             	mov    ds,ax
c001bd94:	66 8e c0             	mov    es,ax
c001bd97:	66 8e e0             	mov    fs,ax
c001bd9a:	66 8e e8             	mov    gs,ax
c001bd9d:	54                   	push   esp
c001bd9e:	fc                   	cld    
c001bd9f:	e8 3c 01 ff ff       	call   c000bee0 <int_handler>
c001bda4:	81 c4 04 00 00 00    	add    esp,0x4
c001bdaa:	0f a9                	pop    gs
c001bdac:	0f a1                	pop    fs
c001bdae:	07                   	pop    es
c001bdaf:	1f                   	pop    ds
c001bdb0:	e8 16 4a ff ff       	call   c00107cb <KiCheckSignalZ>
c001bdb5:	3d 00 00 00 00       	cmp    eax,0x0
c001bdba:	74 1d                	je     c001bdd9 <syscall_common_stub.skipSignals>
c001bdbc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001bdc0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bdc4:	89 e3                	mov    ebx,esp
c001bdc6:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001bdc9:	51                   	push   ecx
c001bdca:	68 e1 bd 01 c0       	push   0xc001bde1
c001bdcf:	89 dc                	mov    esp,ebx
c001bdd1:	61                   	popa   
c001bdd2:	81 c4 08 00 00 00    	add    esp,0x8
c001bdd8:	cf                   	iret   

c001bdd9 <syscall_common_stub.skipSignals>:
c001bdd9:	61                   	popa   
c001bdda:	81 c4 08 00 00 00    	add    esp,0x8
c001bde0:	cf                   	iret   

c001bde1 <irq16>:
c001bde1:	fa                   	cli    
c001bde2:	6a 00                	push   0x0
c001bde4:	6a 30                	push   0x30
c001bde6:	e9 69 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bdeb <irq17>:
c001bdeb:	fa                   	cli    
c001bdec:	6a 00                	push   0x0
c001bdee:	6a 31                	push   0x31
c001bdf0:	e9 5f ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bdf5 <irq18>:
c001bdf5:	fa                   	cli    
c001bdf6:	6a 00                	push   0x0
c001bdf8:	6a 32                	push   0x32
c001bdfa:	e9 55 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001bdff <irq19>:
c001bdff:	fa                   	cli    
c001be00:	6a 00                	push   0x0
c001be02:	6a 33                	push   0x33
c001be04:	e9 4b ff ff ff       	jmp    c001bd54 <int_common_stub>

c001be09 <irq20>:
c001be09:	fa                   	cli    
c001be0a:	6a 00                	push   0x0
c001be0c:	6a 34                	push   0x34
c001be0e:	e9 41 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001be13 <irq21>:
c001be13:	fa                   	cli    
c001be14:	6a 00                	push   0x0
c001be16:	6a 35                	push   0x35
c001be18:	e9 37 ff ff ff       	jmp    c001bd54 <int_common_stub>

c001be1d <irq22>:
c001be1d:	fa                   	cli    
c001be1e:	6a 00                	push   0x0
c001be20:	6a 36                	push   0x36
c001be22:	e9 2d ff ff ff       	jmp    c001bd54 <int_common_stub>

c001be27 <irq23>:
c001be27:	fa                   	cli    
c001be28:	6a 00                	push   0x0
c001be2a:	6a 37                	push   0x37
c001be2c:	e9 23 ff ff ff       	jmp    c001bd54 <int_common_stub>
c001be31:	66 90                	xchg   ax,ax
c001be33:	66 90                	xchg   ax,ax
c001be35:	66 90                	xchg   ax,ax
c001be37:	66 90                	xchg   ax,ax
c001be39:	66 90                	xchg   ax,ax
c001be3b:	66 90                	xchg   ax,ax
c001be3d:	66 90                	xchg   ax,ax
c001be3f:	90                   	nop

c001be40 <i386GetRDRAND>:
c001be40:	b9 64 00 00 00       	mov    ecx,0x64

c001be45 <retry>:
c001be45:	0f c7 f0             	rdrand eax
c001be48:	72 05                	jb     c001be4f <retry.done>
c001be4a:	e2 f9                	loop   c001be45 <retry>

c001be4c <retry.fail>:
c001be4c:	31 c0                	xor    eax,eax
c001be4e:	c3                   	ret    

c001be4f <retry.done>:
c001be4f:	c3                   	ret    

c001be50 <absolutelyNoChanceInHell>:
c001be50:	b8 01 00 00 00       	mov    eax,0x1
c001be55:	0f a2                	cpuid  
c001be57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001be5d:	74 06                	je     c001be65 <sseDetect.noSSE>
c001be5f:	b8 01 00 00 00       	mov    eax,0x1
c001be64:	c3                   	ret    

c001be65 <sseDetect.noSSE>:
c001be65:	31 c0                	xor    eax,eax
c001be67:	c3                   	ret    

c001be68 <sseSave>:
c001be68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be6c:	0f ae 00             	fxsave [eax]
c001be6f:	c3                   	ret    

c001be70 <sseLoad>:
c001be70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be74:	0f ae 08             	fxrstor [eax]
c001be77:	c3                   	ret    

c001be78 <sseInit>:
c001be78:	e8 42 00 00 00       	call   c001bebf <x87Init>
c001be7d:	0f 20 e0             	mov    eax,cr4
c001be80:	66 0d 00 06          	or     ax,0x600
c001be84:	0f 22 e0             	mov    cr4,eax
c001be87:	c3                   	ret    

c001be88 <sseClose>:
c001be88:	c3                   	ret    
c001be89:	66 90                	xchg   ax,ax
c001be8b:	66 90                	xchg   ax,ax
c001be8d:	66 90                	xchg   ax,ax
c001be8f:	90                   	nop

c001be90 <value_37F>:
c001be90:	7f 03                	jg     c001be95 <value_37A+0x1>

c001be92 <value_37E>:
c001be92:	7e 03                	jle    c001be97 <x87Detect+0x1>

c001be94 <value_37A>:
c001be94:	7a 03                	jp     c001be99 <x87Detect+0x3>

c001be96 <x87Detect>:
c001be96:	b8 01 00 00 00       	mov    eax,0x1
c001be9b:	0f a2                	cpuid  
c001be9d:	f7 c2 01 00 00 00    	test   edx,0x1
c001bea3:	74 06                	je     c001beab <x87Detect.nox87>
c001bea5:	b8 01 00 00 00       	mov    eax,0x1
c001beaa:	c3                   	ret    

c001beab <x87Detect.nox87>:
c001beab:	b8 00 00 00 00       	mov    eax,0x0
c001beb0:	c3                   	ret    

c001beb1 <x87Save>:
c001beb1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001beb5:	dd 30                	fnsave [eax]
c001beb7:	c3                   	ret    

c001beb8 <x87Load>:
c001beb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bebc:	dd 20                	frstor [eax]
c001bebe:	c3                   	ret    

c001bebf <x87Init>:
c001bebf:	0f 20 c0             	mov    eax,cr0
c001bec2:	66 25 fb ff          	and    ax,0xfffb
c001bec6:	66 0d 22 00          	or     ax,0x22
c001beca:	0f 22 c0             	mov    cr0,eax
c001becd:	db e3                	fninit 
c001becf:	0f 06                	clts   
c001bed1:	d9 2d 94 be 01 c0    	fldcw  WORD PTR ds:0xc001be94
c001bed7:	c3                   	ret    

c001bed8 <x87Close>:
c001bed8:	c3                   	ret    
c001bed9:	66 90                	xchg   ax,ax
c001bedb:	90                   	nop

c001bedc <__do_global_ctors_aux>:
c001bedc:	a1 8c ce 01 c0       	mov    eax,ds:0xc001ce8c
c001bee1:	83 f8 ff             	cmp    eax,0xffffffff
c001bee4:	74 1a                	je     c001bf00 <__do_global_ctors_aux+0x24>
c001bee6:	55                   	push   ebp
c001bee7:	89 e5                	mov    ebp,esp
c001bee9:	53                   	push   ebx
c001beea:	52                   	push   edx
c001beeb:	bb 8c ce 01 c0       	mov    ebx,0xc001ce8c
c001bef0:	ff d0                	call   eax
c001bef2:	83 eb 04             	sub    ebx,0x4
c001bef5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bef7:	83 f8 ff             	cmp    eax,0xffffffff
c001befa:	75 f4                	jne    c001bef0 <__do_global_ctors_aux+0x14>
c001befc:	58                   	pop    eax
c001befd:	5b                   	pop    ebx
c001befe:	5d                   	pop    ebp
c001beff:	c3                   	ret    
c001bf00:	c3                   	ret    
c001bf01:	66 90                	xchg   ax,ax
c001bf03:	90                   	nop

c001bf04 <__divdi3>:
c001bf04:	55                   	push   ebp
c001bf05:	57                   	push   edi
c001bf06:	56                   	push   esi
c001bf07:	53                   	push   ebx
c001bf08:	83 ec 1c             	sub    esp,0x1c
c001bf0b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001bf0f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bf16:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bf1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bf1e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bf22:	85 db                	test   ebx,ebx
c001bf24:	0f 88 8e 00 00 00    	js     c001bfb8 <__divdi3+0xb4>
c001bf2a:	89 dd                	mov    ebp,ebx
c001bf2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001bf34:	89 d3                	mov    ebx,edx
c001bf36:	85 d2                	test   edx,edx
c001bf38:	79 0d                	jns    c001bf47 <__divdi3+0x43>
c001bf3a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001bf3e:	f7 d8                	neg    eax
c001bf40:	83 d2 00             	adc    edx,0x0
c001bf43:	f7 da                	neg    edx
c001bf45:	89 d3                	mov    ebx,edx
c001bf47:	89 c7                	mov    edi,eax
c001bf49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf4c:	85 db                	test   ebx,ebx
c001bf4e:	75 48                	jne    c001bf98 <__divdi3+0x94>
c001bf50:	39 ef                	cmp    edi,ebp
c001bf52:	76 24                	jbe    c001bf78 <__divdi3+0x74>
c001bf54:	89 ea                	mov    edx,ebp
c001bf56:	f7 f7                	div    edi
c001bf58:	89 c1                	mov    ecx,eax
c001bf5a:	31 f6                	xor    esi,esi
c001bf5c:	89 c8                	mov    eax,ecx
c001bf5e:	89 f2                	mov    edx,esi
c001bf60:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bf64:	85 c9                	test   ecx,ecx
c001bf66:	74 07                	je     c001bf6f <__divdi3+0x6b>
c001bf68:	f7 d8                	neg    eax
c001bf6a:	83 d2 00             	adc    edx,0x0
c001bf6d:	f7 da                	neg    edx
c001bf6f:	83 c4 1c             	add    esp,0x1c
c001bf72:	5b                   	pop    ebx
c001bf73:	5e                   	pop    esi
c001bf74:	5f                   	pop    edi
c001bf75:	5d                   	pop    ebp
c001bf76:	c3                   	ret    
c001bf77:	90                   	nop
c001bf78:	85 ff                	test   edi,edi
c001bf7a:	75 0b                	jne    c001bf87 <__divdi3+0x83>
c001bf7c:	b8 01 00 00 00       	mov    eax,0x1
c001bf81:	31 d2                	xor    edx,edx
c001bf83:	f7 f3                	div    ebx
c001bf85:	89 c7                	mov    edi,eax
c001bf87:	31 d2                	xor    edx,edx
c001bf89:	89 e8                	mov    eax,ebp
c001bf8b:	f7 f7                	div    edi
c001bf8d:	89 c6                	mov    esi,eax
c001bf8f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bf92:	f7 f7                	div    edi
c001bf94:	89 c1                	mov    ecx,eax
c001bf96:	eb c4                	jmp    c001bf5c <__divdi3+0x58>
c001bf98:	39 eb                	cmp    ebx,ebp
c001bf9a:	77 3c                	ja     c001bfd8 <__divdi3+0xd4>
c001bf9c:	0f bd f3             	bsr    esi,ebx
c001bf9f:	83 f6 1f             	xor    esi,0x1f
c001bfa2:	75 40                	jne    c001bfe4 <__divdi3+0xe0>
c001bfa4:	39 eb                	cmp    ebx,ebp
c001bfa6:	72 09                	jb     c001bfb1 <__divdi3+0xad>
c001bfa8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001bfab:	0f 87 97 00 00 00    	ja     c001c048 <__divdi3+0x144>
c001bfb1:	b9 01 00 00 00       	mov    ecx,0x1
c001bfb6:	eb a4                	jmp    c001bf5c <__divdi3+0x58>
c001bfb8:	f7 d9                	neg    ecx
c001bfba:	83 d3 00             	adc    ebx,0x0
c001bfbd:	f7 db                	neg    ebx
c001bfbf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001bfc2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001bfc6:	89 dd                	mov    ebp,ebx
c001bfc8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001bfd0:	e9 5f ff ff ff       	jmp    c001bf34 <__divdi3+0x30>
c001bfd5:	8d 76 00             	lea    esi,[esi+0x0]
c001bfd8:	31 f6                	xor    esi,esi
c001bfda:	31 c9                	xor    ecx,ecx
c001bfdc:	e9 7b ff ff ff       	jmp    c001bf5c <__divdi3+0x58>
c001bfe1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfe4:	b8 20 00 00 00       	mov    eax,0x20
c001bfe9:	29 f0                	sub    eax,esi
c001bfeb:	89 f1                	mov    ecx,esi
c001bfed:	d3 e3                	shl    ebx,cl
c001bfef:	89 fa                	mov    edx,edi
c001bff1:	88 c1                	mov    cl,al
c001bff3:	d3 ea                	shr    edx,cl
c001bff5:	09 da                	or     edx,ebx
c001bff7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bffb:	89 f1                	mov    ecx,esi
c001bffd:	d3 e7                	shl    edi,cl
c001bfff:	89 eb                	mov    ebx,ebp
c001c001:	88 c1                	mov    cl,al
c001c003:	d3 eb                	shr    ebx,cl
c001c005:	89 f1                	mov    ecx,esi
c001c007:	d3 e5                	shl    ebp,cl
c001c009:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001c00c:	88 c1                	mov    cl,al
c001c00e:	d3 ea                	shr    edx,cl
c001c010:	09 d5                	or     ebp,edx
c001c012:	89 e8                	mov    eax,ebp
c001c014:	89 da                	mov    edx,ebx
c001c016:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001c01a:	89 d3                	mov    ebx,edx
c001c01c:	89 c5                	mov    ebp,eax
c001c01e:	f7 e7                	mul    edi
c001c020:	39 d3                	cmp    ebx,edx
c001c022:	72 18                	jb     c001c03c <__divdi3+0x138>
c001c024:	74 0a                	je     c001c030 <__divdi3+0x12c>
c001c026:	89 e9                	mov    ecx,ebp
c001c028:	31 f6                	xor    esi,esi
c001c02a:	e9 2d ff ff ff       	jmp    c001bf5c <__divdi3+0x58>
c001c02f:	90                   	nop
c001c030:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001c033:	89 f1                	mov    ecx,esi
c001c035:	d3 e7                	shl    edi,cl
c001c037:	39 c7                	cmp    edi,eax
c001c039:	73 eb                	jae    c001c026 <__divdi3+0x122>
c001c03b:	90                   	nop
c001c03c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001c03f:	31 f6                	xor    esi,esi
c001c041:	e9 16 ff ff ff       	jmp    c001bf5c <__divdi3+0x58>
c001c046:	66 90                	xchg   ax,ax
c001c048:	31 c9                	xor    ecx,ecx
c001c04a:	e9 0d ff ff ff       	jmp    c001bf5c <__divdi3+0x58>
c001c04f:	90                   	nop

c001c050 <__moddi3>:
c001c050:	55                   	push   ebp
c001c051:	57                   	push   edi
c001c052:	56                   	push   esi
c001c053:	53                   	push   ebx
c001c054:	83 ec 2c             	sub    esp,0x2c
c001c057:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c05b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001c05f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001c063:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001c067:	85 db                	test   ebx,ebx
c001c069:	0f 88 85 00 00 00    	js     c001c0f4 <__moddi3+0xa4>
c001c06f:	89 de                	mov    esi,ebx
c001c071:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c079:	89 d7                	mov    edi,edx
c001c07b:	85 d2                	test   edx,edx
c001c07d:	79 09                	jns    c001c088 <__moddi3+0x38>
c001c07f:	f7 d8                	neg    eax
c001c081:	83 d2 00             	adc    edx,0x0
c001c084:	f7 da                	neg    edx
c001c086:	89 d7                	mov    edi,edx
c001c088:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c08c:	89 cd                	mov    ebp,ecx
c001c08e:	85 ff                	test   edi,edi
c001c090:	75 52                	jne    c001c0e4 <__moddi3+0x94>
c001c092:	89 c3                	mov    ebx,eax
c001c094:	39 f0                	cmp    eax,esi
c001c096:	76 24                	jbe    c001c0bc <__moddi3+0x6c>
c001c098:	89 c8                	mov    eax,ecx
c001c09a:	89 f2                	mov    edx,esi
c001c09c:	f7 f3                	div    ebx
c001c09e:	89 d6                	mov    esi,edx
c001c0a0:	89 f0                	mov    eax,esi
c001c0a2:	31 d2                	xor    edx,edx
c001c0a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c0a8:	85 c9                	test   ecx,ecx
c001c0aa:	74 07                	je     c001c0b3 <__moddi3+0x63>
c001c0ac:	f7 d8                	neg    eax
c001c0ae:	83 d2 00             	adc    edx,0x0
c001c0b1:	f7 da                	neg    edx
c001c0b3:	83 c4 2c             	add    esp,0x2c
c001c0b6:	5b                   	pop    ebx
c001c0b7:	5e                   	pop    esi
c001c0b8:	5f                   	pop    edi
c001c0b9:	5d                   	pop    ebp
c001c0ba:	c3                   	ret    
c001c0bb:	90                   	nop
c001c0bc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001c0c0:	85 db                	test   ebx,ebx
c001c0c2:	75 0d                	jne    c001c0d1 <__moddi3+0x81>
c001c0c4:	b8 01 00 00 00       	mov    eax,0x1
c001c0c9:	31 d2                	xor    edx,edx
c001c0cb:	f7 f7                	div    edi
c001c0cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0d1:	89 f0                	mov    eax,esi
c001c0d3:	31 d2                	xor    edx,edx
c001c0d5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c0d9:	f7 f7                	div    edi
c001c0db:	89 e8                	mov    eax,ebp
c001c0dd:	f7 f7                	div    edi
c001c0df:	89 d6                	mov    esi,edx
c001c0e1:	eb bd                	jmp    c001c0a0 <__moddi3+0x50>
c001c0e3:	90                   	nop
c001c0e4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c0e8:	39 f7                	cmp    edi,esi
c001c0ea:	76 20                	jbe    c001c10c <__moddi3+0xbc>
c001c0ec:	89 c8                	mov    eax,ecx
c001c0ee:	89 f2                	mov    edx,esi
c001c0f0:	eb b2                	jmp    c001c0a4 <__moddi3+0x54>
c001c0f2:	66 90                	xchg   ax,ax
c001c0f4:	f7 d9                	neg    ecx
c001c0f6:	83 d3 00             	adc    ebx,0x0
c001c0f9:	f7 db                	neg    ebx
c001c0fb:	89 de                	mov    esi,ebx
c001c0fd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001c105:	e9 6f ff ff ff       	jmp    c001c079 <__moddi3+0x29>
c001c10a:	66 90                	xchg   ax,ax
c001c10c:	0f bd c7             	bsr    eax,edi
c001c10f:	83 f0 1f             	xor    eax,0x1f
c001c112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c116:	75 24                	jne    c001c13c <__moddi3+0xec>
c001c118:	39 f7                	cmp    edi,esi
c001c11a:	72 06                	jb     c001c122 <__moddi3+0xd2>
c001c11c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001c120:	77 0c                	ja     c001c12e <__moddi3+0xde>
c001c122:	89 e9                	mov    ecx,ebp
c001c124:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001c128:	19 fe                	sbb    esi,edi
c001c12a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001c12e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c132:	89 f2                	mov    edx,esi
c001c134:	e9 6b ff ff ff       	jmp    c001c0a4 <__moddi3+0x54>
c001c139:	8d 76 00             	lea    esi,[esi+0x0]
c001c13c:	b8 20 00 00 00       	mov    eax,0x20
c001c141:	89 c2                	mov    edx,eax
c001c143:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c147:	29 da                	sub    edx,ebx
c001c149:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001c14d:	88 d9                	mov    cl,bl
c001c14f:	d3 e7                	shl    edi,cl
c001c151:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c155:	88 d1                	mov    cl,dl
c001c157:	d3 e8                	shr    eax,cl
c001c159:	09 c7                	or     edi,eax
c001c15b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001c15f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c163:	89 d8                	mov    eax,ebx
c001c165:	88 d9                	mov    cl,bl
c001c167:	d3 e7                	shl    edi,cl
c001c169:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c16d:	89 f3                	mov    ebx,esi
c001c16f:	88 d1                	mov    cl,dl
c001c171:	d3 eb                	shr    ebx,cl
c001c173:	89 c7                	mov    edi,eax
c001c175:	88 c1                	mov    cl,al
c001c177:	d3 e6                	shl    esi,cl
c001c179:	89 e8                	mov    eax,ebp
c001c17b:	88 d1                	mov    cl,dl
c001c17d:	d3 e8                	shr    eax,cl
c001c17f:	09 f0                	or     eax,esi
c001c181:	89 f9                	mov    ecx,edi
c001c183:	d3 e5                	shl    ebp,cl
c001c185:	89 da                	mov    edx,ebx
c001c187:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001c18b:	89 d3                	mov    ebx,edx
c001c18d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c191:	89 c6                	mov    esi,eax
c001c193:	89 d1                	mov    ecx,edx
c001c195:	39 d3                	cmp    ebx,edx
c001c197:	72 27                	jb     c001c1c0 <__moddi3+0x170>
c001c199:	74 21                	je     c001c1bc <__moddi3+0x16c>
c001c19b:	29 f5                	sub    ebp,esi
c001c19d:	19 cb                	sbb    ebx,ecx
c001c19f:	89 de                	mov    esi,ebx
c001c1a1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001c1a5:	d3 e6                	shl    esi,cl
c001c1a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c1ab:	89 f9                	mov    ecx,edi
c001c1ad:	d3 ed                	shr    ebp,cl
c001c1af:	09 ee                	or     esi,ebp
c001c1b1:	89 f0                	mov    eax,esi
c001c1b3:	d3 eb                	shr    ebx,cl
c001c1b5:	89 da                	mov    edx,ebx
c001c1b7:	e9 e8 fe ff ff       	jmp    c001c0a4 <__moddi3+0x54>
c001c1bc:	39 c5                	cmp    ebp,eax
c001c1be:	73 db                	jae    c001c19b <__moddi3+0x14b>
c001c1c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c1c4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001c1c8:	89 d1                	mov    ecx,edx
c001c1ca:	89 c6                	mov    esi,eax
c001c1cc:	eb cd                	jmp    c001c19b <__moddi3+0x14b>
c001c1ce:	66 90                	xchg   ax,ax

c001c1d0 <__udivdi3>:
c001c1d0:	55                   	push   ebp
c001c1d1:	57                   	push   edi
c001c1d2:	56                   	push   esi
c001c1d3:	53                   	push   ebx
c001c1d4:	83 ec 1c             	sub    esp,0x1c
c001c1d7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1db:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c1df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c1e3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c1e7:	85 d2                	test   edx,edx
c001c1e9:	75 41                	jne    c001c22c <__udivdi3+0x5c>
c001c1eb:	39 f7                	cmp    edi,esi
c001c1ed:	76 15                	jbe    c001c204 <__udivdi3+0x34>
c001c1ef:	89 e8                	mov    eax,ebp
c001c1f1:	89 f2                	mov    edx,esi
c001c1f3:	f7 f7                	div    edi
c001c1f5:	31 db                	xor    ebx,ebx
c001c1f7:	89 da                	mov    edx,ebx
c001c1f9:	83 c4 1c             	add    esp,0x1c
c001c1fc:	5b                   	pop    ebx
c001c1fd:	5e                   	pop    esi
c001c1fe:	5f                   	pop    edi
c001c1ff:	5d                   	pop    ebp
c001c200:	c3                   	ret    
c001c201:	8d 76 00             	lea    esi,[esi+0x0]
c001c204:	89 f9                	mov    ecx,edi
c001c206:	85 ff                	test   edi,edi
c001c208:	75 0b                	jne    c001c215 <__udivdi3+0x45>
c001c20a:	b8 01 00 00 00       	mov    eax,0x1
c001c20f:	31 d2                	xor    edx,edx
c001c211:	f7 f7                	div    edi
c001c213:	89 c1                	mov    ecx,eax
c001c215:	31 d2                	xor    edx,edx
c001c217:	89 f0                	mov    eax,esi
c001c219:	f7 f1                	div    ecx
c001c21b:	89 c3                	mov    ebx,eax
c001c21d:	89 e8                	mov    eax,ebp
c001c21f:	f7 f1                	div    ecx
c001c221:	89 da                	mov    edx,ebx
c001c223:	83 c4 1c             	add    esp,0x1c
c001c226:	5b                   	pop    ebx
c001c227:	5e                   	pop    esi
c001c228:	5f                   	pop    edi
c001c229:	5d                   	pop    ebp
c001c22a:	c3                   	ret    
c001c22b:	90                   	nop
c001c22c:	39 f2                	cmp    edx,esi
c001c22e:	77 1c                	ja     c001c24c <__udivdi3+0x7c>
c001c230:	0f bd da             	bsr    ebx,edx
c001c233:	83 f3 1f             	xor    ebx,0x1f
c001c236:	75 24                	jne    c001c25c <__udivdi3+0x8c>
c001c238:	39 f2                	cmp    edx,esi
c001c23a:	72 08                	jb     c001c244 <__udivdi3+0x74>
c001c23c:	39 ef                	cmp    edi,ebp
c001c23e:	0f 87 84 00 00 00    	ja     c001c2c8 <__udivdi3+0xf8>
c001c244:	b8 01 00 00 00       	mov    eax,0x1
c001c249:	eb ac                	jmp    c001c1f7 <__udivdi3+0x27>
c001c24b:	90                   	nop
c001c24c:	31 db                	xor    ebx,ebx
c001c24e:	31 c0                	xor    eax,eax
c001c250:	89 da                	mov    edx,ebx
c001c252:	83 c4 1c             	add    esp,0x1c
c001c255:	5b                   	pop    ebx
c001c256:	5e                   	pop    esi
c001c257:	5f                   	pop    edi
c001c258:	5d                   	pop    ebp
c001c259:	c3                   	ret    
c001c25a:	66 90                	xchg   ax,ax
c001c25c:	b8 20 00 00 00       	mov    eax,0x20
c001c261:	29 d8                	sub    eax,ebx
c001c263:	88 d9                	mov    cl,bl
c001c265:	d3 e2                	shl    edx,cl
c001c267:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c26b:	89 fa                	mov    edx,edi
c001c26d:	88 c1                	mov    cl,al
c001c26f:	d3 ea                	shr    edx,cl
c001c271:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c275:	09 d1                	or     ecx,edx
c001c277:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c27b:	88 d9                	mov    cl,bl
c001c27d:	d3 e7                	shl    edi,cl
c001c27f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c283:	89 f7                	mov    edi,esi
c001c285:	88 c1                	mov    cl,al
c001c287:	d3 ef                	shr    edi,cl
c001c289:	88 d9                	mov    cl,bl
c001c28b:	d3 e6                	shl    esi,cl
c001c28d:	89 ea                	mov    edx,ebp
c001c28f:	88 c1                	mov    cl,al
c001c291:	d3 ea                	shr    edx,cl
c001c293:	09 d6                	or     esi,edx
c001c295:	89 f0                	mov    eax,esi
c001c297:	89 fa                	mov    edx,edi
c001c299:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c29d:	89 d7                	mov    edi,edx
c001c29f:	89 c6                	mov    esi,eax
c001c2a1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c2a5:	39 d7                	cmp    edi,edx
c001c2a7:	72 13                	jb     c001c2bc <__udivdi3+0xec>
c001c2a9:	74 09                	je     c001c2b4 <__udivdi3+0xe4>
c001c2ab:	89 f0                	mov    eax,esi
c001c2ad:	31 db                	xor    ebx,ebx
c001c2af:	e9 43 ff ff ff       	jmp    c001c1f7 <__udivdi3+0x27>
c001c2b4:	88 d9                	mov    cl,bl
c001c2b6:	d3 e5                	shl    ebp,cl
c001c2b8:	39 c5                	cmp    ebp,eax
c001c2ba:	73 ef                	jae    c001c2ab <__udivdi3+0xdb>
c001c2bc:	8d 46 ff             	lea    eax,[esi-0x1]
c001c2bf:	31 db                	xor    ebx,ebx
c001c2c1:	e9 31 ff ff ff       	jmp    c001c1f7 <__udivdi3+0x27>
c001c2c6:	66 90                	xchg   ax,ax
c001c2c8:	31 c0                	xor    eax,eax
c001c2ca:	e9 28 ff ff ff       	jmp    c001c1f7 <__udivdi3+0x27>
c001c2cf:	90                   	nop

c001c2d0 <__umoddi3>:
c001c2d0:	55                   	push   ebp
c001c2d1:	57                   	push   edi
c001c2d2:	56                   	push   esi
c001c2d3:	53                   	push   ebx
c001c2d4:	83 ec 1c             	sub    esp,0x1c
c001c2d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c2db:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c2df:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001c2e3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c2e7:	89 da                	mov    edx,ebx
c001c2e9:	85 c0                	test   eax,eax
c001c2eb:	75 37                	jne    c001c324 <__umoddi3+0x54>
c001c2ed:	39 df                	cmp    edi,ebx
c001c2ef:	76 13                	jbe    c001c304 <__umoddi3+0x34>
c001c2f1:	89 f0                	mov    eax,esi
c001c2f3:	f7 f7                	div    edi
c001c2f5:	89 d0                	mov    eax,edx
c001c2f7:	31 d2                	xor    edx,edx
c001c2f9:	83 c4 1c             	add    esp,0x1c
c001c2fc:	5b                   	pop    ebx
c001c2fd:	5e                   	pop    esi
c001c2fe:	5f                   	pop    edi
c001c2ff:	5d                   	pop    ebp
c001c300:	c3                   	ret    
c001c301:	8d 76 00             	lea    esi,[esi+0x0]
c001c304:	89 fd                	mov    ebp,edi
c001c306:	85 ff                	test   edi,edi
c001c308:	75 0b                	jne    c001c315 <__umoddi3+0x45>
c001c30a:	b8 01 00 00 00       	mov    eax,0x1
c001c30f:	31 d2                	xor    edx,edx
c001c311:	f7 f7                	div    edi
c001c313:	89 c5                	mov    ebp,eax
c001c315:	89 d8                	mov    eax,ebx
c001c317:	31 d2                	xor    edx,edx
c001c319:	f7 f5                	div    ebp
c001c31b:	89 f0                	mov    eax,esi
c001c31d:	f7 f5                	div    ebp
c001c31f:	89 d0                	mov    eax,edx
c001c321:	eb d4                	jmp    c001c2f7 <__umoddi3+0x27>
c001c323:	90                   	nop
c001c324:	89 f1                	mov    ecx,esi
c001c326:	39 d8                	cmp    eax,ebx
c001c328:	76 0a                	jbe    c001c334 <__umoddi3+0x64>
c001c32a:	89 f0                	mov    eax,esi
c001c32c:	83 c4 1c             	add    esp,0x1c
c001c32f:	5b                   	pop    ebx
c001c330:	5e                   	pop    esi
c001c331:	5f                   	pop    edi
c001c332:	5d                   	pop    ebp
c001c333:	c3                   	ret    
c001c334:	0f bd e8             	bsr    ebp,eax
c001c337:	83 f5 1f             	xor    ebp,0x1f
c001c33a:	75 1c                	jne    c001c358 <__umoddi3+0x88>
c001c33c:	39 d8                	cmp    eax,ebx
c001c33e:	72 04                	jb     c001c344 <__umoddi3+0x74>
c001c340:	39 f7                	cmp    edi,esi
c001c342:	77 08                	ja     c001c34c <__umoddi3+0x7c>
c001c344:	89 da                	mov    edx,ebx
c001c346:	29 fe                	sub    esi,edi
c001c348:	19 c2                	sbb    edx,eax
c001c34a:	89 f1                	mov    ecx,esi
c001c34c:	89 c8                	mov    eax,ecx
c001c34e:	83 c4 1c             	add    esp,0x1c
c001c351:	5b                   	pop    ebx
c001c352:	5e                   	pop    esi
c001c353:	5f                   	pop    edi
c001c354:	5d                   	pop    ebp
c001c355:	c3                   	ret    
c001c356:	66 90                	xchg   ax,ax
c001c358:	ba 20 00 00 00       	mov    edx,0x20
c001c35d:	29 ea                	sub    edx,ebp
c001c35f:	89 e9                	mov    ecx,ebp
c001c361:	d3 e0                	shl    eax,cl
c001c363:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c367:	89 f8                	mov    eax,edi
c001c369:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c36d:	88 d1                	mov    cl,dl
c001c36f:	d3 e8                	shr    eax,cl
c001c371:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c375:	09 c1                	or     ecx,eax
c001c377:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c37b:	89 e9                	mov    ecx,ebp
c001c37d:	d3 e7                	shl    edi,cl
c001c37f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c383:	89 d8                	mov    eax,ebx
c001c385:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c389:	88 d1                	mov    cl,dl
c001c38b:	d3 e8                	shr    eax,cl
c001c38d:	89 c7                	mov    edi,eax
c001c38f:	89 e9                	mov    ecx,ebp
c001c391:	d3 e3                	shl    ebx,cl
c001c393:	89 f0                	mov    eax,esi
c001c395:	88 d1                	mov    cl,dl
c001c397:	d3 e8                	shr    eax,cl
c001c399:	09 d8                	or     eax,ebx
c001c39b:	89 e9                	mov    ecx,ebp
c001c39d:	d3 e6                	shl    esi,cl
c001c39f:	89 f3                	mov    ebx,esi
c001c3a1:	89 fa                	mov    edx,edi
c001c3a3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001c3a7:	89 d1                	mov    ecx,edx
c001c3a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001c3ad:	89 c6                	mov    esi,eax
c001c3af:	89 d7                	mov    edi,edx
c001c3b1:	39 d1                	cmp    ecx,edx
c001c3b3:	72 27                	jb     c001c3dc <__umoddi3+0x10c>
c001c3b5:	74 21                	je     c001c3d8 <__umoddi3+0x108>
c001c3b7:	89 ca                	mov    edx,ecx
c001c3b9:	29 f3                	sub    ebx,esi
c001c3bb:	19 fa                	sbb    edx,edi
c001c3bd:	89 d0                	mov    eax,edx
c001c3bf:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001c3c3:	d3 e0                	shl    eax,cl
c001c3c5:	89 e9                	mov    ecx,ebp
c001c3c7:	d3 eb                	shr    ebx,cl
c001c3c9:	09 d8                	or     eax,ebx
c001c3cb:	d3 ea                	shr    edx,cl
c001c3cd:	83 c4 1c             	add    esp,0x1c
c001c3d0:	5b                   	pop    ebx
c001c3d1:	5e                   	pop    esi
c001c3d2:	5f                   	pop    edi
c001c3d3:	5d                   	pop    ebp
c001c3d4:	c3                   	ret    
c001c3d5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3d8:	39 c3                	cmp    ebx,eax
c001c3da:	73 db                	jae    c001c3b7 <__umoddi3+0xe7>
c001c3dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001c3e0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001c3e4:	89 d7                	mov    edi,edx
c001c3e6:	89 c6                	mov    esi,eax
c001c3e8:	eb cd                	jmp    c001c3b7 <__umoddi3+0xe7>

Disassembly of section .init:

c001c3ea <_init>:
c001c3ea:	55                   	push   ebp
c001c3eb:	89 e5                	mov    ebp,esp
c001c3ed:	e8 02 3d fe ff       	call   c00000f4 <frame_dummy>
c001c3f2:	e8 e5 fa ff ff       	call   c001bedc <__do_global_ctors_aux>
c001c3f7:	5d                   	pop    ebp
c001c3f8:	c3                   	ret    

Disassembly of section .fini:

c001c3f9 <_fini>:
c001c3f9:	55                   	push   ebp
c001c3fa:	89 e5                	mov    ebp,esp
c001c3fc:	e8 83 3c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001c401:	5d                   	pop    ebp
c001c402:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001c404 <Computer::~Computer()>:
c001c404:	83 ec 0c             	sub    esp,0xc
c001c407:	ba b8 d6 01 c0       	mov    edx,0xc001d6b8
c001c40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c410:	89 10                	mov    DWORD PTR [eax],edx
c001c412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c416:	83 ec 0c             	sub    esp,0xc
c001c419:	50                   	push   eax
c001c41a:	e8 17 f5 fe ff       	call   c000b936 <Device::~Device()>
c001c41f:	83 c4 10             	add    esp,0x10
c001c422:	90                   	nop
c001c423:	83 c4 0c             	add    esp,0xc
c001c426:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001c428 <Computer::~Computer()>:
c001c428:	83 ec 0c             	sub    esp,0xc
c001c42b:	83 ec 0c             	sub    esp,0xc
c001c42e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c432:	e8 cd ff ff ff       	call   c001c404 <Computer::~Computer()>
c001c437:	83 c4 10             	add    esp,0x10
c001c43a:	83 ec 08             	sub    esp,0x8
c001c43d:	68 70 01 00 00       	push   0x170
c001c442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c446:	e8 b3 e0 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001c44b:	83 c4 10             	add    esp,0x10
c001c44e:	83 c4 0c             	add    esp,0xc
c001c451:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001c452 <idleCommon()>:
c001c452:	83 ec 0c             	sub    esp,0xc
c001c455:	fa                   	cli    
c001c456:	ff 05 68 51 02 c0    	inc    DWORD PTR ds:0xc0025168
c001c45c:	e8 0b 74 ff ff       	call   c001386c <schedule()>
c001c461:	a1 68 51 02 c0       	mov    eax,ds:0xc0025168
c001c466:	48                   	dec    eax
c001c467:	a3 68 51 02 c0       	mov    ds:0xc0025168,eax
c001c46c:	75 01                	jne    c001c46f <idleCommon()+0x1d>
c001c46e:	fb                   	sti    
c001c46f:	83 c4 0c             	add    esp,0xc
c001c472:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001c474 <LinkedList<UnixFile>::~LinkedList()>:
c001c474:	90                   	nop
c001c475:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001c476 <LinkedList<UnixFile>::LinkedList()>:
c001c476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c47a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c484:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c48b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c48f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c49a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4a4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c4b6:	90                   	nop
c001c4b7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001c4b8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001c4b8:	83 ec 0c             	sub    esp,0xc
c001c4bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c4c0:	75 10                	jne    c001c4d2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001c4c2:	83 ec 0c             	sub    esp,0xc
c001c4c5:	68 18 d9 01 c0       	push   0xc001d918
c001c4ca:	e8 a8 3d ff ff       	call   c0010277 <KePanic(char const*)>
c001c4cf:	83 c4 10             	add    esp,0x10
c001c4d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4d8:	85 c0                	test   eax,eax
c001c4da:	74 34                	je     c001c510 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4e3:	85 c0                	test   eax,eax
c001c4e5:	74 29                	je     c001c510 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001c4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c4f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c4fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c504:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c507:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c50e:	eb 65                	jmp    c001c575 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c514:	8b 00                	mov    eax,DWORD PTR [eax]
c001c516:	85 c0                	test   eax,eax
c001c518:	75 4b                	jne    c001c565 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c521:	85 c0                	test   eax,eax
c001c523:	75 40                	jne    c001c565 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001c525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c529:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c52d:	89 10                	mov    DWORD PTR [eax],edx
c001c52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c533:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c537:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c53a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c53e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c541:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c54f:	85 c0                	test   eax,eax
c001c551:	74 22                	je     c001c575 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c553:	83 ec 0c             	sub    esp,0xc
c001c556:	68 3a d9 01 c0       	push   0xc001d93a
c001c55b:	e8 17 3d ff ff       	call   c0010277 <KePanic(char const*)>
c001c560:	83 c4 10             	add    esp,0x10
c001c563:	eb 10                	jmp    c001c575 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c565:	83 ec 0c             	sub    esp,0xc
c001c568:	68 44 d9 01 c0       	push   0xc001d944
c001c56d:	e8 05 3d ff ff       	call   c0010277 <KePanic(char const*)>
c001c572:	83 c4 10             	add    esp,0x10
c001c575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c579:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c57c:	8d 50 01             	lea    edx,[eax+0x1]
c001c57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c583:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c586:	90                   	nop
c001c587:	83 c4 0c             	add    esp,0xc
c001c58a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c58c <LinkedList<UnixFile>::getFirstElement()>:
c001c58c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c590:	8b 00                	mov    eax,DWORD PTR [eax]
c001c592:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c594 <LinkedList<UnixFile>::removeFirst()>:
c001c594:	83 ec 0c             	sub    esp,0xc
c001c597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c59d:	85 c0                	test   eax,eax
c001c59f:	75 12                	jne    c001c5b3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c5a1:	83 ec 0c             	sub    esp,0xc
c001c5a4:	68 50 d9 01 c0       	push   0xc001d950
c001c5a9:	e8 c9 3c ff ff       	call   c0010277 <KePanic(char const*)>
c001c5ae:	83 c4 10             	add    esp,0x10
c001c5b1:	eb 7e                	jmp    c001c631 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c5ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5bd:	85 c0                	test   eax,eax
c001c5bf:	74 10                	je     c001c5d1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c5c1:	83 ec 0c             	sub    esp,0xc
c001c5c4:	68 9b d9 01 c0       	push   0xc001d99b
c001c5c9:	e8 a9 3c ff ff       	call   c0010277 <KePanic(char const*)>
c001c5ce:	83 c4 10             	add    esp,0x10
c001c5d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5d5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c5d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5da:	85 c0                	test   eax,eax
c001c5dc:	75 33                	jne    c001c611 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c5de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c5fa:	83 f8 01             	cmp    eax,0x1
c001c5fd:	74 21                	je     c001c620 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c5ff:	83 ec 0c             	sub    esp,0xc
c001c602:	68 74 d9 01 c0       	push   0xc001d974
c001c607:	e8 6b 3c ff ff       	call   c0010277 <KePanic(char const*)>
c001c60c:	83 c4 10             	add    esp,0x10
c001c60f:	eb 0f                	jmp    c001c620 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c615:	8b 00                	mov    eax,DWORD PTR [eax]
c001c617:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c61a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c61e:	89 10                	mov    DWORD PTR [eax],edx
c001c620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c624:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c627:	8d 50 ff             	lea    edx,[eax-0x1]
c001c62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c631:	83 c4 0c             	add    esp,0xc
c001c634:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c636 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c63a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c63d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c63e <DriverlessDevice::~DriverlessDevice()>:
c001c63e:	ba 1c e0 01 c0       	mov    edx,0xc001e01c
c001c643:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c647:	89 10                	mov    DWORD PTR [eax],edx
c001c649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c64d:	50                   	push   eax
c001c64e:	e8 e3 f2 fe ff       	call   c000b936 <Device::~Device()>
c001c653:	83 c4 04             	add    esp,0x4
c001c656:	90                   	nop
c001c657:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c658 <DriverlessDevice::~DriverlessDevice()>:
c001c658:	83 ec 0c             	sub    esp,0xc
c001c65b:	83 ec 0c             	sub    esp,0xc
c001c65e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c662:	e8 d7 ff ff ff       	call   c001c63e <DriverlessDevice::~DriverlessDevice()>
c001c667:	83 c4 10             	add    esp,0x10
c001c66a:	83 ec 08             	sub    esp,0x8
c001c66d:	68 58 01 00 00       	push   0x158
c001c672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c676:	e8 83 de fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001c67b:	83 c4 10             	add    esp,0x10
c001c67e:	83 c4 0c             	add    esp,0xc
c001c681:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c682 <LinkedList<Device>::addElement(Device*)>:
c001c682:	83 ec 0c             	sub    esp,0xc
c001c685:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c68a:	75 10                	jne    c001c69c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c68c:	83 ec 0c             	sub    esp,0xc
c001c68f:	68 18 d9 01 c0       	push   0xc001d918
c001c694:	e8 de 3b ff ff       	call   c0010277 <KePanic(char const*)>
c001c699:	83 c4 10             	add    esp,0x10
c001c69c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6a2:	85 c0                	test   eax,eax
c001c6a4:	74 3a                	je     c001c6e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6ad:	85 c0                	test   eax,eax
c001c6af:	74 2f                	je     c001c6e0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c6b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6b8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6bc:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c6cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6d4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c6de:	eb 68                	jmp    c001c748 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c6e6:	85 c0                	test   eax,eax
c001c6e8:	75 4e                	jne    c001c738 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c6f1:	85 c0                	test   eax,eax
c001c6f3:	75 43                	jne    c001c738 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c6f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c6fd:	89 10                	mov    DWORD PTR [eax],edx
c001c6ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c703:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c707:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c711:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c71b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c722:	85 c0                	test   eax,eax
c001c724:	74 22                	je     c001c748 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c726:	83 ec 0c             	sub    esp,0xc
c001c729:	68 3a d9 01 c0       	push   0xc001d93a
c001c72e:	e8 44 3b ff ff       	call   c0010277 <KePanic(char const*)>
c001c733:	83 c4 10             	add    esp,0x10
c001c736:	eb 10                	jmp    c001c748 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c738:	83 ec 0c             	sub    esp,0xc
c001c73b:	68 44 d9 01 c0       	push   0xc001d944
c001c740:	e8 32 3b ff ff       	call   c0010277 <KePanic(char const*)>
c001c745:	83 c4 10             	add    esp,0x10
c001c748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c74c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c74f:	8d 50 01             	lea    edx,[eax+0x1]
c001c752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c756:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c759:	90                   	nop
c001c75a:	83 c4 0c             	add    esp,0xc
c001c75d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c75e <LinkedList<Device>::LinkedList()>:
c001c75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c762:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c76c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c773:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c777:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c782:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c788:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c78c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c793:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c797:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c79e:	90                   	nop
c001c79f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c7a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c7a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7a4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7a6:	85 c0                	test   eax,eax
c001c7a8:	75 0e                	jne    c001c7b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7b1:	85 c0                	test   eax,eax
c001c7b3:	75 03                	jne    c001c7b8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c7b5:	b0 01                	mov    al,0x1
c001c7b7:	c3                   	ret    
c001c7b8:	b0 00                	mov    al,0x0
c001c7ba:	90                   	nop
c001c7bb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c7bc <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c7bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c7c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c7c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c7c4:	83 ec 0c             	sub    esp,0xc
c001c7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7cb:	8b 00                	mov    eax,DWORD PTR [eax]
c001c7cd:	85 c0                	test   eax,eax
c001c7cf:	75 17                	jne    c001c7e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c7d1:	83 ec 0c             	sub    esp,0xc
c001c7d4:	68 50 d9 01 c0       	push   0xc001d950
c001c7d9:	e8 99 3a ff ff       	call   c0010277 <KePanic(char const*)>
c001c7de:	83 c4 10             	add    esp,0x10
c001c7e1:	e9 92 00 00 00       	jmp    c001c878 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c7e6:	66 90                	xchg   ax,ax
c001c7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c7ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c7f2:	85 c0                	test   eax,eax
c001c7f4:	0f 95 c0             	setne  al
c001c7f7:	84 c0                	test   al,al
c001c7f9:	74 11                	je     c001c80c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c7fb:	83 ec 0c             	sub    esp,0xc
c001c7fe:	68 9b d9 01 c0       	push   0xc001d99b
c001c803:	e8 6f 3a ff ff       	call   c0010277 <KePanic(char const*)>
c001c808:	83 c4 10             	add    esp,0x10
c001c80b:	90                   	nop
c001c80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c810:	8b 00                	mov    eax,DWORD PTR [eax]
c001c812:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c815:	85 c0                	test   eax,eax
c001c817:	0f 94 c0             	sete   al
c001c81a:	84 c0                	test   al,al
c001c81c:	74 36                	je     c001c854 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c822:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c82c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c837:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c83a:	83 f8 01             	cmp    eax,0x1
c001c83d:	74 25                	je     c001c864 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c83f:	83 ec 0c             	sub    esp,0xc
c001c842:	68 74 d9 01 c0       	push   0xc001d974
c001c847:	e8 2b 3a ff ff       	call   c0010277 <KePanic(char const*)>
c001c84c:	83 c4 10             	add    esp,0x10
c001c84f:	eb 13                	jmp    c001c864 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c851:	8d 76 00             	lea    esi,[esi+0x0]
c001c854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c858:	8b 00                	mov    eax,DWORD PTR [eax]
c001c85a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c85d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c861:	89 10                	mov    DWORD PTR [eax],edx
c001c863:	90                   	nop
c001c864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c868:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c86b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c872:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c875:	8d 76 00             	lea    esi,[esi+0x0]
c001c878:	83 c4 0c             	add    esp,0xc
c001c87b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c87c:	83 ec 0c             	sub    esp,0xc
c001c87f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c884:	75 12                	jne    c001c898 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c886:	83 ec 0c             	sub    esp,0xc
c001c889:	68 18 d9 01 c0       	push   0xc001d918
c001c88e:	e8 e4 39 ff ff       	call   c0010277 <KePanic(char const*)>
c001c893:	83 c4 10             	add    esp,0x10
c001c896:	66 90                	xchg   ax,ax
c001c898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c89c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c89e:	85 c0                	test   eax,eax
c001c8a0:	74 36                	je     c001c8d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8a9:	85 c0                	test   eax,eax
c001c8ab:	74 2b                	je     c001c8d8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8b8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c8c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c8d4:	eb 6a                	jmp    c001c940 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c8d6:	66 90                	xchg   ax,ax
c001c8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8dc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c8de:	85 c0                	test   eax,eax
c001c8e0:	75 4e                	jne    c001c930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c8e9:	85 c0                	test   eax,eax
c001c8eb:	75 43                	jne    c001c930 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c8ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8f5:	89 10                	mov    DWORD PTR [eax],edx
c001c8f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8fb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c8ff:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c906:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c909:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c914:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c917:	85 c0                	test   eax,eax
c001c919:	74 25                	je     c001c940 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c91b:	83 ec 0c             	sub    esp,0xc
c001c91e:	68 3a d9 01 c0       	push   0xc001d93a
c001c923:	e8 4f 39 ff ff       	call   c0010277 <KePanic(char const*)>
c001c928:	83 c4 10             	add    esp,0x10
c001c92b:	eb 13                	jmp    c001c940 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c92d:	8d 76 00             	lea    esi,[esi+0x0]
c001c930:	83 ec 0c             	sub    esp,0xc
c001c933:	68 44 d9 01 c0       	push   0xc001d944
c001c938:	e8 3a 39 ff ff       	call   c0010277 <KePanic(char const*)>
c001c93d:	83 c4 10             	add    esp,0x10
c001c940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c944:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c947:	8d 50 01             	lea    edx,[eax+0x1]
c001c94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c94e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c951:	90                   	nop
c001c952:	83 c4 0c             	add    esp,0xc
c001c955:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c958 <ACPI::~ACPI()>:
c001c958:	83 ec 0c             	sub    esp,0xc
c001c95b:	ba 94 e5 01 c0       	mov    edx,0xc001e594
c001c960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c964:	89 10                	mov    DWORD PTR [eax],edx
c001c966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c96a:	83 ec 0c             	sub    esp,0xc
c001c96d:	50                   	push   eax
c001c96e:	e8 c3 ef fe ff       	call   c000b936 <Device::~Device()>
c001c973:	83 c4 10             	add    esp,0x10
c001c976:	90                   	nop
c001c977:	83 c4 0c             	add    esp,0xc
c001c97a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c97c <ACPI::~ACPI()>:
c001c97c:	83 ec 0c             	sub    esp,0xc
c001c97f:	83 ec 0c             	sub    esp,0xc
c001c982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c986:	e8 cd ff ff ff       	call   c001c958 <ACPI::~ACPI()>
c001c98b:	83 c4 10             	add    esp,0x10
c001c98e:	83 ec 08             	sub    esp,0x8
c001c991:	68 64 12 00 00       	push   0x1264
c001c996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c99a:	e8 5f db fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001c99f:	83 c4 10             	add    esp,0x10
c001c9a2:	83 c4 0c             	add    esp,0xc
c001c9a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c9a8 <LinkedList<Device>::~LinkedList()>:
c001c9a8:	90                   	nop
c001c9a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c9ac <LinkedList<Device>::isEmpty()>:
c001c9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9b2:	85 c0                	test   eax,eax
c001c9b4:	75 0e                	jne    c001c9c4 <LinkedList<Device>::isEmpty()+0x18>
c001c9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9bd:	85 c0                	test   eax,eax
c001c9bf:	75 03                	jne    c001c9c4 <LinkedList<Device>::isEmpty()+0x18>
c001c9c1:	b0 01                	mov    al,0x1
c001c9c3:	c3                   	ret    
c001c9c4:	b0 00                	mov    al,0x0
c001c9c6:	90                   	nop
c001c9c7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c9c8 <LinkedList<Device>::getFirstElement()>:
c001c9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9ce:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c9d0 <LinkedList<Device>::removeFirst()>:
c001c9d0:	83 ec 0c             	sub    esp,0xc
c001c9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9d7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c9d9:	85 c0                	test   eax,eax
c001c9db:	75 17                	jne    c001c9f4 <LinkedList<Device>::removeFirst()+0x24>
c001c9dd:	83 ec 0c             	sub    esp,0xc
c001c9e0:	68 50 d9 01 c0       	push   0xc001d950
c001c9e5:	e8 8d 38 ff ff       	call   c0010277 <KePanic(char const*)>
c001c9ea:	83 c4 10             	add    esp,0x10
c001c9ed:	e9 92 00 00 00       	jmp    c001ca84 <LinkedList<Device>::removeFirst()+0xb4>
c001c9f2:	66 90                	xchg   ax,ax
c001c9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c9fb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca01:	85 c0                	test   eax,eax
c001ca03:	74 13                	je     c001ca18 <LinkedList<Device>::removeFirst()+0x48>
c001ca05:	83 ec 0c             	sub    esp,0xc
c001ca08:	68 9b d9 01 c0       	push   0xc001d99b
c001ca0d:	e8 65 38 ff ff       	call   c0010277 <KePanic(char const*)>
c001ca12:	83 c4 10             	add    esp,0x10
c001ca15:	8d 76 00             	lea    esi,[esi+0x0]
c001ca18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca1c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca1e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ca24:	85 c0                	test   eax,eax
c001ca26:	75 34                	jne    c001ca5c <LinkedList<Device>::removeFirst()+0x8c>
c001ca28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ca32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ca3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca41:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca44:	83 f8 01             	cmp    eax,0x1
c001ca47:	74 27                	je     c001ca70 <LinkedList<Device>::removeFirst()+0xa0>
c001ca49:	83 ec 0c             	sub    esp,0xc
c001ca4c:	68 74 d9 01 c0       	push   0xc001d974
c001ca51:	e8 21 38 ff ff       	call   c0010277 <KePanic(char const*)>
c001ca56:	83 c4 10             	add    esp,0x10
c001ca59:	eb 15                	jmp    c001ca70 <LinkedList<Device>::removeFirst()+0xa0>
c001ca5b:	90                   	nop
c001ca5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca60:	8b 00                	mov    eax,DWORD PTR [eax]
c001ca62:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ca68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca6c:	89 10                	mov    DWORD PTR [eax],edx
c001ca6e:	66 90                	xchg   ax,ax
c001ca70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ca77:	8d 50 ff             	lea    edx,[eax-0x1]
c001ca7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ca81:	8d 76 00             	lea    esi,[esi+0x0]
c001ca84:	83 c4 0c             	add    esp,0xc
c001ca87:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ca88 <CPU::~CPU()>:
c001ca88:	83 ec 0c             	sub    esp,0xc
c001ca8b:	ba 30 e7 01 c0       	mov    edx,0xc001e730
c001ca90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca94:	89 10                	mov    DWORD PTR [eax],edx
c001ca96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ca9a:	83 ec 0c             	sub    esp,0xc
c001ca9d:	50                   	push   eax
c001ca9e:	e8 93 ee fe ff       	call   c000b936 <Device::~Device()>
c001caa3:	83 c4 10             	add    esp,0x10
c001caa6:	90                   	nop
c001caa7:	83 c4 0c             	add    esp,0xc
c001caaa:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001caac <CPU::~CPU()>:
c001caac:	83 ec 0c             	sub    esp,0xc
c001caaf:	83 ec 0c             	sub    esp,0xc
c001cab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cab6:	e8 cd ff ff ff       	call   c001ca88 <CPU::~CPU()>
c001cabb:	83 c4 10             	add    esp,0x10
c001cabe:	83 ec 08             	sub    esp,0x8
c001cac1:	68 94 11 00 00       	push   0x1194
c001cac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caca:	e8 2f da fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001cacf:	83 c4 10             	add    esp,0x10
c001cad2:	83 c4 0c             	add    esp,0xc
c001cad5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001cad8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001cad8:	90                   	nop
c001cad9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001cadc <ThreadControlBlock::ThreadControlBlock()>:
c001cadc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001cae7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caeb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001caf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001caf6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001cafd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb01:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001cb08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb0c:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001cb13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb17:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001cb1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb1f:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001cb23:	90                   	nop
c001cb24:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001cb28 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001cb28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb4c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001cb52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001cb5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb61:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001cb68:	90                   	nop
c001cb69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001cb6c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001cb6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001cb73:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001cb74 <PCI::~PCI()>:
c001cb74:	83 ec 0c             	sub    esp,0xc
c001cb77:	ba cc f3 01 c0       	mov    edx,0xc001f3cc
c001cb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb80:	89 10                	mov    DWORD PTR [eax],edx
c001cb82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb86:	83 ec 0c             	sub    esp,0xc
c001cb89:	50                   	push   eax
c001cb8a:	e8 31 e8 fe ff       	call   c000b3c0 <Bus::~Bus()>
c001cb8f:	83 c4 10             	add    esp,0x10
c001cb92:	90                   	nop
c001cb93:	83 c4 0c             	add    esp,0xc
c001cb96:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001cb98 <PCI::~PCI()>:
c001cb98:	83 ec 0c             	sub    esp,0xc
c001cb9b:	83 ec 0c             	sub    esp,0xc
c001cb9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cba2:	e8 cd ff ff ff       	call   c001cb74 <PCI::~PCI()>
c001cba7:	83 c4 10             	add    esp,0x10
c001cbaa:	83 ec 08             	sub    esp,0x8
c001cbad:	68 5c 01 00 00       	push   0x15c
c001cbb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbb6:	e8 43 d9 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001cbbb:	83 c4 10             	add    esp,0x10
c001cbbe:	83 c4 0c             	add    esp,0xc
c001cbc1:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001cbc2 <IDE::~IDE()>:
c001cbc2:	83 ec 0c             	sub    esp,0xc
c001cbc5:	ba 80 f4 01 c0       	mov    edx,0xc001f480
c001cbca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbce:	89 10                	mov    DWORD PTR [eax],edx
c001cbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd4:	83 ec 0c             	sub    esp,0xc
c001cbd7:	50                   	push   eax
c001cbd8:	e8 d3 f1 fe ff       	call   c000bdb0 <HardDiskController::~HardDiskController()>
c001cbdd:	83 c4 10             	add    esp,0x10
c001cbe0:	90                   	nop
c001cbe1:	83 c4 0c             	add    esp,0xc
c001cbe4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001cbe6 <IDE::~IDE()>:
c001cbe6:	83 ec 0c             	sub    esp,0xc
c001cbe9:	83 ec 0c             	sub    esp,0xc
c001cbec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbf0:	e8 cd ff ff ff       	call   c001cbc2 <IDE::~IDE()>
c001cbf5:	83 c4 10             	add    esp,0x10
c001cbf8:	83 ec 08             	sub    esp,0x8
c001cbfb:	68 70 02 00 00       	push   0x270
c001cc00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc04:	e8 f5 d8 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001cc09:	83 c4 10             	add    esp,0x10
c001cc0c:	83 c4 0c             	add    esp,0xc
c001cc0f:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001cc10 <SATABus::~SATABus()>:
c001cc10:	83 ec 0c             	sub    esp,0xc
c001cc13:	ba d0 f4 01 c0       	mov    edx,0xc001f4d0
c001cc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1c:	89 10                	mov    DWORD PTR [eax],edx
c001cc1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc22:	83 ec 0c             	sub    esp,0xc
c001cc25:	50                   	push   eax
c001cc26:	e8 85 f1 fe ff       	call   c000bdb0 <HardDiskController::~HardDiskController()>
c001cc2b:	83 c4 10             	add    esp,0x10
c001cc2e:	90                   	nop
c001cc2f:	83 c4 0c             	add    esp,0xc
c001cc32:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001cc34 <SATABus::~SATABus()>:
c001cc34:	83 ec 0c             	sub    esp,0xc
c001cc37:	83 ec 0c             	sub    esp,0xc
c001cc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc3e:	e8 cd ff ff ff       	call   c001cc10 <SATABus::~SATABus()>
c001cc43:	83 c4 10             	add    esp,0x10
c001cc46:	83 ec 08             	sub    esp,0x8
c001cc49:	68 64 01 00 00       	push   0x164
c001cc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc52:	e8 a7 d8 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001cc57:	83 c4 10             	add    esp,0x10
c001cc5a:	83 c4 0c             	add    esp,0xc
c001cc5d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001cc5e <ATA::~ATA()>:
c001cc5e:	83 ec 0c             	sub    esp,0xc
c001cc61:	ba 10 f5 01 c0       	mov    edx,0xc001f510
c001cc66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6a:	89 10                	mov    DWORD PTR [eax],edx
c001cc6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc70:	83 ec 0c             	sub    esp,0xc
c001cc73:	50                   	push   eax
c001cc74:	e8 19 f2 fe ff       	call   c000be92 <PhysicalDisk::~PhysicalDisk()>
c001cc79:	83 c4 10             	add    esp,0x10
c001cc7c:	90                   	nop
c001cc7d:	83 c4 0c             	add    esp,0xc
c001cc80:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001cc82 <ATA::~ATA()>:
c001cc82:	83 ec 0c             	sub    esp,0xc
c001cc85:	83 ec 0c             	sub    esp,0xc
c001cc88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc8c:	e8 cd ff ff ff       	call   c001cc5e <ATA::~ATA()>
c001cc91:	83 c4 10             	add    esp,0x10
c001cc94:	83 ec 08             	sub    esp,0x8
c001cc97:	68 7c 01 00 00       	push   0x17c
c001cc9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cca0:	e8 59 d8 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001cca5:	83 c4 10             	add    esp,0x10
c001cca8:	83 c4 0c             	add    esp,0xc
c001ccab:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ccac <ATAPI::~ATAPI()>:
c001ccac:	83 ec 0c             	sub    esp,0xc
c001ccaf:	ba 58 f5 01 c0       	mov    edx,0xc001f558
c001ccb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccb8:	89 10                	mov    DWORD PTR [eax],edx
c001ccba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ccbe:	83 ec 0c             	sub    esp,0xc
c001ccc1:	50                   	push   eax
c001ccc2:	e8 cb f1 fe ff       	call   c000be92 <PhysicalDisk::~PhysicalDisk()>
c001ccc7:	83 c4 10             	add    esp,0x10
c001ccca:	90                   	nop
c001cccb:	83 c4 0c             	add    esp,0xc
c001ccce:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ccd0 <ATAPI::~ATAPI()>:
c001ccd0:	83 ec 0c             	sub    esp,0xc
c001ccd3:	83 ec 0c             	sub    esp,0xc
c001ccd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccda:	e8 cd ff ff ff       	call   c001ccac <ATAPI::~ATAPI()>
c001ccdf:	83 c4 10             	add    esp,0x10
c001cce2:	83 ec 08             	sub    esp,0x8
c001cce5:	68 84 01 00 00       	push   0x184
c001ccea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ccee:	e8 0b d8 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001ccf3:	83 c4 10             	add    esp,0x10
c001ccf6:	83 c4 0c             	add    esp,0xc
c001ccf9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001ccfa <SATA::~SATA()>:
c001ccfa:	83 ec 0c             	sub    esp,0xc
c001ccfd:	ba 0c f6 01 c0       	mov    edx,0xc001f60c
c001cd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd06:	89 10                	mov    DWORD PTR [eax],edx
c001cd08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd0c:	83 ec 0c             	sub    esp,0xc
c001cd0f:	50                   	push   eax
c001cd10:	e8 7d f1 fe ff       	call   c000be92 <PhysicalDisk::~PhysicalDisk()>
c001cd15:	83 c4 10             	add    esp,0x10
c001cd18:	90                   	nop
c001cd19:	83 c4 0c             	add    esp,0xc
c001cd1c:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001cd1e <SATA::~SATA()>:
c001cd1e:	83 ec 0c             	sub    esp,0xc
c001cd21:	83 ec 0c             	sub    esp,0xc
c001cd24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd28:	e8 cd ff ff ff       	call   c001ccfa <SATA::~SATA()>
c001cd2d:	83 c4 10             	add    esp,0x10
c001cd30:	83 ec 08             	sub    esp,0x8
c001cd33:	68 7c 01 00 00       	push   0x17c
c001cd38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd3c:	e8 bd d7 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001cd41:	83 c4 10             	add    esp,0x10
c001cd44:	83 c4 0c             	add    esp,0xc
c001cd47:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001cd48 <SATAPI::~SATAPI()>:
c001cd48:	83 ec 0c             	sub    esp,0xc
c001cd4b:	ba 44 f7 01 c0       	mov    edx,0xc001f744
c001cd50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd54:	89 10                	mov    DWORD PTR [eax],edx
c001cd56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd5a:	83 ec 0c             	sub    esp,0xc
c001cd5d:	50                   	push   eax
c001cd5e:	e8 2f f1 fe ff       	call   c000be92 <PhysicalDisk::~PhysicalDisk()>
c001cd63:	83 c4 10             	add    esp,0x10
c001cd66:	90                   	nop
c001cd67:	83 c4 0c             	add    esp,0xc
c001cd6a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001cd6c <SATAPI::~SATAPI()>:
c001cd6c:	83 ec 0c             	sub    esp,0xc
c001cd6f:	83 ec 0c             	sub    esp,0xc
c001cd72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd76:	e8 cd ff ff ff       	call   c001cd48 <SATAPI::~SATAPI()>
c001cd7b:	83 c4 10             	add    esp,0x10
c001cd7e:	83 ec 08             	sub    esp,0x8
c001cd81:	68 84 01 00 00       	push   0x184
c001cd86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cd8a:	e8 6f d7 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001cd8f:	83 c4 10             	add    esp,0x10
c001cd92:	83 c4 0c             	add    esp,0xc
c001cd95:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001cd96 <IOAPIC::~IOAPIC()>:
c001cd96:	83 ec 0c             	sub    esp,0xc
c001cd99:	ba 84 f7 01 c0       	mov    edx,0xc001f784
c001cd9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda2:	89 10                	mov    DWORD PTR [eax],edx
c001cda4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda8:	83 ec 0c             	sub    esp,0xc
c001cdab:	50                   	push   eax
c001cdac:	e8 85 eb fe ff       	call   c000b936 <Device::~Device()>
c001cdb1:	83 c4 10             	add    esp,0x10
c001cdb4:	90                   	nop
c001cdb5:	83 c4 0c             	add    esp,0xc
c001cdb8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001cdba <IOAPIC::~IOAPIC()>:
c001cdba:	83 ec 0c             	sub    esp,0xc
c001cdbd:	83 ec 0c             	sub    esp,0xc
c001cdc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdc4:	e8 cd ff ff ff       	call   c001cd96 <IOAPIC::~IOAPIC()>
c001cdc9:	83 c4 10             	add    esp,0x10
c001cdcc:	83 ec 08             	sub    esp,0x8
c001cdcf:	68 68 01 00 00       	push   0x168
c001cdd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cdd8:	e8 21 d7 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001cddd:	83 c4 10             	add    esp,0x10
c001cde0:	83 c4 0c             	add    esp,0xc
c001cde3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001cde4 <APICTimer::~APICTimer()>:
c001cde4:	83 ec 0c             	sub    esp,0xc
c001cde7:	ba cc f7 01 c0       	mov    edx,0xc001f7cc
c001cdec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf0:	89 10                	mov    DWORD PTR [eax],edx
c001cdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf6:	83 ec 0c             	sub    esp,0xc
c001cdf9:	50                   	push   eax
c001cdfa:	e8 75 04 ff ff       	call   c000d274 <Timer::~Timer()>
c001cdff:	83 c4 10             	add    esp,0x10
c001ce02:	90                   	nop
c001ce03:	83 c4 0c             	add    esp,0xc
c001ce06:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001ce08 <APICTimer::~APICTimer()>:
c001ce08:	83 ec 0c             	sub    esp,0xc
c001ce0b:	83 ec 0c             	sub    esp,0xc
c001ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce12:	e8 cd ff ff ff       	call   c001cde4 <APICTimer::~APICTimer()>
c001ce17:	83 c4 10             	add    esp,0x10
c001ce1a:	83 ec 08             	sub    esp,0x8
c001ce1d:	68 60 01 00 00       	push   0x160
c001ce22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce26:	e8 d3 d6 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001ce2b:	83 c4 10             	add    esp,0x10
c001ce2e:	83 c4 0c             	add    esp,0xc
c001ce31:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ce34 <PIT::~PIT()>:
c001ce34:	83 ec 0c             	sub    esp,0xc
c001ce37:	ba 1c f8 01 c0       	mov    edx,0xc001f81c
c001ce3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce40:	89 10                	mov    DWORD PTR [eax],edx
c001ce42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce46:	83 ec 0c             	sub    esp,0xc
c001ce49:	50                   	push   eax
c001ce4a:	e8 25 04 ff ff       	call   c000d274 <Timer::~Timer()>
c001ce4f:	83 c4 10             	add    esp,0x10
c001ce52:	90                   	nop
c001ce53:	83 c4 0c             	add    esp,0xc
c001ce56:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ce58 <PIT::~PIT()>:
c001ce58:	83 ec 0c             	sub    esp,0xc
c001ce5b:	83 ec 0c             	sub    esp,0xc
c001ce5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce62:	e8 cd ff ff ff       	call   c001ce34 <PIT::~PIT()>
c001ce67:	83 c4 10             	add    esp,0x10
c001ce6a:	83 ec 08             	sub    esp,0x8
c001ce6d:	68 5c 01 00 00       	push   0x15c
c001ce72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce76:	e8 83 d6 fe ff       	call   c000a4fe <operator delete(void*, unsigned long)>
c001ce7b:	83 c4 10             	add    esp,0x10
c001ce7e:	83 c4 0c             	add    esp,0xc
c001ce81:	c3                   	ret    

Disassembly of section userkernel:

c0020000 <KiDefaultSignalHandlerAbort(int)>:
c0020000:	57                   	push   edi
c0020001:	b9 07 00 00 00       	mov    ecx,0x7
c0020006:	56                   	push   esi
c0020007:	be 21 e8 01 c0       	mov    esi,0xc001e821
c002000c:	83 ec 24             	sub    esp,0x24
c002000f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020013:	fc                   	cld    
c0020014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002001a:	50                   	push   eax
c002001b:	6a 00                	push   0x0
c002001d:	6a 00                	push   0x0
c002001f:	6a 27                	push   0x27
c0020021:	e8 2c 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0020026:	83 c4 34             	add    esp,0x34
c0020029:	5e                   	pop    esi
c002002a:	5f                   	pop    edi
c002002b:	c3                   	ret    

c002002c <KiDefaultSignalHandlerTerminate(int)>:
c002002c:	57                   	push   edi
c002002d:	b9 08 00 00 00       	mov    ecx,0x8
c0020032:	56                   	push   esi
c0020033:	be 3d e8 01 c0       	mov    esi,0xc001e83d
c0020038:	83 ec 24             	sub    esp,0x24
c002003b:	89 e7                	mov    edi,esp
c002003d:	fc                   	cld    
c002003e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0020040:	54                   	push   esp
c0020041:	6a 00                	push   0x0
c0020043:	6a 00                	push   0x0
c0020045:	6a 27                	push   0x27
c0020047:	e8 06 00 00 00       	call   c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002004c:	83 c4 34             	add    esp,0x34
c002004f:	5e                   	pop    esi
c0020050:	5f                   	pop    edi
c0020051:	c3                   	ret    

c0020052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0020052:	53                   	push   ebx
c0020053:	83 ec 10             	sub    esp,0x10
c0020056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002005a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002005e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0020062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020066:	cd 60                	int    0x60
c0020068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002006c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020078:	83 c4 10             	add    esp,0x10
c002007b:	5b                   	pop    ebx
c002007c:	c3                   	ret    

Disassembly of section align_previous:

c0021000 <DO_NOT_DELETE()>:
c0021000:	c3                   	ret    
