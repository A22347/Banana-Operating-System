
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f f6 00 00       	call   c000f65f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 73 83 02 00       	call   c0028398 <_init>
c0000025:	c3                   	ret    
c0000026:	bb ec 8f 02 c0       	mov    ebx,0xc0028fec
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f8 8f 02 c0    	cmp    ebx,0xc0028ff8
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 f8 ce 02 c0       	mov    eax,0xc002cef8
c0000049:	3d f8 ce 02 c0       	cmp    eax,0xc002cef8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 f8 ce 02 c0       	push   0xc002cef8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 f8 ce 02 c0       	mov    eax,0xc002cef8
c0000075:	2d f8 ce 02 c0       	sub    eax,0xc002cef8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 f8 ce 02 c0       	push   0xc002cef8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 28 d5 02 c0 00 	cmp    BYTE PTR ds:0xc002d528,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 00 90 02 c0       	mov    ebx,0xc0029000
c00000bb:	81 eb fc 8f 02 c0    	sub    ebx,0xc0028ffc
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be fc 8f 02 c0       	mov    esi,0xc0028ffc
c00000ca:	a1 2c d5 02 c0       	mov    eax,ds:0xc002d52c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 2c d5 02 c0       	mov    ds:0xc002d52c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 2c d5 02 c0       	mov    eax,ds:0xc002d52c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 f8 ce 02 c0       	push   0xc002cef8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 28 d5 02 c0 01 	mov    BYTE PTR ds:0xc002d528,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 30 d5 02 c0       	push   0xc002d530
c000012c:	68 f8 ce 02 c0       	push   0xc002cef8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 d1 ce 01 00       	call   c001d274 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 6e 20 01 00       	call   c0012429 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 af ce 01 00       	call   c001d274 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 57 d3 01 00       	call   c001d73b <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 6d d9 01 00       	call   c001dd5a <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 70 d9 02 c0 	lgdtd  ds:0xc002d970
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 d7 3d 01 00       	call   c00143b9 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 48 d5 02 c0       	mov    ds:0xc002d548,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 48 d5 02 c0    	mov    DWORD PTR ds:0xc002d548,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 48 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d548
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 20 90 02 c0 02 	test   BYTE PTR [edx-0x3ffd6fe0],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 20 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fe0],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 20 90 02 c0 08 	test   BYTE PTR [edx-0x3ffd6fe0],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 20 90 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6fe0],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 20 90 02 c0 01 	test   BYTE PTR [edx-0x3ffd6fe0],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 60 d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d560
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 60 d5 02 c0    	mov    DWORD PTR ds:0xc002d560,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 64 d5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd2a9c]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 64 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a9c],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 60 d5 02 c0    	mov    DWORD PTR ds:0xc002d560,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 8c d5 02 c0    	cmp    DWORD PTR ds:0xc002d58c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 9c d5 02 c0    	mov    ecx,DWORD PTR ds:0xc002d59c
c0000e38:	c7 42 0c 94 d5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002d594
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 9c d5 02 c0    	mov    DWORD PTR ds:0xc002d59c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 8c d5 02 c0    	mov    DWORD PTR ds:0xc002d58c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 60 d5 02 c0 02 	test   BYTE PTR ds:0xc002d560,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 df e4 00 00       	call   c000f3f8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 21 e4 00 00       	call   c000f3f8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 0b e4 00 00       	call   c000f3f8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 e7 e3 00 00       	call   c000f3f8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 60 d5 02 c0    	mov    edi,DWORD PTR ds:0xc002d560
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 64 d5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2a9c]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 64 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2a9c],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 94 d5 02 c0 	lea    edx,[eax*8-0x3ffd2a6c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d a0 d5 02 c0    	mov    ebx,DWORD PTR ds:0xc002d5a0
c00011ba:	81 fb 94 d5 02 c0    	cmp    ebx,0xc002d594
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 94 d5 02 c0       	cmp    eax,0xc002d594
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 90 d5 02 c0    	cmp    DWORD PTR ds:0xc002d590,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 9c d5 02 c0       	mov    ds:0xc002d59c,eax
c00011f6:	a3 a0 d5 02 c0       	mov    ds:0xc002d5a0,eax
c00011fb:	a3 90 d5 02 c0       	mov    ds:0xc002d590,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 94 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d594
c0001209:	c7 40 0c 94 d5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002d594
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 a0 d5 02 c0       	mov    ds:0xc002d5a0,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 94 d5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002d594
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 58 d5 02 c0 	lea    ebp,[edx*4-0x3ffd2aa8]
c000125a:	8b 14 95 60 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2aa0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 60 d5 02 c0 	lea    ecx,[edx*4-0x3ffd2aa0]
c0001275:	8b 14 95 60 d5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2aa0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 94 d8 02 c0 	or     DWORD PTR [edi*4-0x3ffd276c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 94 d5 02 c0 	lea    eax,[eax*8-0x3ffd2a6c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 9c d5 02 c0    	mov    DWORD PTR ds:0xc002d59c,ecx
c000132f:	89 0d a0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a0,ecx
c0001335:	c7 41 08 94 d5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002d594
c000133c:	c7 41 0c 94 d5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002d594
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 8c d5 02 c0 	lea    edx,[ecx*8-0x3ffd2a74]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 94 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd276c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 94 d8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd276c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 8c d5 02 c0 	lea    edx,[eax*4-0x3ffd2a74]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 94 d8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd276c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 9c d5 02 c0    	mov    DWORD PTR ds:0xc002d59c,edi
c0001402:	89 3d a0 d5 02 c0    	mov    DWORD PTR ds:0xc002d5a0,edi
c0001408:	c7 47 08 94 d5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002d594
c000140f:	c7 47 0c 94 d5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002d594
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 90 d5 02 c0    	mov    DWORD PTR ds:0xc002d590,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 8c d5 02 c0       	mov    eax,ds:0xc002d58c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 8c d5 02 c0    	mov    DWORD PTR ds:0xc002d58c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 60 d5 02 c0       	mov    edx,0xc002d560
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 60 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d560,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d b4 d8 02 c0    	mov    ebx,DWORD PTR ds:0xc002d8b4
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 b4 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d8b4,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d b4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8b4,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 8c d5 02 c0    	cmp    DWORD PTR ds:0xc002d58c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 8c d5 02 c0    	mov    DWORD PTR ds:0xc002d58c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 60 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d560,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 bc d8 02 c0    	push   DWORD PTR ds:0xc002d8bc
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 60 d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d560,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 bc d8 02 c0       	mov    eax,ds:0xc002d8bc
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 8c d5 02 c0 00 	cmp    DWORD PTR ds:0xc002d58c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 8c d5 02 c0       	mov    eax,ds:0xc002d58c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 64 d5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2a9c]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 94 d5 02 c0       	mov    eax,0xc002d594
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 8c d8 02 c0       	cmp    eax,0xc002d88c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 c8 d8 02 c0       	mov    eax,ds:0xc002d8c8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 b0 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8b0
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 c4 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8c4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 d4 d8 02 c0    	mov    esi,DWORD PTR ds:0xc002d8d4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 60 d5 02 c0       	mov    eax,0xc002d560
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 24 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6edc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 60 d5 02 c0       	mov    eax,ds:0xc002d560
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 60 d5 02 c0       	mov    ds:0xc002d560,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d a4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8a4,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d a8 d8 02 c0    	mov    DWORD PTR ds:0xc002d8a8,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d ac d8 02 c0    	mov    DWORD PTR ds:0xc002d8ac,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 b4 d8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d8b4,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 20 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcefe0]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 98 eb 01 00       	jmp    c002078a <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 20 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcefe0]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 c9 eb 01 00       	jmp    c00207d1 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 20 10 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcefe0]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 f1 eb 01 00       	jmp    c0020818 <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 ea 47 02 00       	call   c00266f4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 40 92 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6dc0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 40 92 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6dc0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 40 91 02 c0       	mov    edx,0xc0029140
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 60 92 02 c0       	mov    edx,0xc0029260
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 34 be 02 c0       	mov    edx,0xc002be34
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 6c 92 02 c0       	mov    edx,0xc002926c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 50 92 02 c0       	mov    edx,0xc0029250
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 00 d9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2700]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 e0 d8 02 c0    	mov    ax,ds:0xc002d8e0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 e0 d8 02 c0    	mov    ds:0xc002d8e0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 e7 35 02 00       	call   c00266f4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 72 92 02 c0       	mov    eax,0xc0029272
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad c0 91 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6e40]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 7b 92 02 c0       	mov    eax,0xc002927b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 40 92 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6dc0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 b2 1f 02 00       	call   c00266f4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 50 92 02 c0       	mov    edx,0xc0029250
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 40 91 02 c0       	mov    edx,0xc0029140
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 50 91 02 c0       	mov    edx,0xc0029150
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 00 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2700]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 00 d9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2700],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 79 09 02 00       	call   c00266f4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 5f 09 02 00       	call   c00266f4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 97 91 02 c0       	mov    eax,0xc0029197
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 90 91 02 c0       	mov    eax,0xc0029190
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 00 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2700]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 80 91 02 c0       	mov    esi,0xc0029180
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 a2 f0 01 00       	call   c00266f4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 60 92 02 c0       	mov    edx,0xc0029260
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 60 91 02 c0       	mov    edx,0xc0029160
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 70 91 02 c0       	mov    edx,0xc0029170
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 82 92 02 c0       	mov    edx,0xc0029282
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 8e 92 02 c0       	mov    edx,0xc002928e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba a2 92 02 c0       	mov    edx,0xc00292a2
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 30 71 00 00       	call   c000f599 <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 2a 71 00 00       	call   c000f5a9 <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c c0 95 02 c0 	mov    DWORD PTR [esp+0xc],0xc00295c0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 c0 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295c0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 c0 93 02 c0       	mov    eax,0xc00293c0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 00 93 02 c0       	mov    eax,0xc0029300
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 c0 92 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6d40]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 6f 6e 00 00       	call   c000f5a9 <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 59 6e 00 00       	call   c000f5a9 <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 f6 f9 01 00       	call   c00281c7 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 b9 f9 01 00       	call   c00281a9 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 8d f9 01 00       	call   c00281c7 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 40 f0 01 00       	call   c00278cc <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 c2 fa 01 00       	call   c0028360 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 07 f9 01 00       	call   c00281c7 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 49 f8 01 00       	call   c00281c7 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 16 f8 01 00       	call   c00281a9 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 03 f7 01 00       	call   c00281c7 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 cb f6 01 00       	call   c00281a9 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 38 6a 00 00       	call   c000f5c9 <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 d3 69 00 00       	call   c000f5a9 <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 c0 96 02 c0       	mov    eax,0xc00296c0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 d7 f4 01 00       	call   c00281c7 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 9c f4 01 00       	call   c00281a9 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 20 9b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd64e0]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 ac f1 01 00       	call   c0027f5b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 2a eb 01 00       	call   c00278f8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 e6 f3 01 00       	call   c00281cb <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 d4 f4 01 00       	call   c00282ef <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 be ea 01 00       	call   c00278f8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 69 f3 01 00       	call   c00281c5 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 4a f3 01 00       	call   c00281c9 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 e0 f4 01 00       	call   c0028380 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 8a f0 01 00       	call   c0027f5b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 08 ea 01 00       	call   c00278f8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 c4 f2 01 00       	call   c00281cb <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 b2 f3 01 00       	call   c00282ef <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 9c e9 01 00       	call   c00278f8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 47 f2 01 00       	call   c00281c5 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 27 f2 01 00       	call   c00281c9 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 bc f3 01 00       	call   c0028380 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 62 f1 01 00       	call   c00281c7 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 20 f1 01 00       	call   c00281a9 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 08 f1 01 00       	call   c00281c7 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 7a ee 01 00       	call   c0027f5b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 7c e1 01 00       	call   c002727b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 df e7 01 00       	call   c00278f8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 31 ee 01 00       	call   c0027f5b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 37 e1 01 00       	call   c002727b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 06 ee 01 00       	call   c0027f5b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 56 f0 01 00       	call   c00281c5 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 33 e7 01 00       	call   c00278cc <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 b5 f1 01 00       	call   c0028360 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 dc ef 01 00       	call   c00281a9 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 d7 e6 01 00       	call   c00278cc <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 55 ed 01 00       	call   c0027f5b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 d8 e6 01 00       	call   c00278f8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 2a ed 01 00       	call   c0027f5b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 91 e9 01 00       	call   c0027bdc <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 10 e0 01 00       	call   c002727b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 70 d9 01 00       	call   c0026c10 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 47 f0 01 00       	call   c00282ef <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 30 e6 01 00       	call   c00278f8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 17 f0 01 00       	call   c00282ef <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 89 df 01 00       	call   c002727b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 c2 ee 01 00       	call   c00281cb <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 aa e8 01 00       	call   c0027bdc <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 30 df 01 00       	call   c002727b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 1e f0 01 00       	call   c0028380 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 f0 eb 01 00       	call   c0027f5b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 47 e5 01 00       	call   c00278cc <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 26 ee 01 00       	call   c00281c7 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 bf de 01 00       	call   c002727b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 eb e4 01 00       	call   c00278cc <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 8d ef 01 00       	call   c0028380 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 3e eb 01 00       	call   c0027f5b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 bb e4 01 00       	call   c00278f8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 0e eb 01 00       	call   c0027f5b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 14 de 01 00       	call   c002727b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 e4 ea 01 00       	call   c0027f5b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 36 ed 01 00       	call   c00281c7 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 0d e4 01 00       	call   c00278cc <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 8f ee 01 00       	call   c0028360 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 b6 ec 01 00       	call   c00281a9 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 b0 e3 01 00       	call   c00278cc <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 2e ea 01 00       	call   c0027f5b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 b1 e3 01 00       	call   c00278f8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 03 ea 01 00       	call   c0027f5b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 6a e6 01 00       	call   c0027bdc <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 e9 dc 01 00       	call   c002727b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 39 d6 01 00       	call   c0026c10 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 10 ed 01 00       	call   c00282ef <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 f9 e2 01 00       	call   c00278f8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 e0 ec 01 00       	call   c00282ef <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 52 dc 01 00       	call   c002727b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 8b eb 01 00       	call   c00281cb <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 72 e5 01 00       	call   c0027bdc <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 f1 db 01 00       	call   c002727b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 df ec 01 00       	call   c0028380 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 b1 e8 01 00       	call   c0027f5b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 08 e2 01 00       	call   c00278cc <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 e7 ea 01 00       	call   c00281c7 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 80 db 01 00       	call   c002727b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 ac e1 01 00       	call   c00278cc <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 21 e8 01 00       	call   c0027f5b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 27 db 01 00       	call   c002727b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 80 9b 02 c0       	mov    eax,0xc0029b80
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 94 9b 02 c0       	mov    eax,0xc0029b94
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 6c 5d 00 00       	call   c000f5a9 <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 6e 5d 00 00       	call   c000f5c9 <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 9c e6 01 00       	call   c0027f5b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 1a e0 01 00       	call   c00278f8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 ac d2 01 00       	call   c0026c10 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 83 e9 01 00       	call   c00282ef <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 6c df 01 00       	call   c00278f8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 4f e9 01 00       	call   c00282ef <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 c1 d8 01 00       	call   c002727b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 21 e9 01 00       	call   c00282ef <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 10 df 01 00       	call   c00278f8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 79 d8 01 00       	call   c002727b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 9a d1 01 00       	call   c0026c10 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 71 e8 01 00       	call   c00282ef <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 5a de 01 00       	call   c00278f8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 3d e8 01 00       	call   c00282ef <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 af d7 01 00       	call   c002727b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 0f e8 01 00       	call   c00282ef <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 fe dd 01 00       	call   c00278f8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 67 d7 01 00       	call   c002727b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 45 d7 01 00       	call   c002727b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 21 d0 01 00       	call   c0026c10 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 f8 e6 01 00       	call   c00282ef <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 e1 dc 01 00       	call   c00278f8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 c4 e6 01 00       	call   c00282ef <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 36 d6 01 00       	call   c002727b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 96 e6 01 00       	call   c00282ef <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 7f dc 01 00       	call   c00278f8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 e8 d5 01 00       	call   c002727b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 48 e6 01 00       	call   c00282ef <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 31 dc 01 00       	call   c00278f8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 9a d5 01 00       	call   c002727b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 af ce 01 00       	call   c0026c10 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 86 e5 01 00       	call   c00282ef <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 6f db 01 00       	call   c00278f8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 56 e5 01 00       	call   c00282ef <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 c8 d4 01 00       	call   c002727b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 28 e5 01 00       	call   c00282ef <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 11 db 01 00       	call   c00278f8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 7a d4 01 00       	call   c002727b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 da e4 01 00       	call   c00282ef <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 c3 da 01 00       	call   c00278f8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 2c d4 01 00       	call   c002727b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 00 d4 01 00       	call   c002727b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 5d da 01 00       	call   c00278f8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 19 e3 01 00       	call   c00281cb <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 a8 d3 01 00       	call   c002727b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 05 da 01 00       	call   c00278f8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 c1 e2 01 00       	call   c00281cb <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 3b cc 01 00       	call   c0026c10 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 12 e3 01 00       	call   c00282ef <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 fb d8 01 00       	call   c00278f8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 de e2 01 00       	call   c00282ef <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 50 d2 01 00       	call   c002727b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 b0 e2 01 00       	call   c00282ef <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 99 d8 01 00       	call   c00278f8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 02 d2 01 00       	call   c002727b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 62 e2 01 00       	call   c00282ef <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 4b d8 01 00       	call   c00278f8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 b4 d1 01 00       	call   c002727b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 14 e2 01 00       	call   c00282ef <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 fd d7 01 00       	call   c00278f8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 66 d1 01 00       	call   c002727b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 c6 e1 01 00       	call   c00282ef <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 af d7 01 00       	call   c00278f8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 18 d1 01 00       	call   c002727b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 1a ca 01 00       	call   c0026c10 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 f1 e0 01 00       	call   c00282ef <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 da d6 01 00       	call   c00278f8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 c1 e0 01 00       	call   c00282ef <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 33 d0 01 00       	call   c002727b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 93 e0 01 00       	call   c00282ef <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 7c d6 01 00       	call   c00278f8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 e5 cf 01 00       	call   c002727b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 45 e0 01 00       	call   c00282ef <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 2e d6 01 00       	call   c00278f8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 97 cf 01 00       	call   c002727b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 f7 df 01 00       	call   c00282ef <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 e0 d5 01 00       	call   c00278f8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 49 cf 01 00       	call   c002727b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 a9 df 01 00       	call   c00282ef <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 92 d5 01 00       	call   c00278f8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 fb ce 01 00       	call   c002727b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 cf ce 01 00       	call   c002727b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 2c d5 01 00       	call   c00278f8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 e8 dd 01 00       	call   c00281cb <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 77 ce 01 00       	call   c002727b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 d4 d4 01 00       	call   c00278f8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 90 dd 01 00       	call   c00281cb <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 1e ce 01 00       	call   c002727b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 7b d4 01 00       	call   c00278f8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 37 dd 01 00       	call   c00281cb <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 c5 cd 01 00       	call   c002727b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 22 d4 01 00       	call   c00278f8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 de dc 01 00       	call   c00281cb <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 3c c6 01 00       	call   c0026c10 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 13 dd 01 00       	call   c00282ef <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 fc d2 01 00       	call   c00278f8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 df dc 01 00       	call   c00282ef <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 51 cc 01 00       	call   c002727b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 b1 dc 01 00       	call   c00282ef <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 9a d2 01 00       	call   c00278f8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 03 cc 01 00       	call   c002727b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 63 dc 01 00       	call   c00282ef <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 4c d2 01 00       	call   c00278f8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 b5 cb 01 00       	call   c002727b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 15 dc 01 00       	call   c00282ef <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 fe d1 01 00       	call   c00278f8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 67 cb 01 00       	call   c002727b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 c7 db 01 00       	call   c00282ef <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 b0 d1 01 00       	call   c00278f8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 19 cb 01 00       	call   c002727b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 79 db 01 00       	call   c00282ef <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 62 d1 01 00       	call   c00278f8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 c8 ca 01 00       	call   c002727b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 28 db 01 00       	call   c00282ef <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 11 d1 01 00       	call   c00278f8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 7a ca 01 00       	call   c002727b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 74 c3 01 00       	call   c0026c10 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 4b da 01 00       	call   c00282ef <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 34 d0 01 00       	call   c00278f8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 14 da 01 00       	call   c00282ef <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 86 c9 01 00       	call   c002727b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 e6 d9 01 00       	call   c00282ef <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 cf cf 01 00       	call   c00278f8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 38 c9 01 00       	call   c002727b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 98 d9 01 00       	call   c00282ef <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 81 cf 01 00       	call   c00278f8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 ea c8 01 00       	call   c002727b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 4a d9 01 00       	call   c00282ef <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 33 cf 01 00       	call   c00278f8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 9c c8 01 00       	call   c002727b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 fc d8 01 00       	call   c00282ef <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 e5 ce 01 00       	call   c00278f8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 4e c8 01 00       	call   c002727b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 ae d8 01 00       	call   c00282ef <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 97 ce 01 00       	call   c00278f8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 fd c7 01 00       	call   c002727b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 5d d8 01 00       	call   c00282ef <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 46 ce 01 00       	call   c00278f8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 b5 c7 01 00       	call   c002727b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 8e c7 01 00       	call   c002727b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 ec cd 01 00       	call   c00278f8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 a8 d6 01 00       	call   c00281cb <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 37 c7 01 00       	call   c002727b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 95 cd 01 00       	call   c00278f8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 51 d6 01 00       	call   c00281cb <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 df c6 01 00       	call   c002727b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 3d cd 01 00       	call   c00278f8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 f9 d5 01 00       	call   c00281cb <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 87 c6 01 00       	call   c002727b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 e5 cc 01 00       	call   c00278f8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 a1 d5 01 00       	call   c00281cb <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 2f c6 01 00       	call   c002727b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 8d cc 01 00       	call   c00278f8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 49 d5 01 00       	call   c00281cb <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 dd c5 01 00       	call   c002727b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 3b cc 01 00       	call   c00278f8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 f7 d4 01 00       	call   c00281cb <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 0b be 01 00       	call   c0026c10 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 e2 d4 01 00       	call   c00282ef <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 cb ca 01 00       	call   c00278f8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 b2 d4 01 00       	call   c00282ef <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 24 c4 01 00       	call   c002727b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 c4 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd643c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 58 d4 01 00       	call   c00282ef <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 41 ca 01 00       	call   c00278f8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 ac c3 01 00       	call   c002727b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 f9 d3 01 00       	call   c00282ef <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 e2 c9 01 00       	call   c00278f8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 4d c3 01 00       	call   c002727b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 9a d3 01 00       	call   c00282ef <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 83 c9 01 00       	call   c00278f8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 ee c2 01 00       	call   c002727b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 3b d3 01 00       	call   c00282ef <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 24 c9 01 00       	call   c00278f8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 8f c2 01 00       	call   c002727b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 dc d2 01 00       	call   c00282ef <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 c5 c8 01 00       	call   c00278f8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 30 c2 01 00       	call   c002727b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 7d d2 01 00       	call   c00282ef <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 66 c8 01 00       	call   c00278f8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 d1 c1 01 00       	call   c002727b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 1e d2 01 00       	call   c00282ef <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 07 c8 01 00       	call   c00278f8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 72 c1 01 00       	call   c002727b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 bf d1 01 00       	call   c00282ef <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 a8 c7 01 00       	call   c00278f8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 13 c1 01 00       	call   c002727b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 1d ba 01 00       	call   c0026c10 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 f4 d0 01 00       	call   c00282ef <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 dd c6 01 00       	call   c00278f8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 c4 d0 01 00       	call   c00282ef <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 36 c0 01 00       	call   c002727b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 e0 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6420]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 69 d0 01 00       	call   c00282ef <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 52 c6 01 00       	call   c00278f8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 bd bf 01 00       	call   c002727b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 09 d0 01 00       	call   c00282ef <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 f2 c5 01 00       	call   c00278f8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 5d bf 01 00       	call   c002727b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 a9 cf 01 00       	call   c00282ef <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 92 c5 01 00       	call   c00278f8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 fd be 01 00       	call   c002727b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 49 cf 01 00       	call   c00282ef <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 32 c5 01 00       	call   c00278f8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 9d be 01 00       	call   c002727b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 e9 ce 01 00       	call   c00282ef <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 d2 c4 01 00       	call   c00278f8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 3d be 01 00       	call   c002727b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 89 ce 01 00       	call   c00282ef <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 72 c4 01 00       	call   c00278f8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 dd bd 01 00       	call   c002727b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 29 ce 01 00       	call   c00282ef <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 12 c4 01 00       	call   c00278f8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 7d bd 01 00       	call   c002727b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 c9 cd 01 00       	call   c00282ef <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 b2 c3 01 00       	call   c00278f8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 1d bd 01 00       	call   c002727b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 fc 9b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6404]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 c2 bc 01 00       	call   c002727b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 1f c3 01 00       	call   c00278f8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 db cb 01 00       	call   c00281cb <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 65 bc 01 00       	call   c002727b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 c2 c2 01 00       	call   c00278f8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 7e cb 01 00       	call   c00281cb <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 08 bc 01 00       	call   c002727b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 65 c2 01 00       	call   c00278f8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 21 cb 01 00       	call   c00281cb <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 ab bb 01 00       	call   c002727b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 08 c2 01 00       	call   c00278f8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 c4 ca 01 00       	call   c00281cb <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 4e bb 01 00       	call   c002727b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 ab c1 01 00       	call   c00278f8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 67 ca 01 00       	call   c00281cb <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 f1 ba 01 00       	call   c002727b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 4e c1 01 00       	call   c00278f8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 0a ca 01 00       	call   c00281cb <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 94 ba 01 00       	call   c002727b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 f1 c0 01 00       	call   c00278f8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 ad c9 01 00       	call   c00281cb <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 37 ba 01 00       	call   c002727b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 94 c0 01 00       	call   c00278f8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 50 c9 01 00       	call   c00281cb <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 4c c0 01 00       	call   c00278f8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 c4 ca 01 00       	jmp    c0028380 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 2e c7 01 00       	call   c00281c7 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 ec c6 01 00       	call   c00281a9 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 83 c4 01 00       	call   c0027f5b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 84 b7 01 00       	call   c002727b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 53 c4 01 00       	call   c0027f5b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 ba c0 01 00       	call   c0027bdc <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 59 c6 01 00       	call   c00281a9 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 5c c6 01 00       	call   c00281c7 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 2f c6 01 00       	call   c00281c7 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 28 c0 01 00       	call   c0027bdc <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 b2 c7 01 00       	call   c0028380 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 8d c7 01 00       	call   c0028380 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 5f c3 01 00       	call   c0027f5b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 b6 bc 01 00       	call   c00278cc <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 95 c5 01 00       	call   c00281c7 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 2e b6 01 00       	call   c002727b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 52 bc 01 00       	call   c00278cc <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 f4 c6 01 00       	call   c0028380 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 2c bf 01 00       	call   c0027bdc <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 a9 b5 01 00       	call   c002727b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 d5 c1 01 00       	call   c0027f5b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 d5 b4 01 00       	call   c002727b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 b5 b4 01 00       	call   c002727b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 85 c1 01 00       	call   c0027f5b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 d5 c3 01 00       	call   c00281c5 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 b4 ba 01 00       	call   c00278cc <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 36 c5 01 00       	call   c0028360 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 5d c3 01 00       	call   c00281a9 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 5b ba 01 00       	call   c00278cc <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 d9 c0 01 00       	call   c0027f5b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 5c ba 01 00       	call   c00278f8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 ae c0 01 00       	call   c0027f5b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 15 bd 01 00       	call   c0027bdc <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 94 b3 01 00       	call   c002727b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 5e c0 01 00       	call   c0027f5b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 aa c2 01 00       	call   c00281c7 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 9f b9 01 00       	call   c00278f8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 71 b9 01 00       	call   c00278f8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 aa bf 01 00       	call   c0027f5b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 0e bc 01 00       	call   c0027bdc <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 d6 bb 01 00       	call   c0027bdc <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 55 b2 01 00       	call   c002727b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 42 c3 01 00       	call   c0028380 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 14 bf 01 00       	call   c0027f5b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 6b b8 01 00       	call   c00278cc <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 4a c1 01 00       	call   c00281c7 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 e2 b1 01 00       	call   c002727b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 06 b8 01 00       	call   c00278cc <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 a8 c2 01 00       	call   c0028380 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 69 c0 01 00       	call   c00281c7 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 27 c0 01 00       	call   c00281a9 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 be bd 01 00       	call   c0027f5b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 bf b0 01 00       	call   c002727b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 8e bd 01 00       	call   c0027f5b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 f5 b9 01 00       	call   c0027bdc <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 94 bf 01 00       	call   c00281a9 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 97 bf 01 00       	call   c00281c7 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 6a bf 01 00       	call   c00281c7 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 63 b9 01 00       	call   c0027bdc <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 ed c0 01 00       	call   c0028380 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 c8 c0 01 00       	call   c0028380 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 9a bc 01 00       	call   c0027f5b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 f1 b5 01 00       	call   c00278cc <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 d0 be 01 00       	call   c00281c7 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 69 af 01 00       	call   c002727b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 8d b5 01 00       	call   c00278cc <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 2f c0 01 00       	call   c0028380 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 67 b8 01 00       	call   c0027bdc <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 e4 ae 01 00       	call   c002727b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 0f bb 01 00       	call   c0027f5b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 0f ae 01 00       	call   c002727b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 ef ad 01 00       	call   c002727b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 bf ba 01 00       	call   c0027f5b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 0f bd 01 00       	call   c00281c5 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 ed b3 01 00       	call   c00278cc <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 6f be 01 00       	call   c0028360 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 96 bc 01 00       	call   c00281a9 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 93 b3 01 00       	call   c00278cc <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 11 ba 01 00       	call   c0027f5b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 94 b3 01 00       	call   c00278f8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 e6 b9 01 00       	call   c0027f5b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 4d b6 01 00       	call   c0027bdc <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 cc ac 01 00       	call   c002727b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 96 b9 01 00       	call   c0027f5b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 e2 bb 01 00       	call   c00281c7 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 d7 b2 01 00       	call   c00278f8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 a9 b2 01 00       	call   c00278f8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 e0 b8 01 00       	call   c0027f5b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 44 b5 01 00       	call   c0027bdc <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 11 b5 01 00       	call   c0027bdc <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 90 ab 01 00       	call   c002727b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 7d bc 01 00       	call   c0028380 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 4f b8 01 00       	call   c0027f5b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 a6 b1 01 00       	call   c00278cc <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 85 ba 01 00       	call   c00281c7 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 1d ab 01 00       	call   c002727b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 41 b1 01 00       	call   c00278cc <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 e3 bb 01 00       	call   c0028380 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 a4 b9 01 00       	call   c00281c7 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 62 b9 01 00       	call   c00281a9 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 f9 b6 01 00       	call   c0027f5b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 fa a9 01 00       	call   c002727b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 c9 b6 01 00       	call   c0027f5b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 30 b3 01 00       	call   c0027bdc <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 cf b8 01 00       	call   c00281a9 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 d2 b8 01 00       	call   c00281c7 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 a5 b8 01 00       	call   c00281c7 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 9e b2 01 00       	call   c0027bdc <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 28 ba 01 00       	call   c0028380 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 03 ba 01 00       	call   c0028380 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 d5 b5 01 00       	call   c0027f5b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 2c af 01 00       	call   c00278cc <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 0b b8 01 00       	call   c00281c7 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 a4 a8 01 00       	call   c002727b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 c8 ae 01 00       	call   c00278cc <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 6a b9 01 00       	call   c0028380 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 a2 b1 01 00       	call   c0027bdc <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 1f a8 01 00       	call   c002727b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 4a b4 01 00       	call   c0027f5b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 4a a7 01 00       	call   c002727b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 2a a7 01 00       	call   c002727b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 fa b3 01 00       	call   c0027f5b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 4a b6 01 00       	call   c00281c5 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 28 ad 01 00       	call   c00278cc <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 aa b7 01 00       	call   c0028360 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 d1 b5 01 00       	call   c00281a9 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 ce ac 01 00       	call   c00278cc <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 4c b3 01 00       	call   c0027f5b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 cf ac 01 00       	call   c00278f8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 21 b3 01 00       	call   c0027f5b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 88 af 01 00       	call   c0027bdc <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 07 a6 01 00       	call   c002727b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 d1 b2 01 00       	call   c0027f5b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 1d b5 01 00       	call   c00281c7 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 12 ac 01 00       	call   c00278f8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 e4 ab 01 00       	call   c00278f8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 1b b2 01 00       	call   c0027f5b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 7f ae 01 00       	call   c0027bdc <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 4c ae 01 00       	call   c0027bdc <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 cb a4 01 00       	call   c002727b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 b8 b5 01 00       	call   c0028380 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 8a b1 01 00       	call   c0027f5b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 e1 aa 01 00       	call   c00278cc <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 c0 b3 01 00       	call   c00281c7 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 58 a4 01 00       	call   c002727b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 7c aa 01 00       	call   c00278cc <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 1e b5 01 00       	call   c0028380 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 df b2 01 00       	call   c00281c7 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 9d b2 01 00       	call   c00281a9 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 34 b0 01 00       	call   c0027f5b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 35 a3 01 00       	call   c002727b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 04 b0 01 00       	call   c0027f5b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 6b ac 01 00       	call   c0027bdc <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 0a b2 01 00       	call   c00281a9 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 0d b2 01 00       	call   c00281c7 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 e0 b1 01 00       	call   c00281c7 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 d9 ab 01 00       	call   c0027bdc <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 63 b3 01 00       	call   c0028380 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 3e b3 01 00       	call   c0028380 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 10 af 01 00       	call   c0027f5b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 67 a8 01 00       	call   c00278cc <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 46 b1 01 00       	call   c00281c7 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 df a1 01 00       	call   c002727b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 03 a8 01 00       	call   c00278cc <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 a5 b2 01 00       	call   c0028380 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 dd aa 01 00       	call   c0027bdc <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 5a a1 01 00       	call   c002727b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 85 ad 01 00       	call   c0027f5b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 85 a0 01 00       	call   c002727b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 65 a0 01 00       	call   c002727b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 35 ad 01 00       	call   c0027f5b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 85 af 01 00       	call   c00281c5 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 63 a6 01 00       	call   c00278cc <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 e5 b0 01 00       	call   c0028360 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 0c af 01 00       	call   c00281a9 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 09 a6 01 00       	call   c00278cc <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 87 ac 01 00       	call   c0027f5b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 0a a6 01 00       	call   c00278f8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 5c ac 01 00       	call   c0027f5b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 c3 a8 01 00       	call   c0027bdc <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 42 9f 01 00       	call   c002727b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 0c ac 01 00       	call   c0027f5b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 58 ae 01 00       	call   c00281c7 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 4d a5 01 00       	call   c00278f8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 1f a5 01 00       	call   c00278f8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 56 ab 01 00       	call   c0027f5b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 ba a7 01 00       	call   c0027bdc <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 87 a7 01 00       	call   c0027bdc <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 06 9e 01 00       	call   c002727b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 f3 ae 01 00       	call   c0028380 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 c5 aa 01 00       	call   c0027f5b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 1c a4 01 00       	call   c00278cc <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 fb ac 01 00       	call   c00281c7 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 93 9d 01 00       	call   c002727b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 b7 a3 01 00       	call   c00278cc <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 59 ae 01 00       	call   c0028380 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 17 ac 01 00       	call   c00281c7 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 d5 ab 01 00       	call   c00281a9 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 6c a9 01 00       	call   c0027f5b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 6d 9c 01 00       	call   c002727b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 3c a9 01 00       	call   c0027f5b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 a3 a5 01 00       	call   c0027bdc <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 42 ab 01 00       	call   c00281a9 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 45 ab 01 00       	call   c00281c7 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 18 ab 01 00       	call   c00281c7 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 11 a5 01 00       	call   c0027bdc <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 9b ac 01 00       	call   c0028380 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 72 ac 01 00       	call   c0028380 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 44 a8 01 00       	call   c0027f5b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 9b a1 01 00       	call   c00278cc <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 7a aa 01 00       	call   c00281c7 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 13 9b 01 00       	call   c002727b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 3b a1 01 00       	call   c00278cc <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 dd ab 01 00       	call   c0028380 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 16 a4 01 00       	call   c0027bdc <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 93 9a 01 00       	call   c002727b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 bf a6 01 00       	call   c0027f5b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 bf 99 01 00       	call   c002727b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 9f 99 01 00       	call   c002727b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 6f a6 01 00       	call   c0027f5b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 a3 a8 01 00       	call   c00281a9 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 9a 9f 01 00       	call   c00278cc <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 1c aa 01 00       	call   c0028360 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 43 a8 01 00       	call   c00281a9 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 3d 9f 01 00       	call   c00278cc <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 bb a5 01 00       	call   c0027f5b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 3e 9f 01 00       	call   c00278f8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 90 a5 01 00       	call   c0027f5b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 f7 a1 01 00       	call   c0027bdc <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 76 98 01 00       	call   c002727b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 40 a5 01 00       	call   c0027f5b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 8c a7 01 00       	call   c00281c7 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 81 9e 01 00       	call   c00278f8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 53 9e 01 00       	call   c00278f8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 97 a4 01 00       	call   c0027f5b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 fe a0 01 00       	call   c0027bdc <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 e7 9d 01 00       	call   c00278f8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 a3 a6 01 00       	call   c00281cb <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 96 a0 01 00       	call   c0027bdc <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 15 97 01 00       	call   c002727b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 02 a8 01 00       	call   c0028380 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 d4 a3 01 00       	call   c0027f5b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 2b 9d 01 00       	call   c00278cc <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 0a a6 01 00       	call   c00281c7 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 a2 96 01 00       	call   c002727b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 ca 9c 01 00       	call   c00278cc <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 6c a7 01 00       	call   c0028380 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 24 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63dc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 18 9c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd63e8]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 32 19 00 00       	call   c000f5a9 <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 1f a4 01 00       	call   c00281c7 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 dd a3 01 00       	call   c00281a9 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 c9 a3 01 00       	call   c00281c7 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 3b a1 01 00       	call   c0027f5b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 b9 9a 01 00       	call   c00278f8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 0b a1 01 00       	call   c0027f5b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 11 94 01 00       	call   c002727b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 e0 a0 01 00       	call   c0027f5b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 30 a3 01 00       	call   c00281c5 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 11 9a 01 00       	call   c00278cc <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 93 a4 01 00       	call   c0028360 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 ba a2 01 00       	call   c00281a9 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 b9 99 01 00       	call   c00278cc <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 37 a0 01 00       	call   c0027f5b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 ba 99 01 00       	call   c00278f8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 0c a0 01 00       	call   c0027f5b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 73 9c 01 00       	call   c0027bdc <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 f2 92 01 00       	call   c002727b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 1a 9c 01 00       	call   c0027bdc <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 a0 92 01 00       	call   c002727b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 8e a3 01 00       	call   c0028380 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 60 9f 01 00       	call   c0027f5b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 b7 98 01 00       	call   c00278cc <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 96 a1 01 00       	call   c00281c7 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 2f 92 01 00       	call   c002727b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 5b 98 01 00       	call   c00278cc <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 fd a2 01 00       	call   c0028380 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 aa 9e 01 00       	call   c0027f5b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 27 98 01 00       	call   c00278f8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 78 9e 01 00       	call   c0027f5b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 7e 91 01 00       	call   c002727b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 4e 9e 01 00       	call   c0027f5b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 a2 a0 01 00       	call   c00281c9 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 7b 97 01 00       	call   c00278cc <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 fd a1 01 00       	call   c0028360 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 24 a0 01 00       	call   c00281a9 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 22 97 01 00       	call   c00278cc <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 a0 9d 01 00       	call   c0027f5b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 23 97 01 00       	call   c00278f8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 75 9d 01 00       	call   c0027f5b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 dc 99 01 00       	call   c0027bdc <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 5b 90 01 00       	call   c002727b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 77 99 01 00       	call   c0027bdc <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 f6 8f 01 00       	call   c002727b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 e4 a0 01 00       	call   c0028380 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 b6 9c 01 00       	call   c0027f5b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 0d 96 01 00       	call   c00278cc <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 ec 9e 01 00       	call   c00281c7 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 85 8f 01 00       	call   c002727b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 b1 95 01 00       	call   c00278cc <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 22 9c 01 00       	call   c0027f5b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 28 8f 01 00       	call   c002727b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 3e 9d 02 c0       	mov    eax,0xc0029d3e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 4f 9d 02 c0       	mov    eax,0xc0029d4f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 74 11 00 00       	call   c000f5a9 <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 76 11 00 00       	call   c000f5c9 <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 f0 10 00 00       	jmp    c000f599 <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 0b 11 00 00       	jmp    c000f5b9 <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c000e4e3:	ff 05 84 0e 03 c0    	inc    DWORD PTR ds:0xc0030e84
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 80 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e80,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c000e50d:	e8 97 f4 00 00       	call   c001d9a9 <schedule()>
c000e512:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c000e517:	48                   	dec    eax
c000e518:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 d0 da 02 c0       	mov    eax,ds:0xc002dad0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 86 9d 02 c0       	push   0xc0029d86
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 68 d9 02 c0       	mov    eax,0xc002d968
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 8f 9d 02 c0       	push   0xc0029d8f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 f4 66 02 c0       	mov    eax,0xc00266f4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 99 9d 02 c0       	push   0xc0029d99
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 28 64 02 c0       	mov    eax,0xc0026428
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 a2 9d 02 c0       	push   0xc0029da2
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 f4 67 02 c0       	mov    eax,0xc00267f4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 ac 9d 02 c0       	push   0xc0029dac
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 74 65 02 c0       	mov    eax,0xc0026574
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 b5 9d 02 c0       	push   0xc0029db5
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 6c d9 02 c0       	mov    eax,0xc002d96c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 c2 9d 02 c0       	push   0xc0029dc2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 6d d9 02 c0       	mov    eax,0xc002d96d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 09 56 00 00       	call   c0013c76 <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 cf 9d 02 c0       	push   0xc0029dcf
c000e69e:	e8 50 0f 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e6a3:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c000e6aa:	e8 ea 0e 00 00       	call   c000f599 <malloc>
c000e6af:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6b6:	89 c3                	mov    ebx,eax
c000e6b8:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c000e6be:	68 e8 9d 02 c0       	push   0xc0029de8
c000e6c3:	6a 01                	push   0x1
c000e6c5:	50                   	push   eax
c000e6c6:	e8 c1 ee 00 00       	call   c001d58c <Process::Process(bool, char const*, Process*, char**)>
c000e6cb:	83 c4 20             	add    esp,0x20
c000e6ce:	68 ff 00 00 00       	push   0xff
c000e6d3:	6a 00                	push   0x0
c000e6d5:	68 2f ef 00 c0       	push   0xc000ef2f
c000e6da:	53                   	push   ebx
c000e6db:	e8 a4 f0 00 00       	call   c001d784 <Process::createThread(void (*)(void*), void*, int)>
c000e6e0:	6a 7a                	push   0x7a
c000e6e2:	6a 00                	push   0x0
c000e6e4:	68 68 e1 01 c0       	push   0xc001e168
c000e6e9:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c000e6ef:	e8 90 f0 00 00       	call   c001d784 <Process::createThread(void (*)(void*), void*, int)>
c000e6f4:	83 c4 14             	add    esp,0x14
c000e6f7:	a3 68 0e 03 c0       	mov    ds:0xc0030e68,eax
c000e6fc:	68 cc 9e 02 c0       	push   0xc0029ecc
c000e701:	c6 05 6d d9 02 c0 01 	mov    BYTE PTR ds:0xc002d96d,0x1
c000e708:	e8 e6 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e70d:	e8 01 fe 00 00       	call   c001e513 <Vm::initialise8086()>
c000e712:	e8 27 43 00 00       	call   c0012a3e <Fs::initVFS()>
c000e717:	c7 04 24 f5 9d 02 c0 	mov    DWORD PTR [esp],0xc0029df5
c000e71e:	e8 d0 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e723:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c000e728:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e72e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e730:	6a 00                	push   0x0
c000e732:	6a 00                	push   0x0
c000e734:	6a 00                	push   0x0
c000e736:	50                   	push   eax
c000e737:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e73a:	83 c4 14             	add    esp,0x14
c000e73d:	68 cc 9e 02 c0       	push   0xc0029ecc
c000e742:	e8 ac 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e747:	e8 cd d6 00 00       	call   c001be19 <Sys::loadSyscalls()>
c000e74c:	e8 c5 b5 00 00       	call   c0019d16 <Krnl::loadSystemEnv()>
c000e751:	83 c4 0c             	add    esp,0xc
c000e754:	6a 3a                	push   0x3a
c000e756:	68 0f 9e 02 c0       	push   0xc0029e0f
c000e75b:	68 18 9e 02 c0       	push   0xc0029e18
c000e760:	e8 76 c4 00 00       	call   c001abdb <Reg::readIntWithDefault(char*, char*, int)>
c000e765:	89 04 24             	mov    DWORD PTR [esp],eax
c000e768:	e8 c1 4d 00 00       	call   c001352e <User::loadClockSettings(int)>
c000e76d:	c7 04 24 f0 9e 02 c0 	mov    DWORD PTR [esp],0xc0029ef0
c000e774:	e8 7a 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e779:	58                   	pop    eax
c000e77a:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c000e77f:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e785:	e8 ac 54 00 00       	call   c0013c36 <Device::loadDriversForAll()>
c000e78a:	c7 04 24 20 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e20
c000e791:	e8 5d 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e796:	e8 e3 b0 00 00       	call   c001987e <Krnl::startCPUs()>
c000e79b:	c7 04 24 3a 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e3a
c000e7a2:	e8 4c 0e 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000e7a7:	5a                   	pop    edx
c000e7a8:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c000e7ae:	59                   	pop    ecx
c000e7af:	6a 01                	push   0x1
c000e7b1:	68 4b 9e 02 c0       	push   0xc0029e4b
c000e7b6:	e8 2e e8 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c000e7bb:	5a                   	pop    edx
c000e7bc:	59                   	pop    ecx
c000e7bd:	53                   	push   ebx
c000e7be:	50                   	push   eax
c000e7bf:	e8 50 ea 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c000e7c4:	83 c4 10             	add    esp,0x10
c000e7c7:	83 ec 0c             	sub    esp,0xc
c000e7ca:	6a 02                	push   0x2
c000e7cc:	e8 ae f3 00 00       	call   c001db7f <blockTask(TaskState)>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	eb f1                	jmp    c000e7c7 <Krnl::firstTask()+0x133>

c000e7d6 <Computer::Computer()>:
c000e7d6:	83 ec 0c             	sub    esp,0xc
c000e7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7dd:	83 ec 08             	sub    esp,0x8
c000e7e0:	68 67 9e 02 c0       	push   0xc0029e67
c000e7e5:	50                   	push   eax
c000e7e6:	e8 05 55 00 00       	call   c0013cf0 <Device::Device(char const*)>
c000e7eb:	83 c4 10             	add    esp,0x10
c000e7ee:	ba 3c 9f 02 c0       	mov    edx,0xc0029f3c
c000e7f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f7:	89 10                	mov    DWORD PTR [eax],edx
c000e7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7fd:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e819:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e81f:	83 ca 04             	or     edx,0x4
c000e822:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e832:	0f b6 d0             	movzx  edx,al
c000e835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e839:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e844:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84a:	0f b6 d0             	movzx  edx,al
c000e84d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e851:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e860:	8d 50 01             	lea    edx,[eax+0x1]
c000e863:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e867:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e86d:	0f b6 d0             	movzx  edx,al
c000e870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e874:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e878:	83 e1 3f             	and    ecx,0x3f
c000e87b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e883:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e889:	0f b6 d0             	movzx  edx,al
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a1:	0f b6 d0             	movzx  edx,al
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b7:	8d 50 01             	lea    edx,[eax+0x1]
c000e8ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8be:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c4:	0f b6 d0             	movzx  edx,al
c000e8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8cf:	83 e1 3f             	and    ecx,0x3f
c000e8d2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e0:	0f b6 d0             	movzx  edx,al
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8f8:	0f b6 d0             	movzx  edx,al
c000e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ff:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e908:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e90e:	8d 50 01             	lea    edx,[eax+0x1]
c000e911:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e915:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e91b:	0f b6 d0             	movzx  edx,al
c000e91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e922:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e926:	83 e1 3f             	and    ecx,0x3f
c000e929:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e92d:	90                   	nop
c000e92e:	83 c4 0c             	add    esp,0xc
c000e931:	c3                   	ret    

c000e932 <Computer::setBootMessage(char const*)>:
c000e932:	c3                   	ret    
c000e933:	90                   	nop

c000e934 <Computer::detectFeatures()>:
c000e934:	55                   	push   ebp
c000e935:	57                   	push   edi
c000e936:	56                   	push   esi
c000e937:	53                   	push   ebx
c000e938:	83 ec 1c             	sub    esp,0x1c
c000e93b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e93f:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e949:	e8 96 19 ff ff       	call   c00002e4 <detectCPUID>
c000e94e:	85 c0                	test   eax,eax
c000e950:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e956:	0f 95 c2             	setne  dl
c000e959:	83 e0 fd             	and    eax,0xfffffffd
c000e95c:	d1 e2                	shl    edx,1
c000e95e:	09 d0                	or     eax,edx
c000e960:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e966:	a8 02                	test   al,0x2
c000e968:	75 46                	jne    c000e9b0 <Computer::detectFeatures()+0x7c>
c000e96a:	f6 05 81 d9 02 c0 04 	test   BYTE PTR ds:0xc002d981,0x4
c000e971:	74 07                	je     c000e97a <Computer::detectFeatures()+0x46>
c000e973:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e97a:	e8 37 7a 01 00       	call   c00263b6 <x87Detect>
c000e97f:	83 e0 01             	and    eax,0x1
c000e982:	c1 e0 04             	shl    eax,0x4
c000e985:	88 c2                	mov    dl,al
c000e987:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e98d:	83 e0 ef             	and    eax,0xffffffef
c000e990:	09 d0                	or     eax,edx
c000e992:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e998:	a8 10                	test   al,0x10
c000e99a:	0f 85 2a 01 00 00    	jne    c000eaca <Computer::detectFeatures()+0x196>
c000e9a0:	84 c0                	test   al,al
c000e9a2:	0f 88 45 01 00 00    	js     c000eaed <Computer::detectFeatures()+0x1b9>
c000e9a8:	83 c4 1c             	add    esp,0x1c
c000e9ab:	5b                   	pop    ebx
c000e9ac:	5e                   	pop    esi
c000e9ad:	5f                   	pop    edi
c000e9ae:	5d                   	pop    ebp
c000e9af:	c3                   	ret    
c000e9b0:	83 ec 0c             	sub    esp,0xc
c000e9b3:	6a 20                	push   0x20
c000e9b5:	e8 56 9e 00 00       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ba:	83 e0 01             	and    eax,0x1
c000e9bd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e9c4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9ca:	83 e0 f7             	and    eax,0xfffffff7
c000e9cd:	09 d0                	or     eax,edx
c000e9cf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d5:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9dc:	e8 2f 9e 00 00       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c000e9e1:	83 e0 01             	and    eax,0x1
c000e9e4:	88 c2                	mov    dl,al
c000e9e6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9ec:	83 e0 fe             	and    eax,0xfffffffe
c000e9ef:	09 d0                	or     eax,edx
c000e9f1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9f7:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9fe:	e8 0d 9e 00 00       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c000ea03:	c1 e0 07             	shl    eax,0x7
c000ea06:	88 c2                	mov    dl,al
c000ea08:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea0e:	83 e0 7f             	and    eax,0x7f
c000ea11:	09 d0                	or     eax,edx
c000ea13:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea19:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea20:	e8 eb 9d 00 00       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c000ea25:	83 c4 10             	add    esp,0x10
c000ea28:	83 e0 01             	and    eax,0x1
c000ea2b:	c1 e0 05             	shl    eax,0x5
c000ea2e:	88 c2                	mov    dl,al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	83 e0 df             	and    eax,0xffffffdf
c000ea39:	09 d0                	or     eax,edx
c000ea3b:	f7 05 80 d9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002d980,0x401
c000ea45:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea4b:	0f 84 c2 00 00 00    	je     c000eb13 <Computer::detectFeatures()+0x1df>
c000ea51:	83 e0 fe             	and    eax,0xfffffffe
c000ea54:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea5a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea60:	88 c2                	mov    dl,al
c000ea62:	83 e2 09             	and    edx,0x9
c000ea65:	fe ca                	dec    dl
c000ea67:	75 09                	jne    c000ea72 <Computer::detectFeatures()+0x13e>
c000ea69:	83 e0 fe             	and    eax,0xfffffffe
c000ea6c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea72:	83 ec 0c             	sub    esp,0xc
c000ea75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea79:	50                   	push   eax
c000ea7a:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea7e:	55                   	push   ebp
c000ea7f:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea83:	57                   	push   edi
c000ea84:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea88:	56                   	push   esi
c000ea89:	68 00 00 00 80       	push   0x80000000
c000ea8e:	e8 f9 9c 00 00       	call   c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea93:	83 c4 20             	add    esp,0x20
c000ea96:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea9d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaa1:	0f 86 c3 fe ff ff    	jbe    c000e96a <Computer::detectFeatures()+0x36>
c000eaa7:	83 ec 0c             	sub    esp,0xc
c000eaaa:	50                   	push   eax
c000eaab:	55                   	push   ebp
c000eaac:	57                   	push   edi
c000eaad:	56                   	push   esi
c000eaae:	68 01 00 00 80       	push   0x80000001
c000eab3:	e8 d4 9c 00 00       	call   c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eab8:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eac2:	83 c4 20             	add    esp,0x20
c000eac5:	e9 a0 fe ff ff       	jmp    c000e96a <Computer::detectFeatures()+0x36>
c000eaca:	e8 a1 78 01 00       	call   c0026370 <absolutelyNoChanceInHell>
c000eacf:	88 c2                	mov    dl,al
c000ead1:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ead7:	c1 e2 07             	shl    edx,0x7
c000eada:	83 e0 7f             	and    eax,0x7f
c000eadd:	09 d0                	or     eax,edx
c000eadf:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae5:	84 c0                	test   al,al
c000eae7:	0f 89 bb fe ff ff    	jns    c000e9a8 <Computer::detectFeatures()+0x74>
c000eaed:	e8 5e 78 01 00       	call   c0026350 <avxDetect>
c000eaf2:	83 e0 01             	and    eax,0x1
c000eaf5:	c1 e0 05             	shl    eax,0x5
c000eaf8:	88 c2                	mov    dl,al
c000eafa:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb00:	83 e0 df             	and    eax,0xffffffdf
c000eb03:	09 d0                	or     eax,edx
c000eb05:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb0b:	83 c4 1c             	add    esp,0x1c
c000eb0e:	5b                   	pop    ebx
c000eb0f:	5e                   	pop    esi
c000eb10:	5f                   	pop    edi
c000eb11:	5d                   	pop    ebp
c000eb12:	c3                   	ret    
c000eb13:	83 ec 0c             	sub    esp,0xc
c000eb16:	68 00 02 00 00       	push   0x200
c000eb1b:	e8 f0 9c 00 00       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c000eb20:	83 c4 10             	add    esp,0x10
c000eb23:	83 e0 01             	and    eax,0x1
c000eb26:	88 c2                	mov    dl,al
c000eb28:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb2e:	83 e0 fe             	and    eax,0xfffffffe
c000eb31:	09 d0                	or     eax,edx
c000eb33:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb39:	e9 1c ff ff ff       	jmp    c000ea5a <Computer::detectFeatures()+0x126>

c000eb3e <Computer::displayFeatures()>:
c000eb3e:	c3                   	ret    
c000eb3f:	90                   	nop

c000eb40 <Computer::rdmsr(unsigned int)>:
c000eb40:	83 ec 0c             	sub    esp,0xc
c000eb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb47:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb4e:	74 0a                	je     c000eb5a <Computer::rdmsr(unsigned int)+0x1a>
c000eb50:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb54:	0f 32                	rdmsr  
c000eb56:	83 c4 0c             	add    esp,0xc
c000eb59:	c3                   	ret    
c000eb5a:	83 ec 0c             	sub    esp,0xc
c000eb5d:	68 70 9e 02 c0       	push   0xc0029e70
c000eb62:	e8 b8 b2 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	eb e4                	jmp    c000eb50 <Computer::rdmsr(unsigned int)+0x10>

c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eb6c:	57                   	push   edi
c000eb6d:	56                   	push   esi
c000eb6e:	52                   	push   edx
c000eb6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb73:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eb77:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eb7b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eb82:	74 0e                	je     c000eb92 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eb84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eb88:	89 f0                	mov    eax,esi
c000eb8a:	89 fa                	mov    edx,edi
c000eb8c:	0f 30                	wrmsr  
c000eb8e:	58                   	pop    eax
c000eb8f:	5e                   	pop    esi
c000eb90:	5f                   	pop    edi
c000eb91:	c3                   	ret    
c000eb92:	83 ec 0c             	sub    esp,0xc
c000eb95:	68 76 9e 02 c0       	push   0xc0029e76
c000eb9a:	e8 80 b2 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c000eb9f:	83 c4 10             	add    esp,0x10
c000eba2:	eb e0                	jmp    c000eb84 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eba4 <Computer::nmiEnabled()>:
c000eba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eba8:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ebae:	c3                   	ret    
c000ebaf:	90                   	nop

c000ebb0 <Computer::readCMOS(unsigned char)>:
c000ebb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebb4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ebbb:	19 c0                	sbb    eax,eax
c000ebbd:	83 e0 80             	and    eax,0xffffff80
c000ebc0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ebc4:	e6 70                	out    0x70,al
c000ebc6:	e4 71                	in     al,0x71
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Computer::enableNMI(bool)>:
c000ebca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebd2:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ebd8:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ebe0:	eb ce                	jmp    c000ebb0 <Computer::readCMOS(unsigned char)>

c000ebe2 <Computer::open(int, int, void*)>:
c000ebe2:	56                   	push   esi
c000ebe3:	53                   	push   ebx
c000ebe4:	83 ec 10             	sub    esp,0x10
c000ebe7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ebeb:	68 10 9f 02 c0       	push   0xc0029f10
c000ebf0:	e8 fe 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ebf5:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000ebfc:	f6 05 80 d9 02 c0 04 	test   BYTE PTR ds:0xc002d980,0x4
c000ec03:	0f 94 05 a0 c8 02 c0 	sete   BYTE PTR ds:0xc002c8a0
c000ec0a:	e8 8a 09 00 00       	call   c000f599 <malloc>
c000ec0f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec12:	89 c6                	mov    esi,eax
c000ec14:	e8 6b 8e 00 00       	call   c0017a84 <ACPI::ACPI()>
c000ec19:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ec1f:	58                   	pop    eax
c000ec20:	5a                   	pop    edx
c000ec21:	56                   	push   esi
c000ec22:	53                   	push   ebx
c000ec23:	e8 c4 4e 00 00       	call   c0013aec <Device::addChild(Device*)>
c000ec28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ec2b:	e8 04 fd ff ff       	call   c000e934 <Computer::detectFeatures()>
c000ec30:	59                   	pop    ecx
c000ec31:	5e                   	pop    esi
c000ec32:	6a 01                	push   0x1
c000ec34:	53                   	push   ebx
c000ec35:	e8 90 ff ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ec3a:	c7 04 24 20 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e20
c000ec41:	e8 ad 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ec46:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ec4d:	e8 47 09 00 00       	call   c000f599 <malloc>
c000ec52:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec55:	89 c6                	mov    esi,eax
c000ec57:	e8 6c 9c 00 00       	call   c00188c8 <CPU::CPU()>
c000ec5c:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ec62:	58                   	pop    eax
c000ec63:	5a                   	pop    edx
c000ec64:	56                   	push   esi
c000ec65:	53                   	push   ebx
c000ec66:	e8 81 4e 00 00       	call   c0013aec <Device::addChild(Device*)>
c000ec6b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ec71:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec77:	6a 00                	push   0x0
c000ec79:	6a 00                	push   0x0
c000ec7b:	50                   	push   eax
c000ec7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ec7f:	83 c4 20             	add    esp,0x20
c000ec82:	e8 fd 53 00 00       	call   c0014084 <setupFPU()>
c000ec87:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ec8d:	85 c0                	test   eax,eax
c000ec8f:	74 1f                	je     c000ecb0 <Computer::open(int, int, void*)+0xce>
c000ec91:	83 ec 08             	sub    esp,0x8
c000ec94:	50                   	push   eax
c000ec95:	53                   	push   ebx
c000ec96:	e8 51 4e 00 00       	call   c0013aec <Device::addChild(Device*)>
c000ec9b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000eca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eca3:	6a 00                	push   0x0
c000eca5:	6a 00                	push   0x0
c000eca7:	6a 00                	push   0x0
c000eca9:	50                   	push   eax
c000ecaa:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ecad:	83 c4 20             	add    esp,0x20
c000ecb0:	83 ec 0c             	sub    esp,0xc
c000ecb3:	68 7c 9e 02 c0       	push   0xc0029e7c
c000ecb8:	e8 36 09 00 00       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000ecbd:	c7 04 24 94 e6 00 c0 	mov    DWORD PTR [esp],0xc000e694
c000ecc4:	e8 dd eb 00 00       	call   c001d8a6 <setupMultitasking(void (*)())>
c000ecc9:	83 c4 14             	add    esp,0x14
c000eccc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ecd1:	5b                   	pop    ebx
c000ecd2:	5e                   	pop    esi
c000ecd3:	c3                   	ret    

c000ecd4 <Computer::disableNMI()>:
c000ecd4:	6a 00                	push   0x0
c000ecd6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ecda:	e8 eb fe ff ff       	call   c000ebca <Computer::enableNMI(bool)>
c000ecdf:	58                   	pop    eax
c000ece0:	5a                   	pop    edx
c000ece1:	c3                   	ret    

c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ece2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ece6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eced:	19 c0                	sbb    eax,eax
c000ecef:	83 e0 80             	and    eax,0xffffff80
c000ecf2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ecf6:	e6 70                	out    0x70,al
c000ecf8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ecfc:	e6 71                	out    0x71,al
c000ecfe:	c3                   	ret    
c000ecff:	90                   	nop

c000ed00 <Computer::handleNMI()>:
c000ed00:	56                   	push   esi
c000ed01:	53                   	push   ebx
c000ed02:	83 ec 10             	sub    esp,0x10
c000ed05:	e4 92                	in     al,0x92
c000ed07:	89 c6                	mov    esi,eax
c000ed09:	e4 61                	in     al,0x61
c000ed0b:	68 97 9e 02 c0       	push   0xc0029e97
c000ed10:	88 c3                	mov    bl,al
c000ed12:	e8 9c 39 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000ed17:	83 c4 10             	add    esp,0x10
c000ed1a:	83 e6 10             	and    esi,0x10
c000ed1d:	75 0d                	jne    c000ed2c <Computer::handleNMI()+0x2c>
c000ed1f:	f6 c3 40             	test   bl,0x40
c000ed22:	75 1d                	jne    c000ed41 <Computer::handleNMI()+0x41>
c000ed24:	84 db                	test   bl,bl
c000ed26:	78 2d                	js     c000ed55 <Computer::handleNMI()+0x55>
c000ed28:	58                   	pop    eax
c000ed29:	5b                   	pop    ebx
c000ed2a:	5e                   	pop    esi
c000ed2b:	c3                   	ret    
c000ed2c:	83 ec 0c             	sub    esp,0xc
c000ed2f:	68 a8 9e 02 c0       	push   0xc0029ea8
c000ed34:	e8 e6 b0 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c000ed39:	83 c4 10             	add    esp,0x10
c000ed3c:	f6 c3 40             	test   bl,0x40
c000ed3f:	74 e3                	je     c000ed24 <Computer::handleNMI()+0x24>
c000ed41:	83 ec 0c             	sub    esp,0xc
c000ed44:	68 b5 9e 02 c0       	push   0xc0029eb5
c000ed49:	e8 d1 b0 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c000ed4e:	83 c4 10             	add    esp,0x10
c000ed51:	84 db                	test   bl,bl
c000ed53:	79 d3                	jns    c000ed28 <Computer::handleNMI()+0x28>
c000ed55:	c7 44 24 10 bf 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ebf
c000ed5d:	5a                   	pop    edx
c000ed5e:	5b                   	pop    ebx
c000ed5f:	5e                   	pop    esi
c000ed60:	e9 ba b0 00 00       	jmp    c0019e1f <Krnl::panic(char const*)>
c000ed65:	90                   	nop

c000ed66 <Computer::setDiskActivityLight(int, bool)>:
c000ed66:	56                   	push   esi
c000ed67:	53                   	push   ebx
c000ed68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ed6c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ed71:	77 1b                	ja     c000ed8e <Computer::setDiskActivityLight(int, bool)+0x28>
c000ed73:	e4 92                	in     al,0x92
c000ed75:	bb 40 00 00 00       	mov    ebx,0x40
c000ed7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ed7e:	89 da                	mov    edx,ebx
c000ed80:	d3 e2                	shl    edx,cl
c000ed82:	89 f1                	mov    ecx,esi
c000ed84:	f7 d2                	not    edx
c000ed86:	d3 e3                	shl    ebx,cl
c000ed88:	21 d0                	and    eax,edx
c000ed8a:	09 d8                	or     eax,ebx
c000ed8c:	e6 92                	out    0x92,al
c000ed8e:	5b                   	pop    ebx
c000ed8f:	5e                   	pop    esi
c000ed90:	c3                   	ret    
c000ed91:	90                   	nop

c000ed92 <GDTEntry::setBase(unsigned int)>:
c000ed92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ed96:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ed9a:	89 c1                	mov    ecx,eax
c000ed9c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eda0:	c1 e9 10             	shr    ecx,0x10
c000eda3:	c1 e8 18             	shr    eax,0x18
c000eda6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000eda9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000edac:	c3                   	ret    
c000edad:	90                   	nop

c000edae <GDTEntry::setLimit(unsigned int)>:
c000edae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000edb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edb6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000edb9:	66 89 01             	mov    WORD PTR [ecx],ax
c000edbc:	83 e2 f0             	and    edx,0xfffffff0
c000edbf:	c1 e8 10             	shr    eax,0x10
c000edc2:	83 e0 0f             	and    eax,0xf
c000edc5:	09 d0                	or     eax,edx
c000edc7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000edca:	c3                   	ret    
c000edcb:	90                   	nop

c000edcc <GDT::GDT()>:
c000edcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edd0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000edd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000edda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ede0:	90                   	nop
c000ede1:	c3                   	ret    

c000ede2 <GDT::addEntry(GDTEntry)>:
c000ede2:	53                   	push   ebx
c000ede3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ede7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edeb:	8b 02                	mov    eax,DWORD PTR [edx]
c000eded:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000edf1:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000edf5:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000edf9:	8d 48 01             	lea    ecx,[eax+0x1]
c000edfc:	c1 e0 03             	shl    eax,0x3
c000edff:	89 0a                	mov    DWORD PTR [edx],ecx
c000ee01:	5b                   	pop    ebx
c000ee02:	c3                   	ret    
c000ee03:	90                   	nop

c000ee04 <GDT::getNumberOfEntries()>:
c000ee04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee08:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee0a:	c3                   	ret    
c000ee0b:	90                   	nop

c000ee0c <GDT::flush()>:
c000ee0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee10:	8b 10                	mov    edx,DWORD PTR [eax]
c000ee12:	83 c0 04             	add    eax,0x4
c000ee15:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ee1c:	a3 72 d9 02 c0       	mov    ds:0xc002d972,eax
c000ee21:	66 89 15 70 d9 02 c0 	mov    WORD PTR ds:0xc002d970,dx
c000ee28:	e9 23 16 ff ff       	jmp    c0000450 <loadGDT>
c000ee2d:	90                   	nop

c000ee2e <GDT::setup()>:
c000ee2e:	55                   	push   ebp
c000ee2f:	57                   	push   edi
c000ee30:	56                   	push   esi
c000ee31:	53                   	push   ebx
c000ee32:	83 ec 3c             	sub    esp,0x3c
c000ee35:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ee39:	6a 00                	push   0x0
c000ee3b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ee3f:	53                   	push   ebx
c000ee40:	e8 4d ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee45:	6a 00                	push   0x0
c000ee47:	53                   	push   ebx
c000ee48:	e8 61 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee4d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ee55:	6a 00                	push   0x0
c000ee57:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ee5b:	53                   	push   ebx
c000ee5c:	e8 31 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee61:	68 ff ff ff 00       	push   0xffffff
c000ee66:	53                   	push   ebx
c000ee67:	e8 42 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee6c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee70:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000ee75:	0d 00 9a c0 00       	or     eax,0xc09a00
c000ee7a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ee7e:	83 c4 20             	add    esp,0x20
c000ee81:	6a 00                	push   0x0
c000ee83:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000ee87:	53                   	push   ebx
c000ee88:	e8 05 ff ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c000ee8d:	68 ff ff ff 00       	push   0xffffff
c000ee92:	53                   	push   ebx
c000ee93:	e8 16 ff ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c000ee98:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000ee9c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eea0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000eea4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000eea8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eeac:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000eeb1:	0d 00 92 c0 00       	or     eax,0xc09200
c000eeb6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eeba:	89 d8                	mov    eax,ebx
c000eebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000eec0:	80 cc 60             	or     ah,0x60
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	83 c4 0c             	add    esp,0xc
c000eeca:	89 f8                	mov    eax,edi
c000eecc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed0:	80 cc 60             	or     ah,0x60
c000eed3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eed7:	89 c7                	mov    edi,eax
c000eed9:	55                   	push   ebp
c000eeda:	e8 03 ff ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eedf:	83 c4 0c             	add    esp,0xc
c000eee2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eee6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eeea:	55                   	push   ebp
c000eeeb:	e8 f2 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000eef0:	83 c4 0c             	add    esp,0xc
c000eef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eefb:	55                   	push   ebp
c000eefc:	e8 e1 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef01:	83 c4 0c             	add    esp,0xc
c000ef04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef0c:	53                   	push   ebx
c000ef0d:	51                   	push   ecx
c000ef0e:	55                   	push   ebp
c000ef0f:	e8 ce fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef14:	83 c4 0c             	add    esp,0xc
c000ef17:	57                   	push   edi
c000ef18:	56                   	push   esi
c000ef19:	55                   	push   ebp
c000ef1a:	e8 c3 fe ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c000ef1f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ef22:	e8 e5 fe ff ff       	call   c000ee0c <GDT::flush()>
c000ef27:	83 c4 4c             	add    esp,0x4c
c000ef2a:	5b                   	pop    ebx
c000ef2b:	5e                   	pop    esi
c000ef2c:	5f                   	pop    edi
c000ef2d:	5d                   	pop    ebp
c000ef2e:	c3                   	ret    

c000ef2f <idleFunction(void*)>:
c000ef2f:	53                   	push   ebx
c000ef30:	83 ec 08             	sub    esp,0x8
c000ef33:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c000ef38:	48                   	dec    eax
c000ef39:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c000ef3e:	75 01                	jne    c000ef41 <idleFunction(void*)+0x12>
c000ef40:	fb                   	sti    
c000ef41:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c000ef46:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ef4c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ef53:	74 3c                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef5c:	74 33                	je     c000ef91 <idleFunction(void*)+0x62>
c000ef5e:	31 db                	xor    ebx,ebx
c000ef60:	52                   	push   edx
c000ef61:	52                   	push   edx
c000ef62:	68 e1 00 00 00       	push   0xe1
c000ef67:	50                   	push   eax
c000ef68:	e8 d3 fb ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c000ef6d:	53                   	push   ebx
c000ef6e:	83 e0 02             	and    eax,0x2
c000ef71:	50                   	push   eax
c000ef72:	68 e1 00 00 00       	push   0xe1
c000ef77:	ff 35 68 d9 02 c0    	push   DWORD PTR ds:0xc002d968
c000ef7d:	e8 ea fb ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c000ef82:	83 c4 20             	add    esp,0x20
c000ef85:	e8 f5 12 ff ff       	call   c000027f <doTPAUSE>
c000ef8a:	e8 71 94 01 00       	call   c0028400 <idleCommon()>
c000ef8f:	eb f4                	jmp    c000ef85 <idleFunction(void*)+0x56>
c000ef91:	fb                   	sti    
c000ef92:	f4                   	hlt    
c000ef93:	e8 68 94 01 00       	call   c0028400 <idleCommon()>
c000ef98:	eb f7                	jmp    c000ef91 <idleFunction(void*)+0x62>

c000ef9a <IDTEntry::IDTEntry(bool)>:
c000ef9a:	83 ec 04             	sub    esp,0x4
c000ef9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efa1:	88 04 24             	mov    BYTE PTR [esp],al
c000efa4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efa8:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000efae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efb2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000efb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efbd:	83 e2 f0             	and    edx,0xfffffff0
c000efc0:	83 ca 0e             	or     edx,0xe
c000efc3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efca:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efcd:	83 e2 ef             	and    edx,0xffffffef
c000efd0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000efd3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000efd7:	74 04                	je     c000efdd <IDTEntry::IDTEntry(bool)+0x43>
c000efd9:	b2 03                	mov    dl,0x3
c000efdb:	eb 02                	jmp    c000efdf <IDTEntry::IDTEntry(bool)+0x45>
c000efdd:	b2 00                	mov    dl,0x0
c000efdf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000efe3:	83 e2 03             	and    edx,0x3
c000efe6:	88 d1                	mov    cl,dl
c000efe8:	c1 e1 05             	shl    ecx,0x5
c000efeb:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000efee:	83 e2 9f             	and    edx,0xffffff9f
c000eff1:	09 ca                	or     edx,ecx
c000eff3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000effa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000effd:	83 ca 80             	or     edx,0xffffff80
c000f000:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f003:	90                   	nop
c000f004:	83 c4 04             	add    esp,0x4
c000f007:	c3                   	ret    

c000f008 <IDTEntry::setOffset(unsigned int)>:
c000f008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f010:	66 89 02             	mov    WORD PTR [edx],ax
c000f013:	c1 e8 10             	shr    eax,0x10
c000f016:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f01a:	c3                   	ret    
c000f01b:	90                   	nop

c000f01c <IDT::IDT()>:
c000f01c:	90                   	nop
c000f01d:	c3                   	ret    

c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f01e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f022:	83 c0 30             	add    eax,0x30
c000f025:	c3                   	ret    

c000f026 <IDT::addEntry(IDTEntry, int)>:
c000f026:	53                   	push   ebx
c000f027:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f02b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f02f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f037:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f03a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f03e:	5b                   	pop    ebx
c000f03f:	c3                   	ret    

c000f040 <IDT::addEntry(int, void (*)(), bool)>:
c000f040:	53                   	push   ebx
c000f041:	83 ec 10             	sub    esp,0x10
c000f044:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f049:	50                   	push   eax
c000f04a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f04e:	53                   	push   ebx
c000f04f:	e8 46 ff ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f054:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f058:	53                   	push   ebx
c000f059:	e8 aa ff ff ff       	call   c000f008 <IDTEntry::setOffset(unsigned int)>
c000f05e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f062:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f066:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f06a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f06e:	e8 b3 ff ff ff       	call   c000f026 <IDT::addEntry(IDTEntry, int)>
c000f073:	83 c4 30             	add    esp,0x30
c000f076:	5b                   	pop    ebx
c000f077:	c3                   	ret    

c000f078 <IDT::flush()>:
c000f078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f07c:	66 c7 05 78 d9 02 c0 ff 07 	mov    WORD PTR ds:0xc002d978,0x7ff
c000f085:	a3 7a d9 02 c0       	mov    ds:0xc002d97a,eax
c000f08a:	0f 01 1d 78 d9 02 c0 	lidtd  ds:0xc002d978
c000f091:	c3                   	ret    

c000f092 <IDT::setup()>:
c000f092:	57                   	push   edi
c000f093:	56                   	push   esi
c000f094:	53                   	push   ebx
c000f095:	83 ec 10             	sub    esp,0x10
c000f098:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f09c:	6a 00                	push   0x0
c000f09e:	68 70 04 00 c0       	push   0xc0000470
c000f0a3:	6a 00                	push   0x0
c000f0a5:	53                   	push   ebx
c000f0a6:	e8 95 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ab:	6a 00                	push   0x0
c000f0ad:	68 80 04 00 c0       	push   0xc0000480
c000f0b2:	6a 01                	push   0x1
c000f0b4:	53                   	push   ebx
c000f0b5:	e8 86 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ba:	83 c4 20             	add    esp,0x20
c000f0bd:	6a 00                	push   0x0
c000f0bf:	68 8a 04 00 c0       	push   0xc000048a
c000f0c4:	6a 02                	push   0x2
c000f0c6:	53                   	push   ebx
c000f0c7:	e8 74 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0cc:	6a 00                	push   0x0
c000f0ce:	68 94 04 00 c0       	push   0xc0000494
c000f0d3:	6a 03                	push   0x3
c000f0d5:	53                   	push   ebx
c000f0d6:	e8 65 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0db:	83 c4 20             	add    esp,0x20
c000f0de:	6a 00                	push   0x0
c000f0e0:	68 9e 04 00 c0       	push   0xc000049e
c000f0e5:	6a 04                	push   0x4
c000f0e7:	53                   	push   ebx
c000f0e8:	e8 53 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0ed:	6a 00                	push   0x0
c000f0ef:	68 a8 04 00 c0       	push   0xc00004a8
c000f0f4:	6a 05                	push   0x5
c000f0f6:	53                   	push   ebx
c000f0f7:	e8 44 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f0fc:	83 c4 20             	add    esp,0x20
c000f0ff:	6a 00                	push   0x0
c000f101:	68 b2 04 00 c0       	push   0xc00004b2
c000f106:	6a 06                	push   0x6
c000f108:	53                   	push   ebx
c000f109:	e8 32 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f10e:	6a 00                	push   0x0
c000f110:	68 bc 04 00 c0       	push   0xc00004bc
c000f115:	6a 07                	push   0x7
c000f117:	53                   	push   ebx
c000f118:	e8 23 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f11d:	83 c4 20             	add    esp,0x20
c000f120:	6a 00                	push   0x0
c000f122:	68 c6 04 00 c0       	push   0xc00004c6
c000f127:	6a 08                	push   0x8
c000f129:	53                   	push   ebx
c000f12a:	e8 11 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f12f:	6a 00                	push   0x0
c000f131:	68 ce 04 00 c0       	push   0xc00004ce
c000f136:	6a 09                	push   0x9
c000f138:	53                   	push   ebx
c000f139:	e8 02 ff ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f13e:	83 c4 20             	add    esp,0x20
c000f141:	6a 00                	push   0x0
c000f143:	68 d8 04 00 c0       	push   0xc00004d8
c000f148:	6a 0a                	push   0xa
c000f14a:	53                   	push   ebx
c000f14b:	e8 f0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f150:	6a 00                	push   0x0
c000f152:	68 e0 04 00 c0       	push   0xc00004e0
c000f157:	6a 0b                	push   0xb
c000f159:	53                   	push   ebx
c000f15a:	e8 e1 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f15f:	83 c4 20             	add    esp,0x20
c000f162:	6a 00                	push   0x0
c000f164:	68 e8 04 00 c0       	push   0xc00004e8
c000f169:	6a 0c                	push   0xc
c000f16b:	53                   	push   ebx
c000f16c:	e8 cf fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f171:	6a 00                	push   0x0
c000f173:	68 f0 04 00 c0       	push   0xc00004f0
c000f178:	6a 0d                	push   0xd
c000f17a:	53                   	push   ebx
c000f17b:	e8 c0 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f180:	83 c4 20             	add    esp,0x20
c000f183:	6a 00                	push   0x0
c000f185:	68 f8 04 00 c0       	push   0xc00004f8
c000f18a:	6a 0e                	push   0xe
c000f18c:	53                   	push   ebx
c000f18d:	e8 ae fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f192:	6a 00                	push   0x0
c000f194:	68 00 05 00 c0       	push   0xc0000500
c000f199:	6a 0f                	push   0xf
c000f19b:	53                   	push   ebx
c000f19c:	e8 9f fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1a1:	83 c4 20             	add    esp,0x20
c000f1a4:	6a 00                	push   0x0
c000f1a6:	68 0a 05 00 c0       	push   0xc000050a
c000f1ab:	6a 10                	push   0x10
c000f1ad:	53                   	push   ebx
c000f1ae:	e8 8d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1b3:	6a 00                	push   0x0
c000f1b5:	68 14 05 00 c0       	push   0xc0000514
c000f1ba:	6a 11                	push   0x11
c000f1bc:	53                   	push   ebx
c000f1bd:	e8 7e fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1c2:	83 c4 20             	add    esp,0x20
c000f1c5:	6a 00                	push   0x0
c000f1c7:	68 1e 05 00 c0       	push   0xc000051e
c000f1cc:	6a 12                	push   0x12
c000f1ce:	53                   	push   ebx
c000f1cf:	e8 6c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1d4:	6a 01                	push   0x1
c000f1d6:	68 b8 05 00 c0       	push   0xc00005b8
c000f1db:	6a 60                	push   0x60
c000f1dd:	53                   	push   ebx
c000f1de:	e8 5d fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1e3:	83 c4 20             	add    esp,0x20
c000f1e6:	6a 00                	push   0x0
c000f1e8:	68 bf 05 00 c0       	push   0xc00005bf
c000f1ed:	6a 20                	push   0x20
c000f1ef:	53                   	push   ebx
c000f1f0:	e8 4b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f1f5:	6a 00                	push   0x0
c000f1f7:	68 aa 05 00 c0       	push   0xc00005aa
c000f1fc:	6a 21                	push   0x21
c000f1fe:	53                   	push   ebx
c000f1ff:	e8 3c fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f204:	83 c4 20             	add    esp,0x20
c000f207:	6a 00                	push   0x0
c000f209:	68 b1 05 00 c0       	push   0xc00005b1
c000f20e:	6a 22                	push   0x22
c000f210:	53                   	push   ebx
c000f211:	e8 2a fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f216:	6a 00                	push   0x0
c000f218:	68 28 05 00 c0       	push   0xc0000528
c000f21d:	6a 23                	push   0x23
c000f21f:	53                   	push   ebx
c000f220:	e8 1b fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f225:	83 c4 20             	add    esp,0x20
c000f228:	6a 00                	push   0x0
c000f22a:	68 32 05 00 c0       	push   0xc0000532
c000f22f:	6a 24                	push   0x24
c000f231:	53                   	push   ebx
c000f232:	e8 09 fe ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f237:	6a 00                	push   0x0
c000f239:	68 3c 05 00 c0       	push   0xc000053c
c000f23e:	6a 25                	push   0x25
c000f240:	53                   	push   ebx
c000f241:	e8 fa fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f246:	83 c4 20             	add    esp,0x20
c000f249:	6a 00                	push   0x0
c000f24b:	68 46 05 00 c0       	push   0xc0000546
c000f250:	6a 26                	push   0x26
c000f252:	53                   	push   ebx
c000f253:	e8 e8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f258:	6a 00                	push   0x0
c000f25a:	68 50 05 00 c0       	push   0xc0000550
c000f25f:	6a 27                	push   0x27
c000f261:	53                   	push   ebx
c000f262:	e8 d9 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f267:	83 c4 20             	add    esp,0x20
c000f26a:	6a 00                	push   0x0
c000f26c:	68 5a 05 00 c0       	push   0xc000055a
c000f271:	6a 28                	push   0x28
c000f273:	53                   	push   ebx
c000f274:	e8 c7 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f279:	6a 00                	push   0x0
c000f27b:	68 64 05 00 c0       	push   0xc0000564
c000f280:	6a 29                	push   0x29
c000f282:	53                   	push   ebx
c000f283:	e8 b8 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f288:	83 c4 20             	add    esp,0x20
c000f28b:	6a 00                	push   0x0
c000f28d:	68 6e 05 00 c0       	push   0xc000056e
c000f292:	6a 2a                	push   0x2a
c000f294:	53                   	push   ebx
c000f295:	e8 a6 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f29a:	6a 00                	push   0x0
c000f29c:	68 78 05 00 c0       	push   0xc0000578
c000f2a1:	6a 2b                	push   0x2b
c000f2a3:	53                   	push   ebx
c000f2a4:	e8 97 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2a9:	83 c4 20             	add    esp,0x20
c000f2ac:	6a 00                	push   0x0
c000f2ae:	68 82 05 00 c0       	push   0xc0000582
c000f2b3:	6a 2c                	push   0x2c
c000f2b5:	53                   	push   ebx
c000f2b6:	e8 85 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2bb:	6a 00                	push   0x0
c000f2bd:	68 8c 05 00 c0       	push   0xc000058c
c000f2c2:	6a 2d                	push   0x2d
c000f2c4:	53                   	push   ebx
c000f2c5:	e8 76 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2ca:	83 c4 20             	add    esp,0x20
c000f2cd:	6a 00                	push   0x0
c000f2cf:	68 96 05 00 c0       	push   0xc0000596
c000f2d4:	6a 2e                	push   0x2e
c000f2d6:	53                   	push   ebx
c000f2d7:	e8 64 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2dc:	6a 00                	push   0x0
c000f2de:	68 a0 05 00 c0       	push   0xc00005a0
c000f2e3:	6a 2f                	push   0x2f
c000f2e5:	53                   	push   ebx
c000f2e6:	e8 55 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2eb:	83 c4 20             	add    esp,0x20
c000f2ee:	6a 00                	push   0x0
c000f2f0:	68 f6 05 00 c0       	push   0xc00005f6
c000f2f5:	6a 30                	push   0x30
c000f2f7:	53                   	push   ebx
c000f2f8:	e8 43 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f2fd:	6a 00                	push   0x0
c000f2ff:	68 00 06 00 c0       	push   0xc0000600
c000f304:	6a 31                	push   0x31
c000f306:	53                   	push   ebx
c000f307:	e8 34 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f30c:	83 c4 20             	add    esp,0x20
c000f30f:	6a 00                	push   0x0
c000f311:	68 0a 06 00 c0       	push   0xc000060a
c000f316:	6a 32                	push   0x32
c000f318:	53                   	push   ebx
c000f319:	e8 22 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f31e:	6a 00                	push   0x0
c000f320:	68 14 06 00 c0       	push   0xc0000614
c000f325:	6a 33                	push   0x33
c000f327:	53                   	push   ebx
c000f328:	e8 13 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f32d:	83 c4 20             	add    esp,0x20
c000f330:	6a 00                	push   0x0
c000f332:	68 1e 06 00 c0       	push   0xc000061e
c000f337:	6a 34                	push   0x34
c000f339:	53                   	push   ebx
c000f33a:	e8 01 fd ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f33f:	6a 00                	push   0x0
c000f341:	68 28 06 00 c0       	push   0xc0000628
c000f346:	6a 35                	push   0x35
c000f348:	53                   	push   ebx
c000f349:	e8 f2 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f34e:	83 c4 20             	add    esp,0x20
c000f351:	6a 00                	push   0x0
c000f353:	68 32 06 00 c0       	push   0xc0000632
c000f358:	6a 36                	push   0x36
c000f35a:	53                   	push   ebx
c000f35b:	e8 e0 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f360:	6a 00                	push   0x0
c000f362:	68 3c 06 00 c0       	push   0xc000063c
c000f367:	6a 37                	push   0x37
c000f369:	53                   	push   ebx
c000f36a:	e8 d1 fc ff ff       	call   c000f040 <IDT::addEntry(int, void (*)(), bool)>
c000f36f:	83 c4 1c             	add    esp,0x1c
c000f372:	6a 03                	push   0x3
c000f374:	6a 02                	push   0x2
c000f376:	ff 35 d0 da 02 c0    	push   DWORD PTR ds:0xc002dad0
c000f37c:	e8 45 27 00 00       	call   c0011ac6 <VAS::allocatePages(int, int)>
c000f381:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f388:	89 c6                	mov    esi,eax
c000f38a:	e8 0a 02 00 00       	call   c000f599 <malloc>
c000f38f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f395:	89 04 24             	mov    DWORD PTR [esp],eax
c000f398:	89 c7                	mov    edi,eax
c000f39a:	e8 af 17 00 00       	call   c0010b4e <TSS::TSS()>
c000f39f:	83 c4 0c             	add    esp,0xc
c000f3a2:	68 c6 04 00 c0       	push   0xc00004c6
c000f3a7:	56                   	push   esi
c000f3a8:	57                   	push   edi
c000f3a9:	e8 e0 17 00 00       	call   c0010b8e <TSS::setup(unsigned long, unsigned long)>
c000f3ae:	89 c6                	mov    esi,eax
c000f3b0:	58                   	pop    eax
c000f3b1:	5a                   	pop    edx
c000f3b2:	6a 00                	push   0x0
c000f3b4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f3b8:	50                   	push   eax
c000f3b9:	e8 dc fb ff ff       	call   c000ef9a <IDTEntry::IDTEntry(bool)>
c000f3be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3c2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f3c7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f3ce:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f3d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3d8:	80 ce 05             	or     dh,0x5
c000f3db:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f3de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f3e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f3e6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f3e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f3ec:	e8 87 fc ff ff       	call   c000f078 <IDT::flush()>
c000f3f1:	83 c4 20             	add    esp,0x20
c000f3f4:	5b                   	pop    ebx
c000f3f5:	5e                   	pop    esi
c000f3f6:	5f                   	pop    edi
c000f3f7:	c3                   	ret    

c000f3f8 <sbrk>:
c000f3f8:	55                   	push   ebp
c000f3f9:	57                   	push   edi
c000f3fa:	56                   	push   esi
c000f3fb:	53                   	push   ebx
c000f3fc:	83 ec 1c             	sub    esp,0x1c
c000f3ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 3e                	je     c000f445 <sbrk+0x4d>
c000f407:	78 43                	js     c000f44c <sbrk+0x54>
c000f409:	8b 15 68 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d968
c000f40f:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f415:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f41b:	83 e2 01             	and    edx,0x1
c000f41e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f422:	8b 0d 3c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c73c
c000f428:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f42c:	05 ff 0f 00 00       	add    eax,0xfff
c000f431:	89 c2                	mov    edx,eax
c000f433:	78 2f                	js     c000f464 <sbrk+0x6c>
c000f435:	c1 fa 0c             	sar    edx,0xc
c000f438:	89 d7                	mov    edi,edx
c000f43a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f43e:	be 00 00 00 00       	mov    esi,0x0
c000f443:	eb 36                	jmp    c000f47b <sbrk+0x83>
c000f445:	a1 3c c7 02 c0       	mov    eax,ds:0xc002c73c
c000f44a:	eb 73                	jmp    c000f4bf <sbrk+0xc7>
c000f44c:	83 ec 08             	sub    esp,0x8
c000f44f:	50                   	push   eax
c000f450:	68 60 9f 02 c0       	push   0xc0029f60
c000f455:	e8 59 32 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000f45a:	83 c4 10             	add    esp,0x10
c000f45d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f462:	eb 5b                	jmp    c000f4bf <sbrk+0xc7>
c000f464:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f46a:	eb c9                	jmp    c000f435 <sbrk+0x3d>
c000f46c:	81 05 3c c7 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002c73c,0x1000
c000f476:	46                   	inc    esi
c000f477:	39 f7                	cmp    edi,esi
c000f479:	74 33                	je     c000f4ae <sbrk+0xb6>
c000f47b:	8b 1d d0 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dad0
c000f481:	8b 2d 3c c7 02 c0    	mov    ebp,DWORD PTR ds:0xc002c73c
c000f487:	e8 e5 04 00 00       	call   c000f971 <Phys::allocatePage()>
c000f48c:	68 01 0c 00 00       	push   0xc01
c000f491:	55                   	push   ebp
c000f492:	50                   	push   eax
c000f493:	53                   	push   ebx
c000f494:	e8 2b 25 00 00       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f499:	83 c4 10             	add    esp,0x10
c000f49c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4a1:	74 c9                	je     c000f46c <sbrk+0x74>
c000f4a3:	8b 1d 3c c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c73c
c000f4a9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4ac:	eb be                	jmp    c000f46c <sbrk+0x74>
c000f4ae:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f4b3:	75 12                	jne    c000f4c7 <sbrk+0xcf>
c000f4b5:	0f 20 d8             	mov    eax,cr3
c000f4b8:	0f 22 d8             	mov    cr3,eax
c000f4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f4bf:	83 c4 1c             	add    esp,0x1c
c000f4c2:	5b                   	pop    ebx
c000f4c3:	5e                   	pop    esi
c000f4c4:	5f                   	pop    edi
c000f4c5:	5d                   	pop    ebp
c000f4c6:	c3                   	ret    
c000f4c7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f4cb:	89 cb                	mov    ebx,ecx
c000f4cd:	c1 eb 0a             	shr    ebx,0xa
c000f4d0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f4d6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f4dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4e0:	c1 e0 0c             	shl    eax,0xc
c000f4e3:	01 c8                	add    eax,ecx
c000f4e5:	c1 e8 0a             	shr    eax,0xa
c000f4e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f4ed:	2d 00 00 40 00       	sub    eax,0x400000
c000f4f2:	39 c3                	cmp    ebx,eax
c000f4f4:	77 c5                	ja     c000f4bb <sbrk+0xc3>
c000f4f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f4f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f4ff:	39 d8                	cmp    eax,ebx
c000f501:	73 f3                	jae    c000f4f6 <sbrk+0xfe>
c000f503:	eb b6                	jmp    c000f4bb <sbrk+0xc3>

c000f505 <mmap>:
c000f505:	83 ec 18             	sub    esp,0x18
c000f508:	68 90 9f 02 c0       	push   0xc0029f90
c000f50d:	e8 0d a9 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c000f512:	b8 00 00 00 00       	mov    eax,0x0
c000f517:	83 c4 1c             	add    esp,0x1c
c000f51a:	c3                   	ret    

c000f51b <munmap>:
c000f51b:	83 ec 18             	sub    esp,0x18
c000f51e:	68 95 9f 02 c0       	push   0xc0029f95
c000f523:	e8 f7 a8 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c000f528:	b8 00 00 00 00       	mov    eax,0x0
c000f52d:	83 c4 1c             	add    esp,0x1c
c000f530:	c3                   	ret    

c000f531 <liballoc_lock()>:
c000f531:	fa                   	cli    
c000f532:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c000f538:	b8 00 00 00 00       	mov    eax,0x0
c000f53d:	c3                   	ret    

c000f53e <liballoc_unlock()>:
c000f53e:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c000f543:	48                   	dec    eax
c000f544:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c000f549:	75 01                	jne    c000f54c <liballoc_unlock()+0xe>
c000f54b:	fb                   	sti    
c000f54c:	b8 00 00 00 00       	mov    eax,0x0
c000f551:	c3                   	ret    

c000f552 <liballoc_alloc(int)>:
c000f552:	83 ec 10             	sub    esp,0x10
c000f555:	6a 01                	push   0x1
c000f557:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f55b:	ff 35 d0 da 02 c0    	push   DWORD PTR ds:0xc002dad0
c000f561:	e8 60 25 00 00       	call   c0011ac6 <VAS::allocatePages(int, int)>
c000f566:	83 c4 1c             	add    esp,0x1c
c000f569:	c3                   	ret    

c000f56a <liballoc_free(void*, int)>:
c000f56a:	83 ec 14             	sub    esp,0x14
c000f56d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f571:	ff 35 d0 da 02 c0    	push   DWORD PTR ds:0xc002dad0
c000f577:	e8 f4 21 00 00       	call   c0011770 <VAS::freeAllocatedPages(unsigned long)>
c000f57c:	b8 00 00 00 00       	mov    eax,0x0
c000f581:	83 c4 1c             	add    esp,0x1c
c000f584:	c3                   	ret    

c000f585 <realloc>:
c000f585:	83 ec 14             	sub    esp,0x14
c000f588:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f590:	e8 97 20 ff ff       	call   c000162c <dlrealloc>
c000f595:	83 c4 1c             	add    esp,0x1c
c000f598:	c3                   	ret    

c000f599 <malloc>:
c000f599:	83 ec 18             	sub    esp,0x18
c000f59c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5a0:	e8 4a 1b ff ff       	call   c00010ef <dlmalloc>
c000f5a5:	83 c4 1c             	add    esp,0x1c
c000f5a8:	c3                   	ret    

c000f5a9 <free>:
c000f5a9:	83 ec 18             	sub    esp,0x18
c000f5ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5b0:	e8 df 17 ff ff       	call   c0000d94 <dlfree>
c000f5b5:	83 c4 1c             	add    esp,0x1c
c000f5b8:	c3                   	ret    

c000f5b9 <rfree>:
c000f5b9:	83 ec 18             	sub    esp,0x18
c000f5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f5c0:	e8 cf 17 ff ff       	call   c0000d94 <dlfree>
c000f5c5:	83 c4 1c             	add    esp,0x1c
c000f5c8:	c3                   	ret    

c000f5c9 <calloc>:
c000f5c9:	56                   	push   esi
c000f5ca:	53                   	push   ebx
c000f5cb:	83 ec 10             	sub    esp,0x10
c000f5ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 bc ff ff ff       	call   c000f599 <malloc>
c000f5dd:	89 c6                	mov    esi,eax
c000f5df:	83 c4 0c             	add    esp,0xc
c000f5e2:	53                   	push   ebx
c000f5e3:	6a 00                	push   0x0
c000f5e5:	50                   	push   eax
c000f5e6:	e8 65 11 ff ff       	call   c0000750 <memset>
c000f5eb:	89 f0                	mov    eax,esi
c000f5ed:	83 c4 14             	add    esp,0x14
c000f5f0:	5b                   	pop    ebx
c000f5f1:	5e                   	pop    esi
c000f5f2:	c3                   	ret    

c000f5f3 <Krnl::setBootMessage(char const*)>:
c000f5f3:	57                   	push   edi
c000f5f4:	56                   	push   esi
c000f5f5:	53                   	push   ebx
c000f5f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000f5fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000f603:	68 9e 00 00 00       	push   0x9e
c000f608:	6a 00                	push   0x0
c000f60a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000f60e:	56                   	push   esi
c000f60f:	e8 3c 11 ff ff       	call   c0000750 <memset>
c000f614:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f617:	e8 50 11 ff ff       	call   c000076c <strlen>
c000f61c:	ba 50 00 00 00       	mov    edx,0x50
c000f621:	83 c4 10             	add    esp,0x10
c000f624:	29 c2                	sub    edx,eax
c000f626:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c000f62a:	d1 ea                	shr    edx,1
c000f62c:	84 c0                	test   al,al
c000f62e:	74 19                	je     c000f649 <Krnl::setBootMessage(char const*)+0x56>
c000f630:	01 d2                	add    edx,edx
c000f632:	43                   	inc    ebx
c000f633:	01 f2                	add    edx,esi
c000f635:	80 cc 0f             	or     ah,0xf
c000f638:	83 c2 02             	add    edx,0x2
c000f63b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f63f:	43                   	inc    ebx
c000f640:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c000f645:	84 c0                	test   al,al
c000f647:	75 ec                	jne    c000f635 <Krnl::setBootMessage(char const*)+0x42>
c000f649:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000f64e:	b9 9e 00 00 00       	mov    ecx,0x9e
c000f653:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f655:	81 c4 a0 00 00 00    	add    esp,0xa0
c000f65b:	5b                   	pop    ebx
c000f65c:	5e                   	pop    esi
c000f65d:	5f                   	pop    edi
c000f65e:	c3                   	ret    

c000f65f <kernel_main>:
c000f65f:	57                   	push   edi
c000f660:	bf f9 03 00 00       	mov    edi,0x3f9
c000f665:	56                   	push   esi
c000f666:	89 fa                	mov    edx,edi
c000f668:	53                   	push   ebx
c000f669:	31 f6                	xor    esi,esi
c000f66b:	83 ec 2c             	sub    esp,0x2c
c000f66e:	89 f0                	mov    eax,esi
c000f670:	ee                   	out    dx,al
c000f671:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f676:	b0 80                	mov    al,0x80
c000f678:	89 da                	mov    edx,ebx
c000f67a:	ee                   	out    dx,al
c000f67b:	b1 03                	mov    cl,0x3
c000f67d:	ba f8 03 00 00       	mov    edx,0x3f8
c000f682:	88 c8                	mov    al,cl
c000f684:	ee                   	out    dx,al
c000f685:	89 f0                	mov    eax,esi
c000f687:	89 fa                	mov    edx,edi
c000f689:	ee                   	out    dx,al
c000f68a:	88 c8                	mov    al,cl
c000f68c:	89 da                	mov    edx,ebx
c000f68e:	ee                   	out    dx,al
c000f68f:	b0 c7                	mov    al,0xc7
c000f691:	ba fa 03 00 00       	mov    edx,0x3fa
c000f696:	ee                   	out    dx,al
c000f697:	b0 0b                	mov    al,0xb
c000f699:	ba fc 03 00 00       	mov    edx,0x3fc
c000f69e:	ee                   	out    dx,al
c000f69f:	68 9c 9f 02 c0       	push   0xc0029f9c
c000f6a4:	e8 0a 30 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000f6a9:	e8 a2 09 00 00       	call   c0010050 <installVgaTextImplementation()>
c000f6ae:	0f b6 05 40 c7 02 c0 	movzx  eax,BYTE PTR ds:0xc002c740
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	84 c0                	test   al,al
c000f6ba:	74 6c                	je     c000f728 <kernel_main+0xc9>
c000f6bc:	31 db                	xor    ebx,ebx
c000f6be:	bf 0a 00 00 00       	mov    edi,0xa
c000f6c3:	be 05 00 00 00       	mov    esi,0x5
c000f6c8:	31 c9                	xor    ecx,ecx
c000f6ca:	eb 2a                	jmp    c000f6f6 <kernel_main+0x97>
c000f6cc:	3c 0d                	cmp    al,0xd
c000f6ce:	74 1a                	je     c000f6ea <kernel_main+0x8b>
c000f6d0:	3c 0a                	cmp    al,0xa
c000f6d2:	74 40                	je     c000f714 <kernel_main+0xb5>
c000f6d4:	8d 14 b6             	lea    edx,[esi+esi*4]
c000f6d7:	80 cc 0e             	or     ah,0xe
c000f6da:	c1 e2 04             	shl    edx,0x4
c000f6dd:	01 ca                	add    edx,ecx
c000f6df:	41                   	inc    ecx
c000f6e0:	01 fa                	add    edx,edi
c000f6e2:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000f6ea:	43                   	inc    ebx
c000f6eb:	0f b6 83 40 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd38c0]
c000f6f2:	84 c0                	test   al,al
c000f6f4:	74 32                	je     c000f728 <kernel_main+0xc9>
c000f6f6:	80 b9 76 c7 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd388a],0xdb
c000f6fd:	75 cd                	jne    c000f6cc <kernel_main+0x6d>
c000f6ff:	0f b6 91 75 c7 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd388b]
c000f706:	83 e2 fe             	and    edx,0xfffffffe
c000f709:	81 fa ba 00 00 00    	cmp    edx,0xba
c000f70f:	75 bb                	jne    c000f6cc <kernel_main+0x6d>
c000f711:	47                   	inc    edi
c000f712:	eb b8                	jmp    c000f6cc <kernel_main+0x6d>
c000f714:	43                   	inc    ebx
c000f715:	46                   	inc    esi
c000f716:	31 c9                	xor    ecx,ecx
c000f718:	0f b6 83 40 c7 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd38c0]
c000f71f:	bf 0a 00 00 00       	mov    edi,0xa
c000f724:	84 c0                	test   al,al
c000f726:	75 ce                	jne    c000f6f6 <kernel_main+0x97>
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	68 b4 9f 02 c0       	push   0xc0029fb4
c000f730:	e8 be fe ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c000f735:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f73a:	a3 80 d9 02 c0       	mov    ds:0xc002d980,eax
c000f73f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f74e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f751:	e8 a7 03 00 00       	call   c000fafd <Phys::physicalMemorySetup(unsigned int)>
c000f756:	e8 6b 1c 00 00       	call   c00113c6 <Virt::virtualMemorySetup()>
c000f75b:	58                   	pop    eax
c000f75c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f760:	53                   	push   ebx
c000f761:	e8 32 1e 00 00       	call   c0011598 <VAS::VAS()>
c000f766:	89 1d d0 da 02 c0    	mov    DWORD PTR ds:0xc002dad0,ebx
c000f76c:	e8 af 08 ff ff       	call   c0000020 <callGlobalConstructors>
c000f771:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f778:	e8 1c fe ff ff       	call   c000f599 <malloc>
c000f77d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f780:	89 c6                	mov    esi,eax
c000f782:	e8 4f f0 ff ff       	call   c000e7d6 <Computer::Computer()>
c000f787:	6a 00                	push   0x0
c000f789:	89 35 68 d9 02 c0    	mov    DWORD PTR ds:0xc002d968,esi
c000f78f:	6a 00                	push   0x0
c000f791:	6a 00                	push   0x0
c000f793:	56                   	push   esi
c000f794:	e8 49 f4 ff ff       	call   c000ebe2 <Computer::open(int, int, void*)>
c000f799:	83 c4 14             	add    esp,0x14
c000f79c:	53                   	push   ebx
c000f79d:	e8 a6 20 00 00       	call   c0011848 <VAS::~VAS()>
c000f7a2:	83 c4 30             	add    esp,0x30
c000f7a5:	5b                   	pop    ebx
c000f7a6:	5e                   	pop    esi
c000f7a7:	5f                   	pop    edi
c000f7a8:	c3                   	ret    

c000f7a9 <Phys::allocateDMA(unsigned long)>:
c000f7a9:	55                   	push   ebp
c000f7aa:	31 d2                	xor    edx,edx
c000f7ac:	57                   	push   edi
c000f7ad:	31 ed                	xor    ebp,ebp
c000f7af:	56                   	push   esi
c000f7b0:	31 c9                	xor    ecx,ecx
c000f7b2:	53                   	push   ebx
c000f7b3:	31 db                	xor    ebx,ebx
c000f7b5:	83 ec 0c             	sub    esp,0xc
c000f7b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7bc:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f7c2:	c1 ee 0c             	shr    esi,0xc
c000f7c5:	eb 17                	jmp    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7c7:	85 c9                	test   ecx,ecx
c000f7c9:	75 04                	jne    c000f7cf <Phys::allocateDMA(unsigned long)+0x26>
c000f7cb:	89 d5                	mov    ebp,edx
c000f7cd:	89 d3                	mov    ebx,edx
c000f7cf:	8d 41 01             	lea    eax,[ecx+0x1]
c000f7d2:	39 c6                	cmp    esi,eax
c000f7d4:	74 23                	je     c000f7f9 <Phys::allocateDMA(unsigned long)+0x50>
c000f7d6:	42                   	inc    edx
c000f7d7:	89 c1                	mov    ecx,eax
c000f7d9:	83 fa 2f             	cmp    edx,0x2f
c000f7dc:	7f 11                	jg     c000f7ef <Phys::allocateDMA(unsigned long)+0x46>
c000f7de:	80 ba c0 d9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd2640],0x0
c000f7e5:	74 e0                	je     c000f7c7 <Phys::allocateDMA(unsigned long)+0x1e>
c000f7e7:	31 c9                	xor    ecx,ecx
c000f7e9:	42                   	inc    edx
c000f7ea:	83 fa 2f             	cmp    edx,0x2f
c000f7ed:	7e ef                	jle    c000f7de <Phys::allocateDMA(unsigned long)+0x35>
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	31 c0                	xor    eax,eax
c000f7f4:	5b                   	pop    ebx
c000f7f5:	5e                   	pop    esi
c000f7f6:	5f                   	pop    edi
c000f7f7:	5d                   	pop    ebp
c000f7f8:	c3                   	ret    
c000f7f9:	8d 14 33             	lea    edx,[ebx+esi*1]
c000f7fc:	89 d7                	mov    edi,edx
c000f7fe:	4f                   	dec    edi
c000f7ff:	79 03                	jns    c000f804 <Phys::allocateDMA(unsigned long)+0x5b>
c000f801:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f804:	c1 ff 04             	sar    edi,0x4
c000f807:	89 da                	mov    edx,ebx
c000f809:	c1 fa 04             	sar    edx,0x4
c000f80c:	39 fa                	cmp    edx,edi
c000f80e:	75 43                	jne    c000f853 <Phys::allocateDMA(unsigned long)+0xaa>
c000f810:	85 c0                	test   eax,eax
c000f812:	74 1a                	je     c000f82e <Phys::allocateDMA(unsigned long)+0x85>
c000f814:	be c0 d9 02 c0       	mov    esi,0xc002d9c0
c000f819:	8d 93 c0 d9 02 c0    	lea    edx,[ebx-0x3ffd2640]
c000f81f:	f7 d6                	not    esi
c000f821:	29 de                	sub    esi,ebx
c000f823:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f826:	42                   	inc    edx
c000f827:	8d 04 16             	lea    eax,[esi+edx*1]
c000f82a:	39 c1                	cmp    ecx,eax
c000f82c:	7f f5                	jg     c000f823 <Phys::allocateDMA(unsigned long)+0x7a>
c000f82e:	83 ec 0c             	sub    esp,0xc
c000f831:	68 d3 9f 02 c0       	push   0xc0029fd3
c000f836:	e8 78 2e 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000f83b:	83 c4 10             	add    esp,0x10
c000f83e:	85 ff                	test   edi,edi
c000f840:	74 17                	je     c000f859 <Phys::allocateDMA(unsigned long)+0xb0>
c000f842:	83 c4 0c             	add    esp,0xc
c000f845:	8d 83 50 20 0c 00    	lea    eax,[ebx+0xc2050]
c000f84b:	5b                   	pop    ebx
c000f84c:	c1 e0 0c             	shl    eax,0xc
c000f84f:	5e                   	pop    esi
c000f850:	5f                   	pop    edi
c000f851:	5d                   	pop    ebp
c000f852:	c3                   	ret    
c000f853:	89 ea                	mov    edx,ebp
c000f855:	31 c9                	xor    ecx,ecx
c000f857:	eb 90                	jmp    c000f7e9 <Phys::allocateDMA(unsigned long)+0x40>
c000f859:	83 c4 0c             	add    esp,0xc
c000f85c:	c1 e3 0c             	shl    ebx,0xc
c000f85f:	8d 83 00 00 01 c2    	lea    eax,[ebx-0x3dff0000]
c000f865:	5b                   	pop    ebx
c000f866:	5e                   	pop    esi
c000f867:	5f                   	pop    edi
c000f868:	5d                   	pop    ebp
c000f869:	c3                   	ret    

c000f86a <Phys::freeDMA(unsigned long, unsigned long)>:
c000f86a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f86e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f872:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f878:	c1 e9 0c             	shr    ecx,0xc
c000f87b:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f880:	76 25                	jbe    c000f8a7 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f882:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f887:	c1 e8 0c             	shr    eax,0xc
c000f88a:	8d 50 10             	lea    edx,[eax+0x10]
c000f88d:	85 c9                	test   ecx,ecx
c000f88f:	74 15                	je     c000f8a6 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f891:	8d 82 c0 d9 02 c0    	lea    eax,[edx-0x3ffd2640]
c000f897:	8d 94 11 c0 d9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd2640]
c000f89e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f8a1:	40                   	inc    eax
c000f8a2:	39 d0                	cmp    eax,edx
c000f8a4:	75 f8                	jne    c000f89e <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000f8a6:	c3                   	ret    
c000f8a7:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000f8ad:	c1 ea 0c             	shr    edx,0xc
c000f8b0:	eb db                	jmp    c000f88d <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000f8b2 <Phys::setPageState(unsigned long, bool)>:
c000f8b2:	56                   	push   esi
c000f8b3:	ba 01 00 00 00       	mov    edx,0x1
c000f8b8:	53                   	push   ebx
c000f8b9:	8b 35 84 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c884
c000f8bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f8c7:	89 c8                	mov    eax,ecx
c000f8c9:	83 e1 07             	and    ecx,0x7
c000f8cc:	c1 e8 03             	shr    eax,0x3
c000f8cf:	d3 e3                	shl    ebx,cl
c000f8d1:	01 c6                	add    esi,eax
c000f8d3:	d3 e2                	shl    edx,cl
c000f8d5:	f7 d2                	not    edx
c000f8d7:	20 16                	and    BYTE PTR [esi],dl
c000f8d9:	03 05 84 c8 02 c0    	add    eax,DWORD PTR ds:0xc002c884
c000f8df:	08 18                	or     BYTE PTR [eax],bl
c000f8e1:	5b                   	pop    ebx
c000f8e2:	5e                   	pop    esi
c000f8e3:	c3                   	ret    

c000f8e4 <Phys::getPageState(unsigned long)>:
c000f8e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f8e8:	8b 15 84 c8 02 c0    	mov    edx,DWORD PTR ds:0xc002c884
c000f8ee:	89 c8                	mov    eax,ecx
c000f8f0:	83 e1 07             	and    ecx,0x7
c000f8f3:	c1 e8 03             	shr    eax,0x3
c000f8f6:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f8fa:	d3 f8                	sar    eax,cl
c000f8fc:	83 e0 01             	and    eax,0x1
c000f8ff:	c3                   	ret    

c000f900 <Phys::freePage(unsigned long)>:
c000f900:	53                   	push   ebx
c000f901:	83 ec 10             	sub    esp,0x10
c000f904:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f908:	53                   	push   ebx
c000f909:	68 ea 9f 02 c0       	push   0xc0029fea
c000f90e:	e8 a0 2d 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000f913:	83 c4 10             	add    esp,0x10
c000f916:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000f91c:	76 3d                	jbe    c000f95b <Phys::freePage(unsigned long)+0x5b>
c000f91e:	83 ec 0c             	sub    esp,0xc
c000f921:	c1 eb 0c             	shr    ebx,0xc
c000f924:	53                   	push   ebx
c000f925:	e8 ba ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f92a:	83 c4 10             	add    esp,0x10
c000f92d:	84 c0                	test   al,al
c000f92f:	74 19                	je     c000f94a <Phys::freePage(unsigned long)+0x4a>
c000f931:	83 ec 08             	sub    esp,0x8
c000f934:	ff 0d b0 d9 02 c0    	dec    DWORD PTR ds:0xc002d9b0
c000f93a:	6a 00                	push   0x0
c000f93c:	53                   	push   ebx
c000f93d:	e8 70 ff ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000f942:	83 c4 10             	add    esp,0x10
c000f945:	83 c4 08             	add    esp,0x8
c000f948:	5b                   	pop    ebx
c000f949:	c3                   	ret    
c000f94a:	c7 44 24 10 fd 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ffd
c000f952:	83 c4 08             	add    esp,0x8
c000f955:	5b                   	pop    ebx
c000f956:	e9 c4 a4 00 00       	jmp    c0019e1f <Krnl::panic(char const*)>
c000f95b:	83 ec 08             	sub    esp,0x8
c000f95e:	68 00 10 00 00       	push   0x1000
c000f963:	53                   	push   ebx
c000f964:	e8 01 ff ff ff       	call   c000f86a <Phys::freeDMA(unsigned long, unsigned long)>
c000f969:	83 c4 10             	add    esp,0x10
c000f96c:	83 c4 08             	add    esp,0x8
c000f96f:	5b                   	pop    ebx
c000f970:	c3                   	ret    

c000f971 <Phys::allocatePage()>:
c000f971:	56                   	push   esi
c000f972:	53                   	push   ebx
c000f973:	83 ec 14             	sub    esp,0x14
c000f976:	8b 35 a4 d9 02 c0    	mov    esi,DWORD PTR ds:0xc002d9a4
c000f97c:	89 f3                	mov    ebx,esi
c000f97e:	eb 0a                	jmp    c000f98a <Phys::allocatePage()+0x19>
c000f980:	89 1d a4 d9 02 c0    	mov    DWORD PTR ds:0xc002d9a4,ebx
c000f986:	39 de                	cmp    esi,ebx
c000f988:	74 24                	je     c000f9ae <Phys::allocatePage()+0x3d>
c000f98a:	53                   	push   ebx
c000f98b:	e8 54 ff ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000f990:	5a                   	pop    edx
c000f991:	84 c0                	test   al,al
c000f993:	74 76                	je     c000fa0b <Phys::allocatePage()+0x9a>
c000f995:	43                   	inc    ebx
c000f996:	81 fb 00 00 08 00    	cmp    ebx,0x80000
c000f99c:	75 e2                	jne    c000f980 <Phys::allocatePage()+0xf>
c000f99e:	31 db                	xor    ebx,ebx
c000f9a0:	c7 05 a4 d9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d9a4,0x0
c000f9aa:	39 de                	cmp    esi,ebx
c000f9ac:	75 dc                	jne    c000f98a <Phys::allocatePage()+0x19>
c000f9ae:	83 ec 0c             	sub    esp,0xc
c000f9b1:	68 31 a0 02 c0       	push   0xc002a031
c000f9b6:	e8 f8 2c 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000f9bb:	58                   	pop    eax
c000f9bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f9c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f9c4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000f9ca:	e8 a9 29 00 00       	call   c0012378 <VAS::scanForEviction()>
c000f9cf:	83 c4 10             	add    esp,0x10
c000f9d2:	85 c0                	test   eax,eax
c000f9d4:	75 76                	jne    c000fa4c <Phys::allocatePage()+0xdb>
c000f9d6:	83 ec 0c             	sub    esp,0xc
c000f9d9:	68 00 10 00 00       	push   0x1000
c000f9de:	e8 c6 fd ff ff       	call   c000f7a9 <Phys::allocateDMA(unsigned long)>
c000f9e3:	83 c4 10             	add    esp,0x10
c000f9e6:	85 c0                	test   eax,eax
c000f9e8:	75 5c                	jne    c000fa46 <Phys::allocatePage()+0xd5>
c000f9ea:	83 ec 0c             	sub    esp,0xc
c000f9ed:	68 49 a0 02 c0       	push   0xc002a049
c000f9f2:	e8 28 a4 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c000f9f7:	83 c4 10             	add    esp,0x10
c000f9fa:	8b 1d a4 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a4
c000fa00:	53                   	push   ebx
c000fa01:	e8 de fe ff ff       	call   c000f8e4 <Phys::getPageState(unsigned long)>
c000fa06:	5a                   	pop    edx
c000fa07:	84 c0                	test   al,al
c000fa09:	75 8a                	jne    c000f995 <Phys::allocatePage()+0x24>
c000fa0b:	6a 01                	push   0x1
c000fa0d:	53                   	push   ebx
c000fa0e:	e8 9f fe ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fa13:	5a                   	pop    edx
c000fa14:	a1 b0 d9 02 c0       	mov    eax,ds:0xc002d9b0
c000fa19:	59                   	pop    ecx
c000fa1a:	40                   	inc    eax
c000fa1b:	8b 15 a4 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d9a4
c000fa21:	a3 b0 d9 02 c0       	mov    ds:0xc002d9b0,eax
c000fa26:	c1 e2 0c             	shl    edx,0xc
c000fa29:	52                   	push   edx
c000fa2a:	ff 35 b4 d9 02 c0    	push   DWORD PTR ds:0xc002d9b4
c000fa30:	50                   	push   eax
c000fa31:	68 13 a0 02 c0       	push   0xc002a013
c000fa36:	e8 78 2c 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000fa3b:	a1 a4 d9 02 c0       	mov    eax,ds:0xc002d9a4
c000fa40:	83 c4 10             	add    esp,0x10
c000fa43:	c1 e0 0c             	shl    eax,0xc
c000fa46:	83 c4 14             	add    esp,0x14
c000fa49:	5b                   	pop    ebx
c000fa4a:	5e                   	pop    esi
c000fa4b:	c3                   	ret    
c000fa4c:	83 ec 08             	sub    esp,0x8
c000fa4f:	89 c2                	mov    edx,eax
c000fa51:	6a 01                	push   0x1
c000fa53:	c1 ea 0c             	shr    edx,0xc
c000fa56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa5a:	52                   	push   edx
c000fa5b:	e8 52 fe ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fa60:	83 c4 10             	add    esp,0x10
c000fa63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa67:	eb dd                	jmp    c000fa46 <Phys::allocatePage()+0xd5>

c000fa69 <Phys::allocateContiguousPages(int)>:
c000fa69:	57                   	push   edi
c000fa6a:	56                   	push   esi
c000fa6b:	53                   	push   ebx
c000fa6c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fa70:	fa                   	cli    
c000fa71:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c000fa77:	31 db                	xor    ebx,ebx
c000fa79:	85 db                	test   ebx,ebx
c000fa7b:	75 11                	jne    c000fa8e <Phys::allocateContiguousPages(int)+0x25>
c000fa7d:	e8 ef fe ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa82:	83 fe 01             	cmp    esi,0x1
c000fa85:	89 c7                	mov    edi,eax
c000fa87:	74 21                	je     c000faaa <Phys::allocateContiguousPages(int)+0x41>
c000fa89:	bb 01 00 00 00       	mov    ebx,0x1
c000fa8e:	e8 de fe ff ff       	call   c000f971 <Phys::allocatePage()>
c000fa93:	89 da                	mov    edx,ebx
c000fa95:	c1 e2 0c             	shl    edx,0xc
c000fa98:	01 fa                	add    edx,edi
c000fa9a:	39 c2                	cmp    edx,eax
c000fa9c:	74 20                	je     c000fabe <Phys::allocateContiguousPages(int)+0x55>
c000fa9e:	bb 01 00 00 00       	mov    ebx,0x1
c000faa3:	89 c7                	mov    edi,eax
c000faa5:	83 fe 01             	cmp    esi,0x1
c000faa8:	75 e4                	jne    c000fa8e <Phys::allocateContiguousPages(int)+0x25>
c000faaa:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c000faaf:	48                   	dec    eax
c000fab0:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c000fab5:	75 01                	jne    c000fab8 <Phys::allocateContiguousPages(int)+0x4f>
c000fab7:	fb                   	sti    
c000fab8:	89 f8                	mov    eax,edi
c000faba:	5b                   	pop    ebx
c000fabb:	5e                   	pop    esi
c000fabc:	5f                   	pop    edi
c000fabd:	c3                   	ret    
c000fabe:	43                   	inc    ebx
c000fabf:	39 f3                	cmp    ebx,esi
c000fac1:	75 b6                	jne    c000fa79 <Phys::allocateContiguousPages(int)+0x10>
c000fac3:	eb e5                	jmp    c000faaa <Phys::allocateContiguousPages(int)+0x41>

c000fac5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fac5:	56                   	push   esi
c000fac6:	53                   	push   ebx
c000fac7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000facb:	39 1d a8 d9 02 c0    	cmp    DWORD PTR ds:0xc002d9a8,ebx
c000fad1:	73 06                	jae    c000fad9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fad3:	89 1d a8 d9 02 c0    	mov    DWORD PTR ds:0xc002d9a8,ebx
c000fad9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fadd:	c1 eb 0c             	shr    ebx,0xc
c000fae0:	c1 e8 0c             	shr    eax,0xc
c000fae3:	39 d8                	cmp    eax,ebx
c000fae5:	73 13                	jae    c000fafa <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fae7:	6a 00                	push   0x0
c000fae9:	8d 70 01             	lea    esi,[eax+0x1]
c000faec:	50                   	push   eax
c000faed:	e8 c0 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000faf2:	5a                   	pop    edx
c000faf3:	89 f0                	mov    eax,esi
c000faf5:	59                   	pop    ecx
c000faf6:	39 f3                	cmp    ebx,esi
c000faf8:	75 ed                	jne    c000fae7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fafa:	5b                   	pop    ebx
c000fafb:	5e                   	pop    esi
c000fafc:	c3                   	ret    

c000fafd <Phys::physicalMemorySetup(unsigned int)>:
c000fafd:	55                   	push   ebp
c000fafe:	57                   	push   edi
c000faff:	56                   	push   esi
c000fb00:	53                   	push   ebx
c000fb01:	31 db                	xor    ebx,ebx
c000fb03:	83 ec 40             	sub    esp,0x40
c000fb06:	6a 30                	push   0x30
c000fb08:	6a 00                	push   0x0
c000fb0a:	68 c0 d9 02 c0       	push   0xc002d9c0
c000fb0f:	e8 3c 0c ff ff       	call   c0000750 <memset>
c000fb14:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fb18:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fb1d:	05 00 10 00 00       	add    eax,0x1000
c000fb22:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fb26:	5a                   	pop    edx
c000fb27:	59                   	pop    ecx
c000fb28:	50                   	push   eax
c000fb29:	68 57 a0 02 c0       	push   0xc002a057
c000fb2e:	e8 80 2b 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	83 ec 08             	sub    esp,0x8
c000fb39:	6a 01                	push   0x1
c000fb3b:	53                   	push   ebx
c000fb3c:	43                   	inc    ebx
c000fb3d:	e8 70 fd ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fb42:	83 c4 10             	add    esp,0x10
c000fb45:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb4b:	75 e9                	jne    c000fb36 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fb4d:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fb54:	66 85 c0             	test   ax,ax
c000fb57:	0f 84 8e 01 00 00    	je     c000fceb <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000fb5d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fb61:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fb69:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb6d:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fb72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fb76:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fb7e:	eb 15                	jmp    c000fb95 <Phys::physicalMemorySetup(unsigned int)+0x98>
c000fb80:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fb84:	83 c3 18             	add    ebx,0x18
c000fb87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb8b:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fb8f:	0f 84 66 01 00 00    	je     c000fcfb <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fb95:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fb98:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fb9b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fb9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fba2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fba6:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fba8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fbab:	01 f0                	add    eax,esi
c000fbad:	55                   	push   ebp
c000fbae:	11 fa                	adc    edx,edi
c000fbb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fbb4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fbb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fbbc:	56                   	push   esi
c000fbbd:	68 b8 a0 02 c0       	push   0xc002a0b8
c000fbc2:	e8 ec 2a 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000fbc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbcb:	83 c4 10             	add    esp,0x10
c000fbce:	09 f8                	or     eax,edi
c000fbd0:	0f 85 25 01 00 00    	jne    c000fcfb <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000fbd6:	4d                   	dec    ebp
c000fbd7:	75 a7                	jne    c000fb80 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fbd9:	ba 00 00 08 00       	mov    edx,0x80000
c000fbde:	89 c1                	mov    ecx,eax
c000fbe0:	39 f2                	cmp    edx,esi
c000fbe2:	19 f9                	sbb    ecx,edi
c000fbe4:	0f 82 a7 00 00 00    	jb     c000fc91 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fbea:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fbee:	89 c1                	mov    ecx,eax
c000fbf0:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fbf4:	0f 83 97 00 00 00    	jae    c000fc91 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000fbfa:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fbff:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc03:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc07:	39 fa                	cmp    edx,edi
c000fc09:	19 e8                	sbb    eax,ebp
c000fc0b:	0f 82 21 01 00 00    	jb     c000fd32 <Phys::physicalMemorySetup(unsigned int)+0x235>
c000fc11:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fc15:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fc19:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fc1f:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fc24:	83 d5 ff             	adc    ebp,0xffffffff
c000fc27:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fc2b:	31 c0                	xor    eax,eax
c000fc2d:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fc31:	39 fa                	cmp    edx,edi
c000fc33:	89 c1                	mov    ecx,eax
c000fc35:	19 e9                	sbb    ecx,ebp
c000fc37:	0f 83 43 ff ff ff    	jae    c000fb80 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc3d:	be 00 00 08 00       	mov    esi,0x80000
c000fc42:	51                   	push   ecx
c000fc43:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fc47:	57                   	push   edi
c000fc48:	56                   	push   esi
c000fc49:	68 dc a0 02 c0       	push   0xc002a0dc
c000fc4e:	e8 60 2a 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000fc53:	5d                   	pop    ebp
c000fc54:	58                   	pop    eax
c000fc55:	57                   	push   edi
c000fc56:	56                   	push   esi
c000fc57:	e8 69 fe ff ff       	call   c000fac5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fc5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fc60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fc64:	83 c4 0c             	add    esp,0xc
c000fc67:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fc6b:	03 05 b4 d9 02 c0    	add    eax,DWORD PTR ds:0xc002d9b4
c000fc71:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fc78:	a3 b4 d9 02 c0       	mov    ds:0xc002d9b4,eax
c000fc7d:	52                   	push   edx
c000fc7e:	50                   	push   eax
c000fc7f:	68 7d a0 02 c0       	push   0xc002a07d
c000fc84:	e8 2a 2a 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000fc89:	83 c4 10             	add    esp,0x10
c000fc8c:	e9 ef fe ff ff       	jmp    c000fb80 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fc91:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fc95:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fc99:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fc9d:	39 ea                	cmp    edx,ebp
c000fc9f:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fca3:	0f 82 d7 fe ff ff    	jb     c000fb80 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fca9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fcae:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fcb2:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fcb6:	0f 83 c4 fe ff ff    	jae    c000fb80 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000fcbc:	39 ee                	cmp    esi,ebp
c000fcbe:	89 f8                	mov    eax,edi
c000fcc0:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fcc4:	0f 83 78 ff ff ff    	jae    c000fc42 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fcca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fcd2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fcd6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fcda:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fcde:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fce2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fce6:	e9 57 ff ff ff       	jmp    c000fc42 <Phys::physicalMemorySetup(unsigned int)+0x145>
c000fceb:	83 ec 0c             	sub    esp,0xc
c000fcee:	68 6f a0 02 c0       	push   0xc002a06f
c000fcf3:	e8 27 a1 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c000fcf8:	83 c4 10             	add    esp,0x10
c000fcfb:	bb 40 01 00 00       	mov    ebx,0x140
c000fd00:	83 ec 08             	sub    esp,0x8
c000fd03:	53                   	push   ebx
c000fd04:	68 99 a0 02 c0       	push   0xc002a099
c000fd09:	e8 a5 29 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c000fd0e:	58                   	pop    eax
c000fd0f:	5a                   	pop    edx
c000fd10:	6a 00                	push   0x0
c000fd12:	53                   	push   ebx
c000fd13:	43                   	inc    ebx
c000fd14:	e8 99 fb ff ff       	call   c000f8b2 <Phys::setPageState(unsigned long, bool)>
c000fd19:	ff 05 b4 d9 02 c0    	inc    DWORD PTR ds:0xc002d9b4
c000fd1f:	83 c4 10             	add    esp,0x10
c000fd22:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fd28:	75 d6                	jne    c000fd00 <Phys::physicalMemorySetup(unsigned int)+0x203>
c000fd2a:	83 c4 3c             	add    esp,0x3c
c000fd2d:	5b                   	pop    ebx
c000fd2e:	5e                   	pop    esi
c000fd2f:	5f                   	pop    edi
c000fd30:	5d                   	pop    ebp
c000fd31:	c3                   	ret    
c000fd32:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fd3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fd42:	e9 ca fe ff ff       	jmp    c000fc11 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000fd47:	90                   	nop

c000fd48 <Pipe::isAtty()>:
c000fd48:	31 c0                	xor    eax,eax
c000fd4a:	c3                   	ret    
c000fd4b:	90                   	nop

c000fd4c <Pipe::~Pipe()>:
c000fd4c:	83 ec 0c             	sub    esp,0xc
c000fd4f:	ba 48 a1 02 c0       	mov    edx,0xc002a148
c000fd54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd58:	89 10                	mov    DWORD PTR [eax],edx
c000fd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd5e:	83 ec 0c             	sub    esp,0xc
c000fd61:	50                   	push   eax
c000fd62:	e8 3f 12 00 00       	call   c0010fa6 <UnixFile::~UnixFile()>
c000fd67:	83 c4 10             	add    esp,0x10
c000fd6a:	90                   	nop
c000fd6b:	83 c4 0c             	add    esp,0xc
c000fd6e:	c3                   	ret    
c000fd6f:	90                   	nop

c000fd70 <Pipe::~Pipe()>:
c000fd70:	83 ec 0c             	sub    esp,0xc
c000fd73:	83 ec 0c             	sub    esp,0xc
c000fd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd7a:	e8 cd ff ff ff       	call   c000fd4c <Pipe::~Pipe()>
c000fd7f:	83 c4 10             	add    esp,0x10
c000fd82:	83 ec 08             	sub    esp,0x8
c000fd85:	6a 20                	push   0x20
c000fd87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd8b:	e8 4b 28 00 00       	call   c00125db <operator delete(void*, unsigned long)>
c000fd90:	83 c4 10             	add    esp,0x10
c000fd93:	83 c4 0c             	add    esp,0xc
c000fd96:	c3                   	ret    
c000fd97:	90                   	nop

c000fd98 <Pipe::read(unsigned long long, void*, int*)>:
c000fd98:	55                   	push   ebp
c000fd99:	57                   	push   edi
c000fd9a:	56                   	push   esi
c000fd9b:	53                   	push   ebx
c000fd9c:	83 ec 1c             	sub    esp,0x1c
c000fd9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fda3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fda7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fdab:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fdae:	89 c8                	mov    eax,ecx
c000fdb0:	99                   	cdq    
c000fdb1:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdb5:	74 24                	je     c000fddb <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdb7:	39 f9                	cmp    ecx,edi
c000fdb9:	89 d1                	mov    ecx,edx
c000fdbb:	19 f1                	sbb    ecx,esi
c000fdbd:	73 1c                	jae    c000fddb <Pipe::read(unsigned long long, void*, int*)+0x43>
c000fdbf:	fa                   	cli    
c000fdc0:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c000fdc6:	e8 de db 00 00       	call   c001d9a9 <schedule()>
c000fdcb:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c000fdd0:	48                   	dec    eax
c000fdd1:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c000fdd6:	75 d3                	jne    c000fdab <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fdd8:	fb                   	sti    
c000fdd9:	eb d0                	jmp    c000fdab <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fddb:	39 f8                	cmp    eax,edi
c000fddd:	89 d1                	mov    ecx,edx
c000fddf:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fde2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fde6:	19 f1                	sbb    ecx,esi
c000fde8:	73 07                	jae    c000fdf1 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000fdea:	89 04 24             	mov    DWORD PTR [esp],eax
c000fded:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fdf1:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fdf4:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fdf7:	29 f7                	sub    edi,esi
c000fdf9:	89 f8                	mov    eax,edi
c000fdfb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fdff:	99                   	cdq    
c000fe00:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe07:	19 d0                	sbb    eax,edx
c000fe09:	73 07                	jae    c000fe12 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000fe0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe12:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe15:	89 ea                	mov    edx,ebp
c000fe17:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe1b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe20:	74 0d                	je     c000fe2f <Pipe::read(unsigned long long, void*, int*)+0x97>
c000fe22:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe25:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe29:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe2d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe2f:	85 d2                	test   edx,edx
c000fe31:	74 11                	je     c000fe44 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000fe33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe37:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe3a:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe3e:	89 d1                	mov    ecx,edx
c000fe40:	89 c7                	mov    edi,eax
c000fe42:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe44:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe47:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe4a:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe4d:	99                   	cdq    
c000fe4e:	89 f7                	mov    edi,esi
c000fe50:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe53:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe57:	c1 ff 1f             	sar    edi,0x1f
c000fe5a:	57                   	push   edi
c000fe5b:	56                   	push   esi
c000fe5c:	52                   	push   edx
c000fe5d:	50                   	push   eax
c000fe5e:	e8 91 69 01 00       	call   c00267f4 <__umoddi3>
c000fe63:	83 c4 10             	add    esp,0x10
c000fe66:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fe69:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fe6e:	75 10                	jne    c000fe80 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000fe70:	83 ec 0c             	sub    esp,0xc
c000fe73:	68 05 a1 02 c0       	push   0xc002a105
c000fe78:	e8 a2 9f 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c000fe7d:	83 c4 10             	add    esp,0x10
c000fe80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fe84:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fe87:	89 10                	mov    DWORD PTR [eax],edx
c000fe89:	83 c4 1c             	add    esp,0x1c
c000fe8c:	31 c0                	xor    eax,eax
c000fe8e:	5b                   	pop    ebx
c000fe8f:	5e                   	pop    esi
c000fe90:	5f                   	pop    edi
c000fe91:	5d                   	pop    ebp
c000fe92:	c3                   	ret    
c000fe93:	90                   	nop

c000fe94 <Pipe::write(unsigned long long, void*, int*)>:
c000fe94:	55                   	push   ebp
c000fe95:	57                   	push   edi
c000fe96:	56                   	push   esi
c000fe97:	53                   	push   ebx
c000fe98:	83 ec 1c             	sub    esp,0x1c
c000fe9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fe9f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fea3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fea6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000feaa:	89 04 24             	mov    DWORD PTR [esp],eax
c000fead:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000feb1:	89 d8                	mov    eax,ebx
c000feb3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000feb6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000feba:	89 d6                	mov    esi,edx
c000febc:	89 d7                	mov    edi,edx
c000febe:	c1 ff 1f             	sar    edi,0x1f
c000fec1:	03 34 24             	add    esi,DWORD PTR [esp]
c000fec4:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fec8:	c1 f8 1f             	sar    eax,0x1f
c000fecb:	39 f3                	cmp    ebx,esi
c000fecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fed5:	19 f8                	sbb    eax,edi
c000fed7:	b8 01 00 00 00       	mov    eax,0x1
c000fedc:	72 6e                	jb     c000ff4c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fede:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fee1:	01 d0                	add    eax,edx
c000fee3:	99                   	cdq    
c000fee4:	f7 fb                	idiv   ebx
c000fee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000feea:	29 d3                	sub    ebx,edx
c000feec:	89 d7                	mov    edi,edx
c000feee:	89 de                	mov    esi,ebx
c000fef0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fef3:	c1 fb 1f             	sar    ebx,0x1f
c000fef6:	39 f2                	cmp    edx,esi
c000fef8:	19 d8                	sbb    eax,ebx
c000fefa:	b8 00 00 00 00       	mov    eax,0x0
c000feff:	72 04                	jb     c000ff05 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000ff01:	89 d0                	mov    eax,edx
c000ff03:	29 f0                	sub    eax,esi
c000ff05:	89 d3                	mov    ebx,edx
c000ff07:	29 c3                	sub    ebx,eax
c000ff09:	74 0b                	je     c000ff16 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000ff0b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000ff0e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ff12:	89 d9                	mov    ecx,ebx
c000ff14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff16:	85 c0                	test   eax,eax
c000ff18:	74 0d                	je     c000ff27 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000ff1a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ff1e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000ff21:	89 de                	mov    esi,ebx
c000ff23:	89 c1                	mov    ecx,eax
c000ff25:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff27:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000ff2a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff2f:	75 10                	jne    c000ff41 <Pipe::write(unsigned long long, void*, int*)+0xad>
c000ff31:	83 ec 0c             	sub    esp,0xc
c000ff34:	68 21 a1 02 c0       	push   0xc002a121
c000ff39:	e8 e1 9e 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c000ff3e:	83 c4 10             	add    esp,0x10
c000ff41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ff45:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000ff48:	89 08                	mov    DWORD PTR [eax],ecx
c000ff4a:	31 c0                	xor    eax,eax
c000ff4c:	83 c4 1c             	add    esp,0x1c
c000ff4f:	5b                   	pop    ebx
c000ff50:	5e                   	pop    esi
c000ff51:	5f                   	pop    edi
c000ff52:	5d                   	pop    ebp
c000ff53:	c3                   	ret    

c000ff54 <Pipe::Pipe(int)>:
c000ff54:	83 ec 0c             	sub    esp,0xc
c000ff57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff5b:	83 ec 08             	sub    esp,0x8
c000ff5e:	6a 00                	push   0x0
c000ff60:	50                   	push   eax
c000ff61:	e8 5e 0e 00 00       	call   c0010dc4 <UnixFile::UnixFile(int)>
c000ff66:	83 c4 10             	add    esp,0x10
c000ff69:	ba 48 a1 02 c0       	mov    edx,0xc002a148
c000ff6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff72:	89 10                	mov    DWORD PTR [eax],edx
c000ff74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ff7c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ff7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff83:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff99:	83 ec 0c             	sub    esp,0xc
c000ff9c:	50                   	push   eax
c000ff9d:	e8 f7 f5 ff ff       	call   c000f599 <malloc>
c000ffa2:	83 c4 10             	add    esp,0x10
c000ffa5:	89 c2                	mov    edx,eax
c000ffa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffab:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ffae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffb2:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ffb6:	90                   	nop
c000ffb7:	83 c4 0c             	add    esp,0xc
c000ffba:	c3                   	ret    
c000ffbb:	90                   	nop

c000ffbc <VgaText::isAtty()>:
c000ffbc:	b0 01                	mov    al,0x1
c000ffbe:	c3                   	ret    
c000ffbf:	90                   	nop

c000ffc0 <VgaText::~VgaText()>:
c000ffc0:	83 ec 0c             	sub    esp,0xc
c000ffc3:	ba d0 a1 02 c0       	mov    edx,0xc002a1d0
c000ffc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffcc:	89 10                	mov    DWORD PTR [eax],edx
c000ffce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffd2:	83 ec 0c             	sub    esp,0xc
c000ffd5:	50                   	push   eax
c000ffd6:	e8 cb 0f 00 00       	call   c0010fa6 <UnixFile::~UnixFile()>
c000ffdb:	83 c4 10             	add    esp,0x10
c000ffde:	90                   	nop
c000ffdf:	83 c4 0c             	add    esp,0xc
c000ffe2:	c3                   	ret    
c000ffe3:	90                   	nop

c000ffe4 <VgaText::~VgaText()>:
c000ffe4:	83 ec 0c             	sub    esp,0xc
c000ffe7:	83 ec 0c             	sub    esp,0xc
c000ffea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffee:	e8 cd ff ff ff       	call   c000ffc0 <VgaText::~VgaText()>
c000fff3:	83 c4 10             	add    esp,0x10
c000fff6:	83 ec 08             	sub    esp,0x8
c000fff9:	68 c4 02 00 00       	push   0x2c4
c000fffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010002:	e8 d4 25 00 00       	call   c00125db <operator delete(void*, unsigned long)>
c0010007:	83 c4 10             	add    esp,0x10
c001000a:	83 c4 0c             	add    esp,0xc
c001000d:	c3                   	ret    

c001000e <VgaText::read(unsigned long long, void*, int*)>:
c001000e:	83 ec 10             	sub    esp,0x10
c0010011:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010015:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010019:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001001d:	e8 58 5b 00 00       	call   c0015b7a <readKeyboard(VgaText*, char*, unsigned long)>
c0010022:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010026:	89 02                	mov    DWORD PTR [edx],eax
c0010028:	31 c0                	xor    eax,eax
c001002a:	83 c4 1c             	add    esp,0x1c
c001002d:	c3                   	ret    

c001002e <setTerminalScrollLock(bool)>:
c001002e:	c3                   	ret    

c001002f <addToTerminalCycle(VgaText*)>:
c001002f:	8b 15 20 da 02 c0    	mov    edx,DWORD PTR ds:0xc002da20
c0010035:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010039:	85 d2                	test   edx,edx
c001003b:	75 09                	jne    c0010046 <addToTerminalCycle(VgaText*)+0x17>
c001003d:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010040:	a3 20 da 02 c0       	mov    ds:0xc002da20,eax
c0010045:	c3                   	ret    
c0010046:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c0010049:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001004c:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c001004f:	c3                   	ret    

c0010050 <installVgaTextImplementation()>:
c0010050:	83 ec 10             	sub    esp,0x10
c0010053:	6a 20                	push   0x20
c0010055:	6a 00                	push   0x0
c0010057:	68 00 da 02 c0       	push   0xc002da00
c001005c:	e8 ef 06 ff ff       	call   c0000750 <memset>
c0010061:	83 c4 1c             	add    esp,0x1c
c0010064:	c3                   	ret    

c0010065 <scrollTerminalScrollLock(int)>:
c0010065:	c3                   	ret    

c0010066 <VgaText::updateTitle()>:
c0010066:	53                   	push   ebx
c0010067:	31 c0                	xor    eax,eax
c0010069:	83 ec 58             	sub    esp,0x58
c001006c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010070:	89 e1                	mov    ecx,esp
c0010072:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010076:	40                   	inc    eax
c0010077:	83 f8 50             	cmp    eax,0x50
c001007a:	75 f6                	jne    c0010072 <VgaText::updateTitle()+0xc>
c001007c:	31 c0                	xor    eax,eax
c001007e:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010085:	84 db                	test   bl,bl
c0010087:	74 06                	je     c001008f <VgaText::updateTitle()+0x29>
c0010089:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c001008c:	40                   	inc    eax
c001008d:	eb ef                	jmp    c001007e <VgaText::updateTitle()+0x18>
c001008f:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010092:	85 c0                	test   eax,eax
c0010094:	74 09                	je     c001009f <VgaText::updateTitle()+0x39>
c0010096:	53                   	push   ebx
c0010097:	53                   	push   ebx
c0010098:	51                   	push   ecx
c0010099:	52                   	push   edx
c001009a:	ff d0                	call   eax
c001009c:	83 c4 10             	add    esp,0x10
c001009f:	83 c4 58             	add    esp,0x58
c00100a2:	5b                   	pop    ebx
c00100a3:	c3                   	ret    

c00100a4 <VgaText::load()>:
c00100a4:	53                   	push   ebx
c00100a5:	31 c0                	xor    eax,eax
c00100a7:	83 ec 58             	sub    esp,0x58
c00100aa:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00100ae:	89 e2                	mov    edx,esp
c00100b0:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00100b4:	40                   	inc    eax
c00100b5:	83 f8 50             	cmp    eax,0x50
c00100b8:	75 f6                	jne    c00100b0 <VgaText::load()+0xc>
c00100ba:	31 c0                	xor    eax,eax
c00100bc:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00100c3:	84 c9                	test   cl,cl
c00100c5:	74 06                	je     c00100cd <VgaText::load()+0x29>
c00100c7:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00100ca:	40                   	inc    eax
c00100cb:	eb ef                	jmp    c00100bc <VgaText::load()+0x18>
c00100cd:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00100d0:	85 c0                	test   eax,eax
c00100d2:	74 09                	je     c00100dd <VgaText::load()+0x39>
c00100d4:	51                   	push   ecx
c00100d5:	51                   	push   ecx
c00100d6:	52                   	push   edx
c00100d7:	53                   	push   ebx
c00100d8:	ff d0                	call   eax
c00100da:	83 c4 10             	add    esp,0x10
c00100dd:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00100e0:	85 c0                	test   eax,eax
c00100e2:	74 09                	je     c00100ed <VgaText::load()+0x49>
c00100e4:	83 ec 0c             	sub    esp,0xc
c00100e7:	53                   	push   ebx
c00100e8:	ff d0                	call   eax
c00100ea:	83 c4 10             	add    esp,0x10
c00100ed:	83 c4 58             	add    esp,0x58
c00100f0:	5b                   	pop    ebx
c00100f1:	c3                   	ret    

c00100f2 <VgaText::updateCursor()>:
c00100f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100f6:	39 05 24 da 02 c0    	cmp    DWORD PTR ds:0xc002da24,eax
c00100fc:	75 09                	jne    c0010107 <VgaText::updateCursor()+0x15>
c00100fe:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010101:	85 c0                	test   eax,eax
c0010103:	74 02                	je     c0010107 <VgaText::updateCursor()+0x15>
c0010105:	ff e0                	jmp    eax
c0010107:	c3                   	ret    

c0010108 <VgaText::doANSI_SGR(int)>:
c0010108:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001010c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010110:	85 d2                	test   edx,edx
c0010112:	75 0b                	jne    c001011f <VgaText::doANSI_SGR(int)+0x17>
c0010114:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010117:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001011a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001011d:	eb 59                	jmp    c0010178 <VgaText::doANSI_SGR(int)+0x70>
c001011f:	83 fa 07             	cmp    edx,0x7
c0010122:	75 0b                	jne    c001012f <VgaText::doANSI_SGR(int)+0x27>
c0010124:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010127:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c001012a:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c001012d:	eb 49                	jmp    c0010178 <VgaText::doANSI_SGR(int)+0x70>
c001012f:	83 fa 1b             	cmp    edx,0x1b
c0010132:	74 e0                	je     c0010114 <VgaText::doANSI_SGR(int)+0xc>
c0010134:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010137:	83 f9 07             	cmp    ecx,0x7
c001013a:	77 09                	ja     c0010145 <VgaText::doANSI_SGR(int)+0x3d>
c001013c:	8b 14 8d c0 c8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3740]
c0010143:	eb 20                	jmp    c0010165 <VgaText::doANSI_SGR(int)+0x5d>
c0010145:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010148:	83 f9 07             	cmp    ecx,0x7
c001014b:	77 09                	ja     c0010156 <VgaText::doANSI_SGR(int)+0x4e>
c001014d:	8b 14 8d c0 c8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd3740]
c0010154:	eb 22                	jmp    c0010178 <VgaText::doANSI_SGR(int)+0x70>
c0010156:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010159:	83 f9 07             	cmp    ecx,0x7
c001015c:	77 0b                	ja     c0010169 <VgaText::doANSI_SGR(int)+0x61>
c001015e:	8b 14 95 78 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3888]
c0010165:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010168:	c3                   	ret    
c0010169:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001016c:	83 f9 07             	cmp    ecx,0x7
c001016f:	77 0a                	ja     c001017b <VgaText::doANSI_SGR(int)+0x73>
c0010171:	8b 14 95 50 c7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd38b0]
c0010178:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001017b:	c3                   	ret    

c001017c <VgaText::setDefaultBgColour(VgaColour)>:
c001017c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010180:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010184:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010187:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001018a:	c3                   	ret    
c001018b:	90                   	nop

c001018c <VgaText::setDefaultFgColour(VgaColour)>:
c001018c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010190:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010194:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010197:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001019a:	c3                   	ret    
c001019b:	90                   	nop

c001019c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001019c:	53                   	push   ebx
c001019d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00101a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00101a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00101a9:	51                   	push   ecx
c00101aa:	e8 cd ff ff ff       	call   c001017c <VgaText::setDefaultBgColour(VgaColour)>
c00101af:	58                   	pop    eax
c00101b0:	5a                   	pop    edx
c00101b1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00101b5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101b9:	5b                   	pop    ebx
c00101ba:	eb d0                	jmp    c001018c <VgaText::setDefaultFgColour(VgaColour)>

c00101bc <VgaText::setTitleTextColour(VgaColour)>:
c00101bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101c4:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00101c7:	e9 9a fe ff ff       	jmp    c0010066 <VgaText::updateTitle()>

c00101cc <VgaText::setTitleColour(VgaColour)>:
c00101cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00101d4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00101d7:	e9 8a fe ff ff       	jmp    c0010066 <VgaText::updateTitle()>

c00101dc <VgaText::setTitle(char*)>:
c00101dc:	53                   	push   ebx
c00101dd:	83 ec 10             	sub    esp,0x10
c00101e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101e8:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c00101ee:	50                   	push   eax
c00101ef:	e8 18 06 ff ff       	call   c000080c <strcpy>
c00101f4:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00101f8:	83 c4 18             	add    esp,0x18
c00101fb:	5b                   	pop    ebx
c00101fc:	e9 65 fe ff ff       	jmp    c0010066 <VgaText::updateTitle()>
c0010201:	90                   	nop

c0010202 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010202:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010206:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001020b:	83 e0 0f             	and    eax,0xf
c001020e:	c1 e2 04             	shl    edx,0x4
c0010211:	09 d0                	or     eax,edx
c0010213:	c3                   	ret    

c0010214 <VgaText::scrollScreen()>:
c0010214:	55                   	push   ebp
c0010215:	b9 01 00 00 00       	mov    ecx,0x1
c001021a:	57                   	push   edi
c001021b:	56                   	push   esi
c001021c:	53                   	push   ebx
c001021d:	83 ec 0c             	sub    esp,0xc
c0010220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010224:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c001022a:	31 ff                	xor    edi,edi
c001022c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001022f:	83 f9 17             	cmp    ecx,0x17
c0010232:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010235:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001023c:	75 27                	jne    c0010265 <VgaText::scrollScreen()+0x51>
c001023e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010241:	01 f5                	add    ebp,esi
c0010243:	f7 c7 01 00 00 00    	test   edi,0x1
c0010249:	74 16                	je     c0010261 <VgaText::scrollScreen()+0x4d>
c001024b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001024f:	50                   	push   eax
c0010250:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010254:	50                   	push   eax
c0010255:	e8 a8 ff ff ff       	call   c0010202 <VgaText::combineColours(unsigned char, unsigned char)>
c001025a:	5a                   	pop    edx
c001025b:	5a                   	pop    edx
c001025c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001025f:	eb 04                	jmp    c0010265 <VgaText::scrollScreen()+0x51>
c0010261:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010265:	47                   	inc    edi
c0010266:	46                   	inc    esi
c0010267:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001026d:	75 bd                	jne    c001022c <VgaText::scrollScreen()+0x18>
c001026f:	41                   	inc    ecx
c0010270:	83 f9 18             	cmp    ecx,0x18
c0010273:	75 af                	jne    c0010224 <VgaText::scrollScreen()+0x10>
c0010275:	39 1d 24 da 02 c0    	cmp    DWORD PTR ds:0xc002da24,ebx
c001027b:	75 1b                	jne    c0010298 <VgaText::scrollScreen()+0x84>
c001027d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010281:	74 05                	je     c0010288 <VgaText::scrollScreen()+0x74>
c0010283:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010286:	eb 10                	jmp    c0010298 <VgaText::scrollScreen()+0x84>
c0010288:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c001028b:	85 c0                	test   eax,eax
c001028d:	74 09                	je     c0010298 <VgaText::scrollScreen()+0x84>
c001028f:	83 ec 0c             	sub    esp,0xc
c0010292:	53                   	push   ebx
c0010293:	ff d0                	call   eax
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001029c:	83 c4 0c             	add    esp,0xc
c001029f:	5b                   	pop    ebx
c00102a0:	5e                   	pop    esi
c00102a1:	5f                   	pop    edi
c00102a2:	5d                   	pop    ebp
c00102a3:	e9 4a fe ff ff       	jmp    c00100f2 <VgaText::updateCursor()>

c00102a8 <VgaText::combineCharAndColour(char, unsigned char)>:
c00102a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00102ad:	c1 e0 08             	shl    eax,0x8
c00102b0:	89 c2                	mov    edx,eax
c00102b2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00102b7:	09 d0                	or     eax,edx
c00102b9:	c3                   	ret    

c00102ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00102ba:	56                   	push   esi
c00102bb:	53                   	push   ebx
c00102bc:	51                   	push   ecx
c00102bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00102c1:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102c6:	50                   	push   eax
c00102c7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00102cc:	50                   	push   eax
c00102cd:	e8 30 ff ff ff       	call   c0010202 <VgaText::combineColours(unsigned char, unsigned char)>
c00102d2:	5b                   	pop    ebx
c00102d3:	0f b6 c0             	movzx  eax,al
c00102d6:	5e                   	pop    esi
c00102d7:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00102dc:	50                   	push   eax
c00102dd:	53                   	push   ebx
c00102de:	e8 c5 ff ff ff       	call   c00102a8 <VgaText::combineCharAndColour(char, unsigned char)>
c00102e3:	5a                   	pop    edx
c00102e4:	5e                   	pop    esi
c00102e5:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00102e8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00102ee:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00102f2:	0f b7 d2             	movzx  edx,dx
c00102f5:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00102f9:	39 0d 24 da 02 c0    	cmp    DWORD PTR ds:0xc002da24,ecx
c00102ff:	75 10                	jne    c0010311 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010301:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010304:	85 c0                	test   eax,eax
c0010306:	74 09                	je     c0010311 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010308:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001030c:	5a                   	pop    edx
c001030d:	5b                   	pop    ebx
c001030e:	5e                   	pop    esi
c001030f:	ff e0                	jmp    eax
c0010311:	58                   	pop    eax
c0010312:	5b                   	pop    ebx
c0010313:	5e                   	pop    esi
c0010314:	c3                   	ret    
c0010315:	90                   	nop

c0010316 <VgaText::getCursorX()>:
c0010316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001031a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001031d:	c3                   	ret    

c001031e <VgaText::getCursorY()>:
c001031e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010322:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010325:	c3                   	ret    

c0010326 <VgaText::setCursor(int, int)>:
c0010326:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001032a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001032e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010331:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010335:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010338:	e9 b5 fd ff ff       	jmp    c00100f2 <VgaText::updateCursor()>

c001033d <setActiveTerminal(VgaText*)>:
c001033d:	53                   	push   ebx
c001033e:	83 ec 08             	sub    esp,0x8
c0010341:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010345:	85 db                	test   ebx,ebx
c0010347:	75 11                	jne    c001035a <setActiveTerminal(VgaText*)+0x1d>
c0010349:	c7 44 24 10 5c a1 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a15c
c0010351:	83 c4 08             	add    esp,0x8
c0010354:	5b                   	pop    ebx
c0010355:	e9 c5 9a 00 00       	jmp    c0019e1f <Krnl::panic(char const*)>
c001035a:	a1 24 da 02 c0       	mov    eax,ds:0xc002da24
c001035f:	85 c0                	test   eax,eax
c0010361:	74 0c                	je     c001036f <setActiveTerminal(VgaText*)+0x32>
c0010363:	83 ec 0c             	sub    esp,0xc
c0010366:	50                   	push   eax
c0010367:	e8 86 fd ff ff       	call   c00100f2 <VgaText::updateCursor()>
c001036c:	83 c4 10             	add    esp,0x10
c001036f:	89 1d 24 da 02 c0    	mov    DWORD PTR ds:0xc002da24,ebx
c0010375:	51                   	push   ecx
c0010376:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010379:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001037c:	53                   	push   ebx
c001037d:	e8 a4 ff ff ff       	call   c0010326 <VgaText::setCursor(int, int)>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010389:	75 07                	jne    c0010392 <setActiveTerminal(VgaText*)+0x55>
c001038b:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010392:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010396:	83 c4 08             	add    esp,0x8
c0010399:	5b                   	pop    ebx
c001039a:	e9 05 fd ff ff       	jmp    c00100a4 <VgaText::load()>

c001039f <doTerminalCycle()>:
c001039f:	83 ec 18             	sub    esp,0x18
c00103a2:	a1 20 da 02 c0       	mov    eax,ds:0xc002da20
c00103a7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00103aa:	50                   	push   eax
c00103ab:	a3 20 da 02 c0       	mov    ds:0xc002da20,eax
c00103b0:	e8 88 ff ff ff       	call   c001033d <setActiveTerminal(VgaText*)>
c00103b5:	83 c4 1c             	add    esp,0x1c
c00103b8:	c3                   	ret    
c00103b9:	90                   	nop

c00103ba <VgaText::setCursorX(int)>:
c00103ba:	83 ec 10             	sub    esp,0x10
c00103bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c1:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00103c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103c8:	50                   	push   eax
c00103c9:	e8 58 ff ff ff       	call   c0010326 <VgaText::setCursor(int, int)>
c00103ce:	83 c4 1c             	add    esp,0x1c
c00103d1:	c3                   	ret    

c00103d2 <VgaText::setCursorY(int)>:
c00103d2:	83 ec 10             	sub    esp,0x10
c00103d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103d9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103dd:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00103e0:	50                   	push   eax
c00103e1:	e8 40 ff ff ff       	call   c0010326 <VgaText::setCursor(int, int)>
c00103e6:	83 c4 1c             	add    esp,0x1c
c00103e9:	c3                   	ret    

c00103ea <VgaText::incrementCursor(bool)>:
c00103ea:	56                   	push   esi
c00103eb:	53                   	push   ebx
c00103ec:	51                   	push   ecx
c00103ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00103f1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103f5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00103f8:	40                   	inc    eax
c00103f9:	83 f8 50             	cmp    eax,0x50
c00103fc:	74 05                	je     c0010403 <VgaText::incrementCursor(bool)+0x19>
c00103fe:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010401:	eb 24                	jmp    c0010427 <VgaText::incrementCursor(bool)+0x3d>
c0010403:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010406:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001040d:	8d 50 01             	lea    edx,[eax+0x1]
c0010410:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010413:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010416:	75 0f                	jne    c0010427 <VgaText::incrementCursor(bool)+0x3d>
c0010418:	83 ec 0c             	sub    esp,0xc
c001041b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001041e:	53                   	push   ebx
c001041f:	e8 f0 fd ff ff       	call   c0010214 <VgaText::scrollScreen()>
c0010424:	83 c4 10             	add    esp,0x10
c0010427:	89 f0                	mov    eax,esi
c0010429:	84 c0                	test   al,al
c001042b:	74 0c                	je     c0010439 <VgaText::incrementCursor(bool)+0x4f>
c001042d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010431:	5a                   	pop    edx
c0010432:	5b                   	pop    ebx
c0010433:	5e                   	pop    esi
c0010434:	e9 b9 fc ff ff       	jmp    c00100f2 <VgaText::updateCursor()>
c0010439:	58                   	pop    eax
c001043a:	5b                   	pop    ebx
c001043b:	5e                   	pop    esi
c001043c:	c3                   	ret    
c001043d:	90                   	nop

c001043e <VgaText::decrementCursor(bool)>:
c001043e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010442:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010446:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010449:	85 c0                	test   eax,eax
c001044b:	74 04                	je     c0010451 <VgaText::decrementCursor(bool)+0x13>
c001044d:	48                   	dec    eax
c001044e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010451:	84 c9                	test   cl,cl
c0010453:	74 09                	je     c001045e <VgaText::decrementCursor(bool)+0x20>
c0010455:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010459:	e9 94 fc ff ff       	jmp    c00100f2 <VgaText::updateCursor()>
c001045e:	c3                   	ret    
c001045f:	90                   	nop

c0010460 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010460:	53                   	push   ebx
c0010461:	83 ec 08             	sub    esp,0x8
c0010464:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010468:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001046c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010470:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010474:	3c 07                	cmp    al,0x7
c0010476:	75 2a                	jne    c00104a2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010478:	a1 d8 da 02 c0       	mov    eax,ds:0xc002dad8
c001047d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010485:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c001048d:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010495:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010499:	83 c4 08             	add    esp,0x8
c001049c:	5b                   	pop    ebx
c001049d:	e9 1e 30 00 00       	jmp    c00134c0 <Buzzer::beep(int, int, bool)>
c00104a2:	3c 0d                	cmp    al,0xd
c00104a4:	75 09                	jne    c00104af <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00104a6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104ad:	eb 2c                	jmp    c00104db <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00104af:	3c 0a                	cmp    al,0xa
c00104b1:	75 31                	jne    c00104e4 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00104b3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00104b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00104bd:	8d 50 01             	lea    edx,[eax+0x1]
c00104c0:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00104c3:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00104c6:	75 0f                	jne    c00104d7 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00104c8:	83 ec 0c             	sub    esp,0xc
c00104cb:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00104ce:	53                   	push   ebx
c00104cf:	e8 40 fd ff ff       	call   c0010214 <VgaText::scrollScreen()>
c00104d4:	83 c4 10             	add    esp,0x10
c00104d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00104db:	83 c4 08             	add    esp,0x8
c00104de:	5b                   	pop    ebx
c00104df:	e9 0e fc ff ff       	jmp    c00100f2 <VgaText::updateCursor()>
c00104e4:	3c 08                	cmp    al,0x8
c00104e6:	75 25                	jne    c001050d <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c00104e8:	50                   	push   eax
c00104e9:	50                   	push   eax
c00104ea:	6a 01                	push   0x1
c00104ec:	53                   	push   ebx
c00104ed:	e8 4c ff ff ff       	call   c001043e <VgaText::decrementCursor(bool)>
c00104f2:	5a                   	pop    edx
c00104f3:	59                   	pop    ecx
c00104f4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00104f7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00104fa:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00104fd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010500:	6a 20                	push   0x20
c0010502:	53                   	push   ebx
c0010503:	e8 b2 fd ff ff       	call   c00102ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010508:	83 c4 28             	add    esp,0x28
c001050b:	5b                   	pop    ebx
c001050c:	c3                   	ret    
c001050d:	83 ec 08             	sub    esp,0x8
c0010510:	0f be c0             	movsx  eax,al
c0010513:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010516:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010519:	51                   	push   ecx
c001051a:	52                   	push   edx
c001051b:	50                   	push   eax
c001051c:	53                   	push   ebx
c001051d:	e8 98 fd ff ff       	call   c00102ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010522:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010526:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001052e:	83 c4 28             	add    esp,0x28
c0010531:	5b                   	pop    ebx
c0010532:	e9 b3 fe ff ff       	jmp    c00103ea <VgaText::incrementCursor(bool)>
c0010537:	90                   	nop

c0010538 <VgaText::doUpdate()>:
c0010538:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001053c:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c001053f:	85 c0                	test   eax,eax
c0010541:	74 02                	je     c0010545 <VgaText::doUpdate()+0xd>
c0010543:	ff e0                	jmp    eax
c0010545:	c3                   	ret    

c0010546 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010546:	55                   	push   ebp
c0010547:	31 ed                	xor    ebp,ebp
c0010549:	57                   	push   edi
c001054a:	56                   	push   esi
c001054b:	53                   	push   ebx
c001054c:	83 ec 1c             	sub    esp,0x1c
c001054f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010553:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010558:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001055f:	50                   	push   eax
c0010560:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010565:	50                   	push   eax
c0010566:	e8 97 fc ff ff       	call   c0010202 <VgaText::combineColours(unsigned char, unsigned char)>
c001056b:	59                   	pop    ecx
c001056c:	0f b6 c0             	movzx  eax,al
c001056f:	5e                   	pop    esi
c0010570:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010575:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010579:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001057c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010580:	0f b7 f6             	movzx  esi,si
c0010583:	01 f6                	add    esi,esi
c0010585:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010588:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001058b:	84 c0                	test   al,al
c001058d:	0f 84 fd 00 00 00    	je     c0010690 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010593:	3c 0d                	cmp    al,0xd
c0010595:	75 0c                	jne    c00105a3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010597:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001059e:	e9 e7 00 00 00       	jmp    c001068a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105a3:	3c 0a                	cmp    al,0xa
c00105a5:	75 47                	jne    c00105ee <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00105a7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105aa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105b1:	8d 48 01             	lea    ecx,[eax+0x1]
c00105b4:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00105b7:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00105ba:	75 0f                	jne    c00105cb <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00105bc:	83 ec 0c             	sub    esp,0xc
c00105bf:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00105c2:	53                   	push   ebx
c00105c3:	e8 4c fc ff ff       	call   c0010214 <VgaText::scrollScreen()>
c00105c8:	83 c4 10             	add    esp,0x10
c00105cb:	83 ec 0c             	sub    esp,0xc
c00105ce:	31 ed                	xor    ebp,ebp
c00105d0:	53                   	push   ebx
c00105d1:	e8 1c fb ff ff       	call   c00100f2 <VgaText::updateCursor()>
c00105d6:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00105db:	83 c4 10             	add    esp,0x10
c00105de:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00105e1:	0f b7 f6             	movzx  esi,si
c00105e4:	01 f6                	add    esi,esi
c00105e6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00105e9:	e9 9c 00 00 00       	jmp    c001068a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00105ee:	3c 08                	cmp    al,0x8
c00105f0:	75 35                	jne    c0010627 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c00105f2:	56                   	push   esi
c00105f3:	56                   	push   esi
c00105f4:	6a 01                	push   0x1
c00105f6:	53                   	push   ebx
c00105f7:	e8 42 fe ff ff       	call   c001043e <VgaText::decrementCursor(bool)>
c00105fc:	58                   	pop    eax
c00105fd:	5a                   	pop    edx
c00105fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010601:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010604:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010607:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001060a:	6a 20                	push   0x20
c001060c:	53                   	push   ebx
c001060d:	e8 a8 fc ff ff       	call   c00102ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010612:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010617:	83 c4 20             	add    esp,0x20
c001061a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c001061d:	0f b7 f6             	movzx  esi,si
c0010620:	01 f6                	add    esi,esi
c0010622:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010625:	eb 63                	jmp    c001068a <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010627:	51                   	push   ecx
c0010628:	51                   	push   ecx
c0010629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001062d:	50                   	push   eax
c001062e:	e8 75 fc ff ff       	call   c00102a8 <VgaText::combineCharAndColour(char, unsigned char)>
c0010633:	83 c4 10             	add    esp,0x10
c0010636:	66 89 06             	mov    WORD PTR [esi],ax
c0010639:	39 1d 24 da 02 c0    	cmp    DWORD PTR ds:0xc002da24,ebx
c001063f:	75 21                	jne    c0010662 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010641:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010644:	85 c0                	test   eax,eax
c0010646:	74 1a                	je     c0010662 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010648:	52                   	push   edx
c0010649:	52                   	push   edx
c001064a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001064d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010650:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010654:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010658:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c001065b:	51                   	push   ecx
c001065c:	53                   	push   ebx
c001065d:	ff d0                	call   eax
c001065f:	83 c4 20             	add    esp,0x20
c0010662:	83 c6 02             	add    esi,0x2
c0010665:	50                   	push   eax
c0010666:	50                   	push   eax
c0010667:	6a 00                	push   0x0
c0010669:	53                   	push   ebx
c001066a:	e8 7b fd ff ff       	call   c00103ea <VgaText::incrementCursor(bool)>
c001066f:	83 c4 10             	add    esp,0x10
c0010672:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010676:	75 0d                	jne    c0010685 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010678:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001067d:	0f b7 f6             	movzx  esi,si
c0010680:	01 f6                	add    esi,esi
c0010682:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010685:	bd 01 00 00 00       	mov    ebp,0x1
c001068a:	47                   	inc    edi
c001068b:	e9 f8 fe ff ff       	jmp    c0010588 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010690:	83 ec 0c             	sub    esp,0xc
c0010693:	53                   	push   ebx
c0010694:	e8 59 fa ff ff       	call   c00100f2 <VgaText::updateCursor()>
c0010699:	83 c4 10             	add    esp,0x10
c001069c:	89 e8                	mov    eax,ebp
c001069e:	84 c0                	test   al,al
c00106a0:	74 0c                	je     c00106ae <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00106a2:	83 ec 0c             	sub    esp,0xc
c00106a5:	53                   	push   ebx
c00106a6:	e8 8d fe ff ff       	call   c0010538 <VgaText::doUpdate()>
c00106ab:	83 c4 10             	add    esp,0x10
c00106ae:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00106b5:	83 c4 1c             	add    esp,0x1c
c00106b8:	5b                   	pop    ebx
c00106b9:	5e                   	pop    esi
c00106ba:	5f                   	pop    edi
c00106bb:	5d                   	pop    ebp
c00106bc:	c3                   	ret    
c00106bd:	90                   	nop

c00106be <VgaText::clearScreen()>:
c00106be:	57                   	push   edi
c00106bf:	56                   	push   esi
c00106c0:	31 f6                	xor    esi,esi
c00106c2:	53                   	push   ebx
c00106c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106c7:	52                   	push   edx
c00106c8:	6a 00                	push   0x0
c00106ca:	6a 00                	push   0x0
c00106cc:	53                   	push   ebx
c00106cd:	e8 54 fc ff ff       	call   c0010326 <VgaText::setCursor(int, int)>
c00106d2:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00106d9:	83 c4 10             	add    esp,0x10
c00106dc:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00106df:	7e 20                	jle    c0010701 <VgaText::clearScreen()+0x43>
c00106e1:	31 ff                	xor    edi,edi
c00106e3:	50                   	push   eax
c00106e4:	50                   	push   eax
c00106e5:	56                   	push   esi
c00106e6:	57                   	push   edi
c00106e7:	47                   	inc    edi
c00106e8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00106eb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00106ee:	6a 20                	push   0x20
c00106f0:	53                   	push   ebx
c00106f1:	e8 c4 fb ff ff       	call   c00102ba <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00106f6:	83 c4 20             	add    esp,0x20
c00106f9:	83 ff 50             	cmp    edi,0x50
c00106fc:	75 e5                	jne    c00106e3 <VgaText::clearScreen()+0x25>
c00106fe:	46                   	inc    esi
c00106ff:	eb db                	jmp    c00106dc <VgaText::clearScreen()+0x1e>
c0010701:	83 ec 0c             	sub    esp,0xc
c0010704:	53                   	push   ebx
c0010705:	e8 2e fe ff ff       	call   c0010538 <VgaText::doUpdate()>
c001070a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010711:	83 c4 10             	add    esp,0x10
c0010714:	5b                   	pop    ebx
c0010715:	5e                   	pop    esi
c0010716:	5f                   	pop    edi
c0010717:	c3                   	ret    

c0010718 <VgaText::putchar(char)>:
c0010718:	56                   	push   esi
c0010719:	53                   	push   ebx
c001071a:	83 ec 14             	sub    esp,0x14
c001071d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010721:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010725:	3c 5b                	cmp    al,0x5b
c0010727:	75 18                	jne    c0010741 <VgaText::putchar(char)+0x29>
c0010729:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001072d:	74 1f                	je     c001074e <VgaText::putchar(char)+0x36>
c001072f:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010735:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001073c:	e9 bd 00 00 00       	jmp    c00107fe <VgaText::putchar(char)+0xe6>
c0010741:	3c 1b                	cmp    al,0x1b
c0010743:	75 09                	jne    c001074e <VgaText::putchar(char)+0x36>
c0010745:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010749:	e9 b0 00 00 00       	jmp    c00107fe <VgaText::putchar(char)+0xe6>
c001074e:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010751:	84 c9                	test   cl,cl
c0010753:	0f 84 92 00 00 00    	je     c00107eb <VgaText::putchar(char)+0xd3>
c0010759:	8d 50 c0             	lea    edx,[eax-0x40]
c001075c:	80 fa 3e             	cmp    dl,0x3e
c001075f:	77 76                	ja     c00107d7 <VgaText::putchar(char)+0xbf>
c0010761:	3c 6d                	cmp    al,0x6d
c0010763:	75 47                	jne    c00107ac <VgaText::putchar(char)+0x94>
c0010765:	31 f6                	xor    esi,esi
c0010767:	31 d2                	xor    edx,edx
c0010769:	31 c0                	xor    eax,eax
c001076b:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001076e:	7e 2d                	jle    c001079d <VgaText::putchar(char)+0x85>
c0010770:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010775:	80 fa 3b             	cmp    dl,0x3b
c0010778:	75 17                	jne    c0010791 <VgaText::putchar(char)+0x79>
c001077a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001077e:	50                   	push   eax
c001077f:	53                   	push   ebx
c0010780:	e8 83 f9 ff ff       	call   c0010108 <VgaText::doANSI_SGR(int)>
c0010785:	59                   	pop    ecx
c0010786:	31 d2                	xor    edx,edx
c0010788:	58                   	pop    eax
c0010789:	31 c0                	xor    eax,eax
c001078b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001078f:	eb 09                	jmp    c001079a <VgaText::putchar(char)+0x82>
c0010791:	6b c0 0a             	imul   eax,eax,0xa
c0010794:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010798:	88 ca                	mov    dl,cl
c001079a:	46                   	inc    esi
c001079b:	eb ce                	jmp    c001076b <VgaText::putchar(char)+0x53>
c001079d:	84 d2                	test   dl,dl
c001079f:	74 2e                	je     c00107cf <VgaText::putchar(char)+0xb7>
c00107a1:	50                   	push   eax
c00107a2:	53                   	push   ebx
c00107a3:	e8 60 f9 ff ff       	call   c0010108 <VgaText::doANSI_SGR(int)>
c00107a8:	58                   	pop    eax
c00107a9:	5a                   	pop    edx
c00107aa:	eb 23                	jmp    c00107cf <VgaText::putchar(char)+0xb7>
c00107ac:	3c 4a                	cmp    al,0x4a
c00107ae:	75 1f                	jne    c00107cf <VgaText::putchar(char)+0xb7>
c00107b0:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00107b4:	75 19                	jne    c00107cf <VgaText::putchar(char)+0xb7>
c00107b6:	83 ec 0c             	sub    esp,0xc
c00107b9:	53                   	push   ebx
c00107ba:	e8 ff fe ff ff       	call   c00106be <VgaText::clearScreen()>
c00107bf:	83 c4 0c             	add    esp,0xc
c00107c2:	6a 00                	push   0x0
c00107c4:	6a 00                	push   0x0
c00107c6:	53                   	push   ebx
c00107c7:	e8 5a fb ff ff       	call   c0010326 <VgaText::setCursor(int, int)>
c00107cc:	83 c4 10             	add    esp,0x10
c00107cf:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00107d5:	eb 27                	jmp    c00107fe <VgaText::putchar(char)+0xe6>
c00107d7:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00107da:	83 fa 0e             	cmp    edx,0xe
c00107dd:	7f 1f                	jg     c00107fe <VgaText::putchar(char)+0xe6>
c00107df:	8d 4a 01             	lea    ecx,[edx+0x1]
c00107e2:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00107e5:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00107e9:	eb 13                	jmp    c00107fe <VgaText::putchar(char)+0xe6>
c00107eb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00107ee:	0f be c0             	movsx  eax,al
c00107f1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00107f4:	50                   	push   eax
c00107f5:	53                   	push   ebx
c00107f6:	e8 65 fc ff ff       	call   c0010460 <VgaText::putchar(char, VgaColour, VgaColour)>
c00107fb:	83 c4 10             	add    esp,0x10
c00107fe:	83 c4 14             	add    esp,0x14
c0010801:	5b                   	pop    ebx
c0010802:	5e                   	pop    esi
c0010803:	c3                   	ret    

c0010804 <VgaText::putx(unsigned int)>:
c0010804:	57                   	push   edi
c0010805:	b9 11 00 00 00       	mov    ecx,0x11
c001080a:	56                   	push   esi
c001080b:	be 6a a1 02 c0       	mov    esi,0xc002a16a
c0010810:	53                   	push   ebx
c0010811:	83 ec 20             	sub    esp,0x20
c0010814:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010818:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001081c:	fc                   	cld    
c001081d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001081f:	be 08 00 00 00       	mov    esi,0x8
c0010824:	50                   	push   eax
c0010825:	50                   	push   eax
c0010826:	89 d8                	mov    eax,ebx
c0010828:	c1 e3 04             	shl    ebx,0x4
c001082b:	c1 e8 1c             	shr    eax,0x1c
c001082e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010833:	50                   	push   eax
c0010834:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010838:	e8 db fe ff ff       	call   c0010718 <VgaText::putchar(char)>
c001083d:	83 c4 10             	add    esp,0x10
c0010840:	4e                   	dec    esi
c0010841:	75 e1                	jne    c0010824 <VgaText::putx(unsigned int)+0x20>
c0010843:	83 c4 20             	add    esp,0x20
c0010846:	5b                   	pop    ebx
c0010847:	5e                   	pop    esi
c0010848:	5f                   	pop    edi
c0010849:	c3                   	ret    

c001084a <VgaText::puts(char const*)>:
c001084a:	53                   	push   ebx
c001084b:	83 ec 08             	sub    esp,0x8
c001084e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010852:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010855:	84 c0                	test   al,al
c0010857:	74 12                	je     c001086b <VgaText::puts(char const*)+0x21>
c0010859:	43                   	inc    ebx
c001085a:	51                   	push   ecx
c001085b:	51                   	push   ecx
c001085c:	50                   	push   eax
c001085d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010861:	e8 b2 fe ff ff       	call   c0010718 <VgaText::putchar(char)>
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	eb e7                	jmp    c0010852 <VgaText::puts(char const*)+0x8>
c001086b:	83 c4 08             	add    esp,0x8
c001086e:	5b                   	pop    ebx
c001086f:	c3                   	ret    

c0010870 <VgaText::VgaText(char const*)>:
c0010870:	57                   	push   edi
c0010871:	56                   	push   esi
c0010872:	53                   	push   ebx
c0010873:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010877:	83 ec 08             	sub    esp,0x8
c001087a:	6a 00                	push   0x0
c001087c:	50                   	push   eax
c001087d:	e8 42 05 00 00       	call   c0010dc4 <UnixFile::UnixFile(int)>
c0010882:	83 c4 10             	add    esp,0x10
c0010885:	ba d0 a1 02 c0       	mov    edx,0xc002a1d0
c001088a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001088e:	89 10                	mov    DWORD PTR [eax],edx
c0010890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010894:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001089b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089f:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00108a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108aa:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00108ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b2:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00108b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ba:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00108c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c5:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00108cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d0:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00108d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108db:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00108e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e6:	8d 50 60             	lea    edx,[eax+0x60]
c00108e9:	bb 00 da 02 c0       	mov    ebx,0xc002da00
c00108ee:	b8 08 00 00 00       	mov    eax,0x8
c00108f3:	fc                   	cld    
c00108f4:	89 d7                	mov    edi,edx
c00108f6:	89 de                	mov    esi,ebx
c00108f8:	89 c1                	mov    ecx,eax
c00108fa:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010900:	05 82 00 00 00       	add    eax,0x82
c0010905:	83 ec 08             	sub    esp,0x8
c0010908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001090c:	50                   	push   eax
c001090d:	e8 fa fe fe ff       	call   c000080c <strcpy>
c0010912:	83 c4 10             	add    esp,0x10
c0010915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010919:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010920:	83 ec 0c             	sub    esp,0xc
c0010923:	6a 01                	push   0x1
c0010925:	e8 dd 08 00 00       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c001092a:	83 c4 10             	add    esp,0x10
c001092d:	89 c2                	mov    edx,eax
c001092f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010933:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010936:	8b 1d d0 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dad0
c001093c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010940:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010943:	89 c6                	mov    esi,eax
c0010945:	e8 27 f0 ff ff       	call   c000f971 <Phys::allocatePage()>
c001094a:	6a 05                	push   0x5
c001094c:	56                   	push   esi
c001094d:	50                   	push   eax
c001094e:	53                   	push   ebx
c001094f:	e8 70 10 00 00       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0010954:	83 c4 10             	add    esp,0x10
c0010957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001095b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001095e:	83 ec 04             	sub    esp,0x4
c0010961:	68 00 0f 00 00       	push   0xf00
c0010966:	6a 00                	push   0x0
c0010968:	50                   	push   eax
c0010969:	e8 e2 fd fe ff       	call   c0000750 <memset>
c001096e:	83 c4 10             	add    esp,0x10
c0010971:	83 ec 04             	sub    esp,0x4
c0010974:	6a 00                	push   0x0
c0010976:	6a 07                	push   0x7
c0010978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001097c:	e8 1b f8 ff ff       	call   c001019c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010981:	83 c4 10             	add    esp,0x10
c0010984:	83 ec 04             	sub    esp,0x4
c0010987:	6a 00                	push   0x0
c0010989:	6a 00                	push   0x0
c001098b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001098f:	e8 92 f9 ff ff       	call   c0010326 <VgaText::setCursor(int, int)>
c0010994:	83 c4 10             	add    esp,0x10
c0010997:	83 ec 0c             	sub    esp,0xc
c001099a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001099e:	e8 1b fd ff ff       	call   c00106be <VgaText::clearScreen()>
c00109a3:	83 c4 10             	add    esp,0x10
c00109a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109aa:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00109ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b2:	05 02 01 00 00       	add    eax,0x102
c00109b7:	83 ec 04             	sub    esp,0x4
c00109ba:	68 96 00 00 00       	push   0x96
c00109bf:	6a 00                	push   0x0
c00109c1:	50                   	push   eax
c00109c2:	e8 89 fd fe ff       	call   c0000750 <memset>
c00109c7:	83 c4 10             	add    esp,0x10
c00109ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ce:	05 98 01 00 00       	add    eax,0x198
c00109d3:	83 ec 04             	sub    esp,0x4
c00109d6:	68 2c 01 00 00       	push   0x12c
c00109db:	6a 00                	push   0x0
c00109dd:	50                   	push   eax
c00109de:	e8 6d fd fe ff       	call   c0000750 <memset>
c00109e3:	83 c4 10             	add    esp,0x10
c00109e6:	90                   	nop
c00109e7:	5b                   	pop    ebx
c00109e8:	5e                   	pop    esi
c00109e9:	5f                   	pop    edi
c00109ea:	c3                   	ret    
c00109eb:	90                   	nop

c00109ec <VgaText::receiveKey(unsigned char)>:
c00109ec:	55                   	push   ebp
c00109ed:	57                   	push   edi
c00109ee:	56                   	push   esi
c00109ef:	53                   	push   ebx
c00109f0:	83 ec 1c             	sub    esp,0x1c
c00109f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00109f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109fb:	84 db                	test   bl,bl
c00109fd:	0f 84 c9 00 00 00    	je     c0010acc <VgaText::receiveKey(unsigned char)+0xe0>
c0010a03:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010a09:	80 fb 08             	cmp    bl,0x8
c0010a0c:	75 2c                	jne    c0010a3a <VgaText::receiveKey(unsigned char)+0x4e>
c0010a0e:	83 ec 0c             	sub    esp,0xc
c0010a11:	57                   	push   edi
c0010a12:	e8 55 fd fe ff       	call   c000076c <strlen>
c0010a17:	83 c4 10             	add    esp,0x10
c0010a1a:	85 c0                	test   eax,eax
c0010a1c:	74 41                	je     c0010a5f <VgaText::receiveKey(unsigned char)+0x73>
c0010a1e:	50                   	push   eax
c0010a1f:	50                   	push   eax
c0010a20:	6a 08                	push   0x8
c0010a22:	56                   	push   esi
c0010a23:	e8 f0 fc ff ff       	call   c0010718 <VgaText::putchar(char)>
c0010a28:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a2b:	e8 3c fd fe ff       	call   c000076c <strlen>
c0010a30:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010a38:	eb 22                	jmp    c0010a5c <VgaText::receiveKey(unsigned char)+0x70>
c0010a3a:	0f be c3             	movsx  eax,bl
c0010a3d:	52                   	push   edx
c0010a3e:	52                   	push   edx
c0010a3f:	50                   	push   eax
c0010a40:	56                   	push   esi
c0010a41:	e8 d2 fc ff ff       	call   c0010718 <VgaText::putchar(char)>
c0010a46:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010a4a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010a4f:	59                   	pop    ecx
c0010a50:	5d                   	pop    ebp
c0010a51:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010a55:	50                   	push   eax
c0010a56:	57                   	push   edi
c0010a57:	e8 f0 fe fe ff       	call   c000094c <strcat>
c0010a5c:	83 c4 10             	add    esp,0x10
c0010a5f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010a66:	75 05                	jne    c0010a6d <VgaText::receiveKey(unsigned char)+0x81>
c0010a68:	80 fb 0a             	cmp    bl,0xa
c0010a6b:	75 53                	jne    c0010ac0 <VgaText::receiveKey(unsigned char)+0xd4>
c0010a6d:	83 ec 0c             	sub    esp,0xc
c0010a70:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010a76:	53                   	push   ebx
c0010a77:	e8 f0 fc fe ff       	call   c000076c <strlen>
c0010a7c:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010a7f:	89 c5                	mov    ebp,eax
c0010a81:	e8 e6 fc fe ff       	call   c000076c <strlen>
c0010a86:	83 c4 10             	add    esp,0x10
c0010a89:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010a8d:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010a92:	76 10                	jbe    c0010aa4 <VgaText::receiveKey(unsigned char)+0xb8>
c0010a94:	83 ec 0c             	sub    esp,0xc
c0010a97:	68 7b a1 02 c0       	push   0xc002a17b
c0010a9c:	e8 7e 93 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0010aa1:	83 c4 10             	add    esp,0x10
c0010aa4:	50                   	push   eax
c0010aa5:	50                   	push   eax
c0010aa6:	57                   	push   edi
c0010aa7:	53                   	push   ebx
c0010aa8:	e8 9f fe fe ff       	call   c000094c <strcat>
c0010aad:	83 c4 0c             	add    esp,0xc
c0010ab0:	68 96 00 00 00       	push   0x96
c0010ab5:	6a 00                	push   0x0
c0010ab7:	57                   	push   edi
c0010ab8:	e8 93 fc fe ff       	call   c0000750 <memset>
c0010abd:	83 c4 10             	add    esp,0x10
c0010ac0:	83 ec 0c             	sub    esp,0xc
c0010ac3:	56                   	push   esi
c0010ac4:	e8 6f fa ff ff       	call   c0010538 <VgaText::doUpdate()>
c0010ac9:	83 c4 10             	add    esp,0x10
c0010acc:	83 c4 1c             	add    esp,0x1c
c0010acf:	5b                   	pop    ebx
c0010ad0:	5e                   	pop    esi
c0010ad1:	5f                   	pop    edi
c0010ad2:	5d                   	pop    ebp
c0010ad3:	c3                   	ret    

c0010ad4 <VgaText::write(unsigned long long, void*, int*)>:
c0010ad4:	55                   	push   ebp
c0010ad5:	57                   	push   edi
c0010ad6:	56                   	push   esi
c0010ad7:	53                   	push   ebx
c0010ad8:	83 ec 0c             	sub    esp,0xc
c0010adb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010adf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010ae3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010ae7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010aee:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010af1:	39 eb                	cmp    ebx,ebp
c0010af3:	74 13                	je     c0010b08 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010af5:	43                   	inc    ebx
c0010af6:	50                   	push   eax
c0010af7:	50                   	push   eax
c0010af8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010afc:	50                   	push   eax
c0010afd:	56                   	push   esi
c0010afe:	e8 15 fc ff ff       	call   c0010718 <VgaText::putchar(char)>
c0010b03:	83 c4 10             	add    esp,0x10
c0010b06:	eb e9                	jmp    c0010af1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010b08:	83 ec 0c             	sub    esp,0xc
c0010b0b:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010b12:	56                   	push   esi
c0010b13:	e8 20 fa ff ff       	call   c0010538 <VgaText::doUpdate()>
c0010b18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010b1c:	89 38                	mov    DWORD PTR [eax],edi
c0010b1e:	83 c4 1c             	add    esp,0x1c
c0010b21:	31 c0                	xor    eax,eax
c0010b23:	5b                   	pop    ebx
c0010b24:	5e                   	pop    esi
c0010b25:	5f                   	pop    edi
c0010b26:	5d                   	pop    ebp
c0010b27:	c3                   	ret    

c0010b28 <newTerminal(char*)>:
c0010b28:	83 ec 28             	sub    esp,0x28
c0010b2b:	68 c4 02 00 00       	push   0x2c4
c0010b30:	e8 64 ea ff ff       	call   c000f599 <malloc>
c0010b35:	5a                   	pop    edx
c0010b36:	59                   	pop    ecx
c0010b37:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010b3b:	50                   	push   eax
c0010b3c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010b40:	e8 2b fd ff ff       	call   c0010870 <VgaText::VgaText(char const*)>
c0010b45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010b49:	83 c4 2c             	add    esp,0x2c
c0010b4c:	c3                   	ret    
c0010b4d:	90                   	nop

c0010b4e <TSS::TSS()>:
c0010b4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b52:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010b59:	90                   	nop
c0010b5a:	c3                   	ret    
c0010b5b:	90                   	nop

c0010b5c <TSS::setESP(unsigned long)>:
c0010b5c:	55                   	push   ebp
c0010b5d:	89 e5                	mov    ebp,esp
c0010b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010b65:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010b68:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010b6b:	90                   	nop
c0010b6c:	5d                   	pop    ebp
c0010b6d:	c3                   	ret    

c0010b6e <TSS::flush()>:
c0010b6e:	55                   	push   ebp
c0010b6f:	89 e5                	mov    ebp,esp
c0010b71:	83 ec 10             	sub    esp,0x10
c0010b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010b77:	8b 00                	mov    eax,DWORD PTR [eax]
c0010b79:	83 c8 03             	or     eax,0x3
c0010b7c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010b80:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010b84:	66 89 d0             	mov    ax,dx
c0010b87:	0f 00 d8             	ltr    ax
c0010b8a:	90                   	nop
c0010b8b:	c9                   	leave  
c0010b8c:	c3                   	ret    
c0010b8d:	90                   	nop

c0010b8e <TSS::setup(unsigned long, unsigned long)>:
c0010b8e:	55                   	push   ebp
c0010b8f:	89 e5                	mov    ebp,esp
c0010b91:	83 ec 18             	sub    esp,0x18
c0010b94:	83 ec 0c             	sub    esp,0xc
c0010b97:	6a 68                	push   0x68
c0010b99:	e8 fb e9 ff ff       	call   c000f599 <malloc>
c0010b9e:	83 c4 10             	add    esp,0x10
c0010ba1:	89 c2                	mov    edx,eax
c0010ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ba6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010baf:	83 ec 04             	sub    esp,0x4
c0010bb2:	6a 68                	push   0x68
c0010bb4:	6a 00                	push   0x0
c0010bb6:	50                   	push   eax
c0010bb7:	e8 94 fb fe ff       	call   c0000750 <memset>
c0010bbc:	83 c4 10             	add    esp,0x10
c0010bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bc5:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bd1:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bdd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010be0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010be9:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bf2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010bf5:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010bfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010bfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c01:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010c07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c0a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c0d:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010c13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c19:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c25:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010c2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c31:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010c34:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c3d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010c40:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010c43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c49:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010c50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c53:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c56:	0f 20 da             	mov    edx,cr3
c0010c59:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010c5c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010c5f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010c65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010c68:	83 ec 08             	sub    esp,0x8
c0010c6b:	50                   	push   eax
c0010c6c:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c6f:	50                   	push   eax
c0010c70:	e8 1d e1 ff ff       	call   c000ed92 <GDTEntry::setBase(unsigned int)>
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	83 ec 08             	sub    esp,0x8
c0010c7b:	6a 68                	push   0x68
c0010c7d:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010c80:	50                   	push   eax
c0010c81:	e8 28 e1 ff ff       	call   c000edae <GDTEntry::setLimit(unsigned int)>
c0010c86:	83 c4 10             	add    esp,0x10
c0010c89:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010c8d:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c90:	83 e0 0f             	and    eax,0xf
c0010c93:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c96:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010c99:	83 c8 40             	or     eax,0x40
c0010c9c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010c9f:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0010ca4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010caa:	05 78 01 00 00       	add    eax,0x178
c0010caf:	83 ec 04             	sub    esp,0x4
c0010cb2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010cb5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010cb8:	50                   	push   eax
c0010cb9:	e8 24 e1 ff ff       	call   c000ede2 <GDT::addEntry(GDTEntry)>
c0010cbe:	83 c4 10             	add    esp,0x10
c0010cc1:	89 c2                	mov    edx,eax
c0010cc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010cc6:	89 10                	mov    DWORD PTR [eax],edx
c0010cc8:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0010ccd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010cd3:	05 78 01 00 00       	add    eax,0x178
c0010cd8:	83 ec 0c             	sub    esp,0xc
c0010cdb:	50                   	push   eax
c0010cdc:	e8 2b e1 ff ff       	call   c000ee0c <GDT::flush()>
c0010ce1:	83 c4 10             	add    esp,0x10
c0010ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ce7:	8b 00                	mov    eax,DWORD PTR [eax]
c0010ce9:	c9                   	leave  
c0010cea:	c3                   	ret    
c0010ceb:	90                   	nop

c0010cec <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010cec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010cf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010cf7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010cfc:	75 08                	jne    c0010d06 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010cfe:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d04:	eb 38                	jmp    c0010d3e <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010d06:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d0b:	75 17                	jne    c0010d24 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010d0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d12:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d15:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d21:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010d24:	89 c1                	mov    ecx,eax
c0010d26:	83 e1 fd             	and    ecx,0xfffffffd
c0010d29:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010d2f:	74 cd                	je     c0010cfe <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d31:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010d36:	83 e0 ef             	and    eax,0xffffffef
c0010d39:	83 f8 08             	cmp    eax,0x8
c0010d3c:	76 c0                	jbe    c0010cfe <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010d3e:	31 c0                	xor    eax,eax
c0010d40:	c3                   	ret    
c0010d41:	90                   	nop

c0010d42 <ReservedFilename::isAtty()>:
c0010d42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d46:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010d49:	31 c0                	xor    eax,eax
c0010d4b:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010d51:	74 09                	je     c0010d5c <ReservedFilename::isAtty()+0x1a>
c0010d53:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010d59:	0f 94 c0             	sete   al
c0010d5c:	c3                   	ret    
c0010d5d:	90                   	nop

c0010d5e <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010d5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d62:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010d66:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010d69:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010d6d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010d72:	75 08                	jne    c0010d7c <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010d74:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010d7a:	eb 3d                	jmp    c0010db9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010d7c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010d81:	75 17                	jne    c0010d9a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010d83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d88:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010d8b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010d91:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d93:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d97:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0010d9a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d9f:	75 04                	jne    c0010da5 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0010da1:	89 0a                	mov    DWORD PTR [edx],ecx
c0010da3:	eb 14                	jmp    c0010db9 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010da5:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0010daa:	74 c8                	je     c0010d74 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010dac:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010db1:	83 e0 ef             	and    eax,0xffffffef
c0010db4:	83 f8 08             	cmp    eax,0x8
c0010db7:	76 bb                	jbe    c0010d74 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0010db9:	31 c0                	xor    eax,eax
c0010dbb:	c3                   	ret    

c0010dbc <UnixFile::getFileDescriptor()>:
c0010dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dc3:	c3                   	ret    

c0010dc4 <UnixFile::UnixFile(int)>:
c0010dc4:	53                   	push   ebx
c0010dc5:	83 ec 28             	sub    esp,0x28
c0010dc8:	ba 98 a2 02 c0       	mov    edx,0xc002a298
c0010dcd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010dd1:	89 10                	mov    DWORD PTR [eax],edx
c0010dd3:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0010ddb:	0f 8f 8c 01 00 00    	jg     c0010f6d <UnixFile::UnixFile(int)+0x1a9>
c0010de1:	a1 00 c9 02 c0       	mov    eax,ds:0xc002c900
c0010de6:	8d 50 01             	lea    edx,[eax+0x1]
c0010de9:	89 15 00 c9 02 c0    	mov    DWORD PTR ds:0xc002c900,edx
c0010def:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010df3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010df6:	83 ec 08             	sub    esp,0x8
c0010df9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0010dfd:	68 b8 da 02 c0       	push   0xc002dab8
c0010e02:	e8 5f 76 01 00       	call   c0028466 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0010e07:	83 c4 10             	add    esp,0x10
c0010e0a:	a0 b4 da 02 c0       	mov    al,ds:0xc002dab4
c0010e0f:	83 f0 01             	xor    eax,0x1
c0010e12:	84 c0                	test   al,al
c0010e14:	0f 84 54 01 00 00    	je     c0010f6e <UnixFile::UnixFile(int)+0x1aa>
c0010e1a:	c6 05 b4 da 02 c0 01 	mov    BYTE PTR ds:0xc002dab4,0x1
c0010e21:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0010e29:	83 ec 0c             	sub    esp,0xc
c0010e2c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e30:	e8 64 e7 ff ff       	call   c000f599 <malloc>
c0010e35:	83 c4 10             	add    esp,0x10
c0010e38:	89 c3                	mov    ebx,eax
c0010e3a:	83 ec 08             	sub    esp,0x8
c0010e3d:	68 03 ff ff 0f       	push   0xfffff03
c0010e42:	53                   	push   ebx
c0010e43:	e8 2c 01 00 00       	call   c0010f74 <ReservedFilename::ReservedFilename(int)>
c0010e48:	83 c4 10             	add    esp,0x10
c0010e4b:	89 1d ac da 02 c0    	mov    DWORD PTR ds:0xc002daac,ebx
c0010e51:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0010e59:	83 ec 0c             	sub    esp,0xc
c0010e5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e60:	e8 34 e7 ff ff       	call   c000f599 <malloc>
c0010e65:	83 c4 10             	add    esp,0x10
c0010e68:	89 c3                	mov    ebx,eax
c0010e6a:	83 ec 08             	sub    esp,0x8
c0010e6d:	68 01 ff ff 0f       	push   0xfffff01
c0010e72:	53                   	push   ebx
c0010e73:	e8 fc 00 00 00       	call   c0010f74 <ReservedFilename::ReservedFilename(int)>
c0010e78:	83 c4 10             	add    esp,0x10
c0010e7b:	89 1d b0 da 02 c0    	mov    DWORD PTR ds:0xc002dab0,ebx
c0010e81:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0010e89:	83 ec 0c             	sub    esp,0xc
c0010e8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010e90:	e8 04 e7 ff ff       	call   c000f599 <malloc>
c0010e95:	83 c4 10             	add    esp,0x10
c0010e98:	89 c3                	mov    ebx,eax
c0010e9a:	83 ec 08             	sub    esp,0x8
c0010e9d:	68 00 ff ff 0f       	push   0xfffff00
c0010ea2:	53                   	push   ebx
c0010ea3:	e8 cc 00 00 00       	call   c0010f74 <ReservedFilename::ReservedFilename(int)>
c0010ea8:	83 c4 10             	add    esp,0x10
c0010eab:	89 1d a4 da 02 c0    	mov    DWORD PTR ds:0xc002daa4,ebx
c0010eb1:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0010eb9:	83 ec 0c             	sub    esp,0xc
c0010ebc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ec0:	e8 d4 e6 ff ff       	call   c000f599 <malloc>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	89 c3                	mov    ebx,eax
c0010eca:	83 ec 08             	sub    esp,0x8
c0010ecd:	68 02 ff ff 0f       	push   0xfffff02
c0010ed2:	53                   	push   ebx
c0010ed3:	e8 9c 00 00 00       	call   c0010f74 <ReservedFilename::ReservedFilename(int)>
c0010ed8:	83 c4 10             	add    esp,0x10
c0010edb:	89 1d a8 da 02 c0    	mov    DWORD PTR ds:0xc002daa8,ebx
c0010ee1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010ee9:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0010eee:	7f 7e                	jg     c0010f6e <UnixFile::UnixFile(int)+0x1aa>
c0010ef0:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0010ef8:	83 ec 0c             	sub    esp,0xc
c0010efb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010eff:	e8 95 e6 ff ff       	call   c000f599 <malloc>
c0010f04:	83 c4 10             	add    esp,0x10
c0010f07:	89 c3                	mov    ebx,eax
c0010f09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f0d:	05 10 ff ff 0f       	add    eax,0xfffff10
c0010f12:	83 ec 08             	sub    esp,0x8
c0010f15:	50                   	push   eax
c0010f16:	53                   	push   ebx
c0010f17:	e8 58 00 00 00       	call   c0010f74 <ReservedFilename::ReservedFilename(int)>
c0010f1c:	83 c4 10             	add    esp,0x10
c0010f1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f23:	89 1c 85 80 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2580],ebx
c0010f2a:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0010f32:	83 ec 0c             	sub    esp,0xc
c0010f35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010f39:	e8 5b e6 ff ff       	call   c000f599 <malloc>
c0010f3e:	83 c4 10             	add    esp,0x10
c0010f41:	89 c3                	mov    ebx,eax
c0010f43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f47:	05 20 ff ff 0f       	add    eax,0xfffff20
c0010f4c:	83 ec 08             	sub    esp,0x8
c0010f4f:	50                   	push   eax
c0010f50:	53                   	push   ebx
c0010f51:	e8 1e 00 00 00       	call   c0010f74 <ReservedFilename::ReservedFilename(int)>
c0010f56:	83 c4 10             	add    esp,0x10
c0010f59:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010f5d:	89 1c 85 40 da 02 c0 	mov    DWORD PTR [eax*4-0x3ffd25c0],ebx
c0010f64:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0010f68:	e9 7c ff ff ff       	jmp    c0010ee9 <UnixFile::UnixFile(int)+0x125>
c0010f6d:	90                   	nop
c0010f6e:	83 c4 28             	add    esp,0x28
c0010f71:	5b                   	pop    ebx
c0010f72:	c3                   	ret    
c0010f73:	90                   	nop

c0010f74 <ReservedFilename::ReservedFilename(int)>:
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f7b:	83 ec 08             	sub    esp,0x8
c0010f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f82:	50                   	push   eax
c0010f83:	e8 3c fe ff ff       	call   c0010dc4 <UnixFile::UnixFile(int)>
c0010f88:	83 c4 10             	add    esp,0x10
c0010f8b:	ba b4 a2 02 c0       	mov    edx,0xc002a2b4
c0010f90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f94:	89 10                	mov    DWORD PTR [eax],edx
c0010f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f9e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010fa1:	90                   	nop
c0010fa2:	83 c4 0c             	add    esp,0xc
c0010fa5:	c3                   	ret    

c0010fa6 <UnixFile::~UnixFile()>:
c0010fa6:	83 ec 1c             	sub    esp,0x1c
c0010fa9:	ba 98 a2 02 c0       	mov    edx,0xc002a298
c0010fae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb2:	89 10                	mov    DWORD PTR [eax],edx
c0010fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fbb:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0010fc0:	7f 73                	jg     c0011035 <UnixFile::~UnixFile()+0x8f>
c0010fc2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010fca:	83 ec 0c             	sub    esp,0xc
c0010fcd:	68 b8 da 02 c0       	push   0xc002dab8
c0010fd2:	e8 63 75 01 00       	call   c002853a <LinkedList<UnixFile>::getFirstElement()>
c0010fd7:	83 c4 10             	add    esp,0x10
c0010fda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010fde:	83 ec 0c             	sub    esp,0xc
c0010fe1:	68 b8 da 02 c0       	push   0xc002dab8
c0010fe6:	e8 57 75 01 00       	call   c0028542 <LinkedList<UnixFile>::removeFirst()>
c0010feb:	83 c4 10             	add    esp,0x10
c0010fee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ff2:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010ff6:	74 40                	je     c0011038 <UnixFile::~UnixFile()+0x92>
c0010ff8:	83 ec 08             	sub    esp,0x8
c0010ffb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010fff:	68 b8 da 02 c0       	push   0xc002dab8
c0011004:	e8 5d 74 01 00       	call   c0028466 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011009:	83 c4 10             	add    esp,0x10
c001100c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011010:	8d 50 01             	lea    edx,[eax+0x1]
c0011013:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011017:	3d 88 13 00 00       	cmp    eax,0x1388
c001101c:	0f 94 c0             	sete   al
c001101f:	84 c0                	test   al,al
c0011021:	74 a7                	je     c0010fca <UnixFile::~UnixFile()+0x24>
c0011023:	83 ec 0c             	sub    esp,0xc
c0011026:	68 70 a2 02 c0       	push   0xc002a270
c001102b:	e8 ef 8d 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0011030:	83 c4 10             	add    esp,0x10
c0011033:	eb 95                	jmp    c0010fca <UnixFile::~UnixFile()+0x24>
c0011035:	90                   	nop
c0011036:	eb 01                	jmp    c0011039 <UnixFile::~UnixFile()+0x93>
c0011038:	90                   	nop
c0011039:	90                   	nop
c001103a:	83 c4 1c             	add    esp,0x1c
c001103d:	c3                   	ret    

c001103e <UnixFile::~UnixFile()>:
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	83 ec 0c             	sub    esp,0xc
c0011044:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011048:	e8 59 ff ff ff       	call   c0010fa6 <UnixFile::~UnixFile()>
c001104d:	83 c4 10             	add    esp,0x10
c0011050:	83 ec 08             	sub    esp,0x8
c0011053:	6a 0c                	push   0xc
c0011055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011059:	e8 7d 15 00 00       	call   c00125db <operator delete(void*, unsigned long)>
c001105e:	83 c4 10             	add    esp,0x10
c0011061:	83 c4 0c             	add    esp,0xc
c0011064:	c3                   	ret    
c0011065:	90                   	nop

c0011066 <ReservedFilename::~ReservedFilename()>:
c0011066:	83 ec 0c             	sub    esp,0xc
c0011069:	ba b4 a2 02 c0       	mov    edx,0xc002a2b4
c001106e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011072:	89 10                	mov    DWORD PTR [eax],edx
c0011074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011078:	83 ec 0c             	sub    esp,0xc
c001107b:	50                   	push   eax
c001107c:	e8 25 ff ff ff       	call   c0010fa6 <UnixFile::~UnixFile()>
c0011081:	83 c4 10             	add    esp,0x10
c0011084:	90                   	nop
c0011085:	83 c4 0c             	add    esp,0xc
c0011088:	c3                   	ret    
c0011089:	90                   	nop

c001108a <ReservedFilename::~ReservedFilename()>:
c001108a:	83 ec 0c             	sub    esp,0xc
c001108d:	83 ec 0c             	sub    esp,0xc
c0011090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011094:	e8 cd ff ff ff       	call   c0011066 <ReservedFilename::~ReservedFilename()>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	83 ec 08             	sub    esp,0x8
c001109f:	6a 0c                	push   0xc
c00110a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110a5:	e8 31 15 00 00       	call   c00125db <operator delete(void*, unsigned long)>
c00110aa:	83 c4 10             	add    esp,0x10
c00110ad:	83 c4 0c             	add    esp,0xc
c00110b0:	c3                   	ret    

c00110b1 <getFromFileDescriptor(int)>:
c00110b1:	53                   	push   ebx
c00110b2:	83 ec 08             	sub    esp,0x8
c00110b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110b9:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00110bf:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00110c5:	7f 2c                	jg     c00110f3 <getFromFileDescriptor(int)+0x42>
c00110c7:	83 ec 0c             	sub    esp,0xc
c00110ca:	68 b8 da 02 c0       	push   0xc002dab8
c00110cf:	e8 66 74 01 00       	call   c002853a <LinkedList<UnixFile>::getFirstElement()>
c00110d4:	83 c4 10             	add    esp,0x10
c00110d7:	85 c0                	test   eax,eax
c00110d9:	75 04                	jne    c00110df <getFromFileDescriptor(int)+0x2e>
c00110db:	31 c0                	xor    eax,eax
c00110dd:	eb 6e                	jmp    c001114d <getFromFileDescriptor(int)+0x9c>
c00110df:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00110e2:	74 69                	je     c001114d <getFromFileDescriptor(int)+0x9c>
c00110e4:	52                   	push   edx
c00110e5:	52                   	push   edx
c00110e6:	50                   	push   eax
c00110e7:	68 b8 da 02 c0       	push   0xc002dab8
c00110ec:	e8 f3 74 01 00       	call   c00285e4 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00110f1:	eb e1                	jmp    c00110d4 <getFromFileDescriptor(int)+0x23>
c00110f3:	a1 ac da 02 c0       	mov    eax,ds:0xc002daac
c00110f8:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00110fe:	74 4d                	je     c001114d <getFromFileDescriptor(int)+0x9c>
c0011100:	a1 b0 da 02 c0       	mov    eax,ds:0xc002dab0
c0011105:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001110b:	74 40                	je     c001114d <getFromFileDescriptor(int)+0x9c>
c001110d:	a1 a8 da 02 c0       	mov    eax,ds:0xc002daa8
c0011112:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011118:	74 33                	je     c001114d <getFromFileDescriptor(int)+0x9c>
c001111a:	a1 a4 da 02 c0       	mov    eax,ds:0xc002daa4
c001111f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011125:	74 26                	je     c001114d <getFromFileDescriptor(int)+0x9c>
c0011127:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001112d:	83 f8 08             	cmp    eax,0x8
c0011130:	77 09                	ja     c001113b <getFromFileDescriptor(int)+0x8a>
c0011132:	8b 04 85 80 da 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2580]
c0011139:	eb 12                	jmp    c001114d <getFromFileDescriptor(int)+0x9c>
c001113b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011141:	83 fb 08             	cmp    ebx,0x8
c0011144:	77 95                	ja     c00110db <getFromFileDescriptor(int)+0x2a>
c0011146:	8b 04 9d 40 da 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd25c0]
c001114d:	83 c4 08             	add    esp,0x8
c0011150:	5b                   	pop    ebx
c0011151:	c3                   	ret    

c0011152 <__static_initialization_and_destruction_0(int, int)>:
c0011152:	83 ec 0c             	sub    esp,0xc
c0011155:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001115a:	75 34                	jne    c0011190 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001115c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011164:	75 2a                	jne    c0011190 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011166:	83 ec 0c             	sub    esp,0xc
c0011169:	68 b8 da 02 c0       	push   0xc002dab8
c001116e:	e8 b1 72 01 00       	call   c0028424 <LinkedList<UnixFile>::LinkedList()>
c0011173:	83 c4 10             	add    esp,0x10
c0011176:	83 ec 04             	sub    esp,0x4
c0011179:	68 38 c7 02 c0       	push   0xc002c738
c001117e:	68 b8 da 02 c0       	push   0xc002dab8
c0011183:	68 22 84 02 c0       	push   0xc0028422
c0011188:	e8 c8 13 00 00       	call   c0012555 <__cxa_atexit>
c001118d:	83 c4 10             	add    esp,0x10
c0011190:	90                   	nop
c0011191:	83 c4 0c             	add    esp,0xc
c0011194:	c3                   	ret    

c0011195 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011195:	83 ec 0c             	sub    esp,0xc
c0011198:	83 ec 08             	sub    esp,0x8
c001119b:	68 ff ff 00 00       	push   0xffff
c00111a0:	6a 01                	push   0x1
c00111a2:	e8 ab ff ff ff       	call   c0011152 <__static_initialization_and_destruction_0(int, int)>
c00111a7:	83 c4 10             	add    esp,0x10
c00111aa:	83 c4 0c             	add    esp,0xc
c00111ad:	c3                   	ret    

c00111ae <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00111ae:	53                   	push   ebx
c00111af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00111b7:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00111bd:	89 c8                	mov    eax,ecx
c00111bf:	d1 e8                	shr    eax,1
c00111c1:	03 05 08 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c908
c00111c7:	83 e1 01             	and    ecx,0x1
c00111ca:	8a 10                	mov    dl,BYTE PTR [eax]
c00111cc:	75 09                	jne    c00111d7 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00111ce:	83 e2 f0             	and    edx,0xfffffff0
c00111d1:	09 da                	or     edx,ebx
c00111d3:	88 10                	mov    BYTE PTR [eax],dl
c00111d5:	5b                   	pop    ebx
c00111d6:	c3                   	ret    
c00111d7:	c1 e3 04             	shl    ebx,0x4
c00111da:	83 e2 0f             	and    edx,0xf
c00111dd:	09 da                	or     edx,ebx
c00111df:	88 10                	mov    BYTE PTR [eax],dl
c00111e1:	5b                   	pop    ebx
c00111e2:	c3                   	ret    

c00111e3 <Virt::getPageState(unsigned long)>:
c00111e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111e7:	8b 0d 08 c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c908
c00111ed:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00111f3:	89 d0                	mov    eax,edx
c00111f5:	d1 e8                	shr    eax,1
c00111f7:	83 e2 01             	and    edx,0x1
c00111fa:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00111fd:	75 04                	jne    c0011203 <Virt::getPageState(unsigned long)+0x20>
c00111ff:	83 e0 0f             	and    eax,0xf
c0011202:	c3                   	ret    
c0011203:	c0 e8 04             	shr    al,0x4
c0011206:	c3                   	ret    

c0011207 <Virt::allocateKernelVirtualPages(int)>:
c0011207:	55                   	push   ebp
c0011208:	31 ed                	xor    ebp,ebp
c001120a:	57                   	push   edi
c001120b:	56                   	push   esi
c001120c:	53                   	push   ebx
c001120d:	31 db                	xor    ebx,ebx
c001120f:	83 ec 1c             	sub    esp,0x1c
c0011212:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011216:	8b 3d 04 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c904
c001121c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011221:	57                   	push   edi
c0011222:	e8 bc ff ff ff       	call   c00111e3 <Virt::getPageState(unsigned long)>
c0011227:	5a                   	pop    edx
c0011228:	84 c0                	test   al,al
c001122a:	75 3a                	jne    c0011266 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001122c:	85 db                	test   ebx,ebx
c001122e:	75 02                	jne    c0011232 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011230:	89 fd                	mov    ebp,edi
c0011232:	43                   	inc    ebx
c0011233:	39 f3                	cmp    ebx,esi
c0011235:	74 5a                	je     c0011291 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011237:	47                   	inc    edi
c0011238:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001123e:	76 31                	jbe    c0011271 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011240:	c7 05 04 c9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002c904,0xc8000
c001124a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001124f:	75 28                	jne    c0011279 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011251:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011256:	bf 00 80 0c 00       	mov    edi,0xc8000
c001125b:	57                   	push   edi
c001125c:	e8 82 ff ff ff       	call   c00111e3 <Virt::getPageState(unsigned long)>
c0011261:	5a                   	pop    edx
c0011262:	84 c0                	test   al,al
c0011264:	74 c6                	je     c001122c <Virt::allocateKernelVirtualPages(int)+0x25>
c0011266:	31 db                	xor    ebx,ebx
c0011268:	47                   	inc    edi
c0011269:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c001126f:	77 cf                	ja     c0011240 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011271:	89 3d 04 c9 02 c0    	mov    DWORD PTR ds:0xc002c904,edi
c0011277:	eb a8                	jmp    c0011221 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011279:	83 ec 0c             	sub    esp,0xc
c001127c:	68 c8 a2 02 c0       	push   0xc002a2c8
c0011281:	e8 99 8b 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0011286:	8b 3d 04 c9 02 c0    	mov    edi,DWORD PTR ds:0xc002c904
c001128c:	83 c4 10             	add    esp,0x10
c001128f:	eb 90                	jmp    c0011221 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011291:	89 2d 04 c9 02 c0    	mov    DWORD PTR ds:0xc002c904,ebp
c0011297:	4b                   	dec    ebx
c0011298:	74 5f                	je     c00112f9 <Virt::allocateKernelVirtualPages(int)+0xf2>
c001129a:	85 f6                	test   esi,esi
c001129c:	74 3d                	je     c00112db <Virt::allocateKernelVirtualPages(int)+0xd4>
c001129e:	89 e8                	mov    eax,ebp
c00112a0:	31 db                	xor    ebx,ebx
c00112a2:	8d 7e ff             	lea    edi,[esi-0x1]
c00112a5:	eb 14                	jmp    c00112bb <Virt::allocateKernelVirtualPages(int)+0xb4>
c00112a7:	6a 01                	push   0x1
c00112a9:	43                   	inc    ebx
c00112aa:	50                   	push   eax
c00112ab:	e8 fe fe ff ff       	call   c00111ae <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112b0:	58                   	pop    eax
c00112b1:	39 f3                	cmp    ebx,esi
c00112b3:	5a                   	pop    edx
c00112b4:	74 25                	je     c00112db <Virt::allocateKernelVirtualPages(int)+0xd4>
c00112b6:	a1 04 c9 02 c0       	mov    eax,ds:0xc002c904
c00112bb:	8d 50 01             	lea    edx,[eax+0x1]
c00112be:	85 db                	test   ebx,ebx
c00112c0:	89 15 04 c9 02 c0    	mov    DWORD PTR ds:0xc002c904,edx
c00112c6:	74 20                	je     c00112e8 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00112c8:	39 df                	cmp    edi,ebx
c00112ca:	75 db                	jne    c00112a7 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00112cc:	6a 03                	push   0x3
c00112ce:	43                   	inc    ebx
c00112cf:	50                   	push   eax
c00112d0:	e8 d9 fe ff ff       	call   c00111ae <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112d5:	59                   	pop    ecx
c00112d6:	39 f3                	cmp    ebx,esi
c00112d8:	58                   	pop    eax
c00112d9:	75 db                	jne    c00112b6 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112db:	83 c4 1c             	add    esp,0x1c
c00112de:	89 e8                	mov    eax,ebp
c00112e0:	5b                   	pop    ebx
c00112e1:	c1 e0 0c             	shl    eax,0xc
c00112e4:	5e                   	pop    esi
c00112e5:	5f                   	pop    edi
c00112e6:	5d                   	pop    ebp
c00112e7:	c3                   	ret    
c00112e8:	6a 02                	push   0x2
c00112ea:	bb 01 00 00 00       	mov    ebx,0x1
c00112ef:	50                   	push   eax
c00112f0:	e8 b9 fe ff ff       	call   c00111ae <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00112f5:	58                   	pop    eax
c00112f6:	5a                   	pop    edx
c00112f7:	eb bd                	jmp    c00112b6 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00112f9:	6a 04                	push   0x4
c00112fb:	8d 45 01             	lea    eax,[ebp+0x1]
c00112fe:	55                   	push   ebp
c00112ff:	a3 04 c9 02 c0       	mov    ds:0xc002c904,eax
c0011304:	e8 a5 fe ff ff       	call   c00111ae <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011309:	59                   	pop    ecx
c001130a:	89 e8                	mov    eax,ebp
c001130c:	5b                   	pop    ebx
c001130d:	c1 e0 0c             	shl    eax,0xc
c0011310:	83 c4 1c             	add    esp,0x1c
c0011313:	5b                   	pop    ebx
c0011314:	5e                   	pop    esi
c0011315:	5f                   	pop    edi
c0011316:	5d                   	pop    ebp
c0011317:	c3                   	ret    

c0011318 <Virt::freeSwapfilePage(unsigned long)>:
c0011318:	53                   	push   ebx
c0011319:	8b 15 cc da 02 c0    	mov    edx,DWORD PTR ds:0xc002dacc
c001131f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011323:	b8 01 00 00 00       	mov    eax,0x1
c0011328:	89 cb                	mov    ebx,ecx
c001132a:	d3 e0                	shl    eax,cl
c001132c:	c1 eb 05             	shr    ebx,0x5
c001132f:	f7 d0                	not    eax
c0011331:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011334:	5b                   	pop    ebx
c0011335:	c3                   	ret    

c0011336 <Virt::swapIDToSector(unsigned long)>:
c0011336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001133a:	0f af 05 0c c9 02 c0 	imul   eax,DWORD PTR ds:0xc002c90c
c0011341:	03 05 14 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c914
c0011347:	c3                   	ret    

c0011348 <Virt::allocateSwapfilePage()>:
c0011348:	55                   	push   ebp
c0011349:	31 d2                	xor    edx,edx
c001134b:	57                   	push   edi
c001134c:	56                   	push   esi
c001134d:	53                   	push   ebx
c001134e:	83 ec 0c             	sub    esp,0xc
c0011351:	8b 0d 0c c9 02 c0    	mov    ecx,DWORD PTR ds:0xc002c90c
c0011357:	a1 10 c9 02 c0       	mov    eax,ds:0xc002c910
c001135c:	f7 f1                	div    ecx
c001135e:	39 0d 10 c9 02 c0    	cmp    DWORD PTR ds:0xc002c910,ecx
c0011364:	72 2d                	jb     c0011393 <Virt::allocateSwapfilePage()+0x4b>
c0011366:	8b 35 cc da 02 c0    	mov    esi,DWORD PTR ds:0xc002dacc
c001136c:	8b 16                	mov    edx,DWORD PTR [esi]
c001136e:	f6 c2 01             	test   dl,0x1
c0011371:	74 3c                	je     c00113af <Virt::allocateSwapfilePage()+0x67>
c0011373:	31 c9                	xor    ecx,ecx
c0011375:	bf 01 00 00 00       	mov    edi,0x1
c001137a:	eb 12                	jmp    c001138e <Virt::allocateSwapfilePage()+0x46>
c001137c:	89 fd                	mov    ebp,edi
c001137e:	89 ca                	mov    edx,ecx
c0011380:	d3 e5                	shl    ebp,cl
c0011382:	c1 ea 05             	shr    edx,0x5
c0011385:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011388:	8b 13                	mov    edx,DWORD PTR [ebx]
c001138a:	85 ea                	test   edx,ebp
c001138c:	74 2a                	je     c00113b8 <Virt::allocateSwapfilePage()+0x70>
c001138e:	41                   	inc    ecx
c001138f:	39 c8                	cmp    eax,ecx
c0011391:	77 e9                	ja     c001137c <Virt::allocateSwapfilePage()+0x34>
c0011393:	83 ec 0c             	sub    esp,0xc
c0011396:	68 80 a4 02 c0       	push   0xc002a480
c001139b:	e8 7f 8a 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c00113a0:	83 c4 10             	add    esp,0x10
c00113a3:	31 c9                	xor    ecx,ecx
c00113a5:	83 c4 0c             	add    esp,0xc
c00113a8:	89 c8                	mov    eax,ecx
c00113aa:	5b                   	pop    ebx
c00113ab:	5e                   	pop    esi
c00113ac:	5f                   	pop    edi
c00113ad:	5d                   	pop    ebp
c00113ae:	c3                   	ret    
c00113af:	89 f3                	mov    ebx,esi
c00113b1:	bd 01 00 00 00       	mov    ebp,0x1
c00113b6:	31 c9                	xor    ecx,ecx
c00113b8:	09 ea                	or     edx,ebp
c00113ba:	89 c8                	mov    eax,ecx
c00113bc:	89 13                	mov    DWORD PTR [ebx],edx
c00113be:	83 c4 0c             	add    esp,0xc
c00113c1:	5b                   	pop    ebx
c00113c2:	5e                   	pop    esi
c00113c3:	5f                   	pop    edi
c00113c4:	5d                   	pop    ebp
c00113c5:	c3                   	ret    

c00113c6 <Virt::virtualMemorySetup()>:
c00113c6:	53                   	push   ebx
c00113c7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113cc:	6a 0f                	push   0xf
c00113ce:	53                   	push   ebx
c00113cf:	43                   	inc    ebx
c00113d0:	e8 d9 fd ff ff       	call   c00111ae <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113d5:	58                   	pop    eax
c00113d6:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113dc:	5a                   	pop    edx
c00113dd:	75 ed                	jne    c00113cc <Virt::virtualMemorySetup()+0x6>
c00113df:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00113e4:	6a 00                	push   0x0
c00113e6:	53                   	push   ebx
c00113e7:	43                   	inc    ebx
c00113e8:	e8 c1 fd ff ff       	call   c00111ae <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ed:	59                   	pop    ecx
c00113ee:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00113f4:	58                   	pop    eax
c00113f5:	75 ed                	jne    c00113e4 <Virt::virtualMemorySetup()+0x1e>
c00113f7:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00113fc:	6a 0f                	push   0xf
c00113fe:	53                   	push   ebx
c00113ff:	43                   	inc    ebx
c0011400:	e8 a9 fd ff ff       	call   c00111ae <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011405:	58                   	pop    eax
c0011406:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001140c:	5a                   	pop    edx
c001140d:	75 ed                	jne    c00113fc <Virt::virtualMemorySetup()+0x36>
c001140f:	5b                   	pop    ebx
c0011410:	c3                   	ret    

c0011411 <Virt::setupPageSwapping(int)>:
c0011411:	57                   	push   edi
c0011412:	56                   	push   esi
c0011413:	53                   	push   ebx
c0011414:	83 ec 1c             	sub    esp,0x1c
c0011417:	68 14 01 00 00       	push   0x114
c001141c:	e8 78 e1 ff ff       	call   c000f599 <malloc>
c0011421:	83 c4 0c             	add    esp,0xc
c0011424:	89 c6                	mov    esi,eax
c0011426:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c001142c:	68 97 a4 02 c0       	push   0xc002a497
c0011431:	50                   	push   eax
c0011432:	e8 db 17 00 00       	call   c0012c12 <File::File(char const*, Process*)>
c0011437:	89 34 24             	mov    DWORD PTR [esp],esi
c001143a:	e8 af 19 00 00       	call   c0012dee <File::unlink()>
c001143f:	58                   	pop    eax
c0011440:	5a                   	pop    edx
c0011441:	6a 12                	push   0x12
c0011443:	56                   	push   esi
c0011444:	e8 2d 18 00 00       	call   c0012c76 <File::open(FileOpenMode)>
c0011449:	83 c4 10             	add    esp,0x10
c001144c:	85 c0                	test   eax,eax
c001144e:	0f 85 2f 01 00 00    	jne    c0011583 <Virt::setupPageSwapping(int)+0x172>
c0011454:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011458:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011460:	c1 e3 08             	shl    ebx,0x8
c0011463:	83 ec 0c             	sub    esp,0xc
c0011466:	68 00 00 01 00       	push   0x10000
c001146b:	e8 29 e1 ff ff       	call   c000f599 <malloc>
c0011470:	83 c4 0c             	add    esp,0xc
c0011473:	89 c7                	mov    edi,eax
c0011475:	68 00 00 01 00       	push   0x10000
c001147a:	68 ee 00 00 00       	push   0xee
c001147f:	50                   	push   eax
c0011480:	e8 cb f2 fe ff       	call   c0000750 <memset>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	85 db                	test   ebx,ebx
c001148a:	79 03                	jns    c001148f <Virt::setupPageSwapping(int)+0x7e>
c001148c:	83 c3 0f             	add    ebx,0xf
c001148f:	c1 fb 04             	sar    ebx,0x4
c0011492:	4b                   	dec    ebx
c0011493:	83 fb ff             	cmp    ebx,0xffffffff
c0011496:	74 41                	je     c00114d9 <Virt::setupPageSwapping(int)+0xc8>
c0011498:	83 ec 0c             	sub    esp,0xc
c001149b:	8b 06                	mov    eax,DWORD PTR [esi]
c001149d:	8d 54 24 18          	lea    edx,[esp+0x18]
c00114a1:	52                   	push   edx
c00114a2:	57                   	push   edi
c00114a3:	6a 00                	push   0x0
c00114a5:	68 00 00 01 00       	push   0x10000
c00114aa:	56                   	push   esi
c00114ab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00114ae:	83 c4 20             	add    esp,0x20
c00114b1:	85 c0                	test   eax,eax
c00114b3:	0f 85 b5 00 00 00    	jne    c001156e <Virt::setupPageSwapping(int)+0x15d>
c00114b9:	81 7c 24 0c 00 00 01 00 	cmp    DWORD PTR [esp+0xc],0x10000
c00114c1:	74 cf                	je     c0011492 <Virt::setupPageSwapping(int)+0x81>
c00114c3:	83 ec 0c             	sub    esp,0xc
c00114c6:	4b                   	dec    ebx
c00114c7:	68 c9 a4 02 c0       	push   0xc002a4c9
c00114cc:	e8 4e 89 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	83 fb ff             	cmp    ebx,0xffffffff
c00114d7:	75 bf                	jne    c0011498 <Virt::setupPageSwapping(int)+0x87>
c00114d9:	83 ec 0c             	sub    esp,0xc
c00114dc:	56                   	push   esi
c00114dd:	e8 f2 17 00 00       	call   c0012cd4 <File::close()>
c00114e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00114e5:	e8 cf e0 ff ff       	call   c000f5b9 <rfree>
c00114ea:	83 c4 10             	add    esp,0x10
c00114ed:	85 f6                	test   esi,esi
c00114ef:	74 0c                	je     c00114fd <Virt::setupPageSwapping(int)+0xec>
c00114f1:	83 ec 0c             	sub    esp,0xc
c00114f4:	8b 06                	mov    eax,DWORD PTR [esi]
c00114f6:	56                   	push   esi
c00114f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00114fa:	83 c4 10             	add    esp,0x10
c00114fd:	83 ec 08             	sub    esp,0x8
c0011500:	a1 68 df 02 c0       	mov    eax,ds:0xc002df68
c0011505:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001150b:	8b 10                	mov    edx,DWORD PTR [eax]
c001150d:	68 97 a4 02 c0       	push   0xc002a497
c0011512:	50                   	push   eax
c0011513:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011516:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001151a:	c6 05 18 c9 02 c0 43 	mov    BYTE PTR ds:0xc002c918,0x43
c0011521:	c1 e2 0b             	shl    edx,0xb
c0011524:	a3 14 c9 02 c0       	mov    ds:0xc002c914,eax
c0011529:	89 15 10 c9 02 c0    	mov    DWORD PTR ds:0xc002c910,edx
c001152f:	c7 05 0c c9 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c90c,0x8
c0011539:	c1 ea 08             	shr    edx,0x8
c001153c:	89 14 24             	mov    DWORD PTR [esp],edx
c001153f:	e8 55 e0 ff ff       	call   c000f599 <malloc>
c0011544:	83 c4 0c             	add    esp,0xc
c0011547:	89 c1                	mov    ecx,eax
c0011549:	a3 cc da 02 c0       	mov    ds:0xc002dacc,eax
c001154e:	31 d2                	xor    edx,edx
c0011550:	a1 10 c9 02 c0       	mov    eax,ds:0xc002c910
c0011555:	f7 35 0c c9 02 c0    	div    DWORD PTR ds:0xc002c90c
c001155b:	c1 e8 05             	shr    eax,0x5
c001155e:	50                   	push   eax
c001155f:	6a 00                	push   0x0
c0011561:	51                   	push   ecx
c0011562:	e8 e9 f1 fe ff       	call   c0000750 <memset>
c0011567:	83 c4 20             	add    esp,0x20
c001156a:	5b                   	pop    ebx
c001156b:	5e                   	pop    esi
c001156c:	5f                   	pop    edi
c001156d:	c3                   	ret    
c001156e:	83 ec 0c             	sub    esp,0xc
c0011571:	68 c9 a4 02 c0       	push   0xc002a4c9
c0011576:	e8 a4 88 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c001157b:	83 c4 10             	add    esp,0x10
c001157e:	e9 36 ff ff ff       	jmp    c00114b9 <Virt::setupPageSwapping(int)+0xa8>
c0011583:	83 ec 0c             	sub    esp,0xc
c0011586:	68 ae a4 02 c0       	push   0xc002a4ae
c001158b:	e8 8f 88 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0011590:	83 c4 10             	add    esp,0x10
c0011593:	e9 bc fe ff ff       	jmp    c0011454 <Virt::setupPageSwapping(int)+0x43>

c0011598 <VAS::VAS()>:
c0011598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001159c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115a7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b2:	a3 d0 da 02 c0       	mov    ds:0xc002dad0,eax
c00115b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115bb:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c3:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115ca:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00115d1:	90                   	nop
c00115d2:	c3                   	ret    
c00115d3:	90                   	nop

c00115d4 <VAS::VAS(VAS*)>:
c00115d4:	83 ec 0c             	sub    esp,0xc
c00115d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115e6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00115ed:	83 ec 0c             	sub    esp,0xc
c00115f0:	68 e8 a2 02 c0       	push   0xc002a2e8
c00115f5:	e8 25 88 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c00115fa:	83 c4 10             	add    esp,0x10
c00115fd:	90                   	nop
c00115fe:	83 c4 0c             	add    esp,0xc
c0011601:	c3                   	ret    

c0011602 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011602:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011606:	89 c2                	mov    edx,eax
c0011608:	c1 e8 0a             	shr    eax,0xa
c001160b:	c1 ea 16             	shr    edx,0x16
c001160e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011613:	19 c9                	sbb    ecx,ecx
c0011615:	c1 e2 0c             	shl    edx,0xc
c0011618:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001161e:	25 fc 0f 00 00       	and    eax,0xffc
c0011623:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001162a:	01 d0                	add    eax,edx
c001162c:	c3                   	ret    
c001162d:	90                   	nop

c001162e <VAS::getPageTableEntry(unsigned long)>:
c001162e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011632:	89 ca                	mov    edx,ecx
c0011634:	c1 e9 0a             	shr    ecx,0xa
c0011637:	c1 ea 16             	shr    edx,0x16
c001163a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011640:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011646:	c1 e0 0c             	shl    eax,0xc
c0011649:	8d 04 08             	lea    eax,[eax+ecx*1]
c001164c:	c3                   	ret    

c001164d <Virt::freeKernelVirtualPages(unsigned long)>:
c001164d:	57                   	push   edi
c001164e:	56                   	push   esi
c001164f:	be 01 00 00 00       	mov    esi,0x1
c0011654:	53                   	push   ebx
c0011655:	83 ec 10             	sub    esp,0x10
c0011658:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001165c:	c1 eb 0c             	shr    ebx,0xc
c001165f:	eb 3f                	jmp    c00116a0 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011661:	83 ec 08             	sub    esp,0x8
c0011664:	57                   	push   edi
c0011665:	ff 35 d0 da 02 c0    	push   DWORD PTR ds:0xc002dad0
c001166b:	e8 be ff ff ff       	call   c001162e <VAS::getPageTableEntry(unsigned long)>
c0011670:	83 c4 10             	add    esp,0x10
c0011673:	8b 00                	mov    eax,DWORD PTR [eax]
c0011675:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011679:	f6 c4 04             	test   ah,0x4
c001167c:	75 5f                	jne    c00116dd <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c001167e:	80 fa 04             	cmp    dl,0x4
c0011681:	74 78                	je     c00116fb <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011683:	80 fa 02             	cmp    dl,0x2
c0011686:	0f 84 88 00 00 00    	je     c0011714 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c001168c:	80 fa 03             	cmp    dl,0x3
c001168f:	0f 84 ad 00 00 00    	je     c0011742 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011695:	fe ca                	dec    dl
c0011697:	0f 84 92 00 00 00    	je     c001172f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001169d:	43                   	inc    ebx
c001169e:	31 f6                	xor    esi,esi
c00116a0:	53                   	push   ebx
c00116a1:	89 df                	mov    edi,ebx
c00116a3:	e8 3b fb ff ff       	call   c00111e3 <Virt::getPageState(unsigned long)>
c00116a8:	c1 e7 0c             	shl    edi,0xc
c00116ab:	59                   	pop    ecx
c00116ac:	84 c0                	test   al,al
c00116ae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116b2:	75 ad                	jne    c0011661 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116b4:	83 ec 0c             	sub    esp,0xc
c00116b7:	68 cf a4 02 c0       	push   0xc002a4cf
c00116bc:	e8 5e 87 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c00116c1:	58                   	pop    eax
c00116c2:	5a                   	pop    edx
c00116c3:	57                   	push   edi
c00116c4:	ff 35 d0 da 02 c0    	push   DWORD PTR ds:0xc002dad0
c00116ca:	e8 5f ff ff ff       	call   c001162e <VAS::getPageTableEntry(unsigned long)>
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00116d4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116d8:	f6 c4 04             	test   ah,0x4
c00116db:	74 c0                	je     c001169d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116dd:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116e6:	83 ec 0c             	sub    esp,0xc
c00116e9:	50                   	push   eax
c00116ea:	e8 11 e2 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116f6:	80 fa 04             	cmp    dl,0x4
c00116f9:	75 88                	jne    c0011683 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00116fb:	89 f0                	mov    eax,esi
c00116fd:	84 c0                	test   al,al
c00116ff:	75 47                	jne    c0011748 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011701:	c7 44 24 20 0c a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a30c
c0011709:	83 c4 10             	add    esp,0x10
c001170c:	5b                   	pop    ebx
c001170d:	5e                   	pop    esi
c001170e:	5f                   	pop    edi
c001170f:	e9 0b 87 00 00       	jmp    c0019e1f <Krnl::panic(char const*)>
c0011714:	89 f0                	mov    eax,esi
c0011716:	84 c0                	test   al,al
c0011718:	75 15                	jne    c001172f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c001171a:	83 ec 0c             	sub    esp,0xc
c001171d:	68 eb a4 02 c0       	push   0xc002a4eb
c0011722:	e8 f8 86 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0011727:	83 c4 10             	add    esp,0x10
c001172a:	e9 6e ff ff ff       	jmp    c001169d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001172f:	83 ec 08             	sub    esp,0x8
c0011732:	6a 00                	push   0x0
c0011734:	53                   	push   ebx
c0011735:	e8 74 fa ff ff       	call   c00111ae <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001173a:	83 c4 10             	add    esp,0x10
c001173d:	e9 5b ff ff ff       	jmp    c001169d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011742:	89 f0                	mov    eax,esi
c0011744:	84 c0                	test   al,al
c0011746:	75 15                	jne    c001175d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011748:	83 ec 08             	sub    esp,0x8
c001174b:	6a 00                	push   0x0
c001174d:	53                   	push   ebx
c001174e:	e8 5b fa ff ff       	call   c00111ae <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011753:	83 c4 10             	add    esp,0x10
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	5b                   	pop    ebx
c001175a:	5e                   	pop    esi
c001175b:	5f                   	pop    edi
c001175c:	c3                   	ret    
c001175d:	c7 44 24 20 07 a5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a507
c0011765:	83 c4 10             	add    esp,0x10
c0011768:	5b                   	pop    ebx
c0011769:	5e                   	pop    esi
c001176a:	5f                   	pop    edi
c001176b:	e9 af 86 00 00       	jmp    c0019e1f <Krnl::panic(char const*)>

c0011770 <VAS::freeAllocatedPages(unsigned long)>:
c0011770:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011774:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011778:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001177c:	74 09                	je     c0011787 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001177e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011782:	e9 c6 fe ff ff       	jmp    c001164d <Virt::freeKernelVirtualPages(unsigned long)>
c0011787:	c7 44 24 04 30 a3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a330
c001178f:	e9 1f 0f 00 00       	jmp    c00126b3 <Dbg::kprintf(char const*, ...)>

c0011794 <VAS::virtualToPhysical(unsigned long)>:
c0011794:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011798:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001179c:	e8 8d fe ff ff       	call   c001162e <VAS::getPageTableEntry(unsigned long)>
c00117a1:	5a                   	pop    edx
c00117a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00117a4:	59                   	pop    ecx
c00117a5:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117aa:	c3                   	ret    
c00117ab:	90                   	nop

c00117ac <VAS::reflagRange(unsigned long, int, int, int)>:
c00117ac:	55                   	push   ebp
c00117ad:	57                   	push   edi
c00117ae:	56                   	push   esi
c00117af:	53                   	push   ebx
c00117b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00117b4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00117b8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00117bc:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00117c0:	85 db                	test   ebx,ebx
c00117c2:	7e 22                	jle    c00117e6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c00117c4:	c1 e3 0c             	shl    ebx,0xc
c00117c7:	01 f3                	add    ebx,esi
c00117c9:	56                   	push   esi
c00117ca:	81 c6 00 10 00 00    	add    esi,0x1000
c00117d0:	55                   	push   ebp
c00117d1:	e8 58 fe ff ff       	call   c001162e <VAS::getPageTableEntry(unsigned long)>
c00117d6:	5a                   	pop    edx
c00117d7:	59                   	pop    ecx
c00117d8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00117da:	21 f9                	and    ecx,edi
c00117dc:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00117e0:	39 f3                	cmp    ebx,esi
c00117e2:	89 08                	mov    DWORD PTR [eax],ecx
c00117e4:	75 e3                	jne    c00117c9 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00117e6:	5b                   	pop    ebx
c00117e7:	5e                   	pop    esi
c00117e8:	5f                   	pop    edi
c00117e9:	5d                   	pop    ebp
c00117ea:	c3                   	ret    
c00117eb:	90                   	nop

c00117ec <VAS::setToWriteCombining(unsigned long, int)>:
c00117ec:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00117f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00117f7:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00117fe:	75 01                	jne    c0011801 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011800:	c3                   	ret    
c0011801:	68 80 00 00 00       	push   0x80
c0011806:	6a ff                	push   0xffffffff
c0011808:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001180c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011814:	e8 93 ff ff ff       	call   c00117ac <VAS::reflagRange(unsigned long, int, int, int)>
c0011819:	83 c4 14             	add    esp,0x14
c001181c:	c3                   	ret    
c001181d:	90                   	nop

c001181e <VAS::mapOtherVASIn(bool, VAS*)>:
c001181e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011823:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011827:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001182a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001182e:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011831:	19 c0                	sbb    eax,eax
c0011833:	83 ca 03             	or     edx,0x3
c0011836:	83 e0 fc             	and    eax,0xfffffffc
c0011839:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011840:	0f 20 d8             	mov    eax,cr3
c0011843:	0f 22 d8             	mov    cr3,eax
c0011846:	c3                   	ret    
c0011847:	90                   	nop

c0011848 <VAS::~VAS()>:
c0011848:	83 ec 2c             	sub    esp,0x2c
c001184b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011853:	fa                   	cli    
c0011854:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0011859:	40                   	inc    eax
c001185a:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001185f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011864:	8b 00                	mov    eax,DWORD PTR [eax]
c0011866:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011869:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001186f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011873:	6a 01                	push   0x1
c0011875:	50                   	push   eax
c0011876:	e8 a3 ff ff ff       	call   c001181e <VAS::mapOtherVASIn(bool, VAS*)>
c001187b:	83 c4 0c             	add    esp,0xc
c001187e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011886:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001188e:	0f 8f d4 00 00 00    	jg     c0011968 <VAS::~VAS()+0x120>
c0011894:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011898:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001189b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001189f:	c1 e2 02             	shl    edx,0x2
c00118a2:	01 d0                	add    eax,edx
c00118a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00118aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ae:	83 e0 01             	and    eax,0x1
c00118b1:	0f 84 a8 00 00 00    	je     c001195f <VAS::~VAS()+0x117>
c00118b7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00118bf:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c00118c7:	7f 72                	jg     c001193b <VAS::~VAS()+0xf3>
c00118c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00118cd:	c1 e0 0a             	shl    eax,0xa
c00118d0:	89 c2                	mov    edx,eax
c00118d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00118d6:	01 d0                	add    eax,edx
c00118d8:	c1 e0 0c             	shl    eax,0xc
c00118db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00118df:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00118e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00118e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00118e9:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00118ef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00118f3:	6a 01                	push   0x1
c00118f5:	50                   	push   eax
c00118f6:	e8 07 fd ff ff       	call   c0011602 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00118fb:	83 c4 0c             	add    esp,0xc
c00118fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011902:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011906:	8b 00                	mov    eax,DWORD PTR [eax]
c0011908:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001190c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011910:	25 01 04 00 00       	and    eax,0x401
c0011915:	3d 01 04 00 00       	cmp    eax,0x401
c001191a:	75 19                	jne    c0011935 <VAS::~VAS()+0xed>
c001191c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011920:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011925:	83 ec 0c             	sub    esp,0xc
c0011928:	50                   	push   eax
c0011929:	e8 d2 df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001192e:	83 c4 10             	add    esp,0x10
c0011931:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011935:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011939:	eb 84                	jmp    c00118bf <VAS::~VAS()+0x77>
c001193b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001193f:	25 00 04 00 00       	and    eax,0x400
c0011944:	74 19                	je     c001195f <VAS::~VAS()+0x117>
c0011946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001194a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001194f:	83 ec 0c             	sub    esp,0xc
c0011952:	50                   	push   eax
c0011953:	e8 a8 df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c0011958:	83 c4 10             	add    esp,0x10
c001195b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001195f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011963:	e9 1e ff ff ff       	jmp    c0011886 <VAS::~VAS()+0x3e>
c0011968:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001196c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001196f:	83 ec 0c             	sub    esp,0xc
c0011972:	50                   	push   eax
c0011973:	e8 d5 fc ff ff       	call   c001164d <Virt::freeKernelVirtualPages(unsigned long)>
c0011978:	83 c4 10             	add    esp,0x10
c001197b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001197f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011982:	83 ec 0c             	sub    esp,0xc
c0011985:	50                   	push   eax
c0011986:	e8 75 df ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001198b:	83 c4 10             	add    esp,0x10
c001198e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011992:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011996:	c1 e0 02             	shl    eax,0x2
c0011999:	83 ec 08             	sub    esp,0x8
c001199c:	50                   	push   eax
c001199d:	68 54 a3 02 c0       	push   0xc002a354
c00119a2:	e8 0c 0d 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00119a7:	83 c4 10             	add    esp,0x10
c00119aa:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c00119af:	48                   	dec    eax
c00119b0:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c00119b5:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c00119ba:	85 c0                	test   eax,eax
c00119bc:	75 01                	jne    c00119bf <VAS::~VAS()+0x177>
c00119be:	fb                   	sti    
c00119bf:	90                   	nop
c00119c0:	83 c4 2c             	add    esp,0x2c
c00119c3:	c3                   	ret    

c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>:
c00119c4:	55                   	push   ebp
c00119c5:	57                   	push   edi
c00119c6:	56                   	push   esi
c00119c7:	53                   	push   ebx
c00119c8:	83 ec 1c             	sub    esp,0x1c
c00119cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00119cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00119d3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00119d9:	77 08                	ja     c00119e3 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00119db:	0f 20 d8             	mov    eax,cr3
c00119de:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00119e1:	75 47                	jne    c0011a2a <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00119e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119e7:	09 d8                	or     eax,ebx
c00119e9:	a9 ff 0f 00 00       	test   eax,0xfff
c00119ee:	75 57                	jne    c0011a47 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00119f0:	89 de                	mov    esi,ebx
c00119f2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00119f5:	c1 ee 16             	shr    esi,0x16
c00119f8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00119ff:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011a03:	74 54                	je     c0011a59 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011a05:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a09:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011a0f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011a13:	c1 e6 0c             	shl    esi,0xc
c0011a16:	c1 eb 0a             	shr    ebx,0xa
c0011a19:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011a1f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011a22:	83 c4 1c             	add    esp,0x1c
c0011a25:	5b                   	pop    ebx
c0011a26:	5e                   	pop    esi
c0011a27:	5f                   	pop    edi
c0011a28:	5d                   	pop    ebp
c0011a29:	c3                   	ret    
c0011a2a:	83 ec 0c             	sub    esp,0xc
c0011a2d:	68 74 a3 02 c0       	push   0xc002a374
c0011a32:	e8 7c 0c 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0011a37:	83 c4 10             	add    esp,0x10
c0011a3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a3e:	09 d8                	or     eax,ebx
c0011a40:	a9 ff 0f 00 00       	test   eax,0xfff
c0011a45:	74 a9                	je     c00119f0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a47:	83 ec 0c             	sub    esp,0xc
c0011a4a:	68 dc a3 02 c0       	push   0xc002a3dc
c0011a4f:	e8 cb 83 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0011a54:	83 c4 10             	add    esp,0x10
c0011a57:	eb 97                	jmp    c00119f0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011a59:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011a5d:	e8 0f df ff ff       	call   c000f971 <Phys::allocatePage()>
c0011a62:	83 ec 0c             	sub    esp,0xc
c0011a65:	89 c5                	mov    ebp,eax
c0011a67:	8b 0d d0 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002dad0
c0011a6d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011a71:	6a 01                	push   0x1
c0011a73:	e8 8f f7 ff ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c0011a78:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a7f:	6a 01                	push   0x1
c0011a81:	50                   	push   eax
c0011a82:	55                   	push   ebp
c0011a83:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a89:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a8d:	51                   	push   ecx
c0011a8e:	e8 27 02 00 00       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a93:	83 c4 1c             	add    esp,0x1c
c0011a96:	68 00 10 00 00       	push   0x1000
c0011a9b:	6a 00                	push   0x0
c0011a9d:	50                   	push   eax
c0011a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011aa2:	e8 a9 ec fe ff       	call   c0000750 <memset>
c0011aa7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011aab:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011aae:	e8 9a fb ff ff       	call   c001164d <Virt::freeKernelVirtualPages(unsigned long)>
c0011ab3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ab7:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011aba:	83 c4 10             	add    esp,0x10
c0011abd:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011ac0:	e9 40 ff ff ff       	jmp    c0011a05 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011ac5:	90                   	nop

c0011ac6 <VAS::allocatePages(int, int)>:
c0011ac6:	55                   	push   ebp
c0011ac7:	57                   	push   edi
c0011ac8:	56                   	push   esi
c0011ac9:	53                   	push   ebx
c0011aca:	83 ec 1c             	sub    esp,0x1c
c0011acd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ad1:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0011ad6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011adc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011ae2:	83 e0 01             	and    eax,0x1
c0011ae5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011ae9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011aed:	0f 85 cc 00 00 00    	jne    c0011bbf <VAS::allocatePages(int, int)+0xf9>
c0011af3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011afa:	85 c0                	test   eax,eax
c0011afc:	0f 84 a1 00 00 00    	je     c0011ba3 <VAS::allocatePages(int, int)+0xdd>
c0011b02:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011b06:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011b0a:	c1 e6 0c             	shl    esi,0xc
c0011b0d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011b11:	85 c0                	test   eax,eax
c0011b13:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011b16:	7e 33                	jle    c0011b4b <VAS::allocatePages(int, int)+0x85>
c0011b18:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011b1c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b20:	81 cd 00 04 00 00    	or     ebp,0x400
c0011b26:	e8 46 de ff ff       	call   c000f971 <Phys::allocatePage()>
c0011b2b:	55                   	push   ebp
c0011b2c:	53                   	push   ebx
c0011b2d:	50                   	push   eax
c0011b2e:	57                   	push   edi
c0011b2f:	e8 90 fe ff ff       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b34:	83 c4 10             	add    esp,0x10
c0011b37:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b3c:	74 03                	je     c0011b41 <VAS::allocatePages(int, int)+0x7b>
c0011b3e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b41:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b47:	39 de                	cmp    esi,ebx
c0011b49:	75 db                	jne    c0011b26 <VAS::allocatePages(int, int)+0x60>
c0011b4b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011b50:	75 12                	jne    c0011b64 <VAS::allocatePages(int, int)+0x9e>
c0011b52:	0f 20 d8             	mov    eax,cr3
c0011b55:	0f 22 d8             	mov    cr3,eax
c0011b58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b5c:	83 c4 1c             	add    esp,0x1c
c0011b5f:	5b                   	pop    ebx
c0011b60:	5e                   	pop    esi
c0011b61:	5f                   	pop    edi
c0011b62:	5d                   	pop    ebp
c0011b63:	c3                   	ret    
c0011b64:	c1 ee 0a             	shr    esi,0xa
c0011b67:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b6b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011b71:	c1 eb 0a             	shr    ebx,0xa
c0011b74:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011b7a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011b80:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b86:	39 c3                	cmp    ebx,eax
c0011b88:	77 ce                	ja     c0011b58 <VAS::allocatePages(int, int)+0x92>
c0011b8a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b8d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b93:	39 d8                	cmp    eax,ebx
c0011b95:	73 f3                	jae    c0011b8a <VAS::allocatePages(int, int)+0xc4>
c0011b97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b9b:	83 c4 1c             	add    esp,0x1c
c0011b9e:	5b                   	pop    ebx
c0011b9f:	5e                   	pop    esi
c0011ba0:	5f                   	pop    edi
c0011ba1:	5d                   	pop    ebp
c0011ba2:	c3                   	ret    
c0011ba3:	83 ec 0c             	sub    esp,0xc
c0011ba6:	68 00 a4 02 c0       	push   0xc002a400
c0011bab:	e8 6f 82 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0011bb0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011bb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bb7:	83 c4 10             	add    esp,0x10
c0011bba:	e9 43 ff ff ff       	jmp    c0011b02 <VAS::allocatePages(int, int)+0x3c>
c0011bbf:	83 ec 0c             	sub    esp,0xc
c0011bc2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011bc6:	e8 3c f6 ff ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c0011bcb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011bcf:	83 c4 10             	add    esp,0x10
c0011bd2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011bd7:	0f 87 9b 00 00 00    	ja     c0011c78 <VAS::allocatePages(int, int)+0x1b2>
c0011bdd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011be1:	85 d2                	test   edx,edx
c0011be3:	7e 3c                	jle    c0011c21 <VAS::allocatePages(int, int)+0x15b>
c0011be5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011be9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011bed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011bf1:	c1 e5 0c             	shl    ebp,0xc
c0011bf4:	81 ce 00 04 00 00    	or     esi,0x400
c0011bfa:	01 dd                	add    ebp,ebx
c0011bfc:	e8 70 dd ff ff       	call   c000f971 <Phys::allocatePage()>
c0011c01:	56                   	push   esi
c0011c02:	53                   	push   ebx
c0011c03:	50                   	push   eax
c0011c04:	57                   	push   edi
c0011c05:	e8 ba fd ff ff       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c0a:	83 c4 10             	add    esp,0x10
c0011c0d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c12:	74 03                	je     c0011c17 <VAS::allocatePages(int, int)+0x151>
c0011c14:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c17:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c1d:	39 dd                	cmp    ebp,ebx
c0011c1f:	75 db                	jne    c0011bfc <VAS::allocatePages(int, int)+0x136>
c0011c21:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c26:	0f 84 26 ff ff ff    	je     c0011b52 <VAS::allocatePages(int, int)+0x8c>
c0011c2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011c30:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011c34:	89 d3                	mov    ebx,edx
c0011c36:	c1 e0 0c             	shl    eax,0xc
c0011c39:	c1 eb 0a             	shr    ebx,0xa
c0011c3c:	01 d0                	add    eax,edx
c0011c3e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011c44:	c1 e8 0a             	shr    eax,0xa
c0011c47:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011c4d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c52:	2d 00 00 40 00       	sub    eax,0x400000
c0011c57:	39 c3                	cmp    ebx,eax
c0011c59:	0f 87 f9 fe ff ff    	ja     c0011b58 <VAS::allocatePages(int, int)+0x92>
c0011c5f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c62:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011c68:	39 d8                	cmp    eax,ebx
c0011c6a:	73 f3                	jae    c0011c5f <VAS::allocatePages(int, int)+0x199>
c0011c6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c70:	83 c4 1c             	add    esp,0x1c
c0011c73:	5b                   	pop    ebx
c0011c74:	5e                   	pop    esi
c0011c75:	5f                   	pop    edi
c0011c76:	5d                   	pop    ebp
c0011c77:	c3                   	ret    
c0011c78:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0011c7d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011c83:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c8a:	0f 84 4d ff ff ff    	je     c0011bdd <VAS::allocatePages(int, int)+0x117>
c0011c90:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c98:	e9 40 ff ff ff       	jmp    c0011bdd <VAS::allocatePages(int, int)+0x117>
c0011c9d:	90                   	nop

c0011c9e <VAS::setCPUSpecific(unsigned long)>:
c0011c9e:	83 ec 0c             	sub    esp,0xc
c0011ca1:	6a 05                	push   0x5
c0011ca3:	68 00 00 40 c2       	push   0xc2400000
c0011ca8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cb0:	e8 0f fd ff ff       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011cb5:	83 c4 1c             	add    esp,0x1c
c0011cb8:	c3                   	ret    
c0011cb9:	90                   	nop

c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011cba:	55                   	push   ebp
c0011cbb:	57                   	push   edi
c0011cbc:	56                   	push   esi
c0011cbd:	53                   	push   ebx
c0011cbe:	83 ec 1c             	sub    esp,0x1c
c0011cc1:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0011cc6:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011cca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cd0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011cd4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011cda:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011cde:	83 e0 01             	and    eax,0x1
c0011ce1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011ce5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ce9:	85 c0                	test   eax,eax
c0011ceb:	7e 39                	jle    c0011d26 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011ced:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cf1:	89 f3                	mov    ebx,esi
c0011cf3:	c1 e0 0c             	shl    eax,0xc
c0011cf6:	01 f0                	add    eax,esi
c0011cf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011cfc:	55                   	push   ebp
c0011cfd:	53                   	push   ebx
c0011cfe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d02:	29 f0                	sub    eax,esi
c0011d04:	01 d8                	add    eax,ebx
c0011d06:	50                   	push   eax
c0011d07:	57                   	push   edi
c0011d08:	e8 b7 fc ff ff       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d0d:	83 c4 10             	add    esp,0x10
c0011d10:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d15:	74 03                	je     c0011d1a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011d17:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d1a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d20:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011d24:	75 d6                	jne    c0011cfc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0011d26:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011d2b:	75 10                	jne    c0011d3d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0011d2d:	0f 20 d8             	mov    eax,cr3
c0011d30:	0f 22 d8             	mov    cr3,eax
c0011d33:	83 c4 1c             	add    esp,0x1c
c0011d36:	89 f0                	mov    eax,esi
c0011d38:	5b                   	pop    ebx
c0011d39:	5e                   	pop    esi
c0011d3a:	5f                   	pop    edi
c0011d3b:	5d                   	pop    ebp
c0011d3c:	c3                   	ret    
c0011d3d:	89 f3                	mov    ebx,esi
c0011d3f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011d43:	c1 eb 0a             	shr    ebx,0xa
c0011d46:	c1 e0 0c             	shl    eax,0xc
c0011d49:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011d4f:	01 f0                	add    eax,esi
c0011d51:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011d57:	c1 e8 0a             	shr    eax,0xa
c0011d5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011d5f:	2d 00 00 40 00       	sub    eax,0x400000
c0011d64:	39 c3                	cmp    ebx,eax
c0011d66:	77 cb                	ja     c0011d33 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0011d68:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011d6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011d71:	39 d8                	cmp    eax,ebx
c0011d73:	73 f3                	jae    c0011d68 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0011d75:	83 c4 1c             	add    esp,0x1c
c0011d78:	89 f0                	mov    eax,esi
c0011d7a:	5b                   	pop    ebx
c0011d7b:	5e                   	pop    esi
c0011d7c:	5f                   	pop    edi
c0011d7d:	5d                   	pop    ebp
c0011d7e:	c3                   	ret    
c0011d7f:	90                   	nop

c0011d80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0011d80:	55                   	push   ebp
c0011d81:	57                   	push   edi
c0011d82:	56                   	push   esi
c0011d83:	53                   	push   ebx
c0011d84:	83 ec 1c             	sub    esp,0x1c
c0011d87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d8b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011d8f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0011d93:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011d97:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d9c:	75 4a                	jne    c0011de8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0011d9e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011da2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011da5:	c1 eb 16             	shr    ebx,0x16
c0011da8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0011daf:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0011db3:	74 4d                	je     c0011e02 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0011db5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011db9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0011dbd:	c1 e8 0a             	shr    eax,0xa
c0011dc0:	80 fa 01             	cmp    dl,0x1
c0011dc3:	19 d2                	sbb    edx,edx
c0011dc5:	c1 e3 0c             	shl    ebx,0xc
c0011dc8:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0011dcc:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0011dd2:	25 fc 0f 00 00       	and    eax,0xffc
c0011dd7:	01 d8                	add    eax,ebx
c0011dd9:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0011de0:	83 c4 1c             	add    esp,0x1c
c0011de3:	5b                   	pop    ebx
c0011de4:	5e                   	pop    esi
c0011de5:	5f                   	pop    edi
c0011de6:	5d                   	pop    ebp
c0011de7:	c3                   	ret    
c0011de8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011dec:	83 ec 0c             	sub    esp,0xc
c0011def:	68 2c a4 02 c0       	push   0xc002a42c
c0011df4:	e8 26 80 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0011df9:	83 c4 10             	add    esp,0x10
c0011dfc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011e00:	eb 9c                	jmp    c0011d9e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0011e02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e06:	e8 66 db ff ff       	call   c000f971 <Phys::allocatePage()>
c0011e0b:	83 ec 0c             	sub    esp,0xc
c0011e0e:	89 c5                	mov    ebp,eax
c0011e10:	8b 0d d0 da 02 c0    	mov    ecx,DWORD PTR ds:0xc002dad0
c0011e16:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011e1a:	6a 01                	push   0x1
c0011e1c:	e8 e6 f3 ff ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c0011e21:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011e28:	6a 01                	push   0x1
c0011e2a:	50                   	push   eax
c0011e2b:	55                   	push   ebp
c0011e2c:	81 cd 07 04 00 00    	or     ebp,0x407
c0011e32:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011e36:	51                   	push   ecx
c0011e37:	e8 7e fe ff ff       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011e3c:	83 c4 1c             	add    esp,0x1c
c0011e3f:	68 00 10 00 00       	push   0x1000
c0011e44:	6a 00                	push   0x0
c0011e46:	50                   	push   eax
c0011e47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e4b:	e8 00 e9 fe ff       	call   c0000750 <memset>
c0011e50:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011e54:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011e57:	e8 f1 f7 ff ff       	call   c001164d <Virt::freeKernelVirtualPages(unsigned long)>
c0011e5c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011e5f:	83 c4 10             	add    esp,0x10
c0011e62:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0011e65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e69:	e9 47 ff ff ff       	jmp    c0011db5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0011e6e <VAS::VAS(bool)>:
c0011e6e:	53                   	push   ebx
c0011e6f:	83 ec 28             	sub    esp,0x28
c0011e72:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e76:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0011e7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e7e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e89:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e90:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e94:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0011e98:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011e9b:	e8 d1 da ff ff       	call   c000f971 <Phys::allocatePage()>
c0011ea0:	89 c2                	mov    edx,eax
c0011ea2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ea6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0011ea9:	8b 1d d0 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dad0
c0011eaf:	83 ec 0c             	sub    esp,0xc
c0011eb2:	6a 01                	push   0x1
c0011eb4:	e8 4e f3 ff ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c0011eb9:	83 c4 10             	add    esp,0x10
c0011ebc:	89 c2                	mov    edx,eax
c0011ebe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ec2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011ec5:	83 ec 0c             	sub    esp,0xc
c0011ec8:	6a 03                	push   0x3
c0011eca:	6a 01                	push   0x1
c0011ecc:	52                   	push   edx
c0011ecd:	50                   	push   eax
c0011ece:	53                   	push   ebx
c0011ecf:	e8 e6 fd ff ff       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011ed4:	83 c4 20             	add    esp,0x20
c0011ed7:	89 c2                	mov    edx,eax
c0011ed9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011edd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011ee0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011ee8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0011ef0:	7f 1c                	jg     c0011f0e <VAS::VAS(bool)+0xa0>
c0011ef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ef6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011ef9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011efd:	c1 e2 02             	shl    edx,0x2
c0011f00:	01 d0                	add    eax,edx
c0011f02:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f08:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011f0c:	eb da                	jmp    c0011ee8 <VAS::VAS(bool)+0x7a>
c0011f0e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0011f16:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0011f1e:	7f 7a                	jg     c0011f9a <VAS::VAS(bool)+0x12c>
c0011f20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f24:	2d 00 02 00 00       	sub    eax,0x200
c0011f29:	c1 e0 0c             	shl    eax,0xc
c0011f2c:	83 c8 03             	or     eax,0x3
c0011f2f:	89 c2                	mov    edx,eax
c0011f31:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0011f36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f3c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011f42:	83 e0 10             	and    eax,0x10
c0011f45:	84 c0                	test   al,al
c0011f47:	74 07                	je     c0011f50 <VAS::VAS(bool)+0xe2>
c0011f49:	b8 00 01 00 00       	mov    eax,0x100
c0011f4e:	eb 05                	jmp    c0011f55 <VAS::VAS(bool)+0xe7>
c0011f50:	b8 00 00 00 00       	mov    eax,0x0
c0011f55:	09 d0                	or     eax,edx
c0011f57:	89 c1                	mov    ecx,eax
c0011f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f5d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f64:	c1 e2 02             	shl    edx,0x2
c0011f67:	01 d0                	add    eax,edx
c0011f69:	89 ca                	mov    edx,ecx
c0011f6b:	89 10                	mov    DWORD PTR [eax],edx
c0011f6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f71:	2d 40 03 00 00       	sub    eax,0x340
c0011f76:	83 f8 7f             	cmp    eax,0x7f
c0011f79:	77 16                	ja     c0011f91 <VAS::VAS(bool)+0x123>
c0011f7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011f82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f86:	c1 e2 02             	shl    edx,0x2
c0011f89:	01 d0                	add    eax,edx
c0011f8b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0011f91:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f95:	e9 7c ff ff ff       	jmp    c0011f16 <VAS::VAS(bool)+0xa8>
c0011f9a:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0011f9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fa5:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0011fab:	83 e0 10             	and    eax,0x10
c0011fae:	84 c0                	test   al,al
c0011fb0:	74 07                	je     c0011fb9 <VAS::VAS(bool)+0x14b>
c0011fb2:	b8 03 41 00 00       	mov    eax,0x4103
c0011fb7:	eb 05                	jmp    c0011fbe <VAS::VAS(bool)+0x150>
c0011fb9:	b8 03 40 00 00       	mov    eax,0x4003
c0011fbe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011fc2:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0011fc5:	81 c2 20 0c 00 00    	add    edx,0xc20
c0011fcb:	89 02                	mov    DWORD PTR [edx],eax
c0011fcd:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0011fd2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fd8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0011fde:	83 ec 08             	sub    esp,0x8
c0011fe1:	50                   	push   eax
c0011fe2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011fe6:	e8 b3 fc ff ff       	call   c0011c9e <VAS::setCPUSpecific(unsigned long)>
c0011feb:	83 c4 10             	add    esp,0x10
c0011fee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011ff2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011ff5:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0011ffa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012000:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012006:	83 e0 10             	and    eax,0x10
c0012009:	84 c0                	test   al,al
c001200b:	74 07                	je     c0012014 <VAS::VAS(bool)+0x1a6>
c001200d:	b8 00 01 00 00       	mov    eax,0x100
c0012012:	eb 05                	jmp    c0012019 <VAS::VAS(bool)+0x1ab>
c0012014:	b8 00 00 00 00       	mov    eax,0x0
c0012019:	09 c2                	or     edx,eax
c001201b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001201f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012022:	05 fc 0f 00 00       	add    eax,0xffc
c0012027:	83 ca 03             	or     edx,0x3
c001202a:	89 10                	mov    DWORD PTR [eax],edx
c001202c:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0012031:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012037:	83 ec 0c             	sub    esp,0xc
c001203a:	50                   	push   eax
c001203b:	e8 ac 1d 00 00       	call   c0013dec <Device::getName()>
c0012040:	83 c4 10             	add    esp,0x10
c0012043:	83 ec 08             	sub    esp,0x8
c0012046:	68 21 a5 02 c0       	push   0xc002a521
c001204b:	50                   	push   eax
c001204c:	e8 47 e8 fe ff       	call   c0000898 <strcmp>
c0012051:	83 c4 10             	add    esp,0x10
c0012054:	85 c0                	test   eax,eax
c0012056:	0f 94 c0             	sete   al
c0012059:	84 c0                	test   al,al
c001205b:	0f 84 87 00 00 00    	je     c00120e8 <VAS::VAS(bool)+0x27a>
c0012061:	fa                   	cli    
c0012062:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0012067:	40                   	inc    eax
c0012068:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001206d:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0012072:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012078:	05 7c 09 00 00       	add    eax,0x97c
c001207d:	83 ec 0c             	sub    esp,0xc
c0012080:	50                   	push   eax
c0012081:	e8 98 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012086:	83 c4 10             	add    esp,0x10
c0012089:	25 00 f0 ff ff       	and    eax,0xfffff000
c001208e:	89 c3                	mov    ebx,eax
c0012090:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0012095:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001209b:	05 7c 09 00 00       	add    eax,0x97c
c00120a0:	83 ec 0c             	sub    esp,0xc
c00120a3:	50                   	push   eax
c00120a4:	e8 75 cf ff ff       	call   c000f01e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00120a9:	83 c4 10             	add    esp,0x10
c00120ac:	83 ec 08             	sub    esp,0x8
c00120af:	50                   	push   eax
c00120b0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120b4:	e8 75 f5 ff ff       	call   c001162e <VAS::getPageTableEntry(unsigned long)>
c00120b9:	83 c4 10             	add    esp,0x10
c00120bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00120be:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120c3:	6a 11                	push   0x11
c00120c5:	53                   	push   ebx
c00120c6:	50                   	push   eax
c00120c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00120cb:	e8 f4 f8 ff ff       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00120d0:	83 c4 10             	add    esp,0x10
c00120d3:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c00120d8:	48                   	dec    eax
c00120d9:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c00120de:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c00120e3:	85 c0                	test   eax,eax
c00120e5:	75 01                	jne    c00120e8 <VAS::VAS(bool)+0x27a>
c00120e7:	fb                   	sti    
c00120e8:	90                   	nop
c00120e9:	83 c4 28             	add    esp,0x28
c00120ec:	5b                   	pop    ebx
c00120ed:	c3                   	ret    

c00120ee <VAS::evict(unsigned long)>:
c00120ee:	55                   	push   ebp
c00120ef:	57                   	push   edi
c00120f0:	56                   	push   esi
c00120f1:	53                   	push   ebx
c00120f2:	83 ec 1c             	sub    esp,0x1c
c00120f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00120f9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00120fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012101:	e8 42 f2 ff ff       	call   c0011348 <Virt::allocateSwapfilePage()>
c0012106:	89 c7                	mov    edi,eax
c0012108:	a1 0c c9 02 c0       	mov    eax,ds:0xc002c90c
c001210d:	85 c0                	test   eax,eax
c001210f:	7e 3d                	jle    c001214e <VAS::evict(unsigned long)+0x60>
c0012111:	89 ee                	mov    esi,ebp
c0012113:	31 db                	xor    ebx,ebx
c0012115:	83 ec 0c             	sub    esp,0xc
c0012118:	57                   	push   edi
c0012119:	e8 18 f2 ff ff       	call   c0011336 <Virt::swapIDToSector(unsigned long)>
c001211e:	89 34 24             	mov    DWORD PTR [esp],esi
c0012121:	01 d8                	add    eax,ebx
c0012123:	6a 01                	push   0x1
c0012125:	31 d2                	xor    edx,edx
c0012127:	43                   	inc    ebx
c0012128:	52                   	push   edx
c0012129:	81 c6 00 02 00 00    	add    esi,0x200
c001212f:	50                   	push   eax
c0012130:	0f be 05 18 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c918
c0012137:	ff 34 85 5c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd21a4]
c001213e:	e8 31 3f 00 00       	call   c0016074 <LogicalDisk::write(unsigned long long, int, void*)>
c0012143:	83 c4 20             	add    esp,0x20
c0012146:	39 1d 0c c9 02 c0    	cmp    DWORD PTR ds:0xc002c90c,ebx
c001214c:	7f c7                	jg     c0012115 <VAS::evict(unsigned long)+0x27>
c001214e:	83 ec 08             	sub    esp,0x8
c0012151:	c1 e7 0b             	shl    edi,0xb
c0012154:	55                   	push   ebp
c0012155:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012159:	e8 d0 f4 ff ff       	call   c001162e <VAS::getPageTableEntry(unsigned long)>
c001215e:	5a                   	pop    edx
c001215f:	89 c6                	mov    esi,eax
c0012161:	59                   	pop    ecx
c0012162:	ff 30                	push   DWORD PTR [eax]
c0012164:	68 2f a5 02 c0       	push   0xc002a52f
c0012169:	e8 45 05 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001216e:	8b 16                	mov    edx,DWORD PTR [esi]
c0012170:	89 d3                	mov    ebx,edx
c0012172:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012178:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001217e:	09 d7                	or     edi,edx
c0012180:	89 3e                	mov    DWORD PTR [esi],edi
c0012182:	5e                   	pop    esi
c0012183:	58                   	pop    eax
c0012184:	57                   	push   edi
c0012185:	68 48 a5 02 c0       	push   0xc002a548
c001218a:	e8 24 05 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001218f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012192:	ff 05 c8 da 02 c0    	inc    DWORD PTR ds:0xc002dac8
c0012198:	e8 63 d7 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001219d:	0f 20 d8             	mov    eax,cr3
c00121a0:	0f 22 d8             	mov    cr3,eax
c00121a3:	ff 35 c8 da 02 c0    	push   DWORD PTR ds:0xc002dac8
c00121a9:	55                   	push   ebp
c00121aa:	53                   	push   ebx
c00121ab:	68 50 a4 02 c0       	push   0xc002a450
c00121b0:	e8 fe 04 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00121b5:	a1 c4 da 02 c0       	mov    eax,ds:0xc002dac4
c00121ba:	c7 44 24 50 61 a5 02 c0 	mov    DWORD PTR [esp+0x50],0xc002a561
c00121c2:	8d 50 01             	lea    edx,[eax+0x1]
c00121c5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00121c9:	89 15 c4 da 02 c0    	mov    DWORD PTR ds:0xc002dac4,edx
c00121cf:	83 c4 3c             	add    esp,0x3c
c00121d2:	5b                   	pop    ebx
c00121d3:	5e                   	pop    esi
c00121d4:	5f                   	pop    edi
c00121d5:	5d                   	pop    ebp
c00121d6:	e9 d8 04 00 00       	jmp    c00126b3 <Dbg::kprintf(char const*, ...)>
c00121db:	90                   	nop

c00121dc <VAS::tryLoadBackOffDisk(unsigned long)>:
c00121dc:	55                   	push   ebp
c00121dd:	57                   	push   edi
c00121de:	56                   	push   esi
c00121df:	53                   	push   ebx
c00121e0:	83 ec 24             	sub    esp,0x24
c00121e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00121eb:	68 72 a5 02 c0       	push   0xc002a572
c00121f0:	e8 be 04 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00121f5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00121f9:	58                   	pop    eax
c00121fa:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012200:	5a                   	pop    edx
c0012201:	53                   	push   ebx
c0012202:	56                   	push   esi
c0012203:	e8 26 f4 ff ff       	call   c001162e <VAS::getPageTableEntry(unsigned long)>
c0012208:	59                   	pop    ecx
c0012209:	89 c5                	mov    ebp,eax
c001220b:	5f                   	pop    edi
c001220c:	ff 30                	push   DWORD PTR [eax]
c001220e:	68 85 a5 02 c0       	push   0xc002a585
c0012213:	e8 9b 04 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0012218:	83 c4 10             	add    esp,0x10
c001221b:	85 db                	test   ebx,ebx
c001221d:	74 1d                	je     c001223c <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c001221f:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
c0012222:	31 c0                	xor    eax,eax
c0012224:	89 fa                	mov    edx,edi
c0012226:	81 e2 01 04 00 00    	and    edx,0x401
c001222c:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012232:	74 12                	je     c0012246 <VAS::tryLoadBackOffDisk(unsigned long)+0x6a>
c0012234:	83 c4 1c             	add    esp,0x1c
c0012237:	5b                   	pop    ebx
c0012238:	5e                   	pop    esi
c0012239:	5f                   	pop    edi
c001223a:	5d                   	pop    ebp
c001223b:	c3                   	ret    
c001223c:	83 c4 1c             	add    esp,0x1c
c001223f:	31 c0                	xor    eax,eax
c0012241:	5b                   	pop    ebx
c0012242:	5e                   	pop    esi
c0012243:	5f                   	pop    edi
c0012244:	5d                   	pop    ebp
c0012245:	c3                   	ret    
c0012246:	83 ec 08             	sub    esp,0x8
c0012249:	c1 ef 0b             	shr    edi,0xb
c001224c:	57                   	push   edi
c001224d:	68 93 a5 02 c0       	push   0xc002a593
c0012252:	e8 5c 04 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0012257:	e8 15 d7 ff ff       	call   c000f971 <Phys::allocatePage()>
c001225c:	59                   	pop    ecx
c001225d:	5a                   	pop    edx
c001225e:	50                   	push   eax
c001225f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012263:	68 9e a5 02 c0       	push   0xc002a59e
c0012268:	e8 46 04 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001226d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012271:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0012274:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001227a:	09 d0                	or     eax,edx
c001227c:	0d 01 08 00 00       	or     eax,0x801
c0012281:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012284:	59                   	pop    ecx
c0012285:	5d                   	pop    ebp
c0012286:	50                   	push   eax
c0012287:	68 b3 a5 02 c0       	push   0xc002a5b3
c001228c:	e8 22 04 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0012291:	0f 20 d8             	mov    eax,cr3
c0012294:	83 c4 0c             	add    esp,0xc
c0012297:	56                   	push   esi
c0012298:	50                   	push   eax
c0012299:	68 cb a5 02 c0       	push   0xc002a5cb
c001229e:	e8 10 04 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00122a3:	c7 04 24 e3 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5e3
c00122aa:	e8 04 04 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00122af:	83 c4 10             	add    esp,0x10
c00122b2:	a1 0c c9 02 c0       	mov    eax,ds:0xc002c90c
c00122b7:	85 c0                	test   eax,eax
c00122b9:	7e 3d                	jle    c00122f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x11c>
c00122bb:	89 dd                	mov    ebp,ebx
c00122bd:	31 f6                	xor    esi,esi
c00122bf:	83 ec 0c             	sub    esp,0xc
c00122c2:	57                   	push   edi
c00122c3:	e8 6e f0 ff ff       	call   c0011336 <Virt::swapIDToSector(unsigned long)>
c00122c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00122cb:	01 f0                	add    eax,esi
c00122cd:	6a 01                	push   0x1
c00122cf:	31 d2                	xor    edx,edx
c00122d1:	46                   	inc    esi
c00122d2:	52                   	push   edx
c00122d3:	81 c5 00 02 00 00    	add    ebp,0x200
c00122d9:	50                   	push   eax
c00122da:	0f be 05 18 c9 02 c0 	movsx  eax,BYTE PTR ds:0xc002c918
c00122e1:	ff 34 85 5c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd21a4]
c00122e8:	e8 1b 3d 00 00       	call   c0016008 <LogicalDisk::read(unsigned long long, int, void*)>
c00122ed:	83 c4 20             	add    esp,0x20
c00122f0:	39 35 0c c9 02 c0    	cmp    DWORD PTR ds:0xc002c90c,esi
c00122f6:	7f c7                	jg     c00122bf <VAS::tryLoadBackOffDisk(unsigned long)+0xe3>
c00122f8:	a1 c8 da 02 c0       	mov    eax,ds:0xc002dac8
c00122fd:	48                   	dec    eax
c00122fe:	52                   	push   edx
c00122ff:	a3 c8 da 02 c0       	mov    ds:0xc002dac8,eax
c0012304:	50                   	push   eax
c0012305:	53                   	push   ebx
c0012306:	68 f3 a5 02 c0       	push   0xc002a5f3
c001230b:	e8 a3 03 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0012310:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012313:	e8 00 f0 ff ff       	call   c0011318 <Virt::freeSwapfilePage(unsigned long)>
c0012318:	c7 04 24 08 a6 02 c0 	mov    DWORD PTR [esp],0xc002a608
c001231f:	e8 8f 03 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0012324:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0012329:	83 c4 10             	add    esp,0x10
c001232c:	48                   	dec    eax
c001232d:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0012332:	85 c0                	test   eax,eax
c0012334:	74 2d                	je     c0012363 <VAS::tryLoadBackOffDisk(unsigned long)+0x187>
c0012336:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001233a:	25 ff 0f 00 00       	and    eax,0xfff
c001233f:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012344:	77 20                	ja     c0012366 <VAS::tryLoadBackOffDisk(unsigned long)+0x18a>
c0012346:	0f 20 d8             	mov    eax,cr3
c0012349:	0f 22 d8             	mov    cr3,eax
c001234c:	83 ec 0c             	sub    esp,0xc
c001234f:	68 2e a6 02 c0       	push   0xc002a62e
c0012354:	e8 5a 03 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0012359:	83 c4 10             	add    esp,0x10
c001235c:	b0 01                	mov    al,0x1
c001235e:	e9 d1 fe ff ff       	jmp    c0012234 <VAS::tryLoadBackOffDisk(unsigned long)+0x58>
c0012363:	fb                   	sti    
c0012364:	eb d0                	jmp    c0012336 <VAS::tryLoadBackOffDisk(unsigned long)+0x15a>
c0012366:	83 ec 0c             	sub    esp,0xc
c0012369:	68 1e a6 02 c0       	push   0xc002a61e
c001236e:	e8 40 03 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0012373:	83 c4 10             	add    esp,0x10
c0012376:	eb ce                	jmp    c0012346 <VAS::tryLoadBackOffDisk(unsigned long)+0x16a>

c0012378 <VAS::scanForEviction()>:
c0012378:	57                   	push   edi
c0012379:	56                   	push   esi
c001237a:	53                   	push   ebx
c001237b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001237f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012382:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012388:	75 0e                	jne    c0012398 <VAS::scanForEviction()+0x20>
c001238a:	89 da                	mov    edx,ebx
c001238c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001238f:	c1 ea 16             	shr    edx,0x16
c0012392:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012396:	74 48                	je     c00123e0 <VAS::scanForEviction()+0x68>
c0012398:	53                   	push   ebx
c0012399:	56                   	push   esi
c001239a:	e8 8f f2 ff ff       	call   c001162e <VAS::getPageTableEntry(unsigned long)>
c001239f:	5a                   	pop    edx
c00123a0:	8b 38                	mov    edi,DWORD PTR [eax]
c00123a2:	59                   	pop    ecx
c00123a3:	89 fa                	mov    edx,edi
c00123a5:	81 e2 00 0c 00 00    	and    edx,0xc00
c00123ab:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c00123b1:	74 3d                	je     c00123f0 <VAS::scanForEviction()+0x78>
c00123b3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123b9:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00123bf:	76 2a                	jbe    c00123eb <VAS::scanForEviction()+0x73>
c00123c1:	31 db                	xor    ebx,ebx
c00123c3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00123ca:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00123d0:	75 c6                	jne    c0012398 <VAS::scanForEviction()+0x20>
c00123d2:	89 da                	mov    edx,ebx
c00123d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00123d7:	c1 ea 16             	shr    edx,0x16
c00123da:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00123de:	75 b8                	jne    c0012398 <VAS::scanForEviction()+0x20>
c00123e0:	81 c3 00 00 40 00    	add    ebx,0x400000
c00123e6:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123e9:	eb 97                	jmp    c0012382 <VAS::scanForEviction()+0xa>
c00123eb:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c00123ee:	eb 92                	jmp    c0012382 <VAS::scanForEviction()+0xa>
c00123f0:	f7 c7 01 00 00 00    	test   edi,0x1
c00123f6:	74 bb                	je     c00123b3 <VAS::scanForEviction()+0x3b>
c00123f8:	f7 c7 20 00 00 00    	test   edi,0x20
c00123fe:	74 0a                	je     c001240a <VAS::scanForEviction()+0x92>
c0012400:	83 e7 df             	and    edi,0xffffffdf
c0012403:	89 38                	mov    DWORD PTR [eax],edi
c0012405:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012408:	eb a9                	jmp    c00123b3 <VAS::scanForEviction()+0x3b>
c001240a:	83 ec 08             	sub    esp,0x8
c001240d:	53                   	push   ebx
c001240e:	56                   	push   esi
c001240f:	e8 da fc ff ff       	call   c00120ee <VAS::evict(unsigned long)>
c0012414:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001241b:	83 c4 10             	add    esp,0x10
c001241e:	89 f8                	mov    eax,edi
c0012420:	5b                   	pop    ebx
c0012421:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012426:	5e                   	pop    esi
c0012427:	5f                   	pop    edi
c0012428:	c3                   	ret    

c0012429 <mapVASFirstTime>:
c0012429:	55                   	push   ebp
c001242a:	57                   	push   edi
c001242b:	56                   	push   esi
c001242c:	53                   	push   ebx
c001242d:	83 ec 0c             	sub    esp,0xc
c0012430:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012435:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012438:	4a                   	dec    edx
c0012439:	0f 84 fe 00 00 00    	je     c001253d <mapVASFirstTime+0x114>
c001243f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012442:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012445:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001244a:	c1 e5 15             	shl    ebp,0x15
c001244d:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0012452:	8b b2 32 05 00 00    	mov    esi,DWORD PTR [edx+0x532]
c0012458:	29 eb                	sub    ebx,ebp
c001245a:	29 ef                	sub    edi,ebp
c001245c:	83 ec 08             	sub    esp,0x8
c001245f:	53                   	push   ebx
c0012460:	68 55 a6 02 c0       	push   0xc002a655
c0012465:	e8 49 02 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001246a:	e8 02 d5 ff ff       	call   c000f971 <Phys::allocatePage()>
c001246f:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c0012476:	6a 01                	push   0x1
c0012478:	53                   	push   ebx
c0012479:	81 eb 00 10 00 00    	sub    ebx,0x1000
c001247f:	50                   	push   eax
c0012480:	56                   	push   esi
c0012481:	e8 34 f8 ff ff       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012486:	83 c4 20             	add    esp,0x20
c0012489:	39 fb                	cmp    ebx,edi
c001248b:	75 cf                	jne    c001245c <mapVASFirstTime+0x33>
c001248d:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0012492:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0012497:	29 eb                	sub    ebx,ebp
c0012499:	29 ef                	sub    edi,ebp
c001249b:	83 ec 08             	sub    esp,0x8
c001249e:	53                   	push   ebx
c001249f:	68 71 a6 02 c0       	push   0xc002a671
c00124a4:	e8 0a 02 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00124a9:	58                   	pop    eax
c00124aa:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124ae:	5a                   	pop    edx
c00124af:	19 c0                	sbb    eax,eax
c00124b1:	83 e0 04             	and    eax,0x4
c00124b4:	05 03 04 00 00       	add    eax,0x403
c00124b9:	50                   	push   eax
c00124ba:	68 bd a5 02 c0       	push   0xc002a5bd
c00124bf:	e8 ef 01 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00124c4:	e8 a8 d4 ff ff       	call   c000f971 <Phys::allocatePage()>
c00124c9:	59                   	pop    ecx
c00124ca:	89 c5                	mov    ebp,eax
c00124cc:	58                   	pop    eax
c00124cd:	55                   	push   ebp
c00124ce:	68 85 a6 02 c0       	push   0xc002a685
c00124d3:	e8 db 01 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00124d8:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c00124dc:	19 d2                	sbb    edx,edx
c00124de:	83 e2 04             	and    edx,0x4
c00124e1:	81 c2 03 0c 00 00    	add    edx,0xc03
c00124e7:	89 14 24             	mov    DWORD PTR [esp],edx
c00124ea:	6a 01                	push   0x1
c00124ec:	53                   	push   ebx
c00124ed:	55                   	push   ebp
c00124ee:	56                   	push   esi
c00124ef:	e8 c6 f7 ff ff       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00124f4:	83 c4 18             	add    esp,0x18
c00124f7:	53                   	push   ebx
c00124f8:	56                   	push   esi
c00124f9:	e8 30 f1 ff ff       	call   c001162e <VAS::getPageTableEntry(unsigned long)>
c00124fe:	5a                   	pop    edx
c00124ff:	59                   	pop    ecx
c0012500:	ff 30                	push   DWORD PTR [eax]
c0012502:	68 a1 a6 02 c0       	push   0xc002a6a1
c0012507:	e8 a7 01 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001250c:	0f 20 d8             	mov    eax,cr3
c001250f:	83 c4 0c             	add    esp,0xc
c0012512:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012518:	56                   	push   esi
c0012519:	50                   	push   eax
c001251a:	68 cb a5 02 c0       	push   0xc002a5cb
c001251f:	e8 8f 01 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0012524:	83 c4 10             	add    esp,0x10
c0012527:	39 df                	cmp    edi,ebx
c0012529:	0f 85 6c ff ff ff    	jne    c001249b <mapVASFirstTime+0x72>
c001252f:	0f 20 d8             	mov    eax,cr3
c0012532:	0f 22 d8             	mov    cr3,eax
c0012535:	83 c4 0c             	add    esp,0xc
c0012538:	5b                   	pop    ebx
c0012539:	5e                   	pop    esi
c001253a:	5f                   	pop    edi
c001253b:	5d                   	pop    ebp
c001253c:	c3                   	ret    
c001253d:	83 ec 0c             	sub    esp,0xc
c0012540:	68 3c a6 02 c0       	push   0xc002a63c
c0012545:	e8 69 01 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001254a:	83 c4 10             	add    esp,0x10
c001254d:	83 c4 0c             	add    esp,0xc
c0012550:	5b                   	pop    ebx
c0012551:	5e                   	pop    esi
c0012552:	5f                   	pop    edi
c0012553:	5d                   	pop    ebp
c0012554:	c3                   	ret    

c0012555 <__cxa_atexit>:
c0012555:	31 c0                	xor    eax,eax
c0012557:	c3                   	ret    

c0012558 <__cxa_finalize>:
c0012558:	c3                   	ret    

c0012559 <__stack_chk_fail>:
c0012559:	55                   	push   ebp
c001255a:	89 e5                	mov    ebp,esp
c001255c:	83 ec 14             	sub    esp,0x14
c001255f:	68 ac a6 02 c0       	push   0xc002a6ac
c0012564:	e8 4a 01 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0012569:	58                   	pop    eax
c001256a:	5a                   	pop    edx
c001256b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001256e:	68 fc a6 02 c0       	push   0xc002a6fc
c0012573:	e8 3b 01 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0012578:	59                   	pop    ecx
c0012579:	58                   	pop    eax
c001257a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001257d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012580:	68 fc a6 02 c0       	push   0xc002a6fc
c0012585:	e8 29 01 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001258a:	5a                   	pop    edx
c001258b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001258e:	59                   	pop    ecx
c001258f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012591:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012594:	68 fc a6 02 c0       	push   0xc002a6fc
c0012599:	e8 15 01 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001259e:	5a                   	pop    edx
c001259f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00125a2:	59                   	pop    ecx
c00125a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00125a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00125a7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00125aa:	68 fc a6 02 c0       	push   0xc002a6fc
c00125af:	e8 ff 00 00 00       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00125b4:	c7 04 24 04 a7 02 c0 	mov    DWORD PTR [esp],0xc002a704
c00125bb:	e8 5f 78 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c00125c0:	83 c4 10             	add    esp,0x10
c00125c3:	c9                   	leave  
c00125c4:	c3                   	ret    

c00125c5 <__cxa_pure_virtual>:
c00125c5:	83 ec 18             	sub    esp,0x18
c00125c8:	68 1c a7 02 c0       	push   0xc002a71c
c00125cd:	e8 4d 78 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c00125d2:	83 c4 1c             	add    esp,0x1c
c00125d5:	c3                   	ret    

c00125d6 <operator new[](unsigned long)>:
c00125d6:	e9 be cf ff ff       	jmp    c000f599 <malloc>

c00125db <operator delete(void*, unsigned long)>:
c00125db:	e9 d9 cf ff ff       	jmp    c000f5b9 <rfree>

c00125e0 <operator delete[](void*)>:
c00125e0:	e9 d4 cf ff ff       	jmp    c000f5b9 <rfree>

c00125e5 <operator delete[](void*, unsigned long)>:
c00125e5:	e9 cf cf ff ff       	jmp    c000f5b9 <rfree>

c00125ea <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00125ea:	55                   	push   ebp
c00125eb:	b9 11 00 00 00       	mov    ecx,0x11
c00125f0:	57                   	push   edi
c00125f1:	56                   	push   esi
c00125f2:	be 6a a1 02 c0       	mov    esi,0xc002a16a
c00125f7:	53                   	push   ebx
c00125f8:	83 ec 20             	sub    esp,0x20
c00125fb:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00125ff:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012603:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0012607:	fc                   	cld    
c0012608:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001260a:	89 ee                	mov    esi,ebp
c001260c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012610:	eb 02                	jmp    c0012614 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c0012612:	89 c6                	mov    esi,eax
c0012614:	31 d2                	xor    edx,edx
c0012616:	41                   	inc    ecx
c0012617:	89 f0                	mov    eax,esi
c0012619:	f7 f3                	div    ebx
c001261b:	39 de                	cmp    esi,ebx
c001261d:	73 f3                	jae    c0012612 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c001261f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012622:	eb 02                	jmp    c0012626 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c0012624:	89 c5                	mov    ebp,eax
c0012626:	31 d2                	xor    edx,edx
c0012628:	49                   	dec    ecx
c0012629:	89 e8                	mov    eax,ebp
c001262b:	f7 f3                	div    ebx
c001262d:	39 dd                	cmp    ebp,ebx
c001262f:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0012633:	88 11                	mov    BYTE PTR [ecx],dl
c0012635:	73 ed                	jae    c0012624 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c0012637:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001263b:	83 c4 20             	add    esp,0x20
c001263e:	5b                   	pop    ebx
c001263f:	5e                   	pop    esi
c0012640:	5f                   	pop    edi
c0012641:	5d                   	pop    ebp
c0012642:	c3                   	ret    

c0012643 <Dbg::logc(char)>:
c0012643:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012647:	ba fd 03 00 00       	mov    edx,0x3fd
c001264c:	ec                   	in     al,dx
c001264d:	a8 20                	test   al,0x20
c001264f:	74 fb                	je     c001264c <Dbg::logc(char)+0x9>
c0012651:	ba f8 03 00 00       	mov    edx,0x3f8
c0012656:	88 c8                	mov    al,cl
c0012658:	ee                   	out    dx,al
c0012659:	c3                   	ret    

c001265a <Dbg::logs(char*)>:
c001265a:	53                   	push   ebx
c001265b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001265f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012662:	84 c0                	test   al,al
c0012664:	74 0f                	je     c0012675 <Dbg::logs(char*)+0x1b>
c0012666:	50                   	push   eax
c0012667:	43                   	inc    ebx
c0012668:	e8 d6 ff ff ff       	call   c0012643 <Dbg::logc(char)>
c001266d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012670:	5a                   	pop    edx
c0012671:	84 c0                	test   al,al
c0012673:	75 f1                	jne    c0012666 <Dbg::logs(char*)+0xc>
c0012675:	5b                   	pop    ebx
c0012676:	c3                   	ret    

c0012677 <Dbg::logWriteInt(unsigned int)>:
c0012677:	83 ec 10             	sub    esp,0x10
c001267a:	6a 0a                	push   0xa
c001267c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012680:	50                   	push   eax
c0012681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012685:	e8 60 ff ff ff       	call   c00125ea <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c001268a:	50                   	push   eax
c001268b:	e8 ca ff ff ff       	call   c001265a <Dbg::logs(char*)>
c0012690:	83 c4 20             	add    esp,0x20
c0012693:	c3                   	ret    

c0012694 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012694:	83 ec 10             	sub    esp,0x10
c0012697:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001269b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001269f:	50                   	push   eax
c00126a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126a4:	e8 41 ff ff ff       	call   c00125ea <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00126a9:	50                   	push   eax
c00126aa:	e8 ab ff ff ff       	call   c001265a <Dbg::logs(char*)>
c00126af:	83 c4 20             	add    esp,0x20
c00126b2:	c3                   	ret    

c00126b3 <Dbg::kprintf(char const*, ...)>:
c00126b3:	55                   	push   ebp
c00126b4:	57                   	push   edi
c00126b5:	56                   	push   esi
c00126b6:	53                   	push   ebx
c00126b7:	83 ec 0c             	sub    esp,0xc
c00126ba:	8d 44 24 24          	lea    eax,[esp+0x24]
c00126be:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00126c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126c6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00126c9:	84 c0                	test   al,al
c00126cb:	74 4a                	je     c0012717 <Dbg::kprintf(char const*, ...)+0x64>
c00126cd:	31 db                	xor    ebx,ebx
c00126cf:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00126d2:	3c 25                	cmp    al,0x25
c00126d4:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00126d7:	0f 85 e4 00 00 00    	jne    c00127c1 <Dbg::kprintf(char const*, ...)+0x10e>
c00126dd:	83 c3 02             	add    ebx,0x2
c00126e0:	8a 07                	mov    al,BYTE PTR [edi]
c00126e2:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00126e5:	83 e8 25             	sub    eax,0x25
c00126e8:	3c 53                	cmp    al,0x53
c00126ea:	0f 87 ba 00 00 00    	ja     c00127aa <Dbg::kprintf(char const*, ...)+0xf7>
c00126f0:	0f b6 c0             	movzx  eax,al
c00126f3:	ff 24 85 30 a7 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd58d0]
c00126fa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00126fe:	89 c8                	mov    eax,ecx
c0012700:	83 c1 04             	add    ecx,0x4
c0012703:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012707:	ff 30                	push   DWORD PTR [eax]
c0012709:	e8 69 ff ff ff       	call   c0012677 <Dbg::logWriteInt(unsigned int)>
c001270e:	5f                   	pop    edi
c001270f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012713:	84 c0                	test   al,al
c0012715:	75 b8                	jne    c00126cf <Dbg::kprintf(char const*, ...)+0x1c>
c0012717:	83 c4 0c             	add    esp,0xc
c001271a:	5b                   	pop    ebx
c001271b:	5e                   	pop    esi
c001271c:	5f                   	pop    edi
c001271d:	5d                   	pop    ebp
c001271e:	c3                   	ret    
c001271f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012723:	89 c8                	mov    eax,ecx
c0012725:	83 c1 04             	add    ecx,0x4
c0012728:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001272c:	ff 30                	push   DWORD PTR [eax]
c001272e:	e8 27 ff ff ff       	call   c001265a <Dbg::logs(char*)>
c0012733:	58                   	pop    eax
c0012734:	eb d9                	jmp    c001270f <Dbg::kprintf(char const*, ...)+0x5c>
c0012736:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001273a:	89 d0                	mov    eax,edx
c001273c:	83 c2 04             	add    edx,0x4
c001273f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012743:	ff 30                	push   DWORD PTR [eax]
c0012745:	e8 2d ff ff ff       	call   c0012677 <Dbg::logWriteInt(unsigned int)>
c001274a:	58                   	pop    eax
c001274b:	eb c2                	jmp    c001270f <Dbg::kprintf(char const*, ...)+0x5c>
c001274d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012751:	89 d0                	mov    eax,edx
c0012753:	83 c2 04             	add    edx,0x4
c0012756:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012759:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001275d:	50                   	push   eax
c001275e:	e8 e0 fe ff ff       	call   c0012643 <Dbg::logc(char)>
c0012763:	58                   	pop    eax
c0012764:	eb a9                	jmp    c001270f <Dbg::kprintf(char const*, ...)+0x5c>
c0012766:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001276a:	89 c8                	mov    eax,ecx
c001276c:	83 c1 04             	add    ecx,0x4
c001276f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012773:	6a 10                	push   0x10
c0012775:	ff 30                	push   DWORD PTR [eax]
c0012777:	e8 18 ff ff ff       	call   c0012694 <Dbg::logWriteIntBase(unsigned int, int)>
c001277c:	59                   	pop    ecx
c001277d:	5f                   	pop    edi
c001277e:	eb 8f                	jmp    c001270f <Dbg::kprintf(char const*, ...)+0x5c>
c0012780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012784:	89 d0                	mov    eax,edx
c0012786:	83 c2 08             	add    edx,0x8
c0012789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001278d:	6a 10                	push   0x10
c001278f:	ff 30                	push   DWORD PTR [eax]
c0012791:	e8 fe fe ff ff       	call   c0012694 <Dbg::logWriteIntBase(unsigned int, int)>
c0012796:	58                   	pop    eax
c0012797:	5a                   	pop    edx
c0012798:	e9 72 ff ff ff       	jmp    c001270f <Dbg::kprintf(char const*, ...)+0x5c>
c001279d:	6a 25                	push   0x25
c001279f:	e8 9f fe ff ff       	call   c0012643 <Dbg::logc(char)>
c00127a4:	58                   	pop    eax
c00127a5:	e9 65 ff ff ff       	jmp    c001270f <Dbg::kprintf(char const*, ...)+0x5c>
c00127aa:	6a 25                	push   0x25
c00127ac:	e8 92 fe ff ff       	call   c0012643 <Dbg::logc(char)>
c00127b1:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00127b4:	50                   	push   eax
c00127b5:	e8 89 fe ff ff       	call   c0012643 <Dbg::logc(char)>
c00127ba:	5a                   	pop    edx
c00127bb:	59                   	pop    ecx
c00127bc:	e9 4e ff ff ff       	jmp    c001270f <Dbg::kprintf(char const*, ...)+0x5c>
c00127c1:	50                   	push   eax
c00127c2:	89 eb                	mov    ebx,ebp
c00127c4:	e8 7a fe ff ff       	call   c0012643 <Dbg::logc(char)>
c00127c9:	89 fd                	mov    ebp,edi
c00127cb:	58                   	pop    eax
c00127cc:	e9 3e ff ff ff       	jmp    c001270f <Dbg::kprintf(char const*, ...)+0x5c>
c00127d1:	90                   	nop

c00127d2 <File::read(unsigned long long, void*, int*)>:
c00127d2:	53                   	push   ebx
c00127d3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00127db:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00127e2:	3c 19                	cmp    al,0x19
c00127e4:	77 35                	ja     c001281b <File::read(unsigned long long, void*, int*)+0x49>
c00127e6:	8b 04 85 60 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20a0]
c00127ed:	85 c0                	test   eax,eax
c00127ef:	74 2a                	je     c001281b <File::read(unsigned long long, void*, int*)+0x49>
c00127f1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00127f7:	85 c0                	test   eax,eax
c00127f9:	74 20                	je     c001281b <File::read(unsigned long long, void*, int*)+0x49>
c00127fb:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00127ff:	74 21                	je     c0012822 <File::read(unsigned long long, void*, int*)+0x50>
c0012801:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012803:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012807:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001280d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012811:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012815:	5b                   	pop    ebx
c0012816:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012819:	ff e0                	jmp    eax
c001281b:	b8 0b 00 00 00       	mov    eax,0xb
c0012820:	eb 05                	jmp    c0012827 <File::read(unsigned long long, void*, int*)+0x55>
c0012822:	b8 05 00 00 00       	mov    eax,0x5
c0012827:	5b                   	pop    ebx
c0012828:	c3                   	ret    
c0012829:	90                   	nop

c001282a <File::write(unsigned long long, void*, int*)>:
c001282a:	53                   	push   ebx
c001282b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001282f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012833:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001283a:	3c 19                	cmp    al,0x19
c001283c:	77 35                	ja     c0012873 <File::write(unsigned long long, void*, int*)+0x49>
c001283e:	8b 04 85 60 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20a0]
c0012845:	85 c0                	test   eax,eax
c0012847:	74 2a                	je     c0012873 <File::write(unsigned long long, void*, int*)+0x49>
c0012849:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001284f:	85 c0                	test   eax,eax
c0012851:	74 20                	je     c0012873 <File::write(unsigned long long, void*, int*)+0x49>
c0012853:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012857:	74 21                	je     c001287a <File::write(unsigned long long, void*, int*)+0x50>
c0012859:	8b 08                	mov    ecx,DWORD PTR [eax]
c001285b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001285f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001286d:	5b                   	pop    ebx
c001286e:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012871:	ff e0                	jmp    eax
c0012873:	b8 0b 00 00 00       	mov    eax,0xb
c0012878:	eb 05                	jmp    c001287f <File::write(unsigned long long, void*, int*)+0x55>
c001287a:	b8 05 00 00 00       	mov    eax,0x5
c001287f:	5b                   	pop    ebx
c0012880:	c3                   	ret    
c0012881:	90                   	nop

c0012882 <Directory::read(unsigned long long, void*, int*)>:
c0012882:	53                   	push   ebx
c0012883:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012887:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001288b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012892:	3c 19                	cmp    al,0x19
c0012894:	77 35                	ja     c00128cb <Directory::read(unsigned long long, void*, int*)+0x49>
c0012896:	8b 04 85 60 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20a0]
c001289d:	85 c0                	test   eax,eax
c001289f:	74 2a                	je     c00128cb <Directory::read(unsigned long long, void*, int*)+0x49>
c00128a1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00128a7:	85 c0                	test   eax,eax
c00128a9:	74 20                	je     c00128cb <Directory::read(unsigned long long, void*, int*)+0x49>
c00128ab:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00128af:	74 21                	je     c00128d2 <Directory::read(unsigned long long, void*, int*)+0x50>
c00128b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00128b3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00128b7:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00128bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00128c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00128c5:	5b                   	pop    ebx
c00128c6:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00128c9:	ff e0                	jmp    eax
c00128cb:	b8 0b 00 00 00       	mov    eax,0xb
c00128d0:	eb 05                	jmp    c00128d7 <Directory::read(unsigned long long, void*, int*)+0x55>
c00128d2:	b8 05 00 00 00       	mov    eax,0x5
c00128d7:	5b                   	pop    ebx
c00128d8:	c3                   	ret    
c00128d9:	90                   	nop

c00128da <Directory::write(unsigned long long, void*, int*)>:
c00128da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00128de:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00128e5:	b8 0b 00 00 00       	mov    eax,0xb
c00128ea:	80 fa 19             	cmp    dl,0x19
c00128ed:	77 18                	ja     c0012907 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128ef:	8b 14 95 60 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20a0]
c00128f6:	85 d2                	test   edx,edx
c00128f8:	74 0d                	je     c0012907 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00128fa:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012901:	19 c0                	sbb    eax,eax
c0012903:	83 e0 0a             	and    eax,0xa
c0012906:	40                   	inc    eax
c0012907:	c3                   	ret    

c0012908 <File::isAtty()>:
c0012908:	31 c0                	xor    eax,eax
c001290a:	c3                   	ret    
c001290b:	90                   	nop

c001290c <Directory::isAtty()>:
c001290c:	31 c0                	xor    eax,eax
c001290e:	c3                   	ret    
c001290f:	90                   	nop

c0012910 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012910:	b8 0a 00 00 00       	mov    eax,0xa
c0012915:	c3                   	ret    

c0012916 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012916:	b8 0a 00 00 00       	mov    eax,0xa
c001291b:	c3                   	ret    

c001291c <Filesystem::getFileFirstSector(char const*)>:
c001291c:	31 c0                	xor    eax,eax
c001291e:	31 d2                	xor    edx,edx
c0012920:	c3                   	ret    
c0012921:	90                   	nop

c0012922 <File::~File()>:
c0012922:	83 ec 0c             	sub    esp,0xc
c0012925:	ba f0 a8 02 c0       	mov    edx,0xc002a8f0
c001292a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001292e:	89 10                	mov    DWORD PTR [eax],edx
c0012930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012934:	83 ec 0c             	sub    esp,0xc
c0012937:	50                   	push   eax
c0012938:	e8 69 e6 ff ff       	call   c0010fa6 <UnixFile::~UnixFile()>
c001293d:	83 c4 10             	add    esp,0x10
c0012940:	90                   	nop
c0012941:	83 c4 0c             	add    esp,0xc
c0012944:	c3                   	ret    
c0012945:	90                   	nop

c0012946 <File::~File()>:
c0012946:	83 ec 0c             	sub    esp,0xc
c0012949:	83 ec 0c             	sub    esp,0xc
c001294c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012950:	e8 cd ff ff ff       	call   c0012922 <File::~File()>
c0012955:	83 c4 10             	add    esp,0x10
c0012958:	83 ec 08             	sub    esp,0x8
c001295b:	68 14 01 00 00       	push   0x114
c0012960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012964:	e8 72 fc ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0012969:	83 c4 10             	add    esp,0x10
c001296c:	83 c4 0c             	add    esp,0xc
c001296f:	c3                   	ret    

c0012970 <Directory::~Directory()>:
c0012970:	83 ec 0c             	sub    esp,0xc
c0012973:	ba 0c a9 02 c0       	mov    edx,0xc002a90c
c0012978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001297c:	89 10                	mov    DWORD PTR [eax],edx
c001297e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012982:	83 ec 0c             	sub    esp,0xc
c0012985:	50                   	push   eax
c0012986:	e8 1b e6 ff ff       	call   c0010fa6 <UnixFile::~UnixFile()>
c001298b:	83 c4 10             	add    esp,0x10
c001298e:	90                   	nop
c001298f:	83 c4 0c             	add    esp,0xc
c0012992:	c3                   	ret    
c0012993:	90                   	nop

c0012994 <Directory::~Directory()>:
c0012994:	83 ec 0c             	sub    esp,0xc
c0012997:	83 ec 0c             	sub    esp,0xc
c001299a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001299e:	e8 cd ff ff ff       	call   c0012970 <Directory::~Directory()>
c00129a3:	83 c4 10             	add    esp,0x10
c00129a6:	83 ec 08             	sub    esp,0x8
c00129a9:	68 14 01 00 00       	push   0x114
c00129ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129b2:	e8 24 fc ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c00129b7:	83 c4 10             	add    esp,0x10
c00129ba:	83 c4 0c             	add    esp,0xc
c00129bd:	c3                   	ret    

c00129be <Filesystem::Filesystem()>:
c00129be:	ba 88 a8 02 c0       	mov    edx,0xc002a888
c00129c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129c7:	89 10                	mov    DWORD PTR [eax],edx
c00129c9:	8b 15 d4 da 02 c0    	mov    edx,DWORD PTR ds:0xc002dad4
c00129cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129d3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00129d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129da:	a3 d4 da 02 c0       	mov    ds:0xc002dad4,eax
c00129df:	90                   	nop
c00129e0:	c3                   	ret    
c00129e1:	90                   	nop

c00129e2 <Filesystem::~Filesystem()>:
c00129e2:	ba 88 a8 02 c0       	mov    edx,0xc002a888
c00129e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129eb:	89 10                	mov    DWORD PTR [eax],edx
c00129ed:	90                   	nop
c00129ee:	c3                   	ret    
c00129ef:	90                   	nop

c00129f0 <Filesystem::~Filesystem()>:
c00129f0:	83 ec 0c             	sub    esp,0xc
c00129f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00129f7:	e8 e6 ff ff ff       	call   c00129e2 <Filesystem::~Filesystem()>
c00129fc:	83 c4 04             	add    esp,0x4
c00129ff:	83 ec 08             	sub    esp,0x8
c0012a02:	6a 08                	push   0x8
c0012a04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a08:	e8 ce fb ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0012a0d:	83 c4 10             	add    esp,0x10
c0012a10:	83 c4 0c             	add    esp,0xc
c0012a13:	c3                   	ret    

c0012a14 <Fs::getcwd(Process*, char*, int)>:
c0012a14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a18:	31 c0                	xor    eax,eax
c0012a1a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012a1d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012a21:	7d 15                	jge    c0012a38 <Fs::getcwd(Process*, char*, int)+0x24>
c0012a23:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012a27:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012a2e:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012a31:	84 c9                	test   cl,cl
c0012a33:	74 06                	je     c0012a3b <Fs::getcwd(Process*, char*, int)+0x27>
c0012a35:	40                   	inc    eax
c0012a36:	eb e2                	jmp    c0012a1a <Fs::getcwd(Process*, char*, int)+0x6>
c0012a38:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012a3b:	31 c0                	xor    eax,eax
c0012a3d:	c3                   	ret    

c0012a3e <Fs::initVFS()>:
c0012a3e:	83 ec 18             	sub    esp,0x18
c0012a41:	6a 08                	push   0x8
c0012a43:	e8 51 cb ff ff       	call   c000f599 <malloc>
c0012a48:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a4b:	e8 cc de 00 00       	call   c002091c <FAT::FAT()>
c0012a50:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012a57:	e8 3d cb ff ff       	call   c000f599 <malloc>
c0012a5c:	89 04 24             	mov    DWORD PTR [esp],eax
c0012a5f:	e8 c4 f0 00 00       	call   c0021b28 <ISO9660::ISO9660()>
c0012a64:	83 c4 1c             	add    esp,0x1c
c0012a67:	c3                   	ret    

c0012a68 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012a68:	55                   	push   ebp
c0012a69:	57                   	push   edi
c0012a6a:	56                   	push   esi
c0012a6b:	53                   	push   ebx
c0012a6c:	81 ec 10 04 00 00    	sub    esp,0x410
c0012a72:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012a79:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012a80:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012a87:	68 00 04 00 00       	push   0x400
c0012a8c:	6a 00                	push   0x0
c0012a8e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012a92:	56                   	push   esi
c0012a93:	e8 b8 dc fe ff       	call   c0000750 <memset>
c0012a98:	83 c4 10             	add    esp,0x10
c0012a9b:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012a9f:	75 0b                	jne    c0012aac <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012aa1:	50                   	push   eax
c0012aa2:	50                   	push   eax
c0012aa3:	57                   	push   edi
c0012aa4:	56                   	push   esi
c0012aa5:	e8 62 dd fe ff       	call   c000080c <strcpy>
c0012aaa:	eb 41                	jmp    c0012aed <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012aac:	8a 07                	mov    al,BYTE PTR [edi]
c0012aae:	3c 5c                	cmp    al,0x5c
c0012ab0:	74 04                	je     c0012ab6 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012ab2:	3c 2f                	cmp    al,0x2f
c0012ab4:	75 18                	jne    c0012ace <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012ab6:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012ab9:	3c 60                	cmp    al,0x60
c0012abb:	7e 03                	jle    c0012ac0 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012abd:	83 e8 20             	sub    eax,0x20
c0012ac0:	88 04 24             	mov    BYTE PTR [esp],al
c0012ac3:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012aca:	50                   	push   eax
c0012acb:	50                   	push   eax
c0012acc:	eb 18                	jmp    c0012ae6 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012ace:	50                   	push   eax
c0012acf:	50                   	push   eax
c0012ad0:	55                   	push   ebp
c0012ad1:	56                   	push   esi
c0012ad2:	e8 35 dd fe ff       	call   c000080c <strcpy>
c0012ad7:	5a                   	pop    edx
c0012ad8:	59                   	pop    ecx
c0012ad9:	68 6a bb 02 c0       	push   0xc002bb6a
c0012ade:	56                   	push   esi
c0012adf:	e8 68 de fe ff       	call   c000094c <strcat>
c0012ae4:	5d                   	pop    ebp
c0012ae5:	58                   	pop    eax
c0012ae6:	57                   	push   edi
c0012ae7:	56                   	push   esi
c0012ae8:	e8 5f de fe ff       	call   c000094c <strcat>
c0012aed:	83 c4 10             	add    esp,0x10
c0012af0:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012af3:	3c 60                	cmp    al,0x60
c0012af5:	7e 03                	jle    c0012afa <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012af7:	83 e8 20             	sub    eax,0x20
c0012afa:	88 04 24             	mov    BYTE PTR [esp],al
c0012afd:	88 03                	mov    BYTE PTR [ebx],al
c0012aff:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012b06:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012b0c:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012b10:	bf 03 00 00 00       	mov    edi,0x3
c0012b15:	b8 03 00 00 00       	mov    eax,0x3
c0012b1a:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012b1d:	84 d2                	test   dl,dl
c0012b1f:	0f 84 91 00 00 00    	je     c0012bb6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012b25:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012b28:	80 fa 5c             	cmp    dl,0x5c
c0012b2b:	74 05                	je     c0012b32 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012b2d:	80 fa 2f             	cmp    dl,0x2f
c0012b30:	75 12                	jne    c0012b44 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b32:	89 c5                	mov    ebp,eax
c0012b34:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012b39:	74 09                	je     c0012b44 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012b3b:	40                   	inc    eax
c0012b3c:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012b40:	89 cf                	mov    edi,ecx
c0012b42:	eb d6                	jmp    c0012b1a <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012b44:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012b49:	75 5b                	jne    c0012ba6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b4b:	80 fa 2e             	cmp    dl,0x2e
c0012b4e:	75 56                	jne    c0012ba6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012b50:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012b54:	74 19                	je     c0012b6f <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012b56:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b5b:	74 53                	je     c0012bb0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b5d:	89 f9                	mov    ecx,edi
c0012b5f:	41                   	inc    ecx
c0012b60:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b63:	80 fa 2f             	cmp    dl,0x2f
c0012b66:	74 f7                	je     c0012b5f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b68:	80 fa 5c             	cmp    dl,0x5c
c0012b6b:	74 f2                	je     c0012b5f <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012b6d:	eb d1                	jmp    c0012b40 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b6f:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012b74:	74 3a                	je     c0012bb0 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012b76:	83 f8 03             	cmp    eax,0x3
c0012b79:	74 c5                	je     c0012b40 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012b7b:	41                   	inc    ecx
c0012b7c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012b7f:	80 fa 2f             	cmp    dl,0x2f
c0012b82:	74 f7                	je     c0012b7b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b84:	80 fa 5c             	cmp    dl,0x5c
c0012b87:	74 f2                	je     c0012b7b <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012b89:	48                   	dec    eax
c0012b8a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b8e:	75 06                	jne    c0012b96 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012b90:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012b94:	eb f3                	jmp    c0012b89 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012b96:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012b9a:	74 07                	je     c0012ba3 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012b9c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012ba0:	48                   	dec    eax
c0012ba1:	eb f3                	jmp    c0012b96 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012ba3:	40                   	inc    eax
c0012ba4:	eb 9a                	jmp    c0012b40 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012ba6:	80 fa 2f             	cmp    dl,0x2f
c0012ba9:	74 95                	je     c0012b40 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bab:	80 fa 5c             	cmp    dl,0x5c
c0012bae:	74 90                	je     c0012b40 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bb0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012bb3:	40                   	inc    eax
c0012bb4:	eb 8a                	jmp    c0012b40 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012bb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012bba:	83 ec 0c             	sub    esp,0xc
c0012bbd:	53                   	push   ebx
c0012bbe:	e8 a9 db fe ff       	call   c000076c <strlen>
c0012bc3:	83 c4 10             	add    esp,0x10
c0012bc6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012bcb:	75 26                	jne    c0012bf3 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012bcd:	83 ec 0c             	sub    esp,0xc
c0012bd0:	53                   	push   ebx
c0012bd1:	e8 96 db fe ff       	call   c000076c <strlen>
c0012bd6:	83 c4 10             	add    esp,0x10
c0012bd9:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012bde:	74 26                	je     c0012c06 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012be0:	83 ec 0c             	sub    esp,0xc
c0012be3:	53                   	push   ebx
c0012be4:	e8 83 db fe ff       	call   c000076c <strlen>
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012bf1:	eb c7                	jmp    c0012bba <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012bf3:	83 ec 0c             	sub    esp,0xc
c0012bf6:	53                   	push   ebx
c0012bf7:	e8 70 db fe ff       	call   c000076c <strlen>
c0012bfc:	83 c4 10             	add    esp,0x10
c0012bff:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c04:	74 c7                	je     c0012bcd <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012c06:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012c0c:	5b                   	pop    ebx
c0012c0d:	5e                   	pop    esi
c0012c0e:	5f                   	pop    edi
c0012c0f:	5d                   	pop    ebp
c0012c10:	c3                   	ret    
c0012c11:	90                   	nop

c0012c12 <File::File(char const*, Process*)>:
c0012c12:	83 ec 0c             	sub    esp,0xc
c0012c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c19:	83 ec 08             	sub    esp,0x8
c0012c1c:	6a 00                	push   0x0
c0012c1e:	50                   	push   eax
c0012c1f:	e8 a0 e1 ff ff       	call   c0010dc4 <UnixFile::UnixFile(int)>
c0012c24:	83 c4 10             	add    esp,0x10
c0012c27:	ba f0 a8 02 c0       	mov    edx,0xc002a8f0
c0012c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c30:	89 10                	mov    DWORD PTR [eax],edx
c0012c32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012c36:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c40:	83 c0 0d             	add    eax,0xd
c0012c43:	83 ec 04             	sub    esp,0x4
c0012c46:	52                   	push   edx
c0012c47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012c4b:	50                   	push   eax
c0012c4c:	e8 17 fe ff ff       	call   c0012a68 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012c51:	83 c4 10             	add    esp,0x10
c0012c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c58:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012c5b:	8d 50 bf             	lea    edx,[eax-0x41]
c0012c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c62:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c6c:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012c70:	90                   	nop
c0012c71:	83 c4 0c             	add    esp,0xc
c0012c74:	c3                   	ret    
c0012c75:	90                   	nop

c0012c76 <File::open(FileOpenMode)>:
c0012c76:	53                   	push   ebx
c0012c77:	b8 0b 00 00 00       	mov    eax,0xb
c0012c7c:	83 ec 08             	sub    esp,0x8
c0012c7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c83:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012c8a:	80 fa 19             	cmp    dl,0x19
c0012c8d:	77 40                	ja     c0012ccf <File::open(FileOpenMode)+0x59>
c0012c8f:	8b 14 95 60 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20a0]
c0012c96:	85 d2                	test   edx,edx
c0012c98:	74 35                	je     c0012ccf <File::open(FileOpenMode)+0x59>
c0012c9a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012ca0:	85 d2                	test   edx,edx
c0012ca2:	74 2b                	je     c0012ccf <File::open(FileOpenMode)+0x59>
c0012ca4:	b8 06 00 00 00       	mov    eax,0x6
c0012ca9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012cad:	75 20                	jne    c0012ccf <File::open(FileOpenMode)+0x59>
c0012caf:	8b 02                	mov    eax,DWORD PTR [edx]
c0012cb1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012cb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012cbb:	51                   	push   ecx
c0012cbc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012cbf:	51                   	push   ecx
c0012cc0:	52                   	push   edx
c0012cc1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012cc4:	83 c4 10             	add    esp,0x10
c0012cc7:	85 c0                	test   eax,eax
c0012cc9:	75 04                	jne    c0012ccf <File::open(FileOpenMode)+0x59>
c0012ccb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012ccf:	83 c4 08             	add    esp,0x8
c0012cd2:	5b                   	pop    ebx
c0012cd3:	c3                   	ret    

c0012cd4 <File::close()>:
c0012cd4:	53                   	push   ebx
c0012cd5:	b8 0b 00 00 00       	mov    eax,0xb
c0012cda:	83 ec 08             	sub    esp,0x8
c0012cdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ce1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012ce8:	80 fa 19             	cmp    dl,0x19
c0012ceb:	77 41                	ja     c0012d2e <File::close()+0x5a>
c0012ced:	8b 1c 95 60 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd20a0]
c0012cf4:	85 db                	test   ebx,ebx
c0012cf6:	74 36                	je     c0012d2e <File::close()+0x5a>
c0012cf8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012cff:	74 2d                	je     c0012d2e <File::close()+0x5a>
c0012d01:	b8 05 00 00 00       	mov    eax,0x5
c0012d06:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012d0a:	74 22                	je     c0012d2e <File::close()+0x5a>
c0012d0c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012d10:	8b 04 95 60 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd20a0]
c0012d17:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d1d:	53                   	push   ebx
c0012d1e:	53                   	push   ebx
c0012d1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d21:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012d27:	50                   	push   eax
c0012d28:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012d2b:	83 c4 10             	add    esp,0x10
c0012d2e:	83 c4 08             	add    esp,0x8
c0012d31:	5b                   	pop    ebx
c0012d32:	c3                   	ret    
c0012d33:	90                   	nop

c0012d34 <File::seek(unsigned long long)>:
c0012d34:	56                   	push   esi
c0012d35:	53                   	push   ebx
c0012d36:	b8 0b 00 00 00       	mov    eax,0xb
c0012d3b:	51                   	push   ecx
c0012d3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d44:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012d4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d4f:	80 fa 19             	cmp    dl,0x19
c0012d52:	77 31                	ja     c0012d85 <File::seek(unsigned long long)+0x51>
c0012d54:	8b 14 95 60 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20a0]
c0012d5b:	85 d2                	test   edx,edx
c0012d5d:	74 26                	je     c0012d85 <File::seek(unsigned long long)+0x51>
c0012d5f:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d65:	85 d2                	test   edx,edx
c0012d67:	74 1c                	je     c0012d85 <File::seek(unsigned long long)+0x51>
c0012d69:	b8 05 00 00 00       	mov    eax,0x5
c0012d6e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012d72:	74 11                	je     c0012d85 <File::seek(unsigned long long)+0x51>
c0012d74:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d76:	53                   	push   ebx
c0012d77:	51                   	push   ecx
c0012d78:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012d7e:	52                   	push   edx
c0012d7f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d82:	83 c4 10             	add    esp,0x10
c0012d85:	5a                   	pop    edx
c0012d86:	5b                   	pop    ebx
c0012d87:	5e                   	pop    esi
c0012d88:	c3                   	ret    
c0012d89:	90                   	nop

c0012d8a <File::tell(unsigned long long*)>:
c0012d8a:	83 ec 0c             	sub    esp,0xc
c0012d8d:	b8 0b 00 00 00       	mov    eax,0xb
c0012d92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012d96:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012d9d:	80 fa 19             	cmp    dl,0x19
c0012da0:	77 34                	ja     c0012dd6 <File::tell(unsigned long long*)+0x4c>
c0012da2:	8b 14 95 60 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20a0]
c0012da9:	85 d2                	test   edx,edx
c0012dab:	74 29                	je     c0012dd6 <File::tell(unsigned long long*)+0x4c>
c0012dad:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012db3:	85 d2                	test   edx,edx
c0012db5:	74 1f                	je     c0012dd6 <File::tell(unsigned long long*)+0x4c>
c0012db7:	b8 05 00 00 00       	mov    eax,0x5
c0012dbc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012dc0:	74 14                	je     c0012dd6 <File::tell(unsigned long long*)+0x4c>
c0012dc2:	50                   	push   eax
c0012dc3:	8b 02                	mov    eax,DWORD PTR [edx]
c0012dc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dc9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012dcf:	52                   	push   edx
c0012dd0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012dd3:	83 c4 10             	add    esp,0x10
c0012dd6:	83 c4 0c             	add    esp,0xc
c0012dd9:	c3                   	ret    

c0012dda <File::rewind()>:
c0012dda:	83 ec 10             	sub    esp,0x10
c0012ddd:	6a 00                	push   0x0
c0012ddf:	6a 00                	push   0x0
c0012de1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012de5:	e8 4a ff ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c0012dea:	83 c4 1c             	add    esp,0x1c
c0012ded:	c3                   	ret    

c0012dee <File::unlink()>:
c0012dee:	83 ec 0c             	sub    esp,0xc
c0012df1:	b8 0b 00 00 00       	mov    eax,0xb
c0012df6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012dfa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e01:	80 f9 19             	cmp    cl,0x19
c0012e04:	77 2f                	ja     c0012e35 <File::unlink()+0x47>
c0012e06:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c0012e0d:	85 c9                	test   ecx,ecx
c0012e0f:	74 24                	je     c0012e35 <File::unlink()+0x47>
c0012e11:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e17:	85 c9                	test   ecx,ecx
c0012e19:	74 1a                	je     c0012e35 <File::unlink()+0x47>
c0012e1b:	b8 06 00 00 00       	mov    eax,0x6
c0012e20:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e24:	75 0f                	jne    c0012e35 <File::unlink()+0x47>
c0012e26:	83 c2 0d             	add    edx,0xd
c0012e29:	50                   	push   eax
c0012e2a:	50                   	push   eax
c0012e2b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e2d:	52                   	push   edx
c0012e2e:	51                   	push   ecx
c0012e2f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012e32:	83 c4 10             	add    esp,0x10
c0012e35:	83 c4 0c             	add    esp,0xc
c0012e38:	c3                   	ret    
c0012e39:	90                   	nop

c0012e3a <File::rename(char const*)>:
c0012e3a:	83 ec 0c             	sub    esp,0xc
c0012e3d:	b8 0b 00 00 00       	mov    eax,0xb
c0012e42:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e46:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e4d:	80 f9 19             	cmp    cl,0x19
c0012e50:	77 32                	ja     c0012e84 <File::rename(char const*)+0x4a>
c0012e52:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c0012e59:	85 c9                	test   ecx,ecx
c0012e5b:	74 27                	je     c0012e84 <File::rename(char const*)+0x4a>
c0012e5d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012e63:	85 c9                	test   ecx,ecx
c0012e65:	74 1d                	je     c0012e84 <File::rename(char const*)+0x4a>
c0012e67:	b8 06 00 00 00       	mov    eax,0x6
c0012e6c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012e70:	75 12                	jne    c0012e84 <File::rename(char const*)+0x4a>
c0012e72:	83 c2 0d             	add    edx,0xd
c0012e75:	50                   	push   eax
c0012e76:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012e78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e7c:	52                   	push   edx
c0012e7d:	51                   	push   ecx
c0012e7e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012e81:	83 c4 10             	add    esp,0x10
c0012e84:	83 c4 0c             	add    esp,0xc
c0012e87:	c3                   	ret    

c0012e88 <File::chfatattr(unsigned char, unsigned char)>:
c0012e88:	57                   	push   edi
c0012e89:	b8 0b 00 00 00       	mov    eax,0xb
c0012e8e:	56                   	push   esi
c0012e8f:	53                   	push   ebx
c0012e90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012e94:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e98:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012e9f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012ea3:	80 f9 19             	cmp    cl,0x19
c0012ea6:	77 37                	ja     c0012edf <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ea8:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c0012eaf:	85 c9                	test   ecx,ecx
c0012eb1:	74 2c                	je     c0012edf <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012eb3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eb9:	85 c9                	test   ecx,ecx
c0012ebb:	74 22                	je     c0012edf <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ebd:	b8 06 00 00 00       	mov    eax,0x6
c0012ec2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ec6:	75 17                	jne    c0012edf <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012ec8:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012eca:	89 f0                	mov    eax,esi
c0012ecc:	83 c2 0d             	add    edx,0xd
c0012ecf:	0f b6 f0             	movzx  esi,al
c0012ed2:	0f b6 db             	movzx  ebx,bl
c0012ed5:	56                   	push   esi
c0012ed6:	53                   	push   ebx
c0012ed7:	52                   	push   edx
c0012ed8:	51                   	push   ecx
c0012ed9:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012edc:	83 c4 10             	add    esp,0x10
c0012edf:	5b                   	pop    ebx
c0012ee0:	5e                   	pop    esi
c0012ee1:	5f                   	pop    edi
c0012ee2:	c3                   	ret    
c0012ee3:	90                   	nop

c0012ee4 <File::exists()>:
c0012ee4:	83 ec 0c             	sub    esp,0xc
c0012ee7:	31 c0                	xor    eax,eax
c0012ee9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012eed:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ef4:	80 f9 19             	cmp    cl,0x19
c0012ef7:	77 24                	ja     c0012f1d <File::exists()+0x39>
c0012ef9:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c0012f00:	85 c9                	test   ecx,ecx
c0012f02:	74 19                	je     c0012f1d <File::exists()+0x39>
c0012f04:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f0a:	85 c9                	test   ecx,ecx
c0012f0c:	74 0f                	je     c0012f1d <File::exists()+0x39>
c0012f0e:	83 c2 0d             	add    edx,0xd
c0012f11:	50                   	push   eax
c0012f12:	50                   	push   eax
c0012f13:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f15:	52                   	push   edx
c0012f16:	51                   	push   ecx
c0012f17:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f1a:	83 c4 10             	add    esp,0x10
c0012f1d:	83 c4 0c             	add    esp,0xc
c0012f20:	c3                   	ret    
c0012f21:	90                   	nop

c0012f22 <File::stat(unsigned long long*, bool*)>:
c0012f22:	56                   	push   esi
c0012f23:	53                   	push   ebx
c0012f24:	50                   	push   eax
c0012f25:	b8 0b 00 00 00       	mov    eax,0xb
c0012f2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f2e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012f32:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f39:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f3d:	80 f9 19             	cmp    cl,0x19
c0012f40:	77 3d                	ja     c0012f7f <File::stat(unsigned long long*, bool*)+0x5d>
c0012f42:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c0012f49:	85 c9                	test   ecx,ecx
c0012f4b:	74 32                	je     c0012f7f <File::stat(unsigned long long*, bool*)+0x5d>
c0012f4d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f53:	85 c9                	test   ecx,ecx
c0012f55:	74 28                	je     c0012f7f <File::stat(unsigned long long*, bool*)+0x5d>
c0012f57:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f59:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f5d:	74 13                	je     c0012f72 <File::stat(unsigned long long*, bool*)+0x50>
c0012f5f:	83 ec 04             	sub    esp,0x4
c0012f62:	56                   	push   esi
c0012f63:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012f69:	51                   	push   ecx
c0012f6a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012f6d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012f70:	eb 0a                	jmp    c0012f7c <File::stat(unsigned long long*, bool*)+0x5a>
c0012f72:	53                   	push   ebx
c0012f73:	83 c2 0d             	add    edx,0xd
c0012f76:	56                   	push   esi
c0012f77:	52                   	push   edx
c0012f78:	51                   	push   ecx
c0012f79:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012f7c:	83 c4 10             	add    esp,0x10
c0012f7f:	5a                   	pop    edx
c0012f80:	5b                   	pop    ebx
c0012f81:	5e                   	pop    esi
c0012f82:	c3                   	ret    

c0012f83 <Fs::setcwd(Process*, char*)>:
c0012f83:	55                   	push   ebp
c0012f84:	57                   	push   edi
c0012f85:	56                   	push   esi
c0012f86:	53                   	push   ebx
c0012f87:	81 ec 20 02 00 00    	sub    esp,0x220
c0012f8d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012f94:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012f9a:	57                   	push   edi
c0012f9b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012fa2:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012fa6:	56                   	push   esi
c0012fa7:	e8 bc fa ff ff       	call   c0012a68 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012fac:	89 34 24             	mov    DWORD PTR [esp],esi
c0012faf:	e8 b8 d7 fe ff       	call   c000076c <strlen>
c0012fb4:	83 c4 10             	add    esp,0x10
c0012fb7:	83 f8 02             	cmp    eax,0x2
c0012fba:	77 17                	ja     c0012fd3 <Fs::setcwd(Process*, char*)+0x50>
c0012fbc:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012fc1:	83 e8 41             	sub    eax,0x41
c0012fc4:	83 f8 19             	cmp    eax,0x19
c0012fc7:	76 24                	jbe    c0012fed <Fs::setcwd(Process*, char*)+0x6a>
c0012fc9:	b8 03 00 00 00       	mov    eax,0x3
c0012fce:	e9 e0 00 00 00       	jmp    c00130b3 <Fs::setcwd(Process*, char*)+0x130>
c0012fd3:	83 ec 0c             	sub    esp,0xc
c0012fd6:	56                   	push   esi
c0012fd7:	e8 90 d7 fe ff       	call   c000076c <strlen>
c0012fdc:	83 c4 10             	add    esp,0x10
c0012fdf:	83 f8 03             	cmp    eax,0x3
c0012fe2:	75 34                	jne    c0013018 <Fs::setcwd(Process*, char*)+0x95>
c0012fe4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012fe9:	75 2d                	jne    c0013018 <Fs::setcwd(Process*, char*)+0x95>
c0012feb:	eb cf                	jmp    c0012fbc <Fs::setcwd(Process*, char*)+0x39>
c0012fed:	8b 14 85 60 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd20a0]
c0012ff4:	b8 05 00 00 00       	mov    eax,0x5
c0012ff9:	85 d2                	test   edx,edx
c0012ffb:	0f 84 b2 00 00 00    	je     c00130b3 <Fs::setcwd(Process*, char*)+0x130>
c0013001:	b8 06 00 00 00       	mov    eax,0x6
c0013006:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001300d:	0f 85 92 00 00 00    	jne    c00130a5 <Fs::setcwd(Process*, char*)+0x122>
c0013013:	e9 9b 00 00 00       	jmp    c00130b3 <Fs::setcwd(Process*, char*)+0x130>
c0013018:	83 ec 0c             	sub    esp,0xc
c001301b:	68 14 01 00 00       	push   0x114
c0013020:	e8 74 c5 ff ff       	call   c000f599 <malloc>
c0013025:	83 c4 0c             	add    esp,0xc
c0013028:	89 c3                	mov    ebx,eax
c001302a:	55                   	push   ebp
c001302b:	56                   	push   esi
c001302c:	50                   	push   eax
c001302d:	e8 e0 fb ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c0013032:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013037:	83 c4 0c             	add    esp,0xc
c001303a:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001303e:	50                   	push   eax
c001303f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013043:	50                   	push   eax
c0013044:	53                   	push   ebx
c0013045:	e8 d8 fe ff ff       	call   c0012f22 <File::stat(unsigned long long*, bool*)>
c001304a:	83 c4 10             	add    esp,0x10
c001304d:	83 f8 02             	cmp    eax,0x2
c0013050:	74 04                	je     c0013056 <Fs::setcwd(Process*, char*)+0xd3>
c0013052:	85 c0                	test   eax,eax
c0013054:	74 1c                	je     c0013072 <Fs::setcwd(Process*, char*)+0xef>
c0013056:	b8 01 00 00 00       	mov    eax,0x1
c001305b:	85 db                	test   ebx,ebx
c001305d:	74 54                	je     c00130b3 <Fs::setcwd(Process*, char*)+0x130>
c001305f:	83 ec 0c             	sub    esp,0xc
c0013062:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013064:	53                   	push   ebx
c0013065:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013068:	83 c4 10             	add    esp,0x10
c001306b:	b8 01 00 00 00       	mov    eax,0x1
c0013070:	eb 41                	jmp    c00130b3 <Fs::setcwd(Process*, char*)+0x130>
c0013072:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013077:	75 1c                	jne    c0013095 <Fs::setcwd(Process*, char*)+0x112>
c0013079:	b8 02 00 00 00       	mov    eax,0x2
c001307e:	85 db                	test   ebx,ebx
c0013080:	74 31                	je     c00130b3 <Fs::setcwd(Process*, char*)+0x130>
c0013082:	83 ec 0c             	sub    esp,0xc
c0013085:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013087:	53                   	push   ebx
c0013088:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001308b:	83 c4 10             	add    esp,0x10
c001308e:	b8 02 00 00 00       	mov    eax,0x2
c0013093:	eb 1e                	jmp    c00130b3 <Fs::setcwd(Process*, char*)+0x130>
c0013095:	85 db                	test   ebx,ebx
c0013097:	74 0c                	je     c00130a5 <Fs::setcwd(Process*, char*)+0x122>
c0013099:	83 ec 0c             	sub    esp,0xc
c001309c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001309e:	53                   	push   ebx
c001309f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00130a2:	83 c4 10             	add    esp,0x10
c00130a5:	50                   	push   eax
c00130a6:	50                   	push   eax
c00130a7:	56                   	push   esi
c00130a8:	57                   	push   edi
c00130a9:	e8 5e d7 fe ff       	call   c000080c <strcpy>
c00130ae:	83 c4 10             	add    esp,0x10
c00130b1:	31 c0                	xor    eax,eax
c00130b3:	81 c4 1c 02 00 00    	add    esp,0x21c
c00130b9:	5b                   	pop    ebx
c00130ba:	5e                   	pop    esi
c00130bb:	5f                   	pop    edi
c00130bc:	5d                   	pop    ebp
c00130bd:	c3                   	ret    

c00130be <Directory::Directory(char const*, Process*)>:
c00130be:	83 ec 0c             	sub    esp,0xc
c00130c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c5:	83 ec 08             	sub    esp,0x8
c00130c8:	6a 00                	push   0x0
c00130ca:	50                   	push   eax
c00130cb:	e8 f4 dc ff ff       	call   c0010dc4 <UnixFile::UnixFile(int)>
c00130d0:	83 c4 10             	add    esp,0x10
c00130d3:	ba 0c a9 02 c0       	mov    edx,0xc002a90c
c00130d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130dc:	89 10                	mov    DWORD PTR [eax],edx
c00130de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130e2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ec:	83 c0 0d             	add    eax,0xd
c00130ef:	83 ec 04             	sub    esp,0x4
c00130f2:	52                   	push   edx
c00130f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f7:	50                   	push   eax
c00130f8:	e8 6b f9 ff ff       	call   c0012a68 <Fs::standardiseFiles(char*, char const*, char const*)>
c00130fd:	83 c4 10             	add    esp,0x10
c0013100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013104:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013107:	8d 50 bf             	lea    edx,[eax-0x41]
c001310a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013118:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001311c:	90                   	nop
c001311d:	83 c4 0c             	add    esp,0xc
c0013120:	c3                   	ret    
c0013121:	90                   	nop

c0013122 <Directory::open()>:
c0013122:	53                   	push   ebx
c0013123:	b8 0b 00 00 00       	mov    eax,0xb
c0013128:	83 ec 08             	sub    esp,0x8
c001312b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001312f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013136:	80 fa 19             	cmp    dl,0x19
c0013139:	77 3d                	ja     c0013178 <Directory::open()+0x56>
c001313b:	8b 14 95 60 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20a0]
c0013142:	85 d2                	test   edx,edx
c0013144:	74 32                	je     c0013178 <Directory::open()+0x56>
c0013146:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001314c:	85 d2                	test   edx,edx
c001314e:	74 28                	je     c0013178 <Directory::open()+0x56>
c0013150:	b8 06 00 00 00       	mov    eax,0x6
c0013155:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013159:	75 1d                	jne    c0013178 <Directory::open()+0x56>
c001315b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013161:	50                   	push   eax
c0013162:	8b 02                	mov    eax,DWORD PTR [edx]
c0013164:	51                   	push   ecx
c0013165:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013168:	51                   	push   ecx
c0013169:	52                   	push   edx
c001316a:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001316d:	83 c4 10             	add    esp,0x10
c0013170:	85 c0                	test   eax,eax
c0013172:	75 04                	jne    c0013178 <Directory::open()+0x56>
c0013174:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013178:	83 c4 08             	add    esp,0x8
c001317b:	5b                   	pop    ebx
c001317c:	c3                   	ret    
c001317d:	90                   	nop

c001317e <Directory::close()>:
c001317e:	53                   	push   ebx
c001317f:	b8 0b 00 00 00       	mov    eax,0xb
c0013184:	83 ec 08             	sub    esp,0x8
c0013187:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001318b:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013192:	80 fa 19             	cmp    dl,0x19
c0013195:	77 41                	ja     c00131d8 <Directory::close()+0x5a>
c0013197:	8b 1c 95 60 df 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd20a0]
c001319e:	85 db                	test   ebx,ebx
c00131a0:	74 36                	je     c00131d8 <Directory::close()+0x5a>
c00131a2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131a9:	74 2d                	je     c00131d8 <Directory::close()+0x5a>
c00131ab:	b8 05 00 00 00       	mov    eax,0x5
c00131b0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131b4:	74 22                	je     c00131d8 <Directory::close()+0x5a>
c00131b6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131ba:	8b 04 95 60 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd20a0]
c00131c1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131c7:	53                   	push   ebx
c00131c8:	53                   	push   ebx
c00131c9:	8b 10                	mov    edx,DWORD PTR [eax]
c00131cb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131d1:	50                   	push   eax
c00131d2:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00131d5:	83 c4 10             	add    esp,0x10
c00131d8:	83 c4 08             	add    esp,0x8
c00131db:	5b                   	pop    ebx
c00131dc:	c3                   	ret    
c00131dd:	90                   	nop

c00131de <Directory::unlink()>:
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	b8 0b 00 00 00       	mov    eax,0xb
c00131e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00131ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00131f1:	80 f9 19             	cmp    cl,0x19
c00131f4:	77 2f                	ja     c0013225 <Directory::unlink()+0x47>
c00131f6:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c00131fd:	85 c9                	test   ecx,ecx
c00131ff:	74 24                	je     c0013225 <Directory::unlink()+0x47>
c0013201:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013207:	85 c9                	test   ecx,ecx
c0013209:	74 1a                	je     c0013225 <Directory::unlink()+0x47>
c001320b:	b8 06 00 00 00       	mov    eax,0x6
c0013210:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013214:	75 0f                	jne    c0013225 <Directory::unlink()+0x47>
c0013216:	83 c2 0d             	add    edx,0xd
c0013219:	50                   	push   eax
c001321a:	50                   	push   eax
c001321b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001321d:	52                   	push   edx
c001321e:	51                   	push   ecx
c001321f:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013222:	83 c4 10             	add    esp,0x10
c0013225:	83 c4 0c             	add    esp,0xc
c0013228:	c3                   	ret    
c0013229:	90                   	nop

c001322a <Directory::rename(char const*)>:
c001322a:	83 ec 0c             	sub    esp,0xc
c001322d:	b8 0b 00 00 00       	mov    eax,0xb
c0013232:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013236:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001323d:	80 f9 19             	cmp    cl,0x19
c0013240:	77 32                	ja     c0013274 <Directory::rename(char const*)+0x4a>
c0013242:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c0013249:	85 c9                	test   ecx,ecx
c001324b:	74 27                	je     c0013274 <Directory::rename(char const*)+0x4a>
c001324d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013253:	85 c9                	test   ecx,ecx
c0013255:	74 1d                	je     c0013274 <Directory::rename(char const*)+0x4a>
c0013257:	b8 06 00 00 00       	mov    eax,0x6
c001325c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013260:	75 12                	jne    c0013274 <Directory::rename(char const*)+0x4a>
c0013262:	83 c2 0d             	add    edx,0xd
c0013265:	50                   	push   eax
c0013266:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013268:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001326c:	52                   	push   edx
c001326d:	51                   	push   ecx
c001326e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013271:	83 c4 10             	add    esp,0x10
c0013274:	83 c4 0c             	add    esp,0xc
c0013277:	c3                   	ret    

c0013278 <Directory::exists()>:
c0013278:	83 ec 0c             	sub    esp,0xc
c001327b:	31 c0                	xor    eax,eax
c001327d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013281:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013288:	80 f9 19             	cmp    cl,0x19
c001328b:	77 24                	ja     c00132b1 <Directory::exists()+0x39>
c001328d:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c0013294:	85 c9                	test   ecx,ecx
c0013296:	74 19                	je     c00132b1 <Directory::exists()+0x39>
c0013298:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001329e:	85 c9                	test   ecx,ecx
c00132a0:	74 0f                	je     c00132b1 <Directory::exists()+0x39>
c00132a2:	83 c2 0d             	add    edx,0xd
c00132a5:	50                   	push   eax
c00132a6:	50                   	push   eax
c00132a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132a9:	52                   	push   edx
c00132aa:	51                   	push   ecx
c00132ab:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00132ae:	83 c4 10             	add    esp,0x10
c00132b1:	83 c4 0c             	add    esp,0xc
c00132b4:	c3                   	ret    
c00132b5:	90                   	nop

c00132b6 <Directory::read(dirent*)>:
c00132b6:	83 ec 1c             	sub    esp,0x1c
c00132b9:	b8 0b 00 00 00       	mov    eax,0xb
c00132be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00132c2:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00132c9:	80 fa 19             	cmp    dl,0x19
c00132cc:	77 30                	ja     c00132fe <Directory::read(dirent*)+0x48>
c00132ce:	8b 14 95 60 df 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd20a0]
c00132d5:	85 d2                	test   edx,edx
c00132d7:	74 25                	je     c00132fe <Directory::read(dirent*)+0x48>
c00132d9:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00132e0:	74 1c                	je     c00132fe <Directory::read(dirent*)+0x48>
c00132e2:	83 ec 0c             	sub    esp,0xc
c00132e5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132e7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00132eb:	52                   	push   edx
c00132ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00132f0:	6a 00                	push   0x0
c00132f2:	68 10 01 00 00       	push   0x110
c00132f7:	51                   	push   ecx
c00132f8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00132fb:	83 c4 20             	add    esp,0x20
c00132fe:	83 c4 1c             	add    esp,0x1c
c0013301:	c3                   	ret    

c0013302 <Directory::create()>:
c0013302:	83 ec 0c             	sub    esp,0xc
c0013305:	b8 0b 00 00 00       	mov    eax,0xb
c001330a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001330e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013315:	80 f9 19             	cmp    cl,0x19
c0013318:	77 2f                	ja     c0013349 <Directory::create()+0x47>
c001331a:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c0013321:	85 c9                	test   ecx,ecx
c0013323:	74 24                	je     c0013349 <Directory::create()+0x47>
c0013325:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001332b:	85 c9                	test   ecx,ecx
c001332d:	74 1a                	je     c0013349 <Directory::create()+0x47>
c001332f:	b8 06 00 00 00       	mov    eax,0x6
c0013334:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013338:	75 0f                	jne    c0013349 <Directory::create()+0x47>
c001333a:	83 c2 0d             	add    edx,0xd
c001333d:	50                   	push   eax
c001333e:	50                   	push   eax
c001333f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013341:	52                   	push   edx
c0013342:	51                   	push   ecx
c0013343:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013346:	83 c4 10             	add    esp,0x10
c0013349:	83 c4 0c             	add    esp,0xc
c001334c:	c3                   	ret    
c001334d:	90                   	nop

c001334e <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c001334e:	b8 0a 00 00 00       	mov    eax,0xa
c0013353:	c3                   	ret    

c0013354 <Bus::Bus(char const*)>:
c0013354:	83 ec 0c             	sub    esp,0xc
c0013357:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001335b:	83 ec 08             	sub    esp,0x8
c001335e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013362:	50                   	push   eax
c0013363:	e8 88 09 00 00       	call   c0013cf0 <Device::Device(char const*)>
c0013368:	83 c4 10             	add    esp,0x10
c001336b:	ba 28 a9 02 c0       	mov    edx,0xc002a928
c0013370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013374:	89 10                	mov    DWORD PTR [eax],edx
c0013376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013384:	90                   	nop
c0013385:	83 c4 0c             	add    esp,0xc
c0013388:	c3                   	ret    
c0013389:	90                   	nop

c001338a <Bus::~Bus()>:
c001338a:	83 ec 0c             	sub    esp,0xc
c001338d:	ba 28 a9 02 c0       	mov    edx,0xc002a928
c0013392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013396:	89 10                	mov    DWORD PTR [eax],edx
c0013398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001339c:	83 ec 0c             	sub    esp,0xc
c001339f:	50                   	push   eax
c00133a0:	e8 15 06 00 00       	call   c00139ba <Device::~Device()>
c00133a5:	83 c4 10             	add    esp,0x10
c00133a8:	90                   	nop
c00133a9:	83 c4 0c             	add    esp,0xc
c00133ac:	c3                   	ret    
c00133ad:	90                   	nop

c00133ae <Bus::~Bus()>:
c00133ae:	83 ec 0c             	sub    esp,0xc
c00133b1:	83 ec 0c             	sub    esp,0xc
c00133b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133b8:	e8 cd ff ff ff       	call   c001338a <Bus::~Bus()>
c00133bd:	83 c4 10             	add    esp,0x10
c00133c0:	83 ec 08             	sub    esp,0x8
c00133c3:	68 58 01 00 00       	push   0x158
c00133c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133cc:	e8 0a f2 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c00133d1:	83 c4 10             	add    esp,0x10
c00133d4:	83 c4 0c             	add    esp,0xc
c00133d7:	c3                   	ret    

c00133d8 <Buzzer::Buzzer(char const*)>:
c00133d8:	83 ec 0c             	sub    esp,0xc
c00133db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133df:	83 ec 08             	sub    esp,0x8
c00133e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133e6:	50                   	push   eax
c00133e7:	e8 04 09 00 00       	call   c0013cf0 <Device::Device(char const*)>
c00133ec:	83 c4 10             	add    esp,0x10
c00133ef:	ba 54 a9 02 c0       	mov    edx,0xc002a954
c00133f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f8:	89 10                	mov    DWORD PTR [eax],edx
c00133fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340c:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013416:	90                   	nop
c0013417:	83 c4 0c             	add    esp,0xc
c001341a:	c3                   	ret    
c001341b:	90                   	nop

c001341c <Buzzer::~Buzzer()>:
c001341c:	83 ec 0c             	sub    esp,0xc
c001341f:	ba 54 a9 02 c0       	mov    edx,0xc002a954
c0013424:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013428:	89 10                	mov    DWORD PTR [eax],edx
c001342a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001342e:	83 ec 0c             	sub    esp,0xc
c0013431:	50                   	push   eax
c0013432:	e8 83 05 00 00       	call   c00139ba <Device::~Device()>
c0013437:	83 c4 10             	add    esp,0x10
c001343a:	90                   	nop
c001343b:	83 c4 0c             	add    esp,0xc
c001343e:	c3                   	ret    
c001343f:	90                   	nop

c0013440 <Buzzer::~Buzzer()>:
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	83 ec 0c             	sub    esp,0xc
c0013446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001344a:	e8 cd ff ff ff       	call   c001341c <Buzzer::~Buzzer()>
c001344f:	83 c4 10             	add    esp,0x10
c0013452:	83 ec 08             	sub    esp,0x8
c0013455:	68 5c 01 00 00       	push   0x15c
c001345a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001345e:	e8 78 f1 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0013463:	83 c4 10             	add    esp,0x10
c0013466:	83 c4 0c             	add    esp,0xc
c0013469:	c3                   	ret    

c001346a <Buzzer::stop()>:
c001346a:	83 ec 14             	sub    esp,0x14
c001346d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013471:	8b 10                	mov    edx,DWORD PTR [eax]
c0013473:	6a 00                	push   0x0
c0013475:	50                   	push   eax
c0013476:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013479:	83 c4 1c             	add    esp,0x1c
c001347c:	c3                   	ret    

c001347d <beepThread(void*)>:
c001347d:	53                   	push   ebx
c001347e:	83 ec 08             	sub    esp,0x8
c0013481:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0013486:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001348a:	48                   	dec    eax
c001348b:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0013490:	75 01                	jne    c0013493 <beepThread(void*)+0x16>
c0013492:	fb                   	sti    
c0013493:	50                   	push   eax
c0013494:	50                   	push   eax
c0013495:	b8 40 42 0f 00       	mov    eax,0xf4240
c001349a:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c00134a0:	52                   	push   edx
c00134a1:	50                   	push   eax
c00134a2:	e8 dc a7 00 00       	call   c001dc83 <nanoSleep(unsigned long long)>
c00134a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00134aa:	e8 bb ff ff ff       	call   c001346a <Buzzer::stop()>
c00134af:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00134b7:	83 c4 18             	add    esp,0x18
c00134ba:	5b                   	pop    ebx
c00134bb:	e9 bf a6 00 00       	jmp    c001db7f <blockTask(TaskState)>

c00134c0 <Buzzer::beep(int, int, bool)>:
c00134c0:	57                   	push   edi
c00134c1:	56                   	push   esi
c00134c2:	53                   	push   ebx
c00134c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00134cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134cf:	52                   	push   edx
c00134d0:	52                   	push   edx
c00134d1:	8b 06                	mov    eax,DWORD PTR [esi]
c00134d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d7:	56                   	push   esi
c00134d8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00134db:	83 c4 10             	add    esp,0x10
c00134de:	89 f8                	mov    eax,edi
c00134e0:	84 c0                	test   al,al
c00134e2:	74 1f                	je     c0013503 <Buzzer::beep(int, int, bool)+0x43>
c00134e4:	50                   	push   eax
c00134e5:	50                   	push   eax
c00134e6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00134ec:	99                   	cdq    
c00134ed:	52                   	push   edx
c00134ee:	50                   	push   eax
c00134ef:	e8 8f a7 00 00       	call   c001dc83 <nanoSleep(unsigned long long)>
c00134f4:	83 c4 10             	add    esp,0x10
c00134f7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134fb:	5b                   	pop    ebx
c00134fc:	5e                   	pop    esi
c00134fd:	5f                   	pop    edi
c00134fe:	e9 67 ff ff ff       	jmp    c001346a <Buzzer::stop()>
c0013503:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013509:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001350e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013516:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001351a:	c7 44 24 14 7d 34 01 c0 	mov    DWORD PTR [esp+0x14],0xc001347d
c0013522:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013526:	5b                   	pop    ebx
c0013527:	5e                   	pop    esi
c0013528:	5f                   	pop    edi
c0013529:	e9 56 a2 00 00       	jmp    c001d784 <Process::createThread(void (*)(void*), void*, int)>

c001352e <User::loadClockSettings(int)>:
c001352e:	53                   	push   ebx
c001352f:	83 ec 14             	sub    esp,0x14
c0013532:	68 14 01 00 00       	push   0x114
c0013537:	e8 5d c0 ff ff       	call   c000f599 <malloc>
c001353c:	83 c4 0c             	add    esp,0xc
c001353f:	89 c3                	mov    ebx,eax
c0013541:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c0013547:	68 7c a9 02 c0       	push   0xc002a97c
c001354c:	50                   	push   eax
c001354d:	e8 c0 f6 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c0013552:	58                   	pop    eax
c0013553:	5a                   	pop    edx
c0013554:	6a 01                	push   0x1
c0013556:	53                   	push   ebx
c0013557:	e8 1a f7 ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c001355c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001355f:	e8 70 f7 ff ff       	call   c0012cd4 <File::close()>
c0013564:	83 c4 10             	add    esp,0x10
c0013567:	85 db                	test   ebx,ebx
c0013569:	74 0f                	je     c001357a <User::loadClockSettings(int)+0x4c>
c001356b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001356d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013571:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013574:	83 c4 08             	add    esp,0x8
c0013577:	5b                   	pop    ebx
c0013578:	ff e0                	jmp    eax
c001357a:	83 c4 08             	add    esp,0x8
c001357d:	5b                   	pop    ebx
c001357e:	c3                   	ret    
c001357f:	90                   	nop

c0013580 <Clock::Clock(char const*)>:
c0013580:	83 ec 0c             	sub    esp,0xc
c0013583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013587:	83 ec 08             	sub    esp,0x8
c001358a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001358e:	50                   	push   eax
c001358f:	e8 5c 07 00 00       	call   c0013cf0 <Device::Device(char const*)>
c0013594:	83 c4 10             	add    esp,0x10
c0013597:	ba a4 a9 02 c0       	mov    edx,0xc002a9a4
c001359c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a0:	89 10                	mov    DWORD PTR [eax],edx
c00135a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a6:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00135b0:	90                   	nop
c00135b1:	83 c4 0c             	add    esp,0xc
c00135b4:	c3                   	ret    
c00135b5:	90                   	nop

c00135b6 <Clock::~Clock()>:
c00135b6:	83 ec 0c             	sub    esp,0xc
c00135b9:	ba a4 a9 02 c0       	mov    edx,0xc002a9a4
c00135be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c2:	89 10                	mov    DWORD PTR [eax],edx
c00135c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c8:	83 ec 0c             	sub    esp,0xc
c00135cb:	50                   	push   eax
c00135cc:	e8 e9 03 00 00       	call   c00139ba <Device::~Device()>
c00135d1:	83 c4 10             	add    esp,0x10
c00135d4:	90                   	nop
c00135d5:	83 c4 0c             	add    esp,0xc
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop

c00135da <Clock::~Clock()>:
c00135da:	83 ec 0c             	sub    esp,0xc
c00135dd:	83 ec 0c             	sub    esp,0xc
c00135e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135e4:	e8 cd ff ff ff       	call   c00135b6 <Clock::~Clock()>
c00135e9:	83 c4 10             	add    esp,0x10
c00135ec:	83 ec 08             	sub    esp,0x8
c00135ef:	68 58 01 00 00       	push   0x158
c00135f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135f8:	e8 de ef ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c00135fd:	83 c4 10             	add    esp,0x10
c0013600:	83 c4 0c             	add    esp,0xc
c0013603:	c3                   	ret    

c0013604 <Clock::timeInSecondsLocal()>:
c0013604:	53                   	push   ebx
c0013605:	83 ec 14             	sub    esp,0x14
c0013608:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001360c:	8b 10                	mov    edx,DWORD PTR [eax]
c001360e:	50                   	push   eax
c001360f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013612:	0f b6 0d dc da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dadc
c0013619:	03 0d e0 da 02 c0    	add    ecx,DWORD PTR ds:0xc002dae0
c001361f:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013625:	89 cb                	mov    ebx,ecx
c0013627:	c1 fb 1f             	sar    ebx,0x1f
c001362a:	01 c8                	add    eax,ecx
c001362c:	11 da                	adc    edx,ebx
c001362e:	83 c4 10             	add    esp,0x10
c0013631:	31 c9                	xor    ecx,ecx
c0013633:	80 3d dd da 02 c0 00 	cmp    BYTE PTR ds:0xc002dadd,0x0
c001363a:	74 05                	je     c0013641 <Clock::timeInSecondsLocal()+0x3d>
c001363c:	b9 08 07 00 00       	mov    ecx,0x708
c0013641:	31 db                	xor    ebx,ebx
c0013643:	01 c8                	add    eax,ecx
c0013645:	11 da                	adc    edx,ebx
c0013647:	83 c4 08             	add    esp,0x8
c001364a:	5b                   	pop    ebx
c001364b:	c3                   	ret    

c001364c <Clock::setTimeInSecondsLocal(unsigned long long)>:
c001364c:	57                   	push   edi
c001364d:	56                   	push   esi
c001364e:	53                   	push   ebx
c001364f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013653:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013657:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013659:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001365d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013660:	0f b6 05 dc da 02 c0 	movzx  eax,BYTE PTR ds:0xc002dadc
c0013667:	03 05 e0 da 02 c0    	add    eax,DWORD PTR ds:0xc002dae0
c001366d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013673:	99                   	cdq    
c0013674:	29 c6                	sub    esi,eax
c0013676:	19 d7                	sbb    edi,edx
c0013678:	89 f0                	mov    eax,esi
c001367a:	89 fa                	mov    edx,edi
c001367c:	31 f6                	xor    esi,esi
c001367e:	80 3d dd da 02 c0 00 	cmp    BYTE PTR ds:0xc002dadd,0x0
c0013685:	74 05                	je     c001368c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013687:	be 08 07 00 00       	mov    esi,0x708
c001368c:	31 ff                	xor    edi,edi
c001368e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013692:	29 f0                	sub    eax,esi
c0013694:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013698:	19 fa                	sbb    edx,edi
c001369a:	89 d8                	mov    eax,ebx
c001369c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00136a0:	5b                   	pop    ebx
c00136a1:	5e                   	pop    esi
c00136a2:	5f                   	pop    edi
c00136a3:	ff e0                	jmp    eax

c00136a5 <datetimeToSeconds(datetime_t)>:
c00136a5:	55                   	push   ebp
c00136a6:	57                   	push   edi
c00136a7:	56                   	push   esi
c00136a8:	53                   	push   ebx
c00136a9:	83 ec 14             	sub    esp,0x14
c00136ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00136b0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00136b4:	89 d3                	mov    ebx,edx
c00136b6:	0f b6 c6             	movzx  eax,dh
c00136b9:	c1 eb 10             	shr    ebx,0x10
c00136bc:	48                   	dec    eax
c00136bd:	66 81 eb 6c 07       	sub    bx,0x76c
c00136c2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00136c6:	0f b6 f5             	movzx  esi,ch
c00136c9:	89 cf                	mov    edi,ecx
c00136cb:	6b f6 3c             	imul   esi,esi,0x3c
c00136ce:	c1 ef 10             	shr    edi,0x10
c00136d1:	0f b6 c9             	movzx  ecx,cl
c00136d4:	89 f8                	mov    eax,edi
c00136d6:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136dc:	0f b6 f8             	movzx  edi,al
c00136df:	0f b6 d2             	movzx  edx,dl
c00136e2:	01 fe                	add    esi,edi
c00136e4:	01 f1                	add    ecx,esi
c00136e6:	0f b7 f3             	movzx  esi,bx
c00136e9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00136ed:	c1 f9 1f             	sar    ecx,0x1f
c00136f0:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00136f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00136f9:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00136fe:	8b 0c 8d e0 a9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5620]
c0013705:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013709:	76 29                	jbe    c0013734 <datetimeToSeconds(datetime_t)+0x8f>
c001370b:	f6 c3 03             	test   bl,0x3
c001370e:	75 24                	jne    c0013734 <datetimeToSeconds(datetime_t)+0x8f>
c0013710:	31 d2                	xor    edx,edx
c0013712:	bf 64 00 00 00       	mov    edi,0x64
c0013717:	89 d8                	mov    eax,ebx
c0013719:	66 f7 f7             	div    di
c001371c:	66 85 d2             	test   dx,dx
c001371f:	75 12                	jne    c0013733 <datetimeToSeconds(datetime_t)+0x8e>
c0013721:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013727:	bf 90 01 00 00       	mov    edi,0x190
c001372c:	99                   	cdq    
c001372d:	f7 ff                	idiv   edi
c001372f:	85 d2                	test   edx,edx
c0013731:	75 01                	jne    c0013734 <datetimeToSeconds(datetime_t)+0x8f>
c0013733:	41                   	inc    ecx
c0013734:	66 83 fb 46          	cmp    bx,0x46
c0013738:	76 45                	jbe    c001377f <datetimeToSeconds(datetime_t)+0xda>
c001373a:	bb 46 00 00 00       	mov    ebx,0x46
c001373f:	bf 64 00 00 00       	mov    edi,0x64
c0013744:	bd 90 01 00 00       	mov    ebp,0x190
c0013749:	b8 6d 01 00 00       	mov    eax,0x16d
c001374e:	f6 c3 03             	test   bl,0x3
c0013751:	75 23                	jne    c0013776 <datetimeToSeconds(datetime_t)+0xd1>
c0013753:	89 d8                	mov    eax,ebx
c0013755:	99                   	cdq    
c0013756:	f7 ff                	idiv   edi
c0013758:	b8 6e 01 00 00       	mov    eax,0x16e
c001375d:	85 d2                	test   edx,edx
c001375f:	75 15                	jne    c0013776 <datetimeToSeconds(datetime_t)+0xd1>
c0013761:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013767:	99                   	cdq    
c0013768:	f7 fd                	idiv   ebp
c001376a:	83 fa 01             	cmp    edx,0x1
c001376d:	19 c0                	sbb    eax,eax
c001376f:	f7 d0                	not    eax
c0013771:	05 6e 01 00 00       	add    eax,0x16e
c0013776:	01 c1                	add    ecx,eax
c0013778:	43                   	inc    ebx
c0013779:	39 f3                	cmp    ebx,esi
c001377b:	7c cc                	jl     c0013749 <datetimeToSeconds(datetime_t)+0xa4>
c001377d:	eb 35                	jmp    c00137b4 <datetimeToSeconds(datetime_t)+0x10f>
c001377f:	74 33                	je     c00137b4 <datetimeToSeconds(datetime_t)+0x10f>
c0013781:	b8 45 00 00 00       	mov    eax,0x45
c0013786:	89 c2                	mov    edx,eax
c0013788:	83 e2 03             	and    edx,0x3
c001378b:	39 f0                	cmp    eax,esi
c001378d:	7e 0f                	jle    c001379e <datetimeToSeconds(datetime_t)+0xf9>
c001378f:	83 fa 01             	cmp    edx,0x1
c0013792:	19 d2                	sbb    edx,edx
c0013794:	48                   	dec    eax
c0013795:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c001379c:	eb e8                	jmp    c0013786 <datetimeToSeconds(datetime_t)+0xe1>
c001379e:	b8 6d 01 00 00       	mov    eax,0x16d
c00137a3:	85 d2                	test   edx,edx
c00137a5:	75 0b                	jne    c00137b2 <datetimeToSeconds(datetime_t)+0x10d>
c00137a7:	66 83 fb 01          	cmp    bx,0x1
c00137ab:	19 c0                	sbb    eax,eax
c00137ad:	05 6e 01 00 00       	add    eax,0x16e
c00137b2:	29 c1                	sub    ecx,eax
c00137b4:	b8 80 51 01 00       	mov    eax,0x15180
c00137b9:	f7 e9                	imul   ecx
c00137bb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00137bf:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00137c3:	83 c4 14             	add    esp,0x14
c00137c6:	5b                   	pop    ebx
c00137c7:	5e                   	pop    esi
c00137c8:	5f                   	pop    edi
c00137c9:	5d                   	pop    ebp
c00137ca:	c3                   	ret    
c00137cb:	90                   	nop

c00137cc <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00137cc:	57                   	push   edi
c00137cd:	56                   	push   esi
c00137ce:	53                   	push   ebx
c00137cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137d3:	8b 06                	mov    eax,DWORD PTR [esi]
c00137d5:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00137d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137e0:	e8 c0 fe ff ff       	call   c00136a5 <datetimeToSeconds(datetime_t)>
c00137e5:	59                   	pop    ecx
c00137e6:	0f b6 0d dc da 02 c0 	movzx  ecx,BYTE PTR ds:0xc002dadc
c00137ed:	5b                   	pop    ebx
c00137ee:	03 0d e0 da 02 c0    	add    ecx,DWORD PTR ds:0xc002dae0
c00137f4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137fa:	89 cb                	mov    ebx,ecx
c00137fc:	c1 fb 1f             	sar    ebx,0x1f
c00137ff:	29 c8                	sub    eax,ecx
c0013801:	19 da                	sbb    edx,ebx
c0013803:	31 c9                	xor    ecx,ecx
c0013805:	80 3d dd da 02 c0 00 	cmp    BYTE PTR ds:0xc002dadd,0x0
c001380c:	74 05                	je     c0013813 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001380e:	b9 08 07 00 00       	mov    ecx,0x708
c0013813:	31 db                	xor    ebx,ebx
c0013815:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013819:	29 c8                	sub    eax,ecx
c001381b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001381f:	19 da                	sbb    edx,ebx
c0013821:	89 f8                	mov    eax,edi
c0013823:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013827:	5b                   	pop    ebx
c0013828:	5e                   	pop    esi
c0013829:	5f                   	pop    edi
c001382a:	ff e0                	jmp    eax

c001382c <secondsToDatetime(unsigned long long)>:
c001382c:	55                   	push   ebp
c001382d:	57                   	push   edi
c001382e:	56                   	push   esi
c001382f:	53                   	push   ebx
c0013830:	83 ec 1c             	sub    esp,0x1c
c0013833:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013837:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001383b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001383f:	6a 00                	push   0x0
c0013841:	68 80 51 01 00       	push   0x15180
c0013846:	55                   	push   ebp
c0013847:	57                   	push   edi
c0013848:	e8 a7 2e 01 00       	call   c00266f4 <__udivdi3>
c001384d:	83 c4 10             	add    esp,0x10
c0013850:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013856:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001385a:	6a 00                	push   0x0
c001385c:	68 80 51 01 00       	push   0x15180
c0013861:	55                   	push   ebp
c0013862:	57                   	push   edi
c0013863:	bf 10 0e 00 00       	mov    edi,0xe10
c0013868:	e8 87 2f 01 00       	call   c00267f4 <__umoddi3>
c001386d:	83 c4 10             	add    esp,0x10
c0013870:	99                   	cdq    
c0013871:	f7 ff                	idiv   edi
c0013873:	bf 3c 00 00 00       	mov    edi,0x3c
c0013878:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001387b:	89 d0                	mov    eax,edx
c001387d:	99                   	cdq    
c001387e:	f7 ff                	idiv   edi
c0013880:	85 db                	test   ebx,ebx
c0013882:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013885:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013888:	79 11                	jns    c001389b <secondsToDatetime(unsigned long long)+0x6f>
c001388a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001388e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013894:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013899:	eb 07                	jmp    c00138a2 <secondsToDatetime(unsigned long long)+0x76>
c001389b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00138a0:	89 d8                	mov    eax,ebx
c00138a2:	bf b4 05 00 00       	mov    edi,0x5b4
c00138a7:	99                   	cdq    
c00138a8:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00138ad:	f7 f9                	idiv   ecx
c00138af:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00138b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00138b8:	31 d2                	xor    edx,edx
c00138ba:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00138c2:	01 c3                	add    ebx,eax
c00138c4:	89 d8                	mov    eax,ebx
c00138c6:	f7 f1                	div    ecx
c00138c8:	31 d2                	xor    edx,edx
c00138ca:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00138cd:	89 d8                	mov    eax,ebx
c00138cf:	f7 f7                	div    edi
c00138d1:	31 d2                	xor    edx,edx
c00138d3:	29 c1                	sub    ecx,eax
c00138d5:	89 d8                	mov    eax,ebx
c00138d7:	f7 f5                	div    ebp
c00138d9:	bd 6d 01 00 00       	mov    ebp,0x16d
c00138de:	29 c1                	sub    ecx,eax
c00138e0:	31 d2                	xor    edx,edx
c00138e2:	89 c8                	mov    eax,ecx
c00138e4:	f7 f5                	div    ebp
c00138e6:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00138eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00138ef:	31 d2                	xor    edx,edx
c00138f1:	89 c8                	mov    eax,ecx
c00138f3:	f7 f5                	div    ebp
c00138f5:	31 d2                	xor    edx,edx
c00138f7:	01 c3                	add    ebx,eax
c00138f9:	89 c8                	mov    eax,ecx
c00138fb:	f7 f7                	div    edi
c00138fd:	bf 99 00 00 00       	mov    edi,0x99
c0013902:	29 c3                	sub    ebx,eax
c0013904:	31 d2                	xor    edx,edx
c0013906:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001390e:	29 c3                	sub    ebx,eax
c0013910:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013913:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013916:	bb 05 00 00 00       	mov    ebx,0x5
c001391b:	83 c1 02             	add    ecx,0x2
c001391e:	89 c8                	mov    eax,ecx
c0013920:	f7 f7                	div    edi
c0013922:	31 d2                	xor    edx,edx
c0013924:	89 c7                	mov    edi,eax
c0013926:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001392c:	83 c0 02             	add    eax,0x2
c001392f:	f7 f3                	div    ebx
c0013931:	89 eb                	mov    ebx,ebp
c0013933:	29 c3                	sub    ebx,eax
c0013935:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001393b:	88 1e                	mov    BYTE PTR [esi],bl
c001393d:	19 c0                	sbb    eax,eax
c001393f:	31 d2                	xor    edx,edx
c0013941:	83 e0 0c             	and    eax,0xc
c0013944:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013948:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013950:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013954:	83 f9 01             	cmp    ecx,0x1
c0013957:	0f 96 c2             	setbe  dl
c001395a:	41                   	inc    ecx
c001395b:	01 d0                	add    eax,edx
c001395d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013960:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013964:	83 c4 1c             	add    esp,0x1c
c0013967:	89 f0                	mov    eax,esi
c0013969:	5b                   	pop    ebx
c001396a:	5e                   	pop    esi
c001396b:	5f                   	pop    edi
c001396c:	5d                   	pop    ebp
c001396d:	c2 04 00             	ret    0x4

c0013970 <Clock::timeInDatetimeLocal()>:
c0013970:	53                   	push   ebx
c0013971:	83 ec 14             	sub    esp,0x14
c0013974:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013978:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001397c:	e8 83 fc ff ff       	call   c0013604 <Clock::timeInSecondsLocal()>
c0013981:	83 c4 0c             	add    esp,0xc
c0013984:	52                   	push   edx
c0013985:	50                   	push   eax
c0013986:	53                   	push   ebx
c0013987:	e8 a0 fe ff ff       	call   c001382c <secondsToDatetime(unsigned long long)>
c001398c:	89 d8                	mov    eax,ebx
c001398e:	83 c4 14             	add    esp,0x14
c0013991:	5b                   	pop    ebx
c0013992:	c2 04 00             	ret    0x4
c0013995:	90                   	nop

c0013996 <Device::hibernate()>:
c0013996:	c3                   	ret    
c0013997:	90                   	nop

c0013998 <Device::wake()>:
c0013998:	c3                   	ret    
c0013999:	90                   	nop

c001399a <Device::detect()>:
c001399a:	c3                   	ret    
c001399b:	90                   	nop

c001399c <Device::disableLegacy()>:
c001399c:	c3                   	ret    
c001399d:	90                   	nop

c001399e <Device::powerSaving(PowerSavingLevel)>:
c001399e:	c3                   	ret    
c001399f:	90                   	nop

c00139a0 <DriverlessDevice::close(int, int, void*)>:
c00139a0:	31 c0                	xor    eax,eax
c00139a2:	c3                   	ret    
c00139a3:	90                   	nop

c00139a4 <DriverlessDevice::detect()>:
c00139a4:	c3                   	ret    
c00139a5:	90                   	nop

c00139a6 <DriverlessDevice::open(int, int, void*)>:
c00139a6:	83 ec 18             	sub    esp,0x18
c00139a9:	68 10 aa 02 c0       	push   0xc002aa10
c00139ae:	e8 6c 64 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c00139b3:	83 c8 ff             	or     eax,0xffffffff
c00139b6:	83 c4 1c             	add    esp,0x1c
c00139b9:	c3                   	ret    

c00139ba <Device::~Device()>:
c00139ba:	ba 70 aa 02 c0       	mov    edx,0xc002aa70
c00139bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139c3:	89 10                	mov    DWORD PTR [eax],edx
c00139c5:	90                   	nop
c00139c6:	c3                   	ret    
c00139c7:	90                   	nop

c00139c8 <Device::~Device()>:
c00139c8:	83 ec 0c             	sub    esp,0xc
c00139cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00139cf:	e8 e6 ff ff ff       	call   c00139ba <Device::~Device()>
c00139d4:	83 c4 04             	add    esp,0x4
c00139d7:	83 ec 08             	sub    esp,0x8
c00139da:	68 58 01 00 00       	push   0x158
c00139df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139e3:	e8 f3 eb ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	83 c4 0c             	add    esp,0xc
c00139ee:	c3                   	ret    
c00139ef:	90                   	nop

c00139f0 <Device::findAndLoadDriver()>:
c00139f0:	c7 44 24 04 2e aa 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aa2e
c00139f8:	e9 b6 ec ff ff       	jmp    c00126b3 <Dbg::kprintf(char const*, ...)>
c00139fd:	90                   	nop

c00139fe <Device::preOpenPCI(PCIDeviceInfo)>:
c00139fe:	57                   	push   edi
c00139ff:	b9 09 00 00 00       	mov    ecx,0x9
c0013a04:	56                   	push   esi
c0013a05:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013a09:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013a0d:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013a17:	81 c7 18 01 00 00    	add    edi,0x118
c0013a1d:	fc                   	cld    
c0013a1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013a20:	5e                   	pop    esi
c0013a21:	5f                   	pop    edi
c0013a22:	c3                   	ret    
c0013a23:	90                   	nop

c0013a24 <Device::preOpenACPI(void*, char*, char*)>:
c0013a24:	57                   	push   edi
c0013a25:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013a2a:	56                   	push   esi
c0013a2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a33:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013a3d:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013a43:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013a49:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013a4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a4f:	b9 0e 00 00 00       	mov    ecx,0xe
c0013a54:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013a5a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013a5e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a60:	5e                   	pop    esi
c0013a61:	5f                   	pop    edi
c0013a62:	c3                   	ret    
c0013a63:	90                   	nop

c0013a64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013a64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a68:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013a6d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013a74:	75 0b                	jne    c0013a81 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013a76:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a78:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a7c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013a7f:	eb 1e                	jmp    c0013a9f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013a81:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0013a86:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013a8c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013a92:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013a94:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013a98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013a9c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013a9f:	ff e0                	jmp    eax
c0013aa1:	90                   	nop

c0013aa2 <Device::getParent()>:
c0013aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aa6:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013aac:	c3                   	ret    
c0013aad:	90                   	nop

c0013aae <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013aae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ab2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013ab7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013abe:	75 0b                	jne    c0013acb <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ac2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ac6:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013ac9:	eb 1e                	jmp    c0013ae9 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013acb:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0013ad0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013ad6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013adc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ade:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ae2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013ae6:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013ae9:	ff e0                	jmp    eax
c0013aeb:	90                   	nop

c0013aec <Device::addChild(Device*)>:
c0013aec:	53                   	push   ebx
c0013aed:	83 ec 08             	sub    esp,0x8
c0013af0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013af4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013af8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013afe:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013b04:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013b06:	85 d2                	test   edx,edx
c0013b08:	74 04                	je     c0013b0e <Device::addChild(Device*)+0x22>
c0013b0a:	89 d3                	mov    ebx,edx
c0013b0c:	eb f6                	jmp    c0013b04 <Device::addChild(Device*)+0x18>
c0013b0e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013b11:	83 ec 0c             	sub    esp,0xc
c0013b14:	6a 08                	push   0x8
c0013b16:	e8 7e ba ff ff       	call   c000f599 <malloc>
c0013b1b:	89 03                	mov    DWORD PTR [ebx],eax
c0013b1d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b23:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b2a:	83 c4 18             	add    esp,0x18
c0013b2d:	5b                   	pop    ebx
c0013b2e:	c3                   	ret    
c0013b2f:	90                   	nop

c0013b30 <Device::removeAllChildren()>:
c0013b30:	56                   	push   esi
c0013b31:	53                   	push   ebx
c0013b32:	52                   	push   edx
c0013b33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b37:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013b3d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b40:	74 17                	je     c0013b59 <Device::removeAllChildren()+0x29>
c0013b42:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013b45:	85 c0                	test   eax,eax
c0013b47:	74 0c                	je     c0013b55 <Device::removeAllChildren()+0x25>
c0013b49:	83 ec 0c             	sub    esp,0xc
c0013b4c:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b4e:	50                   	push   eax
c0013b4f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b57:	eb e4                	jmp    c0013b3d <Device::removeAllChildren()+0xd>
c0013b59:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013b65:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013b6b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013b72:	58                   	pop    eax
c0013b73:	5b                   	pop    ebx
c0013b74:	5e                   	pop    esi
c0013b75:	c3                   	ret    

c0013b76 <Device::hibernateAll()>:
c0013b76:	53                   	push   ebx
c0013b77:	83 ec 14             	sub    esp,0x14
c0013b7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b80:	53                   	push   ebx
c0013b81:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013b84:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013b8a:	83 c4 10             	add    esp,0x10
c0013b8d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013b90:	74 0f                	je     c0013ba1 <Device::hibernateAll()+0x2b>
c0013b92:	83 ec 0c             	sub    esp,0xc
c0013b95:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b98:	e8 d9 ff ff ff       	call   c0013b76 <Device::hibernateAll()>
c0013b9d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b9f:	eb e9                	jmp    c0013b8a <Device::hibernateAll()+0x14>
c0013ba1:	83 c4 08             	add    esp,0x8
c0013ba4:	5b                   	pop    ebx
c0013ba5:	c3                   	ret    

c0013ba6 <Device::wakeAll()>:
c0013ba6:	53                   	push   ebx
c0013ba7:	83 ec 14             	sub    esp,0x14
c0013baa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bb0:	53                   	push   ebx
c0013bb1:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013bb4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bba:	83 c4 10             	add    esp,0x10
c0013bbd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bc0:	74 0f                	je     c0013bd1 <Device::wakeAll()+0x2b>
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bc8:	e8 d9 ff ff ff       	call   c0013ba6 <Device::wakeAll()>
c0013bcd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bcf:	eb e9                	jmp    c0013bba <Device::wakeAll()+0x14>
c0013bd1:	83 c4 08             	add    esp,0x8
c0013bd4:	5b                   	pop    ebx
c0013bd5:	c3                   	ret    

c0013bd6 <Device::detectAll()>:
c0013bd6:	53                   	push   ebx
c0013bd7:	83 ec 14             	sub    esp,0x14
c0013bda:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013bde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013be0:	53                   	push   ebx
c0013be1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013be4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013bea:	83 c4 10             	add    esp,0x10
c0013bed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013bf0:	74 0f                	je     c0013c01 <Device::detectAll()+0x2b>
c0013bf2:	83 ec 0c             	sub    esp,0xc
c0013bf5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013bf8:	e8 d9 ff ff ff       	call   c0013bd6 <Device::detectAll()>
c0013bfd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013bff:	eb e9                	jmp    c0013bea <Device::detectAll()+0x14>
c0013c01:	83 c4 08             	add    esp,0x8
c0013c04:	5b                   	pop    ebx
c0013c05:	c3                   	ret    

c0013c06 <Device::disableLegacyAll()>:
c0013c06:	53                   	push   ebx
c0013c07:	83 ec 14             	sub    esp,0x14
c0013c0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c0e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c10:	53                   	push   ebx
c0013c11:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013c14:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c20:	74 0f                	je     c0013c31 <Device::disableLegacyAll()+0x2b>
c0013c22:	83 ec 0c             	sub    esp,0xc
c0013c25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c28:	e8 d9 ff ff ff       	call   c0013c06 <Device::disableLegacyAll()>
c0013c2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c2f:	eb e9                	jmp    c0013c1a <Device::disableLegacyAll()+0x14>
c0013c31:	83 c4 08             	add    esp,0x8
c0013c34:	5b                   	pop    ebx
c0013c35:	c3                   	ret    

c0013c36 <Device::loadDriversForAll()>:
c0013c36:	53                   	push   ebx
c0013c37:	83 ec 08             	sub    esp,0x8
c0013c3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c3e:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013c45:	75 0c                	jne    c0013c53 <Device::loadDriversForAll()+0x1d>
c0013c47:	83 ec 0c             	sub    esp,0xc
c0013c4a:	53                   	push   ebx
c0013c4b:	e8 a0 fd ff ff       	call   c00139f0 <Device::findAndLoadDriver()>
c0013c50:	83 c4 10             	add    esp,0x10
c0013c53:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c59:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c5c:	74 12                	je     c0013c70 <Device::loadDriversForAll()+0x3a>
c0013c5e:	83 ec 0c             	sub    esp,0xc
c0013c61:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c64:	e8 cd ff ff ff       	call   c0013c36 <Device::loadDriversForAll()>
c0013c69:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c6b:	83 c4 10             	add    esp,0x10
c0013c6e:	eb e9                	jmp    c0013c59 <Device::loadDriversForAll()+0x23>
c0013c70:	83 c4 08             	add    esp,0x8
c0013c73:	5b                   	pop    ebx
c0013c74:	c3                   	ret    
c0013c75:	90                   	nop

c0013c76 <Device::closeAll()>:
c0013c76:	53                   	push   ebx
c0013c77:	83 ec 08             	sub    esp,0x8
c0013c7a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c7e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c80:	6a 00                	push   0x0
c0013c82:	6a 00                	push   0x0
c0013c84:	6a 00                	push   0x0
c0013c86:	53                   	push   ebx
c0013c87:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c8a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c90:	83 c4 10             	add    esp,0x10
c0013c93:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c96:	74 0f                	je     c0013ca7 <Device::closeAll()+0x31>
c0013c98:	83 ec 0c             	sub    esp,0xc
c0013c9b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c9e:	e8 d3 ff ff ff       	call   c0013c76 <Device::closeAll()>
c0013ca3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ca5:	eb e9                	jmp    c0013c90 <Device::closeAll()+0x1a>
c0013ca7:	83 c4 08             	add    esp,0x8
c0013caa:	5b                   	pop    ebx
c0013cab:	c3                   	ret    

c0013cac <Device::powerSavingAll(PowerSavingLevel)>:
c0013cac:	56                   	push   esi
c0013cad:	53                   	push   ebx
c0013cae:	83 ec 0c             	sub    esp,0xc
c0013cb1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013cb9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cbb:	56                   	push   esi
c0013cbc:	53                   	push   ebx
c0013cbd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013cc0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cc6:	83 c4 10             	add    esp,0x10
c0013cc9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ccc:	74 0f                	je     c0013cdd <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013cce:	52                   	push   edx
c0013ccf:	52                   	push   edx
c0013cd0:	56                   	push   esi
c0013cd1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cd4:	e8 d3 ff ff ff       	call   c0013cac <Device::powerSavingAll(PowerSavingLevel)>
c0013cd9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cdb:	eb e9                	jmp    c0013cc6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013cdd:	58                   	pop    eax
c0013cde:	5b                   	pop    ebx
c0013cdf:	5e                   	pop    esi
c0013ce0:	c3                   	ret    
c0013ce1:	90                   	nop

c0013ce2 <Device::setName(char const*)>:
c0013ce2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013cea:	e9 1d cb fe ff       	jmp    c000080c <strcpy>
c0013cef:	90                   	nop

c0013cf0 <Device::Device(char const*)>:
c0013cf0:	83 ec 1c             	sub    esp,0x1c
c0013cf3:	ba 70 aa 02 c0       	mov    edx,0xc002aa70
c0013cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013cfc:	89 10                	mov    DWORD PTR [eax],edx
c0013cfe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d02:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013d0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d10:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013d1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d1e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013d28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d2c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013d36:	83 ec 08             	sub    esp,0x8
c0013d39:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013d41:	e8 9c ff ff ff       	call   c0013ce2 <Device::setName(char const*)>
c0013d46:	83 c4 10             	add    esp,0x10
c0013d49:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013d51:	83 ec 0c             	sub    esp,0xc
c0013d54:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013d58:	e8 3c b8 ff ff       	call   c000f599 <malloc>
c0013d5d:	83 c4 10             	add    esp,0x10
c0013d60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d66:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d71:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013d77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d7b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d81:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d8b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013d9c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013da3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013da7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013dae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013db2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013dca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dce:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ddc:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013de6:	90                   	nop
c0013de7:	83 c4 1c             	add    esp,0x1c
c0013dea:	c3                   	ret    
c0013deb:	90                   	nop

c0013dec <Device::getName()>:
c0013dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013df0:	05 d0 00 00 00       	add    eax,0xd0
c0013df5:	c3                   	ret    

c0013df6 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013df6:	83 ec 0c             	sub    esp,0xc
c0013df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dfd:	83 ec 08             	sub    esp,0x8
c0013e00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e04:	50                   	push   eax
c0013e05:	e8 e6 fe ff ff       	call   c0013cf0 <Device::Device(char const*)>
c0013e0a:	83 c4 10             	add    esp,0x10
c0013e0d:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c0013e12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e16:	89 10                	mov    DWORD PTR [eax],edx
c0013e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e1c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e26:	90                   	nop
c0013e27:	83 c4 0c             	add    esp,0xc
c0013e2a:	c3                   	ret    
c0013e2b:	90                   	nop

c0013e2c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013e2c:	57                   	push   edi
c0013e2d:	56                   	push   esi
c0013e2e:	53                   	push   ebx
c0013e2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e37:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e3b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013e41:	75 0c                	jne    c0013e4f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013e43:	52                   	push   edx
c0013e44:	52                   	push   edx
c0013e45:	53                   	push   ebx
c0013e46:	56                   	push   esi
c0013e47:	e8 e4 47 01 00       	call   c0028630 <LinkedList<Device>::addElement(Device*)>
c0013e4c:	83 c4 10             	add    esp,0x10
c0013e4f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e58:	74 12                	je     c0013e6c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013e5a:	50                   	push   eax
c0013e5b:	57                   	push   edi
c0013e5c:	56                   	push   esi
c0013e5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e60:	e8 c7 ff ff ff       	call   c0013e2c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e67:	83 c4 10             	add    esp,0x10
c0013e6a:	eb e9                	jmp    c0013e55 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013e6c:	5b                   	pop    ebx
c0013e6d:	5e                   	pop    esi
c0013e6e:	5f                   	pop    edi
c0013e6f:	c3                   	ret    

c0013e70 <getDevicesOfType(DeviceType)>:
c0013e70:	53                   	push   ebx
c0013e71:	83 ec 14             	sub    esp,0x14
c0013e74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e78:	53                   	push   ebx
c0013e79:	e8 8e 48 01 00       	call   c002870c <LinkedList<Device>::LinkedList()>
c0013e7e:	83 c4 0c             	add    esp,0xc
c0013e81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e85:	53                   	push   ebx
c0013e86:	ff 35 68 d9 02 c0    	push   DWORD PTR ds:0xc002d968
c0013e8c:	e8 9b ff ff ff       	call   c0013e2c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013e91:	89 d8                	mov    eax,ebx
c0013e93:	83 c4 18             	add    esp,0x18
c0013e96:	5b                   	pop    ebx
c0013e97:	c2 04 00             	ret    0x4

c0013e9a <HardDiskController::HardDiskController(char const*)>:
c0013e9a:	83 ec 0c             	sub    esp,0xc
c0013e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ea1:	83 ec 08             	sub    esp,0x8
c0013ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea8:	50                   	push   eax
c0013ea9:	e8 42 fe ff ff       	call   c0013cf0 <Device::Device(char const*)>
c0013eae:	83 c4 10             	add    esp,0x10
c0013eb1:	ba c8 aa 02 c0       	mov    edx,0xc002aac8
c0013eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eba:	89 10                	mov    DWORD PTR [eax],edx
c0013ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec0:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013eca:	90                   	nop
c0013ecb:	83 c4 0c             	add    esp,0xc
c0013ece:	c3                   	ret    
c0013ecf:	90                   	nop

c0013ed0 <HardDiskController::~HardDiskController()>:
c0013ed0:	83 ec 0c             	sub    esp,0xc
c0013ed3:	ba c8 aa 02 c0       	mov    edx,0xc002aac8
c0013ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013edc:	89 10                	mov    DWORD PTR [eax],edx
c0013ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ee2:	83 ec 0c             	sub    esp,0xc
c0013ee5:	50                   	push   eax
c0013ee6:	e8 cf fa ff ff       	call   c00139ba <Device::~Device()>
c0013eeb:	83 c4 10             	add    esp,0x10
c0013eee:	90                   	nop
c0013eef:	83 c4 0c             	add    esp,0xc
c0013ef2:	c3                   	ret    
c0013ef3:	90                   	nop

c0013ef4 <HardDiskController::~HardDiskController()>:
c0013ef4:	83 ec 0c             	sub    esp,0xc
c0013ef7:	83 ec 0c             	sub    esp,0xc
c0013efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013efe:	e8 cd ff ff ff       	call   c0013ed0 <HardDiskController::~HardDiskController()>
c0013f03:	83 c4 10             	add    esp,0x10
c0013f06:	83 ec 08             	sub    esp,0x8
c0013f09:	68 58 01 00 00       	push   0x158
c0013f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f12:	e8 c4 e6 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0013f17:	83 c4 10             	add    esp,0x10
c0013f1a:	83 c4 0c             	add    esp,0xc
c0013f1d:	c3                   	ret    

c0013f1e <PhysicalDisk::eject()>:
c0013f1e:	83 c8 ff             	or     eax,0xffffffff
c0013f21:	c3                   	ret    

c0013f22 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013f22:	83 ec 0c             	sub    esp,0xc
c0013f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f29:	83 ec 08             	sub    esp,0x8
c0013f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f30:	50                   	push   eax
c0013f31:	e8 ba fd ff ff       	call   c0013cf0 <Device::Device(char const*)>
c0013f36:	83 c4 10             	add    esp,0x10
c0013f39:	ba f4 aa 02 c0       	mov    edx,0xc002aaf4
c0013f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f42:	89 10                	mov    DWORD PTR [eax],edx
c0013f44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f48:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f53:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f5e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f70:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013f76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f7a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013f84:	90                   	nop
c0013f85:	83 c4 0c             	add    esp,0xc
c0013f88:	c3                   	ret    
c0013f89:	90                   	nop

c0013f8a <PhysicalDisk::startCache()>:
c0013f8a:	56                   	push   esi
c0013f8b:	53                   	push   ebx
c0013f8c:	83 ec 10             	sub    esp,0x10
c0013f8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f93:	6a 44                	push   0x44
c0013f95:	e8 ff b5 ff ff       	call   c000f599 <malloc>
c0013f9a:	89 c6                	mov    esi,eax
c0013f9c:	58                   	pop    eax
c0013f9d:	5a                   	pop    edx
c0013f9e:	53                   	push   ebx
c0013f9f:	56                   	push   esi
c0013fa0:	e8 71 28 00 00       	call   c0016816 <VCache::VCache(PhysicalDisk*)>
c0013fa5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013fab:	83 c4 14             	add    esp,0x14
c0013fae:	5b                   	pop    ebx
c0013faf:	5e                   	pop    esi
c0013fb0:	c3                   	ret    
c0013fb1:	90                   	nop

c0013fb2 <PhysicalDisk::~PhysicalDisk()>:
c0013fb2:	83 ec 0c             	sub    esp,0xc
c0013fb5:	ba f4 aa 02 c0       	mov    edx,0xc002aaf4
c0013fba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fbe:	89 10                	mov    DWORD PTR [eax],edx
c0013fc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc4:	83 ec 0c             	sub    esp,0xc
c0013fc7:	50                   	push   eax
c0013fc8:	e8 ed f9 ff ff       	call   c00139ba <Device::~Device()>
c0013fcd:	83 c4 10             	add    esp,0x10
c0013fd0:	90                   	nop
c0013fd1:	83 c4 0c             	add    esp,0xc
c0013fd4:	c3                   	ret    
c0013fd5:	90                   	nop

c0013fd6 <PhysicalDisk::~PhysicalDisk()>:
c0013fd6:	83 ec 0c             	sub    esp,0xc
c0013fd9:	83 ec 0c             	sub    esp,0xc
c0013fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fe0:	e8 cd ff ff ff       	call   c0013fb2 <PhysicalDisk::~PhysicalDisk()>
c0013fe5:	83 c4 10             	add    esp,0x10
c0013fe8:	83 ec 08             	sub    esp,0x8
c0013feb:	68 6c 01 00 00       	push   0x16c
c0013ff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ff4:	e8 e2 e5 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0013ff9:	83 c4 10             	add    esp,0x10
c0013ffc:	83 c4 0c             	add    esp,0xc
c0013fff:	c3                   	ret    

c0014000 <FPU::FPU(char const*)>:
c0014000:	83 ec 0c             	sub    esp,0xc
c0014003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014007:	83 ec 08             	sub    esp,0x8
c001400a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001400e:	50                   	push   eax
c001400f:	e8 dc fc ff ff       	call   c0013cf0 <Device::Device(char const*)>
c0014014:	83 c4 10             	add    esp,0x10
c0014017:	ba 38 ab 02 c0       	mov    edx,0xc002ab38
c001401c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014020:	89 10                	mov    DWORD PTR [eax],edx
c0014022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014026:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014030:	90                   	nop
c0014031:	83 c4 0c             	add    esp,0xc
c0014034:	c3                   	ret    
c0014035:	90                   	nop

c0014036 <FPU::~FPU()>:
c0014036:	83 ec 0c             	sub    esp,0xc
c0014039:	ba 38 ab 02 c0       	mov    edx,0xc002ab38
c001403e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014042:	89 10                	mov    DWORD PTR [eax],edx
c0014044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014048:	83 ec 0c             	sub    esp,0xc
c001404b:	50                   	push   eax
c001404c:	e8 69 f9 ff ff       	call   c00139ba <Device::~Device()>
c0014051:	83 c4 10             	add    esp,0x10
c0014054:	90                   	nop
c0014055:	83 c4 0c             	add    esp,0xc
c0014058:	c3                   	ret    
c0014059:	90                   	nop

c001405a <FPU::~FPU()>:
c001405a:	83 ec 0c             	sub    esp,0xc
c001405d:	83 ec 0c             	sub    esp,0xc
c0014060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014064:	e8 cd ff ff ff       	call   c0014036 <FPU::~FPU()>
c0014069:	83 c4 10             	add    esp,0x10
c001406c:	83 ec 08             	sub    esp,0x8
c001406f:	68 58 01 00 00       	push   0x158
c0014074:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014078:	e8 5e e5 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c001407d:	83 c4 10             	add    esp,0x10
c0014080:	83 c4 0c             	add    esp,0xc
c0014083:	c3                   	ret    

c0014084 <setupFPU()>:
c0014084:	53                   	push   ebx
c0014085:	83 ec 08             	sub    esp,0x8
c0014088:	8b 15 68 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d968
c001408e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014095:	74 19                	je     c00140b0 <setupFPU()+0x2c>
c0014097:	83 ec 0c             	sub    esp,0xc
c001409a:	68 58 01 00 00       	push   0x158
c001409f:	e8 f5 b4 ff ff       	call   c000f599 <malloc>
c00140a4:	89 c3                	mov    ebx,eax
c00140a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00140a9:	e8 c6 11 01 00       	call   c0025274 <AVX::AVX()>
c00140ae:	eb 5b                	jmp    c001410b <setupFPU()+0x87>
c00140b0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00140b6:	84 c0                	test   al,al
c00140b8:	79 19                	jns    c00140d3 <setupFPU()+0x4f>
c00140ba:	83 ec 0c             	sub    esp,0xc
c00140bd:	68 58 01 00 00       	push   0x158
c00140c2:	e8 d2 b4 ff ff       	call   c000f599 <malloc>
c00140c7:	89 c3                	mov    ebx,eax
c00140c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00140cc:	e8 c9 12 01 00       	call   c002539a <SSE::SSE()>
c00140d1:	eb 38                	jmp    c001410b <setupFPU()+0x87>
c00140d3:	a8 20                	test   al,0x20
c00140d5:	74 19                	je     c00140f0 <setupFPU()+0x6c>
c00140d7:	83 ec 0c             	sub    esp,0xc
c00140da:	68 58 01 00 00       	push   0x158
c00140df:	e8 b5 b4 ff ff       	call   c000f599 <malloc>
c00140e4:	89 c3                	mov    ebx,eax
c00140e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00140e9:	e8 16 12 01 00       	call   c0025304 <MMX::MMX()>
c00140ee:	eb 1b                	jmp    c001410b <setupFPU()+0x87>
c00140f0:	a8 10                	test   al,0x10
c00140f2:	74 1c                	je     c0014110 <setupFPU()+0x8c>
c00140f4:	83 ec 0c             	sub    esp,0xc
c00140f7:	68 58 01 00 00       	push   0x158
c00140fc:	e8 98 b4 ff ff       	call   c000f599 <malloc>
c0014101:	89 c3                	mov    ebx,eax
c0014103:	89 04 24             	mov    DWORD PTR [esp],eax
c0014106:	e8 1d 13 01 00       	call   c0025428 <x87::x87()>
c001410b:	83 c4 10             	add    esp,0x10
c001410e:	eb 24                	jmp    c0014134 <setupFPU()+0xb0>
c0014110:	83 e0 ef             	and    eax,0xffffffef
c0014113:	83 ec 0c             	sub    esp,0xc
c0014116:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001411c:	68 24 ab 02 c0       	push   0xc002ab24
c0014121:	e8 8d e5 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014126:	0f 20 c0             	mov    eax,cr0
c0014129:	83 c8 04             	or     eax,0x4
c001412c:	0f 22 c0             	mov    cr0,eax
c001412f:	31 db                	xor    ebx,ebx
c0014131:	83 c4 10             	add    esp,0x10
c0014134:	89 d8                	mov    eax,ebx
c0014136:	83 c4 08             	add    esp,0x8
c0014139:	5b                   	pop    ebx
c001413a:	c3                   	ret    
c001413b:	90                   	nop

c001413c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c001413c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014140:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014144:	c1 e0 04             	shl    eax,0x4
c0014147:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001414b:	8d 50 10             	lea    edx,[eax+0x10]
c001414e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014154:	74 08                	je     c001415e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014156:	83 c0 04             	add    eax,0x4
c0014159:	39 d0                	cmp    eax,edx
c001415b:	75 f1                	jne    c001414e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c001415d:	c3                   	ret    
c001415e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014168:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014172:	eb e2                	jmp    c0014156 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014174 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014174:	57                   	push   edi
c0014175:	31 c0                	xor    eax,eax
c0014177:	56                   	push   esi
c0014178:	53                   	push   ebx
c0014179:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001417d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014181:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014185:	89 da                	mov    edx,ebx
c0014187:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001418b:	c1 e2 04             	shl    edx,0x4
c001418e:	01 ca                	add    edx,ecx
c0014190:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014198:	74 16                	je     c00141b0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001419a:	40                   	inc    eax
c001419b:	83 f8 04             	cmp    eax,0x4
c001419e:	75 f0                	jne    c0014190 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00141a0:	c7 44 24 10 68 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab68
c00141a8:	5b                   	pop    ebx
c00141a9:	5e                   	pop    esi
c00141aa:	5f                   	pop    edi
c00141ab:	e9 6f 5c 00 00       	jmp    c0019e1f <Krnl::panic(char const*)>
c00141b0:	8d 04 98             	lea    eax,[eax+ebx*4]
c00141b3:	8d 04 81             	lea    eax,[ecx+eax*4]
c00141b6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00141bc:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00141c2:	5b                   	pop    ebx
c00141c3:	5e                   	pop    esi
c00141c4:	5f                   	pop    edi
c00141c5:	c3                   	ret    

c00141c6 <doubleFault(regs*, void*)>:
c00141c6:	55                   	push   ebp
c00141c7:	89 e5                	mov    ebp,esp
c00141c9:	83 ec 08             	sub    esp,0x8
c00141cc:	83 ec 0c             	sub    esp,0xc
c00141cf:	68 75 ab 02 c0       	push   0xc002ab75
c00141d4:	e8 46 5c 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c00141d9:	83 c4 10             	add    esp,0x10
c00141dc:	90                   	nop
c00141dd:	c9                   	leave  
c00141de:	c3                   	ret    
c00141df:	90                   	nop

c00141e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141e0:	56                   	push   esi
c00141e1:	53                   	push   ebx
c00141e2:	50                   	push   eax
c00141e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00141e7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00141eb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00141f0:	75 35                	jne    c0014227 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00141f2:	8d 43 20             	lea    eax,[ebx+0x20]
c00141f5:	31 d2                	xor    edx,edx
c00141f7:	89 c1                	mov    ecx,eax
c00141f9:	c1 e1 04             	shl    ecx,0x4
c00141fc:	01 f1                	add    ecx,esi
c00141fe:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014206:	74 3e                	je     c0014246 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014208:	42                   	inc    edx
c0014209:	83 fa 04             	cmp    edx,0x4
c001420c:	75 f0                	jne    c00141fe <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001420e:	83 ec 0c             	sub    esp,0xc
c0014211:	68 8f ab 02 c0       	push   0xc002ab8f
c0014216:	e8 04 5c 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c001421b:	83 c4 10             	add    esp,0x10
c001421e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014223:	5a                   	pop    edx
c0014224:	5b                   	pop    ebx
c0014225:	5e                   	pop    esi
c0014226:	c3                   	ret    
c0014227:	83 ec 0c             	sub    esp,0xc
c001422a:	56                   	push   esi
c001422b:	e8 bc fb ff ff       	call   c0013dec <Device::getName()>
c0014230:	83 c4 10             	add    esp,0x10
c0014233:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014236:	75 ba                	jne    c00141f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014238:	83 fb 0f             	cmp    ebx,0xf
c001423b:	7f 29                	jg     c0014266 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c001423d:	0f b6 9b c0 cb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd3440]
c0014244:	eb ac                	jmp    c00141f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014246:	8d 04 82             	lea    eax,[edx+eax*4]
c0014249:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001424d:	8d 04 86             	lea    eax,[esi+eax*4]
c0014250:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014256:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001425a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014260:	89 d8                	mov    eax,ebx
c0014262:	5a                   	pop    edx
c0014263:	5b                   	pop    ebx
c0014264:	5e                   	pop    esi
c0014265:	c3                   	ret    
c0014266:	83 ec 0c             	sub    esp,0xc
c0014269:	68 82 ab 02 c0       	push   0xc002ab82
c001426e:	e8 ac 5b 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0014273:	83 c4 10             	add    esp,0x10
c0014276:	e9 77 ff ff ff       	jmp    c00141f2 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001427b:	90                   	nop

c001427c <InterruptController::clearAllHandlers(int, bool)>:
c001427c:	56                   	push   esi
c001427d:	53                   	push   ebx
c001427e:	52                   	push   edx
c001427f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014283:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014287:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001428c:	75 61                	jne    c00142ef <InterruptController::clearAllHandlers(int, bool)+0x73>
c001428e:	8d 46 20             	lea    eax,[esi+0x20]
c0014291:	c1 e6 04             	shl    esi,0x4
c0014294:	c1 e0 04             	shl    eax,0x4
c0014297:	01 de                	add    esi,ebx
c0014299:	01 d8                	add    eax,ebx
c001429b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c00142a5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c00142af:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00142b9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00142c3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00142cd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00142d7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00142e1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00142eb:	58                   	pop    eax
c00142ec:	5b                   	pop    ebx
c00142ed:	5e                   	pop    esi
c00142ee:	c3                   	ret    
c00142ef:	83 ec 0c             	sub    esp,0xc
c00142f2:	53                   	push   ebx
c00142f3:	e8 f4 fa ff ff       	call   c0013dec <Device::getName()>
c00142f8:	83 c4 10             	add    esp,0x10
c00142fb:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142fe:	75 8e                	jne    c001428e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014300:	83 fe 0f             	cmp    esi,0xf
c0014303:	7f 09                	jg     c001430e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014305:	0f b6 b6 c0 cb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd3440]
c001430c:	eb 80                	jmp    c001428e <InterruptController::clearAllHandlers(int, bool)+0x12>
c001430e:	83 ec 0c             	sub    esp,0xc
c0014311:	68 9c ab 02 c0       	push   0xc002ab9c
c0014316:	e8 04 5b 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c001431b:	83 c4 10             	add    esp,0x10
c001431e:	e9 6b ff ff ff       	jmp    c001428e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014323:	90                   	nop

c0014324 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014324:	56                   	push   esi
c0014325:	53                   	push   ebx
c0014326:	52                   	push   edx
c0014327:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001432b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001432f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014334:	75 3a                	jne    c0014370 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014336:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001433a:	8d 50 20             	lea    edx,[eax+0x20]
c001433d:	c1 e2 04             	shl    edx,0x4
c0014340:	8d 04 16             	lea    eax,[esi+edx*1]
c0014343:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014347:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c001434d:	74 0b                	je     c001435a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c001434f:	83 c0 04             	add    eax,0x4
c0014352:	39 d0                	cmp    eax,edx
c0014354:	75 f1                	jne    c0014347 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014356:	58                   	pop    eax
c0014357:	5b                   	pop    ebx
c0014358:	5e                   	pop    esi
c0014359:	c3                   	ret    
c001435a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014364:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001436e:	eb df                	jmp    c001434f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014370:	83 ec 0c             	sub    esp,0xc
c0014373:	56                   	push   esi
c0014374:	e8 73 fa ff ff       	call   c0013dec <Device::getName()>
c0014379:	83 c4 10             	add    esp,0x10
c001437c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001437f:	75 b5                	jne    c0014336 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014381:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014386:	7f 11                	jg     c0014399 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014388:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001438c:	0f b6 80 c0 cb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd3440]
c0014393:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014397:	eb 9d                	jmp    c0014336 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014399:	83 ec 0c             	sub    esp,0xc
c001439c:	68 a9 ab 02 c0       	push   0xc002aba9
c00143a1:	e8 79 5a 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c00143a6:	83 c4 10             	add    esp,0x10
c00143a9:	eb 8b                	jmp    c0014336 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c00143ab <nmiHandler(regs*, void*)>:
c00143ab:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00143b0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143b4:	e9 47 a9 ff ff       	jmp    c000ed00 <Computer::handleNMI()>

c00143b9 <int_handler>:
c00143b9:	55                   	push   ebp
c00143ba:	57                   	push   edi
c00143bb:	56                   	push   esi
c00143bc:	53                   	push   ebx
c00143bd:	83 ec 0c             	sub    esp,0xc
c00143c0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00143c4:	80 3d a4 04 03 c0 00 	cmp    BYTE PTR ds:0xc00304a4,0x0
c00143cb:	74 0b                	je     c00143d8 <int_handler+0x1f>
c00143cd:	fa                   	cli    
c00143ce:	f4                   	hlt    
c00143cf:	80 3d a4 04 03 c0 00 	cmp    BYTE PTR ds:0xc00304a4,0x0
c00143d6:	75 f5                	jne    c00143cd <int_handler+0x14>
c00143d8:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00143dd:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00143e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143e6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00143ec:	8d 43 e0             	lea    eax,[ebx-0x20]
c00143ef:	83 f8 17             	cmp    eax,0x17
c00143f2:	77 13                	ja     c0014407 <int_handler+0x4e>
c00143f4:	83 ec 08             	sub    esp,0x8
c00143f7:	8b 17                	mov    edx,DWORD PTR [edi]
c00143f9:	8d 43 e0             	lea    eax,[ebx-0x20]
c00143fc:	0f b6 c0             	movzx  eax,al
c00143ff:	50                   	push   eax
c0014400:	57                   	push   edi
c0014401:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014404:	83 c4 10             	add    esp,0x10
c0014407:	83 c3 15             	add    ebx,0x15
c001440a:	c1 e3 04             	shl    ebx,0x4
c001440d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014411:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014418:	31 db                	xor    ebx,ebx
c001441a:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c001441e:	85 c0                	test   eax,eax
c0014420:	74 13                	je     c0014435 <int_handler+0x7c>
c0014422:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014425:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014429:	74 1c                	je     c0014447 <int_handler+0x8e>
c001442b:	83 ec 08             	sub    esp,0x8
c001442e:	52                   	push   edx
c001442f:	56                   	push   esi
c0014430:	ff d0                	call   eax
c0014432:	83 c4 10             	add    esp,0x10
c0014435:	43                   	inc    ebx
c0014436:	83 fb 04             	cmp    ebx,0x4
c0014439:	75 df                	jne    c001441a <int_handler+0x61>
c001443b:	83 c4 0c             	add    esp,0xc
c001443e:	31 c0                	xor    eax,eax
c0014440:	5b                   	pop    ebx
c0014441:	31 d2                	xor    edx,edx
c0014443:	5e                   	pop    esi
c0014444:	5f                   	pop    edi
c0014445:	5d                   	pop    ebp
c0014446:	c3                   	ret    
c0014447:	83 ec 08             	sub    esp,0x8
c001444a:	52                   	push   edx
c001444b:	56                   	push   esi
c001444c:	ff d0                	call   eax
c001444e:	83 c4 10             	add    esp,0x10
c0014451:	83 c4 0c             	add    esp,0xc
c0014454:	5b                   	pop    ebx
c0014455:	5e                   	pop    esi
c0014456:	5f                   	pop    edi
c0014457:	5d                   	pop    ebp
c0014458:	c3                   	ret    
c0014459:	90                   	nop

c001445a <InterruptController::InterruptController(char const*)>:
c001445a:	83 ec 1c             	sub    esp,0x1c
c001445d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014461:	83 ec 08             	sub    esp,0x8
c0014464:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014468:	50                   	push   eax
c0014469:	e8 82 f8 ff ff       	call   c0013cf0 <Device::Device(char const*)>
c001446e:	83 c4 10             	add    esp,0x10
c0014471:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0014476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447a:	89 10                	mov    DWORD PTR [eax],edx
c001447c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014480:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c001448a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014492:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c001449a:	7f 5e                	jg     c00144fa <InterruptController::InterruptController(char const*)+0xa0>
c001449c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00144a4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c00144a9:	7f 49                	jg     c00144f4 <InterruptController::InterruptController(char const*)+0x9a>
c00144ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144af:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144b3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144be:	01 ca                	add    edx,ecx
c00144c0:	83 c2 54             	add    edx,0x54
c00144c3:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144cf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144d3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00144da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00144de:	01 ca                	add    edx,ecx
c00144e0:	81 c2 54 04 00 00    	add    edx,0x454
c00144e6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00144ee:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00144f2:	eb b0                	jmp    c00144a4 <InterruptController::InterruptController(char const*)+0x4a>
c00144f4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00144f8:	eb 98                	jmp    c0014492 <InterruptController::InterruptController(char const*)+0x38>
c00144fa:	90                   	nop
c00144fb:	83 c4 1c             	add    esp,0x1c
c00144fe:	c3                   	ret    
c00144ff:	90                   	nop

c0014500 <InterruptController::~InterruptController()>:
c0014500:	83 ec 0c             	sub    esp,0xc
c0014503:	ba 64 ae 02 c0       	mov    edx,0xc002ae64
c0014508:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001450c:	89 10                	mov    DWORD PTR [eax],edx
c001450e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014512:	83 ec 0c             	sub    esp,0xc
c0014515:	50                   	push   eax
c0014516:	e8 9f f4 ff ff       	call   c00139ba <Device::~Device()>
c001451b:	83 c4 10             	add    esp,0x10
c001451e:	90                   	nop
c001451f:	83 c4 0c             	add    esp,0xc
c0014522:	c3                   	ret    
c0014523:	90                   	nop

c0014524 <InterruptController::~InterruptController()>:
c0014524:	83 ec 0c             	sub    esp,0xc
c0014527:	83 ec 0c             	sub    esp,0xc
c001452a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001452e:	e8 cd ff ff ff       	call   c0014500 <InterruptController::~InterruptController()>
c0014533:	83 c4 10             	add    esp,0x10
c0014536:	83 ec 08             	sub    esp,0x8
c0014539:	68 58 21 00 00       	push   0x2158
c001453e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014542:	e8 94 e0 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	83 c4 0c             	add    esp,0xc
c001454d:	c3                   	ret    

c001454e <displayDebugInfo(regs*)>:
c001454e:	55                   	push   ebp
c001454f:	57                   	push   edi
c0014550:	56                   	push   esi
c0014551:	53                   	push   ebx
c0014552:	83 ec 24             	sub    esp,0x24
c0014555:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014559:	0f 20 c2             	mov    edx,cr0
c001455c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014560:	0f 20 d7             	mov    edi,cr2
c0014563:	0f 20 de             	mov    esi,cr3
c0014566:	0f 20 e5             	mov    ebp,cr4
c0014569:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001456c:	68 b6 ab 02 c0       	push   0xc002abb6
c0014571:	e8 3d e1 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014576:	59                   	pop    ecx
c0014577:	58                   	pop    eax
c0014578:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001457b:	68 c1 ab 02 c0       	push   0xc002abc1
c0014580:	e8 2e e1 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014585:	58                   	pop    eax
c0014586:	5a                   	pop    edx
c0014587:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001458a:	68 cc ab 02 c0       	push   0xc002abcc
c001458f:	e8 1f e1 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014594:	59                   	pop    ecx
c0014595:	58                   	pop    eax
c0014596:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014599:	68 d7 ab 02 c0       	push   0xc002abd7
c001459e:	e8 10 e1 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00145a3:	58                   	pop    eax
c00145a4:	5a                   	pop    edx
c00145a5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00145a8:	68 e2 ab 02 c0       	push   0xc002abe2
c00145ad:	e8 01 e1 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00145b2:	59                   	pop    ecx
c00145b3:	58                   	pop    eax
c00145b4:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00145b7:	68 ed ab 02 c0       	push   0xc002abed
c00145bc:	e8 f2 e0 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00145c1:	58                   	pop    eax
c00145c2:	5a                   	pop    edx
c00145c3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00145c6:	68 f8 ab 02 c0       	push   0xc002abf8
c00145cb:	e8 e3 e0 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00145d0:	59                   	pop    ecx
c00145d1:	58                   	pop    eax
c00145d2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00145d5:	68 03 ac 02 c0       	push   0xc002ac03
c00145da:	e8 d4 e0 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00145df:	58                   	pop    eax
c00145e0:	5a                   	pop    edx
c00145e1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00145e4:	68 0e ac 02 c0       	push   0xc002ac0e
c00145e9:	e8 c5 e0 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00145ee:	59                   	pop    ecx
c00145ef:	58                   	pop    eax
c00145f0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00145f3:	68 1d ac 02 c0       	push   0xc002ac1d
c00145f8:	e8 b6 e0 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00145fd:	58                   	pop    eax
c00145fe:	5a                   	pop    edx
c00145ff:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014602:	68 28 ac 02 c0       	push   0xc002ac28
c0014607:	e8 a7 e0 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001460c:	59                   	pop    ecx
c001460d:	58                   	pop    eax
c001460e:	57                   	push   edi
c001460f:	68 33 ac 02 c0       	push   0xc002ac33
c0014614:	e8 9a e0 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014619:	58                   	pop    eax
c001461a:	5a                   	pop    edx
c001461b:	56                   	push   esi
c001461c:	68 3e ac 02 c0       	push   0xc002ac3e
c0014621:	e8 8d e0 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014626:	59                   	pop    ecx
c0014627:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001462c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014632:	e8 06 bd ff ff       	call   c001033d <setActiveTerminal(VgaText*)>
c0014637:	58                   	pop    eax
c0014638:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001463b:	5a                   	pop    edx
c001463c:	c1 e0 05             	shl    eax,0x5
c001463f:	05 20 c9 02 c0       	add    eax,0xc002c920
c0014644:	50                   	push   eax
c0014645:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001464a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014650:	e8 f5 c1 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0014655:	59                   	pop    ecx
c0014656:	58                   	pop    eax
c0014657:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001465c:	68 49 ac 02 c0       	push   0xc002ac49
c0014661:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014667:	e8 de c1 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001466c:	58                   	pop    eax
c001466d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014672:	5a                   	pop    edx
c0014673:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014676:	83 c0 0c             	add    eax,0xc
c0014679:	50                   	push   eax
c001467a:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001467f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014685:	e8 c0 c1 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001468a:	59                   	pop    ecx
c001468b:	58                   	pop    eax
c001468c:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014691:	68 52 ac 02 c0       	push   0xc002ac52
c0014696:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001469c:	e8 a9 c1 ff ff       	call   c001084a <VgaText::puts(char const*)>
c00146a1:	58                   	pop    eax
c00146a2:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00146a7:	5a                   	pop    edx
c00146a8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00146ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146b1:	e8 4e c1 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c00146b6:	59                   	pop    ecx
c00146b7:	58                   	pop    eax
c00146b8:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00146bd:	68 5a ac 02 c0       	push   0xc002ac5a
c00146c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146c8:	e8 7d c1 ff ff       	call   c001084a <VgaText::puts(char const*)>
c00146cd:	58                   	pop    eax
c00146ce:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00146d3:	5a                   	pop    edx
c00146d4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00146d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146dd:	e8 22 c1 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c00146e2:	59                   	pop    ecx
c00146e3:	58                   	pop    eax
c00146e4:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00146e9:	68 62 ac 02 c0       	push   0xc002ac62
c00146ee:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146f4:	e8 51 c1 ff ff       	call   c001084a <VgaText::puts(char const*)>
c00146f9:	58                   	pop    eax
c00146fa:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00146ff:	5a                   	pop    edx
c0014700:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014703:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014709:	e8 f6 c0 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001470e:	59                   	pop    ecx
c001470f:	58                   	pop    eax
c0014710:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014715:	68 6a ac 02 c0       	push   0xc002ac6a
c001471a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014720:	e8 25 c1 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0014725:	58                   	pop    eax
c0014726:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001472b:	5a                   	pop    edx
c001472c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c001472f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014735:	e8 ca c0 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001473a:	59                   	pop    ecx
c001473b:	58                   	pop    eax
c001473c:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014741:	68 72 ac 02 c0       	push   0xc002ac72
c0014746:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474c:	e8 f9 c0 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0014751:	58                   	pop    eax
c0014752:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014757:	5a                   	pop    edx
c0014758:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001475b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014761:	e8 9e c0 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c0014766:	59                   	pop    ecx
c0014767:	58                   	pop    eax
c0014768:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001476d:	68 7a ac 02 c0       	push   0xc002ac7a
c0014772:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014778:	e8 cd c0 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001477d:	58                   	pop    eax
c001477e:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014783:	5a                   	pop    edx
c0014784:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014787:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001478d:	e8 72 c0 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c0014792:	59                   	pop    ecx
c0014793:	58                   	pop    eax
c0014794:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014799:	68 82 ac 02 c0       	push   0xc002ac82
c001479e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a4:	e8 a1 c0 ff ff       	call   c001084a <VgaText::puts(char const*)>
c00147a9:	58                   	pop    eax
c00147aa:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00147af:	5a                   	pop    edx
c00147b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147b4:	52                   	push   edx
c00147b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147bb:	e8 44 c0 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c00147c0:	59                   	pop    ecx
c00147c1:	58                   	pop    eax
c00147c2:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00147c7:	68 8b ac 02 c0       	push   0xc002ac8b
c00147cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d2:	e8 73 c0 ff ff       	call   c001084a <VgaText::puts(char const*)>
c00147d7:	58                   	pop    eax
c00147d8:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00147dd:	5a                   	pop    edx
c00147de:	57                   	push   edi
c00147df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147e5:	e8 1a c0 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c00147ea:	59                   	pop    ecx
c00147eb:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00147f0:	5f                   	pop    edi
c00147f1:	68 93 ac 02 c0       	push   0xc002ac93
c00147f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147fc:	e8 49 c0 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0014801:	58                   	pop    eax
c0014802:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014807:	5a                   	pop    edx
c0014808:	56                   	push   esi
c0014809:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480f:	e8 f0 bf ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c0014814:	59                   	pop    ecx
c0014815:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001481a:	5e                   	pop    esi
c001481b:	68 9b ac 02 c0       	push   0xc002ac9b
c0014820:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014826:	e8 1f c0 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001482b:	5f                   	pop    edi
c001482c:	58                   	pop    eax
c001482d:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014832:	55                   	push   ebp
c0014833:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014839:	e8 c6 bf ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001483e:	58                   	pop    eax
c001483f:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014844:	5a                   	pop    edx
c0014845:	68 a3 ac 02 c0       	push   0xc002aca3
c001484a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014850:	e8 f5 bf ff ff       	call   c001084a <VgaText::puts(char const*)>
c0014855:	0f 21 c0             	mov    eax,db0
c0014858:	59                   	pop    ecx
c0014859:	5e                   	pop    esi
c001485a:	50                   	push   eax
c001485b:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014860:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014866:	e8 99 bf ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001486b:	5f                   	pop    edi
c001486c:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014871:	5d                   	pop    ebp
c0014872:	68 ac ac 02 c0       	push   0xc002acac
c0014877:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001487d:	e8 c8 bf ff ff       	call   c001084a <VgaText::puts(char const*)>
c0014882:	0f 21 c8             	mov    eax,db1
c0014885:	5a                   	pop    edx
c0014886:	59                   	pop    ecx
c0014887:	50                   	push   eax
c0014888:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001488d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014893:	e8 6c bf ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c0014898:	5e                   	pop    esi
c0014899:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001489e:	5f                   	pop    edi
c001489f:	68 b4 ac 02 c0       	push   0xc002acb4
c00148a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148aa:	e8 9b bf ff ff       	call   c001084a <VgaText::puts(char const*)>
c00148af:	0f 21 d0             	mov    eax,db2
c00148b2:	5d                   	pop    ebp
c00148b3:	5a                   	pop    edx
c00148b4:	50                   	push   eax
c00148b5:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00148ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c0:	e8 3f bf ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c00148c5:	59                   	pop    ecx
c00148c6:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00148cb:	5e                   	pop    esi
c00148cc:	68 bc ac 02 c0       	push   0xc002acbc
c00148d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d7:	e8 6e bf ff ff       	call   c001084a <VgaText::puts(char const*)>
c00148dc:	0f 21 d8             	mov    eax,db3
c00148df:	5f                   	pop    edi
c00148e0:	5d                   	pop    ebp
c00148e1:	50                   	push   eax
c00148e2:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00148e7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ed:	e8 12 bf ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c00148f2:	58                   	pop    eax
c00148f3:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00148f8:	5a                   	pop    edx
c00148f9:	68 c4 ac 02 c0       	push   0xc002acc4
c00148fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014904:	e8 41 bf ff ff       	call   c001084a <VgaText::puts(char const*)>
c0014909:	0f 21 f0             	mov    eax,db6
c001490c:	59                   	pop    ecx
c001490d:	5e                   	pop    esi
c001490e:	50                   	push   eax
c001490f:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014914:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491a:	e8 e5 be ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001491f:	5f                   	pop    edi
c0014920:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014925:	5d                   	pop    ebp
c0014926:	68 cc ac 02 c0       	push   0xc002accc
c001492b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014931:	e8 14 bf ff ff       	call   c001084a <VgaText::puts(char const*)>
c0014936:	0f 21 f8             	mov    eax,db7
c0014939:	5a                   	pop    edx
c001493a:	59                   	pop    ecx
c001493b:	50                   	push   eax
c001493c:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014941:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014947:	e8 b8 be ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001494c:	5e                   	pop    esi
c001494d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014950:	e8 43 86 00 00       	call   c001cf98 <Thr::getDriverNameFromAddress(unsigned long)>
c0014955:	83 c4 10             	add    esp,0x10
c0014958:	85 c0                	test   eax,eax
c001495a:	74 7d                	je     c00149d9 <displayDebugInfo(regs*)+0x48b>
c001495c:	89 c6                	mov    esi,eax
c001495e:	50                   	push   eax
c001495f:	50                   	push   eax
c0014960:	56                   	push   esi
c0014961:	68 d4 ac 02 c0       	push   0xc002acd4
c0014966:	e8 48 dd ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001496b:	5a                   	pop    edx
c001496c:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014971:	59                   	pop    ecx
c0014972:	68 e2 ac 02 c0       	push   0xc002ace2
c0014977:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497d:	e8 c8 be ff ff       	call   c001084a <VgaText::puts(char const*)>
c0014982:	5f                   	pop    edi
c0014983:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0014988:	5d                   	pop    ebp
c0014989:	56                   	push   esi
c001498a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014990:	e8 b5 be ff ff       	call   c001084a <VgaText::puts(char const*)>
c0014995:	58                   	pop    eax
c0014996:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001499b:	5a                   	pop    edx
c001499c:	68 ee ac 02 c0       	push   0xc002acee
c00149a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a7:	e8 9e be ff ff       	call   c001084a <VgaText::puts(char const*)>
c00149ac:	59                   	pop    ecx
c00149ad:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00149b2:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00149b8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00149bb:	e8 0f 86 00 00       	call   c001cfcf <Thr::getDriverOffsetFromAddress(unsigned long)>
c00149c0:	5b                   	pop    ebx
c00149c1:	5d                   	pop    ebp
c00149c2:	50                   	push   eax
c00149c3:	57                   	push   edi
c00149c4:	e8 3b be ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c00149c9:	58                   	pop    eax
c00149ca:	5a                   	pop    edx
c00149cb:	56                   	push   esi
c00149cc:	68 fa ac 02 c0       	push   0xc002acfa
c00149d1:	e8 dd dc ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00149d6:	83 c4 10             	add    esp,0x10
c00149d9:	fa                   	cli    
c00149da:	f4                   	hlt    
c00149db:	eb fe                	jmp    c00149db <displayDebugInfo(regs*)+0x48d>

c00149dd <x87EmulHandler(regs*, void*)>:
c00149dd:	83 ec 0c             	sub    esp,0xc
c00149e0:	0f 20 c2             	mov    edx,cr0
c00149e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149e8:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c00149ec:	75 4b                	jne    c0014a39 <x87EmulHandler(regs*, void*)+0x5c>
c00149ee:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00149f3:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c00149f9:	85 c0                	test   eax,eax
c00149fb:	74 05                	je     c0014a02 <x87EmulHandler(regs*, void*)+0x25>
c00149fd:	83 e2 08             	and    edx,0x8
c0014a00:	75 17                	jne    c0014a19 <x87EmulHandler(regs*, void*)+0x3c>
c0014a02:	83 ec 0c             	sub    esp,0xc
c0014a05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a09:	e8 5b a9 00 00       	call   c001f369 <Vm::x87Handler(regs*)>
c0014a0e:	83 c4 10             	add    esp,0x10
c0014a11:	84 c0                	test   al,al
c0014a13:	74 24                	je     c0014a39 <x87EmulHandler(regs*, void*)+0x5c>
c0014a15:	83 c4 0c             	add    esp,0xc
c0014a18:	c3                   	ret    
c0014a19:	83 ec 0c             	sub    esp,0xc
c0014a1c:	68 20 ad 02 c0       	push   0xc002ad20
c0014a21:	e8 8d dc ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014a26:	0f 06                	clts   
c0014a28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a2d:	83 c4 10             	add    esp,0x10
c0014a30:	a3 e8 da 02 c0       	mov    ds:0xc002dae8,eax
c0014a35:	83 c4 0c             	add    esp,0xc
c0014a38:	c3                   	ret    
c0014a39:	83 ec 0c             	sub    esp,0xc
c0014a3c:	68 0a ad 02 c0       	push   0xc002ad0a
c0014a41:	e8 6d dc ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014a46:	5a                   	pop    edx
c0014a47:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a4b:	e8 fe fa ff ff       	call   c001454e <displayDebugInfo(regs*)>

c0014a50 <gpFault(regs*, void*)>:
c0014a50:	53                   	push   ebx
c0014a51:	83 ec 14             	sub    esp,0x14
c0014a54:	c7 05 e4 da 02 c0 42 e8 01 c0 	mov    DWORD PTR ds:0xc002dae4,0xc001e842
c0014a5e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a62:	53                   	push   ebx
c0014a63:	e8 da 9d 00 00       	call   c001e842 <Vm::faultHandler(regs*)>
c0014a68:	83 c4 10             	add    esp,0x10
c0014a6b:	84 c0                	test   al,al
c0014a6d:	74 05                	je     c0014a74 <gpFault(regs*, void*)+0x24>
c0014a6f:	83 c4 08             	add    esp,0x8
c0014a72:	5b                   	pop    ebx
c0014a73:	c3                   	ret    
c0014a74:	83 ec 0c             	sub    esp,0xc
c0014a77:	68 2d ad 02 c0       	push   0xc002ad2d
c0014a7c:	e8 32 dc ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014a81:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a84:	e8 c5 fa ff ff       	call   c001454e <displayDebugInfo(regs*)>

c0014a89 <pgFault(regs*, void*)>:
c0014a89:	83 ec 18             	sub    esp,0x18
c0014a8c:	68 48 ad 02 c0       	push   0xc002ad48
c0014a91:	e8 1d dc ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014a96:	0f 20 d0             	mov    eax,cr2
c0014a99:	5a                   	pop    edx
c0014a9a:	59                   	pop    ecx
c0014a9b:	50                   	push   eax
c0014a9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014aa1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014aa4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0014aaa:	e8 2d d7 ff ff       	call   c00121dc <VAS::tryLoadBackOffDisk(unsigned long)>
c0014aaf:	83 c4 10             	add    esp,0x10
c0014ab2:	84 c0                	test   al,al
c0014ab4:	74 04                	je     c0014aba <pgFault(regs*, void*)+0x31>
c0014ab6:	83 c4 0c             	add    esp,0xc
c0014ab9:	c3                   	ret    
c0014aba:	83 ec 0c             	sub    esp,0xc
c0014abd:	68 52 ad 02 c0       	push   0xc002ad52
c0014ac2:	e8 ec db ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014ac7:	58                   	pop    eax
c0014ac8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014acc:	e8 7d fa ff ff       	call   c001454e <displayDebugInfo(regs*)>

c0014ad1 <otherISRHandler(regs*, void*)>:
c0014ad1:	53                   	push   ebx
c0014ad2:	83 ec 0c             	sub    esp,0xc
c0014ad5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014ad9:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014adc:	50                   	push   eax
c0014add:	50                   	push   eax
c0014ade:	68 5f ad 02 c0       	push   0xc002ad5f
c0014ae3:	e8 cb db ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014ae8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014aeb:	e8 5e fa ff ff       	call   c001454e <displayDebugInfo(regs*)>

c0014af0 <opcodeFault(regs*, void*)>:
c0014af0:	55                   	push   ebp
c0014af1:	89 e5                	mov    ebp,esp
c0014af3:	56                   	push   esi
c0014af4:	53                   	push   ebx
c0014af5:	83 ec 40             	sub    esp,0x40
c0014af8:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0014afd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b03:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014b09:	84 c0                	test   al,al
c0014b0b:	74 24                	je     c0014b31 <opcodeFault(regs*, void*)+0x41>
c0014b0d:	83 ec 0c             	sub    esp,0xc
c0014b10:	68 7c ad 02 c0       	push   0xc002ad7c
c0014b15:	e8 99 db ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b20:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b23:	8d 50 19             	lea    edx,[eax+0x19]
c0014b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b29:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b2c:	e9 d5 05 00 00       	jmp    c0015106 <opcodeFault(regs*, void*)+0x616>
c0014b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b34:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b37:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014b3a:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014b3e:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b45:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b48:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014b4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b4e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b50:	3c f0                	cmp    al,0xf0
c0014b52:	75 17                	jne    c0014b6b <opcodeFault(regs*, void*)+0x7b>
c0014b54:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b5d:	8d 50 01             	lea    edx,[eax+0x1]
c0014b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b63:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b66:	e9 da 00 00 00       	jmp    c0014c45 <opcodeFault(regs*, void*)+0x155>
c0014b6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b6e:	8a 00                	mov    al,BYTE PTR [eax]
c0014b70:	3c f2                	cmp    al,0xf2
c0014b72:	74 09                	je     c0014b7d <opcodeFault(regs*, void*)+0x8d>
c0014b74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b77:	8a 00                	mov    al,BYTE PTR [eax]
c0014b79:	3c f3                	cmp    al,0xf3
c0014b7b:	75 1b                	jne    c0014b98 <opcodeFault(regs*, void*)+0xa8>
c0014b7d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b81:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b87:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b8a:	8d 50 01             	lea    edx,[eax+0x1]
c0014b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b90:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b93:	e9 ad 00 00 00       	jmp    c0014c45 <opcodeFault(regs*, void*)+0x155>
c0014b98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b9b:	8a 00                	mov    al,BYTE PTR [eax]
c0014b9d:	3c 66                	cmp    al,0x66
c0014b9f:	75 1f                	jne    c0014bc0 <opcodeFault(regs*, void*)+0xd0>
c0014ba1:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ba5:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014ba9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014baf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bb2:	8d 50 01             	lea    edx,[eax+0x1]
c0014bb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bb8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bbb:	e9 85 00 00 00       	jmp    c0014c45 <opcodeFault(regs*, void*)+0x155>
c0014bc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bc3:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc5:	3c 67                	cmp    al,0x67
c0014bc7:	75 18                	jne    c0014be1 <opcodeFault(regs*, void*)+0xf1>
c0014bc9:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bcd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bd6:	8d 50 01             	lea    edx,[eax+0x1]
c0014bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bdc:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014bdf:	eb 64                	jmp    c0014c45 <opcodeFault(regs*, void*)+0x155>
c0014be1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014be4:	8a 00                	mov    al,BYTE PTR [eax]
c0014be6:	3c 2e                	cmp    al,0x2e
c0014be8:	74 09                	je     c0014bf3 <opcodeFault(regs*, void*)+0x103>
c0014bea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bed:	8a 00                	mov    al,BYTE PTR [eax]
c0014bef:	3c 3e                	cmp    al,0x3e
c0014bf1:	75 18                	jne    c0014c0b <opcodeFault(regs*, void*)+0x11b>
c0014bf3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bf7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c00:	8d 50 01             	lea    edx,[eax+0x1]
c0014c03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c06:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c09:	eb 3a                	jmp    c0014c45 <opcodeFault(regs*, void*)+0x155>
c0014c0b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c0e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c10:	3c 36                	cmp    al,0x36
c0014c12:	74 1b                	je     c0014c2f <opcodeFault(regs*, void*)+0x13f>
c0014c14:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c17:	8a 00                	mov    al,BYTE PTR [eax]
c0014c19:	3c 26                	cmp    al,0x26
c0014c1b:	74 12                	je     c0014c2f <opcodeFault(regs*, void*)+0x13f>
c0014c1d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c20:	8a 00                	mov    al,BYTE PTR [eax]
c0014c22:	3c 64                	cmp    al,0x64
c0014c24:	74 09                	je     c0014c2f <opcodeFault(regs*, void*)+0x13f>
c0014c26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c29:	8a 00                	mov    al,BYTE PTR [eax]
c0014c2b:	3c 65                	cmp    al,0x65
c0014c2d:	75 16                	jne    c0014c45 <opcodeFault(regs*, void*)+0x155>
c0014c2f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014c33:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c3c:	8d 50 01             	lea    edx,[eax+0x1]
c0014c3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c42:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c48:	8a 00                	mov    al,BYTE PTR [eax]
c0014c4a:	3c 0f                	cmp    al,0xf
c0014c4c:	0f 85 ad 00 00 00    	jne    c0014cff <opcodeFault(regs*, void*)+0x20f>
c0014c52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c55:	40                   	inc    eax
c0014c56:	8a 00                	mov    al,BYTE PTR [eax]
c0014c58:	3c c2                	cmp    al,0xc2
c0014c5a:	74 0e                	je     c0014c6a <opcodeFault(regs*, void*)+0x17a>
c0014c5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c5f:	40                   	inc    eax
c0014c60:	8a 00                	mov    al,BYTE PTR [eax]
c0014c62:	3c c3                	cmp    al,0xc3
c0014c64:	0f 85 95 00 00 00    	jne    c0014cff <opcodeFault(regs*, void*)+0x20f>
c0014c6a:	83 ec 0c             	sub    esp,0xc
c0014c6d:	68 9f ad 02 c0       	push   0xc002ad9f
c0014c72:	e8 3c da ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0014c77:	83 c4 10             	add    esp,0x10
c0014c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c7d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c80:	8d 50 01             	lea    edx,[eax+0x1]
c0014c83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c86:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c89:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c8f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c91:	8d 50 fe             	lea    edx,[eax-0x2]
c0014c94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c97:	88 10                	mov    BYTE PTR [eax],dl
c0014c99:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014c9c:	50                   	push   eax
c0014c9d:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014ca0:	50                   	push   eax
c0014ca1:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014ca4:	50                   	push   eax
c0014ca5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ca8:	e8 8b 48 00 00       	call   c0019538 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014cad:	83 c4 10             	add    esp,0x10
c0014cb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cb3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cb6:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cb9:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014cbc:	01 d0                	add    eax,edx
c0014cbe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014cc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cc7:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014cca:	48                   	dec    eax
c0014ccb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd1:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014cd4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cda:	83 ec 04             	sub    esp,0x4
c0014cdd:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014ce0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014ce3:	50                   	push   eax
c0014ce4:	e8 cb b4 fe ff       	call   c00001b4 <voodooXADD>
c0014ce9:	83 c4 10             	add    esp,0x10
c0014cec:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014cef:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014cf2:	01 c2                	add    edx,eax
c0014cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cf7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cfa:	e9 07 04 00 00       	jmp    c0015106 <opcodeFault(regs*, void*)+0x616>
c0014cff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d02:	8a 00                	mov    al,BYTE PTR [eax]
c0014d04:	3c 0f                	cmp    al,0xf
c0014d06:	0f 85 8b 01 00 00    	jne    c0014e97 <opcodeFault(regs*, void*)+0x3a7>
c0014d0c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d0f:	40                   	inc    eax
c0014d10:	8a 00                	mov    al,BYTE PTR [eax]
c0014d12:	3c c7                	cmp    al,0xc7
c0014d14:	0f 86 7d 01 00 00    	jbe    c0014e97 <opcodeFault(regs*, void*)+0x3a7>
c0014d1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1d:	40                   	inc    eax
c0014d1e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d20:	3c cf                	cmp    al,0xcf
c0014d22:	0f 87 6f 01 00 00    	ja     c0014e97 <opcodeFault(regs*, void*)+0x3a7>
c0014d28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d2b:	40                   	inc    eax
c0014d2c:	8a 00                	mov    al,BYTE PTR [eax]
c0014d2e:	83 c0 38             	add    eax,0x38
c0014d31:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014d34:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014d38:	75 0b                	jne    c0014d45 <opcodeFault(regs*, void*)+0x255>
c0014d3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d3d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014d40:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d43:	eb 75                	jmp    c0014dba <opcodeFault(regs*, void*)+0x2ca>
c0014d45:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014d49:	75 0b                	jne    c0014d56 <opcodeFault(regs*, void*)+0x266>
c0014d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d4e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014d51:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d54:	eb 64                	jmp    c0014dba <opcodeFault(regs*, void*)+0x2ca>
c0014d56:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014d5a:	75 0b                	jne    c0014d67 <opcodeFault(regs*, void*)+0x277>
c0014d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d62:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d65:	eb 53                	jmp    c0014dba <opcodeFault(regs*, void*)+0x2ca>
c0014d67:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d6b:	75 0b                	jne    c0014d78 <opcodeFault(regs*, void*)+0x288>
c0014d6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d70:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d73:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d76:	eb 42                	jmp    c0014dba <opcodeFault(regs*, void*)+0x2ca>
c0014d78:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d7c:	75 0b                	jne    c0014d89 <opcodeFault(regs*, void*)+0x299>
c0014d7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d81:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d84:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d87:	eb 31                	jmp    c0014dba <opcodeFault(regs*, void*)+0x2ca>
c0014d89:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d8d:	75 0b                	jne    c0014d9a <opcodeFault(regs*, void*)+0x2aa>
c0014d8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d92:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014d95:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d98:	eb 20                	jmp    c0014dba <opcodeFault(regs*, void*)+0x2ca>
c0014d9a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d9e:	75 0b                	jne    c0014dab <opcodeFault(regs*, void*)+0x2bb>
c0014da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014da6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014da9:	eb 0f                	jmp    c0014dba <opcodeFault(regs*, void*)+0x2ca>
c0014dab:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014daf:	75 09                	jne    c0014dba <opcodeFault(regs*, void*)+0x2ca>
c0014db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014db7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dba:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014dbe:	74 10                	je     c0014dd0 <opcodeFault(regs*, void*)+0x2e0>
c0014dc0:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014dc7:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014dce:	eb 2d                	jmp    c0014dfd <opcodeFault(regs*, void*)+0x30d>
c0014dd0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014dd3:	c1 e0 18             	shl    eax,0x18
c0014dd6:	89 c2                	mov    edx,eax
c0014dd8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014ddb:	c1 e0 08             	shl    eax,0x8
c0014dde:	25 00 00 ff 00       	and    eax,0xff0000
c0014de3:	09 c2                	or     edx,eax
c0014de5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014de8:	c1 e8 08             	shr    eax,0x8
c0014deb:	25 00 ff 00 00       	and    eax,0xff00
c0014df0:	09 c2                	or     edx,eax
c0014df2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014df5:	c1 e8 18             	shr    eax,0x18
c0014df8:	09 d0                	or     eax,edx
c0014dfa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014dfd:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014e01:	75 0b                	jne    c0014e0e <opcodeFault(regs*, void*)+0x31e>
c0014e03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e06:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e09:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014e0c:	eb 75                	jmp    c0014e83 <opcodeFault(regs*, void*)+0x393>
c0014e0e:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014e12:	75 0b                	jne    c0014e1f <opcodeFault(regs*, void*)+0x32f>
c0014e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e17:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e1a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014e1d:	eb 64                	jmp    c0014e83 <opcodeFault(regs*, void*)+0x393>
c0014e1f:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014e23:	75 0b                	jne    c0014e30 <opcodeFault(regs*, void*)+0x340>
c0014e25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e28:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e2b:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014e2e:	eb 53                	jmp    c0014e83 <opcodeFault(regs*, void*)+0x393>
c0014e30:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014e34:	75 0b                	jne    c0014e41 <opcodeFault(regs*, void*)+0x351>
c0014e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e39:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e3c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014e3f:	eb 42                	jmp    c0014e83 <opcodeFault(regs*, void*)+0x393>
c0014e41:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014e45:	75 0b                	jne    c0014e52 <opcodeFault(regs*, void*)+0x362>
c0014e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e4a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e4d:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014e50:	eb 31                	jmp    c0014e83 <opcodeFault(regs*, void*)+0x393>
c0014e52:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014e56:	75 0b                	jne    c0014e63 <opcodeFault(regs*, void*)+0x373>
c0014e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e5e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e61:	eb 20                	jmp    c0014e83 <opcodeFault(regs*, void*)+0x393>
c0014e63:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e67:	75 0b                	jne    c0014e74 <opcodeFault(regs*, void*)+0x384>
c0014e69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e6f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e72:	eb 0f                	jmp    c0014e83 <opcodeFault(regs*, void*)+0x393>
c0014e74:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e78:	75 09                	jne    c0014e83 <opcodeFault(regs*, void*)+0x393>
c0014e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e7d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e80:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e86:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e89:	8d 50 02             	lea    edx,[eax+0x2]
c0014e8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e8f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e92:	e9 6f 02 00 00       	jmp    c0015106 <opcodeFault(regs*, void*)+0x616>
c0014e97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e9a:	8a 00                	mov    al,BYTE PTR [eax]
c0014e9c:	3c 0f                	cmp    al,0xf
c0014e9e:	0f 85 8d 01 00 00    	jne    c0015031 <opcodeFault(regs*, void*)+0x541>
c0014ea4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea7:	40                   	inc    eax
c0014ea8:	8a 00                	mov    al,BYTE PTR [eax]
c0014eaa:	3c c7                	cmp    al,0xc7
c0014eac:	0f 85 7f 01 00 00    	jne    c0015031 <opcodeFault(regs*, void*)+0x541>
c0014eb2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014eb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eb8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ebb:	8d 50 01             	lea    edx,[eax+0x1]
c0014ebe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ec1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ec4:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014ec7:	50                   	push   eax
c0014ec8:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014ecb:	50                   	push   eax
c0014ecc:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014ecf:	50                   	push   eax
c0014ed0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014ed3:	e8 60 46 00 00       	call   c0019538 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014ed8:	83 c4 10             	add    esp,0x10
c0014edb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014ede:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014ee1:	83 f0 01             	xor    eax,0x1
c0014ee4:	84 c0                	test   al,al
c0014ee6:	0f 84 45 01 00 00    	je     c0015031 <opcodeFault(regs*, void*)+0x541>
c0014eec:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014eef:	3c 01                	cmp    al,0x1
c0014ef1:	0f 85 3a 01 00 00    	jne    c0015031 <opcodeFault(regs*, void*)+0x541>
c0014ef7:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014efa:	83 f0 01             	xor    eax,0x1
c0014efd:	84 c0                	test   al,al
c0014eff:	0f 84 2c 01 00 00    	je     c0015031 <opcodeFault(regs*, void*)+0x541>
c0014f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f08:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f0b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f0e:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014f15:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f18:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f1b:	89 c2                	mov    edx,eax
c0014f1d:	b8 00 00 00 00       	mov    eax,0x0
c0014f22:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f25:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f2b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014f2e:	ba 00 00 00 00       	mov    edx,0x0
c0014f33:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014f36:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014f39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f3c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014f3f:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f42:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014f49:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f4c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f4f:	89 c2                	mov    edx,eax
c0014f51:	b8 00 00 00 00       	mov    eax,0x0
c0014f56:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014f59:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f62:	ba 00 00 00 00       	mov    edx,0x0
c0014f67:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f6a:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f6d:	fa                   	cli    
c0014f6e:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0014f73:	40                   	inc    eax
c0014f74:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0014f79:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f7f:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f81:	89 c1                	mov    ecx,eax
c0014f83:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014f86:	89 cb                	mov    ebx,ecx
c0014f88:	89 d0                	mov    eax,edx
c0014f8a:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014f8d:	89 c6                	mov    esi,eax
c0014f8f:	89 f0                	mov    eax,esi
c0014f91:	09 d8                	or     eax,ebx
c0014f93:	85 c0                	test   eax,eax
c0014f95:	75 21                	jne    c0014fb8 <opcodeFault(regs*, void*)+0x4c8>
c0014f97:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014f9a:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f9d:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014fa0:	89 01                	mov    DWORD PTR [ecx],eax
c0014fa2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014fa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014fab:	83 c8 40             	or     eax,0x40
c0014fae:	89 c2                	mov    edx,eax
c0014fb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb3:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014fb6:	eb 3e                	jmp    c0014ff6 <opcodeFault(regs*, void*)+0x506>
c0014fb8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014fbb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014fbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0014fc0:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014fc3:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014fc6:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcc:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fcf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014fd2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014fd5:	89 d0                	mov    eax,edx
c0014fd7:	31 d2                	xor    edx,edx
c0014fd9:	89 c3                	mov    ebx,eax
c0014fdb:	89 d6                	mov    esi,edx
c0014fdd:	89 da                	mov    edx,ebx
c0014fdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe2:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014feb:	83 e0 bf             	and    eax,0xffffffbf
c0014fee:	89 c2                	mov    edx,eax
c0014ff0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff3:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014ff6:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0014ffb:	48                   	dec    eax
c0014ffc:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0015001:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0015006:	85 c0                	test   eax,eax
c0015008:	75 01                	jne    c001500b <opcodeFault(regs*, void*)+0x51b>
c001500a:	fb                   	sti    
c001500b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001500e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015011:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015014:	01 c2                	add    edx,eax
c0015016:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015019:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001501c:	83 ec 0c             	sub    esp,0xc
c001501f:	68 ae ad 02 c0       	push   0xc002adae
c0015024:	e8 8a d6 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0015029:	83 c4 10             	add    esp,0x10
c001502c:	e9 d5 00 00 00       	jmp    c0015106 <opcodeFault(regs*, void*)+0x616>
c0015031:	83 ec 0c             	sub    esp,0xc
c0015034:	68 c1 ad 02 c0       	push   0xc002adc1
c0015039:	e8 75 d6 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001503e:	83 c4 10             	add    esp,0x10
c0015041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015044:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001504a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001504d:	c1 e0 04             	shl    eax,0x4
c0015050:	01 d0                	add    eax,edx
c0015052:	83 c0 03             	add    eax,0x3
c0015055:	8a 00                	mov    al,BYTE PTR [eax]
c0015057:	0f b6 d8             	movzx  ebx,al
c001505a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015063:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015066:	c1 e0 04             	shl    eax,0x4
c0015069:	01 d0                	add    eax,edx
c001506b:	83 c0 02             	add    eax,0x2
c001506e:	8a 00                	mov    al,BYTE PTR [eax]
c0015070:	0f b6 c8             	movzx  ecx,al
c0015073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015076:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001507c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001507f:	c1 e0 04             	shl    eax,0x4
c0015082:	01 d0                	add    eax,edx
c0015084:	40                   	inc    eax
c0015085:	8a 00                	mov    al,BYTE PTR [eax]
c0015087:	0f b6 d0             	movzx  edx,al
c001508a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001508d:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015093:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015096:	c1 e0 04             	shl    eax,0x4
c0015099:	01 f0                	add    eax,esi
c001509b:	8a 00                	mov    al,BYTE PTR [eax]
c001509d:	0f b6 c0             	movzx  eax,al
c00150a0:	83 ec 0c             	sub    esp,0xc
c00150a3:	53                   	push   ebx
c00150a4:	51                   	push   ecx
c00150a5:	52                   	push   edx
c00150a6:	50                   	push   eax
c00150a7:	68 d4 ad 02 c0       	push   0xc002add4
c00150ac:	e8 02 d6 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00150b1:	83 c4 20             	add    esp,0x20
c00150b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ba:	83 c0 03             	add    eax,0x3
c00150bd:	8a 00                	mov    al,BYTE PTR [eax]
c00150bf:	0f b6 d8             	movzx  ebx,al
c00150c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150c8:	83 c0 02             	add    eax,0x2
c00150cb:	8a 00                	mov    al,BYTE PTR [eax]
c00150cd:	0f b6 c8             	movzx  ecx,al
c00150d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150d6:	40                   	inc    eax
c00150d7:	8a 00                	mov    al,BYTE PTR [eax]
c00150d9:	0f b6 d0             	movzx  edx,al
c00150dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150e2:	8a 00                	mov    al,BYTE PTR [eax]
c00150e4:	0f b6 c0             	movzx  eax,al
c00150e7:	83 ec 0c             	sub    esp,0xc
c00150ea:	53                   	push   ebx
c00150eb:	51                   	push   ecx
c00150ec:	52                   	push   edx
c00150ed:	50                   	push   eax
c00150ee:	68 fc ad 02 c0       	push   0xc002adfc
c00150f3:	e8 bb d5 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00150f8:	83 c4 20             	add    esp,0x20
c00150fb:	83 ec 0c             	sub    esp,0xc
c00150fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015101:	e8 48 f4 ff ff       	call   c001454e <displayDebugInfo(regs*)>
c0015106:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015109:	5b                   	pop    ebx
c001510a:	5e                   	pop    esi
c001510b:	5d                   	pop    ebp
c001510c:	c3                   	ret    

c001510d <displayProgramFault(char const*)>:
c001510d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015112:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015115:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001511b:	85 c0                	test   eax,eax
c001511d:	74 15                	je     c0015134 <displayProgramFault(char const*)+0x27>
c001511f:	83 ec 0c             	sub    esp,0xc
c0015122:	6a 04                	push   0x4
c0015124:	6a 0f                	push   0xf
c0015126:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001512a:	50                   	push   eax
c001512b:	e8 16 b4 ff ff       	call   c0010546 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015130:	83 c4 1c             	add    esp,0x1c
c0015133:	c3                   	ret    
c0015134:	c3                   	ret    

c0015135 <setupInterruptController()>:
c0015135:	55                   	push   ebp
c0015136:	89 e5                	mov    ebp,esp
c0015138:	53                   	push   ebx
c0015139:	83 ec 24             	sub    esp,0x24
c001513c:	b8 00 00 00 00       	mov    eax,0x0
c0015141:	85 c0                	test   eax,eax
c0015143:	0f 95 c0             	setne  al
c0015146:	84 c0                	test   al,al
c0015148:	74 5b                	je     c00151a5 <setupInterruptController()+0x70>
c001514a:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015151:	83 ec 0c             	sub    esp,0xc
c0015154:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015157:	e8 3d a4 ff ff       	call   c000f599 <malloc>
c001515c:	83 c4 10             	add    esp,0x10
c001515f:	89 c3                	mov    ebx,eax
c0015161:	83 ec 0c             	sub    esp,0xc
c0015164:	53                   	push   ebx
c0015165:	e8 fc 04 01 00       	call   c0025666 <APIC::APIC()>
c001516a:	83 c4 10             	add    esp,0x10
c001516d:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015170:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015173:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015176:	8b 00                	mov    eax,DWORD PTR [eax]
c0015178:	83 c0 08             	add    eax,0x8
c001517b:	8b 00                	mov    eax,DWORD PTR [eax]
c001517d:	6a 00                	push   0x0
c001517f:	6a 00                	push   0x0
c0015181:	6a 00                	push   0x0
c0015183:	52                   	push   edx
c0015184:	ff d0                	call   eax
c0015186:	83 c4 10             	add    esp,0x10
c0015189:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001518e:	83 ec 08             	sub    esp,0x8
c0015191:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015194:	50                   	push   eax
c0015195:	e8 52 e9 ff ff       	call   c0013aec <Device::addChild(Device*)>
c001519a:	83 c4 10             	add    esp,0x10
c001519d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00151a0:	e9 79 03 00 00       	jmp    c001551e <setupInterruptController()+0x3e9>
c00151a5:	a0 e0 02 03 c0       	mov    al,ds:0xc00302e0
c00151aa:	84 c0                	test   al,al
c00151ac:	75 14                	jne    c00151c2 <setupInterruptController()+0x8d>
c00151ae:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00151b3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00151b9:	83 e2 fe             	and    edx,0xfffffffe
c00151bc:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00151c2:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00151c7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00151cd:	83 e0 01             	and    eax,0x1
c00151d0:	84 c0                	test   al,al
c00151d2:	0f 95 c0             	setne  al
c00151d5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00151d8:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00151df:	83 ec 0c             	sub    esp,0xc
c00151e2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00151e5:	e8 af a3 ff ff       	call   c000f599 <malloc>
c00151ea:	83 c4 10             	add    esp,0x10
c00151ed:	89 c3                	mov    ebx,eax
c00151ef:	83 ec 0c             	sub    esp,0xc
c00151f2:	53                   	push   ebx
c00151f3:	e8 c6 09 01 00       	call   c0025bbe <PIC::PIC()>
c00151f8:	83 c4 10             	add    esp,0x10
c00151fb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00151fe:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015201:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015204:	8b 00                	mov    eax,DWORD PTR [eax]
c0015206:	83 c0 08             	add    eax,0x8
c0015209:	8b 00                	mov    eax,DWORD PTR [eax]
c001520b:	6a 00                	push   0x0
c001520d:	6a 00                	push   0x0
c001520f:	6a 00                	push   0x0
c0015211:	52                   	push   edx
c0015212:	ff d0                	call   eax
c0015214:	83 c4 10             	add    esp,0x10
c0015217:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001521b:	74 73                	je     c0015290 <setupInterruptController()+0x15b>
c001521d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015220:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015223:	8b 00                	mov    eax,DWORD PTR [eax]
c0015225:	83 c0 0c             	add    eax,0xc
c0015228:	8b 00                	mov    eax,DWORD PTR [eax]
c001522a:	6a 00                	push   0x0
c001522c:	6a 00                	push   0x0
c001522e:	6a 00                	push   0x0
c0015230:	52                   	push   edx
c0015231:	ff d0                	call   eax
c0015233:	83 c4 10             	add    esp,0x10
c0015236:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001523a:	74 15                	je     c0015251 <setupInterruptController()+0x11c>
c001523c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001523f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015241:	83 c0 04             	add    eax,0x4
c0015244:	8b 00                	mov    eax,DWORD PTR [eax]
c0015246:	83 ec 0c             	sub    esp,0xc
c0015249:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001524c:	ff d0                	call   eax
c001524e:	83 c4 10             	add    esp,0x10
c0015251:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015258:	83 ec 0c             	sub    esp,0xc
c001525b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001525e:	e8 36 a3 ff ff       	call   c000f599 <malloc>
c0015263:	83 c4 10             	add    esp,0x10
c0015266:	89 c3                	mov    ebx,eax
c0015268:	83 ec 0c             	sub    esp,0xc
c001526b:	53                   	push   ebx
c001526c:	e8 f5 03 01 00       	call   c0025666 <APIC::APIC()>
c0015271:	83 c4 10             	add    esp,0x10
c0015274:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015277:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001527a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001527d:	8b 00                	mov    eax,DWORD PTR [eax]
c001527f:	83 c0 08             	add    eax,0x8
c0015282:	8b 00                	mov    eax,DWORD PTR [eax]
c0015284:	6a 00                	push   0x0
c0015286:	6a 00                	push   0x0
c0015288:	6a 00                	push   0x0
c001528a:	52                   	push   edx
c001528b:	ff d0                	call   eax
c001528d:	83 c4 10             	add    esp,0x10
c0015290:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0015295:	83 ec 08             	sub    esp,0x8
c0015298:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001529b:	50                   	push   eax
c001529c:	e8 4b e8 ff ff       	call   c0013aec <Device::addChild(Device*)>
c00152a1:	83 c4 10             	add    esp,0x10
c00152a4:	c7 05 e8 da 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dae8,0x0
c00152ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b3:	83 c0 24             	add    eax,0x24
c00152b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00152b8:	6a 00                	push   0x0
c00152ba:	68 d1 4a 01 c0       	push   0xc0014ad1
c00152bf:	6a 00                	push   0x0
c00152c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152c4:	ff d0                	call   eax
c00152c6:	83 c4 10             	add    esp,0x10
c00152c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ce:	83 c0 24             	add    eax,0x24
c00152d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152d3:	6a 00                	push   0x0
c00152d5:	68 d1 4a 01 c0       	push   0xc0014ad1
c00152da:	6a 01                	push   0x1
c00152dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152df:	ff d0                	call   eax
c00152e1:	83 c4 10             	add    esp,0x10
c00152e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e9:	83 c0 24             	add    eax,0x24
c00152ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00152ee:	6a 00                	push   0x0
c00152f0:	68 ab 43 01 c0       	push   0xc00143ab
c00152f5:	6a 02                	push   0x2
c00152f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152fa:	ff d0                	call   eax
c00152fc:	83 c4 10             	add    esp,0x10
c00152ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015302:	8b 00                	mov    eax,DWORD PTR [eax]
c0015304:	83 c0 24             	add    eax,0x24
c0015307:	8b 00                	mov    eax,DWORD PTR [eax]
c0015309:	6a 00                	push   0x0
c001530b:	68 d1 4a 01 c0       	push   0xc0014ad1
c0015310:	6a 03                	push   0x3
c0015312:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015315:	ff d0                	call   eax
c0015317:	83 c4 10             	add    esp,0x10
c001531a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531d:	8b 00                	mov    eax,DWORD PTR [eax]
c001531f:	83 c0 24             	add    eax,0x24
c0015322:	8b 00                	mov    eax,DWORD PTR [eax]
c0015324:	6a 00                	push   0x0
c0015326:	68 d1 4a 01 c0       	push   0xc0014ad1
c001532b:	6a 04                	push   0x4
c001532d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015330:	ff d0                	call   eax
c0015332:	83 c4 10             	add    esp,0x10
c0015335:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015338:	8b 00                	mov    eax,DWORD PTR [eax]
c001533a:	83 c0 24             	add    eax,0x24
c001533d:	8b 00                	mov    eax,DWORD PTR [eax]
c001533f:	6a 00                	push   0x0
c0015341:	68 d1 4a 01 c0       	push   0xc0014ad1
c0015346:	6a 05                	push   0x5
c0015348:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001534b:	ff d0                	call   eax
c001534d:	83 c4 10             	add    esp,0x10
c0015350:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015353:	8b 00                	mov    eax,DWORD PTR [eax]
c0015355:	83 c0 24             	add    eax,0x24
c0015358:	8b 00                	mov    eax,DWORD PTR [eax]
c001535a:	6a 00                	push   0x0
c001535c:	68 f0 4a 01 c0       	push   0xc0014af0
c0015361:	6a 06                	push   0x6
c0015363:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015366:	ff d0                	call   eax
c0015368:	83 c4 10             	add    esp,0x10
c001536b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001536e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015370:	83 c0 24             	add    eax,0x24
c0015373:	8b 00                	mov    eax,DWORD PTR [eax]
c0015375:	6a 00                	push   0x0
c0015377:	68 dd 49 01 c0       	push   0xc00149dd
c001537c:	6a 07                	push   0x7
c001537e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015381:	ff d0                	call   eax
c0015383:	83 c4 10             	add    esp,0x10
c0015386:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015389:	8b 00                	mov    eax,DWORD PTR [eax]
c001538b:	83 c0 24             	add    eax,0x24
c001538e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015390:	6a 00                	push   0x0
c0015392:	68 c6 41 01 c0       	push   0xc00141c6
c0015397:	6a 08                	push   0x8
c0015399:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001539c:	ff d0                	call   eax
c001539e:	83 c4 10             	add    esp,0x10
c00153a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153a6:	83 c0 24             	add    eax,0x24
c00153a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ab:	6a 00                	push   0x0
c00153ad:	68 d1 4a 01 c0       	push   0xc0014ad1
c00153b2:	6a 09                	push   0x9
c00153b4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153b7:	ff d0                	call   eax
c00153b9:	83 c4 10             	add    esp,0x10
c00153bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c1:	83 c0 24             	add    eax,0x24
c00153c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c6:	6a 00                	push   0x0
c00153c8:	68 d1 4a 01 c0       	push   0xc0014ad1
c00153cd:	6a 0a                	push   0xa
c00153cf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153d2:	ff d0                	call   eax
c00153d4:	83 c4 10             	add    esp,0x10
c00153d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153da:	8b 00                	mov    eax,DWORD PTR [eax]
c00153dc:	83 c0 24             	add    eax,0x24
c00153df:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e1:	6a 00                	push   0x0
c00153e3:	68 d1 4a 01 c0       	push   0xc0014ad1
c00153e8:	6a 0b                	push   0xb
c00153ea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153ed:	ff d0                	call   eax
c00153ef:	83 c4 10             	add    esp,0x10
c00153f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f7:	83 c0 24             	add    eax,0x24
c00153fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fc:	6a 00                	push   0x0
c00153fe:	68 d1 4a 01 c0       	push   0xc0014ad1
c0015403:	6a 0c                	push   0xc
c0015405:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015408:	ff d0                	call   eax
c001540a:	83 c4 10             	add    esp,0x10
c001540d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015410:	8b 00                	mov    eax,DWORD PTR [eax]
c0015412:	83 c0 24             	add    eax,0x24
c0015415:	8b 00                	mov    eax,DWORD PTR [eax]
c0015417:	6a 00                	push   0x0
c0015419:	68 50 4a 01 c0       	push   0xc0014a50
c001541e:	6a 0d                	push   0xd
c0015420:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015423:	ff d0                	call   eax
c0015425:	83 c4 10             	add    esp,0x10
c0015428:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001542b:	8b 00                	mov    eax,DWORD PTR [eax]
c001542d:	83 c0 24             	add    eax,0x24
c0015430:	8b 00                	mov    eax,DWORD PTR [eax]
c0015432:	6a 00                	push   0x0
c0015434:	68 89 4a 01 c0       	push   0xc0014a89
c0015439:	6a 0e                	push   0xe
c001543b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001543e:	ff d0                	call   eax
c0015440:	83 c4 10             	add    esp,0x10
c0015443:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015446:	8b 00                	mov    eax,DWORD PTR [eax]
c0015448:	83 c0 24             	add    eax,0x24
c001544b:	8b 00                	mov    eax,DWORD PTR [eax]
c001544d:	6a 00                	push   0x0
c001544f:	68 d1 4a 01 c0       	push   0xc0014ad1
c0015454:	6a 0f                	push   0xf
c0015456:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015459:	ff d0                	call   eax
c001545b:	83 c4 10             	add    esp,0x10
c001545e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015461:	8b 00                	mov    eax,DWORD PTR [eax]
c0015463:	83 c0 24             	add    eax,0x24
c0015466:	8b 00                	mov    eax,DWORD PTR [eax]
c0015468:	6a 00                	push   0x0
c001546a:	68 d1 4a 01 c0       	push   0xc0014ad1
c001546f:	6a 10                	push   0x10
c0015471:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015474:	ff d0                	call   eax
c0015476:	83 c4 10             	add    esp,0x10
c0015479:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547c:	8b 00                	mov    eax,DWORD PTR [eax]
c001547e:	83 c0 24             	add    eax,0x24
c0015481:	8b 00                	mov    eax,DWORD PTR [eax]
c0015483:	6a 00                	push   0x0
c0015485:	68 d1 4a 01 c0       	push   0xc0014ad1
c001548a:	6a 11                	push   0x11
c001548c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001548f:	ff d0                	call   eax
c0015491:	83 c4 10             	add    esp,0x10
c0015494:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015497:	8b 00                	mov    eax,DWORD PTR [eax]
c0015499:	83 c0 24             	add    eax,0x24
c001549c:	8b 00                	mov    eax,DWORD PTR [eax]
c001549e:	6a 00                	push   0x0
c00154a0:	68 d1 4a 01 c0       	push   0xc0014ad1
c00154a5:	6a 12                	push   0x12
c00154a7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154aa:	ff d0                	call   eax
c00154ac:	83 c4 10             	add    esp,0x10
c00154af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b4:	83 c0 24             	add    eax,0x24
c00154b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00154b9:	6a 00                	push   0x0
c00154bb:	68 d1 4a 01 c0       	push   0xc0014ad1
c00154c0:	6a 13                	push   0x13
c00154c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154c5:	ff d0                	call   eax
c00154c7:	83 c4 10             	add    esp,0x10
c00154ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00154cf:	83 c0 24             	add    eax,0x24
c00154d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d4:	6a 00                	push   0x0
c00154d6:	68 d1 4a 01 c0       	push   0xc0014ad1
c00154db:	6a 14                	push   0x14
c00154dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e0:	ff d0                	call   eax
c00154e2:	83 c4 10             	add    esp,0x10
c00154e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e8:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ea:	83 c0 24             	add    eax,0x24
c00154ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00154ef:	6a 00                	push   0x0
c00154f1:	68 d1 4a 01 c0       	push   0xc0014ad1
c00154f6:	6a 1e                	push   0x1e
c00154f8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154fb:	ff d0                	call   eax
c00154fd:	83 c4 10             	add    esp,0x10
c0015500:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015503:	8b 00                	mov    eax,DWORD PTR [eax]
c0015505:	83 c0 24             	add    eax,0x24
c0015508:	8b 00                	mov    eax,DWORD PTR [eax]
c001550a:	6a 00                	push   0x0
c001550c:	68 0e c0 01 c0       	push   0xc001c00e
c0015511:	6a 60                	push   0x60
c0015513:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015516:	ff d0                	call   eax
c0015518:	83 c4 10             	add    esp,0x10
c001551b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015521:	c9                   	leave  
c0015522:	c3                   	ret    
c0015523:	90                   	nop

c0015524 <InterruptController::convertLegacyIRQNumber(int)>:
c0015524:	55                   	push   ebp
c0015525:	89 e5                	mov    ebp,esp
c0015527:	83 ec 08             	sub    esp,0x8
c001552a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001552d:	83 ec 0c             	sub    esp,0xc
c0015530:	50                   	push   eax
c0015531:	e8 b6 e8 ff ff       	call   c0013dec <Device::getName()>
c0015536:	83 c4 10             	add    esp,0x10
c0015539:	8a 00                	mov    al,BYTE PTR [eax]
c001553b:	3c 41                	cmp    al,0x41
c001553d:	0f 94 c0             	sete   al
c0015540:	84 c0                	test   al,al
c0015542:	74 28                	je     c001556c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015544:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015548:	7f 12                	jg     c001555c <InterruptController::convertLegacyIRQNumber(int)+0x38>
c001554a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001554d:	05 c0 cb 02 c0       	add    eax,0xc002cbc0
c0015552:	8a 00                	mov    al,BYTE PTR [eax]
c0015554:	0f b6 c0             	movzx  eax,al
c0015557:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001555a:	eb 10                	jmp    c001556c <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001555c:	83 ec 0c             	sub    esp,0xc
c001555f:	68 24 ae 02 c0       	push   0xc002ae24
c0015564:	e8 b6 48 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0015569:	83 c4 10             	add    esp,0x10
c001556c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001556f:	c9                   	leave  
c0015570:	c3                   	ret    
c0015571:	90                   	nop

c0015572 <startGUI(void*)>:
c0015572:	55                   	push   ebp
c0015573:	89 e5                	mov    ebp,esp
c0015575:	53                   	push   ebx
c0015576:	83 ec 04             	sub    esp,0x4
c0015579:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001557e:	48                   	dec    eax
c001557f:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0015584:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0015589:	85 c0                	test   eax,eax
c001558b:	75 01                	jne    c001558e <startGUI(void*)+0x1c>
c001558d:	fb                   	sti    
c001558e:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c0015594:	83 ec 08             	sub    esp,0x8
c0015597:	6a 01                	push   0x1
c0015599:	68 a4 ae 02 c0       	push   0xc002aea4
c001559e:	e8 46 7a 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	83 ec 08             	sub    esp,0x8
c00155a9:	53                   	push   ebx
c00155aa:	50                   	push   eax
c00155ab:	e8 64 7c 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c00155b0:	83 c4 10             	add    esp,0x10
c00155b3:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c00155b9:	83 ec 08             	sub    esp,0x8
c00155bc:	6a 01                	push   0x1
c00155be:	68 be ae 02 c0       	push   0xc002aebe
c00155c3:	e8 21 7a 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c00155c8:	83 c4 10             	add    esp,0x10
c00155cb:	83 ec 08             	sub    esp,0x8
c00155ce:	53                   	push   ebx
c00155cf:	50                   	push   eax
c00155d0:	e8 3f 7c 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c00155d5:	83 c4 10             	add    esp,0x10
c00155d8:	90                   	nop
c00155d9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00155dc:	c9                   	leave  
c00155dd:	c3                   	ret    

c00155de <startGUIVESA(void*)>:
c00155de:	55                   	push   ebp
c00155df:	89 e5                	mov    ebp,esp
c00155e1:	53                   	push   ebx
c00155e2:	83 ec 04             	sub    esp,0x4
c00155e5:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c00155ea:	48                   	dec    eax
c00155eb:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c00155f0:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c00155f5:	85 c0                	test   eax,eax
c00155f7:	75 01                	jne    c00155fa <startGUIVESA(void*)+0x1c>
c00155f9:	fb                   	sti    
c00155fa:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c0015600:	83 ec 08             	sub    esp,0x8
c0015603:	6a 01                	push   0x1
c0015605:	68 d8 ae 02 c0       	push   0xc002aed8
c001560a:	e8 da 79 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c001560f:	83 c4 10             	add    esp,0x10
c0015612:	83 ec 08             	sub    esp,0x8
c0015615:	53                   	push   ebx
c0015616:	50                   	push   eax
c0015617:	e8 f8 7b 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c001561c:	83 c4 10             	add    esp,0x10
c001561f:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c0015625:	83 ec 08             	sub    esp,0x8
c0015628:	6a 01                	push   0x1
c001562a:	68 be ae 02 c0       	push   0xc002aebe
c001562f:	e8 b5 79 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c0015634:	83 c4 10             	add    esp,0x10
c0015637:	83 ec 08             	sub    esp,0x8
c001563a:	53                   	push   ebx
c001563b:	50                   	push   eax
c001563c:	e8 d3 7b 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c0015641:	83 c4 10             	add    esp,0x10
c0015644:	90                   	nop
c0015645:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015648:	c9                   	leave  
c0015649:	c3                   	ret    

c001564a <sendKeyToTerminal(unsigned char)>:
c001564a:	55                   	push   ebp
c001564b:	89 e5                	mov    ebp,esp
c001564d:	83 ec 28             	sub    esp,0x28
c0015650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015653:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015656:	a1 24 da 02 c0       	mov    eax,ds:0xc002da24
c001565b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001565f:	83 ec 08             	sub    esp,0x8
c0015662:	52                   	push   edx
c0015663:	50                   	push   eax
c0015664:	e8 83 b3 ff ff       	call   c00109ec <VgaText::receiveKey(unsigned char)>
c0015669:	83 c4 10             	add    esp,0x10
c001566c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015670:	0f 85 8f 00 00 00    	jne    c0015705 <sendKeyToTerminal(unsigned char)+0xbb>
c0015676:	fa                   	cli    
c0015677:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001567c:	40                   	inc    eax
c001567d:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0015682:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c0015687:	40                   	inc    eax
c0015688:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c001568d:	a1 00 db 02 c0       	mov    eax,ds:0xc002db00
c0015692:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015695:	c7 05 00 db 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002db00,0x0
c001569f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00156a3:	74 1f                	je     c00156c4 <sendKeyToTerminal(unsigned char)+0x7a>
c00156a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00156ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00156ae:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00156b4:	83 ec 0c             	sub    esp,0xc
c00156b7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00156ba:	e8 6d 87 00 00       	call   c001de2c <unblockTask(ThreadControlBlock*)>
c00156bf:	83 c4 10             	add    esp,0x10
c00156c2:	eb db                	jmp    c001569f <sendKeyToTerminal(unsigned char)+0x55>
c00156c4:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c00156c9:	48                   	dec    eax
c00156ca:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c00156cf:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c00156d4:	85 c0                	test   eax,eax
c00156d6:	75 18                	jne    c00156f0 <sendKeyToTerminal(unsigned char)+0xa6>
c00156d8:	a1 80 0e 03 c0       	mov    eax,ds:0xc0030e80
c00156dd:	85 c0                	test   eax,eax
c00156df:	74 0f                	je     c00156f0 <sendKeyToTerminal(unsigned char)+0xa6>
c00156e1:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c00156eb:	e8 b9 82 00 00       	call   c001d9a9 <schedule()>
c00156f0:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c00156f5:	48                   	dec    eax
c00156f6:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c00156fb:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0015700:	85 c0                	test   eax,eax
c0015702:	75 01                	jne    c0015705 <sendKeyToTerminal(unsigned char)+0xbb>
c0015704:	fb                   	sti    
c0015705:	90                   	nop
c0015706:	c9                   	leave  
c0015707:	c3                   	ret    

c0015708 <sendKeyboardToken(KeyboardToken)>:
c0015708:	55                   	push   ebp
c0015709:	89 e5                	mov    ebp,esp
c001570b:	83 ec 18             	sub    esp,0x18
c001570e:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015714:	0f b7 c0             	movzx  eax,ax
c0015717:	83 f2 01             	xor    edx,0x1
c001571a:	88 90 20 db 02 c0    	mov    BYTE PTR [eax-0x3ffd24e0],dl
c0015720:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0015725:	85 c0                	test   eax,eax
c0015727:	74 24                	je     c001574d <sendKeyboardToken(KeyboardToken)+0x45>
c0015729:	8b 0d 08 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db08
c001572f:	83 ec 04             	sub    esp,0x4
c0015732:	68 20 db 02 c0       	push   0xc002db20
c0015737:	83 ec 08             	sub    esp,0x8
c001573a:	89 e2                	mov    edx,esp
c001573c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573f:	89 02                	mov    DWORD PTR [edx],eax
c0015741:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015744:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015748:	ff d1                	call   ecx
c001574a:	83 c4 10             	add    esp,0x10
c001574d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015750:	66 3d 03 02          	cmp    ax,0x203
c0015754:	75 07                	jne    c001575d <sendKeyboardToken(KeyboardToken)+0x55>
c0015756:	a0 20 dc 02 c0       	mov    al,ds:0xc002dc20
c001575b:	84 c0                	test   al,al
c001575d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015761:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015764:	a0 28 df 02 c0       	mov    al,ds:0xc002df28
c0015769:	38 c2                	cmp    dl,al
c001576b:	74 1c                	je     c0015789 <sendKeyboardToken(KeyboardToken)+0x81>
c001576d:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015770:	a2 28 df 02 c0       	mov    ds:0xc002df28,al
c0015775:	a0 28 df 02 c0       	mov    al,ds:0xc002df28
c001577a:	0f b6 c0             	movzx  eax,al
c001577d:	83 ec 0c             	sub    esp,0xc
c0015780:	50                   	push   eax
c0015781:	e8 a8 a8 ff ff       	call   c001002e <setTerminalScrollLock(bool)>
c0015786:	83 c4 10             	add    esp,0x10
c0015789:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c001578c:	84 c0                	test   al,al
c001578e:	0f 84 ae 00 00 00    	je     c0015842 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015794:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015797:	66 3d 10 03          	cmp    ax,0x310
c001579b:	75 06                	jne    c00157a3 <sendKeyboardToken(KeyboardToken)+0x9b>
c001579d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00157a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157a6:	66 3d 11 03          	cmp    ax,0x311
c00157aa:	75 06                	jne    c00157b2 <sendKeyboardToken(KeyboardToken)+0xaa>
c00157ac:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c00157b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b5:	66 3d 12 03          	cmp    ax,0x312
c00157b9:	75 06                	jne    c00157c1 <sendKeyboardToken(KeyboardToken)+0xb9>
c00157bb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c00157c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c4:	66 3d 13 03          	cmp    ax,0x313
c00157c8:	75 06                	jne    c00157d0 <sendKeyboardToken(KeyboardToken)+0xc8>
c00157ca:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00157d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d3:	66 3d 14 03          	cmp    ax,0x314
c00157d7:	75 06                	jne    c00157df <sendKeyboardToken(KeyboardToken)+0xd7>
c00157d9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00157df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e2:	66 3d 15 03          	cmp    ax,0x315
c00157e6:	75 06                	jne    c00157ee <sendKeyboardToken(KeyboardToken)+0xe6>
c00157e8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00157ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f1:	66 3d 16 03          	cmp    ax,0x316
c00157f5:	75 06                	jne    c00157fd <sendKeyboardToken(KeyboardToken)+0xf5>
c00157f7:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00157fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015800:	66 3d 17 03          	cmp    ax,0x317
c0015804:	75 06                	jne    c001580c <sendKeyboardToken(KeyboardToken)+0x104>
c0015806:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001580c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580f:	66 3d 18 03          	cmp    ax,0x318
c0015813:	75 06                	jne    c001581b <sendKeyboardToken(KeyboardToken)+0x113>
c0015815:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001581b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001581e:	66 3d 19 03          	cmp    ax,0x319
c0015822:	75 06                	jne    c001582a <sendKeyboardToken(KeyboardToken)+0x122>
c0015824:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001582a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001582d:	66 3d 1a 03          	cmp    ax,0x31a
c0015831:	0f 85 c9 00 00 00    	jne    c0015900 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015837:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001583d:	e9 be 00 00 00       	jmp    c0015900 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015845:	66 3d 10 03          	cmp    ax,0x310
c0015849:	75 0a                	jne    c0015855 <sendKeyboardToken(KeyboardToken)+0x14d>
c001584b:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015851:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015858:	66 3d 11 03          	cmp    ax,0x311
c001585c:	75 0a                	jne    c0015868 <sendKeyboardToken(KeyboardToken)+0x160>
c001585e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015864:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001586b:	66 3d 12 03          	cmp    ax,0x312
c001586f:	75 0a                	jne    c001587b <sendKeyboardToken(KeyboardToken)+0x173>
c0015871:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015877:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001587b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587e:	66 3d 13 03          	cmp    ax,0x313
c0015882:	75 0a                	jne    c001588e <sendKeyboardToken(KeyboardToken)+0x186>
c0015884:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001588a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001588e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015891:	66 3d 14 03          	cmp    ax,0x314
c0015895:	75 0a                	jne    c00158a1 <sendKeyboardToken(KeyboardToken)+0x199>
c0015897:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001589d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a4:	66 3d 15 03          	cmp    ax,0x315
c00158a8:	75 0a                	jne    c00158b4 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00158aa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00158b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b7:	66 3d 16 03          	cmp    ax,0x316
c00158bb:	75 0a                	jne    c00158c7 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00158bd:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00158c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ca:	66 3d 17 03          	cmp    ax,0x317
c00158ce:	75 0a                	jne    c00158da <sendKeyboardToken(KeyboardToken)+0x1d2>
c00158d0:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00158d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158dd:	66 3d 18 03          	cmp    ax,0x318
c00158e1:	75 0a                	jne    c00158ed <sendKeyboardToken(KeyboardToken)+0x1e5>
c00158e3:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00158e9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00158ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f0:	66 3d 19 03          	cmp    ax,0x319
c00158f4:	75 0a                	jne    c0015900 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00158f6:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00158fc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015903:	66 3d 00 02          	cmp    ax,0x200
c0015907:	75 2c                	jne    c0015935 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015909:	a0 20 df 02 c0       	mov    al,ds:0xc002df20
c001590e:	83 f0 01             	xor    eax,0x1
c0015911:	84 c0                	test   al,al
c0015913:	74 20                	je     c0015935 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015915:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001591a:	6a 01                	push   0x1
c001591c:	6a 00                	push   0x0
c001591e:	68 72 55 01 c0       	push   0xc0015572
c0015923:	50                   	push   eax
c0015924:	e8 5b 7e 00 00       	call   c001d784 <Process::createThread(void (*)(void*), void*, int)>
c0015929:	83 c4 10             	add    esp,0x10
c001592c:	c6 05 20 df 02 c0 01 	mov    BYTE PTR ds:0xc002df20,0x1
c0015933:	eb 33                	jmp    c0015968 <sendKeyboardToken(KeyboardToken)+0x260>
c0015935:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015938:	66 3d 01 02          	cmp    ax,0x201
c001593c:	75 2a                	jne    c0015968 <sendKeyboardToken(KeyboardToken)+0x260>
c001593e:	a0 20 df 02 c0       	mov    al,ds:0xc002df20
c0015943:	83 f0 01             	xor    eax,0x1
c0015946:	84 c0                	test   al,al
c0015948:	74 1e                	je     c0015968 <sendKeyboardToken(KeyboardToken)+0x260>
c001594a:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001594f:	6a 01                	push   0x1
c0015951:	6a 00                	push   0x0
c0015953:	68 de 55 01 c0       	push   0xc00155de
c0015958:	50                   	push   eax
c0015959:	e8 26 7e 00 00       	call   c001d784 <Process::createThread(void (*)(void*), void*, int)>
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	c6 05 20 df 02 c0 01 	mov    BYTE PTR ds:0xc002df20,0x1
c0015968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596b:	66 3d 1d 03          	cmp    ax,0x31d
c001596f:	75 06                	jne    c0015977 <sendKeyboardToken(KeyboardToken)+0x26f>
c0015971:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597a:	66 3d 1c 03          	cmp    ax,0x31c
c001597e:	75 06                	jne    c0015986 <sendKeyboardToken(KeyboardToken)+0x27e>
c0015980:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015989:	66 3d 1b 03          	cmp    ax,0x31b
c001598d:	75 06                	jne    c0015995 <sendKeyboardToken(KeyboardToken)+0x28d>
c001598f:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015998:	66 3d 1e 03          	cmp    ax,0x31e
c001599c:	75 06                	jne    c00159a4 <sendKeyboardToken(KeyboardToken)+0x29c>
c001599e:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00159a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a7:	66 3d 1f 03          	cmp    ax,0x31f
c00159ab:	75 06                	jne    c00159b3 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00159ad:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00159b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b6:	66 3d 1a 03          	cmp    ax,0x31a
c00159ba:	75 06                	jne    c00159c2 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00159bc:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00159c2:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00159c6:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159c9:	83 f0 01             	xor    eax,0x1
c00159cc:	84 c0                	test   al,al
c00159ce:	74 77                	je     c0015a47 <sendKeyboardToken(KeyboardToken)+0x33f>
c00159d0:	a0 21 dc 02 c0       	mov    al,ds:0xc002dc21
c00159d5:	84 c0                	test   al,al
c00159d7:	74 41                	je     c0015a1a <sendKeyboardToken(KeyboardToken)+0x312>
c00159d9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00159dd:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00159e1:	74 2b                	je     c0015a0e <sendKeyboardToken(KeyboardToken)+0x306>
c00159e3:	8b 15 24 df 02 c0    	mov    edx,DWORD PTR ds:0xc002df24
c00159e9:	89 d0                	mov    eax,edx
c00159eb:	c1 e0 02             	shl    eax,0x2
c00159ee:	01 d0                	add    eax,edx
c00159f0:	01 c0                	add    eax,eax
c00159f2:	a3 24 df 02 c0       	mov    ds:0xc002df24,eax
c00159f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159fa:	0f b7 c0             	movzx  eax,ax
c00159fd:	8d 50 d0             	lea    edx,[eax-0x30]
c0015a00:	a1 24 df 02 c0       	mov    eax,ds:0xc002df24
c0015a05:	01 d0                	add    eax,edx
c0015a07:	a3 24 df 02 c0       	mov    ds:0xc002df24,eax
c0015a0c:	eb 6d                	jmp    c0015a7b <sendKeyboardToken(KeyboardToken)+0x373>
c0015a0e:	c7 05 24 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df24,0x0
c0015a18:	eb 61                	jmp    c0015a7b <sendKeyboardToken(KeyboardToken)+0x373>
c0015a1a:	a1 24 df 02 c0       	mov    eax,ds:0xc002df24
c0015a1f:	85 c0                	test   eax,eax
c0015a21:	74 18                	je     c0015a3b <sendKeyboardToken(KeyboardToken)+0x333>
c0015a23:	a1 24 df 02 c0       	mov    eax,ds:0xc002df24
c0015a28:	0f b6 c0             	movzx  eax,al
c0015a2b:	83 ec 0c             	sub    esp,0xc
c0015a2e:	50                   	push   eax
c0015a2f:	e8 16 fc ff ff       	call   c001564a <sendKeyToTerminal(unsigned char)>
c0015a34:	83 c4 10             	add    esp,0x10
c0015a37:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a3b:	c7 05 24 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df24,0x0
c0015a45:	eb 34                	jmp    c0015a7b <sendKeyboardToken(KeyboardToken)+0x373>
c0015a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a4a:	66 3d 01 01          	cmp    ax,0x101
c0015a4e:	75 2b                	jne    c0015a7b <sendKeyboardToken(KeyboardToken)+0x373>
c0015a50:	a1 24 df 02 c0       	mov    eax,ds:0xc002df24
c0015a55:	85 c0                	test   eax,eax
c0015a57:	74 18                	je     c0015a71 <sendKeyboardToken(KeyboardToken)+0x369>
c0015a59:	a1 24 df 02 c0       	mov    eax,ds:0xc002df24
c0015a5e:	0f b6 c0             	movzx  eax,al
c0015a61:	83 ec 0c             	sub    esp,0xc
c0015a64:	50                   	push   eax
c0015a65:	e8 e0 fb ff ff       	call   c001564a <sendKeyToTerminal(unsigned char)>
c0015a6a:	83 c4 10             	add    esp,0x10
c0015a6d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015a71:	c7 05 24 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df24,0x0
c0015a7b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015a7e:	83 f0 01             	xor    eax,0x1
c0015a81:	84 c0                	test   al,al
c0015a83:	74 4c                	je     c0015ad1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a85:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015a88:	83 f0 01             	xor    eax,0x1
c0015a8b:	84 c0                	test   al,al
c0015a8d:	74 42                	je     c0015ad1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a8f:	a0 20 dc 02 c0       	mov    al,ds:0xc002dc20
c0015a94:	83 f0 01             	xor    eax,0x1
c0015a97:	84 c0                	test   al,al
c0015a99:	74 36                	je     c0015ad1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015a9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a9e:	66 83 f8 1f          	cmp    ax,0x1f
c0015aa2:	76 09                	jbe    c0015aad <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa7:	66 83 f8 7e          	cmp    ax,0x7e
c0015aab:	76 12                	jbe    c0015abf <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab0:	66 83 f8 0a          	cmp    ax,0xa
c0015ab4:	74 09                	je     c0015abf <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab9:	66 83 f8 08          	cmp    ax,0x8
c0015abd:	75 12                	jne    c0015ad1 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac2:	0f b6 c0             	movzx  eax,al
c0015ac5:	83 ec 0c             	sub    esp,0xc
c0015ac8:	50                   	push   eax
c0015ac9:	e8 7c fb ff ff       	call   c001564a <sendKeyToTerminal(unsigned char)>
c0015ace:	83 c4 10             	add    esp,0x10
c0015ad1:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015ad4:	83 f0 01             	xor    eax,0x1
c0015ad7:	84 c0                	test   al,al
c0015ad9:	74 4f                	je     c0015b2a <sendKeyboardToken(KeyboardToken)+0x422>
c0015adb:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015ade:	83 f0 01             	xor    eax,0x1
c0015ae1:	84 c0                	test   al,al
c0015ae3:	74 45                	je     c0015b2a <sendKeyboardToken(KeyboardToken)+0x422>
c0015ae5:	a0 20 dc 02 c0       	mov    al,ds:0xc002dc20
c0015aea:	84 c0                	test   al,al
c0015aec:	74 3c                	je     c0015b2a <sendKeyboardToken(KeyboardToken)+0x422>
c0015aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015af1:	66 83 f8 3f          	cmp    ax,0x3f
c0015af5:	76 33                	jbe    c0015b2a <sendKeyboardToken(KeyboardToken)+0x422>
c0015af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015afa:	66 83 f8 7f          	cmp    ax,0x7f
c0015afe:	77 2a                	ja     c0015b2a <sendKeyboardToken(KeyboardToken)+0x422>
c0015b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b03:	88 c2                	mov    dl,al
c0015b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b08:	66 83 f8 5f          	cmp    ax,0x5f
c0015b0c:	76 04                	jbe    c0015b12 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015b0e:	b0 20                	mov    al,0x20
c0015b10:	eb 02                	jmp    c0015b14 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015b12:	b0 00                	mov    al,0x0
c0015b14:	29 c2                	sub    edx,eax
c0015b16:	88 d0                	mov    al,dl
c0015b18:	83 e8 40             	sub    eax,0x40
c0015b1b:	0f b6 c0             	movzx  eax,al
c0015b1e:	83 ec 0c             	sub    esp,0xc
c0015b21:	50                   	push   eax
c0015b22:	e8 23 fb ff ff       	call   c001564a <sendKeyToTerminal(unsigned char)>
c0015b27:	83 c4 10             	add    esp,0x10
c0015b2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b2d:	66 3d 00 03          	cmp    ax,0x300
c0015b31:	75 0f                	jne    c0015b42 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b33:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b36:	83 f0 01             	xor    eax,0x1
c0015b39:	84 c0                	test   al,al
c0015b3b:	74 05                	je     c0015b42 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015b3d:	e8 5d a8 ff ff       	call   c001039f <doTerminalCycle()>
c0015b42:	90                   	nop
c0015b43:	c9                   	leave  
c0015b44:	c3                   	ret    

c0015b45 <clearInternalKeybuffer(VgaText*)>:
c0015b45:	55                   	push   ebp
c0015b46:	89 e5                	mov    ebp,esp
c0015b48:	83 ec 08             	sub    esp,0x8
c0015b4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4e:	05 98 01 00 00       	add    eax,0x198
c0015b53:	83 ec 0c             	sub    esp,0xc
c0015b56:	50                   	push   eax
c0015b57:	e8 10 ac fe ff       	call   c000076c <strlen>
c0015b5c:	83 c4 10             	add    esp,0x10
c0015b5f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015b62:	81 c2 98 01 00 00    	add    edx,0x198
c0015b68:	83 ec 04             	sub    esp,0x4
c0015b6b:	50                   	push   eax
c0015b6c:	6a 00                	push   0x0
c0015b6e:	52                   	push   edx
c0015b6f:	e8 dc ab fe ff       	call   c0000750 <memset>
c0015b74:	83 c4 10             	add    esp,0x10
c0015b77:	90                   	nop
c0015b78:	c9                   	leave  
c0015b79:	c3                   	ret    

c0015b7a <readKeyboard(VgaText*, char*, unsigned long)>:
c0015b7a:	55                   	push   ebp
c0015b7b:	89 e5                	mov    ebp,esp
c0015b7d:	83 ec 18             	sub    esp,0x18
c0015b80:	a1 08 db 02 c0       	mov    eax,ds:0xc002db08
c0015b85:	85 c0                	test   eax,eax
c0015b87:	74 2a                	je     c0015bb3 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015b89:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015b8f:	8b 0d 08 db 02 c0    	mov    ecx,DWORD PTR ds:0xc002db08
c0015b95:	83 ec 04             	sub    esp,0x4
c0015b98:	68 20 db 02 c0       	push   0xc002db20
c0015b9d:	83 ec 08             	sub    esp,0x8
c0015ba0:	89 e2                	mov    edx,esp
c0015ba2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015ba5:	89 02                	mov    DWORD PTR [edx],eax
c0015ba7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015baa:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015bae:	ff d1                	call   ecx
c0015bb0:	83 c4 10             	add    esp,0x10
c0015bb3:	fb                   	sti    
c0015bb4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015bbb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015bbf:	0f 84 a1 00 00 00    	je     c0015c66 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c0015bc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bc8:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015bce:	84 c0                	test   al,al
c0015bd0:	75 28                	jne    c0015bfa <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c0015bd2:	fa                   	cli    
c0015bd3:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0015bd8:	40                   	inc    eax
c0015bd9:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0015bde:	e8 c6 7d 00 00       	call   c001d9a9 <schedule()>
c0015be3:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0015be8:	48                   	dec    eax
c0015be9:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0015bee:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0015bf3:	85 c0                	test   eax,eax
c0015bf5:	75 ce                	jne    c0015bc5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015bf7:	fb                   	sti    
c0015bf8:	eb cb                	jmp    c0015bc5 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0015bfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015bfd:	8d 50 01             	lea    edx,[eax+0x1]
c0015c00:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015c03:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c06:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015c0c:	88 10                	mov    BYTE PTR [eax],dl
c0015c0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c11:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015c17:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015c1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c1d:	05 98 01 00 00       	add    eax,0x198
c0015c22:	83 ec 0c             	sub    esp,0xc
c0015c25:	50                   	push   eax
c0015c26:	e8 41 ab fe ff       	call   c000076c <strlen>
c0015c2b:	83 c4 10             	add    esp,0x10
c0015c2e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c31:	81 c2 98 01 00 00    	add    edx,0x198
c0015c37:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015c3a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015c3d:	81 c2 98 01 00 00    	add    edx,0x198
c0015c43:	83 ec 04             	sub    esp,0x4
c0015c46:	50                   	push   eax
c0015c47:	51                   	push   ecx
c0015c48:	52                   	push   edx
c0015c49:	e8 3a aa fe ff       	call   c0000688 <memmove>
c0015c4e:	83 c4 10             	add    esp,0x10
c0015c51:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015c54:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015c57:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015c5b:	0f 85 5a ff ff ff    	jne    c0015bbb <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0015c61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c64:	eb 03                	jmp    c0015c69 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0015c66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c69:	c9                   	leave  
c0015c6a:	c3                   	ret    
c0015c6b:	90                   	nop

c0015c6c <Keyboard::Keyboard(char const*)>:
c0015c6c:	83 ec 0c             	sub    esp,0xc
c0015c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c73:	83 ec 08             	sub    esp,0x8
c0015c76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c7a:	50                   	push   eax
c0015c7b:	e8 70 e0 ff ff       	call   c0013cf0 <Device::Device(char const*)>
c0015c80:	83 c4 10             	add    esp,0x10
c0015c83:	ba fc ae 02 c0       	mov    edx,0xc002aefc
c0015c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c8c:	89 10                	mov    DWORD PTR [eax],edx
c0015c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015c92:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015c9c:	c6 05 04 db 02 c0 01 	mov    BYTE PTR ds:0xc002db04,0x1
c0015ca3:	90                   	nop
c0015ca4:	83 c4 0c             	add    esp,0xc
c0015ca7:	c3                   	ret    

c0015ca8 <Keyboard::~Keyboard()>:
c0015ca8:	83 ec 0c             	sub    esp,0xc
c0015cab:	ba fc ae 02 c0       	mov    edx,0xc002aefc
c0015cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cb4:	89 10                	mov    DWORD PTR [eax],edx
c0015cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cba:	83 ec 0c             	sub    esp,0xc
c0015cbd:	50                   	push   eax
c0015cbe:	e8 f7 dc ff ff       	call   c00139ba <Device::~Device()>
c0015cc3:	83 c4 10             	add    esp,0x10
c0015cc6:	90                   	nop
c0015cc7:	83 c4 0c             	add    esp,0xc
c0015cca:	c3                   	ret    
c0015ccb:	90                   	nop

c0015ccc <Keyboard::~Keyboard()>:
c0015ccc:	83 ec 0c             	sub    esp,0xc
c0015ccf:	83 ec 0c             	sub    esp,0xc
c0015cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cd6:	e8 cd ff ff ff       	call   c0015ca8 <Keyboard::~Keyboard()>
c0015cdb:	83 c4 10             	add    esp,0x10
c0015cde:	83 ec 08             	sub    esp,0x8
c0015ce1:	68 5c 01 00 00       	push   0x15c
c0015ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015cea:	e8 ec c8 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0015cef:	83 c4 10             	add    esp,0x10
c0015cf2:	83 c4 0c             	add    esp,0xc
c0015cf5:	c3                   	ret    

c0015cf6 <LogicalDisk::close(int, int, void*)>:
c0015cf6:	83 c8 ff             	or     eax,0xffffffff
c0015cf9:	c3                   	ret    

c0015cfa <LogicalDisk::~LogicalDisk()>:
c0015cfa:	83 ec 0c             	sub    esp,0xc
c0015cfd:	ba 74 af 02 c0       	mov    edx,0xc002af74
c0015d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d06:	89 10                	mov    DWORD PTR [eax],edx
c0015d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d0c:	83 ec 0c             	sub    esp,0xc
c0015d0f:	50                   	push   eax
c0015d10:	e8 a5 dc ff ff       	call   c00139ba <Device::~Device()>
c0015d15:	83 c4 10             	add    esp,0x10
c0015d18:	90                   	nop
c0015d19:	83 c4 0c             	add    esp,0xc
c0015d1c:	c3                   	ret    
c0015d1d:	90                   	nop

c0015d1e <LogicalDisk::~LogicalDisk()>:
c0015d1e:	83 ec 0c             	sub    esp,0xc
c0015d21:	83 ec 0c             	sub    esp,0xc
c0015d24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d28:	e8 cd ff ff ff       	call   c0015cfa <LogicalDisk::~LogicalDisk()>
c0015d2d:	83 c4 10             	add    esp,0x10
c0015d30:	83 ec 08             	sub    esp,0x8
c0015d33:	68 74 01 00 00       	push   0x174
c0015d38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d3c:	e8 9a c8 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0015d41:	83 c4 10             	add    esp,0x10
c0015d44:	83 c4 0c             	add    esp,0xc
c0015d47:	c3                   	ret    

c0015d48 <LogicalDisk::open(int, int, void*)>:
c0015d48:	83 ec 18             	sub    esp,0x18
c0015d4b:	68 28 af 02 c0       	push   0xc002af28
c0015d50:	e8 ca 40 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0015d55:	83 c8 ff             	or     eax,0xffffffff
c0015d58:	83 c4 1c             	add    esp,0x1c
c0015d5b:	c3                   	ret    

c0015d5c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015d5c:	53                   	push   ebx
c0015d5d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015d61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d65:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d69:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015d6f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015d75:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015d7b:	77 10                	ja     c0015d8d <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015d7d:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015d83:	89 d3                	mov    ebx,edx
c0015d85:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015d8b:	72 05                	jb     c0015d92 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015d8d:	83 c8 ff             	or     eax,0xffffffff
c0015d90:	89 c2                	mov    edx,eax
c0015d92:	5b                   	pop    ebx
c0015d93:	c3                   	ret    

c0015d94 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015d94:	56                   	push   esi
c0015d95:	83 c8 ff             	or     eax,0xffffffff
c0015d98:	53                   	push   ebx
c0015d99:	89 c2                	mov    edx,eax
c0015d9b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015d9f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015da3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015da7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015dad:	77 27                	ja     c0015dd6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015daf:	89 d8                	mov    eax,ebx
c0015db1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015db7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015dbd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015dc2:	89 c2                	mov    edx,eax
c0015dc4:	73 10                	jae    c0015dd6 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015dc6:	89 c8                	mov    eax,ecx
c0015dc8:	89 da                	mov    edx,ebx
c0015dca:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015dd0:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015dd6:	5b                   	pop    ebx
c0015dd7:	5e                   	pop    esi
c0015dd8:	c3                   	ret    
c0015dd9:	90                   	nop

c0015dda <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015dda:	83 ec 1c             	sub    esp,0x1c
c0015ddd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015de1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015de5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015de9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ded:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015df1:	89 04 24             	mov    DWORD PTR [esp],eax
c0015df4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015df8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015dfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e00:	83 ec 08             	sub    esp,0x8
c0015e03:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e07:	50                   	push   eax
c0015e08:	e8 e3 de ff ff       	call   c0013cf0 <Device::Device(char const*)>
c0015e0d:	83 c4 10             	add    esp,0x10
c0015e10:	ba 74 af 02 c0       	mov    edx,0xc002af74
c0015e15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e19:	89 10                	mov    DWORD PTR [eax],edx
c0015e1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e1f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e2a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015e31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e35:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015e3f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e47:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e4b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015e51:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015e57:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e5b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015e5e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e62:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015e68:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015e6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e72:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015e76:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015e7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e80:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015e8a:	90                   	nop
c0015e8b:	83 c4 1c             	add    esp,0x1c
c0015e8e:	c3                   	ret    
c0015e8f:	90                   	nop

c0015e90 <LogicalDisk::assignDriveLetter()>:
c0015e90:	55                   	push   ebp
c0015e91:	57                   	push   edi
c0015e92:	56                   	push   esi
c0015e93:	53                   	push   ebx
c0015e94:	83 ec 14             	sub    esp,0x14
c0015e97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015e9b:	8b 3d 40 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df40
c0015ea1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015ea7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015eab:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015eb1:	8b 3d 44 df 02 c0    	mov    edi,DWORD PTR ds:0xc002df44
c0015eb7:	3c 01                	cmp    al,0x1
c0015eb9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ebd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015ec1:	19 c0                	sbb    eax,eax
c0015ec3:	83 e0 02             	and    eax,0x2
c0015ec6:	83 c0 41             	add    eax,0x41
c0015ec9:	0f be e8             	movsx  ebp,al
c0015ecc:	3c 43                	cmp    al,0x43
c0015ece:	75 10                	jne    c0015ee0 <LogicalDisk::assignDriveLetter()+0x50>
c0015ed0:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015ed7:	75 5d                	jne    c0015f36 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ed9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015ede:	75 56                	jne    c0015f36 <LogicalDisk::assignDriveLetter()+0xa6>
c0015ee0:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015ee3:	ba 01 00 00 00       	mov    edx,0x1
c0015ee8:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015eec:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015ef0:	d3 e2                	shl    edx,cl
c0015ef2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015ef6:	89 d7                	mov    edi,edx
c0015ef8:	89 d6                	mov    esi,edx
c0015efa:	c1 ff 1f             	sar    edi,0x1f
c0015efd:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015f01:	21 f9                	and    ecx,edi
c0015f03:	09 d1                	or     ecx,edx
c0015f05:	75 2f                	jne    c0015f36 <LogicalDisk::assignDriveLetter()+0xa6>
c0015f07:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015f0b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015f0f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015f15:	09 f2                	or     edx,esi
c0015f17:	89 15 40 df 02 c0    	mov    DWORD PTR ds:0xc002df40,edx
c0015f1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f21:	09 fa                	or     edx,edi
c0015f23:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015f27:	89 15 44 df 02 c0    	mov    DWORD PTR ds:0xc002df44,edx
c0015f2d:	89 1c bd 60 df 02 c0 	mov    DWORD PTR [edi*4-0x3ffd20a0],ebx
c0015f34:	eb 08                	jmp    c0015f3e <LogicalDisk::assignDriveLetter()+0xae>
c0015f36:	45                   	inc    ebp
c0015f37:	40                   	inc    eax
c0015f38:	3c 5b                	cmp    al,0x5b
c0015f3a:	75 90                	jne    c0015ecc <LogicalDisk::assignDriveLetter()+0x3c>
c0015f3c:	31 c0                	xor    eax,eax
c0015f3e:	83 c4 14             	add    esp,0x14
c0015f41:	5b                   	pop    ebx
c0015f42:	5e                   	pop    esi
c0015f43:	5f                   	pop    edi
c0015f44:	5d                   	pop    ebp
c0015f45:	c3                   	ret    

c0015f46 <LogicalDisk::mount()>:
c0015f46:	56                   	push   esi
c0015f47:	53                   	push   ebx
c0015f48:	53                   	push   ebx
c0015f49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f4d:	8b 1d d4 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dad4
c0015f53:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015f5d:	85 db                	test   ebx,ebx
c0015f5f:	74 27                	je     c0015f88 <LogicalDisk::mount()+0x42>
c0015f61:	51                   	push   ecx
c0015f62:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015f69:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015f6b:	83 e8 41             	sub    eax,0x41
c0015f6e:	50                   	push   eax
c0015f6f:	56                   	push   esi
c0015f70:	53                   	push   ebx
c0015f71:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015f74:	83 c4 10             	add    esp,0x10
c0015f77:	84 c0                	test   al,al
c0015f79:	74 08                	je     c0015f83 <LogicalDisk::mount()+0x3d>
c0015f7b:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015f81:	eb 07                	jmp    c0015f8a <LogicalDisk::mount()+0x44>
c0015f83:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015f86:	eb d5                	jmp    c0015f5d <LogicalDisk::mount()+0x17>
c0015f88:	31 c0                	xor    eax,eax
c0015f8a:	5a                   	pop    edx
c0015f8b:	5b                   	pop    ebx
c0015f8c:	5e                   	pop    esi
c0015f8d:	c3                   	ret    

c0015f8e <LogicalDisk::unmount()>:
c0015f8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f92:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015f9c:	c3                   	ret    
c0015f9d:	90                   	nop

c0015f9e <LogicalDisk::eject()>:
c0015f9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fa2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0015fa8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015faa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fae:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0015fb1:	90                   	nop

c0015fb2 <LogicalDisk::unassignDriveLetter()>:
c0015fb2:	57                   	push   edi
c0015fb3:	56                   	push   esi
c0015fb4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015fb8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015fbf:	84 c9                	test   cl,cl
c0015fc1:	75 0f                	jne    c0015fd2 <LogicalDisk::unassignDriveLetter()+0x20>
c0015fc3:	c7 44 24 0c 4c af 02 c0 	mov    DWORD PTR [esp+0xc],0xc002af4c
c0015fcb:	5e                   	pop    esi
c0015fcc:	5f                   	pop    edi
c0015fcd:	e9 4d 3e 00 00       	jmp    c0019e1f <Krnl::panic(char const*)>
c0015fd2:	83 e9 41             	sub    ecx,0x41
c0015fd5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015fdc:	b8 01 00 00 00       	mov    eax,0x1
c0015fe1:	c7 04 8d 60 df 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd20a0],0x0
c0015fec:	d3 e0                	shl    eax,cl
c0015fee:	89 c7                	mov    edi,eax
c0015ff0:	f7 d0                	not    eax
c0015ff2:	c1 ff 1f             	sar    edi,0x1f
c0015ff5:	21 05 40 df 02 c0    	and    DWORD PTR ds:0xc002df40,eax
c0015ffb:	89 fe                	mov    esi,edi
c0015ffd:	f7 d6                	not    esi
c0015fff:	21 35 44 df 02 c0    	and    DWORD PTR ds:0xc002df44,esi
c0016005:	5e                   	pop    esi
c0016006:	5f                   	pop    edi
c0016007:	c3                   	ret    

c0016008 <LogicalDisk::read(unsigned long long, int, void*)>:
c0016008:	57                   	push   edi
c0016009:	56                   	push   esi
c001600a:	53                   	push   ebx
c001600b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001600f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016013:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016017:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001601b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016021:	77 41                	ja     c0016064 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016023:	99                   	cdq    
c0016024:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001602a:	01 c8                	add    eax,ecx
c001602c:	11 da                	adc    edx,ebx
c001602e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016034:	19 d7                	sbb    edi,edx
c0016036:	72 33                	jb     c001606b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016038:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001603e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016044:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016048:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001604c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016052:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001605c:	5b                   	pop    ebx
c001605d:	5e                   	pop    esi
c001605e:	5f                   	pop    edi
c001605f:	e9 cc 0a 00 00       	jmp    c0016b30 <VCache::read(unsigned long long, int, void*)>
c0016064:	b8 05 00 00 00       	mov    eax,0x5
c0016069:	eb 05                	jmp    c0016070 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001606b:	b8 07 00 00 00       	mov    eax,0x7
c0016070:	5b                   	pop    ebx
c0016071:	5e                   	pop    esi
c0016072:	5f                   	pop    edi
c0016073:	c3                   	ret    

c0016074 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016074:	57                   	push   edi
c0016075:	56                   	push   esi
c0016076:	53                   	push   ebx
c0016077:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001607b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001607f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016083:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016087:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001608d:	77 41                	ja     c00160d0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001608f:	99                   	cdq    
c0016090:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016096:	01 c8                	add    eax,ecx
c0016098:	11 da                	adc    edx,ebx
c001609a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00160a0:	19 d7                	sbb    edi,edx
c00160a2:	72 33                	jb     c00160d7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00160a4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00160aa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00160b0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00160b4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00160b8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00160be:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00160c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00160c8:	5b                   	pop    ebx
c00160c9:	5e                   	pop    esi
c00160ca:	5f                   	pop    edi
c00160cb:	e9 76 09 00 00       	jmp    c0016a46 <VCache::write(unsigned long long, int, void*)>
c00160d0:	b8 05 00 00 00       	mov    eax,0x5
c00160d5:	eb 05                	jmp    c00160dc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00160d7:	b8 07 00 00 00       	mov    eax,0x7
c00160dc:	5b                   	pop    ebx
c00160dd:	5e                   	pop    esi
c00160de:	5f                   	pop    edi
c00160df:	c3                   	ret    

c00160e0 <Mouse::Mouse(char const*)>:
c00160e0:	83 ec 0c             	sub    esp,0xc
c00160e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00160e7:	83 ec 08             	sub    esp,0x8
c00160ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160ee:	50                   	push   eax
c00160ef:	e8 fc db ff ff       	call   c0013cf0 <Device::Device(char const*)>
c00160f4:	83 c4 10             	add    esp,0x10
c00160f7:	ba a0 af 02 c0       	mov    edx,0xc002afa0
c00160fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016100:	89 10                	mov    DWORD PTR [eax],edx
c0016102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016106:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016110:	90                   	nop
c0016111:	83 c4 0c             	add    esp,0xc
c0016114:	c3                   	ret    
c0016115:	90                   	nop

c0016116 <Mouse::~Mouse()>:
c0016116:	83 ec 0c             	sub    esp,0xc
c0016119:	ba a0 af 02 c0       	mov    edx,0xc002afa0
c001611e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016122:	89 10                	mov    DWORD PTR [eax],edx
c0016124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016128:	83 ec 0c             	sub    esp,0xc
c001612b:	50                   	push   eax
c001612c:	e8 89 d8 ff ff       	call   c00139ba <Device::~Device()>
c0016131:	83 c4 10             	add    esp,0x10
c0016134:	90                   	nop
c0016135:	83 c4 0c             	add    esp,0xc
c0016138:	c3                   	ret    
c0016139:	90                   	nop

c001613a <Mouse::~Mouse()>:
c001613a:	83 ec 0c             	sub    esp,0xc
c001613d:	83 ec 0c             	sub    esp,0xc
c0016140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016144:	e8 cd ff ff ff       	call   c0016116 <Mouse::~Mouse()>
c0016149:	83 c4 10             	add    esp,0x10
c001614c:	83 ec 08             	sub    esp,0x8
c001614f:	68 58 01 00 00       	push   0x158
c0016154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016158:	e8 7e c4 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c001615d:	83 c4 10             	add    esp,0x10
c0016160:	83 c4 0c             	add    esp,0xc
c0016163:	c3                   	ret    

c0016164 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016164:	55                   	push   ebp
c0016165:	57                   	push   edi
c0016166:	56                   	push   esi
c0016167:	53                   	push   ebx
c0016168:	81 ec 28 01 00 00    	sub    esp,0x128
c001616e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016175:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001617c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016183:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001618a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001618e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016192:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016199:	e8 4e dc ff ff       	call   c0013dec <Device::getName()>
c001619e:	5a                   	pop    edx
c001619f:	59                   	pop    ecx
c00161a0:	50                   	push   eax
c00161a1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00161a5:	55                   	push   ebp
c00161a6:	e8 61 a6 fe ff       	call   c000080c <strcpy>
c00161ab:	5b                   	pop    ebx
c00161ac:	58                   	pop    eax
c00161ad:	68 c4 af 02 c0       	push   0xc002afc4
c00161b2:	55                   	push   ebp
c00161b3:	e8 94 a7 fe ff       	call   c000094c <strcat>
c00161b8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00161bf:	e8 d5 93 ff ff       	call   c000f599 <malloc>
c00161c4:	83 c4 0c             	add    esp,0xc
c00161c7:	89 c3                	mov    ebx,eax
c00161c9:	57                   	push   edi
c00161ca:	56                   	push   esi
c00161cb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00161d3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00161da:	55                   	push   ebp
c00161db:	50                   	push   eax
c00161dc:	e8 f9 fb ff ff       	call   c0015dda <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00161e1:	83 c4 14             	add    esp,0x14
c00161e4:	53                   	push   ebx
c00161e5:	e8 a6 fc ff ff       	call   c0015e90 <LogicalDisk::assignDriveLetter()>
c00161ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161ed:	e8 54 fd ff ff       	call   c0015f46 <LogicalDisk::mount()>
c00161f2:	58                   	pop    eax
c00161f3:	5a                   	pop    edx
c00161f4:	53                   	push   ebx
c00161f5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00161fc:	e8 eb d8 ff ff       	call   c0013aec <Device::addChild(Device*)>
c0016201:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016207:	5b                   	pop    ebx
c0016208:	5e                   	pop    esi
c0016209:	5f                   	pop    edi
c001620a:	5d                   	pop    ebp
c001620b:	c3                   	ret    

c001620c <createPartitionsForDisk(PhysicalDisk*)>:
c001620c:	55                   	push   ebp
c001620d:	57                   	push   edi
c001620e:	56                   	push   esi
c001620f:	53                   	push   ebx
c0016210:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016216:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001621d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016223:	3d 00 02 00 00       	cmp    eax,0x200
c0016228:	74 27                	je     c0016251 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001622a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016230:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016236:	83 ec 10             	sub    esp,0x10
c0016239:	0f a4 f7 0a          	shld   edi,esi,0xa
c001623d:	99                   	cdq    
c001623e:	c1 e6 0a             	shl    esi,0xa
c0016241:	52                   	push   edx
c0016242:	89 fd                	mov    ebp,edi
c0016244:	50                   	push   eax
c0016245:	55                   	push   ebp
c0016246:	56                   	push   esi
c0016247:	e8 a8 04 01 00       	call   c00266f4 <__udivdi3>
c001624c:	e9 b1 00 00 00       	jmp    c0016302 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016251:	83 ec 0c             	sub    esp,0xc
c0016254:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016256:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001625a:	56                   	push   esi
c001625b:	6a 01                	push   0x1
c001625d:	6a 00                	push   0x0
c001625f:	6a 00                	push   0x0
c0016261:	53                   	push   ebx
c0016262:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016265:	83 c4 20             	add    esp,0x20
c0016268:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016270:	75 0a                	jne    c001627c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016272:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001627a:	74 2c                	je     c00162a8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001627c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016282:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016288:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001628e:	83 ec 10             	sub    esp,0x10
c0016291:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016295:	89 f7                	mov    edi,esi
c0016297:	c1 e0 0a             	shl    eax,0xa
c001629a:	c1 ff 1f             	sar    edi,0x1f
c001629d:	57                   	push   edi
c001629e:	56                   	push   esi
c001629f:	52                   	push   edx
c00162a0:	50                   	push   eax
c00162a1:	e8 4e 04 01 00       	call   c00266f4 <__udivdi3>
c00162a6:	eb 5a                	jmp    c0016302 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00162a8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00162af:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00162b6:	83 e1 7f             	and    ecx,0x7f
c00162b9:	83 e0 7f             	and    eax,0x7f
c00162bc:	01 c1                	add    ecx,eax
c00162be:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00162c5:	83 e0 7f             	and    eax,0x7f
c00162c8:	01 c1                	add    ecx,eax
c00162ca:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00162d1:	83 e0 7f             	and    eax,0x7f
c00162d4:	00 c1                	add    cl,al
c00162d6:	74 41                	je     c0016319 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00162d8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00162de:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00162e4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00162ea:	83 ec 10             	sub    esp,0x10
c00162ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c00162f1:	89 f7                	mov    edi,esi
c00162f3:	c1 e0 0a             	shl    eax,0xa
c00162f6:	c1 ff 1f             	sar    edi,0x1f
c00162f9:	57                   	push   edi
c00162fa:	56                   	push   esi
c00162fb:	52                   	push   edx
c00162fc:	50                   	push   eax
c00162fd:	e8 f2 03 01 00       	call   c00266f4 <__udivdi3>
c0016302:	83 c4 14             	add    esp,0x14
c0016305:	52                   	push   edx
c0016306:	50                   	push   eax
c0016307:	6a 00                	push   0x0
c0016309:	6a 00                	push   0x0
c001630b:	53                   	push   ebx
c001630c:	e8 53 fe ff ff       	call   c0016164 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016311:	83 c4 20             	add    esp,0x20
c0016314:	e9 79 01 00 00       	jmp    c0016492 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016319:	89 f0                	mov    eax,esi
c001631b:	31 f6                	xor    esi,esi
c001631d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016324:	75 02                	jne    c0016328 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016326:	89 f1                	mov    ecx,esi
c0016328:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001632f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016336:	c1 e2 08             	shl    edx,0x8
c0016339:	c1 e7 10             	shl    edi,0x10
c001633c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016344:	09 fa                	or     edx,edi
c0016346:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001634e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016355:	83 c0 10             	add    eax,0x10
c0016358:	09 fa                	or     edx,edi
c001635a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016361:	c1 e7 18             	shl    edi,0x18
c0016364:	09 fa                	or     edx,edi
c0016366:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001636d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016371:	c1 e7 10             	shl    edi,0x10
c0016374:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001637b:	c1 e2 08             	shl    edx,0x8
c001637e:	09 fa                	or     edx,edi
c0016380:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016387:	09 fa                	or     edx,edi
c0016389:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016390:	c1 e7 18             	shl    edi,0x18
c0016393:	09 fa                	or     edx,edi
c0016395:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016399:	46                   	inc    esi
c001639a:	83 fe 04             	cmp    esi,0x4
c001639d:	0f 85 7a ff ff ff    	jne    c001631d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00163a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163a7:	83 f0 01             	xor    eax,0x1
c00163aa:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00163ae:	75 57                	jne    c0016407 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00163b4:	83 f0 01             	xor    eax,0x1
c00163b7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00163bb:	75 4a                	jne    c0016407 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00163bd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00163c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00163c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00163d1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00163d7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00163dd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00163e3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00163e7:	89 f7                	mov    edi,esi
c00163e9:	c1 e0 0a             	shl    eax,0xa
c00163ec:	c1 ff 1f             	sar    edi,0x1f
c00163ef:	57                   	push   edi
c00163f0:	56                   	push   esi
c00163f1:	52                   	push   edx
c00163f2:	50                   	push   eax
c00163f3:	e8 fc 02 01 00       	call   c00266f4 <__udivdi3>
c00163f8:	83 c4 10             	add    esp,0x10
c00163fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00163ff:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016403:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016407:	84 c9                	test   cl,cl
c0016409:	74 53                	je     c001645e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001640b:	0f b6 c9             	movzx  ecx,cl
c001640e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016412:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016416:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001641a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001641e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016422:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016426:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001642a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001642e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016432:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016436:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001643a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001643e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016442:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016446:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001644a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001644e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016452:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016456:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001645a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001645e:	31 ed                	xor    ebp,ebp
c0016460:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016464:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016468:	89 f8                	mov    eax,edi
c001646a:	09 f0                	or     eax,esi
c001646c:	74 1e                	je     c001648c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001646e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016472:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016476:	89 d1                	mov    ecx,edx
c0016478:	09 c1                	or     ecx,eax
c001647a:	74 10                	je     c001648c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001647c:	83 ec 0c             	sub    esp,0xc
c001647f:	57                   	push   edi
c0016480:	56                   	push   esi
c0016481:	52                   	push   edx
c0016482:	50                   	push   eax
c0016483:	53                   	push   ebx
c0016484:	e8 db fc ff ff       	call   c0016164 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016489:	83 c4 20             	add    esp,0x20
c001648c:	45                   	inc    ebp
c001648d:	83 fd 04             	cmp    ebp,0x4
c0016490:	75 ce                	jne    c0016460 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016492:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016498:	5b                   	pop    ebx
c0016499:	5e                   	pop    esi
c001649a:	5f                   	pop    edi
c001649b:	5d                   	pop    ebp
c001649c:	c3                   	ret    
c001649d:	90                   	nop

c001649e <Serial::Serial(char const*)>:
c001649e:	83 ec 0c             	sub    esp,0xc
c00164a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164a5:	83 ec 08             	sub    esp,0x8
c00164a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ac:	50                   	push   eax
c00164ad:	e8 3e d8 ff ff       	call   c0013cf0 <Device::Device(char const*)>
c00164b2:	83 c4 10             	add    esp,0x10
c00164b5:	ba d8 af 02 c0       	mov    edx,0xc002afd8
c00164ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164be:	89 10                	mov    DWORD PTR [eax],edx
c00164c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00164ce:	90                   	nop
c00164cf:	83 c4 0c             	add    esp,0xc
c00164d2:	c3                   	ret    
c00164d3:	90                   	nop

c00164d4 <Serial::~Serial()>:
c00164d4:	83 ec 0c             	sub    esp,0xc
c00164d7:	ba d8 af 02 c0       	mov    edx,0xc002afd8
c00164dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e0:	89 10                	mov    DWORD PTR [eax],edx
c00164e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e6:	83 ec 0c             	sub    esp,0xc
c00164e9:	50                   	push   eax
c00164ea:	e8 cb d4 ff ff       	call   c00139ba <Device::~Device()>
c00164ef:	83 c4 10             	add    esp,0x10
c00164f2:	90                   	nop
c00164f3:	83 c4 0c             	add    esp,0xc
c00164f6:	c3                   	ret    
c00164f7:	90                   	nop

c00164f8 <Serial::~Serial()>:
c00164f8:	83 ec 0c             	sub    esp,0xc
c00164fb:	83 ec 0c             	sub    esp,0xc
c00164fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016502:	e8 cd ff ff ff       	call   c00164d4 <Serial::~Serial()>
c0016507:	83 c4 10             	add    esp,0x10
c001650a:	83 ec 08             	sub    esp,0x8
c001650d:	68 58 01 00 00       	push   0x158
c0016512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016516:	e8 c0 c0 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	83 c4 0c             	add    esp,0xc
c0016521:	c3                   	ret    

c0016522 <Timer::Timer(char const*)>:
c0016522:	83 ec 0c             	sub    esp,0xc
c0016525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016529:	83 ec 08             	sub    esp,0x8
c001652c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016530:	50                   	push   eax
c0016531:	e8 ba d7 ff ff       	call   c0013cf0 <Device::Device(char const*)>
c0016536:	83 c4 10             	add    esp,0x10
c0016539:	ba 1c b0 02 c0       	mov    edx,0xc002b01c
c001653e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016542:	89 10                	mov    DWORD PTR [eax],edx
c0016544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016548:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016552:	90                   	nop
c0016553:	83 c4 0c             	add    esp,0xc
c0016556:	c3                   	ret    
c0016557:	90                   	nop

c0016558 <Timer::~Timer()>:
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	ba 1c b0 02 c0       	mov    edx,0xc002b01c
c0016560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016564:	89 10                	mov    DWORD PTR [eax],edx
c0016566:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001656a:	83 ec 0c             	sub    esp,0xc
c001656d:	50                   	push   eax
c001656e:	e8 47 d4 ff ff       	call   c00139ba <Device::~Device()>
c0016573:	83 c4 10             	add    esp,0x10
c0016576:	90                   	nop
c0016577:	83 c4 0c             	add    esp,0xc
c001657a:	c3                   	ret    
c001657b:	90                   	nop

c001657c <Timer::~Timer()>:
c001657c:	83 ec 0c             	sub    esp,0xc
c001657f:	83 ec 0c             	sub    esp,0xc
c0016582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016586:	e8 cd ff ff ff       	call   c0016558 <Timer::~Timer()>
c001658b:	83 c4 10             	add    esp,0x10
c001658e:	83 ec 08             	sub    esp,0x8
c0016591:	68 5c 01 00 00       	push   0x15c
c0016596:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001659a:	e8 3c c0 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c001659f:	83 c4 10             	add    esp,0x10
c00165a2:	83 c4 0c             	add    esp,0xc
c00165a5:	c3                   	ret    

c00165a6 <Timer::read()>:
c00165a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00165aa:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00165b0:	c3                   	ret    

c00165b1 <timerHandler(unsigned long long)>:
c00165b1:	55                   	push   ebp
c00165b2:	57                   	push   edi
c00165b3:	56                   	push   esi
c00165b4:	53                   	push   ebx
c00165b5:	83 ec 0c             	sub    esp,0xc
c00165b8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00165bc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00165c0:	01 35 d0 df 02 c0    	add    DWORD PTR ds:0xc002dfd0,esi
c00165c6:	11 3d d4 df 02 c0    	adc    DWORD PTR ds:0xc002dfd4,edi
c00165cc:	80 3d 6d d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d96d,0x0
c00165d3:	0f 84 42 01 00 00    	je     c001671b <timerHandler(unsigned long long)+0x16a>
c00165d9:	fa                   	cli    
c00165da:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c00165e0:	83 ec 0c             	sub    esp,0xc
c00165e3:	ff 05 84 0e 03 c0    	inc    DWORD PTR ds:0xc0030e84
c00165e9:	68 98 0e 03 c0       	push   0xc0030e98
c00165ee:	e8 5b 21 01 00       	call   c002874e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00165f3:	83 c4 10             	add    esp,0x10
c00165f6:	84 c0                	test   al,al
c00165f8:	0f 85 a2 00 00 00    	jne    c00166a0 <timerHandler(unsigned long long)+0xef>
c00165fe:	83 ec 0c             	sub    esp,0xc
c0016601:	68 98 0e 03 c0       	push   0xc0030e98
c0016606:	e8 5f 21 01 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001660b:	83 c4 10             	add    esp,0x10
c001660e:	89 c3                	mov    ebx,eax
c0016610:	83 ec 0c             	sub    esp,0xc
c0016613:	68 98 0e 03 c0       	push   0xc0030e98
c0016618:	e8 4d 21 01 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001661d:	c7 04 24 98 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e98
c0016624:	89 c5                	mov    ebp,eax
c0016626:	e8 47 21 01 00       	call   c0028772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001662b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001662e:	83 c4 10             	add    esp,0x10
c0016631:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016634:	39 15 d0 df 02 c0    	cmp    DWORD PTR ds:0xc002dfd0,edx
c001663a:	a1 d4 df 02 c0       	mov    eax,ds:0xc002dfd4
c001663f:	19 c8                	sbb    eax,ecx
c0016641:	72 21                	jb     c0016664 <timerHandler(unsigned long long)+0xb3>
c0016643:	83 ec 0c             	sub    esp,0xc
c0016646:	55                   	push   ebp
c0016647:	e8 e0 77 00 00       	call   c001de2c <unblockTask(ThreadControlBlock*)>
c001664c:	83 c4 10             	add    esp,0x10
c001664f:	39 eb                	cmp    ebx,ebp
c0016651:	75 21                	jne    c0016674 <timerHandler(unsigned long long)+0xc3>
c0016653:	83 ec 0c             	sub    esp,0xc
c0016656:	68 98 0e 03 c0       	push   0xc0030e98
c001665b:	e8 0a 21 01 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016660:	89 c3                	mov    ebx,eax
c0016662:	eb 0d                	jmp    c0016671 <timerHandler(unsigned long long)+0xc0>
c0016664:	50                   	push   eax
c0016665:	50                   	push   eax
c0016666:	55                   	push   ebp
c0016667:	68 98 0e 03 c0       	push   0xc0030e98
c001666c:	e8 af 21 01 00       	call   c0028820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016671:	83 c4 10             	add    esp,0x10
c0016674:	83 ec 0c             	sub    esp,0xc
c0016677:	68 98 0e 03 c0       	push   0xc0030e98
c001667c:	e8 cd 20 01 00       	call   c002874e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016681:	83 c4 10             	add    esp,0x10
c0016684:	84 c0                	test   al,al
c0016686:	75 18                	jne    c00166a0 <timerHandler(unsigned long long)+0xef>
c0016688:	83 ec 0c             	sub    esp,0xc
c001668b:	68 98 0e 03 c0       	push   0xc0030e98
c0016690:	e8 d5 20 01 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016695:	83 c4 10             	add    esp,0x10
c0016698:	39 d8                	cmp    eax,ebx
c001669a:	0f 85 70 ff ff ff    	jne    c0016610 <timerHandler(unsigned long long)+0x5f>
c00166a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166a5:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00166a9:	74 3d                	je     c00166e8 <timerHandler(unsigned long long)+0x137>
c00166ab:	80 3d 6c d9 02 c0 00 	cmp    BYTE PTR ds:0xc002d96c,0x0
c00166b2:	74 34                	je     c00166e8 <timerHandler(unsigned long long)+0x137>
c00166b4:	fa                   	cli    
c00166b5:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c00166bb:	31 d2                	xor    edx,edx
c00166bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166c2:	89 f9                	mov    ecx,edi
c00166c4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00166c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166cc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00166cf:	39 c6                	cmp    esi,eax
c00166d1:	19 d1                	sbb    ecx,edx
c00166d3:	72 05                	jb     c00166da <timerHandler(unsigned long long)+0x129>
c00166d5:	e8 cf 72 00 00       	call   c001d9a9 <schedule()>
c00166da:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c00166df:	48                   	dec    eax
c00166e0:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c00166e5:	75 01                	jne    c00166e8 <timerHandler(unsigned long long)+0x137>
c00166e7:	fb                   	sti    
c00166e8:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c00166ed:	48                   	dec    eax
c00166ee:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c00166f3:	75 18                	jne    c001670d <timerHandler(unsigned long long)+0x15c>
c00166f5:	83 3d 80 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e80,0x0
c00166fc:	74 0f                	je     c001670d <timerHandler(unsigned long long)+0x15c>
c00166fe:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c0016708:	e8 9c 72 00 00       	call   c001d9a9 <schedule()>
c001670d:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0016712:	48                   	dec    eax
c0016713:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c0016718:	75 01                	jne    c001671b <timerHandler(unsigned long long)+0x16a>
c001671a:	fb                   	sti    
c001671b:	83 c4 0c             	add    esp,0xc
c001671e:	5b                   	pop    ebx
c001671f:	5e                   	pop    esi
c0016720:	5f                   	pop    edi
c0016721:	5d                   	pop    ebp
c0016722:	c3                   	ret    

c0016723 <setupTimer(int)>:
c0016723:	57                   	push   edi
c0016724:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0016729:	56                   	push   esi
c001672a:	53                   	push   ebx
c001672b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001672f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016735:	83 ec 0c             	sub    esp,0xc
c0016738:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001673e:	e8 a9 d6 ff ff       	call   c0013dec <Device::getName()>
c0016743:	83 c4 10             	add    esp,0x10
c0016746:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016749:	0f 85 8d 00 00 00    	jne    c00167dc <setupTimer(int)+0xb9>
c001674f:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0016754:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001675b:	74 7f                	je     c00167dc <setupTimer(int)+0xb9>
c001675d:	83 ec 0c             	sub    esp,0xc
c0016760:	68 5c 01 00 00       	push   0x15c
c0016765:	e8 2f 8e ff ff       	call   c000f599 <malloc>
c001676a:	89 04 24             	mov    DWORD PTR [esp],eax
c001676d:	89 c3                	mov    ebx,eax
c001676f:	e8 54 fb 00 00       	call   c00262c8 <PIT::PIT()>
c0016774:	59                   	pop    ecx
c0016775:	5f                   	pop    edi
c0016776:	53                   	push   ebx
c0016777:	ff 35 68 d9 02 c0    	push   DWORD PTR ds:0xc002d968
c001677d:	e8 6a d3 ff ff       	call   c0013aec <Device::addChild(Device*)>
c0016782:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016784:	6a 00                	push   0x0
c0016786:	6a 00                	push   0x0
c0016788:	56                   	push   esi
c0016789:	53                   	push   ebx
c001678a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001678d:	83 c4 14             	add    esp,0x14
c0016790:	68 60 01 00 00       	push   0x160
c0016795:	e8 ff 8d ff ff       	call   c000f599 <malloc>
c001679a:	89 04 24             	mov    DWORD PTR [esp],eax
c001679d:	89 c7                	mov    edi,eax
c001679f:	e8 d4 f9 00 00       	call   c0026178 <APICTimer::APICTimer()>
c00167a4:	6a 00                	push   0x0
c00167a6:	6a 00                	push   0x0
c00167a8:	56                   	push   esi
c00167a9:	57                   	push   edi
c00167aa:	e8 cb f8 00 00       	call   c002607a <APICTimer::open(int, int, void*)>
c00167af:	83 c4 20             	add    esp,0x20
c00167b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167b4:	6a 00                	push   0x0
c00167b6:	6a 00                	push   0x0
c00167b8:	6a 00                	push   0x0
c00167ba:	53                   	push   ebx
c00167bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00167be:	58                   	pop    eax
c00167bf:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00167c4:	5a                   	pop    edx
c00167c5:	57                   	push   edi
c00167c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00167cc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00167d2:	e8 15 d3 ff ff       	call   c0013aec <Device::addChild(Device*)>
c00167d7:	83 c4 10             	add    esp,0x10
c00167da:	eb 33                	jmp    c001680f <setupTimer(int)+0xec>
c00167dc:	83 ec 0c             	sub    esp,0xc
c00167df:	68 5c 01 00 00       	push   0x15c
c00167e4:	e8 b0 8d ff ff       	call   c000f599 <malloc>
c00167e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00167ec:	89 c3                	mov    ebx,eax
c00167ee:	e8 d5 fa 00 00       	call   c00262c8 <PIT::PIT()>
c00167f3:	58                   	pop    eax
c00167f4:	5a                   	pop    edx
c00167f5:	53                   	push   ebx
c00167f6:	ff 35 68 d9 02 c0    	push   DWORD PTR ds:0xc002d968
c00167fc:	e8 eb d2 ff ff       	call   c0013aec <Device::addChild(Device*)>
c0016801:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016803:	6a 00                	push   0x0
c0016805:	6a 00                	push   0x0
c0016807:	56                   	push   esi
c0016808:	53                   	push   ebx
c0016809:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001680c:	83 c4 20             	add    esp,0x20
c001680f:	89 d8                	mov    eax,ebx
c0016811:	5b                   	pop    ebx
c0016812:	5e                   	pop    esi
c0016813:	5f                   	pop    edi
c0016814:	c3                   	ret    
c0016815:	90                   	nop

c0016816 <VCache::VCache(PhysicalDisk*)>:
c0016816:	53                   	push   ebx
c0016817:	83 ec 18             	sub    esp,0x18
c001681a:	ba 4c b0 02 c0       	mov    edx,0xc002b04c
c001681f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016823:	89 10                	mov    DWORD PTR [eax],edx
c0016825:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016829:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016830:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016834:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001683b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001683f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016846:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001684d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016851:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016858:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001685f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016863:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001686a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001686e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016872:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016876:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001687d:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016888:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001688c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016890:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016894:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016898:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001689c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168a0:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00168a7:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c00168af:	83 ec 0c             	sub    esp,0xc
c00168b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00168b6:	e8 de 8c ff ff       	call   c000f599 <malloc>
c00168bb:	83 c4 10             	add    esp,0x10
c00168be:	89 c3                	mov    ebx,eax
c00168c0:	83 ec 0c             	sub    esp,0xc
c00168c3:	53                   	push   ebx
c00168c4:	e8 a9 6e 00 00       	call   c001d772 <Mutex::Mutex()>
c00168c9:	83 c4 10             	add    esp,0x10
c00168cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00168d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00168db:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00168de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168e2:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00168e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168ed:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00168f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00168f7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00168fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00168fe:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016904:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001690a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001690e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016911:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016918:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001691c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016920:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016926:	05 00 01 00 00       	add    eax,0x100
c001692b:	c1 e0 04             	shl    eax,0x4
c001692e:	83 ec 0c             	sub    esp,0xc
c0016931:	50                   	push   eax
c0016932:	e8 62 8c ff ff       	call   c000f599 <malloc>
c0016937:	83 c4 10             	add    esp,0x10
c001693a:	89 c2                	mov    edx,eax
c001693c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016940:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016947:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001694e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016952:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016956:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001695a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016960:	c1 e0 07             	shl    eax,0x7
c0016963:	83 ec 0c             	sub    esp,0xc
c0016966:	50                   	push   eax
c0016967:	e8 2d 8c ff ff       	call   c000f599 <malloc>
c001696c:	83 c4 10             	add    esp,0x10
c001696f:	89 c2                	mov    edx,eax
c0016971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016975:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016978:	90                   	nop
c0016979:	83 c4 18             	add    esp,0x18
c001697c:	5b                   	pop    ebx
c001697d:	c3                   	ret    

c001697e <VCache::invalidateReadBuffer()>:
c001697e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016982:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016988:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001698c:	c3                   	ret    
c001698d:	90                   	nop

c001698e <VCache::writeWriteBuffer()>:
c001698e:	53                   	push   ebx
c001698f:	83 ec 14             	sub    esp,0x14
c0016992:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016996:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016999:	8b 10                	mov    edx,DWORD PTR [eax]
c001699b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001699e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00169a1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00169a4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00169a7:	50                   	push   eax
c00169a8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00169ab:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00169b2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00169b9:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00169bd:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00169c4:	83 c4 28             	add    esp,0x28
c00169c7:	5b                   	pop    ebx
c00169c8:	c3                   	ret    
c00169c9:	90                   	nop

c00169ca <VCache::~VCache()>:
c00169ca:	83 ec 0c             	sub    esp,0xc
c00169cd:	ba 4c b0 02 c0       	mov    edx,0xc002b04c
c00169d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169d6:	89 10                	mov    DWORD PTR [eax],edx
c00169d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169dc:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00169df:	84 c0                	test   al,al
c00169e1:	74 0f                	je     c00169f2 <VCache::~VCache()+0x28>
c00169e3:	83 ec 0c             	sub    esp,0xc
c00169e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169ea:	e8 9f ff ff ff       	call   c001698e <VCache::writeWriteBuffer()>
c00169ef:	83 c4 10             	add    esp,0x10
c00169f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00169f6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00169f9:	83 ec 0c             	sub    esp,0xc
c00169fc:	50                   	push   eax
c00169fd:	e8 a7 8b ff ff       	call   c000f5a9 <free>
c0016a02:	83 c4 10             	add    esp,0x10
c0016a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a09:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016a0c:	83 ec 0c             	sub    esp,0xc
c0016a0f:	50                   	push   eax
c0016a10:	e8 94 8b ff ff       	call   c000f5a9 <free>
c0016a15:	83 c4 10             	add    esp,0x10
c0016a18:	90                   	nop
c0016a19:	83 c4 0c             	add    esp,0xc
c0016a1c:	c3                   	ret    
c0016a1d:	90                   	nop

c0016a1e <VCache::~VCache()>:
c0016a1e:	83 ec 0c             	sub    esp,0xc
c0016a21:	83 ec 0c             	sub    esp,0xc
c0016a24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a28:	e8 9d ff ff ff       	call   c00169ca <VCache::~VCache()>
c0016a2d:	83 c4 10             	add    esp,0x10
c0016a30:	83 ec 08             	sub    esp,0x8
c0016a33:	6a 44                	push   0x44
c0016a35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a39:	e8 9d bb ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0016a3e:	83 c4 10             	add    esp,0x10
c0016a41:	83 c4 0c             	add    esp,0xc
c0016a44:	c3                   	ret    
c0016a45:	90                   	nop

c0016a46 <VCache::write(unsigned long long, int, void*)>:
c0016a46:	55                   	push   ebp
c0016a47:	57                   	push   edi
c0016a48:	56                   	push   esi
c0016a49:	53                   	push   ebx
c0016a4a:	83 ec 18             	sub    esp,0x18
c0016a4d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016a51:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016a55:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016a59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016a5c:	e8 57 72 00 00       	call   c001dcb8 <Semaphore::acquire()>
c0016a61:	83 c4 10             	add    esp,0x10
c0016a64:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016a68:	74 0c                	je     c0016a76 <VCache::write(unsigned long long, int, void*)+0x30>
c0016a6a:	83 ec 0c             	sub    esp,0xc
c0016a6d:	53                   	push   ebx
c0016a6e:	e8 0b ff ff ff       	call   c001697e <VCache::invalidateReadBuffer()>
c0016a73:	83 c4 10             	add    esp,0x10
c0016a76:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016a7a:	74 5c                	je     c0016ad8 <VCache::write(unsigned long long, int, void*)+0x92>
c0016a7c:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016a7f:	89 e8                	mov    eax,ebp
c0016a81:	99                   	cdq    
c0016a82:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016a85:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016a88:	89 c1                	mov    ecx,eax
c0016a8a:	89 d0                	mov    eax,edx
c0016a8c:	31 f1                	xor    ecx,esi
c0016a8e:	31 f8                	xor    eax,edi
c0016a90:	09 c1                	or     ecx,eax
c0016a92:	75 38                	jne    c0016acc <VCache::write(unsigned long long, int, void*)+0x86>
c0016a94:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016a99:	75 31                	jne    c0016acc <VCache::write(unsigned long long, int, void*)+0x86>
c0016a9b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a9e:	89 ef                	mov    edi,ebp
c0016aa0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016aa6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016aaa:	0f af f9             	imul   edi,ecx
c0016aad:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016ab0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ab2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ab5:	40                   	inc    eax
c0016ab6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016ab9:	83 c0 80             	add    eax,0xffffff80
c0016abc:	75 5c                	jne    c0016b1a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016abe:	83 ec 0c             	sub    esp,0xc
c0016ac1:	53                   	push   ebx
c0016ac2:	e8 c7 fe ff ff       	call   c001698e <VCache::writeWriteBuffer()>
c0016ac7:	83 c4 10             	add    esp,0x10
c0016aca:	eb 4e                	jmp    c0016b1a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016acc:	83 ec 0c             	sub    esp,0xc
c0016acf:	53                   	push   ebx
c0016ad0:	e8 b9 fe ff ff       	call   c001698e <VCache::writeWriteBuffer()>
c0016ad5:	83 c4 10             	add    esp,0x10
c0016ad8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016adb:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016ae0:	7f 22                	jg     c0016b04 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016ae2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016ae5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016ae8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016aec:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016af0:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016af3:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016af6:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016afc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016b00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016b02:	eb 16                	jmp    c0016b1a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016b04:	83 ec 0c             	sub    esp,0xc
c0016b07:	8b 10                	mov    edx,DWORD PTR [eax]
c0016b09:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016b11:	57                   	push   edi
c0016b12:	56                   	push   esi
c0016b13:	50                   	push   eax
c0016b14:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016b17:	83 c4 20             	add    esp,0x20
c0016b1a:	83 ec 0c             	sub    esp,0xc
c0016b1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b20:	e8 ef 77 00 00       	call   c001e314 <Semaphore::release()>
c0016b25:	83 c4 1c             	add    esp,0x1c
c0016b28:	31 c0                	xor    eax,eax
c0016b2a:	5b                   	pop    ebx
c0016b2b:	5e                   	pop    esi
c0016b2c:	5f                   	pop    edi
c0016b2d:	5d                   	pop    ebp
c0016b2e:	c3                   	ret    
c0016b2f:	90                   	nop

c0016b30 <VCache::read(unsigned long long, int, void*)>:
c0016b30:	55                   	push   ebp
c0016b31:	57                   	push   edi
c0016b32:	56                   	push   esi
c0016b33:	53                   	push   ebx
c0016b34:	83 ec 28             	sub    esp,0x28
c0016b37:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016b3b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b3f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b43:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016b47:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016b4a:	e8 69 71 00 00       	call   c001dcb8 <Semaphore::acquire()>
c0016b4f:	83 c4 10             	add    esp,0x10
c0016b52:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016b56:	74 0c                	je     c0016b64 <VCache::read(unsigned long long, int, void*)+0x34>
c0016b58:	83 ec 0c             	sub    esp,0xc
c0016b5b:	53                   	push   ebx
c0016b5c:	e8 2d fe ff ff       	call   c001698e <VCache::writeWriteBuffer()>
c0016b61:	83 c4 10             	add    esp,0x10
c0016b64:	83 fd 01             	cmp    ebp,0x1
c0016b67:	0f 85 80 00 00 00    	jne    c0016bed <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b6d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016b70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b74:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016b7b:	75 70                	jne    c0016bed <VCache::read(unsigned long long, int, void*)+0xbd>
c0016b7d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016b80:	89 e9                	mov    ecx,ebp
c0016b82:	f7 d9                	neg    ecx
c0016b84:	89 c8                	mov    eax,ecx
c0016b86:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016b8a:	c1 f8 1f             	sar    eax,0x1f
c0016b8d:	21 f1                	and    ecx,esi
c0016b8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b93:	89 c8                	mov    eax,ecx
c0016b95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b99:	21 f9                	and    ecx,edi
c0016b9b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016b9f:	89 ca                	mov    edx,ecx
c0016ba1:	74 0a                	je     c0016bad <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ba3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016ba6:	75 05                	jne    c0016bad <VCache::read(unsigned long long, int, void*)+0x7d>
c0016ba8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016bab:	74 23                	je     c0016bd0 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016bad:	83 ec 0c             	sub    esp,0xc
c0016bb0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016bb4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016bb8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016bbb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016bbe:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016bc0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016bc3:	55                   	push   ebp
c0016bc4:	52                   	push   edx
c0016bc5:	50                   	push   eax
c0016bc6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bca:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016bcd:	83 c4 20             	add    esp,0x20
c0016bd0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bd3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016bd7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016bdd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016be0:	48                   	dec    eax
c0016be1:	21 c6                	and    esi,eax
c0016be3:	0f af f1             	imul   esi,ecx
c0016be6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016be9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016beb:	eb 1d                	jmp    c0016c0a <VCache::read(unsigned long long, int, void*)+0xda>
c0016bed:	83 ec 0c             	sub    esp,0xc
c0016bf0:	53                   	push   ebx
c0016bf1:	e8 88 fd ff ff       	call   c001697e <VCache::invalidateReadBuffer()>
c0016bf6:	5a                   	pop    edx
c0016bf7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016bfa:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bfc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016c00:	55                   	push   ebp
c0016c01:	57                   	push   edi
c0016c02:	56                   	push   esi
c0016c03:	50                   	push   eax
c0016c04:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016c07:	83 c4 20             	add    esp,0x20
c0016c0a:	83 ec 0c             	sub    esp,0xc
c0016c0d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c10:	e8 ff 76 00 00       	call   c001e314 <Semaphore::release()>
c0016c15:	83 c4 2c             	add    esp,0x2c
c0016c18:	31 c0                	xor    eax,eax
c0016c1a:	5b                   	pop    ebx
c0016c1b:	5e                   	pop    esi
c0016c1c:	5f                   	pop    edi
c0016c1d:	5d                   	pop    ebp
c0016c1e:	c3                   	ret    
c0016c1f:	90                   	nop

c0016c20 <Video::putrect(int, int, int, int, unsigned int)>:
c0016c20:	55                   	push   ebp
c0016c21:	57                   	push   edi
c0016c22:	56                   	push   esi
c0016c23:	53                   	push   ebx
c0016c24:	83 ec 1c             	sub    esp,0x1c
c0016c27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016c2b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c2f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016c33:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016c37:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c3f:	01 df                	add    edi,ebx
c0016c41:	39 fb                	cmp    ebx,edi
c0016c43:	7d 1f                	jge    c0016c64 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016c45:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016c49:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016c4d:	7d 12                	jge    c0016c61 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016c4f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c51:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016c55:	53                   	push   ebx
c0016c56:	55                   	push   ebp
c0016c57:	45                   	inc    ebp
c0016c58:	56                   	push   esi
c0016c59:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016c5c:	83 c4 10             	add    esp,0x10
c0016c5f:	eb e8                	jmp    c0016c49 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016c61:	43                   	inc    ebx
c0016c62:	eb dd                	jmp    c0016c41 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016c64:	83 c4 1c             	add    esp,0x1c
c0016c67:	5b                   	pop    ebx
c0016c68:	5e                   	pop    esi
c0016c69:	5f                   	pop    edi
c0016c6a:	5d                   	pop    ebp
c0016c6b:	c3                   	ret    

c0016c6c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016c6c:	55                   	push   ebp
c0016c6d:	57                   	push   edi
c0016c6e:	31 ff                	xor    edi,edi
c0016c70:	56                   	push   esi
c0016c71:	53                   	push   ebx
c0016c72:	83 ec 1c             	sub    esp,0x1c
c0016c75:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016c79:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016c7d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016c84:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016c89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c8d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016c91:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016c95:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016c98:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016c9c:	01 f9                	add    ecx,edi
c0016c9e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016ca2:	7d 2f                	jge    c0016cd3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016ca4:	31 f6                	xor    esi,esi
c0016ca6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016caa:	01 f2                	add    edx,esi
c0016cac:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016cb0:	7d 1a                	jge    c0016ccc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016cb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016cb5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016cb8:	46                   	inc    esi
c0016cb9:	51                   	push   ecx
c0016cba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016cbe:	52                   	push   edx
c0016cbf:	55                   	push   ebp
c0016cc0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016cc3:	83 c4 10             	add    esp,0x10
c0016cc6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016cca:	eb da                	jmp    c0016ca6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016ccc:	47                   	inc    edi
c0016ccd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016cd1:	eb c5                	jmp    c0016c98 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016cd3:	83 c4 1c             	add    esp,0x1c
c0016cd6:	5b                   	pop    ebx
c0016cd7:	5e                   	pop    esi
c0016cd8:	5f                   	pop    edi
c0016cd9:	5d                   	pop    ebp
c0016cda:	c3                   	ret    
c0016cdb:	90                   	nop

c0016cdc <Video::blit(unsigned int*, int, int, int, int)>:
c0016cdc:	55                   	push   ebp
c0016cdd:	57                   	push   edi
c0016cde:	56                   	push   esi
c0016cdf:	53                   	push   ebx
c0016ce0:	83 ec 1c             	sub    esp,0x1c
c0016ce3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ce7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016ceb:	85 c0                	test   eax,eax
c0016ced:	79 02                	jns    c0016cf1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016cef:	31 c0                	xor    eax,eax
c0016cf1:	c1 e0 02             	shl    eax,0x2
c0016cf4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016cf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016cfc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d00:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016d04:	39 d8                	cmp    eax,ebx
c0016d06:	7e 49                	jle    c0016d51 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d08:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d0e:	7c 41                	jl     c0016d51 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016d10:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016d14:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d18:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016d1c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016d20:	39 f9                	cmp    ecx,edi
c0016d22:	7e 22                	jle    c0016d46 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016d24:	83 c5 04             	add    ebp,0x4
c0016d27:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d2d:	7c 14                	jl     c0016d43 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016d2f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016d31:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016d34:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d38:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016d3c:	56                   	push   esi
c0016d3d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016d40:	83 c4 10             	add    esp,0x10
c0016d43:	47                   	inc    edi
c0016d44:	eb d2                	jmp    c0016d18 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016d46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016d4a:	43                   	inc    ebx
c0016d4b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016d4f:	eb ab                	jmp    c0016cfc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016d51:	83 c4 1c             	add    esp,0x1c
c0016d54:	5b                   	pop    ebx
c0016d55:	5e                   	pop    esi
c0016d56:	5f                   	pop    edi
c0016d57:	5d                   	pop    ebp
c0016d58:	c3                   	ret    
c0016d59:	90                   	nop

c0016d5a <Video::clearScreen(unsigned int)>:
c0016d5a:	57                   	push   edi
c0016d5b:	56                   	push   esi
c0016d5c:	53                   	push   ebx
c0016d5d:	31 db                	xor    ebx,ebx
c0016d5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016d63:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016d69:	7e 1f                	jle    c0016d8a <Video::clearScreen(unsigned int)+0x30>
c0016d6b:	31 ff                	xor    edi,edi
c0016d6d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016d73:	7e 12                	jle    c0016d87 <Video::clearScreen(unsigned int)+0x2d>
c0016d75:	8b 06                	mov    eax,DWORD PTR [esi]
c0016d77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d7b:	53                   	push   ebx
c0016d7c:	57                   	push   edi
c0016d7d:	47                   	inc    edi
c0016d7e:	56                   	push   esi
c0016d7f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016d82:	83 c4 10             	add    esp,0x10
c0016d85:	eb e6                	jmp    c0016d6d <Video::clearScreen(unsigned int)+0x13>
c0016d87:	43                   	inc    ebx
c0016d88:	eb d9                	jmp    c0016d63 <Video::clearScreen(unsigned int)+0x9>
c0016d8a:	5b                   	pop    ebx
c0016d8b:	5e                   	pop    esi
c0016d8c:	5f                   	pop    edi
c0016d8d:	c3                   	ret    

c0016d8e <Video::putpixel(int, int, unsigned int)>:
c0016d8e:	c7 44 24 04 54 b0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b054
c0016d96:	e9 84 30 00 00       	jmp    c0019e1f <Krnl::panic(char const*)>
c0016d9b:	90                   	nop

c0016d9c <Video::Video(char const*)>:
c0016d9c:	83 ec 0c             	sub    esp,0xc
c0016d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016da3:	83 ec 08             	sub    esp,0x8
c0016da6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016daa:	50                   	push   eax
c0016dab:	e8 40 cf ff ff       	call   c0013cf0 <Device::Device(char const*)>
c0016db0:	83 c4 10             	add    esp,0x10
c0016db3:	ba c4 b0 02 c0       	mov    edx,0xc002b0c4
c0016db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dbc:	89 10                	mov    DWORD PTR [eax],edx
c0016dbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016dcc:	90                   	nop
c0016dcd:	83 c4 0c             	add    esp,0xc
c0016dd0:	c3                   	ret    
c0016dd1:	90                   	nop

c0016dd2 <Video::~Video()>:
c0016dd2:	83 ec 0c             	sub    esp,0xc
c0016dd5:	ba c4 b0 02 c0       	mov    edx,0xc002b0c4
c0016dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dde:	89 10                	mov    DWORD PTR [eax],edx
c0016de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016de4:	83 ec 0c             	sub    esp,0xc
c0016de7:	50                   	push   eax
c0016de8:	e8 cd cb ff ff       	call   c00139ba <Device::~Device()>
c0016ded:	83 c4 10             	add    esp,0x10
c0016df0:	90                   	nop
c0016df1:	83 c4 0c             	add    esp,0xc
c0016df4:	c3                   	ret    
c0016df5:	90                   	nop

c0016df6 <Video::~Video()>:
c0016df6:	83 ec 0c             	sub    esp,0xc
c0016df9:	83 ec 0c             	sub    esp,0xc
c0016dfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e00:	e8 cd ff ff ff       	call   c0016dd2 <Video::~Video()>
c0016e05:	83 c4 10             	add    esp,0x10
c0016e08:	83 ec 08             	sub    esp,0x8
c0016e0b:	68 64 01 00 00       	push   0x164
c0016e10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e14:	e8 c2 b7 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0016e19:	83 c4 10             	add    esp,0x10
c0016e1c:	83 c4 0c             	add    esp,0xc
c0016e1f:	c3                   	ret    

c0016e20 <Video::isMonochrome()>:
c0016e20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e24:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016e2a:	c3                   	ret    
c0016e2b:	90                   	nop

c0016e2c <Video::getWidth()>:
c0016e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e30:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e36:	c3                   	ret    
c0016e37:	90                   	nop

c0016e38 <Video::getHeight()>:
c0016e38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e3c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016e42:	c3                   	ret    
c0016e43:	90                   	nop

c0016e44 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016e44:	55                   	push   ebp
c0016e45:	57                   	push   edi
c0016e46:	56                   	push   esi
c0016e47:	53                   	push   ebx
c0016e48:	83 ec 2c             	sub    esp,0x2c
c0016e4b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016e4f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016e53:	83 f8 01             	cmp    eax,0x1
c0016e56:	19 c9                	sbb    ecx,ecx
c0016e58:	31 db                	xor    ebx,ebx
c0016e5a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016e5e:	89 cd                	mov    ebp,ecx
c0016e60:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016e68:	f7 d5                	not    ebp
c0016e6a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016e70:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016e74:	01 d8                	add    eax,ebx
c0016e76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e7a:	56                   	push   esi
c0016e7b:	e8 b8 ff ff ff       	call   c0016e38 <Video::getHeight()>
c0016e80:	59                   	pop    ecx
c0016e81:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016e85:	7e 70                	jle    c0016ef7 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016e87:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e8b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016e8f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016e92:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016e96:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016e9a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ea5:	89 f8                	mov    eax,edi
c0016ea7:	83 c0 20             	add    eax,0x20
c0016eaa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016eae:	56                   	push   esi
c0016eaf:	e8 78 ff ff ff       	call   c0016e2c <Video::getWidth()>
c0016eb4:	5a                   	pop    edx
c0016eb5:	39 c7                	cmp    edi,eax
c0016eb7:	7d 34                	jge    c0016eed <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016eb9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016ebe:	74 05                	je     c0016ec5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016ec0:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ec2:	55                   	push   ebp
c0016ec3:	eb 0d                	jmp    c0016ed2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ec5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016eca:	74 12                	je     c0016ede <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ecc:	8b 06                	mov    eax,DWORD PTR [esi]
c0016ece:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ed2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ed6:	57                   	push   edi
c0016ed7:	56                   	push   esi
c0016ed8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016edb:	83 c4 10             	add    esp,0x10
c0016ede:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016ee2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016ee6:	47                   	inc    edi
c0016ee7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016eeb:	75 c1                	jne    c0016eae <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016eed:	43                   	inc    ebx
c0016eee:	83 fb 20             	cmp    ebx,0x20
c0016ef1:	0f 85 79 ff ff ff    	jne    c0016e70 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016ef7:	83 c4 2c             	add    esp,0x2c
c0016efa:	5b                   	pop    ebx
c0016efb:	5e                   	pop    esi
c0016efc:	5f                   	pop    edi
c0016efd:	5d                   	pop    ebp
c0016efe:	c3                   	ret    
c0016eff:	90                   	nop

c0016f00 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016f00:	55                   	push   ebp
c0016f01:	57                   	push   edi
c0016f02:	56                   	push   esi
c0016f03:	53                   	push   ebx
c0016f04:	83 ec 28             	sub    esp,0x28
c0016f07:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016f0b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016f0f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0016f13:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016f17:	c1 e6 08             	shl    esi,0x8
c0016f1a:	01 c6                	add    esi,eax
c0016f1c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016f20:	c1 e0 08             	shl    eax,0x8
c0016f23:	01 d0                	add    eax,edx
c0016f25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f2d:	0f af c6             	imul   eax,esi
c0016f30:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016f37:	50                   	push   eax
c0016f38:	e8 5c 86 ff ff       	call   c000f599 <malloc>
c0016f3d:	83 c4 10             	add    esp,0x10
c0016f40:	89 c7                	mov    edi,eax
c0016f42:	85 c0                	test   eax,eax
c0016f44:	75 10                	jne    c0016f56 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c0016f46:	83 ec 0c             	sub    esp,0xc
c0016f49:	68 75 b0 02 c0       	push   0xc002b075
c0016f4e:	e8 cc 2e 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0016f53:	83 c4 10             	add    esp,0x10
c0016f56:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0016f59:	ba 12 00 00 00       	mov    edx,0x12
c0016f5e:	84 c0                	test   al,al
c0016f60:	74 11                	je     c0016f73 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c0016f62:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0016f66:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c0016f6a:	c1 fa 03             	sar    edx,0x3
c0016f6d:	0f af d1             	imul   edx,ecx
c0016f70:	83 c2 12             	add    edx,0x12
c0016f73:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016f77:	74 04                	je     c0016f7d <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c0016f79:	85 f6                	test   esi,esi
c0016f7b:	75 12                	jne    c0016f8f <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c0016f7d:	83 ec 0c             	sub    esp,0xc
c0016f80:	68 85 b0 02 c0       	push   0xc002b085
c0016f85:	e8 29 b7 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0016f8a:	e9 b8 00 00 00       	jmp    c0017047 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c0016f8f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0016f93:	80 f9 02             	cmp    cl,0x2
c0016f96:	0f 85 96 00 00 00    	jne    c0017032 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c0016f9c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016fa1:	75 0e                	jne    c0016fb1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fa3:	84 c0                	test   al,al
c0016fa5:	75 0a                	jne    c0016fb1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0016fa7:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016faa:	83 e8 18             	sub    eax,0x18
c0016fad:	a8 f7                	test   al,0xf7
c0016faf:	74 0a                	je     c0016fbb <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0016fb1:	83 ec 0c             	sub    esp,0xc
c0016fb4:	68 9a b0 02 c0       	push   0xc002b09a
c0016fb9:	eb 7f                	jmp    c001703a <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0016fbb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016fc3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fcb:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0016fcf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016fd7:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016fdb:	75 0c                	jne    c0016fe9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016fdd:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0016fe2:	c1 e0 18             	shl    eax,0x18
c0016fe5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fe9:	45                   	inc    ebp
c0016fea:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0016fef:	c1 e1 10             	shl    ecx,0x10
c0016ff2:	89 c8                	mov    eax,ecx
c0016ff4:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0016ff9:	c1 e1 08             	shl    ecx,0x8
c0016ffc:	09 c1                	or     ecx,eax
c0016ffe:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0017002:	09 c1                	or     ecx,eax
c0017004:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0017008:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001700c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017010:	c1 f8 03             	sar    eax,0x3
c0017013:	01 c2                	add    edx,eax
c0017015:	89 e8                	mov    eax,ebp
c0017017:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001701b:	39 c6                	cmp    esi,eax
c001701d:	7f b0                	jg     c0016fcf <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001701f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017023:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017027:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c001702a:	7e 22                	jle    c001704e <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c001702c:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0017030:	eb 99                	jmp    c0016fcb <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017032:	50                   	push   eax
c0017033:	50                   	push   eax
c0017034:	51                   	push   ecx
c0017035:	68 a8 b0 02 c0       	push   0xc002b0a8
c001703a:	e8 74 b6 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001703f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017042:	e8 62 85 ff ff       	call   c000f5a9 <free>
c0017047:	83 c4 10             	add    esp,0x10
c001704a:	31 ff                	xor    edi,edi
c001704c:	eb 0f                	jmp    c001705d <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c001704e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017052:	89 30                	mov    DWORD PTR [eax],esi
c0017054:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017058:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001705b:	89 30                	mov    DWORD PTR [eax],esi
c001705d:	83 c4 1c             	add    esp,0x1c
c0017060:	89 f8                	mov    eax,edi
c0017062:	5b                   	pop    ebx
c0017063:	5e                   	pop    esi
c0017064:	5f                   	pop    edi
c0017065:	5d                   	pop    ebp
c0017066:	c3                   	ret    
c0017067:	90                   	nop

c0017068 <Video::putTGA(int, int, unsigned char*, int)>:
c0017068:	55                   	push   ebp
c0017069:	57                   	push   edi
c001706a:	56                   	push   esi
c001706b:	53                   	push   ebx
c001706c:	83 ec 28             	sub    esp,0x28
c001706f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017073:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017077:	50                   	push   eax
c0017078:	8d 44 24 18          	lea    eax,[esp+0x18]
c001707c:	50                   	push   eax
c001707d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017081:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017085:	56                   	push   esi
c0017086:	e8 75 fe ff ff       	call   c0016f00 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001708b:	83 c4 20             	add    esp,0x20
c001708e:	85 c0                	test   eax,eax
c0017090:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017094:	74 35                	je     c00170cb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017096:	89 c7                	mov    edi,eax
c0017098:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001709c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00170a0:	39 d8                	cmp    eax,ebx
c00170a2:	7e 27                	jle    c00170cb <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00170a4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00170a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00170ac:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00170b0:	39 e8                	cmp    eax,ebp
c00170b2:	7e 14                	jle    c00170c8 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00170b4:	8b 06                	mov    eax,DWORD PTR [esi]
c00170b6:	83 c7 04             	add    edi,0x4
c00170b9:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00170bc:	53                   	push   ebx
c00170bd:	55                   	push   ebp
c00170be:	45                   	inc    ebp
c00170bf:	56                   	push   esi
c00170c0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170c3:	83 c4 10             	add    esp,0x10
c00170c6:	eb e0                	jmp    c00170a8 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00170c8:	43                   	inc    ebx
c00170c9:	eb cd                	jmp    c0017098 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00170cb:	83 c4 1c             	add    esp,0x1c
c00170ce:	5b                   	pop    ebx
c00170cf:	5e                   	pop    esi
c00170d0:	5f                   	pop    edi
c00170d1:	5d                   	pop    ebp
c00170d2:	c3                   	ret    
c00170d3:	90                   	nop

c00170d4 <ACPI::close(int, int, void*)>:
c00170d4:	83 ec 1c             	sub    esp,0x1c
c00170d7:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00170df:	74 0a                	je     c00170eb <ACPI::close(int, int, void*)+0x17>
c00170e1:	b8 00 00 00 00       	mov    eax,0x0
c00170e6:	e9 8a 00 00 00       	jmp    c0017175 <ACPI::close(int, int, void*)+0xa1>
c00170eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00170f0:	75 27                	jne    c0017119 <ACPI::close(int, int, void*)+0x45>
c00170f2:	a1 08 00 03 c0       	mov    eax,ds:0xc0030008
c00170f7:	85 c0                	test   eax,eax
c00170f9:	74 07                	je     c0017102 <ACPI::close(int, int, void*)+0x2e>
c00170fb:	a1 08 00 03 c0       	mov    eax,ds:0xc0030008
c0017100:	ff d0                	call   eax
c0017102:	83 ec 0c             	sub    esp,0xc
c0017105:	68 04 b1 02 c0       	push   0xc002b104
c001710a:	e8 10 2d 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c001710f:	83 c4 10             	add    esp,0x10
c0017112:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017117:	eb 5c                	jmp    c0017175 <ACPI::close(int, int, void*)+0xa1>
c0017119:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c001711e:	75 50                	jne    c0017170 <ACPI::close(int, int, void*)+0x9c>
c0017120:	a1 04 00 03 c0       	mov    eax,ds:0xc0030004
c0017125:	85 c0                	test   eax,eax
c0017127:	74 07                	je     c0017130 <ACPI::close(int, int, void*)+0x5c>
c0017129:	a1 04 00 03 c0       	mov    eax,ds:0xc0030004
c001712e:	ff d0                	call   eax
c0017130:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017135:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001713a:	83 e0 02             	and    eax,0x2
c001713d:	74 1c                	je     c001715b <ACPI::close(int, int, void*)+0x87>
c001713f:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017146:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001714a:	89 c2                	mov    edx,eax
c001714c:	ec                   	in     al,dx
c001714d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017151:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017155:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017159:	eb da                	jmp    c0017135 <ACPI::close(int, int, void*)+0x61>
c001715b:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017162:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017167:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001716b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001716f:	ee                   	out    dx,al
c0017170:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017175:	83 c4 1c             	add    esp,0x1c
c0017178:	c3                   	ret    

c0017179 <findRSDP()>:
c0017179:	83 ec 1c             	sub    esp,0x1c
c001717c:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0017181:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017187:	83 e0 04             	and    eax,0x4
c001718a:	84 c0                	test   al,al
c001718c:	75 07                	jne    c0017195 <findRSDP()+0x1c>
c001718e:	b8 00 00 00 00       	mov    eax,0x0
c0017193:	eb 6a                	jmp    c00171ff <findRSDP()+0x86>
c0017195:	a1 b4 d9 02 c0       	mov    eax,ds:0xc002d9b4
c001719a:	3d ff 07 00 00       	cmp    eax,0x7ff
c001719f:	7f 1b                	jg     c00171bc <findRSDP()+0x43>
c00171a1:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00171a6:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00171ac:	83 e2 fb             	and    edx,0xfffffffb
c00171af:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00171b5:	b8 00 00 00 00       	mov    eax,0x0
c00171ba:	eb 43                	jmp    c00171ff <findRSDP()+0x86>
c00171bc:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00171c4:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00171cc:	77 2c                	ja     c00171fa <findRSDP()+0x81>
c00171ce:	83 ec 04             	sub    esp,0x4
c00171d1:	6a 08                	push   0x8
c00171d3:	68 9f b1 02 c0       	push   0xc002b19f
c00171d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171dc:	e8 6b 94 fe ff       	call   c000064c <memcmp>
c00171e1:	83 c4 10             	add    esp,0x10
c00171e4:	85 c0                	test   eax,eax
c00171e6:	0f 94 c0             	sete   al
c00171e9:	84 c0                	test   al,al
c00171eb:	74 06                	je     c00171f3 <findRSDP()+0x7a>
c00171ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00171f1:	eb 0c                	jmp    c00171ff <findRSDP()+0x86>
c00171f3:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00171f8:	eb ca                	jmp    c00171c4 <findRSDP()+0x4b>
c00171fa:	b8 00 00 00 00       	mov    eax,0x0
c00171ff:	83 c4 1c             	add    esp,0x1c
c0017202:	c3                   	ret    

c0017203 <loadACPITables(unsigned char*)>:
c0017203:	57                   	push   edi
c0017204:	56                   	push   esi
c0017205:	53                   	push   ebx
c0017206:	83 ec 60             	sub    esp,0x60
c0017209:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001720e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017214:	83 e0 04             	and    eax,0x4
c0017217:	84 c0                	test   al,al
c0017219:	0f 84 33 02 00 00    	je     c0017452 <loadACPITables(unsigned char*)+0x24f>
c001721f:	a0 20 02 03 c0       	mov    al,ds:0xc0030220
c0017224:	84 c0                	test   al,al
c0017226:	74 75                	je     c001729d <loadACPITables(unsigned char*)+0x9a>
c0017228:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001722c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017230:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017234:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017237:	83 e8 24             	sub    eax,0x24
c001723a:	c1 e8 03             	shr    eax,0x3
c001723d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017241:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017249:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001724d:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017251:	0f 8d b2 00 00 00    	jge    c0017309 <loadACPITables(unsigned char*)+0x106>
c0017257:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001725b:	83 c0 24             	add    eax,0x24
c001725e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017262:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017266:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001726a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001726e:	c1 e0 03             	shl    eax,0x3
c0017271:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017275:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017279:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001727c:	8b 00                	mov    eax,DWORD PTR [eax]
c001727e:	89 c1                	mov    ecx,eax
c0017280:	a1 0c 00 03 c0       	mov    eax,ds:0xc003000c
c0017285:	8d 50 01             	lea    edx,[eax+0x1]
c0017288:	89 15 0c 00 03 c0    	mov    DWORD PTR ds:0xc003000c,edx
c001728e:	89 ca                	mov    edx,ecx
c0017290:	89 14 c5 24 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcffdc],edx
c0017297:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001729b:	eb ac                	jmp    c0017249 <loadACPITables(unsigned char*)+0x46>
c001729d:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172a1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00172a5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00172a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00172ac:	83 e8 24             	sub    eax,0x24
c00172af:	c1 e8 02             	shr    eax,0x2
c00172b2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172b6:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00172be:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172c2:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00172c6:	7d 41                	jge    c0017309 <loadACPITables(unsigned char*)+0x106>
c00172c8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00172cc:	83 c0 24             	add    eax,0x24
c00172cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00172d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172d7:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00172db:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00172df:	c1 e0 02             	shl    eax,0x2
c00172e2:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00172e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172ea:	8b 08                	mov    ecx,DWORD PTR [eax]
c00172ec:	a1 0c 00 03 c0       	mov    eax,ds:0xc003000c
c00172f1:	8d 50 01             	lea    edx,[eax+0x1]
c00172f4:	89 15 0c 00 03 c0    	mov    DWORD PTR ds:0xc003000c,edx
c00172fa:	89 ca                	mov    edx,ecx
c00172fc:	89 14 c5 24 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcffdc],edx
c0017303:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017307:	eb b5                	jmp    c00172be <loadACPITables(unsigned char*)+0xbb>
c0017309:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017311:	a1 0c 00 03 c0       	mov    eax,ds:0xc003000c
c0017316:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001731a:	0f 8d 33 01 00 00    	jge    c0017453 <loadACPITables(unsigned char*)+0x250>
c0017320:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017324:	8b 04 c5 24 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcffdc]
c001732b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001732f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017333:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017337:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001733b:	25 ff 0f 00 00       	and    eax,0xfff
c0017340:	89 c6                	mov    esi,eax
c0017342:	8b 1d d0 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dad0
c0017348:	83 ec 0c             	sub    esp,0xc
c001734b:	6a 01                	push   0x1
c001734d:	e8 b5 9e ff ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c0017352:	83 c4 10             	add    esp,0x10
c0017355:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017359:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001735f:	83 ec 0c             	sub    esp,0xc
c0017362:	6a 01                	push   0x1
c0017364:	6a 01                	push   0x1
c0017366:	50                   	push   eax
c0017367:	52                   	push   edx
c0017368:	53                   	push   ebx
c0017369:	e8 4c a9 ff ff       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001736e:	83 c4 20             	add    esp,0x20
c0017371:	09 f0                	or     eax,esi
c0017373:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017377:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001737b:	c1 e0 03             	shl    eax,0x3
c001737e:	05 20 00 03 c0       	add    eax,0xc0030020
c0017383:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017387:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001738b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001738f:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001739b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001739f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00173a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00173a7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00173ab:	89 c6                	mov    esi,eax
c00173ad:	89 d7                	mov    edi,edx
c00173af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173b1:	89 c8                	mov    eax,ecx
c00173b3:	89 fa                	mov    edx,edi
c00173b5:	89 f3                	mov    ebx,esi
c00173b7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00173bb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00173bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00173c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00173ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173d2:	05 00 10 00 00       	add    eax,0x1000
c00173d7:	c1 e8 0c             	shr    eax,0xc
c00173da:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173e2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00173ea:	25 ff 0f 00 00       	and    eax,0xfff
c00173ef:	89 c6                	mov    esi,eax
c00173f1:	8b 1d d0 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dad0
c00173f7:	83 ec 0c             	sub    esp,0xc
c00173fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00173fe:	e8 04 9e ff ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c0017403:	83 c4 10             	add    esp,0x10
c0017406:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001740a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017410:	83 ec 0c             	sub    esp,0xc
c0017413:	6a 01                	push   0x1
c0017415:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017419:	50                   	push   eax
c001741a:	52                   	push   edx
c001741b:	53                   	push   ebx
c001741c:	e8 99 a8 ff ff       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017421:	83 c4 20             	add    esp,0x20
c0017424:	09 f0                	or     eax,esi
c0017426:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001742a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001742e:	83 ec 0c             	sub    esp,0xc
c0017431:	50                   	push   eax
c0017432:	e8 16 a2 ff ff       	call   c001164d <Virt::freeKernelVirtualPages(unsigned long)>
c0017437:	83 c4 10             	add    esp,0x10
c001743a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001743e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017442:	89 14 c5 24 00 03 c0 	mov    DWORD PTR [eax*8-0x3ffcffdc],edx
c0017449:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001744d:	e9 bf fe ff ff       	jmp    c0017311 <loadACPITables(unsigned char*)+0x10e>
c0017452:	90                   	nop
c0017453:	83 c4 60             	add    esp,0x60
c0017456:	5b                   	pop    ebx
c0017457:	5e                   	pop    esi
c0017458:	5f                   	pop    edi
c0017459:	c3                   	ret    

c001745a <findRSDT(unsigned char*)>:
c001745a:	57                   	push   edi
c001745b:	56                   	push   esi
c001745c:	53                   	push   ebx
c001745d:	83 ec 50             	sub    esp,0x50
c0017460:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0017465:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001746b:	83 e0 04             	and    eax,0x4
c001746e:	84 c0                	test   al,al
c0017470:	75 0a                	jne    c001747c <findRSDT(unsigned char*)+0x22>
c0017472:	b8 00 00 00 00       	mov    eax,0x0
c0017477:	e9 21 01 00 00       	jmp    c001759d <findRSDT(unsigned char*)+0x143>
c001747c:	89 e0                	mov    eax,esp
c001747e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017482:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017486:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001748a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017492:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017496:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001749a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001749e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00174a2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00174a6:	89 c6                	mov    esi,eax
c00174a8:	89 d7                	mov    edi,edx
c00174aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00174ac:	89 c8                	mov    eax,ecx
c00174ae:	89 fa                	mov    edx,edi
c00174b0:	89 f3                	mov    ebx,esi
c00174b2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00174b6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00174ba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00174be:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00174c2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00174c6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00174ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00174d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00174d6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174de:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174e6:	25 ff 0f 00 00       	and    eax,0xfff
c00174eb:	89 c6                	mov    esi,eax
c00174ed:	8b 1d d0 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dad0
c00174f3:	83 ec 0c             	sub    esp,0xc
c00174f6:	6a 02                	push   0x2
c00174f8:	e8 0a 9d ff ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c00174fd:	83 c4 10             	add    esp,0x10
c0017500:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017504:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001750a:	83 ec 0c             	sub    esp,0xc
c001750d:	6a 01                	push   0x1
c001750f:	6a 02                	push   0x2
c0017511:	50                   	push   eax
c0017512:	52                   	push   edx
c0017513:	53                   	push   ebx
c0017514:	e8 a1 a7 ff ff       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017519:	83 c4 20             	add    esp,0x20
c001751c:	09 f0                	or     eax,esi
c001751e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017522:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017526:	25 ff 0f 00 00       	and    eax,0xfff
c001752b:	89 c6                	mov    esi,eax
c001752d:	8b 1d d0 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dad0
c0017533:	83 ec 0c             	sub    esp,0xc
c0017536:	6a 02                	push   0x2
c0017538:	e8 ca 9c ff ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c001753d:	83 c4 10             	add    esp,0x10
c0017540:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017544:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001754a:	83 ec 0c             	sub    esp,0xc
c001754d:	6a 01                	push   0x1
c001754f:	6a 02                	push   0x2
c0017551:	50                   	push   eax
c0017552:	52                   	push   edx
c0017553:	53                   	push   ebx
c0017554:	e8 61 a7 ff ff       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017559:	83 c4 20             	add    esp,0x20
c001755c:	09 f0                	or     eax,esi
c001755e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017562:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017567:	75 11                	jne    c001757a <findRSDT(unsigned char*)+0x120>
c0017569:	c6 05 20 02 03 c0 00 	mov    BYTE PTR ds:0xc0030220,0x0
c0017570:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017574:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017578:	eb 1f                	jmp    c0017599 <findRSDT(unsigned char*)+0x13f>
c001757a:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c001757f:	75 11                	jne    c0017592 <findRSDT(unsigned char*)+0x138>
c0017581:	c6 05 20 02 03 c0 01 	mov    BYTE PTR ds:0xc0030220,0x1
c0017588:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001758c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017590:	eb 07                	jmp    c0017599 <findRSDT(unsigned char*)+0x13f>
c0017592:	b8 00 00 00 00       	mov    eax,0x0
c0017597:	eb 04                	jmp    c001759d <findRSDT(unsigned char*)+0x143>
c0017599:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001759d:	83 c4 50             	add    esp,0x50
c00175a0:	5b                   	pop    ebx
c00175a1:	5e                   	pop    esi
c00175a2:	5f                   	pop    edi
c00175a3:	c3                   	ret    

c00175a4 <findDataTable(unsigned char*, char*)>:
c00175a4:	83 ec 1c             	sub    esp,0x1c
c00175a7:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00175ac:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00175b2:	83 e0 04             	and    eax,0x4
c00175b5:	84 c0                	test   al,al
c00175b7:	75 07                	jne    c00175c0 <findDataTable(unsigned char*, char*)+0x1c>
c00175b9:	b8 00 00 00 00       	mov    eax,0x0
c00175be:	eb 52                	jmp    c0017612 <findDataTable(unsigned char*, char*)+0x6e>
c00175c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00175c8:	a1 0c 00 03 c0       	mov    eax,ds:0xc003000c
c00175cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00175d1:	7d 3a                	jge    c001760d <findDataTable(unsigned char*, char*)+0x69>
c00175d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175d7:	c1 e0 03             	shl    eax,0x3
c00175da:	05 20 00 03 c0       	add    eax,0xc0030020
c00175df:	83 ec 04             	sub    esp,0x4
c00175e2:	6a 04                	push   0x4
c00175e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175e8:	50                   	push   eax
c00175e9:	e8 5e 90 fe ff       	call   c000064c <memcmp>
c00175ee:	83 c4 10             	add    esp,0x10
c00175f1:	85 c0                	test   eax,eax
c00175f3:	0f 94 c0             	sete   al
c00175f6:	84 c0                	test   al,al
c00175f8:	74 0d                	je     c0017607 <findDataTable(unsigned char*, char*)+0x63>
c00175fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175fe:	8b 04 c5 24 00 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcffdc]
c0017605:	eb 0b                	jmp    c0017612 <findDataTable(unsigned char*, char*)+0x6e>
c0017607:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001760b:	eb bb                	jmp    c00175c8 <findDataTable(unsigned char*, char*)+0x24>
c001760d:	b8 00 00 00 00       	mov    eax,0x0
c0017612:	83 c4 1c             	add    esp,0x1c
c0017615:	c3                   	ret    

c0017616 <scanMADT()>:
c0017616:	53                   	push   ebx
c0017617:	83 ec 38             	sub    esp,0x38
c001761a:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001761f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017625:	83 e0 04             	and    eax,0x4
c0017628:	84 c0                	test   al,al
c001762a:	0f 84 4a 04 00 00    	je     c0017a7a <scanMADT()+0x464>
c0017630:	e8 44 fb ff ff       	call   c0017179 <findRSDP()>
c0017635:	a3 2c 02 03 c0       	mov    ds:0xc003022c,eax
c001763a:	a1 2c 02 03 c0       	mov    eax,ds:0xc003022c
c001763f:	85 c0                	test   eax,eax
c0017641:	75 19                	jne    c001765c <scanMADT()+0x46>
c0017643:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0017648:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001764e:	83 e2 fb             	and    edx,0xfffffffb
c0017651:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017657:	e9 22 04 00 00       	jmp    c0017a7e <scanMADT()+0x468>
c001765c:	a1 2c 02 03 c0       	mov    eax,ds:0xc003022c
c0017661:	83 ec 0c             	sub    esp,0xc
c0017664:	50                   	push   eax
c0017665:	e8 f0 fd ff ff       	call   c001745a <findRSDT(unsigned char*)>
c001766a:	83 c4 10             	add    esp,0x10
c001766d:	a3 28 02 03 c0       	mov    ds:0xc0030228,eax
c0017672:	a1 28 02 03 c0       	mov    eax,ds:0xc0030228
c0017677:	85 c0                	test   eax,eax
c0017679:	75 19                	jne    c0017694 <scanMADT()+0x7e>
c001767b:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0017680:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017686:	83 e2 fb             	and    edx,0xfffffffb
c0017689:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001768f:	e9 ea 03 00 00       	jmp    c0017a7e <scanMADT()+0x468>
c0017694:	a1 28 02 03 c0       	mov    eax,ds:0xc0030228
c0017699:	83 ec 0c             	sub    esp,0xc
c001769c:	50                   	push   eax
c001769d:	e8 61 fb ff ff       	call   c0017203 <loadACPITables(unsigned char*)>
c00176a2:	83 c4 10             	add    esp,0x10
c00176a5:	a1 28 02 03 c0       	mov    eax,ds:0xc0030228
c00176aa:	83 ec 08             	sub    esp,0x8
c00176ad:	68 a8 b1 02 c0       	push   0xc002b1a8
c00176b2:	50                   	push   eax
c00176b3:	e8 ec fe ff ff       	call   c00175a4 <findDataTable(unsigned char*, char*)>
c00176b8:	83 c4 10             	add    esp,0x10
c00176bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00176bf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00176c4:	75 19                	jne    c00176df <scanMADT()+0xc9>
c00176c6:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00176cb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00176d1:	83 e2 fe             	and    edx,0xfffffffe
c00176d4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00176da:	e9 9f 03 00 00       	jmp    c0017a7e <scanMADT()+0x468>
c00176df:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00176e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00176ee:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00176f2:	0f 87 86 03 00 00    	ja     c0017a7e <scanMADT()+0x468>
c00176f8:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017700:	0f 87 78 03 00 00    	ja     c0017a7e <scanMADT()+0x468>
c0017706:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001770a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001770e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017712:	8d 50 01             	lea    edx,[eax+0x1]
c0017715:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017719:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001771d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017721:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017725:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017729:	8d 50 01             	lea    edx,[eax+0x1]
c001772c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017730:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017734:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017738:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001773c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017741:	0f 86 36 03 00 00    	jbe    c0017a7d <scanMADT()+0x467>
c0017747:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c001774c:	75 57                	jne    c00177a5 <scanMADT()+0x18f>
c001774e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017752:	8d 50 01             	lea    edx,[eax+0x1]
c0017755:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017759:	8a 15 20 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030420
c001775f:	0f b6 d2             	movzx  edx,dl
c0017762:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017766:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001776a:	88 82 60 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfba0],al
c0017770:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017774:	8d 50 01             	lea    edx,[eax+0x1]
c0017777:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001777b:	8a 15 20 04 03 c0    	mov    dl,BYTE PTR ds:0xc0030420
c0017781:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017784:	88 0d 20 04 03 c0    	mov    BYTE PTR ds:0xc0030420,cl
c001778a:	0f b6 d2             	movzx  edx,dl
c001778d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017791:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017795:	88 82 40 04 03 c0    	mov    BYTE PTR [edx-0x3ffcfbc0],al
c001779b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00177a0:	e9 c1 02 00 00       	jmp    c0017a66 <scanMADT()+0x450>
c00177a5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c00177aa:	0f 85 14 01 00 00    	jne    c00178c4 <scanMADT()+0x2ae>
c00177b0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177b4:	8d 50 01             	lea    edx,[eax+0x1]
c00177b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00177bb:	8a 15 e0 02 03 c0    	mov    dl,BYTE PTR ds:0xc00302e0
c00177c1:	0f b6 d2             	movzx  edx,dl
c00177c4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00177c8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00177cc:	88 82 00 03 03 c0    	mov    BYTE PTR [edx-0x3ffcfd00],al
c00177d2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00177d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177de:	01 d0                	add    eax,edx
c00177e0:	83 c0 2c             	add    eax,0x2c
c00177e3:	8a 00                	mov    al,BYTE PTR [eax]
c00177e5:	0f b6 d0             	movzx  edx,al
c00177e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00177ec:	8d 48 01             	lea    ecx,[eax+0x1]
c00177ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177f3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00177f7:	0f b6 c0             	movzx  eax,al
c00177fa:	c1 e0 08             	shl    eax,0x8
c00177fd:	89 d1                	mov    ecx,edx
c00177ff:	09 c1                	or     ecx,eax
c0017801:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017805:	8d 50 02             	lea    edx,[eax+0x2]
c0017808:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001780c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017810:	0f b6 c0             	movzx  eax,al
c0017813:	c1 e0 10             	shl    eax,0x10
c0017816:	09 c1                	or     ecx,eax
c0017818:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001781c:	8d 50 03             	lea    edx,[eax+0x3]
c001781f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017823:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017827:	0f b6 c0             	movzx  eax,al
c001782a:	c1 e0 18             	shl    eax,0x18
c001782d:	09 c1                	or     ecx,eax
c001782f:	89 ca                	mov    edx,ecx
c0017831:	a0 e0 02 03 c0       	mov    al,ds:0xc00302e0
c0017836:	0f b6 c0             	movzx  eax,al
c0017839:	89 14 85 20 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfce0],edx
c0017840:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017845:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017849:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001784d:	01 d0                	add    eax,edx
c001784f:	83 c0 2c             	add    eax,0x2c
c0017852:	8a 00                	mov    al,BYTE PTR [eax]
c0017854:	0f b6 d0             	movzx  edx,al
c0017857:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001785b:	8d 48 01             	lea    ecx,[eax+0x1]
c001785e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017862:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017866:	0f b6 c0             	movzx  eax,al
c0017869:	c1 e0 08             	shl    eax,0x8
c001786c:	89 d1                	mov    ecx,edx
c001786e:	09 c1                	or     ecx,eax
c0017870:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017874:	8d 50 02             	lea    edx,[eax+0x2]
c0017877:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001787b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001787f:	0f b6 c0             	movzx  eax,al
c0017882:	c1 e0 10             	shl    eax,0x10
c0017885:	09 c1                	or     ecx,eax
c0017887:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001788b:	8d 50 03             	lea    edx,[eax+0x3]
c001788e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017892:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017896:	0f b6 c0             	movzx  eax,al
c0017899:	c1 e0 18             	shl    eax,0x18
c001789c:	09 c1                	or     ecx,eax
c001789e:	89 ca                	mov    edx,ecx
c00178a0:	a0 e0 02 03 c0       	mov    al,ds:0xc00302e0
c00178a5:	0f b6 c0             	movzx  eax,al
c00178a8:	89 14 85 a0 03 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfc60],edx
c00178af:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00178b4:	a0 e0 02 03 c0       	mov    al,ds:0xc00302e0
c00178b9:	40                   	inc    eax
c00178ba:	a2 e0 02 03 c0       	mov    ds:0xc00302e0,al
c00178bf:	e9 a2 01 00 00       	jmp    c0017a66 <scanMADT()+0x450>
c00178c4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00178c9:	0f 85 e9 00 00 00    	jne    c00179b8 <scanMADT()+0x3a2>
c00178cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178d3:	8d 50 01             	lea    edx,[eax+0x1]
c00178d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178de:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178e2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00178e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00178ea:	8d 50 01             	lea    edx,[eax+0x1]
c00178ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00178f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00178f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00178f9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00178fd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017901:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017905:	01 d0                	add    eax,edx
c0017907:	83 c0 2c             	add    eax,0x2c
c001790a:	8a 00                	mov    al,BYTE PTR [eax]
c001790c:	0f b6 d0             	movzx  edx,al
c001790f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017913:	8d 48 01             	lea    ecx,[eax+0x1]
c0017916:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001791a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001791e:	0f b6 c0             	movzx  eax,al
c0017921:	c1 e0 08             	shl    eax,0x8
c0017924:	89 d1                	mov    ecx,edx
c0017926:	09 c1                	or     ecx,eax
c0017928:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001792c:	8d 50 02             	lea    edx,[eax+0x2]
c001792f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017933:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017937:	0f b6 c0             	movzx  eax,al
c001793a:	c1 e0 10             	shl    eax,0x10
c001793d:	09 c1                	or     ecx,eax
c001793f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017943:	8d 50 03             	lea    edx,[eax+0x3]
c0017946:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001794a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001794e:	0f b6 c0             	movzx  eax,al
c0017951:	c1 e0 18             	shl    eax,0x18
c0017954:	09 c8                	or     eax,ecx
c0017956:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001795a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001795f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017963:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017967:	01 d0                	add    eax,edx
c0017969:	83 c0 2c             	add    eax,0x2c
c001796c:	8a 00                	mov    al,BYTE PTR [eax]
c001796e:	0f b6 c0             	movzx  eax,al
c0017971:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017975:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017978:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001797c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017980:	0f b6 d2             	movzx  edx,dl
c0017983:	c1 e2 08             	shl    edx,0x8
c0017986:	09 d0                	or     eax,edx
c0017988:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001798d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017992:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017997:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001799b:	88 90 c0 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd3440],dl
c00179a1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00179a6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00179ab:	66 89 84 12 c0 02 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcfd40],ax
c00179b3:	e9 ae 00 00 00       	jmp    c0017a66 <scanMADT()+0x450>
c00179b8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00179bd:	0f 85 97 00 00 00    	jne    c0017a5a <scanMADT()+0x444>
c00179c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c7:	8d 50 01             	lea    edx,[eax+0x1]
c00179ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179d2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179d6:	0f b6 c0             	movzx  eax,al
c00179d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00179dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e5:	01 d0                	add    eax,edx
c00179e7:	83 c0 2c             	add    eax,0x2c
c00179ea:	8a 00                	mov    al,BYTE PTR [eax]
c00179ec:	0f b6 d0             	movzx  edx,al
c00179ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00179f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179fa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00179fe:	0f b6 c0             	movzx  eax,al
c0017a01:	c1 e0 08             	shl    eax,0x8
c0017a04:	09 d0                	or     eax,edx
c0017a06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017a0a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017a0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a13:	8d 50 01             	lea    edx,[eax+0x1]
c0017a16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a1e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a22:	0f b6 c0             	movzx  eax,al
c0017a25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a2d:	c1 e0 08             	shl    eax,0x8
c0017a30:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017a34:	89 c1                	mov    ecx,eax
c0017a36:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a3a:	c1 e0 18             	shl    eax,0x18
c0017a3d:	89 c3                	mov    ebx,eax
c0017a3f:	a1 30 02 03 c0       	mov    eax,ds:0xc0030230
c0017a44:	8d 50 01             	lea    edx,[eax+0x1]
c0017a47:	89 15 30 02 03 c0    	mov    DWORD PTR ds:0xc0030230,edx
c0017a4d:	09 d9                	or     ecx,ebx
c0017a4f:	89 ca                	mov    edx,ecx
c0017a51:	89 14 85 40 02 03 c0 	mov    DWORD PTR [eax*4-0x3ffcfdc0],edx
c0017a58:	eb 0c                	jmp    c0017a66 <scanMADT()+0x450>
c0017a5a:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017a5f:	75 05                	jne    c0017a66 <scanMADT()+0x450>
c0017a61:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017a66:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017a6b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a6f:	01 d0                	add    eax,edx
c0017a71:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a75:	e9 6d fc ff ff       	jmp    c00176e7 <scanMADT()+0xd1>
c0017a7a:	90                   	nop
c0017a7b:	eb 01                	jmp    c0017a7e <scanMADT()+0x468>
c0017a7d:	90                   	nop
c0017a7e:	83 c4 38             	add    esp,0x38
c0017a81:	5b                   	pop    ebx
c0017a82:	c3                   	ret    
c0017a83:	90                   	nop

c0017a84 <ACPI::ACPI()>:
c0017a84:	83 ec 0c             	sub    esp,0xc
c0017a87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a8b:	83 ec 08             	sub    esp,0x8
c0017a8e:	68 ad b1 02 c0       	push   0xc002b1ad
c0017a93:	50                   	push   eax
c0017a94:	e8 57 c2 ff ff       	call   c0013cf0 <Device::Device(char const*)>
c0017a99:	83 c4 10             	add    esp,0x10
c0017a9c:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c0017aa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aa5:	89 10                	mov    DWORD PTR [eax],edx
c0017aa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aab:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017ab2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ab6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ac4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017ace:	e8 43 fb ff ff       	call   c0017616 <scanMADT()>
c0017ad3:	90                   	nop
c0017ad4:	83 c4 0c             	add    esp,0xc
c0017ad7:	c3                   	ret    

c0017ad8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017ad8:	83 ec 2c             	sub    esp,0x2c
c0017adb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017adf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017ae3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017ae7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017aeb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017af0:	88 d0                	mov    al,dl
c0017af2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017af6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017afb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017b03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b07:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017b0d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017b11:	0f 8d 97 00 00 00    	jge    c0017bae <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017b17:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b1b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b1f:	83 c2 2a             	add    edx,0x2a
c0017b22:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017b26:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017b2b:	75 78                	jne    c0017ba5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b31:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b35:	83 c2 2a             	add    edx,0x2a
c0017b38:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017b3c:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017b40:	75 63                	jne    c0017ba5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017b42:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017b47:	74 3a                	je     c0017b83 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017b49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b51:	83 c2 2a             	add    edx,0x2a
c0017b54:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017b58:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b5f:	39 c2                	cmp    edx,eax
c0017b61:	74 10                	je     c0017b73 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017b63:	83 ec 0c             	sub    esp,0xc
c0017b66:	68 28 b1 02 c0       	push   0xc002b128
c0017b6b:	e8 af 22 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0017b70:	83 c4 10             	add    esp,0x10
c0017b73:	83 ec 0c             	sub    esp,0xc
c0017b76:	68 b2 b1 02 c0       	push   0xc002b1b2
c0017b7b:	e8 9f 22 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0017b80:	83 c4 10             	add    esp,0x10
c0017b83:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017b87:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b8b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017b8f:	83 c2 2a             	add    edx,0x2a
c0017b92:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017b96:	8b 02                	mov    eax,DWORD PTR [edx]
c0017b98:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017b9b:	89 01                	mov    DWORD PTR [ecx],eax
c0017b9d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017ba0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ba5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017ba9:	e9 55 ff ff ff       	jmp    c0017b03 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017bae:	90                   	nop
c0017baf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb3:	83 c4 2c             	add    esp,0x2c
c0017bb6:	c2 04 00             	ret    0x4
c0017bb9:	90                   	nop

c0017bba <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017bba:	83 ec 1c             	sub    esp,0x1c
c0017bbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bc1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017bc5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bc9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017bce:	88 c8                	mov    al,cl
c0017bd0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017bd4:	88 d0                	mov    al,dl
c0017bd6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017bda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bde:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017be8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017beb:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017bef:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017bf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bf7:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017bfd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c01:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017c08:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017c0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c11:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c17:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017c1b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c22:	83 c2 2a             	add    edx,0x2a
c0017c25:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017c29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c2d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017c33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c37:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017c3a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017c3e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017c42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c46:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c4c:	8d 50 01             	lea    edx,[eax+0x1]
c0017c4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c53:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017c59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c5d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017c63:	3d 00 02 00 00       	cmp    eax,0x200
c0017c68:	75 10                	jne    c0017c7a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017c6a:	83 ec 0c             	sub    esp,0xc
c0017c6d:	68 c1 b1 02 c0       	push   0xc002b1c1
c0017c72:	e8 a8 21 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0017c77:	83 c4 10             	add    esp,0x10
c0017c7a:	90                   	nop
c0017c7b:	83 c4 1c             	add    esp,0x1c
c0017c7e:	c3                   	ret    
c0017c7f:	90                   	nop

c0017c80 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017c80:	b8 00 00 00 00       	mov    eax,0x0
c0017c85:	c3                   	ret    

c0017c86 <ACPI::detectPCI()>:
c0017c86:	53                   	push   ebx
c0017c87:	83 ec 28             	sub    esp,0x28
c0017c8a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017c8f:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017c94:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0017c99:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c9f:	83 e0 04             	and    eax,0x4
c0017ca2:	84 c0                	test   al,al
c0017ca4:	74 2b                	je     c0017cd1 <ACPI::detectPCI()+0x4b>
c0017ca6:	a1 28 02 03 c0       	mov    eax,ds:0xc0030228
c0017cab:	83 ec 08             	sub    esp,0x8
c0017cae:	68 de b1 02 c0       	push   0xc002b1de
c0017cb3:	50                   	push   eax
c0017cb4:	e8 eb f8 ff ff       	call   c00175a4 <findDataTable(unsigned char*, char*)>
c0017cb9:	83 c4 10             	add    esp,0x10
c0017cbc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017cc0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017cc5:	74 0a                	je     c0017cd1 <ACPI::detectPCI()+0x4b>
c0017cc7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ccc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017cd1:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017cd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cdd:	8a 00                	mov    al,BYTE PTR [eax]
c0017cdf:	3c 01                	cmp    al,0x1
c0017ce1:	75 0c                	jne    c0017cef <ACPI::detectPCI()+0x69>
c0017ce3:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017ce8:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017ced:	eb 26                	jmp    c0017d15 <ACPI::detectPCI()+0x8f>
c0017cef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017cf3:	8a 00                	mov    al,BYTE PTR [eax]
c0017cf5:	3c 02                	cmp    al,0x2
c0017cf7:	75 1c                	jne    c0017d15 <ACPI::detectPCI()+0x8f>
c0017cf9:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017cfe:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d03:	74 10                	je     c0017d15 <ACPI::detectPCI()+0x8f>
c0017d05:	83 ec 0c             	sub    esp,0xc
c0017d08:	68 58 b1 02 c0       	push   0xc002b158
c0017d0d:	e8 0d 21 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0017d12:	83 c4 10             	add    esp,0x10
c0017d15:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017d19:	83 f0 01             	xor    eax,0x1
c0017d1c:	84 c0                	test   al,al
c0017d1e:	74 3f                	je     c0017d5f <ACPI::detectPCI()+0xd9>
c0017d20:	e8 2b 84 fe ff       	call   c0000150 <manualPCIProbe>
c0017d25:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d29:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017d2e:	75 0c                	jne    c0017d3c <ACPI::detectPCI()+0xb6>
c0017d30:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d35:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017d3a:	eb 23                	jmp    c0017d5f <ACPI::detectPCI()+0xd9>
c0017d3c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017d41:	75 1c                	jne    c0017d5f <ACPI::detectPCI()+0xd9>
c0017d43:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017d48:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017d4d:	74 10                	je     c0017d5f <ACPI::detectPCI()+0xd9>
c0017d4f:	83 ec 0c             	sub    esp,0xc
c0017d52:	68 58 b1 02 c0       	push   0xc002b158
c0017d57:	e8 c3 20 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0017d5c:	83 c4 10             	add    esp,0x10
c0017d5f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017d64:	74 7e                	je     c0017de4 <ACPI::detectPCI()+0x15e>
c0017d66:	83 ec 0c             	sub    esp,0xc
c0017d69:	68 e3 b1 02 c0       	push   0xc002b1e3
c0017d6e:	e8 80 78 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017d73:	83 c4 10             	add    esp,0x10
c0017d76:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0017d7e:	83 ec 0c             	sub    esp,0xc
c0017d81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017d85:	e8 0f 78 ff ff       	call   c000f599 <malloc>
c0017d8a:	83 c4 10             	add    esp,0x10
c0017d8d:	89 c3                	mov    ebx,eax
c0017d8f:	83 ec 0c             	sub    esp,0xc
c0017d92:	53                   	push   ebx
c0017d93:	e8 aa a5 00 00       	call   c0022342 <PCI::PCI()>
c0017d98:	83 c4 10             	add    esp,0x10
c0017d9b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017d9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017da3:	83 ec 08             	sub    esp,0x8
c0017da6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017daa:	50                   	push   eax
c0017dab:	e8 3c bd ff ff       	call   c0013aec <Device::addChild(Device*)>
c0017db0:	83 c4 10             	add    esp,0x10
c0017db3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017db7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017db9:	83 c0 08             	add    eax,0x8
c0017dbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dbe:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017dc3:	74 07                	je     c0017dcc <ACPI::detectPCI()+0x146>
c0017dc5:	ba 01 00 00 00       	mov    edx,0x1
c0017dca:	eb 05                	jmp    c0017dd1 <ACPI::detectPCI()+0x14b>
c0017dcc:	ba 02 00 00 00       	mov    edx,0x2
c0017dd1:	6a 00                	push   0x0
c0017dd3:	6a 00                	push   0x0
c0017dd5:	52                   	push   edx
c0017dd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dda:	ff d0                	call   eax
c0017ddc:	83 c4 10             	add    esp,0x10
c0017ddf:	e9 9e 00 00 00       	jmp    c0017e82 <ACPI::detectPCI()+0x1fc>
c0017de4:	83 ec 0c             	sub    esp,0xc
c0017de7:	68 fb b1 02 c0       	push   0xc002b1fb
c0017dec:	e8 c2 a8 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0017df1:	83 c4 10             	add    esp,0x10
c0017df4:	83 ec 0c             	sub    esp,0xc
c0017df7:	68 06 b2 02 c0       	push   0xc002b206
c0017dfc:	e8 f2 77 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017e01:	83 c4 10             	add    esp,0x10
c0017e04:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0017e0b:	83 ec 0c             	sub    esp,0xc
c0017e0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017e12:	e8 82 77 ff ff       	call   c000f599 <malloc>
c0017e17:	83 c4 10             	add    esp,0x10
c0017e1a:	89 c3                	mov    ebx,eax
c0017e1c:	83 ec 0c             	sub    esp,0xc
c0017e1f:	53                   	push   ebx
c0017e20:	e8 87 b0 00 00       	call   c0022eac <IDE::IDE()>
c0017e25:	83 c4 10             	add    esp,0x10
c0017e28:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0017e2c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e30:	83 ec 08             	sub    esp,0x8
c0017e33:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017e37:	50                   	push   eax
c0017e38:	e8 af bc ff ff       	call   c0013aec <Device::addChild(Device*)>
c0017e3d:	83 c4 10             	add    esp,0x10
c0017e40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e44:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c0017e4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e52:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0017e5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e5f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0017e68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017e6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e6e:	83 c0 08             	add    eax,0x8
c0017e71:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e73:	6a 00                	push   0x0
c0017e75:	6a 00                	push   0x0
c0017e77:	6a 00                	push   0x0
c0017e79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017e7d:	ff d0                	call   eax
c0017e7f:	83 c4 10             	add    esp,0x10
c0017e82:	90                   	nop
c0017e83:	83 c4 28             	add    esp,0x28
c0017e86:	5b                   	pop    ebx
c0017e87:	c3                   	ret    

c0017e88 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017e88:	83 ec 1c             	sub    esp,0x1c
c0017e8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017e8f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017e92:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017e96:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0017e9b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ea0:	83 ec 08             	sub    esp,0x8
c0017ea3:	52                   	push   edx
c0017ea4:	50                   	push   eax
c0017ea5:	e8 06 6d ff ff       	call   c000ebb0 <Computer::readCMOS(unsigned char)>
c0017eaa:	83 c4 10             	add    esp,0x10
c0017ead:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0017eb1:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0017eb6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0017ebb:	83 ec 04             	sub    esp,0x4
c0017ebe:	6a 01                	push   0x1
c0017ec0:	52                   	push   edx
c0017ec1:	50                   	push   eax
c0017ec2:	e8 1b 6e ff ff       	call   c000ece2 <Computer::writeCMOS(unsigned char, unsigned char)>
c0017ec7:	83 c4 10             	add    esp,0x10
c0017eca:	90                   	nop
c0017ecb:	83 c4 1c             	add    esp,0x1c
c0017ece:	c3                   	ret    
c0017ecf:	90                   	nop

c0017ed0 <ACPI::sleep()>:
c0017ed0:	83 ec 0c             	sub    esp,0xc
c0017ed3:	a1 00 00 03 c0       	mov    eax,ds:0xc0030000
c0017ed8:	85 c0                	test   eax,eax
c0017eda:	74 07                	je     c0017ee3 <ACPI::sleep()+0x13>
c0017edc:	a1 00 00 03 c0       	mov    eax,ds:0xc0030000
c0017ee1:	ff d0                	call   eax
c0017ee3:	90                   	nop
c0017ee4:	83 c4 0c             	add    esp,0xc
c0017ee7:	c3                   	ret    

c0017ee8 <ACPI::open(int, int, void*)>:
c0017ee8:	57                   	push   edi
c0017ee9:	56                   	push   esi
c0017eea:	53                   	push   ebx
c0017eeb:	81 ec 60 01 00 00    	sub    esp,0x160
c0017ef1:	83 ec 0c             	sub    esp,0xc
c0017ef4:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0017efb:	e8 86 fd ff ff       	call   c0017c86 <ACPI::detectPCI()>
c0017f00:	83 c4 10             	add    esp,0x10
c0017f03:	83 ec 0c             	sub    esp,0xc
c0017f06:	68 80 b1 02 c0       	push   0xc002b180
c0017f0b:	e8 e3 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f10:	83 c4 10             	add    esp,0x10
c0017f13:	83 ec 0c             	sub    esp,0xc
c0017f16:	68 1b b2 02 c0       	push   0xc002b21b
c0017f1b:	e8 52 46 00 00       	call   c001c572 <Thr::loadKernelSymbolTable(char const*)>
c0017f20:	83 c4 10             	add    esp,0x10
c0017f23:	83 ec 0c             	sub    esp,0xc
c0017f26:	68 39 b2 02 c0       	push   0xc002b239
c0017f2b:	e8 c3 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f30:	83 c4 10             	add    esp,0x10
c0017f33:	83 ec 04             	sub    esp,0x4
c0017f36:	6a 0c                	push   0xc
c0017f38:	68 54 b2 02 c0       	push   0xc002b254
c0017f3d:	68 65 b2 02 c0       	push   0xc002b265
c0017f42:	e8 94 2c 00 00       	call   c001abdb <Reg::readIntWithDefault(char*, char*, int)>
c0017f47:	83 c4 10             	add    esp,0x10
c0017f4a:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0017f51:	83 ec 0c             	sub    esp,0xc
c0017f54:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c0017f5b:	e8 b1 94 ff ff       	call   c0011411 <Virt::setupPageSwapping(int)>
c0017f60:	83 c4 10             	add    esp,0x10
c0017f63:	83 ec 0c             	sub    esp,0xc
c0017f66:	68 f5 9d 02 c0       	push   0xc0029df5
c0017f6b:	e8 83 76 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0017f70:	83 c4 10             	add    esp,0x10
c0017f73:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c0017f79:	83 ec 08             	sub    esp,0x8
c0017f7c:	6a 01                	push   0x1
c0017f7e:	68 6c b2 02 c0       	push   0xc002b26c
c0017f83:	e8 61 50 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c0017f88:	83 c4 10             	add    esp,0x10
c0017f8b:	83 ec 08             	sub    esp,0x8
c0017f8e:	53                   	push   ebx
c0017f8f:	50                   	push   eax
c0017f90:	e8 7f 52 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c0017f95:	83 c4 10             	add    esp,0x10
c0017f98:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0017f9f:	83 ec 08             	sub    esp,0x8
c0017fa2:	6a 12                	push   0x12
c0017fa4:	50                   	push   eax
c0017fa5:	e8 c6 be ff ff       	call   c0013e70 <getDevicesOfType(DeviceType)>
c0017faa:	83 c4 0c             	add    esp,0xc
c0017fad:	83 ec 0c             	sub    esp,0xc
c0017fb0:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fb7:	50                   	push   eax
c0017fb8:	e8 87 09 01 00       	call   c0028944 <LinkedList<Device>::isEmpty()>
c0017fbd:	83 c4 10             	add    esp,0x10
c0017fc0:	83 f0 01             	xor    eax,0x1
c0017fc3:	84 c0                	test   al,al
c0017fc5:	0f 84 43 01 00 00    	je     c001810e <ACPI::open(int, int, void*)+0x226>
c0017fcb:	83 ec 0c             	sub    esp,0xc
c0017fce:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fd5:	50                   	push   eax
c0017fd6:	e8 85 09 01 00       	call   c0028960 <LinkedList<Device>::getFirstElement()>
c0017fdb:	83 c4 10             	add    esp,0x10
c0017fde:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0017fe5:	83 ec 0c             	sub    esp,0xc
c0017fe8:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0017fef:	50                   	push   eax
c0017ff0:	e8 73 09 01 00       	call   c0028968 <LinkedList<Device>::removeFirst()>
c0017ff5:	83 c4 10             	add    esp,0x10
c0017ff8:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0017fff:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018006:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c001800d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018011:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018017:	ba 09 00 00 00       	mov    edx,0x9
c001801c:	fc                   	cld    
c001801d:	89 c7                	mov    edi,eax
c001801f:	89 de                	mov    esi,ebx
c0018021:	89 d1                	mov    ecx,edx
c0018023:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018025:	83 ec 08             	sub    esp,0x8
c0018028:	8d 44 24 38          	lea    eax,[esp+0x38]
c001802c:	50                   	push   eax
c001802d:	83 ec 24             	sub    esp,0x24
c0018030:	89 e0                	mov    eax,esp
c0018032:	89 c3                	mov    ebx,eax
c0018034:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018038:	ba 09 00 00 00       	mov    edx,0x9
c001803d:	89 df                	mov    edi,ebx
c001803f:	89 c6                	mov    esi,eax
c0018041:	89 d1                	mov    ecx,edx
c0018043:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018045:	e8 d6 a7 00 00       	call   c0022820 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001804a:	83 c4 30             	add    esp,0x30
c001804d:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018054:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c001805c:	0f 84 4b ff ff ff    	je     c0017fad <ACPI::open(int, int, void*)+0xc5>
c0018062:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c001806d:	83 ec 0c             	sub    esp,0xc
c0018070:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018077:	e8 1d 75 ff ff       	call   c000f599 <malloc>
c001807c:	83 c4 10             	add    esp,0x10
c001807f:	89 c3                	mov    ebx,eax
c0018081:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0018086:	83 ec 04             	sub    esp,0x4
c0018089:	50                   	push   eax
c001808a:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018091:	53                   	push   ebx
c0018092:	e8 7b ab ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c0018097:	83 c4 10             	add    esp,0x10
c001809a:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c00180a1:	83 ec 0c             	sub    esp,0xc
c00180a4:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00180ab:	e8 34 ae ff ff       	call   c0012ee4 <File::exists()>
c00180b0:	83 c4 10             	add    esp,0x10
c00180b3:	84 c0                	test   al,al
c00180b5:	74 27                	je     c00180de <ACPI::open(int, int, void*)+0x1f6>
c00180b7:	83 ec 08             	sub    esp,0x8
c00180ba:	6a 01                	push   0x1
c00180bc:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180c3:	e8 21 4f 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c00180c8:	83 c4 10             	add    esp,0x10
c00180cb:	83 ec 08             	sub    esp,0x8
c00180ce:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00180d5:	50                   	push   eax
c00180d6:	e8 39 51 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c00180db:	83 c4 10             	add    esp,0x10
c00180de:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00180e6:	0f 84 c1 fe ff ff    	je     c0017fad <ACPI::open(int, int, void*)+0xc5>
c00180ec:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00180f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00180f5:	83 c0 08             	add    eax,0x8
c00180f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00180fa:	83 ec 0c             	sub    esp,0xc
c00180fd:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018104:	ff d0                	call   eax
c0018106:	83 c4 10             	add    esp,0x10
c0018109:	e9 9f fe ff ff       	jmp    c0017fad <ACPI::open(int, int, void*)+0xc5>
c001810e:	83 ec 0c             	sub    esp,0xc
c0018111:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0018118:	50                   	push   eax
c0018119:	e8 24 08 01 00       	call   c0028942 <LinkedList<Device>::~LinkedList()>
c001811e:	83 c4 10             	add    esp,0x10
c0018121:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c0018127:	83 ec 08             	sub    esp,0x8
c001812a:	6a 01                	push   0x1
c001812c:	68 87 b2 02 c0       	push   0xc002b287
c0018131:	e8 b3 4e 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c0018136:	83 c4 10             	add    esp,0x10
c0018139:	83 ec 08             	sub    esp,0x8
c001813c:	53                   	push   ebx
c001813d:	50                   	push   eax
c001813e:	e8 d1 50 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c0018143:	83 c4 10             	add    esp,0x10
c0018146:	8b 1d 68 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d968
c001814c:	83 ec 08             	sub    esp,0x8
c001814f:	6a 01                	push   0x1
c0018151:	68 a4 b2 02 c0       	push   0xc002b2a4
c0018156:	e8 8e 4e 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c001815b:	83 c4 10             	add    esp,0x10
c001815e:	83 ec 08             	sub    esp,0x8
c0018161:	53                   	push   ebx
c0018162:	50                   	push   eax
c0018163:	e8 ac 50 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c0018168:	83 c4 10             	add    esp,0x10
c001816b:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0018170:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018176:	83 e0 04             	and    eax,0x4
c0018179:	84 c0                	test   al,al
c001817b:	0f 84 0d 01 00 00    	je     c001828e <ACPI::open(int, int, void*)+0x3a6>
c0018181:	83 ec 0c             	sub    esp,0xc
c0018184:	68 c1 b2 02 c0       	push   0xc002b2c1
c0018189:	e8 65 74 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c001818e:	83 c4 10             	add    esp,0x10
c0018191:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c001819c:	83 ec 0c             	sub    esp,0xc
c001819f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c00181a6:	e8 ee 73 ff ff       	call   c000f599 <malloc>
c00181ab:	83 c4 10             	add    esp,0x10
c00181ae:	89 c3                	mov    ebx,eax
c00181b0:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c00181b5:	83 ec 04             	sub    esp,0x4
c00181b8:	50                   	push   eax
c00181b9:	68 de b2 02 c0       	push   0xc002b2de
c00181be:	53                   	push   ebx
c00181bf:	e8 4e aa ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c00181c4:	83 c4 10             	add    esp,0x10
c00181c7:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c00181ce:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00181d6:	74 1a                	je     c00181f2 <ACPI::open(int, int, void*)+0x30a>
c00181d8:	83 ec 0c             	sub    esp,0xc
c00181db:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00181e2:	e8 fd ac ff ff       	call   c0012ee4 <File::exists()>
c00181e7:	83 c4 10             	add    esp,0x10
c00181ea:	84 c0                	test   al,al
c00181ec:	74 04                	je     c00181f2 <ACPI::open(int, int, void*)+0x30a>
c00181ee:	b0 01                	mov    al,0x1
c00181f0:	eb 02                	jmp    c00181f4 <ACPI::open(int, int, void*)+0x30c>
c00181f2:	b0 00                	mov    al,0x0
c00181f4:	84 c0                	test   al,al
c00181f6:	74 25                	je     c001821d <ACPI::open(int, int, void*)+0x335>
c00181f8:	83 ec 08             	sub    esp,0x8
c00181fb:	6a 01                	push   0x1
c00181fd:	68 de b2 02 c0       	push   0xc002b2de
c0018202:	e8 e2 4d 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c0018207:	83 c4 10             	add    esp,0x10
c001820a:	83 ec 08             	sub    esp,0x8
c001820d:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018214:	50                   	push   eax
c0018215:	e8 fa 4f 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c001821a:	83 c4 10             	add    esp,0x10
c001821d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0018225:	74 27                	je     c001824e <ACPI::open(int, int, void*)+0x366>
c0018227:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001822f:	74 1d                	je     c001824e <ACPI::open(int, int, void*)+0x366>
c0018231:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c0018238:	8b 00                	mov    eax,DWORD PTR [eax]
c001823a:	83 c0 08             	add    eax,0x8
c001823d:	8b 00                	mov    eax,DWORD PTR [eax]
c001823f:	83 ec 0c             	sub    esp,0xc
c0018242:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018249:	ff d0                	call   eax
c001824b:	83 c4 10             	add    esp,0x10
c001824e:	a1 28 02 03 c0       	mov    eax,ds:0xc0030228
c0018253:	83 ec 08             	sub    esp,0x8
c0018256:	68 fb b2 02 c0       	push   0xc002b2fb
c001825b:	50                   	push   eax
c001825c:	e8 43 f3 ff ff       	call   c00175a4 <findDataTable(unsigned char*, char*)>
c0018261:	83 c4 10             	add    esp,0x10
c0018264:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001826b:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018273:	74 19                	je     c001828e <ACPI::open(int, int, void*)+0x3a6>
c0018275:	83 ec 08             	sub    esp,0x8
c0018278:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001827f:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018286:	e8 fd fb ff ff       	call   c0017e88 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001828b:	83 c4 10             	add    esp,0x10
c001828e:	b8 00 00 00 00       	mov    eax,0x0
c0018293:	81 c4 60 01 00 00    	add    esp,0x160
c0018299:	5b                   	pop    ebx
c001829a:	5e                   	pop    esi
c001829b:	5f                   	pop    edi
c001829c:	c3                   	ret    
c001829d:	90                   	nop

c001829e <CPU::close(int, int, void*)>:
c001829e:	31 c0                	xor    eax,eax
c00182a0:	c3                   	ret    
c00182a1:	90                   	nop

c00182a2 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00182a2:	55                   	push   ebp
c00182a3:	57                   	push   edi
c00182a4:	56                   	push   esi
c00182a5:	53                   	push   ebx
c00182a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00182aa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00182ae:	89 ce                	mov    esi,ecx
c00182b0:	89 d5                	mov    ebp,edx
c00182b2:	80 f9 04             	cmp    cl,0x4
c00182b5:	75 28                	jne    c00182df <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00182b7:	8d 42 f9             	lea    eax,[edx-0x7]
c00182ba:	3c 03                	cmp    al,0x3
c00182bc:	0f 86 63 01 00 00    	jbe    c0018425 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182c2:	80 fa 03             	cmp    dl,0x3
c00182c5:	0f 84 5a 01 00 00    	je     c0018425 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00182cb:	8d 7a f2             	lea    edi,[edx-0xe]
c00182ce:	b8 90 cd 02 c0       	mov    eax,0xc002cd90
c00182d3:	89 fb                	mov    ebx,edi
c00182d5:	80 fb 01             	cmp    bl,0x1
c00182d8:	77 4e                	ja     c0018328 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00182da:	e9 52 01 00 00       	jmp    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182df:	80 f9 05             	cmp    cl,0x5
c00182e2:	75 4d                	jne    c0018331 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00182e4:	b8 a0 cd 02 c0       	mov    eax,0xc002cda0
c00182e9:	80 fa 03             	cmp    dl,0x3
c00182ec:	0f 86 3f 01 00 00    	jbe    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00182f2:	8d 7a fa             	lea    edi,[edx-0x6]
c00182f5:	b8 b0 cd 02 c0       	mov    eax,0xc002cdb0
c00182fa:	89 fb                	mov    ebx,edi
c00182fc:	80 fb 01             	cmp    bl,0x1
c00182ff:	0f 86 2c 01 00 00    	jbe    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018305:	b8 c0 cd 02 c0       	mov    eax,0xc002cdc0
c001830a:	80 fa 08             	cmp    dl,0x8
c001830d:	0f 84 1e 01 00 00    	je     c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018313:	89 d7                	mov    edi,edx
c0018315:	b8 d0 cd 02 c0       	mov    eax,0xc002cdd0
c001831a:	83 e7 fb             	and    edi,0xfffffffb
c001831d:	89 fb                	mov    ebx,edi
c001831f:	80 fb 09             	cmp    bl,0x9
c0018322:	0f 84 09 01 00 00    	je     c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018328:	31 c0                	xor    eax,eax
c001832a:	89 eb                	mov    ebx,ebp
c001832c:	0f b6 fb             	movzx  edi,bl
c001832f:	eb 30                	jmp    c0018361 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018331:	31 c0                	xor    eax,eax
c0018333:	80 f9 06             	cmp    cl,0x6
c0018336:	75 f2                	jne    c001832a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018338:	80 fa 0a             	cmp    dl,0xa
c001833b:	77 ed                	ja     c001832a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001833d:	bf de 05 00 00       	mov    edi,0x5de
c0018342:	0f a3 d7             	bt     edi,edx
c0018345:	73 e3                	jae    c001832a <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018347:	b8 e0 cd 02 c0       	mov    eax,0xc002cde0
c001834c:	e9 e0 00 00 00       	jmp    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018351:	39 c7                	cmp    edi,eax
c0018353:	0f 84 d3 00 00 00    	je     c001842c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018359:	40                   	inc    eax
c001835a:	3d d0 00 00 00       	cmp    eax,0xd0
c001835f:	74 09                	je     c001836a <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018361:	89 f3                	mov    ebx,esi
c0018363:	80 fb 0f             	cmp    bl,0xf
c0018366:	75 f1                	jne    c0018359 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018368:	eb e7                	jmp    c0018351 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001836a:	80 f9 10             	cmp    cl,0x10
c001836d:	75 14                	jne    c0018383 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001836f:	8d 42 fc             	lea    eax,[edx-0x4]
c0018372:	83 e0 fb             	and    eax,0xfffffffb
c0018375:	3c 02                	cmp    al,0x2
c0018377:	76 34                	jbe    c00183ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018379:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c001837e:	80 fa 02             	cmp    dl,0x2
c0018381:	eb 24                	jmp    c00183a7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018383:	80 f9 11             	cmp    cl,0x11
c0018386:	75 13                	jne    c001839b <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018388:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c001838d:	80 fa 03             	cmp    dl,0x3
c0018390:	0f 85 9b 00 00 00    	jne    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018396:	e9 91 00 00 00       	jmp    c001842c <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001839b:	80 f9 12             	cmp    cl,0x12
c001839e:	75 14                	jne    c00183b4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c00183a0:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c00183a5:	fe ca                	dec    dl
c00183a7:	0f 85 84 00 00 00    	jne    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ad:	b8 00 ce 02 c0       	mov    eax,0xc002ce00
c00183b2:	eb 7d                	jmp    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183b4:	80 f9 14             	cmp    cl,0x14
c00183b7:	75 12                	jne    c00183cb <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00183b9:	4a                   	dec    edx
c00183ba:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c00183bf:	80 fa 01             	cmp    dl,0x1
c00183c2:	77 6d                	ja     c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183c4:	b8 10 ce 02 c0       	mov    eax,0xc002ce10
c00183c9:	eb 66                	jmp    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183cb:	80 f9 15             	cmp    cl,0x15
c00183ce:	75 31                	jne    c0018401 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00183d0:	b8 20 ce 02 c0       	mov    eax,0xc002ce20
c00183d5:	80 fa 01             	cmp    dl,0x1
c00183d8:	74 57                	je     c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183da:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c00183df:	80 fa 13             	cmp    dl,0x13
c00183e2:	76 0c                	jbe    c00183f0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00183e4:	80 fa 30             	cmp    dl,0x30
c00183e7:	75 48                	jne    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183e9:	b8 40 ce 02 c0       	mov    eax,0xc002ce40
c00183ee:	eb 41                	jmp    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183f0:	b9 04 00 09 00       	mov    ecx,0x90004
c00183f5:	0f a3 d1             	bt     ecx,edx
c00183f8:	73 37                	jae    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183fa:	b8 30 ce 02 c0       	mov    eax,0xc002ce30
c00183ff:	eb 30                	jmp    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018401:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c0018406:	80 f9 16             	cmp    cl,0x16
c0018409:	75 26                	jne    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001840b:	b8 50 ce 02 c0       	mov    eax,0xc002ce50
c0018410:	84 d2                	test   dl,dl
c0018412:	74 1d                	je     c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018414:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c0018419:	80 fa 30             	cmp    dl,0x30
c001841c:	75 13                	jne    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001841e:	b8 60 ce 02 c0       	mov    eax,0xc002ce60
c0018423:	eb 0c                	jmp    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018425:	b8 80 cd 02 c0       	mov    eax,0xc002cd80
c001842a:	eb 05                	jmp    c0018431 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001842c:	b8 f0 cd 02 c0       	mov    eax,0xc002cdf0
c0018431:	5b                   	pop    ebx
c0018432:	5e                   	pop    esi
c0018433:	5f                   	pop    edi
c0018434:	5d                   	pop    ebp
c0018435:	c3                   	ret    

c0018436 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018436:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001843a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001843e:	80 f9 04             	cmp    cl,0x4
c0018441:	75 6b                	jne    c00184ae <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018443:	b8 e0 cb 02 c0       	mov    eax,0xc002cbe0
c0018448:	80 fa 01             	cmp    dl,0x1
c001844b:	0f 86 92 02 00 00    	jbe    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018451:	b8 f0 cb 02 c0       	mov    eax,0xc002cbf0
c0018456:	80 fa 02             	cmp    dl,0x2
c0018459:	0f 84 84 02 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001845f:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c0018464:	80 fa 03             	cmp    dl,0x3
c0018467:	0f 84 76 02 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001846d:	b8 10 cc 02 c0       	mov    eax,0xc002cc10
c0018472:	80 fa 04             	cmp    dl,0x4
c0018475:	0f 84 68 02 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001847b:	b8 20 cc 02 c0       	mov    eax,0xc002cc20
c0018480:	80 fa 05             	cmp    dl,0x5
c0018483:	0f 84 5a 02 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018489:	b8 00 cc 02 c0       	mov    eax,0xc002cc00
c001848e:	80 fa 07             	cmp    dl,0x7
c0018491:	0f 84 4c 02 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018497:	83 ea 08             	sub    edx,0x8
c001849a:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c001849f:	80 fa 01             	cmp    dl,0x1
c00184a2:	0f 87 3b 02 00 00    	ja     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184a8:	b8 30 cc 02 c0       	mov    eax,0xc002cc30
c00184ad:	c3                   	ret    
c00184ae:	80 f9 05             	cmp    cl,0x5
c00184b1:	75 45                	jne    c00184f8 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00184b3:	8d 4a ff             	lea    ecx,[edx-0x1]
c00184b6:	b8 40 cc 02 c0       	mov    eax,0xc002cc40
c00184bb:	80 f9 02             	cmp    cl,0x2
c00184be:	0f 86 1f 02 00 00    	jbe    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184c4:	80 fa 04             	cmp    dl,0x4
c00184c7:	0f 84 f3 01 00 00    	je     c00186c0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00184cd:	80 fa 07             	cmp    dl,0x7
c00184d0:	0f 84 0d 02 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184d6:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c00184db:	80 fa 08             	cmp    dl,0x8
c00184de:	0f 84 ff 01 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184e4:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c00184e9:	80 fa 09             	cmp    dl,0x9
c00184ec:	0f 85 f1 01 00 00    	jne    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00184f2:	b8 60 cc 02 c0       	mov    eax,0xc002cc60
c00184f7:	c3                   	ret    
c00184f8:	80 f9 06             	cmp    cl,0x6
c00184fb:	0f 85 85 01 00 00    	jne    c0018686 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018501:	b8 70 cc 02 c0       	mov    eax,0xc002cc70
c0018506:	80 fa 01             	cmp    dl,0x1
c0018509:	0f 84 d4 01 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001850f:	8d 42 fb             	lea    eax,[edx-0x5]
c0018512:	3c 01                	cmp    al,0x1
c0018514:	0f 86 ac 01 00 00    	jbe    c00186c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001851a:	80 fa 03             	cmp    dl,0x3
c001851d:	0f 84 a3 01 00 00    	je     c00186c6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018523:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018526:	b8 90 cc 02 c0       	mov    eax,0xc002cc90
c001852b:	80 f9 01             	cmp    cl,0x1
c001852e:	0f 86 af 01 00 00    	jbe    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018534:	80 fa 09             	cmp    dl,0x9
c0018537:	0f 84 8f 01 00 00    	je     c00186cc <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c001853d:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018540:	80 f9 01             	cmp    cl,0x1
c0018543:	0f 86 9a 01 00 00    	jbe    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018549:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c001854e:	80 fa 0d             	cmp    dl,0xd
c0018551:	0f 84 8c 01 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018557:	b8 b0 cc 02 c0       	mov    eax,0xc002ccb0
c001855c:	80 fa 0e             	cmp    dl,0xe
c001855f:	0f 84 7e 01 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018565:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c001856a:	80 fa 0f             	cmp    dl,0xf
c001856d:	0f 84 70 01 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018573:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c0018578:	80 fa 15             	cmp    dl,0x15
c001857b:	0f 84 62 01 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018581:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018584:	b8 c0 cc 02 c0       	mov    eax,0xc002ccc0
c0018589:	80 f9 01             	cmp    cl,0x1
c001858c:	0f 86 51 01 00 00    	jbe    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018592:	80 fa 1a             	cmp    dl,0x1a
c0018595:	0f 84 37 01 00 00    	je     c00186d2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001859b:	80 fa 1c             	cmp    dl,0x1c
c001859e:	0f 84 34 01 00 00    	je     c00186d8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00185a4:	80 fa 1d             	cmp    dl,0x1d
c00185a7:	0f 84 36 01 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ad:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c00185b2:	80 fa 25             	cmp    dl,0x25
c00185b5:	0f 84 28 01 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185bb:	8d 4a da             	lea    ecx,[edx-0x26]
c00185be:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c00185c3:	80 f9 01             	cmp    cl,0x1
c00185c6:	0f 86 17 01 00 00    	jbe    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185cc:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c00185d1:	80 fa 2a             	cmp    dl,0x2a
c00185d4:	0f 84 09 01 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185da:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c00185df:	80 fa 2c             	cmp    dl,0x2c
c00185e2:	0f 84 fb 00 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e8:	b8 00 cd 02 c0       	mov    eax,0xc002cd00
c00185ed:	80 fa 2d             	cmp    dl,0x2d
c00185f0:	0f 84 ed 00 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185f6:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c00185fb:	80 fa 2e             	cmp    dl,0x2e
c00185fe:	0f 84 df 00 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018604:	b8 f0 cc 02 c0       	mov    eax,0xc002ccf0
c0018609:	80 fa 2f             	cmp    dl,0x2f
c001860c:	0f 84 d1 00 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018612:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018615:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c001861a:	80 f9 01             	cmp    cl,0x1
c001861d:	0f 86 c0 00 00 00    	jbe    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018623:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c0018628:	80 fa 37             	cmp    dl,0x37
c001862b:	0f 84 b2 00 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018631:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c0018636:	80 fa 3a             	cmp    dl,0x3a
c0018639:	0f 84 a4 00 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863f:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c0018644:	80 fa 3c             	cmp    dl,0x3c
c0018647:	0f 84 96 00 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864d:	b8 40 cd 02 c0       	mov    eax,0xc002cd40
c0018652:	80 fa 3d             	cmp    dl,0x3d
c0018655:	0f 84 88 00 00 00    	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865b:	b8 20 cd 02 c0       	mov    eax,0xc002cd20
c0018660:	80 fa 3e             	cmp    dl,0x3e
c0018663:	74 7e                	je     c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018665:	8d 42 bb             	lea    eax,[edx-0x45]
c0018668:	3c 01                	cmp    al,0x1
c001866a:	76 72                	jbe    c00186de <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001866c:	80 fa 3f             	cmp    dl,0x3f
c001866f:	74 6d                	je     c00186de <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018671:	80 fa 4a             	cmp    dl,0x4a
c0018674:	74 0a                	je     c0018680 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018676:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c001867b:	80 fa 4d             	cmp    dl,0x4d
c001867e:	75 63                	jne    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018680:	b8 10 cd 02 c0       	mov    eax,0xc002cd10
c0018685:	c3                   	ret    
c0018686:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c001868b:	80 f9 0b             	cmp    cl,0xb
c001868e:	75 0a                	jne    c001869a <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018690:	fe ca                	dec    dl
c0018692:	75 4f                	jne    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018694:	b8 50 cd 02 c0       	mov    eax,0xc002cd50
c0018699:	c3                   	ret    
c001869a:	80 f9 0f             	cmp    cl,0xf
c001869d:	75 44                	jne    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869f:	b8 60 cd 02 c0       	mov    eax,0xc002cd60
c00186a4:	80 fa 02             	cmp    dl,0x2
c00186a7:	76 3a                	jbe    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a9:	8d 42 fd             	lea    eax,[edx-0x3]
c00186ac:	3c 01                	cmp    al,0x1
c00186ae:	76 0a                	jbe    c00186ba <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00186b0:	b8 81 b4 02 c0       	mov    eax,0xc002b481
c00186b5:	80 fa 06             	cmp    dl,0x6
c00186b8:	75 29                	jne    c00186e3 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186ba:	b8 70 cd 02 c0       	mov    eax,0xc002cd70
c00186bf:	c3                   	ret    
c00186c0:	b8 50 cc 02 c0       	mov    eax,0xc002cc50
c00186c5:	c3                   	ret    
c00186c6:	b8 80 cc 02 c0       	mov    eax,0xc002cc80
c00186cb:	c3                   	ret    
c00186cc:	b8 a0 cc 02 c0       	mov    eax,0xc002cca0
c00186d1:	c3                   	ret    
c00186d2:	b8 d0 cc 02 c0       	mov    eax,0xc002ccd0
c00186d7:	c3                   	ret    
c00186d8:	b8 e0 cc 02 c0       	mov    eax,0xc002cce0
c00186dd:	c3                   	ret    
c00186de:	b8 30 cd 02 c0       	mov    eax,0xc002cd30
c00186e3:	c3                   	ret    

c00186e4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00186e4:	60                   	pusha  
c00186e5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00186e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00186ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00186f1:	9c                   	pushf  
c00186f2:	fa                   	cli    
c00186f3:	0f 09                	wbinvd 
c00186f5:	0f 30                	wrmsr  
c00186f7:	9d                   	popf   
c00186f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00186fc:	89 02                	mov    DWORD PTR [edx],eax
c00186fe:	61                   	popa   
c00186ff:	c3                   	ret    

c0018700 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018700:	60                   	pusha  
c0018701:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018705:	9c                   	pushf  
c0018706:	fa                   	cli    
c0018707:	0f 09                	wbinvd 
c0018709:	31 c0                	xor    eax,eax
c001870b:	31 d2                	xor    edx,edx
c001870d:	0f 32                	rdmsr  
c001870f:	9d                   	popf   
c0018710:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018714:	89 02                	mov    DWORD PTR [edx],eax
c0018716:	61                   	popa   
c0018717:	c3                   	ret    

c0018718 <CPU::AMD_K6_writeback(int, int, int)>:
c0018718:	56                   	push   esi
c0018719:	53                   	push   ebx
c001871a:	83 ec 10             	sub    esp,0x10
c001871d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018721:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018726:	75 5d                	jne    c0018785 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018728:	83 f8 08             	cmp    eax,0x8
c001872b:	75 09                	jne    c0018736 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c001872d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018732:	7e 13                	jle    c0018747 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018734:	eb 30                	jmp    c0018766 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018736:	83 f8 06             	cmp    eax,0x6
c0018739:	7c 4a                	jl     c0018785 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001873b:	83 f8 07             	cmp    eax,0x7
c001873e:	7e 07                	jle    c0018747 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018740:	83 f8 09             	cmp    eax,0x9
c0018743:	74 21                	je     c0018766 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018745:	eb 3e                	jmp    c0018785 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018747:	89 e6                	mov    esi,esp
c0018749:	8b 1d a8 d9 02 c0    	mov    ebx,DWORD PTR ds:0xc002d9a8
c001874f:	56                   	push   esi
c0018750:	c1 eb 15             	shr    ebx,0x15
c0018753:	68 82 00 00 c0       	push   0xc0000082
c0018758:	83 e3 7e             	and    ebx,0x7e
c001875b:	e8 a0 ff ff ff       	call   c0018700 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018760:	56                   	push   esi
c0018761:	6a 00                	push   0x0
c0018763:	53                   	push   ebx
c0018764:	eb 12                	jmp    c0018778 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018766:	89 e3                	mov    ebx,esp
c0018768:	53                   	push   ebx
c0018769:	68 82 00 00 c0       	push   0xc0000082
c001876e:	e8 8d ff ff ff       	call   c0018700 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018773:	53                   	push   ebx
c0018774:	6a 00                	push   0x0
c0018776:	6a 00                	push   0x0
c0018778:	68 82 00 00 c0       	push   0xc0000082
c001877d:	e8 62 ff ff ff       	call   c00186e4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018782:	83 c4 18             	add    esp,0x18
c0018785:	83 c4 10             	add    esp,0x10
c0018788:	5b                   	pop    ebx
c0018789:	5e                   	pop    esi
c001878a:	c3                   	ret    
c001878b:	90                   	nop

c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001878c:	55                   	push   ebp
c001878d:	57                   	push   edi
c001878e:	56                   	push   esi
c001878f:	53                   	push   ebx
c0018790:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018794:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018798:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001879c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00187a0:	39 05 80 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce80,eax
c00187a6:	75 23                	jne    c00187cb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00187a8:	a1 8c 04 03 c0       	mov    eax,ds:0xc003048c
c00187ad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00187b1:	89 06                	mov    DWORD PTR [esi],eax
c00187b3:	a1 88 04 03 c0       	mov    eax,ds:0xc0030488
c00187b8:	89 07                	mov    DWORD PTR [edi],eax
c00187ba:	a1 84 04 03 c0       	mov    eax,ds:0xc0030484
c00187bf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00187c2:	a1 80 04 03 c0       	mov    eax,ds:0xc0030480
c00187c7:	89 02                	mov    DWORD PTR [edx],eax
c00187c9:	eb 3f                	jmp    c001880a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00187cb:	31 c9                	xor    ecx,ecx
c00187cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187d1:	0f a2                	cpuid  
c00187d3:	89 06                	mov    DWORD PTR [esi],eax
c00187d5:	89 1f                	mov    DWORD PTR [edi],ebx
c00187d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187db:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00187de:	89 10                	mov    DWORD PTR [eax],edx
c00187e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00187e4:	a3 80 ce 02 c0       	mov    ds:0xc002ce80,eax
c00187e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00187eb:	a3 8c 04 03 c0       	mov    ds:0xc003048c,eax
c00187f0:	8b 07                	mov    eax,DWORD PTR [edi]
c00187f2:	a3 88 04 03 c0       	mov    ds:0xc0030488,eax
c00187f7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00187fa:	a3 84 04 03 c0       	mov    ds:0xc0030484,eax
c00187ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018803:	8b 00                	mov    eax,DWORD PTR [eax]
c0018805:	a3 80 04 03 c0       	mov    ds:0xc0030480,eax
c001880a:	5b                   	pop    ebx
c001880b:	5e                   	pop    esi
c001880c:	5f                   	pop    edi
c001880d:	5d                   	pop    ebp
c001880e:	c3                   	ret    
c001880f:	90                   	nop

c0018810 <CPU::cpuidCheckEDX(unsigned int)>:
c0018810:	83 ec 10             	sub    esp,0x10
c0018813:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018817:	50                   	push   eax
c0018818:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001881c:	50                   	push   eax
c001881d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018821:	50                   	push   eax
c0018822:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018826:	50                   	push   eax
c0018827:	6a 01                	push   0x1
c0018829:	e8 5e ff ff ff       	call   c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001882e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018832:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018836:	0f 95 c0             	setne  al
c0018839:	83 c4 24             	add    esp,0x24
c001883c:	c3                   	ret    
c001883d:	90                   	nop

c001883e <CPU::cpuidCheckECX(unsigned int)>:
c001883e:	83 ec 10             	sub    esp,0x10
c0018841:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018845:	50                   	push   eax
c0018846:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001884a:	50                   	push   eax
c001884b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001884f:	50                   	push   eax
c0018850:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018854:	50                   	push   eax
c0018855:	6a 01                	push   0x1
c0018857:	e8 30 ff ff ff       	call   c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001885c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018860:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018864:	0f 95 c0             	setne  al
c0018867:	83 c4 24             	add    esp,0x24
c001886a:	c3                   	ret    
c001886b:	90                   	nop

c001886c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c001886c:	83 ec 10             	sub    esp,0x10
c001886f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018873:	50                   	push   eax
c0018874:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018878:	50                   	push   eax
c0018879:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001887d:	50                   	push   eax
c001887e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018882:	50                   	push   eax
c0018883:	6a 07                	push   0x7
c0018885:	e8 02 ff ff ff       	call   c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001888a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001888e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018892:	0f 95 c0             	setne  al
c0018895:	83 c4 24             	add    esp,0x24
c0018898:	c3                   	ret    
c0018899:	90                   	nop

c001889a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c001889a:	83 ec 10             	sub    esp,0x10
c001889d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188a1:	50                   	push   eax
c00188a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188a6:	50                   	push   eax
c00188a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188ab:	50                   	push   eax
c00188ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00188b0:	50                   	push   eax
c00188b1:	6a 07                	push   0x7
c00188b3:	e8 d4 fe ff ff       	call   c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00188b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188bc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00188c0:	0f 95 c0             	setne  al
c00188c3:	83 c4 24             	add    esp,0x24
c00188c6:	c3                   	ret    
c00188c7:	90                   	nop

c00188c8 <CPU::CPU()>:
c00188c8:	83 ec 0c             	sub    esp,0xc
c00188cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188cf:	83 ec 08             	sub    esp,0x8
c00188d2:	68 81 b4 02 c0       	push   0xc002b481
c00188d7:	50                   	push   eax
c00188d8:	e8 13 b4 ff ff       	call   c0013cf0 <Device::Device(char const*)>
c00188dd:	83 c4 10             	add    esp,0x10
c00188e0:	ba 58 b5 02 c0       	mov    edx,0xc002b558
c00188e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188e9:	89 10                	mov    DWORD PTR [eax],edx
c00188eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188ef:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00188f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00188fd:	05 78 01 00 00       	add    eax,0x178
c0018902:	83 ec 0c             	sub    esp,0xc
c0018905:	50                   	push   eax
c0018906:	e8 c1 64 ff ff       	call   c000edcc <GDT::GDT()>
c001890b:	83 c4 10             	add    esp,0x10
c001890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018912:	05 7c 09 00 00       	add    eax,0x97c
c0018917:	83 ec 0c             	sub    esp,0xc
c001891a:	50                   	push   eax
c001891b:	e8 fc 66 ff ff       	call   c000f01c <IDT::IDT()>
c0018920:	83 c4 10             	add    esp,0x10
c0018923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018927:	05 7c 11 00 00       	add    eax,0x117c
c001892c:	83 ec 0c             	sub    esp,0xc
c001892f:	50                   	push   eax
c0018930:	e8 19 82 ff ff       	call   c0010b4e <TSS::TSS()>
c0018935:	83 c4 10             	add    esp,0x10
c0018938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001893c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018947:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018951:	90                   	nop
c0018952:	83 c4 0c             	add    esp,0xc
c0018955:	c3                   	ret    

c0018956 <CPU::displayFeatures()>:
c0018956:	c3                   	ret    
c0018957:	90                   	nop

c0018958 <CPU::detectFeatures()>:
c0018958:	55                   	push   ebp
c0018959:	57                   	push   edi
c001895a:	56                   	push   esi
c001895b:	53                   	push   ebx
c001895c:	83 ec 50             	sub    esp,0x50
c001895f:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018963:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001896d:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018974:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c001897a:	6a 0d                	push   0xd
c001897c:	6a 00                	push   0x0
c001897e:	55                   	push   ebp
c001897f:	e8 cc 7d fe ff       	call   c0000750 <memset>
c0018984:	83 c4 10             	add    esp,0x10
c0018987:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001898c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018993:	0f 84 22 09 00 00    	je     c00192bb <CPU::detectFeatures()+0x963>
c0018999:	83 ec 0c             	sub    esp,0xc
c001899c:	89 ef                	mov    edi,ebp
c001899e:	6a 10                	push   0x10
c00189a0:	e8 6b fe ff ff       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c00189a5:	83 e0 01             	and    eax,0x1
c00189a8:	8d 14 00             	lea    edx,[eax+eax*1]
c00189ab:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189b1:	83 e0 fd             	and    eax,0xfffffffd
c00189b4:	09 d0                	or     eax,edx
c00189b6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189bc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00189c3:	e8 48 fe ff ff       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c00189c8:	83 e0 01             	and    eax,0x1
c00189cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00189d2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189d8:	83 e0 fb             	and    eax,0xfffffffb
c00189db:	09 d0                	or     eax,edx
c00189dd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00189e3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00189ea:	e8 21 fe ff ff       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c00189ef:	83 e0 01             	and    eax,0x1
c00189f2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00189f9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00189ff:	83 e0 f7             	and    eax,0xfffffff7
c0018a02:	09 d0                	or     eax,edx
c0018a04:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a0a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018a11:	e8 fa fd ff ff       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c0018a16:	83 e0 01             	and    eax,0x1
c0018a19:	c1 e0 04             	shl    eax,0x4
c0018a1c:	88 c2                	mov    dl,al
c0018a1e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a24:	83 e0 ef             	and    eax,0xffffffef
c0018a27:	09 d0                	or     eax,edx
c0018a29:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a2f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018a36:	e8 d5 fd ff ff       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c0018a3b:	83 e0 01             	and    eax,0x1
c0018a3e:	c1 e0 05             	shl    eax,0x5
c0018a41:	88 c2                	mov    dl,al
c0018a43:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018a49:	83 e0 df             	and    eax,0xffffffdf
c0018a4c:	09 d0                	or     eax,edx
c0018a4e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018a54:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018a5b:	e8 b0 fd ff ff       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c0018a60:	83 e0 01             	and    eax,0x1
c0018a63:	8d 14 00             	lea    edx,[eax+eax*1]
c0018a66:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018a6c:	83 e0 fd             	and    eax,0xfffffffd
c0018a6f:	09 d0                	or     eax,edx
c0018a71:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018a77:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018a7e:	e8 8d fd ff ff       	call   c0018810 <CPU::cpuidCheckEDX(unsigned int)>
c0018a83:	83 e0 01             	and    eax,0x1
c0018a86:	c1 e0 06             	shl    eax,0x6
c0018a89:	88 c2                	mov    dl,al
c0018a8b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018a91:	83 e0 bf             	and    eax,0xffffffbf
c0018a94:	09 d0                	or     eax,edx
c0018a96:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018a9c:	58                   	pop    eax
c0018a9d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018aa1:	50                   	push   eax
c0018aa2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018aa6:	50                   	push   eax
c0018aa7:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018aab:	56                   	push   esi
c0018aac:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ab0:	50                   	push   eax
c0018ab1:	6a 00                	push   0x0
c0018ab3:	e8 d4 fc ff ff       	call   c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ab8:	b8 04 00 00 00       	mov    eax,0x4
c0018abd:	89 c1                	mov    ecx,eax
c0018abf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ac1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018ac7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018acb:	89 c1                	mov    ecx,eax
c0018acd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018acf:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018ad5:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018ad9:	89 c1                	mov    ecx,eax
c0018adb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018add:	83 c4 18             	add    esp,0x18
c0018ae0:	68 2c b3 02 c0       	push   0xc002b32c
c0018ae5:	55                   	push   ebp
c0018ae6:	e8 ad 7d fe ff       	call   c0000898 <strcmp>
c0018aeb:	83 c4 10             	add    esp,0x10
c0018aee:	85 c0                	test   eax,eax
c0018af0:	75 0f                	jne    c0018b01 <CPU::detectFeatures()+0x1a9>
c0018af2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018afc:	e9 22 02 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018b01:	50                   	push   eax
c0018b02:	50                   	push   eax
c0018b03:	68 39 b3 02 c0       	push   0xc002b339
c0018b08:	55                   	push   ebp
c0018b09:	e8 8a 7d fe ff       	call   c0000898 <strcmp>
c0018b0e:	83 c4 10             	add    esp,0x10
c0018b11:	85 c0                	test   eax,eax
c0018b13:	74 dd                	je     c0018af2 <CPU::detectFeatures()+0x19a>
c0018b15:	50                   	push   eax
c0018b16:	50                   	push   eax
c0018b17:	68 46 b3 02 c0       	push   0xc002b346
c0018b1c:	55                   	push   ebp
c0018b1d:	e8 76 7d fe ff       	call   c0000898 <strcmp>
c0018b22:	83 c4 10             	add    esp,0x10
c0018b25:	85 c0                	test   eax,eax
c0018b27:	74 2a                	je     c0018b53 <CPU::detectFeatures()+0x1fb>
c0018b29:	50                   	push   eax
c0018b2a:	50                   	push   eax
c0018b2b:	68 53 b3 02 c0       	push   0xc002b353
c0018b30:	55                   	push   ebp
c0018b31:	e8 62 7d fe ff       	call   c0000898 <strcmp>
c0018b36:	83 c4 10             	add    esp,0x10
c0018b39:	85 c0                	test   eax,eax
c0018b3b:	74 16                	je     c0018b53 <CPU::detectFeatures()+0x1fb>
c0018b3d:	50                   	push   eax
c0018b3e:	50                   	push   eax
c0018b3f:	68 60 b3 02 c0       	push   0xc002b360
c0018b44:	55                   	push   ebp
c0018b45:	e8 4e 7d fe ff       	call   c0000898 <strcmp>
c0018b4a:	83 c4 10             	add    esp,0x10
c0018b4d:	85 c0                	test   eax,eax
c0018b4f:	74 48                	je     c0018b99 <CPU::detectFeatures()+0x241>
c0018b51:	eb 0f                	jmp    c0018b62 <CPU::detectFeatures()+0x20a>
c0018b53:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018b5d:	e9 c1 01 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018b62:	50                   	push   eax
c0018b63:	50                   	push   eax
c0018b64:	68 6d b3 02 c0       	push   0xc002b36d
c0018b69:	55                   	push   ebp
c0018b6a:	e8 29 7d fe ff       	call   c0000898 <strcmp>
c0018b6f:	83 c4 10             	add    esp,0x10
c0018b72:	85 c0                	test   eax,eax
c0018b74:	74 23                	je     c0018b99 <CPU::detectFeatures()+0x241>
c0018b76:	57                   	push   edi
c0018b77:	57                   	push   edi
c0018b78:	68 7a b3 02 c0       	push   0xc002b37a
c0018b7d:	55                   	push   ebp
c0018b7e:	e8 15 7d fe ff       	call   c0000898 <strcmp>
c0018b83:	83 c4 10             	add    esp,0x10
c0018b86:	85 c0                	test   eax,eax
c0018b88:	75 1e                	jne    c0018ba8 <CPU::detectFeatures()+0x250>
c0018b8a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018b94:	e9 8a 01 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018b99:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018ba3:	e9 7b 01 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018ba8:	56                   	push   esi
c0018ba9:	56                   	push   esi
c0018baa:	68 87 b3 02 c0       	push   0xc002b387
c0018baf:	55                   	push   ebp
c0018bb0:	e8 e3 7c fe ff       	call   c0000898 <strcmp>
c0018bb5:	83 c4 10             	add    esp,0x10
c0018bb8:	85 c0                	test   eax,eax
c0018bba:	75 0f                	jne    c0018bcb <CPU::detectFeatures()+0x273>
c0018bbc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018bc6:	e9 58 01 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018bcb:	51                   	push   ecx
c0018bcc:	51                   	push   ecx
c0018bcd:	68 46 b3 02 c0       	push   0xc002b346
c0018bd2:	55                   	push   ebp
c0018bd3:	e8 c0 7c fe ff       	call   c0000898 <strcmp>
c0018bd8:	83 c4 10             	add    esp,0x10
c0018bdb:	85 c0                	test   eax,eax
c0018bdd:	75 0f                	jne    c0018bee <CPU::detectFeatures()+0x296>
c0018bdf:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018be9:	e9 35 01 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018bee:	52                   	push   edx
c0018bef:	52                   	push   edx
c0018bf0:	68 94 b3 02 c0       	push   0xc002b394
c0018bf5:	55                   	push   ebp
c0018bf6:	e8 9d 7c fe ff       	call   c0000898 <strcmp>
c0018bfb:	83 c4 10             	add    esp,0x10
c0018bfe:	85 c0                	test   eax,eax
c0018c00:	75 0f                	jne    c0018c11 <CPU::detectFeatures()+0x2b9>
c0018c02:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018c0c:	e9 12 01 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018c11:	50                   	push   eax
c0018c12:	50                   	push   eax
c0018c13:	68 a1 b3 02 c0       	push   0xc002b3a1
c0018c18:	55                   	push   ebp
c0018c19:	e8 7a 7c fe ff       	call   c0000898 <strcmp>
c0018c1e:	83 c4 10             	add    esp,0x10
c0018c21:	85 c0                	test   eax,eax
c0018c23:	75 0f                	jne    c0018c34 <CPU::detectFeatures()+0x2dc>
c0018c25:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018c2f:	e9 ef 00 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018c34:	50                   	push   eax
c0018c35:	50                   	push   eax
c0018c36:	68 ae b3 02 c0       	push   0xc002b3ae
c0018c3b:	55                   	push   ebp
c0018c3c:	e8 57 7c fe ff       	call   c0000898 <strcmp>
c0018c41:	83 c4 10             	add    esp,0x10
c0018c44:	85 c0                	test   eax,eax
c0018c46:	75 0f                	jne    c0018c57 <CPU::detectFeatures()+0x2ff>
c0018c48:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018c52:	e9 cc 00 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018c57:	50                   	push   eax
c0018c58:	50                   	push   eax
c0018c59:	68 bb b3 02 c0       	push   0xc002b3bb
c0018c5e:	55                   	push   ebp
c0018c5f:	e8 34 7c fe ff       	call   c0000898 <strcmp>
c0018c64:	83 c4 10             	add    esp,0x10
c0018c67:	85 c0                	test   eax,eax
c0018c69:	75 0f                	jne    c0018c7a <CPU::detectFeatures()+0x322>
c0018c6b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018c75:	e9 a9 00 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018c7a:	50                   	push   eax
c0018c7b:	50                   	push   eax
c0018c7c:	68 c8 b3 02 c0       	push   0xc002b3c8
c0018c81:	55                   	push   ebp
c0018c82:	e8 11 7c fe ff       	call   c0000898 <strcmp>
c0018c87:	83 c4 10             	add    esp,0x10
c0018c8a:	85 c0                	test   eax,eax
c0018c8c:	75 0f                	jne    c0018c9d <CPU::detectFeatures()+0x345>
c0018c8e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018c98:	e9 86 00 00 00       	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018c9d:	50                   	push   eax
c0018c9e:	50                   	push   eax
c0018c9f:	68 d5 b3 02 c0       	push   0xc002b3d5
c0018ca4:	55                   	push   ebp
c0018ca5:	e8 ee 7b fe ff       	call   c0000898 <strcmp>
c0018caa:	83 c4 10             	add    esp,0x10
c0018cad:	85 c0                	test   eax,eax
c0018caf:	75 0c                	jne    c0018cbd <CPU::detectFeatures()+0x365>
c0018cb1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018cbb:	eb 66                	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018cbd:	50                   	push   eax
c0018cbe:	50                   	push   eax
c0018cbf:	68 e2 b3 02 c0       	push   0xc002b3e2
c0018cc4:	55                   	push   ebp
c0018cc5:	e8 ce 7b fe ff       	call   c0000898 <strcmp>
c0018cca:	83 c4 10             	add    esp,0x10
c0018ccd:	85 c0                	test   eax,eax
c0018ccf:	75 0c                	jne    c0018cdd <CPU::detectFeatures()+0x385>
c0018cd1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0018cdb:	eb 46                	jmp    c0018d23 <CPU::detectFeatures()+0x3cb>
c0018cdd:	57                   	push   edi
c0018cde:	57                   	push   edi
c0018cdf:	68 ef b3 02 c0       	push   0xc002b3ef
c0018ce4:	55                   	push   ebp
c0018ce5:	e8 ae 7b fe ff       	call   c0000898 <strcmp>
c0018cea:	83 c4 10             	add    esp,0x10
c0018ced:	85 c0                	test   eax,eax
c0018cef:	74 e0                	je     c0018cd1 <CPU::detectFeatures()+0x379>
c0018cf1:	56                   	push   esi
c0018cf2:	56                   	push   esi
c0018cf3:	68 fc b3 02 c0       	push   0xc002b3fc
c0018cf8:	55                   	push   ebp
c0018cf9:	e8 9a 7b fe ff       	call   c0000898 <strcmp>
c0018cfe:	83 c4 10             	add    esp,0x10
c0018d01:	85 c0                	test   eax,eax
c0018d03:	74 cc                	je     c0018cd1 <CPU::detectFeatures()+0x379>
c0018d05:	51                   	push   ecx
c0018d06:	51                   	push   ecx
c0018d07:	68 09 b4 02 c0       	push   0xc002b409
c0018d0c:	55                   	push   ebp
c0018d0d:	e8 86 7b fe ff       	call   c0000898 <strcmp>
c0018d12:	83 c4 10             	add    esp,0x10
c0018d15:	85 c0                	test   eax,eax
c0018d17:	74 b8                	je     c0018cd1 <CPU::detectFeatures()+0x379>
c0018d19:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0018d23:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018d28:	0f 86 be 00 00 00    	jbe    c0018dec <CPU::detectFeatures()+0x494>
c0018d2e:	83 ec 0c             	sub    esp,0xc
c0018d31:	68 80 00 00 00       	push   0x80
c0018d36:	e8 31 fb ff ff       	call   c001886c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d3b:	83 e0 01             	and    eax,0x1
c0018d3e:	c1 e0 06             	shl    eax,0x6
c0018d41:	88 c2                	mov    dl,al
c0018d43:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d49:	83 e0 bf             	and    eax,0xffffffbf
c0018d4c:	09 d0                	or     eax,edx
c0018d4e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d54:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018d5b:	e8 0c fb ff ff       	call   c001886c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d60:	83 e0 01             	and    eax,0x1
c0018d63:	c1 e0 04             	shl    eax,0x4
c0018d66:	88 c2                	mov    dl,al
c0018d68:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018d6e:	83 e0 ef             	and    eax,0xffffffef
c0018d71:	09 d0                	or     eax,edx
c0018d73:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018d79:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0018d80:	e8 e7 fa ff ff       	call   c001886c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018d85:	c1 e0 07             	shl    eax,0x7
c0018d88:	88 c2                	mov    dl,al
c0018d8a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d90:	83 e0 7f             	and    eax,0x7f
c0018d93:	09 d0                	or     eax,edx
c0018d95:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d9b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018da2:	e8 f3 fa ff ff       	call   c001889a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018da7:	83 e0 01             	and    eax,0x1
c0018daa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018db1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018db7:	83 e0 f7             	and    eax,0xfffffff7
c0018dba:	09 d0                	or     eax,edx
c0018dbc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018dc2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0018dc9:	e8 cc fa ff ff       	call   c001889a <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018dce:	83 c4 10             	add    esp,0x10
c0018dd1:	83 e0 01             	and    eax,0x1
c0018dd4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018ddb:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018de1:	83 e0 fb             	and    eax,0xfffffffb
c0018de4:	09 d0                	or     eax,edx
c0018de6:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018dec:	83 ec 0c             	sub    esp,0xc
c0018def:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018df3:	50                   	push   eax
c0018df4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018df8:	50                   	push   eax
c0018df9:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018dfd:	56                   	push   esi
c0018dfe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e02:	50                   	push   eax
c0018e03:	6a 01                	push   0x1
c0018e05:	e8 82 f9 ff ff       	call   c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e0a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018e0e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018e14:	88 ca                	mov    dl,cl
c0018e16:	83 e0 f0             	and    eax,0xfffffff0
c0018e19:	83 e2 0f             	and    edx,0xf
c0018e1c:	09 d0                	or     eax,edx
c0018e1e:	88 ca                	mov    dl,cl
c0018e20:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0018e26:	c0 ea 04             	shr    dl,0x4
c0018e29:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0018e2d:	0f b6 c2             	movzx  eax,dl
c0018e30:	83 c4 20             	add    esp,0x20
c0018e33:	c1 e0 06             	shl    eax,0x6
c0018e36:	89 c7                	mov    edi,eax
c0018e38:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018e3e:	66 25 3f c0          	and    ax,0xc03f
c0018e42:	09 f8                	or     eax,edi
c0018e44:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e4b:	89 c8                	mov    eax,ecx
c0018e4d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0018e54:	c1 e8 08             	shr    eax,0x8
c0018e57:	83 e5 3f             	and    ebp,0x3f
c0018e5a:	83 e0 0f             	and    eax,0xf
c0018e5d:	89 c7                	mov    edi,eax
c0018e5f:	c1 e7 06             	shl    edi,0x6
c0018e62:	09 ef                	or     edi,ebp
c0018e64:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0018e6b:	89 fa                	mov    edx,edi
c0018e6d:	83 e5 c0             	and    ebp,0xffffffc0
c0018e70:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018e76:	88 c2                	mov    dl,al
c0018e78:	c0 ea 02             	shr    dl,0x2
c0018e7b:	89 d7                	mov    edi,edx
c0018e7d:	09 ef                	or     edi,ebp
c0018e7f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018e85:	89 fa                	mov    edx,edi
c0018e87:	83 e5 cf             	and    ebp,0xffffffcf
c0018e8a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018e90:	89 cf                	mov    edi,ecx
c0018e92:	c1 ef 0c             	shr    edi,0xc
c0018e95:	83 e7 03             	and    edi,0x3
c0018e98:	c1 e7 04             	shl    edi,0x4
c0018e9b:	09 ef                	or     edi,ebp
c0018e9d:	3c 06                	cmp    al,0x6
c0018e9f:	89 fa                	mov    edx,edi
c0018ea1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018ea7:	74 04                	je     c0018ead <CPU::detectFeatures()+0x555>
c0018ea9:	3c 0f                	cmp    al,0xf
c0018eab:	75 5c                	jne    c0018f09 <CPU::detectFeatures()+0x5b1>
c0018ead:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018eb1:	89 cf                	mov    edi,ecx
c0018eb3:	c1 ef 10             	shr    edi,0x10
c0018eb6:	c1 e7 04             	shl    edi,0x4
c0018eb9:	09 fa                	or     edx,edi
c0018ebb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0018ec1:	0f b6 d2             	movzx  edx,dl
c0018ec4:	66 81 e7 3f c0       	and    di,0xc03f
c0018ec9:	c1 e2 06             	shl    edx,0x6
c0018ecc:	09 fa                	or     edx,edi
c0018ece:	3c 0f                	cmp    al,0xf
c0018ed0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018ed7:	75 30                	jne    c0018f09 <CPU::detectFeatures()+0x5b1>
c0018ed9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018edf:	c1 e9 14             	shr    ecx,0x14
c0018ee2:	83 e0 3f             	and    eax,0x3f
c0018ee5:	83 c1 0f             	add    ecx,0xf
c0018ee8:	88 ca                	mov    dl,cl
c0018eea:	c0 e9 02             	shr    cl,0x2
c0018eed:	c1 e2 06             	shl    edx,0x6
c0018ef0:	09 d0                	or     eax,edx
c0018ef2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018ef8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018efe:	83 e0 c0             	and    eax,0xffffffc0
c0018f01:	09 c1                	or     ecx,eax
c0018f03:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018f09:	83 ec 0c             	sub    esp,0xc
c0018f0c:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018f13:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f17:	50                   	push   eax
c0018f18:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018f1c:	55                   	push   ebp
c0018f1d:	56                   	push   esi
c0018f1e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0018f22:	57                   	push   edi
c0018f23:	68 00 00 00 80       	push   0x80000000
c0018f28:	e8 5f f8 ff ff       	call   c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f2d:	83 c4 20             	add    esp,0x20
c0018f30:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018f38:	76 22                	jbe    c0018f5c <CPU::detectFeatures()+0x604>
c0018f3a:	83 ec 0c             	sub    esp,0xc
c0018f3d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018f41:	50                   	push   eax
c0018f42:	55                   	push   ebp
c0018f43:	56                   	push   esi
c0018f44:	57                   	push   edi
c0018f45:	68 01 00 00 80       	push   0x80000001
c0018f4a:	e8 3d f8 ff ff       	call   c001878c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f4f:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018f59:	83 c4 20             	add    esp,0x20
c0018f5c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018f62:	83 f8 01             	cmp    eax,0x1
c0018f65:	75 6f                	jne    c0018fd6 <CPU::detectFeatures()+0x67e>
c0018f67:	51                   	push   ecx
c0018f68:	51                   	push   ecx
c0018f69:	68 15 b4 02 c0       	push   0xc002b415
c0018f6e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018f72:	56                   	push   esi
c0018f73:	e8 94 78 fe ff       	call   c000080c <strcpy>
c0018f78:	5f                   	pop    edi
c0018f79:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f7f:	5d                   	pop    ebp
c0018f80:	66 c1 e8 06          	shr    ax,0x6
c0018f84:	0f b6 c0             	movzx  eax,al
c0018f87:	50                   	push   eax
c0018f88:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f8e:	c1 e8 0e             	shr    eax,0xe
c0018f91:	0f b6 c0             	movzx  eax,al
c0018f94:	50                   	push   eax
c0018f95:	e8 9c f4 ff ff       	call   c0018436 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018f9a:	5a                   	pop    edx
c0018f9b:	59                   	pop    ecx
c0018f9c:	50                   	push   eax
c0018f9d:	56                   	push   esi
c0018f9e:	e8 a9 79 fe ff       	call   c000094c <strcat>
c0018fa3:	5f                   	pop    edi
c0018fa4:	5d                   	pop    ebp
c0018fa5:	56                   	push   esi
c0018fa6:	53                   	push   ebx
c0018fa7:	e8 36 ad ff ff       	call   c0013ce2 <Device::setName(char const*)>
c0018fac:	58                   	pop    eax
c0018fad:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018fb3:	5a                   	pop    edx
c0018fb4:	68 1c b4 02 c0       	push   0xc002b41c
c0018fb9:	50                   	push   eax
c0018fba:	e8 d9 78 fe ff       	call   c0000898 <strcmp>
c0018fbf:	83 c4 10             	add    esp,0x10
c0018fc2:	85 c0                	test   eax,eax
c0018fc4:	0f 85 71 03 00 00    	jne    c001933b <CPU::detectFeatures()+0x9e3>
c0018fca:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018fd1:	e9 65 03 00 00       	jmp    c001933b <CPU::detectFeatures()+0x9e3>
c0018fd6:	83 f8 02             	cmp    eax,0x2
c0018fd9:	0f 85 b5 00 00 00    	jne    c0019094 <CPU::detectFeatures()+0x73c>
c0018fdf:	57                   	push   edi
c0018fe0:	57                   	push   edi
c0018fe1:	68 2e b4 02 c0       	push   0xc002b42e
c0018fe6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018fea:	56                   	push   esi
c0018feb:	e8 1c 78 fe ff       	call   c000080c <strcpy>
c0018ff0:	5d                   	pop    ebp
c0018ff1:	58                   	pop    eax
c0018ff2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018ff8:	66 c1 e8 06          	shr    ax,0x6
c0018ffc:	0f b6 c0             	movzx  eax,al
c0018fff:	50                   	push   eax
c0019000:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019006:	c1 e8 0e             	shr    eax,0xe
c0019009:	0f b6 c0             	movzx  eax,al
c001900c:	50                   	push   eax
c001900d:	e8 90 f2 ff ff       	call   c00182a2 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019012:	5a                   	pop    edx
c0019013:	59                   	pop    ecx
c0019014:	50                   	push   eax
c0019015:	56                   	push   esi
c0019016:	e8 31 79 fe ff       	call   c000094c <strcat>
c001901b:	5f                   	pop    edi
c001901c:	5d                   	pop    ebp
c001901d:	56                   	push   esi
c001901e:	53                   	push   ebx
c001901f:	e8 be ac ff ff       	call   c0013ce2 <Device::setName(char const*)>
c0019024:	58                   	pop    eax
c0019025:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001902b:	5a                   	pop    edx
c001902c:	68 33 b4 02 c0       	push   0xc002b433
c0019031:	50                   	push   eax
c0019032:	e8 61 78 fe ff       	call   c0000898 <strcmp>
c0019037:	83 c4 10             	add    esp,0x10
c001903a:	85 c0                	test   eax,eax
c001903c:	75 20                	jne    c001905e <CPU::detectFeatures()+0x706>
c001903e:	8b 15 68 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d968
c0019044:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001904a:	a8 01                	test   al,0x1
c001904c:	74 10                	je     c001905e <CPU::detectFeatures()+0x706>
c001904e:	83 e0 fe             	and    eax,0xfffffffe
c0019051:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019057:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001905e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019064:	c1 e8 0e             	shr    eax,0xe
c0019067:	3c 05                	cmp    al,0x5
c0019069:	0f 85 cc 02 00 00    	jne    c001933b <CPU::detectFeatures()+0x9e3>
c001906f:	56                   	push   esi
c0019070:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019076:	83 e0 0f             	and    eax,0xf
c0019079:	50                   	push   eax
c001907a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019080:	66 c1 e8 06          	shr    ax,0x6
c0019084:	0f b6 c0             	movzx  eax,al
c0019087:	50                   	push   eax
c0019088:	6a 05                	push   0x5
c001908a:	e8 89 f6 ff ff       	call   c0018718 <CPU::AMD_K6_writeback(int, int, int)>
c001908f:	e9 1f 02 00 00       	jmp    c00192b3 <CPU::detectFeatures()+0x95b>
c0019094:	8d 50 fd             	lea    edx,[eax-0x3]
c0019097:	83 fa 01             	cmp    edx,0x1
c001909a:	76 09                	jbe    c00190a5 <CPU::detectFeatures()+0x74d>
c001909c:	83 f8 06             	cmp    eax,0x6
c001909f:	0f 85 91 01 00 00    	jne    c0019236 <CPU::detectFeatures()+0x8de>
c00190a5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190ab:	c1 ea 0e             	shr    edx,0xe
c00190ae:	80 fa 05             	cmp    dl,0x5
c00190b1:	75 7b                	jne    c001912e <CPU::detectFeatures()+0x7d6>
c00190b3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00190b9:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00190be:	66 81 fa 00 01       	cmp    dx,0x100
c00190c3:	75 0c                	jne    c00190d1 <CPU::detectFeatures()+0x779>
c00190c5:	51                   	push   ecx
c00190c6:	51                   	push   ecx
c00190c7:	68 3a b4 02 c0       	push   0xc002b43a
c00190cc:	e9 dc 01 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c00190d1:	66 81 fa 00 02       	cmp    dx,0x200
c00190d6:	75 0c                	jne    c00190e4 <CPU::detectFeatures()+0x78c>
c00190d8:	52                   	push   edx
c00190d9:	52                   	push   edx
c00190da:	68 4d b4 02 c0       	push   0xc002b44d
c00190df:	e9 c9 01 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c00190e4:	66 81 fa 40 02       	cmp    dx,0x240
c00190e9:	75 0c                	jne    c00190f7 <CPU::detectFeatures()+0x79f>
c00190eb:	50                   	push   eax
c00190ec:	50                   	push   eax
c00190ed:	68 5f b4 02 c0       	push   0xc002b45f
c00190f2:	e9 b6 01 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c00190f7:	83 f8 06             	cmp    eax,0x6
c00190fa:	75 0c                	jne    c0019108 <CPU::detectFeatures()+0x7b0>
c00190fc:	50                   	push   eax
c00190fd:	50                   	push   eax
c00190fe:	68 71 b4 02 c0       	push   0xc002b471
c0019103:	e9 a5 01 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c0019108:	83 f8 04             	cmp    eax,0x4
c001910b:	75 0c                	jne    c0019119 <CPU::detectFeatures()+0x7c1>
c001910d:	50                   	push   eax
c001910e:	50                   	push   eax
c001910f:	68 7d b4 02 c0       	push   0xc002b47d
c0019114:	e9 94 01 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c0019119:	83 f8 03             	cmp    eax,0x3
c001911c:	0f 85 19 02 00 00    	jne    c001933b <CPU::detectFeatures()+0x9e3>
c0019122:	50                   	push   eax
c0019123:	50                   	push   eax
c0019124:	68 85 b4 02 c0       	push   0xc002b485
c0019129:	e9 7f 01 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c001912e:	80 fa 06             	cmp    dl,0x6
c0019131:	0f 85 db 00 00 00    	jne    c0019212 <CPU::detectFeatures()+0x8ba>
c0019137:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001913d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019142:	66 81 fa 80 01       	cmp    dx,0x180
c0019147:	75 0c                	jne    c0019155 <CPU::detectFeatures()+0x7fd>
c0019149:	50                   	push   eax
c001914a:	50                   	push   eax
c001914b:	68 90 b4 02 c0       	push   0xc002b490
c0019150:	e9 58 01 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c0019155:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001915b:	66 f7 c1 80 ff       	test   cx,0xff80
c0019160:	75 0c                	jne    c001916e <CPU::detectFeatures()+0x816>
c0019162:	50                   	push   eax
c0019163:	50                   	push   eax
c0019164:	68 a0 b4 02 c0       	push   0xc002b4a0
c0019169:	e9 3f 01 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c001916e:	66 81 fa 40 02       	cmp    dx,0x240
c0019173:	75 0c                	jne    c0019181 <CPU::detectFeatures()+0x829>
c0019175:	55                   	push   ebp
c0019176:	55                   	push   ebp
c0019177:	68 a7 b4 02 c0       	push   0xc002b4a7
c001917c:	e9 2c 01 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c0019181:	66 81 fa 80 02       	cmp    dx,0x280
c0019186:	75 0c                	jne    c0019194 <CPU::detectFeatures()+0x83c>
c0019188:	57                   	push   edi
c0019189:	57                   	push   edi
c001918a:	68 b0 b4 02 c0       	push   0xc002b4b0
c001918f:	e9 19 01 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c0019194:	66 81 fa 40 03       	cmp    dx,0x340
c0019199:	74 ed                	je     c0019188 <CPU::detectFeatures()+0x830>
c001919b:	66 81 fa c0 03       	cmp    dx,0x3c0
c00191a0:	75 0c                	jne    c00191ae <CPU::detectFeatures()+0x856>
c00191a2:	56                   	push   esi
c00191a3:	56                   	push   esi
c00191a4:	68 b7 b4 02 c0       	push   0xc002b4b7
c00191a9:	e9 ff 00 00 00       	jmp    c00192ad <CPU::detectFeatures()+0x955>
c00191ae:	83 f8 06             	cmp    eax,0x6
c00191b1:	0f 84 45 ff ff ff    	je     c00190fc <CPU::detectFeatures()+0x7a4>
c00191b7:	83 f8 04             	cmp    eax,0x4
c00191ba:	0f 84 4d ff ff ff    	je     c001910d <CPU::detectFeatures()+0x7b5>
c00191c0:	83 f8 03             	cmp    eax,0x3
c00191c3:	0f 85 72 01 00 00    	jne    c001933b <CPU::detectFeatures()+0x9e3>
c00191c9:	51                   	push   ecx
c00191ca:	51                   	push   ecx
c00191cb:	68 c0 b4 02 c0       	push   0xc002b4c0
c00191d0:	53                   	push   ebx
c00191d1:	e8 0c ab ff ff       	call   c0013ce2 <Device::setName(char const*)>
c00191d6:	b1 c1                	mov    cl,0xc1
c00191d8:	88 c8                	mov    al,cl
c00191da:	e6 22                	out    0x22,al
c00191dc:	e4 23                	in     al,0x23
c00191de:	88 c2                	mov    dl,al
c00191e0:	88 c8                	mov    al,cl
c00191e2:	e6 22                	out    0x22,al
c00191e4:	88 d0                	mov    al,dl
c00191e6:	83 c8 10             	or     eax,0x10
c00191e9:	e6 23                	out    0x23,al
c00191eb:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00191f2:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00191f5:	89 d0                	mov    eax,edx
c00191f7:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00191fd:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019201:	40                   	inc    eax
c0019202:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019208:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001920d:	e9 a1 00 00 00       	jmp    c00192b3 <CPU::detectFeatures()+0x95b>
c0019212:	83 f8 06             	cmp    eax,0x6
c0019215:	0f 84 e1 fe ff ff    	je     c00190fc <CPU::detectFeatures()+0x7a4>
c001921b:	83 f8 04             	cmp    eax,0x4
c001921e:	0f 84 e9 fe ff ff    	je     c001910d <CPU::detectFeatures()+0x7b5>
c0019224:	83 f8 03             	cmp    eax,0x3
c0019227:	0f 85 0e 01 00 00    	jne    c001933b <CPU::detectFeatures()+0x9e3>
c001922d:	52                   	push   edx
c001922e:	52                   	push   edx
c001922f:	68 cb b4 02 c0       	push   0xc002b4cb
c0019234:	eb 77                	jmp    c00192ad <CPU::detectFeatures()+0x955>
c0019236:	83 f8 07             	cmp    eax,0x7
c0019239:	75 09                	jne    c0019244 <CPU::detectFeatures()+0x8ec>
c001923b:	50                   	push   eax
c001923c:	50                   	push   eax
c001923d:	68 d5 b4 02 c0       	push   0xc002b4d5
c0019242:	eb 69                	jmp    c00192ad <CPU::detectFeatures()+0x955>
c0019244:	83 f8 0a             	cmp    eax,0xa
c0019247:	75 09                	jne    c0019252 <CPU::detectFeatures()+0x8fa>
c0019249:	50                   	push   eax
c001924a:	50                   	push   eax
c001924b:	68 e0 b4 02 c0       	push   0xc002b4e0
c0019250:	eb 5b                	jmp    c00192ad <CPU::detectFeatures()+0x955>
c0019252:	83 f8 0b             	cmp    eax,0xb
c0019255:	75 09                	jne    c0019260 <CPU::detectFeatures()+0x908>
c0019257:	50                   	push   eax
c0019258:	50                   	push   eax
c0019259:	68 e8 b4 02 c0       	push   0xc002b4e8
c001925e:	eb 4d                	jmp    c00192ad <CPU::detectFeatures()+0x955>
c0019260:	83 f8 08             	cmp    eax,0x8
c0019263:	75 09                	jne    c001926e <CPU::detectFeatures()+0x916>
c0019265:	50                   	push   eax
c0019266:	50                   	push   eax
c0019267:	68 f1 b4 02 c0       	push   0xc002b4f1
c001926c:	eb 3f                	jmp    c00192ad <CPU::detectFeatures()+0x955>
c001926e:	83 f8 09             	cmp    eax,0x9
c0019271:	75 09                	jne    c001927c <CPU::detectFeatures()+0x924>
c0019273:	50                   	push   eax
c0019274:	50                   	push   eax
c0019275:	68 f9 b4 02 c0       	push   0xc002b4f9
c001927a:	eb 31                	jmp    c00192ad <CPU::detectFeatures()+0x955>
c001927c:	83 f8 05             	cmp    eax,0x5
c001927f:	75 09                	jne    c001928a <CPU::detectFeatures()+0x932>
c0019281:	50                   	push   eax
c0019282:	50                   	push   eax
c0019283:	68 01 b5 02 c0       	push   0xc002b501
c0019288:	eb 23                	jmp    c00192ad <CPU::detectFeatures()+0x955>
c001928a:	83 f8 0c             	cmp    eax,0xc
c001928d:	75 09                	jne    c0019298 <CPU::detectFeatures()+0x940>
c001928f:	55                   	push   ebp
c0019290:	55                   	push   ebp
c0019291:	68 0f b5 02 c0       	push   0xc002b50f
c0019296:	eb 15                	jmp    c00192ad <CPU::detectFeatures()+0x955>
c0019298:	83 f8 0d             	cmp    eax,0xd
c001929b:	75 09                	jne    c00192a6 <CPU::detectFeatures()+0x94e>
c001929d:	57                   	push   edi
c001929e:	57                   	push   edi
c001929f:	68 1a b5 02 c0       	push   0xc002b51a
c00192a4:	eb 07                	jmp    c00192ad <CPU::detectFeatures()+0x955>
c00192a6:	56                   	push   esi
c00192a7:	56                   	push   esi
c00192a8:	68 2e b5 02 c0       	push   0xc002b52e
c00192ad:	53                   	push   ebx
c00192ae:	e8 2f aa ff ff       	call   c0013ce2 <Device::setName(char const*)>
c00192b3:	83 c4 10             	add    esp,0x10
c00192b6:	e9 80 00 00 00       	jmp    c001933b <CPU::detectFeatures()+0x9e3>
c00192bb:	51                   	push   ecx
c00192bc:	51                   	push   ecx
c00192bd:	68 7a b3 02 c0       	push   0xc002b37a
c00192c2:	55                   	push   ebp
c00192c3:	e8 44 75 fe ff       	call   c000080c <strcpy>
c00192c8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00192d2:	e8 d7 6f fe ff       	call   c00002ae <is486>
c00192d7:	83 c4 10             	add    esp,0x10
c00192da:	85 c0                	test   eax,eax
c00192dc:	74 2b                	je     c0019309 <CPU::detectFeatures()+0x9b1>
c00192de:	52                   	push   edx
c00192df:	52                   	push   edx
c00192e0:	68 3a b5 02 c0       	push   0xc002b53a
c00192e5:	53                   	push   ebx
c00192e6:	e8 f7 a9 ff ff       	call   c0013ce2 <Device::setName(char const*)>
c00192eb:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00192f2:	0f 20 c0             	mov    eax,cr0
c00192f5:	83 e0 14             	and    eax,0x14
c00192f8:	83 c4 10             	add    esp,0x10
c00192fb:	83 f8 04             	cmp    eax,0x4
c00192fe:	75 1f                	jne    c001931f <CPU::detectFeatures()+0x9c7>
c0019300:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019307:	eb 32                	jmp    c001933b <CPU::detectFeatures()+0x9e3>
c0019309:	50                   	push   eax
c001930a:	50                   	push   eax
c001930b:	68 45 b5 02 c0       	push   0xc002b545
c0019310:	53                   	push   ebx
c0019311:	e8 cc a9 ff ff       	call   c0013ce2 <Device::setName(char const*)>
c0019316:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001931d:	eb d3                	jmp    c00192f2 <CPU::detectFeatures()+0x99a>
c001931f:	e8 65 6f fe ff       	call   c0000289 <hasLegacyFPU>
c0019324:	83 e0 01             	and    eax,0x1
c0019327:	8d 14 00             	lea    edx,[eax+eax*1]
c001932a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019330:	83 e0 fd             	and    eax,0xfffffffd
c0019333:	09 d0                	or     eax,edx
c0019335:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001933b:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019342:	83 c4 4c             	add    esp,0x4c
c0019345:	5b                   	pop    ebx
c0019346:	5e                   	pop    esi
c0019347:	5f                   	pop    edi
c0019348:	5d                   	pop    ebp
c0019349:	c3                   	ret    

c001934a <CPU::setupSMEP()>:
c001934a:	0f 20 e0             	mov    eax,cr4
c001934d:	0d 00 00 10 00       	or     eax,0x100000
c0019352:	0f 22 e0             	mov    cr4,eax
c0019355:	c3                   	ret    

c0019356 <CPU::setupUMIP()>:
c0019356:	0f 20 e0             	mov    eax,cr4
c0019359:	80 cc 08             	or     ah,0x8
c001935c:	0f 22 e0             	mov    cr4,eax
c001935f:	c3                   	ret    

c0019360 <CPU::setupTSC()>:
c0019360:	0f 20 e0             	mov    eax,cr4
c0019363:	83 c8 04             	or     eax,0x4
c0019366:	0f 22 e0             	mov    cr4,eax
c0019369:	c3                   	ret    

c001936a <CPU::setupLargePages()>:
c001936a:	0f 20 e0             	mov    eax,cr4
c001936d:	83 c8 10             	or     eax,0x10
c0019370:	0f 22 e0             	mov    cr4,eax
c0019373:	c3                   	ret    

c0019374 <CPU::setupPAT()>:
c0019374:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0019379:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019380:	74 2c                	je     c00193ae <CPU::setupPAT()+0x3a>
c0019382:	53                   	push   ebx
c0019383:	83 ec 10             	sub    esp,0x10
c0019386:	68 77 02 00 00       	push   0x277
c001938b:	50                   	push   eax
c001938c:	e8 af 57 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c0019391:	83 e2 f8             	and    edx,0xfffffff8
c0019394:	83 ca 01             	or     edx,0x1
c0019397:	52                   	push   edx
c0019398:	50                   	push   eax
c0019399:	68 77 02 00 00       	push   0x277
c001939e:	ff 35 68 d9 02 c0    	push   DWORD PTR ds:0xc002d968
c00193a4:	e8 c3 57 ff ff       	call   c000eb6c <Computer::wrmsr(unsigned int, unsigned long long)>
c00193a9:	83 c4 28             	add    esp,0x28
c00193ac:	5b                   	pop    ebx
c00193ad:	c3                   	ret    
c00193ae:	c3                   	ret    
c00193af:	90                   	nop

c00193b0 <CPU::setupMTRR()>:
c00193b0:	c3                   	ret    
c00193b1:	90                   	nop

c00193b2 <CPU::setupGlobalPages()>:
c00193b2:	0f 20 e0             	mov    eax,cr4
c00193b5:	0c 80                	or     al,0x80
c00193b7:	0f 22 e0             	mov    cr4,eax
c00193ba:	c3                   	ret    
c00193bb:	90                   	nop

c00193bc <CPU::allowUsermodeDataAccess()>:
c00193bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193c0:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193c7:	74 03                	je     c00193cc <CPU::allowUsermodeDataAccess()+0x10>
c00193c9:	0f 01 cb             	stac   
c00193cc:	c3                   	ret    
c00193cd:	90                   	nop

c00193ce <CPU::prohibitUsermodeDataAccess()>:
c00193ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00193d2:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00193d9:	74 03                	je     c00193de <CPU::prohibitUsermodeDataAccess()+0x10>
c00193db:	0f 01 ca             	clac   
c00193de:	c3                   	ret    
c00193df:	90                   	nop

c00193e0 <CPU::setupSMAP()>:
c00193e0:	0f 20 e0             	mov    eax,cr4
c00193e3:	0d 00 00 20 00       	or     eax,0x200000
c00193e8:	0f 22 e0             	mov    cr4,eax
c00193eb:	eb e1                	jmp    c00193ce <CPU::prohibitUsermodeDataAccess()>
c00193ed:	90                   	nop

c00193ee <CPU::setupFeatures()>:
c00193ee:	83 ec 0c             	sub    esp,0xc
c00193f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00193f5:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00193fc:	74 07                	je     c0019405 <CPU::setupFeatures()+0x17>
c00193fe:	52                   	push   edx
c00193ff:	e8 46 ff ff ff       	call   c001934a <CPU::setupSMEP()>
c0019404:	58                   	pop    eax
c0019405:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001940c:	74 07                	je     c0019415 <CPU::setupFeatures()+0x27>
c001940e:	52                   	push   edx
c001940f:	e8 cc ff ff ff       	call   c00193e0 <CPU::setupSMAP()>
c0019414:	58                   	pop    eax
c0019415:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001941c:	74 07                	je     c0019425 <CPU::setupFeatures()+0x37>
c001941e:	52                   	push   edx
c001941f:	e8 32 ff ff ff       	call   c0019356 <CPU::setupUMIP()>
c0019424:	58                   	pop    eax
c0019425:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001942c:	74 07                	je     c0019435 <CPU::setupFeatures()+0x47>
c001942e:	52                   	push   edx
c001942f:	e8 2c ff ff ff       	call   c0019360 <CPU::setupTSC()>
c0019434:	58                   	pop    eax
c0019435:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001943c:	74 07                	je     c0019445 <CPU::setupFeatures()+0x57>
c001943e:	52                   	push   edx
c001943f:	e8 26 ff ff ff       	call   c001936a <CPU::setupLargePages()>
c0019444:	59                   	pop    ecx
c0019445:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001944c:	74 07                	je     c0019455 <CPU::setupFeatures()+0x67>
c001944e:	52                   	push   edx
c001944f:	e8 5e ff ff ff       	call   c00193b2 <CPU::setupGlobalPages()>
c0019454:	58                   	pop    eax
c0019455:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001945c:	74 0c                	je     c001946a <CPU::setupFeatures()+0x7c>
c001945e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019462:	83 c4 0c             	add    esp,0xc
c0019465:	e9 0a ff ff ff       	jmp    c0019374 <CPU::setupPAT()>
c001946a:	83 c4 0c             	add    esp,0xc
c001946d:	c3                   	ret    

c001946e <CPU::open(int, int, void*)>:
c001946e:	57                   	push   edi
c001946f:	56                   	push   esi
c0019470:	53                   	push   ebx
c0019471:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019475:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019479:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001947f:	83 ec 0c             	sub    esp,0xc
c0019482:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019488:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001948e:	50                   	push   eax
c001948f:	e8 9a 59 ff ff       	call   c000ee2e <GDT::setup()>
c0019494:	83 c4 0c             	add    esp,0xc
c0019497:	6a 00                	push   0x0
c0019499:	68 ef be ad de       	push   0xdeadbeef
c001949e:	57                   	push   edi
c001949f:	e8 ea 76 ff ff       	call   c0010b8e <TSS::setup(unsigned long, unsigned long)>
c00194a4:	89 3c 24             	mov    DWORD PTR [esp],edi
c00194a7:	e8 c2 76 ff ff       	call   c0010b6e <TSS::flush()>
c00194ac:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00194b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00194b5:	e8 d8 5b ff ff       	call   c000f092 <IDT::setup()>
c00194ba:	b8 00 04 00 00       	mov    eax,0x400
c00194bf:	0f 23 f8             	mov    db7,eax
c00194c2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00194cc:	e8 a0 64 ff ff       	call   c000f971 <Phys::allocatePage()>
c00194d1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00194d7:	89 30                	mov    DWORD PTR [eax],esi
c00194d9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00194df:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00194e2:	58                   	pop    eax
c00194e3:	5a                   	pop    edx
c00194e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00194ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00194ee:	e8 ab 87 ff ff       	call   c0011c9e <VAS::setCPUSpecific(unsigned long)>
c00194f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00194f6:	e8 5d f4 ff ff       	call   c0018958 <CPU::detectFeatures()>
c00194fb:	e8 35 bc ff ff       	call   c0015135 <setupInterruptController()>
c0019500:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019506:	a1 80 d9 02 c0       	mov    eax,ds:0xc002d980
c001950b:	83 e0 10             	and    eax,0x10
c001950e:	83 f8 01             	cmp    eax,0x1
c0019511:	19 c0                	sbb    eax,eax
c0019513:	83 e0 46             	and    eax,0x46
c0019516:	83 c0 1e             	add    eax,0x1e
c0019519:	89 04 24             	mov    DWORD PTR [esp],eax
c001951c:	e8 02 d2 ff ff       	call   c0016723 <setupTimer(int)>
c0019521:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019527:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001952a:	e8 bf fe ff ff       	call   c00193ee <CPU::setupFeatures()>
c001952f:	83 c4 10             	add    esp,0x10
c0019532:	31 c0                	xor    eax,eax
c0019534:	5b                   	pop    ebx
c0019535:	5e                   	pop    esi
c0019536:	5f                   	pop    edi
c0019537:	c3                   	ret    

c0019538 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019538:	57                   	push   edi
c0019539:	56                   	push   esi
c001953a:	53                   	push   ebx
c001953b:	51                   	push   ecx
c001953c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019540:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019543:	0f 02 c0             	lar    eax,ax
c0019546:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019549:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001954d:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019550:	88 ca                	mov    dl,cl
c0019552:	c0 ea 06             	shr    dl,0x6
c0019555:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019559:	89 ca                	mov    edx,ecx
c001955b:	66 c1 ea 03          	shr    dx,0x3
c001955f:	83 e2 07             	and    edx,0x7
c0019562:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019567:	88 17                	mov    BYTE PTR [edi],dl
c0019569:	0f 84 a6 01 00 00    	je     c0019715 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c001956f:	83 e1 07             	and    ecx,0x7
c0019572:	80 f9 04             	cmp    cl,0x4
c0019575:	0f 84 98 00 00 00    	je     c0019613 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001957b:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019580:	0f 95 c0             	setne  al
c0019583:	80 f9 05             	cmp    cl,0x5
c0019586:	0f 95 c2             	setne  dl
c0019589:	08 c2                	or     dl,al
c001958b:	74 79                	je     c0019606 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001958d:	84 c9                	test   cl,cl
c001958f:	75 05                	jne    c0019596 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019591:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019594:	eb 3c                	jmp    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019596:	80 f9 01             	cmp    cl,0x1
c0019599:	75 05                	jne    c00195a0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001959b:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001959e:	eb 32                	jmp    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195a0:	80 f9 02             	cmp    cl,0x2
c00195a3:	75 05                	jne    c00195aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00195a5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00195a8:	eb 28                	jmp    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195aa:	31 c0                	xor    eax,eax
c00195ac:	80 f9 03             	cmp    cl,0x3
c00195af:	75 05                	jne    c00195b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00195b1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00195b4:	eb 1c                	jmp    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195b6:	80 f9 05             	cmp    cl,0x5
c00195b9:	75 05                	jne    c00195c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c00195bb:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00195be:	eb 12                	jmp    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195c0:	80 f9 06             	cmp    cl,0x6
c00195c3:	75 05                	jne    c00195ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c00195c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00195c8:	eb 08                	jmp    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195ca:	80 f9 07             	cmp    cl,0x7
c00195cd:	75 03                	jne    c00195d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00195cf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00195d2:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00195d7:	75 10                	jne    c00195e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00195d9:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00195dd:	b9 03 00 00 00       	mov    ecx,0x3
c00195e2:	01 d0                	add    eax,edx
c00195e4:	e9 37 01 00 00       	jmp    c0019720 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195e9:	b9 02 00 00 00       	mov    ecx,0x2
c00195ee:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00195f3:	0f 85 27 01 00 00    	jne    c0019720 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00195f9:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00195fc:	b9 06 00 00 00       	mov    ecx,0x6
c0019601:	e9 1a 01 00 00       	jmp    c0019720 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019606:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019609:	b9 06 00 00 00       	mov    ecx,0x6
c001960e:	e9 0f 01 00 00       	jmp    c0019722 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019613:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019616:	88 ca                	mov    dl,cl
c0019618:	c0 ea 06             	shr    dl,0x6
c001961b:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001961f:	89 ca                	mov    edx,ecx
c0019621:	66 c1 ea 03          	shr    dx,0x3
c0019625:	83 e2 07             	and    edx,0x7
c0019628:	80 e1 07             	and    cl,0x7
c001962b:	75 05                	jne    c0019632 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001962d:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019630:	eb 4c                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019632:	80 f9 01             	cmp    cl,0x1
c0019635:	75 05                	jne    c001963c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019637:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001963a:	eb 42                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001963c:	80 f9 02             	cmp    cl,0x2
c001963f:	75 05                	jne    c0019646 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019641:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019644:	eb 38                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019646:	80 f9 03             	cmp    cl,0x3
c0019649:	75 05                	jne    c0019650 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001964b:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001964e:	eb 2e                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019650:	80 f9 04             	cmp    cl,0x4
c0019653:	75 12                	jne    c0019667 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019655:	f6 c4 60             	test   ah,0x60
c0019658:	75 08                	jne    c0019662 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001965a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001965d:	8d 78 14             	lea    edi,[eax+0x14]
c0019660:	eb 1c                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019662:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019665:	eb 17                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019667:	80 f9 05             	cmp    cl,0x5
c001966a:	75 05                	jne    c0019671 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001966c:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001966f:	eb 0d                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019671:	80 f9 06             	cmp    cl,0x6
c0019674:	75 05                	jne    c001967b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019676:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019679:	eb 03                	jmp    c001967e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001967b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001967e:	84 d2                	test   dl,dl
c0019680:	75 05                	jne    c0019687 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019682:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019685:	eb 3c                	jmp    c00196c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019687:	80 fa 01             	cmp    dl,0x1
c001968a:	75 05                	jne    c0019691 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001968c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001968f:	eb 32                	jmp    c00196c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019691:	80 fa 02             	cmp    dl,0x2
c0019694:	75 05                	jne    c001969b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019696:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019699:	eb 28                	jmp    c00196c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001969b:	80 fa 03             	cmp    dl,0x3
c001969e:	75 05                	jne    c00196a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00196a0:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00196a3:	eb 1e                	jmp    c00196c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196a5:	31 c0                	xor    eax,eax
c00196a7:	80 fa 04             	cmp    dl,0x4
c00196aa:	74 17                	je     c00196c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196ac:	80 fa 05             	cmp    dl,0x5
c00196af:	75 05                	jne    c00196b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c00196b1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00196b4:	eb 0d                	jmp    c00196c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196b6:	80 fa 06             	cmp    dl,0x6
c00196b9:	75 05                	jne    c00196c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00196bb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00196be:	eb 03                	jmp    c00196c3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c00196c0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00196c3:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196c8:	0f 94 c2             	sete   dl
c00196cb:	80 f9 05             	cmp    cl,0x5
c00196ce:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00196d2:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00196d7:	d3 e0                	shl    eax,cl
c00196d9:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00196dd:	74 0a                	je     c00196e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00196df:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00196e2:	b9 07 00 00 00       	mov    ecx,0x7
c00196e7:	eb 37                	jmp    c0019720 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00196e9:	01 f8                	add    eax,edi
c00196eb:	b9 03 00 00 00       	mov    ecx,0x3
c00196f0:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00196f5:	74 2b                	je     c0019722 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00196f7:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00196fc:	75 0d                	jne    c001970b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00196fe:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019702:	01 c8                	add    eax,ecx
c0019704:	b9 04 00 00 00       	mov    ecx,0x4
c0019709:	eb 17                	jmp    c0019722 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001970b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001970e:	b9 07 00 00 00       	mov    ecx,0x7
c0019713:	eb 0d                	jmp    c0019722 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019715:	b9 02 00 00 00       	mov    ecx,0x2
c001971a:	b2 01                	mov    dl,0x1
c001971c:	31 c0                	xor    eax,eax
c001971e:	eb 02                	jmp    c0019722 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019720:	31 d2                	xor    edx,edx
c0019722:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019726:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019728:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001972c:	88 11                	mov    BYTE PTR [ecx],dl
c001972e:	5a                   	pop    edx
c001972f:	5b                   	pop    ebx
c0019730:	5e                   	pop    esi
c0019731:	5f                   	pop    edi
c0019732:	c3                   	ret    

c0019733 <Krnl::smpEntry()>:
c0019733:	eb fe                	jmp    c0019733 <Krnl::smpEntry()>

c0019735 <Krnl::startCPU(int)>:
c0019735:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001973a:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019741:	0f 84 36 01 00 00    	je     c001987d <Krnl::startCPU(int)+0x148>
c0019747:	53                   	push   ebx
c0019748:	83 ec 10             	sub    esp,0x10
c001974b:	fa                   	cli    
c001974c:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c0019752:	6a 1b                	push   0x1b
c0019754:	ff 35 68 d9 02 c0    	push   DWORD PTR ds:0xc002d968
c001975a:	e8 e1 53 ff ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c001975f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019764:	89 c3                	mov    ebx,eax
c0019766:	58                   	pop    eax
c0019767:	5a                   	pop    edx
c0019768:	53                   	push   ebx
c0019769:	68 7c b5 02 c0       	push   0xc002b57c
c001976e:	e8 40 8f ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0019773:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001977d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019781:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001978b:	c1 e0 18             	shl    eax,0x18
c001978e:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019794:	83 c4 10             	add    esp,0x10
c0019797:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001979d:	09 c2                	or     edx,eax
c001979f:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c00197a5:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c00197ab:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197b1:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197b7:	80 cd c5             	or     ch,0xc5
c00197ba:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197c0:	f3 90                	pause  
c00197c2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197c4:	0f ba e1 0c          	bt     ecx,0xc
c00197c8:	72 f6                	jb     c00197c0 <Krnl::startCPU(int)+0x8b>
c00197ca:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00197d0:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00197d6:	09 c1                	or     ecx,eax
c00197d8:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c00197de:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00197e4:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c00197ea:	80 cd 85             	or     ch,0x85
c00197ed:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00197f3:	f3 90                	pause  
c00197f5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00197f7:	0f ba e1 0c          	bt     ecx,0xc
c00197fb:	72 f6                	jb     c00197f3 <Krnl::startCPU(int)+0xbe>
c00197fd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019807:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001980d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019813:	09 c1                	or     ecx,eax
c0019815:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001981b:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019821:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019827:	81 c9 02 06 00 00    	or     ecx,0x602
c001982d:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019833:	f3 90                	pause  
c0019835:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019837:	0f ba e1 0c          	bt     ecx,0xc
c001983b:	72 f6                	jb     c0019833 <Krnl::startCPU(int)+0xfe>
c001983d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019847:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001984d:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019853:	09 c8                	or     eax,ecx
c0019855:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001985b:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019861:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019866:	0d 02 06 00 00       	or     eax,0x602
c001986b:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019871:	f3 90                	pause  
c0019873:	8b 02                	mov    eax,DWORD PTR [edx]
c0019875:	0f ba e0 0c          	bt     eax,0xc
c0019879:	72 f6                	jb     c0019871 <Krnl::startCPU(int)+0x13c>
c001987b:	eb fe                	jmp    c001987b <Krnl::startCPU(int)+0x146>
c001987d:	c3                   	ret    

c001987e <Krnl::startCPUs()>:
c001987e:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0019883:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019889:	88 c2                	mov    dl,al
c001988b:	83 e2 0a             	and    edx,0xa
c001988e:	80 fa 0a             	cmp    dl,0xa
c0019891:	75 09                	jne    c001989c <Krnl::startCPUs()+0x1e>
c0019893:	a8 01                	test   al,0x1
c0019895:	74 05                	je     c001989c <Krnl::startCPUs()+0x1e>
c0019897:	e9 ff 68 fe ff       	jmp    c000019b <prepareTramp>
c001989c:	c3                   	ret    
c001989d:	90                   	nop

c001989e <EnvVarContainer::getEnv(char const*)>:
c001989e:	57                   	push   edi
c001989f:	56                   	push   esi
c00198a0:	53                   	push   ebx
c00198a1:	31 db                	xor    ebx,ebx
c00198a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00198a7:	39 1e                	cmp    DWORD PTR [esi],ebx
c00198a9:	7e 2b                	jle    c00198d6 <EnvVarContainer::getEnv(char const*)+0x38>
c00198ab:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c00198b2:	50                   	push   eax
c00198b3:	50                   	push   eax
c00198b4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198b7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c00198ba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00198be:	e8 d5 6f fe ff       	call   c0000898 <strcmp>
c00198c3:	83 c4 10             	add    esp,0x10
c00198c6:	85 c0                	test   eax,eax
c00198c8:	75 09                	jne    c00198d3 <EnvVarContainer::getEnv(char const*)+0x35>
c00198ca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00198cd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c00198d1:	eb 05                	jmp    c00198d8 <EnvVarContainer::getEnv(char const*)+0x3a>
c00198d3:	43                   	inc    ebx
c00198d4:	eb d1                	jmp    c00198a7 <EnvVarContainer::getEnv(char const*)+0x9>
c00198d6:	31 c0                	xor    eax,eax
c00198d8:	5b                   	pop    ebx
c00198d9:	5e                   	pop    esi
c00198da:	5f                   	pop    edi
c00198db:	c3                   	ret    

c00198dc <EnvVarContainer::setEnv(char const*, char const*)>:
c00198dc:	55                   	push   ebp
c00198dd:	57                   	push   edi
c00198de:	56                   	push   esi
c00198df:	53                   	push   ebx
c00198e0:	83 ec 28             	sub    esp,0x28
c00198e3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00198e7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00198eb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c00198ef:	56                   	push   esi
c00198f0:	e8 77 6e fe ff       	call   c000076c <strlen>
c00198f5:	40                   	inc    eax
c00198f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00198f9:	e8 9b 5c ff ff       	call   c000f599 <malloc>
c00198fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019901:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019905:	e8 62 6e fe ff       	call   c000076c <strlen>
c001990a:	40                   	inc    eax
c001990b:	89 04 24             	mov    DWORD PTR [esp],eax
c001990e:	e8 86 5c ff ff       	call   c000f599 <malloc>
c0019913:	89 34 24             	mov    DWORD PTR [esp],esi
c0019916:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001991a:	e8 4d 6e fe ff       	call   c000076c <strlen>
c001991f:	83 c4 0c             	add    esp,0xc
c0019922:	40                   	inc    eax
c0019923:	50                   	push   eax
c0019924:	6a 00                	push   0x0
c0019926:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001992a:	e8 21 6e fe ff       	call   c0000750 <memset>
c001992f:	89 34 24             	mov    DWORD PTR [esp],esi
c0019932:	e8 35 6e fe ff       	call   c000076c <strlen>
c0019937:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001993b:	8d 48 01             	lea    ecx,[eax+0x1]
c001993e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019940:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019943:	89 de                	mov    esi,ebx
c0019945:	e8 22 6e fe ff       	call   c000076c <strlen>
c001994a:	83 c4 0c             	add    esp,0xc
c001994d:	40                   	inc    eax
c001994e:	50                   	push   eax
c001994f:	6a 00                	push   0x0
c0019951:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019955:	e8 f6 6d fe ff       	call   c0000750 <memset>
c001995a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001995d:	e8 0a 6e fe ff       	call   c000076c <strlen>
c0019962:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019966:	8d 48 01             	lea    ecx,[eax+0x1]
c0019969:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001996b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001996e:	40                   	inc    eax
c001996f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019972:	c1 e0 03             	shl    eax,0x3
c0019975:	5a                   	pop    edx
c0019976:	59                   	pop    ecx
c0019977:	50                   	push   eax
c0019978:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001997b:	e8 05 5c ff ff       	call   c000f585 <realloc>
c0019980:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019984:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019987:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001998a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001998e:	b9 08 00 00 00       	mov    ecx,0x8
c0019993:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019995:	83 c4 2c             	add    esp,0x2c
c0019998:	5b                   	pop    ebx
c0019999:	5e                   	pop    esi
c001999a:	5f                   	pop    edi
c001999b:	5d                   	pop    ebp
c001999c:	c3                   	ret    
c001999d:	90                   	nop

c001999e <EnvVarContainer::deleteEnv(char const*)>:
c001999e:	c3                   	ret    
c001999f:	90                   	nop

c00199a0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c00199a0:	55                   	push   ebp
c00199a1:	57                   	push   edi
c00199a2:	56                   	push   esi
c00199a3:	53                   	push   ebx
c00199a4:	81 ec 38 01 00 00    	sub    esp,0x138
c00199aa:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00199b1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00199b8:	68 14 01 00 00       	push   0x114
c00199bd:	e8 d7 5b ff ff       	call   c000f599 <malloc>
c00199c2:	83 c4 0c             	add    esp,0xc
c00199c5:	89 c3                	mov    ebx,eax
c00199c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00199ca:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00199d1:	50                   	push   eax
c00199d2:	e8 3b 92 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c00199d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00199da:	e8 05 95 ff ff       	call   c0012ee4 <File::exists()>
c00199df:	83 c4 10             	add    esp,0x10
c00199e2:	84 c0                	test   al,al
c00199e4:	75 31                	jne    c0019a17 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c00199e6:	50                   	push   eax
c00199e7:	50                   	push   eax
c00199e8:	6a 12                	push   0x12
c00199ea:	53                   	push   ebx
c00199eb:	e8 86 92 ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c00199f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00199f2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00199f5:	89 34 24             	mov    DWORD PTR [esp],esi
c00199f8:	e8 6f 6d fe ff       	call   c000076c <strlen>
c00199fd:	5a                   	pop    edx
c00199fe:	31 d2                	xor    edx,edx
c0019a00:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a04:	51                   	push   ecx
c0019a05:	56                   	push   esi
c0019a06:	52                   	push   edx
c0019a07:	50                   	push   eax
c0019a08:	53                   	push   ebx
c0019a09:	ff d7                	call   edi
c0019a0b:	83 c4 14             	add    esp,0x14
c0019a0e:	53                   	push   ebx
c0019a0f:	e8 c0 92 ff ff       	call   c0012cd4 <File::close()>
c0019a14:	83 c4 10             	add    esp,0x10
c0019a17:	56                   	push   esi
c0019a18:	31 f6                	xor    esi,esi
c0019a1a:	68 00 01 00 00       	push   0x100
c0019a1f:	6a 00                	push   0x0
c0019a21:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019a25:	50                   	push   eax
c0019a26:	e8 25 6d fe ff       	call   c0000750 <memset>
c0019a2b:	5f                   	pop    edi
c0019a2c:	58                   	pop    eax
c0019a2d:	6a 01                	push   0x1
c0019a2f:	53                   	push   ebx
c0019a30:	e8 41 92 ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c0019a35:	83 c4 10             	add    esp,0x10
c0019a38:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a40:	83 ec 0c             	sub    esp,0xc
c0019a43:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019a45:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019a49:	51                   	push   ecx
c0019a4a:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019a4e:	52                   	push   edx
c0019a4f:	6a 00                	push   0x0
c0019a51:	6a 01                	push   0x1
c0019a53:	53                   	push   ebx
c0019a54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019a57:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019a5b:	83 c4 20             	add    esp,0x20
c0019a5e:	3c 0d                	cmp    al,0xd
c0019a60:	0f 84 09 01 00 00    	je     c0019b6f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019a66:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019a6b:	0f 84 ef 00 00 00    	je     c0019b60 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a71:	3c 0a                	cmp    al,0xa
c0019a73:	74 13                	je     c0019a88 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a7a:	74 0c                	je     c0019a88 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0019a7c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019a82:	0f 8e d8 00 00 00    	jle    c0019b60 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0019a88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a8c:	83 ec 0c             	sub    esp,0xc
c0019a8f:	8d 78 01             	lea    edi,[eax+0x1]
c0019a92:	57                   	push   edi
c0019a93:	e8 01 5b ff ff       	call   c000f599 <malloc>
c0019a98:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019aa0:	8d 56 04             	lea    edx,[esi+0x4]
c0019aa3:	89 14 24             	mov    DWORD PTR [esp],edx
c0019aa6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019aaa:	e8 ea 5a ff ff       	call   c000f599 <malloc>
c0019aaf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019ab3:	83 c4 0c             	add    esp,0xc
c0019ab6:	57                   	push   edi
c0019ab7:	6a 00                	push   0x0
c0019ab9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019abd:	e8 8e 6c fe ff       	call   c0000750 <memset>
c0019ac2:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ac6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019aca:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019ace:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ad0:	83 c4 0c             	add    esp,0xc
c0019ad3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019ad7:	52                   	push   edx
c0019ad8:	6a 00                	push   0x0
c0019ada:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019ade:	e8 6d 6c fe ff       	call   c0000750 <memset>
c0019ae3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019ae7:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019aeb:	89 34 24             	mov    DWORD PTR [esp],esi
c0019aee:	e8 79 6c fe ff       	call   c000076c <strlen>
c0019af3:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019af7:	89 c1                	mov    ecx,eax
c0019af9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019afb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019afe:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0019b01:	40                   	inc    eax
c0019b02:	83 c4 10             	add    esp,0x10
c0019b05:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019b08:	85 d2                	test   edx,edx
c0019b0a:	75 0c                	jne    c0019b18 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0019b0c:	83 ec 0c             	sub    esp,0xc
c0019b0f:	6a 08                	push   0x8
c0019b11:	e8 83 5a ff ff       	call   c000f599 <malloc>
c0019b16:	eb 0c                	jmp    c0019b24 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c0019b18:	c1 e0 03             	shl    eax,0x3
c0019b1b:	51                   	push   ecx
c0019b1c:	51                   	push   ecx
c0019b1d:	50                   	push   eax
c0019b1e:	52                   	push   edx
c0019b1f:	e8 61 5a ff ff       	call   c000f585 <realloc>
c0019b24:	83 c4 10             	add    esp,0x10
c0019b27:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019b2a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019b2d:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0019b30:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019b34:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019b38:	b9 08 00 00 00       	mov    ecx,0x8
c0019b3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019b3f:	31 f6                	xor    esi,esi
c0019b41:	50                   	push   eax
c0019b42:	68 00 01 00 00       	push   0x100
c0019b47:	6a 00                	push   0x0
c0019b49:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019b4d:	50                   	push   eax
c0019b4e:	e8 fd 6b fe ff       	call   c0000750 <memset>
c0019b53:	83 c4 10             	add    esp,0x10
c0019b56:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019b5e:	eb 0f                	jmp    c0019b6f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b60:	3c 3d                	cmp    al,0x3d
c0019b62:	74 07                	je     c0019b6b <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c0019b64:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019b68:	46                   	inc    esi
c0019b69:	eb 04                	jmp    c0019b6f <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019b6b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019b6f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019b74:	0f 85 c6 fe ff ff    	jne    c0019a40 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0019b7a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b80:	5b                   	pop    ebx
c0019b81:	5e                   	pop    esi
c0019b82:	5f                   	pop    edi
c0019b83:	5d                   	pop    ebp
c0019b84:	c3                   	ret    
c0019b85:	90                   	nop

c0019b86 <EnvVarContainer::__loadSystem()>:
c0019b86:	83 ec 10             	sub    esp,0x10
c0019b89:	68 a0 ce 02 c0       	push   0xc002cea0
c0019b8e:	68 8d b5 02 c0       	push   0xc002b58d
c0019b93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019b97:	e8 04 fe ff ff       	call   c00199a0 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019b9c:	83 c4 1c             	add    esp,0x1c
c0019b9f:	c3                   	ret    

c0019ba0 <EnvVarContainer::__loadUser()>:
c0019ba0:	c3                   	ret    
c0019ba1:	90                   	nop

c0019ba2 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019ba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ba6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019bac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bb0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019bb4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019bb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bbb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019bc2:	90                   	nop
c0019bc3:	c3                   	ret    

c0019bc4 <EnvVarContainer::~EnvVarContainer()>:
c0019bc4:	83 ec 0c             	sub    esp,0xc
c0019bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bcb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019bce:	85 c0                	test   eax,eax
c0019bd0:	74 1d                	je     c0019bef <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0019bd8:	85 c0                	test   eax,eax
c0019bda:	74 13                	je     c0019bef <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019be0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019be3:	83 ec 0c             	sub    esp,0xc
c0019be6:	50                   	push   eax
c0019be7:	e8 bd 59 ff ff       	call   c000f5a9 <free>
c0019bec:	83 c4 10             	add    esp,0x10
c0019bef:	90                   	nop
c0019bf0:	83 c4 0c             	add    esp,0xc
c0019bf3:	c3                   	ret    

c0019bf4 <Krnl::getEnv(Process*, char const*)>:
c0019bf4:	53                   	push   ebx
c0019bf5:	83 ec 08             	sub    esp,0x8
c0019bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019bfc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019c00:	39 05 b0 0e 03 c0    	cmp    DWORD PTR ds:0xc0030eb0,eax
c0019c06:	74 04                	je     c0019c0c <Krnl::getEnv(Process*, char const*)+0x18>
c0019c08:	85 c0                	test   eax,eax
c0019c0a:	75 0b                	jne    c0019c17 <Krnl::getEnv(Process*, char const*)+0x23>
c0019c0c:	a1 94 04 03 c0       	mov    eax,ds:0xc0030494
c0019c11:	85 c0                	test   eax,eax
c0019c13:	75 19                	jne    c0019c2e <Krnl::getEnv(Process*, char const*)+0x3a>
c0019c15:	eb 27                	jmp    c0019c3e <Krnl::getEnv(Process*, char const*)+0x4a>
c0019c17:	52                   	push   edx
c0019c18:	52                   	push   edx
c0019c19:	53                   	push   ebx
c0019c1a:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019c20:	e8 79 fc ff ff       	call   c001989e <EnvVarContainer::getEnv(char const*)>
c0019c25:	83 c4 10             	add    esp,0x10
c0019c28:	85 c0                	test   eax,eax
c0019c2a:	75 28                	jne    c0019c54 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c2c:	eb de                	jmp    c0019c0c <Krnl::getEnv(Process*, char const*)+0x18>
c0019c2e:	52                   	push   edx
c0019c2f:	52                   	push   edx
c0019c30:	53                   	push   ebx
c0019c31:	50                   	push   eax
c0019c32:	e8 67 fc ff ff       	call   c001989e <EnvVarContainer::getEnv(char const*)>
c0019c37:	83 c4 10             	add    esp,0x10
c0019c3a:	85 c0                	test   eax,eax
c0019c3c:	75 16                	jne    c0019c54 <Krnl::getEnv(Process*, char const*)+0x60>
c0019c3e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019c42:	a1 98 04 03 c0       	mov    eax,ds:0xc0030498
c0019c47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019c4b:	83 c4 08             	add    esp,0x8
c0019c4e:	5b                   	pop    ebx
c0019c4f:	e9 4a fc ff ff       	jmp    c001989e <EnvVarContainer::getEnv(char const*)>
c0019c54:	83 c4 08             	add    esp,0x8
c0019c57:	5b                   	pop    ebx
c0019c58:	c3                   	ret    

c0019c59 <Krnl::setEnvSystem(char const*, char const*)>:
c0019c59:	83 ec 10             	sub    esp,0x10
c0019c5c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c64:	ff 35 98 04 03 c0    	push   DWORD PTR ds:0xc0030498
c0019c6a:	e8 6d fc ff ff       	call   c00198dc <EnvVarContainer::setEnv(char const*, char const*)>
c0019c6f:	83 c4 1c             	add    esp,0x1c
c0019c72:	c3                   	ret    

c0019c73 <Krnl::setEnvUser(char const*, char const*)>:
c0019c73:	a1 94 04 03 c0       	mov    eax,ds:0xc0030494
c0019c78:	85 c0                	test   eax,eax
c0019c7a:	74 15                	je     c0019c91 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019c7c:	83 ec 10             	sub    esp,0x10
c0019c7f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019c87:	50                   	push   eax
c0019c88:	e8 4f fc ff ff       	call   c00198dc <EnvVarContainer::setEnv(char const*, char const*)>
c0019c8d:	83 c4 1c             	add    esp,0x1c
c0019c90:	c3                   	ret    
c0019c91:	c3                   	ret    

c0019c92 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c96:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019c9c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ca0:	e9 37 fc ff ff       	jmp    c00198dc <EnvVarContainer::setEnv(char const*, char const*)>

c0019ca5 <Krnl::deleteEnvSystem(char const*)>:
c0019ca5:	c3                   	ret    

c0019ca6 <Krnl::deleteEnvUser(char const*)>:
c0019ca6:	c3                   	ret    

c0019ca7 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0019ca7:	c3                   	ret    

c0019ca8 <Krnl::newProcessEnv(Process*)>:
c0019ca8:	83 ec 28             	sub    esp,0x28
c0019cab:	6a 0c                	push   0xc
c0019cad:	e8 e7 58 ff ff       	call   c000f599 <malloc>
c0019cb2:	5a                   	pop    edx
c0019cb3:	59                   	pop    ecx
c0019cb4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019cb8:	50                   	push   eax
c0019cb9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019cbd:	e8 e0 fe ff ff       	call   c0019ba2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019cc6:	83 c4 2c             	add    esp,0x2c
c0019cc9:	c3                   	ret    

c0019cca <Krnl::copyProcessEnv(Process*, Process*)>:
c0019cca:	57                   	push   edi
c0019ccb:	56                   	push   esi
c0019ccc:	53                   	push   ebx
c0019ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019cd1:	83 ec 0c             	sub    esp,0xc
c0019cd4:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c0019cda:	6a 0c                	push   0xc
c0019cdc:	e8 b8 58 ff ff       	call   c000f599 <malloc>
c0019ce1:	89 c3                	mov    ebx,eax
c0019ce3:	58                   	pop    eax
c0019ce4:	5a                   	pop    edx
c0019ce5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ce9:	53                   	push   ebx
c0019cea:	e8 b3 fe ff ff       	call   c0019ba2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019cef:	8b 07                	mov    eax,DWORD PTR [edi]
c0019cf1:	89 03                	mov    DWORD PTR [ebx],eax
c0019cf3:	c1 e0 03             	shl    eax,0x3
c0019cf6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cf9:	e8 9b 58 ff ff       	call   c000f599 <malloc>
c0019cfe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d01:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0019d03:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0019d06:	c1 e1 03             	shl    ecx,0x3
c0019d09:	89 c7                	mov    edi,eax
c0019d0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d0d:	83 c4 10             	add    esp,0x10
c0019d10:	89 d8                	mov    eax,ebx
c0019d12:	5b                   	pop    ebx
c0019d13:	5e                   	pop    esi
c0019d14:	5f                   	pop    edi
c0019d15:	c3                   	ret    

c0019d16 <Krnl::loadSystemEnv()>:
c0019d16:	53                   	push   ebx
c0019d17:	83 ec 14             	sub    esp,0x14
c0019d1a:	6a 0c                	push   0xc
c0019d1c:	e8 78 58 ff ff       	call   c000f599 <malloc>
c0019d21:	89 c3                	mov    ebx,eax
c0019d23:	58                   	pop    eax
c0019d24:	5a                   	pop    edx
c0019d25:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c0019d2b:	53                   	push   ebx
c0019d2c:	e8 71 fe ff ff       	call   c0019ba2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d31:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d34:	89 1d 98 04 03 c0    	mov    DWORD PTR ds:0xc0030498,ebx
c0019d3a:	e8 47 fe ff ff       	call   c0019b86 <EnvVarContainer::__loadSystem()>
c0019d3f:	83 c4 18             	add    esp,0x18
c0019d42:	5b                   	pop    ebx
c0019d43:	c3                   	ret    

c0019d44 <Krnl::loadUserEnv()>:
c0019d44:	53                   	push   ebx
c0019d45:	83 ec 14             	sub    esp,0x14
c0019d48:	6a 0c                	push   0xc
c0019d4a:	e8 4a 58 ff ff       	call   c000f599 <malloc>
c0019d4f:	89 c3                	mov    ebx,eax
c0019d51:	58                   	pop    eax
c0019d52:	5a                   	pop    edx
c0019d53:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c0019d59:	53                   	push   ebx
c0019d5a:	e8 43 fe ff ff       	call   c0019ba2 <EnvVarContainer::EnvVarContainer(Process*)>
c0019d5f:	89 1d 94 04 03 c0    	mov    DWORD PTR ds:0xc0030494,ebx
c0019d65:	83 c4 18             	add    esp,0x18
c0019d68:	5b                   	pop    ebx
c0019d69:	c3                   	ret    

c0019d6a <Krnl::flushEnv()>:
c0019d6a:	c3                   	ret    

c0019d6b <Krnl::getProcessTotalEnvCount(Process*)>:
c0019d6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d6f:	8b 15 94 04 03 c0    	mov    edx,DWORD PTR ds:0xc0030494
c0019d75:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019d7b:	a1 98 04 03 c0       	mov    eax,ds:0xc0030498
c0019d80:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d82:	03 01                	add    eax,DWORD PTR [ecx]
c0019d84:	85 d2                	test   edx,edx
c0019d86:	74 02                	je     c0019d8a <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019d88:	03 02                	add    eax,DWORD PTR [edx]
c0019d8a:	c3                   	ret    

c0019d8b <Krnl::getProcessEnvPair(Process*, int)>:
c0019d8b:	57                   	push   edi
c0019d8c:	56                   	push   esi
c0019d8d:	8b 35 94 04 03 c0    	mov    esi,DWORD PTR ds:0xc0030494
c0019d93:	53                   	push   ebx
c0019d94:	85 f6                	test   esi,esi
c0019d96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019d9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019d9e:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019da4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019da8:	8b 01                	mov    eax,DWORD PTR [ecx]
c0019daa:	75 16                	jne    c0019dc2 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0019dac:	39 c2                	cmp    edx,eax
c0019dae:	7c 16                	jl     c0019dc6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019db0:	8b 0d 98 04 03 c0    	mov    ecx,DWORD PTR ds:0xc0030498
c0019db6:	8b 31                	mov    esi,DWORD PTR [ecx]
c0019db8:	01 c6                	add    esi,eax
c0019dba:	39 d6                	cmp    esi,edx
c0019dbc:	7e 3c                	jle    c0019dfa <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019dbe:	29 c2                	sub    edx,eax
c0019dc0:	eb 04                	jmp    c0019dc6 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0019dc2:	39 c2                	cmp    edx,eax
c0019dc4:	7d 05                	jge    c0019dcb <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0019dc6:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0019dc9:	eb 20                	jmp    c0019deb <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0019dcb:	8b 3e                	mov    edi,DWORD PTR [esi]
c0019dcd:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0019dd0:	39 d1                	cmp    ecx,edx
c0019dd2:	7e 04                	jle    c0019dd8 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0019dd4:	29 c2                	sub    edx,eax
c0019dd6:	eb 10                	jmp    c0019de8 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0019dd8:	8b 35 98 04 03 c0    	mov    esi,DWORD PTR ds:0xc0030498
c0019dde:	03 0e                	add    ecx,DWORD PTR [esi]
c0019de0:	39 d1                	cmp    ecx,edx
c0019de2:	7e 16                	jle    c0019dfa <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0019de4:	29 c2                	sub    edx,eax
c0019de6:	29 fa                	sub    edx,edi
c0019de8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019deb:	8d 14 d0             	lea    edx,[eax+edx*8]
c0019dee:	8b 02                	mov    eax,DWORD PTR [edx]
c0019df0:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0019df3:	89 03                	mov    DWORD PTR [ebx],eax
c0019df5:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0019df8:	eb 1d                	jmp    c0019e17 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0019dfa:	83 ec 0c             	sub    esp,0xc
c0019dfd:	68 af b5 02 c0       	push   0xc002b5af
c0019e02:	e8 18 00 00 00       	call   c0019e1f <Krnl::panic(char const*)>
c0019e07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0019e0d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019e14:	83 c4 10             	add    esp,0x10
c0019e17:	89 d8                	mov    eax,ebx
c0019e19:	5b                   	pop    ebx
c0019e1a:	5e                   	pop    esi
c0019e1b:	5f                   	pop    edi
c0019e1c:	c2 04 00             	ret    0x4

c0019e1f <Krnl::panic(char const*)>:
c0019e1f:	55                   	push   ebp
c0019e20:	89 e5                	mov    ebp,esp
c0019e22:	53                   	push   ebx
c0019e23:	83 ec 10             	sub    esp,0x10
c0019e26:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0019e29:	fa                   	cli    
c0019e2a:	c6 05 a4 04 03 c0 01 	mov    BYTE PTR ds:0xc00304a4,0x1
c0019e31:	53                   	push   ebx
c0019e32:	e8 bc 57 ff ff       	call   c000f5f3 <Krnl::setBootMessage(char const*)>
c0019e37:	58                   	pop    eax
c0019e38:	c6 05 a0 c8 02 c0 00 	mov    BYTE PTR ds:0xc002c8a0,0x0
c0019e3f:	5a                   	pop    edx
c0019e40:	53                   	push   ebx
c0019e41:	68 c9 b5 02 c0       	push   0xc002b5c9
c0019e46:	e8 68 88 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0019e4b:	59                   	pop    ecx
c0019e4c:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019e51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e57:	e8 e1 64 ff ff       	call   c001033d <setActiveTerminal(VgaText*)>
c0019e5c:	83 c4 0c             	add    esp,0xc
c0019e5f:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019e64:	6a 01                	push   0x1
c0019e66:	6a 0f                	push   0xf
c0019e68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e6e:	e8 29 63 ff ff       	call   c001019c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019e73:	58                   	pop    eax
c0019e74:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019e79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e7f:	e8 3a 68 ff ff       	call   c00106be <VgaText::clearScreen()>
c0019e84:	58                   	pop    eax
c0019e85:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019e8a:	5a                   	pop    edx
c0019e8b:	68 e2 b5 02 c0       	push   0xc002b5e2
c0019e90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019e96:	e8 af 69 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019e9b:	59                   	pop    ecx
c0019e9c:	58                   	pop    eax
c0019e9d:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019ea2:	68 88 b6 02 c0       	push   0xc002b688
c0019ea7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ead:	e8 98 69 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019eb2:	58                   	pop    eax
c0019eb3:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019eb8:	5a                   	pop    edx
c0019eb9:	68 fe b5 02 c0       	push   0xc002b5fe
c0019ebe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ec4:	e8 81 69 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019ec9:	59                   	pop    ecx
c0019eca:	58                   	pop    eax
c0019ecb:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019ed0:	53                   	push   ebx
c0019ed1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ed7:	e8 6e 69 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019edc:	58                   	pop    eax
c0019edd:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019ee2:	5a                   	pop    edx
c0019ee3:	68 1e b6 02 c0       	push   0xc002b61e
c0019ee8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019eee:	e8 57 69 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019ef3:	a1 a0 04 03 c0       	mov    eax,ds:0xc00304a0
c0019ef8:	83 c4 10             	add    esp,0x10
c0019efb:	85 c0                	test   eax,eax
c0019efd:	74 02                	je     c0019f01 <Krnl::panic(char const*)+0xe2>
c0019eff:	ff d0                	call   eax
c0019f01:	83 ec 0c             	sub    esp,0xc
c0019f04:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019f07:	e8 8c 30 00 00       	call   c001cf98 <Thr::getDriverNameFromAddress(unsigned long)>
c0019f0c:	83 c4 10             	add    esp,0x10
c0019f0f:	89 c3                	mov    ebx,eax
c0019f11:	85 c0                	test   eax,eax
c0019f13:	0f 84 4e 02 00 00    	je     c001a167 <Krnl::panic(char const*)+0x348>
c0019f19:	83 ec 08             	sub    esp,0x8
c0019f1c:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019f21:	68 c4 b6 02 c0       	push   0xc002b6c4
c0019f26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f2c:	e8 19 69 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019f31:	58                   	pop    eax
c0019f32:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019f37:	5a                   	pop    edx
c0019f38:	68 fe b5 02 c0       	push   0xc002b5fe
c0019f3d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f43:	e8 02 69 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019f48:	59                   	pop    ecx
c0019f49:	58                   	pop    eax
c0019f4a:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019f4f:	53                   	push   ebx
c0019f50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f56:	e8 ef 68 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019f5b:	83 c4 10             	add    esp,0x10
c0019f5e:	83 ec 08             	sub    esp,0x8
c0019f61:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019f66:	68 1d b6 02 c0       	push   0xc002b61d
c0019f6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f71:	e8 d4 68 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019f76:	58                   	pop    eax
c0019f77:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019f7c:	5a                   	pop    edx
c0019f7d:	68 1c b7 02 c0       	push   0xc002b71c
c0019f82:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f88:	e8 bd 68 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019f8d:	59                   	pop    ecx
c0019f8e:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019f93:	5b                   	pop    ebx
c0019f94:	68 5c b7 02 c0       	push   0xc002b75c
c0019f99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019f9f:	e8 a6 68 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019fa4:	58                   	pop    eax
c0019fa5:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019faa:	5a                   	pop    edx
c0019fab:	68 09 b6 02 c0       	push   0xc002b609
c0019fb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019fb6:	e8 8f 68 ff ff       	call   c001084a <VgaText::puts(char const*)>
c0019fbb:	59                   	pop    ecx
c0019fbc:	5b                   	pop    ebx
c0019fbd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019fc0:	68 21 b6 02 c0       	push   0xc002b621
c0019fc5:	e8 e9 86 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0019fca:	58                   	pop    eax
c0019fcb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fce:	5a                   	pop    edx
c0019fcf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019fd2:	68 2a b6 02 c0       	push   0xc002b62a
c0019fd7:	e8 d7 86 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0019fdc:	59                   	pop    ecx
c0019fdd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019fe0:	5b                   	pop    ebx
c0019fe1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fe3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019fe6:	68 33 b6 02 c0       	push   0xc002b633
c0019feb:	e8 c3 86 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0019ff0:	58                   	pop    eax
c0019ff1:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c0019ff6:	5a                   	pop    edx
c0019ff7:	68 a0 b7 02 c0       	push   0xc002b7a0
c0019ffc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a002:	e8 43 68 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a007:	59                   	pop    ecx
c001a008:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a00d:	5b                   	pop    ebx
c001a00e:	68 3c b6 02 c0       	push   0xc002b63c
c001a013:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a019:	e8 2c 68 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a01e:	0f 20 c0             	mov    eax,cr0
c001a021:	5a                   	pop    edx
c001a022:	59                   	pop    ecx
c001a023:	50                   	push   eax
c001a024:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a029:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a02f:	e8 d0 67 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001a034:	5b                   	pop    ebx
c001a035:	58                   	pop    eax
c001a036:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a03b:	68 46 b6 02 c0       	push   0xc002b646
c001a040:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a046:	e8 ff 67 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a04b:	0f 20 d0             	mov    eax,cr2
c001a04e:	5a                   	pop    edx
c001a04f:	59                   	pop    ecx
c001a050:	50                   	push   eax
c001a051:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a056:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a05c:	e8 a3 67 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001a061:	5b                   	pop    ebx
c001a062:	58                   	pop    eax
c001a063:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a068:	68 50 b6 02 c0       	push   0xc002b650
c001a06d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a073:	e8 d2 67 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a078:	0f 20 d8             	mov    eax,cr3
c001a07b:	5a                   	pop    edx
c001a07c:	59                   	pop    ecx
c001a07d:	50                   	push   eax
c001a07e:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a083:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a089:	e8 76 67 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001a08e:	5b                   	pop    ebx
c001a08f:	58                   	pop    eax
c001a090:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a095:	68 63 b6 02 c0       	push   0xc002b663
c001a09a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0a0:	e8 a5 67 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a0a5:	0f 20 e0             	mov    eax,cr4
c001a0a8:	5a                   	pop    edx
c001a0a9:	59                   	pop    ecx
c001a0aa:	50                   	push   eax
c001a0ab:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a0b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0b6:	e8 49 67 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001a0bb:	5b                   	pop    ebx
c001a0bc:	58                   	pop    eax
c001a0bd:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a0c2:	68 6d b6 02 c0       	push   0xc002b66d
c001a0c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0cd:	e8 78 67 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a0d2:	5a                   	pop    edx
c001a0d3:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a0d8:	59                   	pop    ecx
c001a0d9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a0df:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a0e2:	50                   	push   eax
c001a0e3:	e8 1c 67 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001a0e8:	5b                   	pop    ebx
c001a0e9:	58                   	pop    eax
c001a0ea:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a0ef:	68 84 b6 02 c0       	push   0xc002b684
c001a0f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a0fa:	e8 4b 67 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a0ff:	5a                   	pop    edx
c001a100:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a105:	59                   	pop    ecx
c001a106:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a10c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a10f:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a112:	50                   	push   eax
c001a113:	e8 ec 66 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001a118:	5b                   	pop    ebx
c001a119:	58                   	pop    eax
c001a11a:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a11f:	68 84 b6 02 c0       	push   0xc002b684
c001a124:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a12a:	e8 1b 67 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a12f:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a134:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a137:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a13d:	8b 12                	mov    edx,DWORD PTR [edx]
c001a13f:	59                   	pop    ecx
c001a140:	5b                   	pop    ebx
c001a141:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a144:	50                   	push   eax
c001a145:	e8 ba 66 ff ff       	call   c0010804 <VgaText::putx(unsigned int)>
c001a14a:	83 c4 10             	add    esp,0x10
c001a14d:	b2 fe                	mov    dl,0xfe
c001a14f:	e4 60                	in     al,0x60
c001a151:	3c 1c                	cmp    al,0x1c
c001a153:	74 04                	je     c001a159 <Krnl::panic(char const*)+0x33a>
c001a155:	3c 5a                	cmp    al,0x5a
c001a157:	75 f6                	jne    c001a14f <Krnl::panic(char const*)+0x330>
c001a159:	e4 64                	in     al,0x64
c001a15b:	a8 02                	test   al,0x2
c001a15d:	75 fa                	jne    c001a159 <Krnl::panic(char const*)+0x33a>
c001a15f:	88 d0                	mov    al,dl
c001a161:	e6 64                	out    0x64,al
c001a163:	fa                   	cli    
c001a164:	f4                   	hlt    
c001a165:	eb e8                	jmp    c001a14f <Krnl::panic(char const*)+0x330>
c001a167:	50                   	push   eax
c001a168:	50                   	push   eax
c001a169:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a16e:	68 f0 b6 02 c0       	push   0xc002b6f0
c001a173:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a179:	e8 cc 66 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a17e:	58                   	pop    eax
c001a17f:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a184:	5a                   	pop    edx
c001a185:	68 fe b5 02 c0       	push   0xc002b5fe
c001a18a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a190:	e8 b5 66 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a195:	59                   	pop    ecx
c001a196:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a19b:	5b                   	pop    ebx
c001a19c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a19f:	83 c0 0c             	add    eax,0xc
c001a1a2:	50                   	push   eax
c001a1a3:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001a1a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a1ae:	e8 97 66 ff ff       	call   c001084a <VgaText::puts(char const*)>
c001a1b3:	83 c4 10             	add    esp,0x10
c001a1b6:	e9 a3 fd ff ff       	jmp    c0019f5e <Krnl::panic(char const*)+0x13f>

c001a1bb <Net::switchEndian16(unsigned short)>:
c001a1bb:	83 ec 04             	sub    esp,0x4
c001a1be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1c2:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a1c6:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1ca:	c1 f8 08             	sar    eax,0x8
c001a1cd:	89 c2                	mov    edx,eax
c001a1cf:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a1d3:	c1 e0 08             	shl    eax,0x8
c001a1d6:	09 d0                	or     eax,edx
c001a1d8:	83 c4 04             	add    esp,0x4
c001a1db:	c3                   	ret    

c001a1dc <Net::switchEndian32(unsigned int)>:
c001a1dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1e0:	c1 e8 18             	shr    eax,0x18
c001a1e3:	89 c2                	mov    edx,eax
c001a1e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1e9:	c1 e0 08             	shl    eax,0x8
c001a1ec:	25 00 00 ff 00       	and    eax,0xff0000
c001a1f1:	09 c2                	or     edx,eax
c001a1f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1f7:	c1 e8 08             	shr    eax,0x8
c001a1fa:	25 00 ff 00 00       	and    eax,0xff00
c001a1ff:	09 c2                	or     edx,eax
c001a201:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a205:	c1 e0 18             	shl    eax,0x18
c001a208:	09 d0                	or     eax,edx
c001a20a:	c3                   	ret    

c001a20b <Net::crc32Calc(unsigned char*, int)>:
c001a20b:	83 ec 10             	sub    esp,0x10
c001a20e:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a213:	75 07                	jne    c001a21c <Net::crc32Calc(unsigned char*, int)+0x11>
c001a215:	b8 00 00 00 00       	mov    eax,0x0
c001a21a:	eb 7c                	jmp    c001a298 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a21c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a221:	7f 07                	jg     c001a22a <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a223:	b8 00 00 00 00       	mov    eax,0x0
c001a228:	eb 6e                	jmp    c001a298 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a22a:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a232:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a23a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a23e:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a242:	7d 4e                	jge    c001a292 <Net::crc32Calc(unsigned char*, int)+0x87>
c001a244:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a248:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a24c:	01 d0                	add    eax,edx
c001a24e:	8a 00                	mov    al,BYTE PTR [eax]
c001a250:	0f b6 c0             	movzx  eax,al
c001a253:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a257:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a25f:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a264:	7f 26                	jg     c001a28c <Net::crc32Calc(unsigned char*, int)+0x81>
c001a266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a26a:	83 e0 01             	and    eax,0x1
c001a26d:	74 0d                	je     c001a27c <Net::crc32Calc(unsigned char*, int)+0x71>
c001a26f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a273:	d1 e8                	shr    eax,1
c001a275:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a27a:	eb 06                	jmp    c001a282 <Net::crc32Calc(unsigned char*, int)+0x77>
c001a27c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a280:	d1 e8                	shr    eax,1
c001a282:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a286:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a28a:	eb d3                	jmp    c001a25f <Net::crc32Calc(unsigned char*, int)+0x54>
c001a28c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a290:	eb a8                	jmp    c001a23a <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a296:	f7 d0                	not    eax
c001a298:	83 c4 10             	add    esp,0x10
c001a29b:	c3                   	ret    

c001a29c <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a29c:	57                   	push   edi
c001a29d:	56                   	push   esi
c001a29e:	53                   	push   ebx
c001a29f:	83 ec 60             	sub    esp,0x60
c001a2a2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2a9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a2ad:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a2b5:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a2ba:	7f 1a                	jg     c001a2d6 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a2bc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2c3:	8d 50 01             	lea    edx,[eax+0x1]
c001a2c6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2cd:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a2d0:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a2d4:	eb df                	jmp    c001a2b5 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a2d6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2dd:	8d 50 01             	lea    edx,[eax+0x1]
c001a2e0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a2e7:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a2ea:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a2f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2f5:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a2f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2fd:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a305:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a309:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a30d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a311:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a315:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a319:	89 c6                	mov    esi,eax
c001a31b:	89 d7                	mov    edi,edx
c001a31d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a31f:	89 c8                	mov    eax,ecx
c001a321:	89 fa                	mov    edx,edi
c001a323:	89 f3                	mov    ebx,esi
c001a325:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a329:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a32d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a330:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a338:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a33f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a343:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a347:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a34b:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a353:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a357:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a35b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a35f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a363:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a367:	89 c6                	mov    esi,eax
c001a369:	89 d7                	mov    edi,edx
c001a36b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a36d:	89 c8                	mov    eax,ecx
c001a36f:	89 fa                	mov    edx,edi
c001a371:	89 f3                	mov    ebx,esi
c001a373:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a377:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a37b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a37f:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a387:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a38e:	0f b7 c0             	movzx  eax,ax
c001a391:	c1 f8 08             	sar    eax,0x8
c001a394:	89 c1                	mov    ecx,eax
c001a396:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a39d:	8d 50 01             	lea    edx,[eax+0x1]
c001a3a0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a3a7:	88 ca                	mov    dl,cl
c001a3a9:	88 10                	mov    BYTE PTR [eax],dl
c001a3ab:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a3b2:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a3b9:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3bc:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a3c3:	88 10                	mov    BYTE PTR [eax],dl
c001a3c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a3c9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a3cd:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a3d4:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a3d8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a3dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a3e0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a3e4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a3e8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a3ec:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a3f0:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a3f4:	89 c6                	mov    esi,eax
c001a3f6:	89 d7                	mov    edi,edx
c001a3f8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3fa:	89 c8                	mov    eax,ecx
c001a3fc:	89 fa                	mov    edx,edi
c001a3fe:	89 f3                	mov    ebx,esi
c001a400:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a404:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a408:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a40c:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a410:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a417:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a41e:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a422:	50                   	push   eax
c001a423:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a427:	e8 df fd ff ff       	call   c001a20b <Net::crc32Calc(unsigned char*, int)>
c001a42c:	83 c4 08             	add    esp,0x8
c001a42f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a433:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a437:	c1 e8 18             	shr    eax,0x18
c001a43a:	89 c1                	mov    ecx,eax
c001a43c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a443:	8d 50 01             	lea    edx,[eax+0x1]
c001a446:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a44d:	88 ca                	mov    dl,cl
c001a44f:	88 10                	mov    BYTE PTR [eax],dl
c001a451:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a455:	c1 e8 10             	shr    eax,0x10
c001a458:	89 c1                	mov    ecx,eax
c001a45a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a461:	8d 50 01             	lea    edx,[eax+0x1]
c001a464:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a46b:	88 ca                	mov    dl,cl
c001a46d:	88 10                	mov    BYTE PTR [eax],dl
c001a46f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a473:	c1 e8 08             	shr    eax,0x8
c001a476:	89 c1                	mov    ecx,eax
c001a478:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a47f:	8d 50 01             	lea    edx,[eax+0x1]
c001a482:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a489:	88 ca                	mov    dl,cl
c001a48b:	88 10                	mov    BYTE PTR [eax],dl
c001a48d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a494:	8d 50 01             	lea    edx,[eax+0x1]
c001a497:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a49e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a4a2:	88 10                	mov    BYTE PTR [eax],dl
c001a4a4:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a4a8:	83 c4 60             	add    esp,0x60
c001a4ab:	5b                   	pop    ebx
c001a4ac:	5e                   	pop    esi
c001a4ad:	5f                   	pop    edi
c001a4ae:	c3                   	ret    

c001a4af <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a4af:	57                   	push   edi
c001a4b0:	56                   	push   esi
c001a4b1:	53                   	push   ebx
c001a4b2:	83 ec 70             	sub    esp,0x70
c001a4b5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4bc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a4c0:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a4c8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a4cf:	83 c0 0e             	add    eax,0xe
c001a4d2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a4d6:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a4dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a4e1:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a4e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a4ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a4f5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a4f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a4fd:	89 c6                	mov    esi,eax
c001a4ff:	89 d7                	mov    edi,edx
c001a501:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a503:	89 c8                	mov    eax,ecx
c001a505:	89 fa                	mov    edx,edi
c001a507:	89 f3                	mov    ebx,esi
c001a509:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a50d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a511:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a515:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a51d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a524:	83 c0 08             	add    eax,0x8
c001a527:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a52b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a532:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a536:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a53e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a542:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a546:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a54a:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a54e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a552:	89 c6                	mov    esi,eax
c001a554:	89 d7                	mov    edi,edx
c001a556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a558:	89 c8                	mov    eax,ecx
c001a55a:	89 fa                	mov    edx,edi
c001a55c:	89 f3                	mov    ebx,esi
c001a55e:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a562:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a566:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a56a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a572:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a579:	8d 50 01             	lea    edx,[eax+0x1]
c001a57c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a583:	8a 00                	mov    al,BYTE PTR [eax]
c001a585:	0f b6 c0             	movzx  eax,al
c001a588:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001a58d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a594:	8d 50 01             	lea    edx,[eax+0x1]
c001a597:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a59e:	8a 00                	mov    al,BYTE PTR [eax]
c001a5a0:	0f b6 c0             	movzx  eax,al
c001a5a3:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001a5a8:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001a5ad:	c1 e0 08             	shl    eax,0x8
c001a5b0:	89 c2                	mov    edx,eax
c001a5b2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a5b6:	09 d0                	or     eax,edx
c001a5b8:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a5bf:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a5c3:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001a5cb:	75 46                	jne    c001a613 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5cd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5d7:	66 3d dc 05          	cmp    ax,0x5dc
c001a5db:	77 16                	ja     c001a5f3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001a5dd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a5e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a5e7:	0f b7 c0             	movzx  eax,ax
c001a5ea:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001a5f1:	eb 20                	jmp    c001a613 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001a5f3:	83 ec 0c             	sub    esp,0xc
c001a5f6:	68 c8 b7 02 c0       	push   0xc002b7c8
c001a5fb:	e8 b3 80 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001a600:	83 c4 10             	add    esp,0x10
c001a603:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a60a:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a60e:	e9 17 01 00 00       	jmp    c001a72a <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001a613:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a61a:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001a621:	8b 12                	mov    edx,DWORD PTR [edx]
c001a623:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001a627:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a62e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001a632:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a63a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a63e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a642:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a646:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a64a:	89 c6                	mov    esi,eax
c001a64c:	89 d7                	mov    edi,edx
c001a64e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a650:	89 c8                	mov    eax,ecx
c001a652:	89 fa                	mov    edx,edi
c001a654:	89 f3                	mov    ebx,esi
c001a656:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a65a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a65e:	89 04 24             	mov    DWORD PTR [esp],eax
c001a661:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a668:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001a66f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a676:	8d 50 01             	lea    edx,[eax+0x1]
c001a679:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a680:	8a 00                	mov    al,BYTE PTR [eax]
c001a682:	0f b6 c0             	movzx  eax,al
c001a685:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001a689:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a690:	8d 50 01             	lea    edx,[eax+0x1]
c001a693:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a69a:	8a 00                	mov    al,BYTE PTR [eax]
c001a69c:	0f b6 c0             	movzx  eax,al
c001a69f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001a6a3:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a6ad:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6b4:	8a 00                	mov    al,BYTE PTR [eax]
c001a6b6:	0f b6 c0             	movzx  eax,al
c001a6b9:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001a6bd:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a6c4:	8d 50 01             	lea    edx,[eax+0x1]
c001a6c7:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001a6ce:	8a 00                	mov    al,BYTE PTR [eax]
c001a6d0:	0f b6 c0             	movzx  eax,al
c001a6d3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a6d7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001a6db:	c1 e0 18             	shl    eax,0x18
c001a6de:	89 c2                	mov    edx,eax
c001a6e0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001a6e4:	c1 e0 10             	shl    eax,0x10
c001a6e7:	09 c2                	or     edx,eax
c001a6e9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001a6ed:	c1 e0 08             	shl    eax,0x8
c001a6f0:	09 d0                	or     eax,edx
c001a6f2:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001a6f6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a6fa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a701:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001a705:	83 e8 04             	sub    eax,0x4
c001a708:	83 ec 08             	sub    esp,0x8
c001a70b:	50                   	push   eax
c001a70c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001a710:	e8 f6 fa ff ff       	call   c001a20b <Net::crc32Calc(unsigned char*, int)>
c001a715:	83 c4 10             	add    esp,0x10
c001a718:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001a71c:	0f 94 c2             	sete   dl
c001a71f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a726:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a729:	90                   	nop
c001a72a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a731:	83 c4 70             	add    esp,0x70
c001a734:	5b                   	pop    ebx
c001a735:	5e                   	pop    esi
c001a736:	5f                   	pop    edi
c001a737:	c2 04 00             	ret    0x4

c001a73a <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a73a:	55                   	push   ebp
c001a73b:	57                   	push   edi
c001a73c:	56                   	push   esi
c001a73d:	53                   	push   ebx
c001a73e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a744:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a74b:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a74d:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a750:	80 fb 40             	cmp    bl,0x40
c001a753:	75 1b                	jne    c001a770 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a755:	8a 16                	mov    dl,BYTE PTR [esi]
c001a757:	84 d2                	test   dl,dl
c001a759:	0f 84 f1 00 00 00    	je     c001a850 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a75f:	8d 46 01             	lea    eax,[esi+0x1]
c001a762:	80 fa 3a             	cmp    dl,0x3a
c001a765:	74 04                	je     c001a76b <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a767:	89 c6                	mov    esi,eax
c001a769:	eb ea                	jmp    c001a755 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a76b:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a76e:	89 c6                	mov    esi,eax
c001a770:	50                   	push   eax
c001a771:	6a 40                	push   0x40
c001a773:	6a 00                	push   0x0
c001a775:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a779:	50                   	push   eax
c001a77a:	e8 d1 5f fe ff       	call   c0000750 <memset>
c001a77f:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a786:	31 c0                	xor    eax,eax
c001a788:	83 c4 10             	add    esp,0x10
c001a78b:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a78d:	84 c9                	test   cl,cl
c001a78f:	0f 84 bb 00 00 00    	je     c001a850 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a795:	3d c7 00 00 00       	cmp    eax,0xc7
c001a79a:	0f 8f b0 00 00 00    	jg     c001a850 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7a0:	80 f9 0a             	cmp    cl,0xa
c001a7a3:	0f 85 98 00 00 00    	jne    c001a841 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a7a9:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a7ae:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a7b2:	a8 df                	test   al,0xdf
c001a7b4:	0f 94 c1             	sete   cl
c001a7b7:	3c 23                	cmp    al,0x23
c001a7b9:	0f 94 c2             	sete   dl
c001a7bc:	08 d1                	or     cl,dl
c001a7be:	75 4a                	jne    c001a80a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7c0:	8d 50 f7             	lea    edx,[eax-0x9]
c001a7c3:	80 fa 01             	cmp    dl,0x1
c001a7c6:	76 42                	jbe    c001a80a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7c8:	3c 5b                	cmp    al,0x5b
c001a7ca:	75 42                	jne    c001a80e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a7cc:	80 fb 40             	cmp    bl,0x40
c001a7cf:	75 39                	jne    c001a80a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a7d1:	83 ec 0c             	sub    esp,0xc
c001a7d4:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a7d8:	52                   	push   edx
c001a7d9:	e8 8e 5f fe ff       	call   c000076c <strlen>
c001a7de:	83 c4 10             	add    esp,0x10
c001a7e1:	83 f8 3f             	cmp    eax,0x3f
c001a7e4:	77 6a                	ja     c001a850 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a7e6:	50                   	push   eax
c001a7e7:	50                   	push   eax
c001a7e8:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a7ec:	52                   	push   edx
c001a7ed:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a7f1:	52                   	push   edx
c001a7f2:	e8 15 60 fe ff       	call   c000080c <strcpy>
c001a7f7:	58                   	pop    eax
c001a7f8:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a7fc:	52                   	push   edx
c001a7fd:	e8 6a 5f fe ff       	call   c000076c <strlen>
c001a802:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a807:	83 c4 10             	add    esp,0x10
c001a80a:	31 d2                	xor    edx,edx
c001a80c:	eb 3a                	jmp    c001a848 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a80e:	80 fb 40             	cmp    bl,0x40
c001a811:	74 06                	je     c001a819 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a813:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a817:	eb 20                	jmp    c001a839 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a819:	50                   	push   eax
c001a81a:	50                   	push   eax
c001a81b:	55                   	push   ebp
c001a81c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a820:	50                   	push   eax
c001a821:	e8 72 60 fe ff       	call   c0000898 <strcmp>
c001a826:	83 c4 10             	add    esp,0x10
c001a829:	85 c0                	test   eax,eax
c001a82b:	75 dd                	jne    c001a80a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a82d:	eb e4                	jmp    c001a813 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a82f:	8d 50 01             	lea    edx,[eax+0x1]
c001a832:	80 f9 3d             	cmp    cl,0x3d
c001a835:	74 1d                	je     c001a854 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a837:	89 d0                	mov    eax,edx
c001a839:	8a 08                	mov    cl,BYTE PTR [eax]
c001a83b:	84 c9                	test   cl,cl
c001a83d:	75 f0                	jne    c001a82f <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a83f:	eb 0f                	jmp    c001a850 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a841:	8d 50 01             	lea    edx,[eax+0x1]
c001a844:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a848:	47                   	inc    edi
c001a849:	89 d0                	mov    eax,edx
c001a84b:	e9 3b ff ff ff       	jmp    c001a78b <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a850:	31 c0                	xor    eax,eax
c001a852:	eb 33                	jmp    c001a887 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a854:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a858:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a85b:	50                   	push   eax
c001a85c:	50                   	push   eax
c001a85d:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a861:	50                   	push   eax
c001a862:	56                   	push   esi
c001a863:	e8 30 60 fe ff       	call   c0000898 <strcmp>
c001a868:	83 c4 10             	add    esp,0x10
c001a86b:	85 c0                	test   eax,eax
c001a86d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a871:	75 97                	jne    c001a80a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a873:	51                   	push   ecx
c001a874:	51                   	push   ecx
c001a875:	52                   	push   edx
c001a876:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a87d:	e8 8a 5f fe ff       	call   c000080c <strcpy>
c001a882:	83 c4 10             	add    esp,0x10
c001a885:	b0 01                	mov    al,0x1
c001a887:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a88d:	5b                   	pop    ebx
c001a88e:	5e                   	pop    esi
c001a88f:	5f                   	pop    edi
c001a890:	5d                   	pop    ebp
c001a891:	c3                   	ret    

c001a892 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a892:	57                   	push   edi
c001a893:	56                   	push   esi
c001a894:	53                   	push   ebx
c001a895:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a89b:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a8a2:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a8a9:	53                   	push   ebx
c001a8aa:	e8 bd 5e fe ff       	call   c000076c <strlen>
c001a8af:	89 34 24             	mov    DWORD PTR [esp],esi
c001a8b2:	89 c7                	mov    edi,eax
c001a8b4:	e8 b3 5e fe ff       	call   c000076c <strlen>
c001a8b9:	83 c4 10             	add    esp,0x10
c001a8bc:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a8c0:	3d ff 00 00 00       	cmp    eax,0xff
c001a8c5:	0f 87 d3 00 00 00    	ja     c001a99e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a8cb:	57                   	push   edi
c001a8cc:	57                   	push   edi
c001a8cd:	56                   	push   esi
c001a8ce:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a8d2:	56                   	push   esi
c001a8d3:	e8 34 5f fe ff       	call   c000080c <strcpy>
c001a8d8:	58                   	pop    eax
c001a8d9:	5a                   	pop    edx
c001a8da:	68 6a bb 02 c0       	push   0xc002bb6a
c001a8df:	56                   	push   esi
c001a8e0:	e8 67 60 fe ff       	call   c000094c <strcat>
c001a8e5:	59                   	pop    ecx
c001a8e6:	5f                   	pop    edi
c001a8e7:	53                   	push   ebx
c001a8e8:	56                   	push   esi
c001a8e9:	e8 5e 60 fe ff       	call   c000094c <strcat>
c001a8ee:	58                   	pop    eax
c001a8ef:	5a                   	pop    edx
c001a8f0:	68 14 b8 02 c0       	push   0xc002b814
c001a8f5:	56                   	push   esi
c001a8f6:	e8 51 60 fe ff       	call   c000094c <strcat>
c001a8fb:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a902:	e8 92 4c ff ff       	call   c000f599 <malloc>
c001a907:	83 c4 0c             	add    esp,0xc
c001a90a:	89 c3                	mov    ebx,eax
c001a90c:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c001a912:	56                   	push   esi
c001a913:	50                   	push   eax
c001a914:	e8 f9 82 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001a919:	83 c4 10             	add    esp,0x10
c001a91c:	85 db                	test   ebx,ebx
c001a91e:	74 7e                	je     c001a99e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a920:	51                   	push   ecx
c001a921:	51                   	push   ecx
c001a922:	6a 01                	push   0x1
c001a924:	53                   	push   ebx
c001a925:	e8 4c 83 ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c001a92a:	83 c4 10             	add    esp,0x10
c001a92d:	85 c0                	test   eax,eax
c001a92f:	74 08                	je     c001a939 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a931:	83 ec 0c             	sub    esp,0xc
c001a934:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a936:	53                   	push   ebx
c001a937:	eb 5f                	jmp    c001a998 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a939:	52                   	push   edx
c001a93a:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a93e:	50                   	push   eax
c001a93f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a943:	50                   	push   eax
c001a944:	53                   	push   ebx
c001a945:	e8 d8 85 ff ff       	call   c0012f22 <File::stat(unsigned long long*, bool*)>
c001a94a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a94e:	83 c4 10             	add    esp,0x10
c001a951:	89 c1                	mov    ecx,eax
c001a953:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a957:	74 31                	je     c001a98a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a959:	83 ec 0c             	sub    esp,0xc
c001a95c:	50                   	push   eax
c001a95d:	e8 37 4c ff ff       	call   c000f599 <malloc>
c001a962:	89 c6                	mov    esi,eax
c001a964:	58                   	pop    eax
c001a965:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a967:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a96b:	52                   	push   edx
c001a96c:	56                   	push   esi
c001a96d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a971:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a975:	53                   	push   ebx
c001a976:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a979:	83 c4 20             	add    esp,0x20
c001a97c:	85 c0                	test   eax,eax
c001a97e:	75 0a                	jne    c001a98a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a980:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a984:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a988:	74 18                	je     c001a9a2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a98a:	83 ec 0c             	sub    esp,0xc
c001a98d:	53                   	push   ebx
c001a98e:	e8 41 83 ff ff       	call   c0012cd4 <File::close()>
c001a993:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a995:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a998:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a99b:	83 c4 10             	add    esp,0x10
c001a99e:	31 c0                	xor    eax,eax
c001a9a0:	eb 3b                	jmp    c001a9dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a9a2:	83 ec 0c             	sub    esp,0xc
c001a9a5:	53                   	push   ebx
c001a9a6:	e8 29 83 ff ff       	call   c0012cd4 <File::close()>
c001a9ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a9ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a9b3:	83 c4 0c             	add    esp,0xc
c001a9b6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9bd:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a9c4:	56                   	push   esi
c001a9c5:	e8 70 fd ff ff       	call   c001a73a <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a9ca:	89 34 24             	mov    DWORD PTR [esp],esi
c001a9cd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a9d1:	e8 d3 4b ff ff       	call   c000f5a9 <free>
c001a9d6:	83 c4 10             	add    esp,0x10
c001a9d9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a9dd:	81 c4 20 01 00 00    	add    esp,0x120
c001a9e3:	5b                   	pop    ebx
c001a9e4:	5e                   	pop    esi
c001a9e5:	5f                   	pop    edi
c001a9e6:	c3                   	ret    

c001a9e7 <Reg::getLine(char*, char*, char*)>:
c001a9e7:	57                   	push   edi
c001a9e8:	56                   	push   esi
c001a9e9:	53                   	push   ebx
c001a9ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a9f2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a9f6:	57                   	push   edi
c001a9f7:	56                   	push   esi
c001a9f8:	53                   	push   ebx
c001a9f9:	68 19 b8 02 c0       	push   0xc002b819
c001a9fe:	e8 8f fe ff ff       	call   c001a892 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa03:	83 c4 10             	add    esp,0x10
c001aa06:	84 c0                	test   al,al
c001aa08:	75 10                	jne    c001aa1a <Reg::getLine(char*, char*, char*)+0x33>
c001aa0a:	57                   	push   edi
c001aa0b:	56                   	push   esi
c001aa0c:	53                   	push   ebx
c001aa0d:	68 3e b8 02 c0       	push   0xc002b83e
c001aa12:	e8 7b fe ff ff       	call   c001a892 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aa17:	83 c4 10             	add    esp,0x10
c001aa1a:	5b                   	pop    ebx
c001aa1b:	5e                   	pop    esi
c001aa1c:	5f                   	pop    edi
c001aa1d:	c3                   	ret    

c001aa1e <Reg::readInt(char*, char*, int*)>:
c001aa1e:	55                   	push   ebp
c001aa1f:	57                   	push   edi
c001aa20:	56                   	push   esi
c001aa21:	53                   	push   ebx
c001aa22:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aa28:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aa2c:	57                   	push   edi
c001aa2d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa34:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aa3b:	e8 a7 ff ff ff       	call   c001a9e7 <Reg::getLine(char*, char*, char*)>
c001aa40:	83 c4 10             	add    esp,0x10
c001aa43:	84 c0                	test   al,al
c001aa45:	0f 84 b3 00 00 00    	je     c001aafe <Reg::readInt(char*, char*, int*)+0xe0>
c001aa4b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aa4f:	80 fa 2b             	cmp    dl,0x2b
c001aa52:	74 0c                	je     c001aa60 <Reg::readInt(char*, char*, int*)+0x42>
c001aa54:	80 fa 2d             	cmp    dl,0x2d
c001aa57:	75 0e                	jne    c001aa67 <Reg::readInt(char*, char*, int*)+0x49>
c001aa59:	ba 01 00 00 00       	mov    edx,0x1
c001aa5e:	eb 0b                	jmp    c001aa6b <Reg::readInt(char*, char*, int*)+0x4d>
c001aa60:	ba 01 00 00 00       	mov    edx,0x1
c001aa65:	eb 02                	jmp    c001aa69 <Reg::readInt(char*, char*, int*)+0x4b>
c001aa67:	31 d2                	xor    edx,edx
c001aa69:	31 c0                	xor    eax,eax
c001aa6b:	be 0a 00 00 00       	mov    esi,0xa
c001aa70:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001aa75:	75 20                	jne    c001aa97 <Reg::readInt(char*, char*, int*)+0x79>
c001aa77:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001aa7b:	80 f9 78             	cmp    cl,0x78
c001aa7e:	75 0a                	jne    c001aa8a <Reg::readInt(char*, char*, int*)+0x6c>
c001aa80:	83 c2 02             	add    edx,0x2
c001aa83:	be 10 00 00 00       	mov    esi,0x10
c001aa88:	eb 0d                	jmp    c001aa97 <Reg::readInt(char*, char*, int*)+0x79>
c001aa8a:	80 f9 62             	cmp    cl,0x62
c001aa8d:	75 08                	jne    c001aa97 <Reg::readInt(char*, char*, int*)+0x79>
c001aa8f:	83 c2 02             	add    edx,0x2
c001aa92:	be 02 00 00 00       	mov    esi,0x2
c001aa97:	01 d7                	add    edi,edx
c001aa99:	31 d2                	xor    edx,edx
c001aa9b:	8a 1f                	mov    bl,BYTE PTR [edi]
c001aa9d:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aaa1:	80 fb 0d             	cmp    bl,0xd
c001aaa4:	0f 94 c3             	sete   bl
c001aaa7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001aaac:	0f 94 c1             	sete   cl
c001aaaf:	08 cb                	or     bl,cl
c001aab1:	75 3a                	jne    c001aaed <Reg::readInt(char*, char*, int*)+0xcf>
c001aab3:	0f af d6             	imul   edx,esi
c001aab6:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001aabb:	83 fe 10             	cmp    esi,0x10
c001aabe:	75 26                	jne    c001aae6 <Reg::readInt(char*, char*, int*)+0xc8>
c001aac0:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aac4:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001aac7:	89 e9                	mov    ecx,ebp
c001aac9:	80 f9 05             	cmp    cl,0x5
c001aacc:	77 06                	ja     c001aad4 <Reg::readInt(char*, char*, int*)+0xb6>
c001aace:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001aad2:	eb 16                	jmp    c001aaea <Reg::readInt(char*, char*, int*)+0xcc>
c001aad4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001aad8:	83 e9 61             	sub    ecx,0x61
c001aadb:	80 f9 05             	cmp    cl,0x5
c001aade:	77 06                	ja     c001aae6 <Reg::readInt(char*, char*, int*)+0xc8>
c001aae0:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001aae4:	eb 04                	jmp    c001aaea <Reg::readInt(char*, char*, int*)+0xcc>
c001aae6:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001aaea:	47                   	inc    edi
c001aaeb:	eb ae                	jmp    c001aa9b <Reg::readInt(char*, char*, int*)+0x7d>
c001aaed:	84 c0                	test   al,al
c001aaef:	74 02                	je     c001aaf3 <Reg::readInt(char*, char*, int*)+0xd5>
c001aaf1:	f7 da                	neg    edx
c001aaf3:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001aafa:	89 10                	mov    DWORD PTR [eax],edx
c001aafc:	88 d8                	mov    al,bl
c001aafe:	81 c4 ec 00 00 00    	add    esp,0xec
c001ab04:	5b                   	pop    ebx
c001ab05:	5e                   	pop    esi
c001ab06:	5f                   	pop    edi
c001ab07:	5d                   	pop    ebp
c001ab08:	c3                   	ret    

c001ab09 <Reg::readString(char*, char*, char*, int)>:
c001ab09:	57                   	push   edi
c001ab0a:	56                   	push   esi
c001ab0b:	53                   	push   ebx
c001ab0c:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ab12:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ab19:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ab1d:	57                   	push   edi
c001ab1e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab25:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ab2c:	e8 b6 fe ff ff       	call   c001a9e7 <Reg::getLine(char*, char*, char*)>
c001ab31:	83 c4 10             	add    esp,0x10
c001ab34:	89 c6                	mov    esi,eax
c001ab36:	84 c0                	test   al,al
c001ab38:	74 44                	je     c001ab7e <Reg::readString(char*, char*, char*, int)+0x75>
c001ab3a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ab41:	31 c0                	xor    eax,eax
c001ab43:	4a                   	dec    edx
c001ab44:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ab47:	84 c9                	test   cl,cl
c001ab49:	74 0f                	je     c001ab5a <Reg::readString(char*, char*, char*, int)+0x51>
c001ab4b:	39 c2                	cmp    edx,eax
c001ab4d:	7e 0b                	jle    c001ab5a <Reg::readString(char*, char*, char*, int)+0x51>
c001ab4f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ab52:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ab57:	40                   	inc    eax
c001ab58:	eb ea                	jmp    c001ab44 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ab5a:	83 ec 0c             	sub    esp,0xc
c001ab5d:	53                   	push   ebx
c001ab5e:	e8 09 5c fe ff       	call   c000076c <strlen>
c001ab63:	83 c4 10             	add    esp,0x10
c001ab66:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ab6b:	75 11                	jne    c001ab7e <Reg::readString(char*, char*, char*, int)+0x75>
c001ab6d:	83 ec 0c             	sub    esp,0xc
c001ab70:	53                   	push   ebx
c001ab71:	e8 f6 5b fe ff       	call   c000076c <strlen>
c001ab76:	83 c4 10             	add    esp,0x10
c001ab79:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ab7e:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ab84:	89 f0                	mov    eax,esi
c001ab86:	5b                   	pop    ebx
c001ab87:	5e                   	pop    esi
c001ab88:	5f                   	pop    edi
c001ab89:	c3                   	ret    

c001ab8a <Reg::readBool(char*, char*, bool*)>:
c001ab8a:	83 ec 20             	sub    esp,0x20
c001ab8d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab91:	50                   	push   eax
c001ab92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab9a:	e8 7f fe ff ff       	call   c001aa1e <Reg::readInt(char*, char*, int*)>
c001ab9f:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001aba4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001aba8:	0f 95 02             	setne  BYTE PTR [edx]
c001abab:	83 c4 2c             	add    esp,0x2c
c001abae:	c3                   	ret    

c001abaf <Reg::readBoolWithDefault(char*, char*, bool)>:
c001abaf:	53                   	push   ebx
c001abb0:	83 ec 1c             	sub    esp,0x1c
c001abb3:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001abb7:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abbb:	50                   	push   eax
c001abbc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abc4:	e8 c1 ff ff ff       	call   c001ab8a <Reg::readBool(char*, char*, bool*)>
c001abc9:	83 c4 10             	add    esp,0x10
c001abcc:	84 c0                	test   al,al
c001abce:	74 04                	je     c001abd4 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001abd0:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001abd4:	88 d8                	mov    al,bl
c001abd6:	83 c4 18             	add    esp,0x18
c001abd9:	5b                   	pop    ebx
c001abda:	c3                   	ret    

c001abdb <Reg::readIntWithDefault(char*, char*, int)>:
c001abdb:	53                   	push   ebx
c001abdc:	83 ec 1c             	sub    esp,0x1c
c001abdf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001abe3:	8d 44 24 10          	lea    eax,[esp+0x10]
c001abe7:	50                   	push   eax
c001abe8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abf0:	e8 29 fe ff ff       	call   c001aa1e <Reg::readInt(char*, char*, int*)>
c001abf5:	83 c4 10             	add    esp,0x10
c001abf8:	84 c0                	test   al,al
c001abfa:	74 04                	je     c001ac00 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001abfc:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ac00:	89 d8                	mov    eax,ebx
c001ac02:	83 c4 18             	add    esp,0x18
c001ac05:	5b                   	pop    ebx
c001ac06:	c3                   	ret    

c001ac07 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ac07:	57                   	push   edi
c001ac08:	56                   	push   esi
c001ac09:	56                   	push   esi
c001ac0a:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ac0e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ac12:	56                   	push   esi
c001ac13:	57                   	push   edi
c001ac14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac1c:	e8 e8 fe ff ff       	call   c001ab09 <Reg::readString(char*, char*, char*, int)>
c001ac21:	83 c4 10             	add    esp,0x10
c001ac24:	84 c0                	test   al,al
c001ac26:	75 1a                	jne    c001ac42 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001ac28:	51                   	push   ecx
c001ac29:	56                   	push   esi
c001ac2a:	6a 00                	push   0x0
c001ac2c:	57                   	push   edi
c001ac2d:	e8 1e 5b fe ff       	call   c0000750 <memset>
c001ac32:	8d 4e ff             	lea    ecx,[esi-0x1]
c001ac35:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ac39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ac3b:	83 c4 10             	add    esp,0x10
c001ac3e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ac42:	89 f8                	mov    eax,edi
c001ac44:	5a                   	pop    edx
c001ac45:	5e                   	pop    esi
c001ac46:	5f                   	pop    edi
c001ac47:	c3                   	ret    

c001ac48 <Sys::eject(regs*)>:
c001ac48:	83 ec 0c             	sub    esp,0xc
c001ac4b:	83 ca ff             	or     edx,0xffffffff
c001ac4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac52:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ac55:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ac5a:	83 e9 41             	sub    ecx,0x41
c001ac5d:	83 f9 19             	cmp    ecx,0x19
c001ac60:	77 18                	ja     c001ac7a <Sys::eject(regs*)+0x32>
c001ac62:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c001ac69:	85 c9                	test   ecx,ecx
c001ac6b:	74 0d                	je     c001ac7a <Sys::eject(regs*)+0x32>
c001ac6d:	83 ec 0c             	sub    esp,0xc
c001ac70:	51                   	push   ecx
c001ac71:	e8 28 b3 ff ff       	call   c0015f9e <LogicalDisk::eject()>
c001ac76:	83 c4 10             	add    esp,0x10
c001ac79:	99                   	cdq    
c001ac7a:	83 c4 0c             	add    esp,0xc
c001ac7d:	c3                   	ret    

c001ac7e <Sys::exit(regs*)>:
c001ac7e:	83 ec 18             	sub    esp,0x18
c001ac81:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac85:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ac88:	e8 bc 35 00 00       	call   c001e249 <terminateTask(int)>
c001ac8d:	83 c8 ff             	or     eax,0xffffffff
c001ac90:	83 c4 1c             	add    esp,0x1c
c001ac93:	89 c2                	mov    edx,eax
c001ac95:	c3                   	ret    

c001ac96 <Sys::getCwd(regs*)>:
c001ac96:	83 ec 10             	sub    esp,0x10
c001ac99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac9d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001aca0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aca3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aca8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acab:	e8 64 7d ff ff       	call   c0012a14 <Fs::getcwd(Process*, char*, int)>
c001acb0:	83 c4 1c             	add    esp,0x1c
c001acb3:	99                   	cdq    
c001acb4:	c3                   	ret    

c001acb5 <Sys::getPID(regs*)>:
c001acb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001acbd:	8b 00                	mov    eax,DWORD PTR [eax]
c001acbf:	99                   	cdq    
c001acc0:	c3                   	ret    

c001acc1 <Sys::getRAMData(regs*)>:
c001acc1:	8b 0d b4 d9 02 c0    	mov    ecx,DWORD PTR ds:0xc002d9b4
c001acc7:	6b 05 b0 d9 02 c0 64 	imul   eax,DWORD PTR ds:0xc002d9b0,0x64
c001acce:	99                   	cdq    
c001accf:	f7 f9                	idiv   ecx
c001acd1:	c1 e0 18             	shl    eax,0x18
c001acd4:	09 c8                	or     eax,ecx
c001acd6:	99                   	cdq    
c001acd7:	c3                   	ret    

c001acd8 <Sys::getVGAPtr(regs*)>:
c001acd8:	55                   	push   ebp
c001acd9:	57                   	push   edi
c001acda:	56                   	push   esi
c001acdb:	53                   	push   ebx
c001acdc:	83 ec 18             	sub    esp,0x18
c001acdf:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ace3:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ace6:	e8 aa 30 00 00       	call   c001dd95 <Thr::processFromPID(int)>
c001aceb:	83 c4 10             	add    esp,0x10
c001acee:	89 c1                	mov    ecx,eax
c001acf0:	b8 01 00 00 00       	mov    eax,0x1
c001acf5:	85 c9                	test   ecx,ecx
c001acf7:	74 59                	je     c001ad52 <Sys::getVGAPtr(regs*)+0x7a>
c001acf9:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001acff:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001ad03:	74 0c                	je     c001ad11 <Sys::getVGAPtr(regs*)+0x39>
c001ad05:	83 ec 0c             	sub    esp,0xc
c001ad08:	53                   	push   ebx
c001ad09:	e8 2f 56 ff ff       	call   c001033d <setActiveTerminal(VgaText*)>
c001ad0e:	83 c4 10             	add    esp,0x10
c001ad11:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001ad14:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ad17:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001ad1c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad1e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ad21:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad24:	81 c3 82 00 00 00    	add    ebx,0x82
c001ad2a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001ad30:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad33:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001ad36:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001ad3c:	50                   	push   eax
c001ad3d:	50                   	push   eax
c001ad3e:	53                   	push   ebx
c001ad3f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001ad42:	05 a8 0f 00 00       	add    eax,0xfa8
c001ad47:	50                   	push   eax
c001ad48:	e8 bf 5a fe ff       	call   c000080c <strcpy>
c001ad4d:	83 c4 10             	add    esp,0x10
c001ad50:	31 c0                	xor    eax,eax
c001ad52:	83 c4 0c             	add    esp,0xc
c001ad55:	31 d2                	xor    edx,edx
c001ad57:	5b                   	pop    ebx
c001ad58:	5e                   	pop    esi
c001ad59:	5f                   	pop    edi
c001ad5a:	5d                   	pop    ebp
c001ad5b:	c3                   	ret    

c001ad5c <Sys::loadDLL(regs*)>:
c001ad5c:	56                   	push   esi
c001ad5d:	53                   	push   ebx
c001ad5e:	31 d2                	xor    edx,edx
c001ad60:	51                   	push   ecx
c001ad61:	b8 01 00 00 00       	mov    eax,0x1
c001ad66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad6a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001ad6e:	0f 84 8c 00 00 00    	je     c001ae00 <Sys::loadDLL(regs*)+0xa4>
c001ad74:	83 ec 0c             	sub    esp,0xc
c001ad77:	68 14 01 00 00       	push   0x114
c001ad7c:	e8 18 48 ff ff       	call   c000f599 <malloc>
c001ad81:	83 c4 0c             	add    esp,0xc
c001ad84:	89 c3                	mov    ebx,eax
c001ad86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad8b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad8e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001ad91:	53                   	push   ebx
c001ad92:	e8 7b 7e ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001ad97:	83 c4 10             	add    esp,0x10
c001ad9a:	31 d2                	xor    edx,edx
c001ad9c:	b8 02 00 00 00       	mov    eax,0x2
c001ada1:	85 db                	test   ebx,ebx
c001ada3:	74 5b                	je     c001ae00 <Sys::loadDLL(regs*)+0xa4>
c001ada5:	83 ec 0c             	sub    esp,0xc
c001ada8:	53                   	push   ebx
c001ada9:	e8 36 81 ff ff       	call   c0012ee4 <File::exists()>
c001adae:	83 c4 10             	add    esp,0x10
c001adb1:	84 c0                	test   al,al
c001adb3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adb5:	75 11                	jne    c001adc8 <Sys::loadDLL(regs*)+0x6c>
c001adb7:	83 ec 0c             	sub    esp,0xc
c001adba:	53                   	push   ebx
c001adbb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adbe:	83 c4 10             	add    esp,0x10
c001adc1:	b8 03 00 00 00       	mov    eax,0x3
c001adc6:	eb 36                	jmp    c001adfe <Sys::loadDLL(regs*)+0xa2>
c001adc8:	83 ec 0c             	sub    esp,0xc
c001adcb:	53                   	push   ebx
c001adcc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adcf:	58                   	pop    eax
c001add0:	5a                   	pop    edx
c001add1:	6a 00                	push   0x0
c001add3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001add6:	e8 0e 22 00 00       	call   c001cfe9 <Thr::loadDLL(char const*, bool)>
c001addb:	83 c4 10             	add    esp,0x10
c001adde:	89 c1                	mov    ecx,eax
c001ade0:	31 d2                	xor    edx,edx
c001ade2:	b8 04 00 00 00       	mov    eax,0x4
c001ade7:	85 c9                	test   ecx,ecx
c001ade9:	74 15                	je     c001ae00 <Sys::loadDLL(regs*)+0xa4>
c001adeb:	53                   	push   ebx
c001adec:	53                   	push   ebx
c001aded:	ff 35 68 d9 02 c0    	push   DWORD PTR ds:0xc002d968
c001adf3:	51                   	push   ecx
c001adf4:	e8 1b 24 00 00       	call   c001d214 <Thr::executeDLL(unsigned long, void*)>
c001adf9:	83 c4 10             	add    esp,0x10
c001adfc:	31 c0                	xor    eax,eax
c001adfe:	31 d2                	xor    edx,edx
c001ae00:	59                   	pop    ecx
c001ae01:	5b                   	pop    ebx
c001ae02:	5e                   	pop    esi
c001ae03:	c3                   	ret    

c001ae04 <Sys::read(regs*)>:
c001ae04:	57                   	push   edi
c001ae05:	56                   	push   esi
c001ae06:	53                   	push   ebx
c001ae07:	83 ec 10             	sub    esp,0x10
c001ae0a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae0e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ae11:	83 f8 02             	cmp    eax,0x2
c001ae14:	77 10                	ja     c001ae26 <Sys::read(regs*)+0x22>
c001ae16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae1b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae1e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001ae24:	eb 0e                	jmp    c001ae34 <Sys::read(regs*)+0x30>
c001ae26:	83 ec 0c             	sub    esp,0xc
c001ae29:	50                   	push   eax
c001ae2a:	e8 82 62 ff ff       	call   c00110b1 <getFromFileDescriptor(int)>
c001ae2f:	83 c4 10             	add    esp,0x10
c001ae32:	89 c1                	mov    ecx,eax
c001ae34:	83 c8 ff             	or     eax,0xffffffff
c001ae37:	85 c9                	test   ecx,ecx
c001ae39:	89 c2                	mov    edx,eax
c001ae3b:	74 28                	je     c001ae65 <Sys::read(regs*)+0x61>
c001ae3d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ae45:	31 ff                	xor    edi,edi
c001ae47:	83 ec 0c             	sub    esp,0xc
c001ae4a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001ae4c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ae50:	52                   	push   edx
c001ae51:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ae54:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001ae57:	57                   	push   edi
c001ae58:	56                   	push   esi
c001ae59:	51                   	push   ecx
c001ae5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae61:	83 c4 20             	add    esp,0x20
c001ae64:	99                   	cdq    
c001ae65:	83 c4 10             	add    esp,0x10
c001ae68:	5b                   	pop    ebx
c001ae69:	5e                   	pop    esi
c001ae6a:	5f                   	pop    edi
c001ae6b:	c3                   	ret    

c001ae6c <Sys::sbrk(regs*)>:
c001ae6c:	56                   	push   esi
c001ae6d:	53                   	push   ebx
c001ae6e:	50                   	push   eax
c001ae6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae78:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ae7b:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001ae7e:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001ae84:	85 db                	test   ebx,ebx
c001ae86:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001ae89:	74 02                	je     c001ae8d <Sys::sbrk(regs*)+0x21>
c001ae8b:	79 06                	jns    c001ae93 <Sys::sbrk(regs*)+0x27>
c001ae8d:	89 f0                	mov    eax,esi
c001ae8f:	31 d2                	xor    edx,edx
c001ae91:	eb 2a                	jmp    c001aebd <Sys::sbrk(regs*)+0x51>
c001ae93:	83 c8 ff             	or     eax,0xffffffff
c001ae96:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001ae9c:	89 c2                	mov    edx,eax
c001ae9e:	77 1d                	ja     c001aebd <Sys::sbrk(regs*)+0x51>
c001aea0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001aea6:	50                   	push   eax
c001aea7:	c1 ea 0c             	shr    edx,0xc
c001aeaa:	68 07 0c 00 00       	push   0xc07
c001aeaf:	52                   	push   edx
c001aeb0:	51                   	push   ecx
c001aeb1:	e8 10 6c ff ff       	call   c0011ac6 <VAS::allocatePages(int, int)>
c001aeb6:	89 f0                	mov    eax,esi
c001aeb8:	31 d2                	xor    edx,edx
c001aeba:	83 c4 10             	add    esp,0x10
c001aebd:	59                   	pop    ecx
c001aebe:	5b                   	pop    ebx
c001aebf:	5e                   	pop    esi
c001aec0:	c3                   	ret    

c001aec1 <Sys::setCwd(regs*)>:
c001aec1:	83 ec 14             	sub    esp,0x14
c001aec4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aec8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aecb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aed0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aed3:	e8 ab 80 ff ff       	call   c0012f83 <Fs::setcwd(Process*, char*)>
c001aed8:	83 c4 1c             	add    esp,0x1c
c001aedb:	99                   	cdq    
c001aedc:	c3                   	ret    

c001aedd <Sys::setTime(regs*)>:
c001aedd:	55                   	push   ebp
c001aede:	31 c9                	xor    ecx,ecx
c001aee0:	57                   	push   edi
c001aee1:	bd 0c 00 00 00       	mov    ebp,0xc
c001aee6:	56                   	push   esi
c001aee7:	53                   	push   ebx
c001aee8:	31 db                	xor    ebx,ebx
c001aeea:	83 ec 10             	sub    esp,0x10
c001aeed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aef1:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001aef4:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001aef7:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001aefa:	89 c2                	mov    edx,eax
c001aefc:	66 81 ef 6c 07       	sub    di,0x76c
c001af01:	83 e2 1f             	and    edx,0x1f
c001af04:	c1 e7 10             	shl    edi,0x10
c001af07:	42                   	inc    edx
c001af08:	c1 e8 05             	shr    eax,0x5
c001af0b:	88 d1                	mov    cl,dl
c001af0d:	31 d2                	xor    edx,edx
c001af0f:	f7 f5                	div    ebp
c001af11:	89 dd                	mov    ebp,ebx
c001af13:	88 d5                	mov    ch,dl
c001af15:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001af1b:	0f b7 c1             	movzx  eax,cx
c001af1e:	31 d2                	xor    edx,edx
c001af20:	09 f8                	or     eax,edi
c001af22:	bf 3c 00 00 00       	mov    edi,0x3c
c001af27:	89 c1                	mov    ecx,eax
c001af29:	89 f0                	mov    eax,esi
c001af2b:	f7 f7                	div    edi
c001af2d:	c1 e2 10             	shl    edx,0x10
c001af30:	09 d5                	or     ebp,edx
c001af32:	31 d2                	xor    edx,edx
c001af34:	89 eb                	mov    ebx,ebp
c001af36:	f7 f7                	div    edi
c001af38:	bf 10 0e 00 00       	mov    edi,0xe10
c001af3d:	88 d7                	mov    bh,dl
c001af3f:	89 f0                	mov    eax,esi
c001af41:	31 d2                	xor    edx,edx
c001af43:	f7 f7                	div    edi
c001af45:	bf 18 00 00 00       	mov    edi,0x18
c001af4a:	31 d2                	xor    edx,edx
c001af4c:	f7 f7                	div    edi
c001af4e:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001af53:	88 d3                	mov    bl,dl
c001af55:	53                   	push   ebx
c001af56:	51                   	push   ecx
c001af57:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001af5d:	e8 6a 88 ff ff       	call   c00137cc <Clock::setTimeInDatetimeLocal(datetime_t)>
c001af62:	83 c4 1c             	add    esp,0x1c
c001af65:	83 f0 01             	xor    eax,0x1
c001af68:	5b                   	pop    ebx
c001af69:	0f b6 c0             	movzx  eax,al
c001af6c:	5e                   	pop    esi
c001af6d:	31 d2                	xor    edx,edx
c001af6f:	5f                   	pop    edi
c001af70:	5d                   	pop    ebp
c001af71:	c3                   	ret    

c001af72 <Sys::timezone(regs*)>:
c001af72:	53                   	push   ebx
c001af73:	83 ec 08             	sub    esp,0x8
c001af76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001af7a:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001af7e:	75 17                	jne    c001af97 <Sys::timezone(regs*)+0x25>
c001af80:	83 ec 0c             	sub    esp,0xc
c001af83:	68 59 b8 02 c0       	push   0xc002b859
c001af88:	e8 26 77 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001af8d:	83 c8 ff             	or     eax,0xffffffff
c001af90:	83 c4 10             	add    esp,0x10
c001af93:	89 c2                	mov    edx,eax
c001af95:	eb 20                	jmp    c001afb7 <Sys::timezone(regs*)+0x45>
c001af97:	83 ec 0c             	sub    esp,0xc
c001af9a:	68 6e b8 02 c0       	push   0xc002b86e
c001af9f:	e8 0f 77 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001afa4:	58                   	pop    eax
c001afa5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001afa8:	e8 81 85 ff ff       	call   c001352e <User::loadClockSettings(int)>
c001afad:	83 c4 10             	add    esp,0x10
c001afb0:	b8 01 00 00 00       	mov    eax,0x1
c001afb5:	31 d2                	xor    edx,edx
c001afb7:	83 c4 08             	add    esp,0x8
c001afba:	5b                   	pop    ebx
c001afbb:	c3                   	ret    

c001afbc <Sys::write(regs*)>:
c001afbc:	57                   	push   edi
c001afbd:	56                   	push   esi
c001afbe:	53                   	push   ebx
c001afbf:	83 ec 10             	sub    esp,0x10
c001afc2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001afc6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001afc9:	83 f8 02             	cmp    eax,0x2
c001afcc:	77 10                	ja     c001afde <Sys::write(regs*)+0x22>
c001afce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001afd3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001afd6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001afdc:	eb 0e                	jmp    c001afec <Sys::write(regs*)+0x30>
c001afde:	83 ec 0c             	sub    esp,0xc
c001afe1:	50                   	push   eax
c001afe2:	e8 ca 60 ff ff       	call   c00110b1 <getFromFileDescriptor(int)>
c001afe7:	83 c4 10             	add    esp,0x10
c001afea:	89 c1                	mov    ecx,eax
c001afec:	83 c8 ff             	or     eax,0xffffffff
c001afef:	85 c9                	test   ecx,ecx
c001aff1:	89 c2                	mov    edx,eax
c001aff3:	74 28                	je     c001b01d <Sys::write(regs*)+0x61>
c001aff5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001affd:	31 ff                	xor    edi,edi
c001afff:	83 ec 0c             	sub    esp,0xc
c001b002:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b004:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b008:	52                   	push   edx
c001b009:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b00c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b00f:	57                   	push   edi
c001b010:	56                   	push   esi
c001b011:	51                   	push   ecx
c001b012:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b015:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b019:	83 c4 20             	add    esp,0x20
c001b01c:	99                   	cdq    
c001b01d:	83 c4 10             	add    esp,0x10
c001b020:	5b                   	pop    ebx
c001b021:	5e                   	pop    esi
c001b022:	5f                   	pop    edi
c001b023:	c3                   	ret    

c001b024 <Sys::wsbe(regs*)>:
c001b024:	57                   	push   edi
c001b025:	b9 0b 00 00 00       	mov    ecx,0xb
c001b02a:	56                   	push   esi
c001b02b:	be ad b8 02 c0       	mov    esi,0xc002b8ad
c001b030:	53                   	push   ebx
c001b031:	83 ec 30             	sub    esp,0x30
c001b034:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b038:	fc                   	cld    
c001b039:	83 ec 0c             	sub    esp,0xc
c001b03c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b03e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b042:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b047:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b04a:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b050:	8b 06                	mov    eax,DWORD PTR [esi]
c001b052:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b055:	57                   	push   edi
c001b056:	e8 11 57 fe ff       	call   c000076c <strlen>
c001b05b:	5a                   	pop    edx
c001b05c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b060:	52                   	push   edx
c001b061:	31 d2                	xor    edx,edx
c001b063:	57                   	push   edi
c001b064:	52                   	push   edx
c001b065:	50                   	push   eax
c001b066:	56                   	push   esi
c001b067:	ff d3                	call   ebx
c001b069:	83 c4 14             	add    esp,0x14
c001b06c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b070:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b073:	e8 d1 31 00 00       	call   c001e249 <terminateTask(int)>
c001b078:	83 c4 40             	add    esp,0x40
c001b07b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b080:	5b                   	pop    ebx
c001b081:	31 d2                	xor    edx,edx
c001b083:	5e                   	pop    esi
c001b084:	5f                   	pop    edi
c001b085:	c3                   	ret    

c001b086 <Sys::yield(regs*)>:
c001b086:	57                   	push   edi
c001b087:	56                   	push   esi
c001b088:	53                   	push   ebx
c001b089:	fa                   	cli    
c001b08a:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001b090:	e8 14 29 00 00       	call   c001d9a9 <schedule()>
c001b095:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001b09a:	48                   	dec    eax
c001b09b:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001b0a0:	75 01                	jne    c001b0a3 <Sys::yield(regs*)+0x1d>
c001b0a2:	fb                   	sti    
c001b0a3:	8b 35 d0 df 02 c0    	mov    esi,DWORD PTR ds:0xc002dfd0
c001b0a9:	8b 3d d4 df 02 c0    	mov    edi,DWORD PTR ds:0xc002dfd4
c001b0af:	89 f0                	mov    eax,esi
c001b0b1:	89 fb                	mov    ebx,edi
c001b0b3:	89 f1                	mov    ecx,esi
c001b0b5:	c1 e0 07             	shl    eax,0x7
c001b0b8:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b0bc:	25 80 30 0f 00       	and    eax,0xf3080
c001b0c1:	c1 eb 17             	shr    ebx,0x17
c001b0c4:	31 c8                	xor    eax,ecx
c001b0c6:	89 da                	mov    edx,ebx
c001b0c8:	5b                   	pop    ebx
c001b0c9:	5e                   	pop    esi
c001b0ca:	5f                   	pop    edi
c001b0cb:	c3                   	ret    

c001b0cc <sysCallSeekDir(regs*)>:
c001b0cc:	31 c0                	xor    eax,eax
c001b0ce:	31 d2                	xor    edx,edx
c001b0d0:	c3                   	ret    

c001b0d1 <sysCallTellDir(regs*)>:
c001b0d1:	31 c0                	xor    eax,eax
c001b0d3:	31 d2                	xor    edx,edx
c001b0d5:	c3                   	ret    

c001b0d6 <sysCallVerify(regs*)>:
c001b0d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b0da:	31 d2                	xor    edx,edx
c001b0dc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b0df:	c3                   	ret    

c001b0e0 <sysCallGetArgc(regs*)>:
c001b0e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b0e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b0e8:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b0ee:	99                   	cdq    
c001b0ef:	c3                   	ret    

c001b0f0 <sysFormatDisk(regs*)>:
c001b0f0:	56                   	push   esi
c001b0f1:	53                   	push   ebx
c001b0f2:	53                   	push   ebx
c001b0f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b0f7:	8b 1d d4 da 02 c0    	mov    ebx,DWORD PTR ds:0xc002dad4
c001b0fd:	eb 25                	jmp    c001b124 <sysFormatDisk(regs*)+0x34>
c001b0ff:	83 ec 0c             	sub    esp,0xc
c001b102:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b105:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b107:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b10a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b10d:	50                   	push   eax
c001b10e:	ff 34 85 60 df 02 c0 	push   DWORD PTR [eax*4-0x3ffd20a0]
c001b115:	53                   	push   ebx
c001b116:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b119:	83 c4 20             	add    esp,0x20
c001b11c:	83 f8 08             	cmp    eax,0x8
c001b11f:	75 12                	jne    c001b133 <sysFormatDisk(regs*)+0x43>
c001b121:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b124:	85 db                	test   ebx,ebx
c001b126:	75 d7                	jne    c001b0ff <sysFormatDisk(regs*)+0xf>
c001b128:	59                   	pop    ecx
c001b129:	b8 03 00 00 00       	mov    eax,0x3
c001b12e:	31 d2                	xor    edx,edx
c001b130:	5b                   	pop    ebx
c001b131:	5e                   	pop    esi
c001b132:	c3                   	ret    
c001b133:	85 c0                	test   eax,eax
c001b135:	74 1b                	je     c001b152 <sysFormatDisk(regs*)+0x62>
c001b137:	83 f8 09             	cmp    eax,0x9
c001b13a:	74 0b                	je     c001b147 <sysFormatDisk(regs*)+0x57>
c001b13c:	59                   	pop    ecx
c001b13d:	b8 02 00 00 00       	mov    eax,0x2
c001b142:	31 d2                	xor    edx,edx
c001b144:	5b                   	pop    ebx
c001b145:	5e                   	pop    esi
c001b146:	c3                   	ret    
c001b147:	59                   	pop    ecx
c001b148:	b8 01 00 00 00       	mov    eax,0x1
c001b14d:	31 d2                	xor    edx,edx
c001b14f:	5b                   	pop    ebx
c001b150:	5e                   	pop    esi
c001b151:	c3                   	ret    
c001b152:	59                   	pop    ecx
c001b153:	31 c0                	xor    eax,eax
c001b155:	31 d2                	xor    edx,edx
c001b157:	5b                   	pop    ebx
c001b158:	5e                   	pop    esi
c001b159:	c3                   	ret    

c001b15a <sysSetDiskVolumeLabel(regs*)>:
c001b15a:	56                   	push   esi
c001b15b:	53                   	push   ebx
c001b15c:	53                   	push   ebx
c001b15d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b161:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b164:	83 f8 19             	cmp    eax,0x19
c001b167:	77 29                	ja     c001b192 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b169:	8b 0c 85 60 df 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd20a0]
c001b170:	85 c9                	test   ecx,ecx
c001b172:	74 1e                	je     c001b192 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b174:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b177:	85 d2                	test   edx,edx
c001b179:	74 17                	je     c001b192 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b17b:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b181:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b183:	52                   	push   edx
c001b184:	50                   	push   eax
c001b185:	51                   	push   ecx
c001b186:	53                   	push   ebx
c001b187:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b18a:	83 c4 10             	add    esp,0x10
c001b18d:	99                   	cdq    
c001b18e:	59                   	pop    ecx
c001b18f:	5b                   	pop    ebx
c001b190:	5e                   	pop    esi
c001b191:	c3                   	ret    
c001b192:	59                   	pop    ecx
c001b193:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b198:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b19d:	5b                   	pop    ebx
c001b19e:	5e                   	pop    esi
c001b19f:	c3                   	ret    

c001b1a0 <sysGetDiskVolumeLabel(regs*)>:
c001b1a0:	57                   	push   edi
c001b1a1:	56                   	push   esi
c001b1a2:	53                   	push   ebx
c001b1a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b1aa:	83 fa 19             	cmp    edx,0x19
c001b1ad:	77 34                	ja     c001b1e3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1af:	8b 0c 95 60 df 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd20a0]
c001b1b6:	85 c9                	test   ecx,ecx
c001b1b8:	74 29                	je     c001b1e3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1ba:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b1bd:	85 db                	test   ebx,ebx
c001b1bf:	74 22                	je     c001b1e3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1c1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b1c4:	85 c0                	test   eax,eax
c001b1c6:	74 1b                	je     c001b1e3 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b1c8:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b1ce:	83 ec 0c             	sub    esp,0xc
c001b1d1:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b1d3:	50                   	push   eax
c001b1d4:	53                   	push   ebx
c001b1d5:	52                   	push   edx
c001b1d6:	51                   	push   ecx
c001b1d7:	56                   	push   esi
c001b1d8:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b1db:	83 c4 20             	add    esp,0x20
c001b1de:	99                   	cdq    
c001b1df:	5b                   	pop    ebx
c001b1e0:	5e                   	pop    esi
c001b1e1:	5f                   	pop    edi
c001b1e2:	c3                   	ret    
c001b1e3:	5b                   	pop    ebx
c001b1e4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b1e9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b1ee:	5e                   	pop    esi
c001b1ef:	5f                   	pop    edi
c001b1f0:	c3                   	ret    

c001b1f1 <sysShutdown(regs*)>:
c001b1f1:	83 ec 0c             	sub    esp,0xc
c001b1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b1fb:	85 c0                	test   eax,eax
c001b1fd:	74 18                	je     c001b217 <sysShutdown(regs*)+0x26>
c001b1ff:	83 f8 01             	cmp    eax,0x1
c001b202:	74 38                	je     c001b23c <sysShutdown(regs*)+0x4b>
c001b204:	83 f8 02             	cmp    eax,0x2
c001b207:	74 24                	je     c001b22d <sysShutdown(regs*)+0x3c>
c001b209:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b20e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b213:	83 c4 0c             	add    esp,0xc
c001b216:	c3                   	ret    
c001b217:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001b21c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b21e:	6a 00                	push   0x0
c001b220:	6a 00                	push   0x0
c001b222:	6a 00                	push   0x0
c001b224:	50                   	push   eax
c001b225:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b228:	83 c4 10             	add    esp,0x10
c001b22b:	eb dc                	jmp    c001b209 <sysShutdown(regs*)+0x18>
c001b22d:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001b232:	8b 10                	mov    edx,DWORD PTR [eax]
c001b234:	6a 00                	push   0x0
c001b236:	6a 00                	push   0x0
c001b238:	6a 01                	push   0x1
c001b23a:	eb e8                	jmp    c001b224 <sysShutdown(regs*)+0x33>
c001b23c:	a1 00 00 03 c0       	mov    eax,ds:0xc0030000
c001b241:	85 c0                	test   eax,eax
c001b243:	74 02                	je     c001b247 <sysShutdown(regs*)+0x56>
c001b245:	ff d0                	call   eax
c001b247:	31 c0                	xor    eax,eax
c001b249:	31 d2                	xor    edx,edx
c001b24b:	83 c4 0c             	add    esp,0xc
c001b24e:	c3                   	ret    

c001b24f <sysCallRealpath(regs*)>:
c001b24f:	83 ec 0c             	sub    esp,0xc
c001b252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b256:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b259:	85 d2                	test   edx,edx
c001b25b:	74 07                	je     c001b264 <sysCallRealpath(regs*)+0x15>
c001b25d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b260:	85 c0                	test   eax,eax
c001b262:	75 0b                	jne    c001b26f <sysCallRealpath(regs*)+0x20>
c001b264:	b8 01 00 00 00       	mov    eax,0x1
c001b269:	31 d2                	xor    edx,edx
c001b26b:	83 c4 0c             	add    esp,0xc
c001b26e:	c3                   	ret    
c001b26f:	51                   	push   ecx
c001b270:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b276:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b279:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b27f:	51                   	push   ecx
c001b280:	52                   	push   edx
c001b281:	50                   	push   eax
c001b282:	e8 e1 77 ff ff       	call   c0012a68 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b287:	83 c4 10             	add    esp,0x10
c001b28a:	31 c0                	xor    eax,eax
c001b28c:	31 d2                	xor    edx,edx
c001b28e:	83 c4 0c             	add    esp,0xc
c001b291:	c3                   	ret    

c001b292 <sysCallReadDir(regs*)>:
c001b292:	53                   	push   ebx
c001b293:	83 ec 18             	sub    esp,0x18
c001b296:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b29a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b29d:	83 f8 02             	cmp    eax,0x2
c001b2a0:	76 60                	jbe    c001b302 <sysCallReadDir(regs*)+0x70>
c001b2a2:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001b2a9:	77 48                	ja     c001b2f3 <sysCallReadDir(regs*)+0x61>
c001b2ab:	83 ec 0c             	sub    esp,0xc
c001b2ae:	50                   	push   eax
c001b2af:	e8 fd 5d ff ff       	call   c00110b1 <getFromFileDescriptor(int)>
c001b2b4:	83 c4 10             	add    esp,0x10
c001b2b7:	85 c0                	test   eax,eax
c001b2b9:	74 38                	je     c001b2f3 <sysCallReadDir(regs*)+0x61>
c001b2bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2c3:	83 ec 0c             	sub    esp,0xc
c001b2c6:	8b 10                	mov    edx,DWORD PTR [eax]
c001b2c8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b2cc:	51                   	push   ecx
c001b2cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2d0:	6a 00                	push   0x0
c001b2d2:	68 10 01 00 00       	push   0x110
c001b2d7:	50                   	push   eax
c001b2d8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b2db:	83 c4 20             	add    esp,0x20
c001b2de:	85 c0                	test   eax,eax
c001b2e0:	74 29                	je     c001b30b <sysCallReadDir(regs*)+0x79>
c001b2e2:	83 f8 07             	cmp    eax,0x7
c001b2e5:	74 1b                	je     c001b302 <sysCallReadDir(regs*)+0x70>
c001b2e7:	b8 02 00 00 00       	mov    eax,0x2
c001b2ec:	31 d2                	xor    edx,edx
c001b2ee:	83 c4 18             	add    esp,0x18
c001b2f1:	5b                   	pop    ebx
c001b2f2:	c3                   	ret    
c001b2f3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b2f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b2fd:	83 c4 18             	add    esp,0x18
c001b300:	5b                   	pop    ebx
c001b301:	c3                   	ret    
c001b302:	b8 01 00 00 00       	mov    eax,0x1
c001b307:	31 d2                	xor    edx,edx
c001b309:	eb e3                	jmp    c001b2ee <sysCallReadDir(regs*)+0x5c>
c001b30b:	31 c0                	xor    eax,eax
c001b30d:	31 d2                	xor    edx,edx
c001b30f:	eb dd                	jmp    c001b2ee <sysCallReadDir(regs*)+0x5c>

c001b311 <sysCallIsATTY(regs*)>:
c001b311:	83 ec 0c             	sub    esp,0xc
c001b314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b318:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b31b:	83 f8 02             	cmp    eax,0x2
c001b31e:	76 07                	jbe    c001b327 <sysCallIsATTY(regs*)+0x16>
c001b320:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b325:	75 26                	jne    c001b34d <sysCallIsATTY(regs*)+0x3c>
c001b327:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b32c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b32f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b335:	85 c0                	test   eax,eax
c001b337:	74 24                	je     c001b35d <sysCallIsATTY(regs*)+0x4c>
c001b339:	83 ec 0c             	sub    esp,0xc
c001b33c:	8b 10                	mov    edx,DWORD PTR [eax]
c001b33e:	50                   	push   eax
c001b33f:	ff 12                	call   DWORD PTR [edx]
c001b341:	31 d2                	xor    edx,edx
c001b343:	0f b6 c0             	movzx  eax,al
c001b346:	83 c4 10             	add    esp,0x10
c001b349:	83 c4 0c             	add    esp,0xc
c001b34c:	c3                   	ret    
c001b34d:	83 ec 0c             	sub    esp,0xc
c001b350:	50                   	push   eax
c001b351:	e8 5b 5d ff ff       	call   c00110b1 <getFromFileDescriptor(int)>
c001b356:	83 c4 10             	add    esp,0x10
c001b359:	85 c0                	test   eax,eax
c001b35b:	75 dc                	jne    c001b339 <sysCallIsATTY(regs*)+0x28>
c001b35d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b362:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b367:	83 c4 0c             	add    esp,0xc
c001b36a:	c3                   	ret    

c001b36b <sysCallSeek(regs*)>:
c001b36b:	53                   	push   ebx
c001b36c:	83 ec 08             	sub    esp,0x8
c001b36f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b373:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b376:	8d 50 fd             	lea    edx,[eax-0x3]
c001b379:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b37f:	77 32                	ja     c001b3b3 <sysCallSeek(regs*)+0x48>
c001b381:	83 ec 0c             	sub    esp,0xc
c001b384:	50                   	push   eax
c001b385:	e8 27 5d ff ff       	call   c00110b1 <getFromFileDescriptor(int)>
c001b38a:	83 c4 0c             	add    esp,0xc
c001b38d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b390:	31 db                	xor    ebx,ebx
c001b392:	53                   	push   ebx
c001b393:	51                   	push   ecx
c001b394:	50                   	push   eax
c001b395:	e8 9a 79 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001b39a:	83 c4 10             	add    esp,0x10
c001b39d:	85 c0                	test   eax,eax
c001b39f:	0f 95 c0             	setne  al
c001b3a2:	31 d2                	xor    edx,edx
c001b3a4:	0f b6 c0             	movzx  eax,al
c001b3a7:	f7 d8                	neg    eax
c001b3a9:	83 d2 00             	adc    edx,0x0
c001b3ac:	83 c4 08             	add    esp,0x8
c001b3af:	f7 da                	neg    edx
c001b3b1:	5b                   	pop    ebx
c001b3b2:	c3                   	ret    
c001b3b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b3b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3bd:	83 c4 08             	add    esp,0x8
c001b3c0:	5b                   	pop    ebx
c001b3c1:	c3                   	ret    

c001b3c2 <sysCallTell(regs*)>:
c001b3c2:	53                   	push   ebx
c001b3c3:	83 ec 08             	sub    esp,0x8
c001b3c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b3ca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3cd:	83 f8 02             	cmp    eax,0x2
c001b3d0:	76 4d                	jbe    c001b41f <sysCallTell(regs*)+0x5d>
c001b3d2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b3d7:	76 19                	jbe    c001b3f2 <sysCallTell(regs*)+0x30>
c001b3d9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b3dc:	31 d2                	xor    edx,edx
c001b3de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3e4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3eb:	31 c0                	xor    eax,eax
c001b3ed:	83 c4 08             	add    esp,0x8
c001b3f0:	5b                   	pop    ebx
c001b3f1:	c3                   	ret    
c001b3f2:	83 ec 0c             	sub    esp,0xc
c001b3f5:	50                   	push   eax
c001b3f6:	e8 b6 5c ff ff       	call   c00110b1 <getFromFileDescriptor(int)>
c001b3fb:	5a                   	pop    edx
c001b3fc:	59                   	pop    ecx
c001b3fd:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b400:	50                   	push   eax
c001b401:	e8 84 79 ff ff       	call   c0012d8a <File::tell(unsigned long long*)>
c001b406:	83 c4 10             	add    esp,0x10
c001b409:	85 c0                	test   eax,eax
c001b40b:	0f 95 c0             	setne  al
c001b40e:	31 d2                	xor    edx,edx
c001b410:	0f b6 c0             	movzx  eax,al
c001b413:	f7 d8                	neg    eax
c001b415:	83 d2 00             	adc    edx,0x0
c001b418:	83 c4 08             	add    esp,0x8
c001b41b:	f7 da                	neg    edx
c001b41d:	5b                   	pop    ebx
c001b41e:	c3                   	ret    
c001b41f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b424:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b429:	83 c4 08             	add    esp,0x8
c001b42c:	5b                   	pop    ebx
c001b42d:	c3                   	ret    

c001b42e <sysCallSize(regs*)>:
c001b42e:	53                   	push   ebx
c001b42f:	83 ec 18             	sub    esp,0x18
c001b432:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b436:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b439:	83 f8 02             	cmp    eax,0x2
c001b43c:	76 53                	jbe    c001b491 <sysCallSize(regs*)+0x63>
c001b43e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b443:	76 19                	jbe    c001b45e <sysCallSize(regs*)+0x30>
c001b445:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b448:	31 d2                	xor    edx,edx
c001b44a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b450:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b457:	31 c0                	xor    eax,eax
c001b459:	83 c4 18             	add    esp,0x18
c001b45c:	5b                   	pop    ebx
c001b45d:	c3                   	ret    
c001b45e:	83 ec 0c             	sub    esp,0xc
c001b461:	50                   	push   eax
c001b462:	e8 4a 5c ff ff       	call   c00110b1 <getFromFileDescriptor(int)>
c001b467:	83 c4 0c             	add    esp,0xc
c001b46a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b46e:	52                   	push   edx
c001b46f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b472:	50                   	push   eax
c001b473:	e8 aa 7a ff ff       	call   c0012f22 <File::stat(unsigned long long*, bool*)>
c001b478:	83 c4 10             	add    esp,0x10
c001b47b:	85 c0                	test   eax,eax
c001b47d:	0f 95 c0             	setne  al
c001b480:	31 d2                	xor    edx,edx
c001b482:	0f b6 c0             	movzx  eax,al
c001b485:	f7 d8                	neg    eax
c001b487:	83 d2 00             	adc    edx,0x0
c001b48a:	83 c4 18             	add    esp,0x18
c001b48d:	f7 da                	neg    edx
c001b48f:	5b                   	pop    ebx
c001b490:	c3                   	ret    
c001b491:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b496:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b49b:	83 c4 18             	add    esp,0x18
c001b49e:	5b                   	pop    ebx
c001b49f:	c3                   	ret    

c001b4a0 <sysCallSizeFromFilename(regs*)>:
c001b4a0:	57                   	push   edi
c001b4a1:	56                   	push   esi
c001b4a2:	53                   	push   ebx
c001b4a3:	83 ec 20             	sub    esp,0x20
c001b4a6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b4aa:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001b4ad:	83 fb 02             	cmp    ebx,0x2
c001b4b0:	0f 86 88 00 00 00    	jbe    c001b53e <sysCallSizeFromFilename(regs*)+0x9e>
c001b4b6:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b4bc:	76 1b                	jbe    c001b4d9 <sysCallSizeFromFilename(regs*)+0x39>
c001b4be:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b4c1:	31 d2                	xor    edx,edx
c001b4c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b4c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b4d0:	83 c4 20             	add    esp,0x20
c001b4d3:	31 c0                	xor    eax,eax
c001b4d5:	5b                   	pop    ebx
c001b4d6:	5e                   	pop    esi
c001b4d7:	5f                   	pop    edi
c001b4d8:	c3                   	ret    
c001b4d9:	83 ec 0c             	sub    esp,0xc
c001b4dc:	68 14 01 00 00       	push   0x114
c001b4e1:	e8 b3 40 ff ff       	call   c000f599 <malloc>
c001b4e6:	83 c4 0c             	add    esp,0xc
c001b4e9:	89 c7                	mov    edi,eax
c001b4eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4f0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4f3:	53                   	push   ebx
c001b4f4:	57                   	push   edi
c001b4f5:	e8 18 77 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001b4fa:	83 c4 0c             	add    esp,0xc
c001b4fd:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b501:	50                   	push   eax
c001b502:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b505:	57                   	push   edi
c001b506:	e8 17 7a ff ff       	call   c0012f22 <File::stat(unsigned long long*, bool*)>
c001b50b:	83 c4 10             	add    esp,0x10
c001b50e:	85 ff                	test   edi,edi
c001b510:	74 14                	je     c001b526 <sysCallSizeFromFilename(regs*)+0x86>
c001b512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b516:	8b 17                	mov    edx,DWORD PTR [edi]
c001b518:	83 ec 0c             	sub    esp,0xc
c001b51b:	57                   	push   edi
c001b51c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b51f:	83 c4 10             	add    esp,0x10
c001b522:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b526:	85 c0                	test   eax,eax
c001b528:	0f 95 c0             	setne  al
c001b52b:	31 d2                	xor    edx,edx
c001b52d:	0f b6 c0             	movzx  eax,al
c001b530:	f7 d8                	neg    eax
c001b532:	83 d2 00             	adc    edx,0x0
c001b535:	83 c4 20             	add    esp,0x20
c001b538:	f7 da                	neg    edx
c001b53a:	5b                   	pop    ebx
c001b53b:	5e                   	pop    esi
c001b53c:	5f                   	pop    edi
c001b53d:	c3                   	ret    
c001b53e:	83 c4 20             	add    esp,0x20
c001b541:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b546:	5b                   	pop    ebx
c001b547:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b54c:	5e                   	pop    esi
c001b54d:	5f                   	pop    edi
c001b54e:	c3                   	ret    

c001b54f <sysCallClose(regs*)>:
c001b54f:	53                   	push   ebx
c001b550:	83 ec 08             	sub    esp,0x8
c001b553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b557:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b55a:	83 f8 02             	cmp    eax,0x2
c001b55d:	76 41                	jbe    c001b5a0 <sysCallClose(regs*)+0x51>
c001b55f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001b565:	83 fa 01             	cmp    edx,0x1
c001b568:	76 2d                	jbe    c001b597 <sysCallClose(regs*)+0x48>
c001b56a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b56f:	77 2f                	ja     c001b5a0 <sysCallClose(regs*)+0x51>
c001b571:	83 ec 0c             	sub    esp,0xc
c001b574:	50                   	push   eax
c001b575:	e8 37 5b ff ff       	call   c00110b1 <getFromFileDescriptor(int)>
c001b57a:	89 c3                	mov    ebx,eax
c001b57c:	89 04 24             	mov    DWORD PTR [esp],eax
c001b57f:	e8 50 77 ff ff       	call   c0012cd4 <File::close()>
c001b584:	83 c4 10             	add    esp,0x10
c001b587:	85 db                	test   ebx,ebx
c001b589:	74 0c                	je     c001b597 <sysCallClose(regs*)+0x48>
c001b58b:	83 ec 0c             	sub    esp,0xc
c001b58e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b590:	53                   	push   ebx
c001b591:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b594:	83 c4 10             	add    esp,0x10
c001b597:	31 c0                	xor    eax,eax
c001b599:	31 d2                	xor    edx,edx
c001b59b:	83 c4 08             	add    esp,0x8
c001b59e:	5b                   	pop    ebx
c001b59f:	c3                   	ret    
c001b5a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5aa:	83 c4 08             	add    esp,0x8
c001b5ad:	5b                   	pop    ebx
c001b5ae:	c3                   	ret    

c001b5af <sysCallOpenDir(regs*)>:
c001b5af:	56                   	push   esi
c001b5b0:	53                   	push   ebx
c001b5b1:	53                   	push   ebx
c001b5b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5b6:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b5b9:	85 f6                	test   esi,esi
c001b5bb:	74 59                	je     c001b616 <sysCallOpenDir(regs*)+0x67>
c001b5bd:	83 ec 0c             	sub    esp,0xc
c001b5c0:	68 14 01 00 00       	push   0x114
c001b5c5:	e8 cf 3f ff ff       	call   c000f599 <malloc>
c001b5ca:	83 c4 0c             	add    esp,0xc
c001b5cd:	89 c6                	mov    esi,eax
c001b5cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5d4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b5d7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b5da:	56                   	push   esi
c001b5db:	e8 de 7a ff ff       	call   c00130be <Directory::Directory(char const*, Process*)>
c001b5e0:	83 c4 10             	add    esp,0x10
c001b5e3:	85 f6                	test   esi,esi
c001b5e5:	74 2f                	je     c001b616 <sysCallOpenDir(regs*)+0x67>
c001b5e7:	83 ec 0c             	sub    esp,0xc
c001b5ea:	56                   	push   esi
c001b5eb:	e8 32 7b ff ff       	call   c0013122 <Directory::open()>
c001b5f0:	83 c4 10             	add    esp,0x10
c001b5f3:	85 c0                	test   eax,eax
c001b5f5:	75 1f                	jne    c001b616 <sysCallOpenDir(regs*)+0x67>
c001b5f7:	83 ec 0c             	sub    esp,0xc
c001b5fa:	56                   	push   esi
c001b5fb:	e8 bc 57 ff ff       	call   c0010dbc <UnixFile::getFileDescriptor()>
c001b600:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b603:	83 c4 10             	add    esp,0x10
c001b606:	89 02                	mov    DWORD PTR [edx],eax
c001b608:	c1 f8 1f             	sar    eax,0x1f
c001b60b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b60e:	31 c0                	xor    eax,eax
c001b610:	59                   	pop    ecx
c001b611:	31 d2                	xor    edx,edx
c001b613:	5b                   	pop    ebx
c001b614:	5e                   	pop    esi
c001b615:	c3                   	ret    
c001b616:	59                   	pop    ecx
c001b617:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b61c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b621:	5b                   	pop    ebx
c001b622:	5e                   	pop    esi
c001b623:	c3                   	ret    

c001b624 <sysCallCloseDir(regs*)>:
c001b624:	53                   	push   ebx
c001b625:	83 ec 08             	sub    esp,0x8
c001b628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b62f:	8d 50 fd             	lea    edx,[eax-0x3]
c001b632:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001b638:	77 2f                	ja     c001b669 <sysCallCloseDir(regs*)+0x45>
c001b63a:	83 ec 0c             	sub    esp,0xc
c001b63d:	50                   	push   eax
c001b63e:	e8 6e 5a ff ff       	call   c00110b1 <getFromFileDescriptor(int)>
c001b643:	89 c3                	mov    ebx,eax
c001b645:	89 04 24             	mov    DWORD PTR [esp],eax
c001b648:	e8 31 7b ff ff       	call   c001317e <Directory::close()>
c001b64d:	83 c4 10             	add    esp,0x10
c001b650:	85 db                	test   ebx,ebx
c001b652:	74 0c                	je     c001b660 <sysCallCloseDir(regs*)+0x3c>
c001b654:	83 ec 0c             	sub    esp,0xc
c001b657:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b659:	53                   	push   ebx
c001b65a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b65d:	83 c4 10             	add    esp,0x10
c001b660:	31 c0                	xor    eax,eax
c001b662:	31 d2                	xor    edx,edx
c001b664:	83 c4 08             	add    esp,0x8
c001b667:	5b                   	pop    ebx
c001b668:	c3                   	ret    
c001b669:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b66e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b673:	83 c4 08             	add    esp,0x8
c001b676:	5b                   	pop    ebx
c001b677:	c3                   	ret    

c001b678 <sysCallMakeDir(regs*)>:
c001b678:	56                   	push   esi
c001b679:	53                   	push   ebx
c001b67a:	83 ec 10             	sub    esp,0x10
c001b67d:	68 14 01 00 00       	push   0x114
c001b682:	e8 12 3f ff ff       	call   c000f599 <malloc>
c001b687:	83 c4 0c             	add    esp,0xc
c001b68a:	89 c3                	mov    ebx,eax
c001b68c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b691:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b694:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b698:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b69b:	53                   	push   ebx
c001b69c:	e8 1d 7a ff ff       	call   c00130be <Directory::Directory(char const*, Process*)>
c001b6a1:	83 c4 10             	add    esp,0x10
c001b6a4:	85 db                	test   ebx,ebx
c001b6a6:	74 32                	je     c001b6da <sysCallMakeDir(regs*)+0x62>
c001b6a8:	83 ec 0c             	sub    esp,0xc
c001b6ab:	53                   	push   ebx
c001b6ac:	e8 51 7c ff ff       	call   c0013302 <Directory::create()>
c001b6b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6b4:	89 c6                	mov    esi,eax
c001b6b6:	e8 c3 7a ff ff       	call   c001317e <Directory::close()>
c001b6bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b6c0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b6c3:	83 c4 10             	add    esp,0x10
c001b6c6:	31 c0                	xor    eax,eax
c001b6c8:	59                   	pop    ecx
c001b6c9:	85 f6                	test   esi,esi
c001b6cb:	5b                   	pop    ebx
c001b6cc:	0f 95 c0             	setne  al
c001b6cf:	5e                   	pop    esi
c001b6d0:	31 d2                	xor    edx,edx
c001b6d2:	f7 d8                	neg    eax
c001b6d4:	83 d2 00             	adc    edx,0x0
c001b6d7:	f7 da                	neg    edx
c001b6d9:	c3                   	ret    
c001b6da:	59                   	pop    ecx
c001b6db:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6e0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6e5:	5b                   	pop    ebx
c001b6e6:	5e                   	pop    esi
c001b6e7:	c3                   	ret    

c001b6e8 <sysCallWait(regs*)>:
c001b6e8:	83 ec 10             	sub    esp,0x10
c001b6eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6ef:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b6f2:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b6f5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b6f8:	e8 af 24 00 00       	call   c001dbac <waitTask(int, int*, int)>
c001b6fd:	83 c4 1c             	add    esp,0x1c
c001b700:	99                   	cdq    
c001b701:	c3                   	ret    

c001b702 <sysCallNotImpl(regs*)>:
c001b702:	83 ec 18             	sub    esp,0x18
c001b705:	68 d9 b8 02 c0       	push   0xc002b8d9
c001b70a:	e8 10 e7 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001b70f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b714:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b719:	83 c4 1c             	add    esp,0x1c
c001b71c:	c3                   	ret    

c001b71d <sysPanic(regs*)>:
c001b71d:	83 ec 18             	sub    esp,0x18
c001b720:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b724:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b727:	e8 f3 e6 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001b72c:	b8 01 00 00 00       	mov    eax,0x1
c001b731:	31 d2                	xor    edx,edx
c001b733:	83 c4 1c             	add    esp,0x1c
c001b736:	c3                   	ret    

c001b737 <sysCallRmdir(regs*)>:
c001b737:	56                   	push   esi
c001b738:	53                   	push   ebx
c001b739:	83 ec 20             	sub    esp,0x20
c001b73c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b740:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b743:	68 14 01 00 00       	push   0x114
c001b748:	e8 4c 3e ff ff       	call   c000f599 <malloc>
c001b74d:	83 c4 0c             	add    esp,0xc
c001b750:	89 c3                	mov    ebx,eax
c001b752:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b757:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b75a:	56                   	push   esi
c001b75b:	53                   	push   ebx
c001b75c:	e8 b1 74 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001b761:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b764:	e8 85 76 ff ff       	call   c0012dee <File::unlink()>
c001b769:	83 c4 10             	add    esp,0x10
c001b76c:	85 db                	test   ebx,ebx
c001b76e:	74 14                	je     c001b784 <sysCallRmdir(regs*)+0x4d>
c001b770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b774:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b776:	83 ec 0c             	sub    esp,0xc
c001b779:	53                   	push   ebx
c001b77a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b77d:	83 c4 10             	add    esp,0x10
c001b780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b784:	85 c0                	test   eax,eax
c001b786:	0f 95 c0             	setne  al
c001b789:	31 d2                	xor    edx,edx
c001b78b:	0f b6 c0             	movzx  eax,al
c001b78e:	f7 d8                	neg    eax
c001b790:	83 d2 00             	adc    edx,0x0
c001b793:	83 c4 14             	add    esp,0x14
c001b796:	f7 da                	neg    edx
c001b798:	5b                   	pop    ebx
c001b799:	5e                   	pop    esi
c001b79a:	c3                   	ret    

c001b79b <sysCallUnlink(regs*)>:
c001b79b:	56                   	push   esi
c001b79c:	53                   	push   ebx
c001b79d:	83 ec 20             	sub    esp,0x20
c001b7a0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7a4:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001b7a7:	68 14 01 00 00       	push   0x114
c001b7ac:	e8 e8 3d ff ff       	call   c000f599 <malloc>
c001b7b1:	83 c4 0c             	add    esp,0xc
c001b7b4:	89 c3                	mov    ebx,eax
c001b7b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7bb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b7be:	56                   	push   esi
c001b7bf:	53                   	push   ebx
c001b7c0:	e8 4d 74 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001b7c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b7c8:	e8 21 76 ff ff       	call   c0012dee <File::unlink()>
c001b7cd:	83 c4 10             	add    esp,0x10
c001b7d0:	85 db                	test   ebx,ebx
c001b7d2:	74 14                	je     c001b7e8 <sysCallUnlink(regs*)+0x4d>
c001b7d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7d8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7da:	83 ec 0c             	sub    esp,0xc
c001b7dd:	53                   	push   ebx
c001b7de:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7e1:	83 c4 10             	add    esp,0x10
c001b7e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7e8:	85 c0                	test   eax,eax
c001b7ea:	0f 95 c0             	setne  al
c001b7ed:	31 d2                	xor    edx,edx
c001b7ef:	0f b6 c0             	movzx  eax,al
c001b7f2:	f7 d8                	neg    eax
c001b7f4:	83 d2 00             	adc    edx,0x0
c001b7f7:	83 c4 14             	add    esp,0x14
c001b7fa:	f7 da                	neg    edx
c001b7fc:	5b                   	pop    ebx
c001b7fd:	5e                   	pop    esi
c001b7fe:	c3                   	ret    

c001b7ff <sysCallGetArgv(regs*)>:
c001b7ff:	83 ec 0c             	sub    esp,0xc
c001b802:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b806:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b809:	85 c0                	test   eax,eax
c001b80b:	78 2b                	js     c001b838 <sysCallGetArgv(regs*)+0x39>
c001b80d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b813:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b816:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001b81c:	7d 1a                	jge    c001b838 <sysCallGetArgv(regs*)+0x39>
c001b81e:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001b825:	85 c0                	test   eax,eax
c001b827:	74 17                	je     c001b840 <sysCallGetArgv(regs*)+0x41>
c001b829:	83 ec 08             	sub    esp,0x8
c001b82c:	50                   	push   eax
c001b82d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001b830:	e8 d7 4f fe ff       	call   c000080c <strcpy>
c001b835:	83 c4 10             	add    esp,0x10
c001b838:	31 c0                	xor    eax,eax
c001b83a:	31 d2                	xor    edx,edx
c001b83c:	83 c4 0c             	add    esp,0xc
c001b83f:	c3                   	ret    
c001b840:	b8 01 00 00 00       	mov    eax,0x1
c001b845:	31 d2                	xor    edx,edx
c001b847:	83 c4 0c             	add    esp,0xc
c001b84a:	c3                   	ret    

c001b84b <sysCallTTYName(regs*)>:
c001b84b:	56                   	push   esi
c001b84c:	53                   	push   ebx
c001b84d:	53                   	push   ebx
c001b84e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b852:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001b855:	85 c0                	test   eax,eax
c001b857:	74 5f                	je     c001b8b8 <sysCallTTYName(regs*)+0x6d>
c001b859:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b85c:	83 f8 02             	cmp    eax,0x2
c001b85f:	77 3e                	ja     c001b89f <sysCallTTYName(regs*)+0x54>
c001b861:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b866:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b869:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001b86f:	85 db                	test   ebx,ebx
c001b871:	74 45                	je     c001b8b8 <sysCallTTYName(regs*)+0x6d>
c001b873:	83 ec 0c             	sub    esp,0xc
c001b876:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b878:	53                   	push   ebx
c001b879:	ff 10                	call   DWORD PTR [eax]
c001b87b:	83 c4 10             	add    esp,0x10
c001b87e:	84 c0                	test   al,al
c001b880:	74 41                	je     c001b8c3 <sysCallTTYName(regs*)+0x78>
c001b882:	83 ec 08             	sub    esp,0x8
c001b885:	81 c3 82 00 00 00    	add    ebx,0x82
c001b88b:	53                   	push   ebx
c001b88c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b88f:	e8 78 4f fe ff       	call   c000080c <strcpy>
c001b894:	83 c4 10             	add    esp,0x10
c001b897:	31 c0                	xor    eax,eax
c001b899:	59                   	pop    ecx
c001b89a:	31 d2                	xor    edx,edx
c001b89c:	5b                   	pop    ebx
c001b89d:	5e                   	pop    esi
c001b89e:	c3                   	ret    
c001b89f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b8a4:	74 bb                	je     c001b861 <sysCallTTYName(regs*)+0x16>
c001b8a6:	83 ec 0c             	sub    esp,0xc
c001b8a9:	50                   	push   eax
c001b8aa:	e8 02 58 ff ff       	call   c00110b1 <getFromFileDescriptor(int)>
c001b8af:	83 c4 10             	add    esp,0x10
c001b8b2:	89 c3                	mov    ebx,eax
c001b8b4:	85 db                	test   ebx,ebx
c001b8b6:	75 bb                	jne    c001b873 <sysCallTTYName(regs*)+0x28>
c001b8b8:	59                   	pop    ecx
c001b8b9:	b8 01 00 00 00       	mov    eax,0x1
c001b8be:	31 d2                	xor    edx,edx
c001b8c0:	5b                   	pop    ebx
c001b8c1:	5e                   	pop    esi
c001b8c2:	c3                   	ret    
c001b8c3:	59                   	pop    ecx
c001b8c4:	b8 02 00 00 00       	mov    eax,0x2
c001b8c9:	31 d2                	xor    edx,edx
c001b8cb:	5b                   	pop    ebx
c001b8cc:	5e                   	pop    esi
c001b8cd:	c3                   	ret    

c001b8ce <sysCallUSleep(regs*)>:
c001b8ce:	83 ec 14             	sub    esp,0x14
c001b8d1:	b8 e8 03 00 00       	mov    eax,0x3e8
c001b8d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b8da:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001b8e1:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001b8e4:	01 ca                	add    edx,ecx
c001b8e6:	52                   	push   edx
c001b8e7:	50                   	push   eax
c001b8e8:	e8 96 23 00 00       	call   c001dc83 <nanoSleep(unsigned long long)>
c001b8ed:	31 c0                	xor    eax,eax
c001b8ef:	31 d2                	xor    edx,edx
c001b8f1:	83 c4 1c             	add    esp,0x1c
c001b8f4:	c3                   	ret    

c001b8f5 <sysCallSpawn(regs*)>:
c001b8f5:	56                   	push   esi
c001b8f6:	53                   	push   ebx
c001b8f7:	50                   	push   eax
c001b8f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8fc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b8ff:	85 c0                	test   eax,eax
c001b901:	75 08                	jne    c001b90b <sysCallSpawn(regs*)+0x16>
c001b903:	59                   	pop    ecx
c001b904:	31 c0                	xor    eax,eax
c001b906:	31 d2                	xor    edx,edx
c001b908:	5b                   	pop    ebx
c001b909:	5e                   	pop    esi
c001b90a:	c3                   	ret    
c001b90b:	83 ec 0c             	sub    esp,0xc
c001b90e:	68 3f 07 00 00       	push   0x73f
c001b913:	e8 81 3c ff ff       	call   c000f599 <malloc>
c001b918:	83 c4 10             	add    esp,0x10
c001b91b:	89 c6                	mov    esi,eax
c001b91d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b920:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b923:	85 c0                	test   eax,eax
c001b925:	75 32                	jne    c001b959 <sysCallSpawn(regs*)+0x64>
c001b927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b92c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b92f:	52                   	push   edx
c001b930:	50                   	push   eax
c001b931:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b934:	56                   	push   esi
c001b935:	e8 6e 1a 00 00       	call   c001d3a8 <Process::Process(char const*, Process*, char**)>
c001b93a:	83 c4 10             	add    esp,0x10
c001b93d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b944:	75 bd                	jne    c001b903 <sysCallSpawn(regs*)+0xe>
c001b946:	83 ec 0c             	sub    esp,0xc
c001b949:	56                   	push   esi
c001b94a:	e8 3b 1f 00 00       	call   c001d88a <Process::createUserThread()>
c001b94f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b951:	83 c4 10             	add    esp,0x10
c001b954:	99                   	cdq    
c001b955:	59                   	pop    ecx
c001b956:	5b                   	pop    ebx
c001b957:	5e                   	pop    esi
c001b958:	c3                   	ret    
c001b959:	31 c0                	xor    eax,eax
c001b95b:	eb d2                	jmp    c001b92f <sysCallSpawn(regs*)+0x3a>

c001b95d <sysCallGetEnv(regs*)>:
c001b95d:	57                   	push   edi
c001b95e:	56                   	push   esi
c001b95f:	53                   	push   ebx
c001b960:	83 ec 1c             	sub    esp,0x1c
c001b963:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b967:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b96c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b96f:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b972:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b975:	e8 f1 e3 ff ff       	call   c0019d6b <Krnl::getProcessTotalEnvCount(Process*)>
c001b97a:	83 c4 10             	add    esp,0x10
c001b97d:	39 c7                	cmp    edi,eax
c001b97f:	7c 14                	jl     c001b995 <sysCallGetEnv(regs*)+0x38>
c001b981:	85 f6                	test   esi,esi
c001b983:	75 0b                	jne    c001b990 <sysCallGetEnv(regs*)+0x33>
c001b985:	83 c4 10             	add    esp,0x10
c001b988:	31 c0                	xor    eax,eax
c001b98a:	5b                   	pop    ebx
c001b98b:	31 d2                	xor    edx,edx
c001b98d:	5e                   	pop    esi
c001b98e:	5f                   	pop    edi
c001b98f:	c3                   	ret    
c001b990:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b993:	eb f0                	jmp    c001b985 <sysCallGetEnv(regs*)+0x28>
c001b995:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b999:	52                   	push   edx
c001b99a:	57                   	push   edi
c001b99b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b9a1:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b9a4:	50                   	push   eax
c001b9a5:	e8 e1 e3 ff ff       	call   c0019d8b <Krnl::getProcessEnvPair(Process*, int)>
c001b9aa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b9ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9b1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b9b5:	83 c4 0c             	add    esp,0xc
c001b9b8:	85 c9                	test   ecx,ecx
c001b9ba:	75 23                	jne    c001b9df <sysCallGetEnv(regs*)+0x82>
c001b9bc:	83 ec 0c             	sub    esp,0xc
c001b9bf:	50                   	push   eax
c001b9c0:	e8 a7 4d fe ff       	call   c000076c <strlen>
c001b9c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b9c8:	89 c3                	mov    ebx,eax
c001b9ca:	e8 9d 4d fe ff       	call   c000076c <strlen>
c001b9cf:	83 c4 10             	add    esp,0x10
c001b9d2:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b9d6:	83 c4 10             	add    esp,0x10
c001b9d9:	31 d2                	xor    edx,edx
c001b9db:	5b                   	pop    ebx
c001b9dc:	5e                   	pop    esi
c001b9dd:	5f                   	pop    edi
c001b9de:	c3                   	ret    
c001b9df:	83 ec 08             	sub    esp,0x8
c001b9e2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b9e5:	50                   	push   eax
c001b9e6:	56                   	push   esi
c001b9e7:	e8 20 4e fe ff       	call   c000080c <strcpy>
c001b9ec:	58                   	pop    eax
c001b9ed:	5a                   	pop    edx
c001b9ee:	68 f3 b8 02 c0       	push   0xc002b8f3
c001b9f3:	56                   	push   esi
c001b9f4:	e8 53 4f fe ff       	call   c000094c <strcat>
c001b9f9:	59                   	pop    ecx
c001b9fa:	5b                   	pop    ebx
c001b9fb:	57                   	push   edi
c001b9fc:	56                   	push   esi
c001b9fd:	e8 4a 4f fe ff       	call   c000094c <strcat>
c001ba02:	83 c4 10             	add    esp,0x10
c001ba05:	e9 7b ff ff ff       	jmp    c001b985 <sysCallGetEnv(regs*)+0x28>

c001ba0a <sysAppSettings(regs*)>:
c001ba0a:	57                   	push   edi
c001ba0b:	56                   	push   esi
c001ba0c:	56                   	push   esi
c001ba0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ba11:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba14:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001ba1a:	25 e0 1f 00 00       	and    eax,0x1fe0
c001ba1f:	66 3d c0 09          	cmp    ax,0x9c0
c001ba23:	75 2e                	jne    c001ba53 <sysAppSettings(regs*)+0x49>
c001ba25:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001ba2b:	83 e0 1f             	and    eax,0x1f
c001ba2e:	3c 01                	cmp    al,0x1
c001ba30:	74 2c                	je     c001ba5e <sysAppSettings(regs*)+0x54>
c001ba32:	3c 07                	cmp    al,0x7
c001ba34:	0f 84 b3 00 00 00    	je     c001baed <sysAppSettings(regs*)+0xe3>
c001ba3a:	84 c0                	test   al,al
c001ba3c:	0f 84 d2 00 00 00    	je     c001bb14 <sysAppSettings(regs*)+0x10a>
c001ba42:	3c 08                	cmp    al,0x8
c001ba44:	74 63                	je     c001baa9 <sysAppSettings(regs*)+0x9f>
c001ba46:	59                   	pop    ecx
c001ba47:	0f b6 c0             	movzx  eax,al
c001ba4a:	5e                   	pop    esi
c001ba4b:	05 e8 03 00 00       	add    eax,0x3e8
c001ba50:	5f                   	pop    edi
c001ba51:	99                   	cdq    
c001ba52:	c3                   	ret    
c001ba53:	b8 01 00 00 00       	mov    eax,0x1
c001ba58:	59                   	pop    ecx
c001ba59:	31 d2                	xor    edx,edx
c001ba5b:	5e                   	pop    esi
c001ba5c:	5f                   	pop    edi
c001ba5d:	c3                   	ret    
c001ba5e:	50                   	push   eax
c001ba5f:	68 00 01 00 00       	push   0x100
c001ba64:	6a 00                	push   0x0
c001ba66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba6b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba6e:	83 c0 0c             	add    eax,0xc
c001ba71:	50                   	push   eax
c001ba72:	e8 d9 4c fe ff       	call   c0000750 <memset>
c001ba77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba7c:	b9 ff 00 00 00       	mov    ecx,0xff
c001ba81:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001ba84:	83 c7 0c             	add    edi,0xc
c001ba87:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ba89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba8e:	5a                   	pop    edx
c001ba8f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba92:	59                   	pop    ecx
c001ba93:	8d 50 0c             	lea    edx,[eax+0xc]
c001ba96:	52                   	push   edx
c001ba97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ba9d:	e8 3a 47 ff ff       	call   c00101dc <VgaText::setTitle(char*)>
c001baa2:	83 c4 10             	add    esp,0x10
c001baa5:	31 c0                	xor    eax,eax
c001baa7:	eb af                	jmp    c001ba58 <sysAppSettings(regs*)+0x4e>
c001baa9:	83 ec 08             	sub    esp,0x8
c001baac:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bab2:	83 e0 0f             	and    eax,0xf
c001bab5:	50                   	push   eax
c001bab6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001babb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001babe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bac4:	e8 03 47 ff ff       	call   c00101cc <VgaText::setTitleColour(VgaColour)>
c001bac9:	5f                   	pop    edi
c001baca:	58                   	pop    eax
c001bacb:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001bad1:	c1 e8 04             	shr    eax,0x4
c001bad4:	83 e0 0f             	and    eax,0xf
c001bad7:	50                   	push   eax
c001bad8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001badd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bae0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001bae6:	e8 d1 46 ff ff       	call   c00101bc <VgaText::setTitleTextColour(VgaColour)>
c001baeb:	eb b5                	jmp    c001baa2 <sysAppSettings(regs*)+0x98>
c001baed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001baf2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001baf5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001bafb:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001bb01:	c0 e8 06             	shr    al,0x6
c001bb04:	83 e0 01             	and    eax,0x1
c001bb07:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001bb0d:	31 c0                	xor    eax,eax
c001bb0f:	e9 44 ff ff ff       	jmp    c001ba58 <sysAppSettings(regs*)+0x4e>
c001bb14:	b8 02 00 00 00       	mov    eax,0x2
c001bb19:	e9 3a ff ff ff       	jmp    c001ba58 <sysAppSettings(regs*)+0x4e>

c001bb1e <sysSetFatAttrib(regs*)>:
c001bb1e:	57                   	push   edi
c001bb1f:	56                   	push   esi
c001bb20:	53                   	push   ebx
c001bb21:	83 ec 1c             	sub    esp,0x1c
c001bb24:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bb28:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bb2b:	68 14 01 00 00       	push   0x114
c001bb30:	e8 64 3a ff ff       	call   c000f599 <malloc>
c001bb35:	83 c4 0c             	add    esp,0xc
c001bb38:	89 c3                	mov    ebx,eax
c001bb3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb3f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb42:	57                   	push   edi
c001bb43:	53                   	push   ebx
c001bb44:	e8 c9 70 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001bb49:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bb4c:	83 c4 0c             	add    esp,0xc
c001bb4f:	0f b6 d4             	movzx  edx,ah
c001bb52:	0f b6 c0             	movzx  eax,al
c001bb55:	52                   	push   edx
c001bb56:	50                   	push   eax
c001bb57:	53                   	push   ebx
c001bb58:	e8 2b 73 ff ff       	call   c0012e88 <File::chfatattr(unsigned char, unsigned char)>
c001bb5d:	83 c4 10             	add    esp,0x10
c001bb60:	85 db                	test   ebx,ebx
c001bb62:	74 14                	je     c001bb78 <sysSetFatAttrib(regs*)+0x5a>
c001bb64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb68:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bb6a:	83 ec 0c             	sub    esp,0xc
c001bb6d:	53                   	push   ebx
c001bb6e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bb71:	83 c4 10             	add    esp,0x10
c001bb74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb78:	85 c0                	test   eax,eax
c001bb7a:	0f 95 c0             	setne  al
c001bb7d:	31 d2                	xor    edx,edx
c001bb7f:	0f b6 c0             	movzx  eax,al
c001bb82:	f7 d8                	neg    eax
c001bb84:	83 d2 00             	adc    edx,0x0
c001bb87:	83 c4 10             	add    esp,0x10
c001bb8a:	f7 da                	neg    edx
c001bb8c:	5b                   	pop    ebx
c001bb8d:	5e                   	pop    esi
c001bb8e:	5f                   	pop    edi
c001bb8f:	c3                   	ret    

c001bb90 <sysPipe(regs*)>:
c001bb90:	57                   	push   edi
c001bb91:	56                   	push   esi
c001bb92:	53                   	push   ebx
c001bb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb97:	83 ec 0c             	sub    esp,0xc
c001bb9a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bb9d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bba0:	6a 20                	push   0x20
c001bba2:	e8 f2 39 ff ff       	call   c000f599 <malloc>
c001bba7:	89 c3                	mov    ebx,eax
c001bba9:	58                   	pop    eax
c001bbaa:	5a                   	pop    edx
c001bbab:	68 00 50 00 00       	push   0x5000
c001bbb0:	53                   	push   ebx
c001bbb1:	e8 9e 43 ff ff       	call   c000ff54 <Pipe::Pipe(int)>
c001bbb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbb9:	e8 fe 51 ff ff       	call   c0010dbc <UnixFile::getFileDescriptor()>
c001bbbe:	89 07                	mov    DWORD PTR [edi],eax
c001bbc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbc3:	e8 f4 51 ff ff       	call   c0010dbc <UnixFile::getFileDescriptor()>
c001bbc8:	83 c4 10             	add    esp,0x10
c001bbcb:	89 06                	mov    DWORD PTR [esi],eax
c001bbcd:	31 d2                	xor    edx,edx
c001bbcf:	5b                   	pop    ebx
c001bbd0:	31 c0                	xor    eax,eax
c001bbd2:	5e                   	pop    esi
c001bbd3:	5f                   	pop    edi
c001bbd4:	c3                   	ret    

c001bbd5 <sysGetUnixTime(regs*)>:
c001bbd5:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001bbda:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bbe0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bbe4:	e9 1b 7a ff ff       	jmp    c0013604 <Clock::timeInSecondsLocal()>

c001bbe9 <string_ends_with(char const*, char const*)>:
c001bbe9:	57                   	push   edi
c001bbea:	56                   	push   esi
c001bbeb:	53                   	push   ebx
c001bbec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bbf0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bbf4:	83 ec 0c             	sub    esp,0xc
c001bbf7:	53                   	push   ebx
c001bbf8:	e8 6f 4b fe ff       	call   c000076c <strlen>
c001bbfd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bc00:	89 c6                	mov    esi,eax
c001bc02:	e8 65 4b fe ff       	call   c000076c <strlen>
c001bc07:	83 c4 10             	add    esp,0x10
c001bc0a:	39 c6                	cmp    esi,eax
c001bc0c:	7d 06                	jge    c001bc14 <string_ends_with(char const*, char const*)+0x2b>
c001bc0e:	5b                   	pop    ebx
c001bc0f:	31 c0                	xor    eax,eax
c001bc11:	5e                   	pop    esi
c001bc12:	5f                   	pop    edi
c001bc13:	c3                   	ret    
c001bc14:	83 ec 08             	sub    esp,0x8
c001bc17:	29 c6                	sub    esi,eax
c001bc19:	57                   	push   edi
c001bc1a:	01 f3                	add    ebx,esi
c001bc1c:	53                   	push   ebx
c001bc1d:	e8 76 4c fe ff       	call   c0000898 <strcmp>
c001bc22:	83 c4 10             	add    esp,0x10
c001bc25:	85 c0                	test   eax,eax
c001bc27:	5b                   	pop    ebx
c001bc28:	0f 94 c0             	sete   al
c001bc2b:	5e                   	pop    esi
c001bc2c:	0f b6 c0             	movzx  eax,al
c001bc2f:	5f                   	pop    edi
c001bc30:	c3                   	ret    

c001bc31 <sysCallOpen(regs*)>:
c001bc31:	56                   	push   esi
c001bc32:	53                   	push   ebx
c001bc33:	81 ec 04 01 00 00    	sub    esp,0x104
c001bc39:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bc40:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bc43:	85 c9                	test   ecx,ecx
c001bc45:	0f 84 ad 01 00 00    	je     c001bdf8 <sysCallOpen(regs*)+0x1c7>
c001bc4b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bc4e:	85 c0                	test   eax,eax
c001bc50:	0f 84 a2 01 00 00    	je     c001bdf8 <sysCallOpen(regs*)+0x1c7>
c001bc56:	52                   	push   edx
c001bc57:	68 f5 b8 02 c0       	push   0xc002b8f5
c001bc5c:	50                   	push   eax
c001bc5d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bc61:	56                   	push   esi
c001bc62:	e8 01 6e ff ff       	call   c0012a68 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bc67:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc6a:	e8 fd 4a fe ff       	call   c000076c <strlen>
c001bc6f:	83 c4 10             	add    esp,0x10
c001bc72:	48                   	dec    eax
c001bc73:	74 1d                	je     c001bc92 <sysCallOpen(regs*)+0x61>
c001bc75:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001bc78:	eb 0f                	jmp    c001bc89 <sysCallOpen(regs*)+0x58>
c001bc7a:	80 fa 3a             	cmp    dl,0x3a
c001bc7d:	74 0f                	je     c001bc8e <sysCallOpen(regs*)+0x5d>
c001bc7f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001bc83:	48                   	dec    eax
c001bc84:	74 0c                	je     c001bc92 <sysCallOpen(regs*)+0x61>
c001bc86:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001bc89:	80 fa 2e             	cmp    dl,0x2e
c001bc8c:	75 ec                	jne    c001bc7a <sysCallOpen(regs*)+0x49>
c001bc8e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001bc92:	83 ec 08             	sub    esp,0x8
c001bc95:	68 f9 b8 02 c0       	push   0xc002b8f9
c001bc9a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc9d:	e8 47 ff ff ff       	call   c001bbe9 <string_ends_with(char const*, char const*)>
c001bca2:	83 c4 10             	add    esp,0x10
c001bca5:	85 c0                	test   eax,eax
c001bca7:	74 1d                	je     c001bcc6 <sysCallOpen(regs*)+0x95>
c001bca9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcac:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001bcb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bcb9:	81 c4 04 01 00 00    	add    esp,0x104
c001bcbf:	31 c0                	xor    eax,eax
c001bcc1:	31 d2                	xor    edx,edx
c001bcc3:	5b                   	pop    ebx
c001bcc4:	5e                   	pop    esi
c001bcc5:	c3                   	ret    
c001bcc6:	83 ec 08             	sub    esp,0x8
c001bcc9:	68 fe b8 02 c0       	push   0xc002b8fe
c001bcce:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bcd1:	e8 13 ff ff ff       	call   c001bbe9 <string_ends_with(char const*, char const*)>
c001bcd6:	83 c4 10             	add    esp,0x10
c001bcd9:	85 c0                	test   eax,eax
c001bcdb:	75 cc                	jne    c001bca9 <sysCallOpen(regs*)+0x78>
c001bcdd:	83 ec 08             	sub    esp,0x8
c001bce0:	68 fa b8 02 c0       	push   0xc002b8fa
c001bce5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bce8:	e8 ab 4b fe ff       	call   c0000898 <strcmp>
c001bced:	83 c4 10             	add    esp,0x10
c001bcf0:	85 c0                	test   eax,eax
c001bcf2:	74 b5                	je     c001bca9 <sysCallOpen(regs*)+0x78>
c001bcf4:	83 ec 08             	sub    esp,0x8
c001bcf7:	68 f9 b8 02 c0       	push   0xc002b8f9
c001bcfc:	56                   	push   esi
c001bcfd:	e8 e7 fe ff ff       	call   c001bbe9 <string_ends_with(char const*, char const*)>
c001bd02:	83 c4 10             	add    esp,0x10
c001bd05:	85 c0                	test   eax,eax
c001bd07:	75 a0                	jne    c001bca9 <sysCallOpen(regs*)+0x78>
c001bd09:	83 ec 08             	sub    esp,0x8
c001bd0c:	68 03 b9 02 c0       	push   0xc002b903
c001bd11:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd14:	e8 d0 fe ff ff       	call   c001bbe9 <string_ends_with(char const*, char const*)>
c001bd19:	83 c4 10             	add    esp,0x10
c001bd1c:	85 c0                	test   eax,eax
c001bd1e:	0f 85 e7 00 00 00    	jne    c001be0b <sysCallOpen(regs*)+0x1da>
c001bd24:	83 ec 08             	sub    esp,0x8
c001bd27:	68 08 b9 02 c0       	push   0xc002b908
c001bd2c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd2f:	e8 b5 fe ff ff       	call   c001bbe9 <string_ends_with(char const*, char const*)>
c001bd34:	83 c4 10             	add    esp,0x10
c001bd37:	85 c0                	test   eax,eax
c001bd39:	0f 85 cc 00 00 00    	jne    c001be0b <sysCallOpen(regs*)+0x1da>
c001bd3f:	83 ec 08             	sub    esp,0x8
c001bd42:	68 04 b9 02 c0       	push   0xc002b904
c001bd47:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd4a:	e8 49 4b fe ff       	call   c0000898 <strcmp>
c001bd4f:	83 c4 10             	add    esp,0x10
c001bd52:	85 c0                	test   eax,eax
c001bd54:	0f 84 b1 00 00 00    	je     c001be0b <sysCallOpen(regs*)+0x1da>
c001bd5a:	83 ec 08             	sub    esp,0x8
c001bd5d:	68 03 b9 02 c0       	push   0xc002b903
c001bd62:	56                   	push   esi
c001bd63:	e8 81 fe ff ff       	call   c001bbe9 <string_ends_with(char const*, char const*)>
c001bd68:	83 c4 10             	add    esp,0x10
c001bd6b:	85 c0                	test   eax,eax
c001bd6d:	0f 85 98 00 00 00    	jne    c001be0b <sysCallOpen(regs*)+0x1da>
c001bd73:	83 ec 0c             	sub    esp,0xc
c001bd76:	68 14 01 00 00       	push   0x114
c001bd7b:	e8 19 38 ff ff       	call   c000f599 <malloc>
c001bd80:	83 c4 0c             	add    esp,0xc
c001bd83:	89 c6                	mov    esi,eax
c001bd85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd8a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd8d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd90:	56                   	push   esi
c001bd91:	e8 7c 6e ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001bd96:	83 c4 10             	add    esp,0x10
c001bd99:	85 f6                	test   esi,esi
c001bd9b:	74 5b                	je     c001bdf8 <sysCallOpen(regs*)+0x1c7>
c001bd9d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bda0:	0f b6 c2             	movzx  eax,dl
c001bda3:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001bda6:	89 d0                	mov    eax,edx
c001bda8:	83 e0 01             	and    eax,0x1
c001bdab:	f6 c2 02             	test   dl,0x2
c001bdae:	74 03                	je     c001bdb3 <sysCallOpen(regs*)+0x182>
c001bdb0:	83 c8 02             	or     eax,0x2
c001bdb3:	f6 c2 04             	test   dl,0x4
c001bdb6:	74 03                	je     c001bdbb <sysCallOpen(regs*)+0x18a>
c001bdb8:	83 c8 04             	or     eax,0x4
c001bdbb:	f6 c2 08             	test   dl,0x8
c001bdbe:	74 03                	je     c001bdc3 <sysCallOpen(regs*)+0x192>
c001bdc0:	83 c8 0a             	or     eax,0xa
c001bdc3:	83 e2 10             	and    edx,0x10
c001bdc6:	74 03                	je     c001bdcb <sysCallOpen(regs*)+0x19a>
c001bdc8:	83 c8 12             	or     eax,0x12
c001bdcb:	83 ec 08             	sub    esp,0x8
c001bdce:	50                   	push   eax
c001bdcf:	56                   	push   esi
c001bdd0:	e8 a1 6e ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c001bdd5:	83 c4 10             	add    esp,0x10
c001bdd8:	85 c0                	test   eax,eax
c001bdda:	75 1c                	jne    c001bdf8 <sysCallOpen(regs*)+0x1c7>
c001bddc:	83 ec 0c             	sub    esp,0xc
c001bddf:	56                   	push   esi
c001bde0:	e8 d7 4f ff ff       	call   c0010dbc <UnixFile::getFileDescriptor()>
c001bde5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bde8:	83 c4 10             	add    esp,0x10
c001bdeb:	89 02                	mov    DWORD PTR [edx],eax
c001bded:	c1 f8 1f             	sar    eax,0x1f
c001bdf0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bdf3:	e9 c1 fe ff ff       	jmp    c001bcb9 <sysCallOpen(regs*)+0x88>
c001bdf8:	81 c4 04 01 00 00    	add    esp,0x104
c001bdfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be03:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be08:	5b                   	pop    ebx
c001be09:	5e                   	pop    esi
c001be0a:	c3                   	ret    
c001be0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001be0e:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001be14:	e9 99 fe ff ff       	jmp    c001bcb2 <sysCallOpen(regs*)+0x81>

c001be19 <Sys::loadSyscalls()>:
c001be19:	c7 05 c0 04 03 c0 86 b0 01 c0 	mov    DWORD PTR ds:0xc00304c0,0xc001b086
c001be23:	c7 05 c4 04 03 c0 7e ac 01 c0 	mov    DWORD PTR ds:0xc00304c4,0xc001ac7e
c001be2d:	c7 05 c8 04 03 c0 6c ae 01 c0 	mov    DWORD PTR ds:0xc00304c8,0xc001ae6c
c001be37:	c7 05 cc 04 03 c0 bc af 01 c0 	mov    DWORD PTR ds:0xc00304cc,0xc001afbc
c001be41:	c7 05 d0 04 03 c0 04 ae 01 c0 	mov    DWORD PTR ds:0xc00304d0,0xc001ae04
c001be4b:	c7 05 d4 04 03 c0 b5 ac 01 c0 	mov    DWORD PTR ds:0xc00304d4,0xc001acb5
c001be55:	c7 05 d8 04 03 c0 96 ac 01 c0 	mov    DWORD PTR ds:0xc00304d8,0xc001ac96
c001be5f:	c7 05 dc 04 03 c0 c1 ae 01 c0 	mov    DWORD PTR ds:0xc00304dc,0xc001aec1
c001be69:	c7 05 e4 04 03 c0 4f b5 01 c0 	mov    DWORD PTR ds:0xc00304e4,0xc001b54f
c001be73:	c7 05 e0 04 03 c0 31 bc 01 c0 	mov    DWORD PTR ds:0xc00304e0,0xc001bc31
c001be7d:	c7 05 e8 04 03 c0 af b5 01 c0 	mov    DWORD PTR ds:0xc00304e8,0xc001b5af
c001be87:	c7 05 ec 04 03 c0 92 b2 01 c0 	mov    DWORD PTR ds:0xc00304ec,0xc001b292
c001be91:	c7 05 f0 04 03 c0 cc b0 01 c0 	mov    DWORD PTR ds:0xc00304f0,0xc001b0cc
c001be9b:	c7 05 f4 04 03 c0 d1 b0 01 c0 	mov    DWORD PTR ds:0xc00304f4,0xc001b0d1
c001bea5:	c7 05 f8 04 03 c0 78 b6 01 c0 	mov    DWORD PTR ds:0xc00304f8,0xc001b678
c001beaf:	c7 05 fc 04 03 c0 24 b6 01 c0 	mov    DWORD PTR ds:0xc00304fc,0xc001b624
c001beb9:	c7 05 00 05 03 c0 6b b3 01 c0 	mov    DWORD PTR ds:0xc0030500,0xc001b36b
c001bec3:	c7 05 04 05 03 c0 c2 b3 01 c0 	mov    DWORD PTR ds:0xc0030504,0xc001b3c2
c001becd:	c7 05 08 05 03 c0 2e b4 01 c0 	mov    DWORD PTR ds:0xc0030508,0xc001b42e
c001bed7:	c7 05 0c 05 03 c0 d6 b0 01 c0 	mov    DWORD PTR ds:0xc003050c,0xc001b0d6
c001bee1:	c7 05 10 05 03 c0 e8 b6 01 c0 	mov    DWORD PTR ds:0xc0030510,0xc001b6e8
c001beeb:	c7 05 14 05 03 c0 02 b7 01 c0 	mov    DWORD PTR ds:0xc0030514,0xc001b702
c001bef5:	c7 05 18 05 03 c0 02 b7 01 c0 	mov    DWORD PTR ds:0xc0030518,0xc001b702
c001beff:	c7 05 1c 05 03 c0 37 b7 01 c0 	mov    DWORD PTR ds:0xc003051c,0xc001b737
c001bf09:	c7 05 20 05 03 c0 9b b7 01 c0 	mov    DWORD PTR ds:0xc0030520,0xc001b79b
c001bf13:	c7 05 24 05 03 c0 e0 b0 01 c0 	mov    DWORD PTR ds:0xc0030524,0xc001b0e0
c001bf1d:	c7 05 28 05 03 c0 ff b7 01 c0 	mov    DWORD PTR ds:0xc0030528,0xc001b7ff
c001bf27:	c7 05 2c 05 03 c0 4f b2 01 c0 	mov    DWORD PTR ds:0xc003052c,0xc001b24f
c001bf31:	c7 05 30 05 03 c0 4b b8 01 c0 	mov    DWORD PTR ds:0xc0030530,0xc001b84b
c001bf3b:	c7 05 34 05 03 c0 11 b3 01 c0 	mov    DWORD PTR ds:0xc0030534,0xc001b311
c001bf45:	c7 05 38 05 03 c0 ce b8 01 c0 	mov    DWORD PTR ds:0xc0030538,0xc001b8ce
c001bf4f:	c7 05 3c 05 03 c0 a0 b4 01 c0 	mov    DWORD PTR ds:0xc003053c,0xc001b4a0
c001bf59:	c7 05 40 05 03 c0 f5 b8 01 c0 	mov    DWORD PTR ds:0xc0030540,0xc001b8f5
c001bf63:	c7 05 44 05 03 c0 5d b9 01 c0 	mov    DWORD PTR ds:0xc0030544,0xc001b95d
c001bf6d:	c7 05 48 05 03 c0 0a ba 01 c0 	mov    DWORD PTR ds:0xc0030548,0xc001ba0a
c001bf77:	c7 05 4c 05 03 c0 f0 b0 01 c0 	mov    DWORD PTR ds:0xc003054c,0xc001b0f0
c001bf81:	c7 05 50 05 03 c0 5a b1 01 c0 	mov    DWORD PTR ds:0xc0030550,0xc001b15a
c001bf8b:	c7 05 54 05 03 c0 a0 b1 01 c0 	mov    DWORD PTR ds:0xc0030554,0xc001b1a0
c001bf95:	c7 05 58 05 03 c0 1e bb 01 c0 	mov    DWORD PTR ds:0xc0030558,0xc001bb1e
c001bf9f:	c7 05 5c 05 03 c0 1d b7 01 c0 	mov    DWORD PTR ds:0xc003055c,0xc001b71d
c001bfa9:	c7 05 60 05 03 c0 f1 b1 01 c0 	mov    DWORD PTR ds:0xc0030560,0xc001b1f1
c001bfb3:	c7 05 64 05 03 c0 90 bb 01 c0 	mov    DWORD PTR ds:0xc0030564,0xc001bb90
c001bfbd:	c7 05 68 05 03 c0 d5 bb 01 c0 	mov    DWORD PTR ds:0xc0030568,0xc001bbd5
c001bfc7:	c7 05 6c 05 03 c0 5c ad 01 c0 	mov    DWORD PTR ds:0xc003056c,0xc001ad5c
c001bfd1:	c7 05 70 05 03 c0 dd ae 01 c0 	mov    DWORD PTR ds:0xc0030570,0xc001aedd
c001bfdb:	c7 05 74 05 03 c0 72 af 01 c0 	mov    DWORD PTR ds:0xc0030574,0xc001af72
c001bfe5:	c7 05 78 05 03 c0 48 ac 01 c0 	mov    DWORD PTR ds:0xc0030578,0xc001ac48
c001bfef:	c7 05 7c 05 03 c0 24 b0 01 c0 	mov    DWORD PTR ds:0xc003057c,0xc001b024
c001bff9:	c7 05 80 05 03 c0 c1 ac 01 c0 	mov    DWORD PTR ds:0xc0030580,0xc001acc1
c001c003:	c7 05 84 05 03 c0 d8 ac 01 c0 	mov    DWORD PTR ds:0xc0030584,0xc001acd8
c001c00d:	c3                   	ret    

c001c00e <Sys::systemCall(regs*, void*)>:
c001c00e:	53                   	push   ebx
c001c00f:	83 ec 08             	sub    esp,0x8
c001c012:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c016:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c019:	83 f8 7f             	cmp    eax,0x7f
c001c01c:	77 16                	ja     c001c034 <Sys::systemCall(regs*, void*)+0x26>
c001c01e:	8b 14 85 c0 04 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfb40]
c001c025:	85 d2                	test   edx,edx
c001c027:	74 0b                	je     c001c034 <Sys::systemCall(regs*, void*)+0x26>
c001c029:	83 ec 0c             	sub    esp,0xc
c001c02c:	53                   	push   ebx
c001c02d:	ff d2                	call   edx
c001c02f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c032:	eb 0d                	jmp    c001c041 <Sys::systemCall(regs*, void*)+0x33>
c001c034:	52                   	push   edx
c001c035:	52                   	push   edx
c001c036:	50                   	push   eax
c001c037:	68 0d b9 02 c0       	push   0xc002b90d
c001c03c:	e8 72 66 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001c041:	83 c4 10             	add    esp,0x10
c001c044:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c049:	31 d2                	xor    edx,edx
c001c04b:	83 c4 08             	add    esp,0x8
c001c04e:	5b                   	pop    ebx
c001c04f:	c3                   	ret    

c001c050 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c050:	55                   	push   ebp
c001c051:	57                   	push   edi
c001c052:	56                   	push   esi
c001c053:	53                   	push   ebx
c001c054:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c05a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c061:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c068:	85 c0                	test   eax,eax
c001c06a:	0f 95 c1             	setne  cl
c001c06d:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c075:	0f 94 c2             	sete   dl
c001c078:	84 d1                	test   cl,dl
c001c07a:	74 23                	je     c001c09f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c07c:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c082:	74 1b                	je     c001c09f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c084:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c08a:	89 da                	mov    edx,ebx
c001c08c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c092:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c098:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c09f:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c0a6:	05 ff 0f 00 00       	add    eax,0xfff
c001c0ab:	83 ec 0c             	sub    esp,0xc
c001c0ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c0b2:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c0b8:	c1 e8 0c             	shr    eax,0xc
c001c0bb:	89 fe                	mov    esi,edi
c001c0bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c0c1:	c1 ee 0c             	shr    esi,0xc
c001c0c4:	6a 01                	push   0x1
c001c0c6:	e8 3c 51 ff ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c001c0cb:	89 c5                	mov    ebp,eax
c001c0cd:	58                   	pop    eax
c001c0ce:	5a                   	pop    edx
c001c0cf:	56                   	push   esi
c001c0d0:	68 21 b9 02 c0       	push   0xc002b921
c001c0d5:	e8 d9 65 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001c0da:	59                   	pop    ecx
c001c0db:	58                   	pop    eax
c001c0dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c0e0:	68 33 b9 02 c0       	push   0xc002b933
c001c0e5:	e8 c9 65 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001c0ea:	83 c4 10             	add    esp,0x10
c001c0ed:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c0f3:	0f 86 31 01 00 00    	jbe    c001c22a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c0f9:	c1 e6 0c             	shl    esi,0xc
c001c0fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0ff:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c102:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c106:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c10d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c110:	01 df                	add    edi,ebx
c001c112:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c115:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c119:	0f 84 08 01 00 00    	je     c001c227 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c11f:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c125:	76 05                	jbe    c001c12c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c127:	bf 00 10 00 00       	mov    edi,0x1000
c001c12c:	83 ec 0c             	sub    esp,0xc
c001c12f:	31 d2                	xor    edx,edx
c001c131:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c138:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c13a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c13e:	50                   	push   eax
c001c13f:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c143:	56                   	push   esi
c001c144:	52                   	push   edx
c001c145:	57                   	push   edi
c001c146:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c14d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c150:	83 c4 20             	add    esp,0x20
c001c153:	85 c0                	test   eax,eax
c001c155:	74 0a                	je     c001c161 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c157:	53                   	push   ebx
c001c158:	53                   	push   ebx
c001c159:	50                   	push   eax
c001c15a:	68 45 b9 02 c0       	push   0xc002b945
c001c15f:	eb 0f                	jmp    c001c170 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c161:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c165:	74 20                	je     c001c187 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c167:	51                   	push   ecx
c001c168:	51                   	push   ecx
c001c169:	6a 00                	push   0x0
c001c16b:	68 70 b9 02 c0       	push   0xc002b970
c001c170:	e8 3e 65 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001c175:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c178:	e8 d0 54 ff ff       	call   c001164d <Virt::freeKernelVirtualPages(unsigned long)>
c001c17d:	83 c4 10             	add    esp,0x10
c001c180:	31 c0                	xor    eax,eax
c001c182:	e9 68 01 00 00       	jmp    c001c2ef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c187:	fa                   	cli    
c001c188:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001c18e:	e8 de 37 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c193:	6a 07                	push   0x7
c001c195:	89 c7                	mov    edi,eax
c001c197:	55                   	push   ebp
c001c198:	50                   	push   eax
c001c199:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c19e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1a1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1a7:	e8 18 58 ff ff       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c1ac:	83 c4 0c             	add    esp,0xc
c001c1af:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c1b6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1bc:	6a 00                	push   0x0
c001c1be:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1c3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1c6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1cc:	e8 4d 56 ff ff       	call   c001181e <VAS::mapOtherVASIn(bool, VAS*)>
c001c1d1:	58                   	pop    eax
c001c1d2:	5a                   	pop    edx
c001c1d3:	68 07 0c 00 00       	push   0xc07
c001c1d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c1dc:	57                   	push   edi
c001c1dd:	89 ef                	mov    edi,ebp
c001c1df:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c1e6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1ec:	6a 00                	push   0x0
c001c1ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1f3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c1f6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c1fc:	e8 7f 5b ff ff       	call   c0011d80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c201:	b9 00 10 00 00       	mov    ecx,0x1000
c001c206:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c208:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001c20d:	83 c4 20             	add    esp,0x20
c001c210:	48                   	dec    eax
c001c211:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001c216:	85 c0                	test   eax,eax
c001c218:	75 01                	jne    c001c21b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c21a:	fb                   	sti    
c001c21b:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c222:	e9 df fe ff ff       	jmp    c001c106 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c227:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c22a:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c232:	0f 86 a9 00 00 00    	jbe    c001c2e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c238:	fa                   	cli    
c001c239:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001c23f:	51                   	push   ecx
c001c240:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c247:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c24d:	6a 00                	push   0x0
c001c24f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c254:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c257:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c25d:	e8 bc 55 ff ff       	call   c001181e <VAS::mapOtherVASIn(bool, VAS*)>
c001c262:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c266:	c1 e6 0c             	shl    esi,0xc
c001c269:	01 de                	add    esi,ebx
c001c26b:	83 c4 10             	add    esp,0x10
c001c26e:	39 de                	cmp    esi,ebx
c001c270:	74 61                	je     c001c2d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c272:	e8 fa 36 ff ff       	call   c000f971 <Phys::allocatePage()>
c001c277:	6a 07                	push   0x7
c001c279:	89 c7                	mov    edi,eax
c001c27b:	55                   	push   ebp
c001c27c:	50                   	push   eax
c001c27d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c282:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c285:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c28b:	e8 34 57 ff ff       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c001c290:	58                   	pop    eax
c001c291:	5a                   	pop    edx
c001c292:	68 07 0c 00 00       	push   0xc07
c001c297:	53                   	push   ebx
c001c298:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c29e:	57                   	push   edi
c001c29f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c2a6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2ac:	6a 00                	push   0x0
c001c2ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c2bc:	e8 bf 5a ff ff       	call   c0011d80 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c2c1:	83 c4 1c             	add    esp,0x1c
c001c2c4:	68 00 10 00 00       	push   0x1000
c001c2c9:	6a 00                	push   0x0
c001c2cb:	55                   	push   ebp
c001c2cc:	e8 7f 44 fe ff       	call   c0000750 <memset>
c001c2d1:	eb 98                	jmp    c001c26b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c2d3:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001c2d8:	48                   	dec    eax
c001c2d9:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001c2de:	75 01                	jne    c001c2e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c2e0:	fb                   	sti    
c001c2e1:	83 ec 0c             	sub    esp,0xc
c001c2e4:	55                   	push   ebp
c001c2e5:	e8 63 53 ff ff       	call   c001164d <Virt::freeKernelVirtualPages(unsigned long)>
c001c2ea:	83 c4 10             	add    esp,0x10
c001c2ed:	b0 01                	mov    al,0x1
c001c2ef:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c2f5:	5b                   	pop    ebx
c001c2f6:	5e                   	pop    esi
c001c2f7:	5f                   	pop    edi
c001c2f8:	5d                   	pop    ebp
c001c2f9:	c3                   	ret    

c001c2fa <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c2fa:	55                   	push   ebp
c001c2fb:	57                   	push   edi
c001c2fc:	56                   	push   esi
c001c2fd:	53                   	push   ebx
c001c2fe:	83 ec 48             	sub    esp,0x48
c001c301:	68 14 01 00 00       	push   0x114
c001c306:	e8 8e 32 ff ff       	call   c000f599 <malloc>
c001c30b:	83 c4 0c             	add    esp,0xc
c001c30e:	89 c6                	mov    esi,eax
c001c310:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c314:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c318:	50                   	push   eax
c001c319:	e8 f4 68 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001c31e:	58                   	pop    eax
c001c31f:	5a                   	pop    edx
c001c320:	6a 01                	push   0x1
c001c322:	56                   	push   esi
c001c323:	e8 4e 69 ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c001c328:	83 c4 10             	add    esp,0x10
c001c32b:	85 c0                	test   eax,eax
c001c32d:	0f 85 47 01 00 00    	jne    c001c47a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c333:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c33b:	83 ec 0c             	sub    esp,0xc
c001c33e:	6a 34                	push   0x34
c001c340:	e8 54 32 ff ff       	call   c000f599 <malloc>
c001c345:	89 c3                	mov    ebx,eax
c001c347:	58                   	pop    eax
c001c348:	8b 06                	mov    eax,DWORD PTR [esi]
c001c34a:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c34e:	57                   	push   edi
c001c34f:	53                   	push   ebx
c001c350:	6a 00                	push   0x0
c001c352:	6a 34                	push   0x34
c001c354:	56                   	push   esi
c001c355:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c358:	83 c4 20             	add    esp,0x20
c001c35b:	85 c0                	test   eax,eax
c001c35d:	0f 85 17 01 00 00    	jne    c001c47a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c363:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c369:	0f 85 0b 01 00 00    	jne    c001c47a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c36f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c372:	85 c0                	test   eax,eax
c001c374:	0f 84 00 01 00 00    	je     c001c47a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c37a:	31 d2                	xor    edx,edx
c001c37c:	55                   	push   ebp
c001c37d:	52                   	push   edx
c001c37e:	50                   	push   eax
c001c37f:	56                   	push   esi
c001c380:	e8 af 69 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001c385:	83 c4 10             	add    esp,0x10
c001c388:	85 c0                	test   eax,eax
c001c38a:	0f 85 ea 00 00 00    	jne    c001c47a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c390:	83 ec 0c             	sub    esp,0xc
c001c393:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c396:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c39a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c39e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3a2:	0f af c2             	imul   eax,edx
c001c3a5:	50                   	push   eax
c001c3a6:	e8 ee 31 ff ff       	call   c000f599 <malloc>
c001c3ab:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c3ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c3b1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3b8:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c3bc:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c3c0:	0f af c2             	imul   eax,edx
c001c3c3:	99                   	cdq    
c001c3c4:	52                   	push   edx
c001c3c5:	50                   	push   eax
c001c3c6:	56                   	push   esi
c001c3c7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c3ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c3cd:	83 c4 20             	add    esp,0x20
c001c3d0:	85 c0                	test   eax,eax
c001c3d2:	0f 84 a2 00 00 00    	je     c001c47a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3d8:	31 d2                	xor    edx,edx
c001c3da:	51                   	push   ecx
c001c3db:	52                   	push   edx
c001c3dc:	50                   	push   eax
c001c3dd:	56                   	push   esi
c001c3de:	e8 51 69 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001c3e3:	83 c4 10             	add    esp,0x10
c001c3e6:	85 c0                	test   eax,eax
c001c3e8:	0f 85 8c 00 00 00    	jne    c001c47a <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c3ee:	83 ec 0c             	sub    esp,0xc
c001c3f1:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c3f5:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c3f9:	31 ed                	xor    ebp,ebp
c001c3fb:	0f af c2             	imul   eax,edx
c001c3fe:	50                   	push   eax
c001c3ff:	e8 95 31 ff ff       	call   c000f599 <malloc>
c001c404:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c406:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c40a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c40d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c411:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c415:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c419:	0f af c2             	imul   eax,edx
c001c41c:	99                   	cdq    
c001c41d:	52                   	push   edx
c001c41e:	50                   	push   eax
c001c41f:	56                   	push   esi
c001c420:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c423:	83 c4 20             	add    esp,0x20
c001c426:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c42e:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c432:	0f 86 80 00 00 00    	jbe    c001c4b8 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c438:	0f b7 fd             	movzx  edi,bp
c001c43b:	c1 e7 05             	shl    edi,0x5
c001c43e:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c442:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c445:	75 6b                	jne    c001c4b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c447:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c44a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c44e:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c451:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c455:	52                   	push   edx
c001c456:	31 d2                	xor    edx,edx
c001c458:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c45b:	52                   	push   edx
c001c45c:	50                   	push   eax
c001c45d:	56                   	push   esi
c001c45e:	e8 d1 68 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001c463:	83 c4 10             	add    esp,0x10
c001c466:	85 c0                	test   eax,eax
c001c468:	74 17                	je     c001c481 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c46a:	83 ec 0c             	sub    esp,0xc
c001c46d:	68 9c b9 02 c0       	push   0xc002b99c
c001c472:	e8 3c 62 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001c477:	83 c4 10             	add    esp,0x10
c001c47a:	31 c0                	xor    eax,eax
c001c47c:	e9 87 00 00 00       	jmp    c001c508 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c481:	83 ec 0c             	sub    esp,0xc
c001c484:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c487:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c48a:	50                   	push   eax
c001c48b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c48f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c493:	56                   	push   esi
c001c494:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c498:	e8 b3 fb ff ff       	call   c001c050 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c49d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c4a1:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c4a5:	83 c4 20             	add    esp,0x20
c001c4a8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c4ac:	73 04                	jae    c001c4b2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c4ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4b2:	45                   	inc    ebp
c001c4b3:	e9 76 ff ff ff       	jmp    c001c42e <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c4b8:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c4bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c4c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4c4:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c4ca:	83 ec 0c             	sub    esp,0xc
c001c4cd:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c4d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c4d8:	05 00 10 00 00       	add    eax,0x1000
c001c4dd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c4e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c4e4:	e8 c0 30 ff ff       	call   c000f5a9 <free>
c001c4e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c4ec:	e8 b8 30 ff ff       	call   c000f5a9 <free>
c001c4f1:	58                   	pop    eax
c001c4f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c4f6:	e8 ae 30 ff ff       	call   c000f5a9 <free>
c001c4fb:	89 34 24             	mov    DWORD PTR [esp],esi
c001c4fe:	e8 d1 67 ff ff       	call   c0012cd4 <File::close()>
c001c503:	83 c4 10             	add    esp,0x10
c001c506:	b0 01                	mov    al,0x1
c001c508:	83 c4 3c             	add    esp,0x3c
c001c50b:	5b                   	pop    ebx
c001c50c:	5e                   	pop    esi
c001c50d:	5f                   	pop    edi
c001c50e:	5d                   	pop    ebp
c001c50f:	c3                   	ret    

c001c510 <Thr::runtimeReferenceHelper()>:
c001c510:	83 ec 18             	sub    esp,0x18
c001c513:	68 a4 b9 02 c0       	push   0xc002b9a4
c001c518:	e8 96 61 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001c51d:	fa                   	cli    
c001c51e:	83 c4 10             	add    esp,0x10
c001c521:	eb fe                	jmp    c001c521 <Thr::runtimeReferenceHelper()+0x11>

c001c523 <Thr::getAddressOfKernelSymbol(char const*)>:
c001c523:	57                   	push   edi
c001c524:	56                   	push   esi
c001c525:	53                   	push   ebx
c001c526:	31 db                	xor    ebx,ebx
c001c528:	39 1d 60 0e 03 c0    	cmp    DWORD PTR ds:0xc0030e60,ebx
c001c52e:	7e 3c                	jle    c001c56c <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c530:	8b 34 9d e0 0d 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcf220]
c001c537:	31 ff                	xor    edi,edi
c001c539:	39 3c 9d e0 0c 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcf320],edi
c001c540:	7e 27                	jle    c001c569 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c542:	50                   	push   eax
c001c543:	50                   	push   eax
c001c544:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c548:	8b 06                	mov    eax,DWORD PTR [esi]
c001c54a:	03 04 9d 60 0d 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcf2a0]
c001c551:	50                   	push   eax
c001c552:	e8 41 43 fe ff       	call   c0000898 <strcmp>
c001c557:	83 c4 10             	add    esp,0x10
c001c55a:	85 c0                	test   eax,eax
c001c55c:	75 05                	jne    c001c563 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c55e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c561:	eb 0b                	jmp    c001c56e <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c563:	83 c6 10             	add    esi,0x10
c001c566:	47                   	inc    edi
c001c567:	eb d0                	jmp    c001c539 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c569:	43                   	inc    ebx
c001c56a:	eb bc                	jmp    c001c528 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c56c:	31 c0                	xor    eax,eax
c001c56e:	5b                   	pop    ebx
c001c56f:	5e                   	pop    esi
c001c570:	5f                   	pop    edi
c001c571:	c3                   	ret    

c001c572 <Thr::loadKernelSymbolTable(char const*)>:
c001c572:	55                   	push   ebp
c001c573:	57                   	push   edi
c001c574:	56                   	push   esi
c001c575:	53                   	push   ebx
c001c576:	83 ec 68             	sub    esp,0x68
c001c579:	8b 35 b0 0e 03 c0    	mov    esi,DWORD PTR ds:0xc0030eb0
c001c57f:	68 14 01 00 00       	push   0x114
c001c584:	e8 10 30 ff ff       	call   c000f599 <malloc>
c001c589:	83 c4 0c             	add    esp,0xc
c001c58c:	89 c3                	mov    ebx,eax
c001c58e:	56                   	push   esi
c001c58f:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c593:	50                   	push   eax
c001c594:	e8 79 66 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001c599:	5e                   	pop    esi
c001c59a:	5f                   	pop    edi
c001c59b:	6a 01                	push   0x1
c001c59d:	53                   	push   ebx
c001c59e:	e8 d3 66 ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c001c5a3:	83 c4 10             	add    esp,0x10
c001c5a6:	85 c0                	test   eax,eax
c001c5a8:	74 0a                	je     c001c5b4 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c5aa:	83 ec 0c             	sub    esp,0xc
c001c5ad:	68 c6 b9 02 c0       	push   0xc002b9c6
c001c5b2:	eb 34                	jmp    c001c5e8 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c5b4:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c5bc:	83 ec 0c             	sub    esp,0xc
c001c5bf:	6a 34                	push   0x34
c001c5c1:	e8 d3 2f ff ff       	call   c000f599 <malloc>
c001c5c6:	59                   	pop    ecx
c001c5c7:	89 c7                	mov    edi,eax
c001c5c9:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c5cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c5cf:	56                   	push   esi
c001c5d0:	57                   	push   edi
c001c5d1:	6a 00                	push   0x0
c001c5d3:	6a 34                	push   0x34
c001c5d5:	53                   	push   ebx
c001c5d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c5d9:	83 c4 20             	add    esp,0x20
c001c5dc:	85 c0                	test   eax,eax
c001c5de:	74 17                	je     c001c5f7 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c5e0:	83 ec 0c             	sub    esp,0xc
c001c5e3:	68 dd b9 02 c0       	push   0xc002b9dd
c001c5e8:	e8 32 d8 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001c5ed:	83 c4 10             	add    esp,0x10
c001c5f0:	31 c0                	xor    eax,eax
c001c5f2:	e9 31 02 00 00       	jmp    c001c828 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c5f7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c5fd:	75 e1                	jne    c001c5e0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c5ff:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c602:	85 c0                	test   eax,eax
c001c604:	74 da                	je     c001c5e0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c606:	52                   	push   edx
c001c607:	31 d2                	xor    edx,edx
c001c609:	52                   	push   edx
c001c60a:	50                   	push   eax
c001c60b:	53                   	push   ebx
c001c60c:	e8 23 67 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	85 c0                	test   eax,eax
c001c616:	75 c8                	jne    c001c5e0 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c618:	83 ec 0c             	sub    esp,0xc
c001c61b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c61f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c623:	31 ed                	xor    ebp,ebp
c001c625:	0f af c2             	imul   eax,edx
c001c628:	50                   	push   eax
c001c629:	e8 6b 2f ff ff       	call   c000f599 <malloc>
c001c62e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c630:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c634:	89 34 24             	mov    DWORD PTR [esp],esi
c001c637:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c63b:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c63f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c643:	0f af c2             	imul   eax,edx
c001c646:	99                   	cdq    
c001c647:	52                   	push   edx
c001c648:	50                   	push   eax
c001c649:	53                   	push   ebx
c001c64a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c64d:	83 c4 20             	add    esp,0x20
c001c650:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c658:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c660:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c668:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c670:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001c674:	0f 86 aa 00 00 00    	jbe    c001c724 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001c67a:	0f b7 f5             	movzx  esi,bp
c001c67d:	6b f6 28             	imul   esi,esi,0x28
c001c680:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001c684:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c687:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c68b:	50                   	push   eax
c001c68c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c690:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001c694:	8b 16                	mov    edx,DWORD PTR [esi]
c001c696:	6b c0 28             	imul   eax,eax,0x28
c001c699:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001c69d:	89 d0                	mov    eax,edx
c001c69f:	31 d2                	xor    edx,edx
c001c6a1:	52                   	push   edx
c001c6a2:	50                   	push   eax
c001c6a3:	53                   	push   ebx
c001c6a4:	e8 8b 66 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001c6a9:	83 c4 0c             	add    esp,0xc
c001c6ac:	6a 20                	push   0x20
c001c6ae:	6a 00                	push   0x0
c001c6b0:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6b4:	52                   	push   edx
c001c6b5:	e8 96 40 fe ff       	call   c0000750 <memset>
c001c6ba:	58                   	pop    eax
c001c6bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6bd:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001c6c1:	51                   	push   ecx
c001c6c2:	8d 54 24 40          	lea    edx,[esp+0x40]
c001c6c6:	52                   	push   edx
c001c6c7:	6a 00                	push   0x0
c001c6c9:	6a 1f                	push   0x1f
c001c6cb:	53                   	push   ebx
c001c6cc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6cf:	83 c4 18             	add    esp,0x18
c001c6d2:	68 f4 b9 02 c0       	push   0xc002b9f4
c001c6d7:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001c6db:	52                   	push   edx
c001c6dc:	e8 b7 41 fe ff       	call   c0000898 <strcmp>
c001c6e1:	83 c4 10             	add    esp,0x10
c001c6e4:	85 c0                	test   eax,eax
c001c6e6:	75 0f                	jne    c001c6f7 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001c6e8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c6eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c6f7:	50                   	push   eax
c001c6f8:	50                   	push   eax
c001c6f9:	68 fc b9 02 c0       	push   0xc002b9fc
c001c6fe:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001c702:	50                   	push   eax
c001c703:	e8 90 41 fe ff       	call   c0000898 <strcmp>
c001c708:	83 c4 10             	add    esp,0x10
c001c70b:	85 c0                	test   eax,eax
c001c70d:	75 0f                	jne    c001c71e <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001c70f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c712:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c716:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c71a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c71e:	45                   	inc    ebp
c001c71f:	e9 4c ff ff ff       	jmp    c001c670 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001c724:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c729:	75 10                	jne    c001c73b <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001c72b:	83 ec 0c             	sub    esp,0xc
c001c72e:	68 04 ba 02 c0       	push   0xc002ba04
c001c733:	e8 e7 d6 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001c738:	83 c4 10             	add    esp,0x10
c001c73b:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001c740:	75 10                	jne    c001c752 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001c742:	83 ec 0c             	sub    esp,0xc
c001c745:	68 04 ba 02 c0       	push   0xc002ba04
c001c74a:	e8 d0 d6 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001c74f:	83 c4 10             	add    esp,0x10
c001c752:	31 d2                	xor    edx,edx
c001c754:	50                   	push   eax
c001c755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c759:	52                   	push   edx
c001c75a:	50                   	push   eax
c001c75b:	53                   	push   ebx
c001c75c:	e8 d3 65 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001c761:	5a                   	pop    edx
c001c762:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c766:	e8 2e 2e ff ff       	call   c000f599 <malloc>
c001c76b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c76f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c773:	31 c9                	xor    ecx,ecx
c001c775:	5e                   	pop    esi
c001c776:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c778:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001c77c:	55                   	push   ebp
c001c77d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c781:	51                   	push   ecx
c001c782:	52                   	push   edx
c001c783:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001c787:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001c78b:	53                   	push   ebx
c001c78c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c78f:	83 c4 14             	add    esp,0x14
c001c792:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c796:	e8 fe 2d ff ff       	call   c000f599 <malloc>
c001c79b:	89 c6                	mov    esi,eax
c001c79d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c79f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7a2:	56                   	push   esi
c001c7a3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001c7a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c7ab:	51                   	push   ecx
c001c7ac:	52                   	push   edx
c001c7ad:	53                   	push   ebx
c001c7ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c7b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c7b5:	8b 15 60 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e60
c001c7bb:	83 c4 1c             	add    esp,0x1c
c001c7be:	c1 e8 04             	shr    eax,0x4
c001c7c1:	89 04 95 e0 0c 03 c0 	mov    DWORD PTR [edx*4-0x3ffcf320],eax
c001c7c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c7cc:	31 d2                	xor    edx,edx
c001c7ce:	52                   	push   edx
c001c7cf:	50                   	push   eax
c001c7d0:	53                   	push   ebx
c001c7d1:	e8 5e 65 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001c7d6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c7d8:	31 d2                	xor    edx,edx
c001c7da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c7dd:	56                   	push   esi
c001c7de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c7e2:	52                   	push   edx
c001c7e3:	50                   	push   eax
c001c7e4:	53                   	push   ebx
c001c7e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7e8:	83 c4 14             	add    esp,0x14
c001c7eb:	53                   	push   ebx
c001c7ec:	e8 e3 64 ff ff       	call   c0012cd4 <File::close()>
c001c7f1:	5d                   	pop    ebp
c001c7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7f6:	e8 ae 2d ff ff       	call   c000f5a9 <free>
c001c7fb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7fe:	e8 a6 2d ff ff       	call   c000f5a9 <free>
c001c803:	a1 60 0e 03 c0       	mov    eax,ds:0xc0030e60
c001c808:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c80c:	8d 50 01             	lea    edx,[eax+0x1]
c001c80f:	89 0c 85 e0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf220],ecx
c001c816:	89 34 85 60 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf2a0],esi
c001c81d:	89 15 60 0e 03 c0    	mov    DWORD PTR ds:0xc0030e60,edx
c001c823:	83 c4 10             	add    esp,0x10
c001c826:	b0 01                	mov    al,0x1
c001c828:	83 c4 5c             	add    esp,0x5c
c001c82b:	5b                   	pop    ebx
c001c82c:	5e                   	pop    esi
c001c82d:	5f                   	pop    edi
c001c82e:	5d                   	pop    ebp
c001c82f:	c3                   	ret    

c001c830 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001c830:	55                   	push   ebp
c001c831:	57                   	push   edi
c001c832:	56                   	push   esi
c001c833:	53                   	push   ebx
c001c834:	81 ec 68 03 00 00    	sub    esp,0x368
c001c83a:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001c841:	8b 1d b0 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030eb0
c001c847:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c84b:	68 14 01 00 00       	push   0x114
c001c850:	e8 44 2d ff ff       	call   c000f599 <malloc>
c001c855:	83 c4 0c             	add    esp,0xc
c001c858:	89 c5                	mov    ebp,eax
c001c85a:	53                   	push   ebx
c001c85b:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001c862:	50                   	push   eax
c001c863:	e8 aa 63 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001c868:	5e                   	pop    esi
c001c869:	5f                   	pop    edi
c001c86a:	6a 01                	push   0x1
c001c86c:	55                   	push   ebp
c001c86d:	e8 04 64 ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c001c872:	83 c4 10             	add    esp,0x10
c001c875:	85 c0                	test   eax,eax
c001c877:	0f 85 a7 06 00 00    	jne    c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c87d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c885:	83 ec 0c             	sub    esp,0xc
c001c888:	6a 34                	push   0x34
c001c88a:	e8 0a 2d ff ff       	call   c000f599 <malloc>
c001c88f:	5b                   	pop    ebx
c001c890:	89 c7                	mov    edi,eax
c001c892:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c896:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c899:	53                   	push   ebx
c001c89a:	57                   	push   edi
c001c89b:	6a 00                	push   0x0
c001c89d:	6a 34                	push   0x34
c001c89f:	55                   	push   ebp
c001c8a0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c8a3:	83 c4 20             	add    esp,0x20
c001c8a6:	85 c0                	test   eax,eax
c001c8a8:	0f 85 76 06 00 00    	jne    c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8ae:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c8b4:	0f 85 6a 06 00 00    	jne    c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8ba:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c8bd:	85 c0                	test   eax,eax
c001c8bf:	0f 84 5f 06 00 00    	je     c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8c5:	31 d2                	xor    edx,edx
c001c8c7:	51                   	push   ecx
c001c8c8:	52                   	push   edx
c001c8c9:	50                   	push   eax
c001c8ca:	55                   	push   ebp
c001c8cb:	e8 64 64 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001c8d0:	83 c4 10             	add    esp,0x10
c001c8d3:	85 c0                	test   eax,eax
c001c8d5:	0f 85 49 06 00 00    	jne    c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c8db:	83 ec 0c             	sub    esp,0xc
c001c8de:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001c8e1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c8e5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c8e9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c8ed:	0f af c2             	imul   eax,edx
c001c8f0:	50                   	push   eax
c001c8f1:	e8 a3 2c ff ff       	call   c000f599 <malloc>
c001c8f6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c8f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c8fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c900:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c904:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c908:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c90c:	0f af c2             	imul   eax,edx
c001c90f:	99                   	cdq    
c001c910:	52                   	push   edx
c001c911:	50                   	push   eax
c001c912:	55                   	push   ebp
c001c913:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c916:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001c919:	83 c4 20             	add    esp,0x20
c001c91c:	85 c0                	test   eax,eax
c001c91e:	0f 84 00 06 00 00    	je     c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c924:	52                   	push   edx
c001c925:	31 d2                	xor    edx,edx
c001c927:	52                   	push   edx
c001c928:	50                   	push   eax
c001c929:	55                   	push   ebp
c001c92a:	e8 05 64 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001c92f:	83 c4 10             	add    esp,0x10
c001c932:	85 c0                	test   eax,eax
c001c934:	0f 85 ea 05 00 00    	jne    c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c93a:	83 ec 0c             	sub    esp,0xc
c001c93d:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c941:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c945:	31 f6                	xor    esi,esi
c001c947:	0f af c2             	imul   eax,edx
c001c94a:	50                   	push   eax
c001c94b:	e8 49 2c ff ff       	call   c000f599 <malloc>
c001c950:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c953:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c957:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c95a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c95e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c962:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c966:	0f af c2             	imul   eax,edx
c001c969:	99                   	cdq    
c001c96a:	52                   	push   edx
c001c96b:	50                   	push   eax
c001c96c:	55                   	push   ebp
c001c96d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c970:	83 c4 20             	add    esp,0x20
c001c973:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c977:	0f 86 8a 00 00 00    	jbe    c001ca07 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c97d:	0f b7 de             	movzx  ebx,si
c001c980:	c1 e3 05             	shl    ebx,0x5
c001c983:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001c987:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c98a:	75 75                	jne    c001ca01 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c98c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c98f:	31 d2                	xor    edx,edx
c001c991:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c995:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c998:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c99c:	50                   	push   eax
c001c99d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c9a0:	52                   	push   edx
c001c9a1:	50                   	push   eax
c001c9a2:	55                   	push   ebp
c001c9a3:	e8 8c 63 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001c9a8:	83 c4 10             	add    esp,0x10
c001c9ab:	85 c0                	test   eax,eax
c001c9ad:	0f 85 71 05 00 00    	jne    c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001c9b3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c9ba:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c9bd:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001c9c1:	31 d2                	xor    edx,edx
c001c9c3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c9c7:	83 ec 0c             	sub    esp,0xc
c001c9ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c9ce:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c9d5:	50                   	push   eax
c001c9d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9de:	52                   	push   edx
c001c9df:	50                   	push   eax
c001c9e0:	55                   	push   ebp
c001c9e1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9e4:	83 c4 1c             	add    esp,0x1c
c001c9e7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9ea:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c9ed:	50                   	push   eax
c001c9ee:	6a 00                	push   0x0
c001c9f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c9f4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001c9f8:	50                   	push   eax
c001c9f9:	e8 52 3d fe ff       	call   c0000750 <memset>
c001c9fe:	83 c4 10             	add    esp,0x10
c001ca01:	46                   	inc    esi
c001ca02:	e9 6c ff ff ff       	jmp    c001c973 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001ca07:	53                   	push   ebx
c001ca08:	31 db                	xor    ebx,ebx
c001ca0a:	68 00 01 00 00       	push   0x100
c001ca0f:	6a 00                	push   0x0
c001ca11:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001ca15:	50                   	push   eax
c001ca16:	e8 35 3d fe ff       	call   c0000750 <memset>
c001ca1b:	83 c4 0c             	add    esp,0xc
c001ca1e:	68 00 01 00 00       	push   0x100
c001ca23:	6a 00                	push   0x0
c001ca25:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001ca2c:	50                   	push   eax
c001ca2d:	e8 1e 3d fe ff       	call   c0000750 <memset>
c001ca32:	83 c4 10             	add    esp,0x10
c001ca35:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca3d:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001ca45:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001ca4d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ca55:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001ca5d:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001ca61:	0f 86 30 01 00 00    	jbe    c001cb97 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ca67:	0f b7 f3             	movzx  esi,bx
c001ca6a:	6b f6 28             	imul   esi,esi,0x28
c001ca6d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca71:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca78:	52                   	push   edx
c001ca79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca7d:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ca81:	8b 06                	mov    eax,DWORD PTR [esi]
c001ca83:	6b d2 28             	imul   edx,edx,0x28
c001ca86:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ca8a:	31 d2                	xor    edx,edx
c001ca8c:	52                   	push   edx
c001ca8d:	50                   	push   eax
c001ca8e:	55                   	push   ebp
c001ca8f:	e8 a0 62 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001ca94:	83 c4 0c             	add    esp,0xc
c001ca97:	6a 20                	push   0x20
c001ca99:	6a 00                	push   0x0
c001ca9b:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001caa2:	51                   	push   ecx
c001caa3:	e8 a8 3c fe ff       	call   c0000750 <memset>
c001caa8:	59                   	pop    ecx
c001caa9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001caac:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cab0:	52                   	push   edx
c001cab1:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001cab8:	51                   	push   ecx
c001cab9:	6a 00                	push   0x0
c001cabb:	6a 1f                	push   0x1f
c001cabd:	55                   	push   ebp
c001cabe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cac1:	83 c4 1c             	add    esp,0x1c
c001cac4:	6a 09                	push   0x9
c001cac6:	68 1e ba 02 c0       	push   0xc002ba1e
c001cacb:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001cad2:	51                   	push   ecx
c001cad3:	e8 74 3b fe ff       	call   c000064c <memcmp>
c001cad8:	83 c4 10             	add    esp,0x10
c001cadb:	85 c0                	test   eax,eax
c001cadd:	75 21                	jne    c001cb00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001cadf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cae3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cae7:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001caeb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001caef:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001caf2:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001caf9:	89 d0                	mov    eax,edx
c001cafb:	40                   	inc    eax
c001cafc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb00:	50                   	push   eax
c001cb01:	6a 09                	push   0x9
c001cb03:	68 28 ba 02 c0       	push   0xc002ba28
c001cb08:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb0f:	50                   	push   eax
c001cb10:	e8 37 3b fe ff       	call   c000064c <memcmp>
c001cb15:	83 c4 10             	add    esp,0x10
c001cb18:	85 c0                	test   eax,eax
c001cb1a:	75 21                	jne    c001cb3d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001cb1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb20:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb24:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cb28:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb2c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb2f:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001cb36:	89 d0                	mov    eax,edx
c001cb38:	40                   	inc    eax
c001cb39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cb3d:	50                   	push   eax
c001cb3e:	50                   	push   eax
c001cb3f:	68 f4 b9 02 c0       	push   0xc002b9f4
c001cb44:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb4b:	50                   	push   eax
c001cb4c:	e8 47 3d fe ff       	call   c0000898 <strcmp>
c001cb51:	83 c4 10             	add    esp,0x10
c001cb54:	85 c0                	test   eax,eax
c001cb56:	75 0f                	jne    c001cb67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cb58:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cb67:	50                   	push   eax
c001cb68:	50                   	push   eax
c001cb69:	68 fc b9 02 c0       	push   0xc002b9fc
c001cb6e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cb75:	50                   	push   eax
c001cb76:	e8 1d 3d fe ff       	call   c0000898 <strcmp>
c001cb7b:	83 c4 10             	add    esp,0x10
c001cb7e:	85 c0                	test   eax,eax
c001cb80:	75 0f                	jne    c001cb91 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cb82:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cb85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cb89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cb8d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cb91:	43                   	inc    ebx
c001cb92:	e9 c6 fe ff ff       	jmp    c001ca5d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cb97:	31 d2                	xor    edx,edx
c001cb99:	50                   	push   eax
c001cb9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb9e:	52                   	push   edx
c001cb9f:	50                   	push   eax
c001cba0:	55                   	push   ebp
c001cba1:	e8 8e 61 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001cba6:	58                   	pop    eax
c001cba7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbab:	e8 e9 29 ff ff       	call   c000f599 <malloc>
c001cbb0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbb3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cbb7:	31 d2                	xor    edx,edx
c001cbb9:	58                   	pop    eax
c001cbba:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cbbe:	53                   	push   ebx
c001cbbf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cbc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbc7:	52                   	push   edx
c001cbc8:	50                   	push   eax
c001cbc9:	55                   	push   ebp
c001cbca:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbcd:	83 c4 14             	add    esp,0x14
c001cbd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbd4:	e8 c0 29 ff ff       	call   c000f599 <malloc>
c001cbd9:	31 d2                	xor    edx,edx
c001cbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cbdf:	83 c4 0c             	add    esp,0xc
c001cbe2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cbe6:	52                   	push   edx
c001cbe7:	50                   	push   eax
c001cbe8:	55                   	push   ebp
c001cbe9:	e8 46 61 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001cbee:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cbf1:	31 d2                	xor    edx,edx
c001cbf3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cbfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cbfe:	52                   	push   edx
c001cbff:	50                   	push   eax
c001cc00:	55                   	push   ebp
c001cc01:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc04:	83 c4 20             	add    esp,0x20
c001cc07:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cc0f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cc13:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cc17:	0f 84 0b 03 00 00    	je     c001cf28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001cc1d:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cc24:	31 d2                	xor    edx,edx
c001cc26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc2a:	c1 e8 03             	shr    eax,0x3
c001cc2d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cc31:	51                   	push   ecx
c001cc32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc36:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cc3a:	52                   	push   edx
c001cc3b:	50                   	push   eax
c001cc3c:	55                   	push   ebp
c001cc3d:	e8 f2 60 ff ff       	call   c0012d34 <File::seek(unsigned long long)>
c001cc42:	5b                   	pop    ebx
c001cc43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc47:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cc4e:	e8 46 29 ff ff       	call   c000f599 <malloc>
c001cc53:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc56:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc5a:	31 d2                	xor    edx,edx
c001cc5c:	5e                   	pop    esi
c001cc5d:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cc61:	50                   	push   eax
c001cc62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc6a:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001cc71:	52                   	push   edx
c001cc72:	50                   	push   eax
c001cc73:	55                   	push   ebp
c001cc74:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc77:	83 c4 20             	add    esp,0x20
c001cc7a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cc82:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001cc86:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001cc8a:	0f 8d 7c 02 00 00    	jge    c001cf0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001cc90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cc94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc98:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001cc9d:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001cca0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001cca4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cca8:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001ccac:	89 d8                	mov    eax,ebx
c001ccae:	c1 e8 08             	shr    eax,0x8
c001ccb1:	89 c6                	mov    esi,eax
c001ccb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ccb7:	c1 e6 04             	shl    esi,0x4
c001ccba:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001ccbe:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001ccc1:	85 d2                	test   edx,edx
c001ccc3:	0f 85 bf 00 00 00    	jne    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccc9:	83 ec 0c             	sub    esp,0xc
c001cccc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccd0:	03 06                	add    eax,DWORD PTR [esi]
c001ccd2:	50                   	push   eax
c001ccd3:	e8 4b f8 ff ff       	call   c001c523 <Thr::getAddressOfKernelSymbol(char const*)>
c001ccd8:	83 c4 10             	add    esp,0x10
c001ccdb:	89 c2                	mov    edx,eax
c001ccdd:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001cce2:	85 c0                	test   eax,eax
c001cce4:	0f 85 9e 00 00 00    	jne    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001ccea:	83 ec 0c             	sub    esp,0xc
c001cced:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ccf1:	03 06                	add    eax,DWORD PTR [esi]
c001ccf3:	50                   	push   eax
c001ccf4:	e8 46 18 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	89 c2                	mov    edx,eax
c001ccfe:	85 c0                	test   eax,eax
c001cd00:	0f 85 82 00 00 00    	jne    c001cd88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001cd06:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001cd0a:	50                   	push   eax
c001cd0b:	50                   	push   eax
c001cd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd10:	03 06                	add    eax,DWORD PTR [esi]
c001cd12:	50                   	push   eax
c001cd13:	68 32 ba 02 c0       	push   0xc002ba32
c001cd18:	e8 96 59 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001cd1d:	58                   	pop    eax
c001cd1e:	5a                   	pop    edx
c001cd1f:	68 4c ba 02 c0       	push   0xc002ba4c
c001cd24:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd2b:	50                   	push   eax
c001cd2c:	e8 db 3a fe ff       	call   c000080c <strcpy>
c001cd31:	59                   	pop    ecx
c001cd32:	58                   	pop    eax
c001cd33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd37:	03 06                	add    eax,DWORD PTR [esi]
c001cd39:	50                   	push   eax
c001cd3a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd41:	50                   	push   eax
c001cd42:	e8 05 3c fe ff       	call   c000094c <strcat>
c001cd47:	58                   	pop    eax
c001cd48:	5a                   	pop    edx
c001cd49:	68 e2 ba 02 c0       	push   0xc002bae2
c001cd4e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd55:	50                   	push   eax
c001cd56:	e8 f1 3b fe ff       	call   c000094c <strcat>
c001cd5b:	83 c4 10             	add    esp,0x10
c001cd5e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cd63:	0f 84 5d 01 00 00    	je     c001cec6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cd69:	83 ec 0c             	sub    esp,0xc
c001cd6c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd73:	50                   	push   eax
c001cd74:	e8 a6 d0 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001cd79:	83 c4 10             	add    esp,0x10
c001cd7c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001cd80:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cd84:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001cd88:	80 fb 01             	cmp    bl,0x1
c001cd8b:	0f 85 88 00 00 00    	jne    c001ce19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001cd91:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001cd98:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cd9c:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001cda0:	01 ce                	add    esi,ecx
c001cda2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001cda8:	0f 94 c0             	sete   al
c001cdab:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001cdb1:	0f 94 c3             	sete   bl
c001cdb4:	09 c3                	or     ebx,eax
c001cdb6:	8b 06                	mov    eax,DWORD PTR [esi]
c001cdb8:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001cdbd:	74 41                	je     c001ce00 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001cdbf:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001cdc2:	84 db                	test   bl,bl
c001cdc4:	75 15                	jne    c001cddb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001cdc6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cdca:	66 83 f8 0c          	cmp    ax,0xc
c001cdce:	76 05                	jbe    c001cdd5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001cdd0:	b8 0c 00 00 00       	mov    eax,0xc
c001cdd5:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001cdd9:	76 37                	jbe    c001ce12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001cddb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001cddf:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001cde4:	0f 84 dc 00 00 00    	je     c001cec6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001cdea:	83 ec 0c             	sub    esp,0xc
c001cded:	68 63 ba 02 c0       	push   0xc002ba63
c001cdf2:	e8 28 d0 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001cdf7:	83 c4 10             	add    esp,0x10
c001cdfa:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cdfe:	eb 12                	jmp    c001ce12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce00:	01 c1                	add    ecx,eax
c001ce02:	84 db                	test   bl,bl
c001ce04:	75 0c                	jne    c001ce12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce06:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce0a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001ce0e:	77 02                	ja     c001ce12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001ce10:	01 d1                	add    ecx,edx
c001ce12:	89 0e                	mov    DWORD PTR [esi],ecx
c001ce14:	e9 ea 00 00 00       	jmp    c001cf03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce19:	80 fb 02             	cmp    bl,0x2
c001ce1c:	75 7c                	jne    c001ce9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001ce1e:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001ce25:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001ce29:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001ce2d:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001ce33:	74 20                	je     c001ce55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce35:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001ce3b:	74 18                	je     c001ce55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001ce3d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce41:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce46:	66 83 f8 0e          	cmp    ax,0xe
c001ce4a:	77 03                	ja     c001ce4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001ce4c:	8d 48 fc             	lea    ecx,[eax-0x4]
c001ce4f:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001ce53:	76 1f                	jbe    c001ce74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001ce55:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001ce59:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ce5e:	74 66                	je     c001cec6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ce60:	83 ec 0c             	sub    esp,0xc
c001ce63:	68 7f ba 02 c0       	push   0xc002ba7f
c001ce68:	e8 b2 cf ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001ce6d:	83 c4 10             	add    esp,0x10
c001ce70:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ce74:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce76:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001ce7b:	74 13                	je     c001ce90 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001ce7d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ce81:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001ce88:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001ce8c:	01 c8                	add    eax,ecx
c001ce8e:	eb 04                	jmp    c001ce94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001ce90:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001ce94:	01 c2                	add    edx,eax
c001ce96:	89 16                	mov    DWORD PTR [esi],edx
c001ce98:	eb 69                	jmp    c001cf03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001ce9a:	0f b6 db             	movzx  ebx,bl
c001ce9d:	50                   	push   eax
c001ce9e:	50                   	push   eax
c001ce9f:	53                   	push   ebx
c001cea0:	68 9b ba 02 c0       	push   0xc002ba9b
c001cea5:	e8 09 58 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001ceaa:	83 c4 10             	add    esp,0x10
c001cead:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001ceb2:	74 12                	je     c001cec6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001ceb4:	83 ec 0c             	sub    esp,0xc
c001ceb7:	68 a6 ba 02 c0       	push   0xc002baa6
c001cebc:	e8 5e cf ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001cec1:	83 c4 10             	add    esp,0x10
c001cec4:	eb 3d                	jmp    c001cf03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001cec6:	83 ec 0c             	sub    esp,0xc
c001cec9:	55                   	push   ebp
c001ceca:	e8 05 5e ff ff       	call   c0012cd4 <File::close()>
c001cecf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ced2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ced5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ced8:	59                   	pop    ecx
c001ced9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cedd:	e8 c7 26 ff ff       	call   c000f5a9 <free>
c001cee2:	5b                   	pop    ebx
c001cee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cee7:	e8 bd 26 ff ff       	call   c000f5a9 <free>
c001ceec:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ceef:	e8 b5 26 ff ff       	call   c000f5a9 <free>
c001cef4:	5e                   	pop    esi
c001cef5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cef9:	e8 ab 26 ff ff       	call   c000f5a9 <free>
c001cefe:	83 c4 10             	add    esp,0x10
c001cf01:	eb 21                	jmp    c001cf24 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf03:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001cf07:	e9 76 fd ff ff       	jmp    c001cc82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001cf0c:	83 ec 0c             	sub    esp,0xc
c001cf0f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cf13:	e8 91 26 ff ff       	call   c000f5a9 <free>
c001cf18:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001cf1c:	83 c4 10             	add    esp,0x10
c001cf1f:	e9 eb fc ff ff       	jmp    c001cc0f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001cf24:	31 c0                	xor    eax,eax
c001cf26:	eb 33                	jmp    c001cf5b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001cf28:	83 ec 0c             	sub    esp,0xc
c001cf2b:	55                   	push   ebp
c001cf2c:	e8 a3 5d ff ff       	call   c0012cd4 <File::close()>
c001cf31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf34:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cf37:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cf3a:	58                   	pop    eax
c001cf3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cf3f:	e8 65 26 ff ff       	call   c000f5a9 <free>
c001cf44:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cf47:	e8 5d 26 ff ff       	call   c000f5a9 <free>
c001cf4c:	5a                   	pop    edx
c001cf4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf51:	e8 53 26 ff ff       	call   c000f5a9 <free>
c001cf56:	83 c4 10             	add    esp,0x10
c001cf59:	b0 01                	mov    al,0x1
c001cf5b:	81 c4 5c 03 00 00    	add    esp,0x35c
c001cf61:	5b                   	pop    ebx
c001cf62:	5e                   	pop    esi
c001cf63:	5f                   	pop    edi
c001cf64:	5d                   	pop    ebp
c001cf65:	c3                   	ret    

c001cf66 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001cf66:	56                   	push   esi
c001cf67:	31 d2                	xor    edx,edx
c001cf69:	53                   	push   ebx
c001cf6a:	8b 1d c0 06 03 c0    	mov    ebx,DWORD PTR ds:0xc00306c0
c001cf70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cf74:	39 d3                	cmp    ebx,edx
c001cf76:	7e 1b                	jle    c001cf93 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001cf78:	8b 04 95 e0 08 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf720]
c001cf7f:	39 c8                	cmp    eax,ecx
c001cf81:	77 0d                	ja     c001cf90 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001cf83:	8b 34 95 e0 06 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf920]
c001cf8a:	01 c6                	add    esi,eax
c001cf8c:	39 ce                	cmp    esi,ecx
c001cf8e:	77 05                	ja     c001cf95 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001cf90:	42                   	inc    edx
c001cf91:	eb e1                	jmp    c001cf74 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001cf93:	31 c0                	xor    eax,eax
c001cf95:	5b                   	pop    ebx
c001cf96:	5e                   	pop    esi
c001cf97:	c3                   	ret    

c001cf98 <Thr::getDriverNameFromAddress(unsigned long)>:
c001cf98:	53                   	push   ebx
c001cf99:	31 c0                	xor    eax,eax
c001cf9b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cf9f:	8b 1d c0 06 03 c0    	mov    ebx,DWORD PTR ds:0xc00306c0
c001cfa5:	39 c3                	cmp    ebx,eax
c001cfa7:	7e 22                	jle    c001cfcb <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001cfa9:	8b 14 85 e0 08 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf720]
c001cfb0:	39 ca                	cmp    edx,ecx
c001cfb2:	77 14                	ja     c001cfc8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfb4:	03 14 85 e0 06 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf920]
c001cfbb:	39 ca                	cmp    edx,ecx
c001cfbd:	76 09                	jbe    c001cfc8 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001cfbf:	8b 04 85 e0 0a 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf520]
c001cfc6:	eb 05                	jmp    c001cfcd <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001cfc8:	40                   	inc    eax
c001cfc9:	eb da                	jmp    c001cfa5 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001cfcb:	31 c0                	xor    eax,eax
c001cfcd:	5b                   	pop    ebx
c001cfce:	c3                   	ret    

c001cfcf <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001cfcf:	53                   	push   ebx
c001cfd0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001cfd4:	53                   	push   ebx
c001cfd5:	e8 8c ff ff ff       	call   c001cf66 <Thr::getDriverBaseFromAddress(unsigned long)>
c001cfda:	5a                   	pop    edx
c001cfdb:	31 d2                	xor    edx,edx
c001cfdd:	85 c0                	test   eax,eax
c001cfdf:	74 04                	je     c001cfe5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001cfe1:	89 da                	mov    edx,ebx
c001cfe3:	29 c2                	sub    edx,eax
c001cfe5:	89 d0                	mov    eax,edx
c001cfe7:	5b                   	pop    ebx
c001cfe8:	c3                   	ret    

c001cfe9 <Thr::loadDLL(char const*, bool)>:
c001cfe9:	55                   	push   ebp
c001cfea:	57                   	push   edi
c001cfeb:	56                   	push   esi
c001cfec:	53                   	push   ebx
c001cfed:	81 ec 34 01 00 00    	sub    esp,0x134
c001cff3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001cffa:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d001:	56                   	push   esi
c001d002:	68 be ba 02 c0       	push   0xc002babe
c001d007:	e8 a7 56 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001d00c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d013:	e8 81 25 ff ff       	call   c000f599 <malloc>
c001d018:	83 c4 0c             	add    esp,0xc
c001d01b:	89 c3                	mov    ebx,eax
c001d01d:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c001d023:	56                   	push   esi
c001d024:	50                   	push   eax
c001d025:	e8 e8 5b ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001d02a:	83 c4 10             	add    esp,0x10
c001d02d:	85 db                	test   ebx,ebx
c001d02f:	75 3c                	jne    c001d06d <Thr::loadDLL(char const*, bool)+0x84>
c001d031:	89 f8                	mov    eax,edi
c001d033:	84 c0                	test   al,al
c001d035:	0f 84 cc 01 00 00    	je     c001d207 <Thr::loadDLL(char const*, bool)+0x21e>
c001d03b:	55                   	push   ebp
c001d03c:	55                   	push   ebp
c001d03d:	68 cf ba 02 c0       	push   0xc002bacf
c001d042:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d046:	55                   	push   ebp
c001d047:	e8 c0 37 fe ff       	call   c000080c <strcpy>
c001d04c:	58                   	pop    eax
c001d04d:	5a                   	pop    edx
c001d04e:	56                   	push   esi
c001d04f:	55                   	push   ebp
c001d050:	e8 f7 38 fe ff       	call   c000094c <strcat>
c001d055:	59                   	pop    ecx
c001d056:	58                   	pop    eax
c001d057:	68 e2 ba 02 c0       	push   0xc002bae2
c001d05c:	55                   	push   ebp
c001d05d:	e8 ea 38 fe ff       	call   c000094c <strcat>
c001d062:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d065:	e8 b5 cd ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001d06a:	83 c4 10             	add    esp,0x10
c001d06d:	51                   	push   ecx
c001d06e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d072:	50                   	push   eax
c001d073:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d077:	50                   	push   eax
c001d078:	53                   	push   ebx
c001d079:	e8 a4 5e ff ff       	call   c0012f22 <File::stat(unsigned long long*, bool*)>
c001d07e:	83 c4 10             	add    esp,0x10
c001d081:	85 db                	test   ebx,ebx
c001d083:	74 0c                	je     c001d091 <Thr::loadDLL(char const*, bool)+0xa8>
c001d085:	83 ec 0c             	sub    esp,0xc
c001d088:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d08a:	53                   	push   ebx
c001d08b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d08e:	83 c4 10             	add    esp,0x10
c001d091:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d096:	75 0a                	jne    c001d0a2 <Thr::loadDLL(char const*, bool)+0xb9>
c001d098:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d09c:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d0a0:	75 3c                	jne    c001d0de <Thr::loadDLL(char const*, bool)+0xf5>
c001d0a2:	89 f8                	mov    eax,edi
c001d0a4:	84 c0                	test   al,al
c001d0a6:	0f 84 43 01 00 00    	je     c001d1ef <Thr::loadDLL(char const*, bool)+0x206>
c001d0ac:	51                   	push   ecx
c001d0ad:	51                   	push   ecx
c001d0ae:	68 cf ba 02 c0       	push   0xc002bacf
c001d0b3:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d0b7:	53                   	push   ebx
c001d0b8:	e8 4f 37 fe ff       	call   c000080c <strcpy>
c001d0bd:	5d                   	pop    ebp
c001d0be:	58                   	pop    eax
c001d0bf:	56                   	push   esi
c001d0c0:	53                   	push   ebx
c001d0c1:	e8 86 38 fe ff       	call   c000094c <strcat>
c001d0c6:	58                   	pop    eax
c001d0c7:	5a                   	pop    edx
c001d0c8:	68 e2 ba 02 c0       	push   0xc002bae2
c001d0cd:	53                   	push   ebx
c001d0ce:	e8 79 38 fe ff       	call   c000094c <strcat>
c001d0d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0d6:	e8 44 cd ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001d0db:	83 c4 10             	add    esp,0x10
c001d0de:	52                   	push   edx
c001d0df:	6a 03                	push   0x3
c001d0e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d0e9:	05 ff 0f 00 00       	add    eax,0xfff
c001d0ee:	83 d2 00             	adc    edx,0x0
c001d0f1:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d0f5:	50                   	push   eax
c001d0f6:	ff 35 d0 da 02 c0    	push   DWORD PTR ds:0xc002dad0
c001d0fc:	e8 c5 49 ff ff       	call   c0011ac6 <VAS::allocatePages(int, int)>
c001d101:	59                   	pop    ecx
c001d102:	89 c3                	mov    ebx,eax
c001d104:	5d                   	pop    ebp
c001d105:	50                   	push   eax
c001d106:	68 62 a0 02 c0       	push   0xc002a062
c001d10b:	e8 a3 55 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001d110:	89 34 24             	mov    DWORD PTR [esp],esi
c001d113:	e8 54 36 fe ff       	call   c000076c <strlen>
c001d118:	8b 2d c0 06 03 c0    	mov    ebp,DWORD PTR ds:0xc00306c0
c001d11e:	40                   	inc    eax
c001d11f:	89 04 24             	mov    DWORD PTR [esp],eax
c001d122:	e8 72 24 ff ff       	call   c000f599 <malloc>
c001d127:	89 04 ad e0 0a 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcf520],eax
c001d12e:	58                   	pop    eax
c001d12f:	a1 c0 06 03 c0       	mov    eax,ds:0xc00306c0
c001d134:	5a                   	pop    edx
c001d135:	56                   	push   esi
c001d136:	ff 34 85 e0 0a 03 c0 	push   DWORD PTR [eax*4-0x3ffcf520]
c001d13d:	e8 ca 36 fe ff       	call   c000080c <strcpy>
c001d142:	a1 c0 06 03 c0       	mov    eax,ds:0xc00306c0
c001d147:	8d 50 01             	lea    edx,[eax+0x1]
c001d14a:	89 1c 85 e0 08 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf720],ebx
c001d151:	89 15 c0 06 03 c0    	mov    DWORD PTR ds:0xc00306c0,edx
c001d157:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d15b:	83 c4 0c             	add    esp,0xc
c001d15e:	89 14 85 e0 06 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf920],edx
c001d165:	6a 01                	push   0x1
c001d167:	53                   	push   ebx
c001d168:	56                   	push   esi
c001d169:	e8 c2 f6 ff ff       	call   c001c830 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d16e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d172:	83 c4 10             	add    esp,0x10
c001d175:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d17a:	0f 85 83 00 00 00    	jne    c001d203 <Thr::loadDLL(char const*, bool)+0x21a>
c001d180:	89 f8                	mov    eax,edi
c001d182:	84 c0                	test   al,al
c001d184:	74 6d                	je     c001d1f3 <Thr::loadDLL(char const*, bool)+0x20a>
c001d186:	83 ec 0c             	sub    esp,0xc
c001d189:	68 e4 ba 02 c0       	push   0xc002bae4
c001d18e:	e8 8c cc ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001d193:	83 c4 10             	add    esp,0x10
c001d196:	eb 5b                	jmp    c001d1f3 <Thr::loadDLL(char const*, bool)+0x20a>
c001d198:	89 ee                	mov    esi,ebp
c001d19a:	50                   	push   eax
c001d19b:	c1 e6 0c             	shl    esi,0xc
c001d19e:	50                   	push   eax
c001d19f:	01 de                	add    esi,ebx
c001d1a1:	56                   	push   esi
c001d1a2:	ff 35 d0 da 02 c0    	push   DWORD PTR ds:0xc002dad0
c001d1a8:	e8 81 44 ff ff       	call   c001162e <VAS::getPageTableEntry(unsigned long)>
c001d1ad:	83 c4 10             	add    esp,0x10
c001d1b0:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d1b3:	75 0c                	jne    c001d1c1 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d1b5:	83 ec 0c             	sub    esp,0xc
c001d1b8:	56                   	push   esi
c001d1b9:	e8 42 27 ff ff       	call   c000f900 <Phys::freePage(unsigned long)>
c001d1be:	83 c4 10             	add    esp,0x10
c001d1c1:	45                   	inc    ebp
c001d1c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1ca:	05 ff 0f 00 00       	add    eax,0xfff
c001d1cf:	bf 00 00 00 00       	mov    edi,0x0
c001d1d4:	83 d2 00             	adc    edx,0x0
c001d1d7:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d1db:	c1 ea 0c             	shr    edx,0xc
c001d1de:	39 c5                	cmp    ebp,eax
c001d1e0:	89 d1                	mov    ecx,edx
c001d1e2:	89 f8                	mov    eax,edi
c001d1e4:	19 c8                	sbb    eax,ecx
c001d1e6:	72 b0                	jb     c001d198 <Thr::loadDLL(char const*, bool)+0x1af>
c001d1e8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d1ed:	75 18                	jne    c001d207 <Thr::loadDLL(char const*, bool)+0x21e>
c001d1ef:	31 db                	xor    ebx,ebx
c001d1f1:	eb 14                	jmp    c001d207 <Thr::loadDLL(char const*, bool)+0x21e>
c001d1f3:	83 ec 0c             	sub    esp,0xc
c001d1f6:	68 03 bb 02 c0       	push   0xc002bb03
c001d1fb:	e8 1f cc ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001d200:	83 c4 10             	add    esp,0x10
c001d203:	31 ed                	xor    ebp,ebp
c001d205:	eb bb                	jmp    c001d1c2 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d207:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d20d:	89 d8                	mov    eax,ebx
c001d20f:	5b                   	pop    ebx
c001d210:	5e                   	pop    esi
c001d211:	5f                   	pop    edi
c001d212:	5d                   	pop    ebp
c001d213:	c3                   	ret    

c001d214 <Thr::executeDLL(unsigned long, void*)>:
c001d214:	56                   	push   esi
c001d215:	53                   	push   ebx
c001d216:	52                   	push   edx
c001d217:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d21b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d21f:	85 db                	test   ebx,ebx
c001d221:	75 10                	jne    c001d233 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d223:	83 ec 0c             	sub    esp,0xc
c001d226:	68 1f bb 02 c0       	push   0xc002bb1f
c001d22b:	e8 ef cb ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001d230:	83 c4 10             	add    esp,0x10
c001d233:	50                   	push   eax
c001d234:	50                   	push   eax
c001d235:	53                   	push   ebx
c001d236:	68 49 bb 02 c0       	push   0xc002bb49
c001d23b:	e8 73 54 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001d240:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d244:	89 d8                	mov    eax,ebx
c001d246:	83 c4 14             	add    esp,0x14
c001d249:	5b                   	pop    ebx
c001d24a:	5e                   	pop    esi
c001d24b:	ff e0                	jmp    eax
c001d24d:	90                   	nop

c001d24e <userModeEntryPoint(void*)>:
c001d24e:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001d253:	48                   	dec    eax
c001d254:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001d259:	75 01                	jne    c001d25c <userModeEntryPoint(void*)+0xe>
c001d25b:	fb                   	sti    
c001d25c:	fb                   	sti    
c001d25d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d262:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d265:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d26b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d26f:	e9 b6 30 fe ff       	jmp    c000032a <goToUsermode>

c001d274 <changeTSS>:
c001d274:	83 ec 14             	sub    esp,0x14
c001d277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d27c:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d27f:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d284:	c1 e2 15             	shl    edx,0x15
c001d287:	29 d0                	sub    eax,edx
c001d289:	50                   	push   eax
c001d28a:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001d28f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d295:	05 7c 11 00 00       	add    eax,0x117c
c001d29a:	50                   	push   eax
c001d29b:	e8 bc 38 ff ff       	call   c0010b5c <TSS::setESP(unsigned long)>
c001d2a0:	83 c4 1c             	add    esp,0x1c
c001d2a3:	c3                   	ret    

c001d2a4 <switchToThread(ThreadControlBlock*)>:
c001d2a4:	57                   	push   edi
c001d2a5:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001d2aa:	56                   	push   esi
c001d2ab:	85 c0                	test   eax,eax
c001d2ad:	53                   	push   ebx
c001d2ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2b2:	0f 85 88 00 00 00    	jne    c001d340 <switchToThread(ThreadControlBlock*)+0x9c>
c001d2b8:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d2bb:	3c ff                	cmp    al,0xff
c001d2bd:	74 7d                	je     c001d33c <switchToThread(ThreadControlBlock*)+0x98>
c001d2bf:	0f b6 d0             	movzx  edx,al
c001d2c2:	b8 84 03 00 00       	mov    eax,0x384
c001d2c7:	29 d0                	sub    eax,edx
c001d2c9:	c1 e0 10             	shl    eax,0x10
c001d2cc:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d2cf:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d2d2:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c001d2d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d2dd:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d2e4:	74 4a                	je     c001d330 <switchToThread(ThreadControlBlock*)+0x8c>
c001d2e6:	0f 31                	rdtsc  
c001d2e8:	a3 c8 0e 03 c0       	mov    ds:0xc0030ec8,eax
c001d2ed:	89 c6                	mov    esi,eax
c001d2ef:	89 d7                	mov    edi,edx
c001d2f1:	2b 35 b8 0e 03 c0    	sub    esi,DWORD PTR ds:0xc0030eb8
c001d2f7:	89 15 cc 0e 03 c0    	mov    DWORD PTR ds:0xc0030ecc,edx
c001d2fd:	1b 3d bc 0e 03 c0    	sbb    edi,DWORD PTR ds:0xc0030ebc
c001d303:	89 35 c0 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec0,esi
c001d309:	a3 b8 0e 03 c0       	mov    ds:0xc0030eb8,eax
c001d30e:	89 3d c4 0e 03 c0    	mov    DWORD PTR ds:0xc0030ec4,edi
c001d314:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d31a:	89 15 bc 0e 03 c0    	mov    DWORD PTR ds:0xc0030ebc,edx
c001d320:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d323:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d326:	01 c6                	add    esi,eax
c001d328:	11 d7                	adc    edi,edx
c001d32a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d32d:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d330:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d334:	5b                   	pop    ebx
c001d335:	5e                   	pop    esi
c001d336:	5f                   	pop    edi
c001d337:	e9 26 30 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d33c:	31 c0                	xor    eax,eax
c001d33e:	eb 8f                	jmp    c001d2cf <switchToThread(ThreadControlBlock*)+0x2b>
c001d340:	5b                   	pop    ebx
c001d341:	c7 05 80 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x1
c001d34b:	5e                   	pop    esi
c001d34c:	5f                   	pop    edi
c001d34d:	c3                   	ret    

c001d34e <Process::addArgs(char**)>:
c001d34e:	57                   	push   edi
c001d34f:	56                   	push   esi
c001d350:	53                   	push   ebx
c001d351:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d355:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d359:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d363:	85 ff                	test   edi,edi
c001d365:	74 3d                	je     c001d3a4 <Process::addArgs(char**)+0x56>
c001d367:	8b 07                	mov    eax,DWORD PTR [edi]
c001d369:	85 c0                	test   eax,eax
c001d36b:	74 37                	je     c001d3a4 <Process::addArgs(char**)+0x56>
c001d36d:	31 db                	xor    ebx,ebx
c001d36f:	83 ec 0c             	sub    esp,0xc
c001d372:	50                   	push   eax
c001d373:	e8 f4 33 fe ff       	call   c000076c <strlen>
c001d378:	40                   	inc    eax
c001d379:	89 04 24             	mov    DWORD PTR [esp],eax
c001d37c:	e8 18 22 ff ff       	call   c000f599 <malloc>
c001d381:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d388:	5a                   	pop    edx
c001d389:	59                   	pop    ecx
c001d38a:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d38d:	43                   	inc    ebx
c001d38e:	50                   	push   eax
c001d38f:	e8 78 34 fe ff       	call   c000080c <strcpy>
c001d394:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d39a:	83 c4 10             	add    esp,0x10
c001d39d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d3a0:	85 c0                	test   eax,eax
c001d3a2:	75 cb                	jne    c001d36f <Process::addArgs(char**)+0x21>
c001d3a4:	5b                   	pop    ebx
c001d3a5:	5e                   	pop    esi
c001d3a6:	5f                   	pop    edi
c001d3a7:	c3                   	ret    

c001d3a8 <Process::Process(char const*, Process*, char**)>:
c001d3a8:	56                   	push   esi
c001d3a9:	53                   	push   ebx
c001d3aa:	83 ec 14             	sub    esp,0x14
c001d3ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3b1:	05 0c 02 00 00       	add    eax,0x20c
c001d3b6:	bb 07 00 00 00       	mov    ebx,0x7
c001d3bb:	89 c6                	mov    esi,eax
c001d3bd:	85 db                	test   ebx,ebx
c001d3bf:	78 12                	js     c001d3d3 <Process::Process(char const*, Process*, char**)+0x2b>
c001d3c1:	83 ec 0c             	sub    esp,0xc
c001d3c4:	56                   	push   esi
c001d3c5:	e8 9c b6 00 00       	call   c0028a66 <ThreadControlBlock::ThreadControlBlock()>
c001d3ca:	83 c4 10             	add    esp,0x10
c001d3cd:	83 c6 63             	add    esi,0x63
c001d3d0:	4b                   	dec    ebx
c001d3d1:	eb ea                	jmp    c001d3bd <Process::Process(char const*, Process*, char**)+0x15>
c001d3d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d7:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d3de:	83 ec 0c             	sub    esp,0xc
c001d3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3e5:	e8 be c8 ff ff       	call   c0019ca8 <Krnl::newProcessEnv(Process*)>
c001d3ea:	83 c4 10             	add    esp,0x10
c001d3ed:	89 c2                	mov    edx,eax
c001d3ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3f3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d3f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3fd:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d406:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c001d40b:	8d 50 01             	lea    edx,[eax+0x1]
c001d40e:	89 15 f0 ce 02 c0    	mov    DWORD PTR ds:0xc002cef0,edx
c001d414:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d418:	89 02                	mov    DWORD PTR [edx],eax
c001d41a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001d422:	83 ec 0c             	sub    esp,0xc
c001d425:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d429:	e8 6b 21 ff ff       	call   c000f599 <malloc>
c001d42e:	83 c4 10             	add    esp,0x10
c001d431:	89 c3                	mov    ebx,eax
c001d433:	83 ec 08             	sub    esp,0x8
c001d436:	6a 00                	push   0x0
c001d438:	53                   	push   ebx
c001d439:	e8 30 4a ff ff       	call   c0011e6e <VAS::VAS(bool)>
c001d43e:	83 c4 10             	add    esp,0x10
c001d441:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d445:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d44b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d44f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d45d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d461:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d46b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d471:	85 c0                	test   eax,eax
c001d473:	74 42                	je     c001d4b7 <Process::Process(char const*, Process*, char**)+0x10f>
c001d475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d479:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d47f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d485:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d489:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d48f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d493:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d499:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d49f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a3:	05 0c 01 00 00       	add    eax,0x10c
c001d4a8:	83 ec 08             	sub    esp,0x8
c001d4ab:	52                   	push   edx
c001d4ac:	50                   	push   eax
c001d4ad:	e8 5a 33 fe ff       	call   c000080c <strcpy>
c001d4b2:	83 c4 10             	add    esp,0x10
c001d4b5:	eb 63                	jmp    c001d51a <Process::Process(char const*, Process*, char**)+0x172>
c001d4b7:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001d4bf:	83 ec 0c             	sub    esp,0xc
c001d4c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d4c6:	e8 ce 20 ff ff       	call   c000f599 <malloc>
c001d4cb:	83 c4 10             	add    esp,0x10
c001d4ce:	89 c3                	mov    ebx,eax
c001d4d0:	83 ec 08             	sub    esp,0x8
c001d4d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4d7:	53                   	push   ebx
c001d4d8:	e8 93 33 ff ff       	call   c0010870 <VgaText::VgaText(char const*)>
c001d4dd:	83 c4 10             	add    esp,0x10
c001d4e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4e4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d4ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ee:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d4f4:	83 ec 0c             	sub    esp,0xc
c001d4f7:	50                   	push   eax
c001d4f8:	e8 32 2b ff ff       	call   c001002f <addToTerminalCycle(VgaText*)>
c001d4fd:	83 c4 10             	add    esp,0x10
c001d500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d504:	05 0c 01 00 00       	add    eax,0x10c
c001d509:	83 ec 08             	sub    esp,0x8
c001d50c:	68 68 bb 02 c0       	push   0xc002bb68
c001d511:	50                   	push   eax
c001d512:	e8 f5 32 fe ff       	call   c000080c <strcpy>
c001d517:	83 c4 10             	add    esp,0x10
c001d51a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d51e:	83 c0 0c             	add    eax,0xc
c001d521:	83 ec 08             	sub    esp,0x8
c001d524:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d528:	50                   	push   eax
c001d529:	e8 de 32 fe ff       	call   c000080c <strcpy>
c001d52e:	83 c4 10             	add    esp,0x10
c001d531:	83 ec 08             	sub    esp,0x8
c001d534:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d538:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d53c:	e8 0d fe ff ff       	call   c001d34e <Process::addArgs(char**)>
c001d541:	83 c4 10             	add    esp,0x10
c001d544:	83 ec 08             	sub    esp,0x8
c001d547:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d54b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d54f:	e8 a6 ed ff ff       	call   c001c2fa <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d554:	83 c4 10             	add    esp,0x10
c001d557:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d55b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d55f:	83 f0 01             	xor    eax,0x1
c001d562:	88 c2                	mov    dl,al
c001d564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d568:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d56e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d573:	83 ec 08             	sub    esp,0x8
c001d576:	50                   	push   eax
c001d577:	68 c0 bb 02 c0       	push   0xc002bbc0
c001d57c:	e8 32 51 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001d581:	83 c4 10             	add    esp,0x10
c001d584:	90                   	nop
c001d585:	83 c4 14             	add    esp,0x14
c001d588:	5b                   	pop    ebx
c001d589:	5e                   	pop    esi
c001d58a:	c3                   	ret    
c001d58b:	90                   	nop

c001d58c <Process::Process(bool, char const*, Process*, char**)>:
c001d58c:	56                   	push   esi
c001d58d:	53                   	push   ebx
c001d58e:	83 ec 24             	sub    esp,0x24
c001d591:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d595:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d599:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d59d:	05 0c 02 00 00       	add    eax,0x20c
c001d5a2:	bb 07 00 00 00       	mov    ebx,0x7
c001d5a7:	89 c6                	mov    esi,eax
c001d5a9:	85 db                	test   ebx,ebx
c001d5ab:	78 12                	js     c001d5bf <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d5ad:	83 ec 0c             	sub    esp,0xc
c001d5b0:	56                   	push   esi
c001d5b1:	e8 b0 b4 00 00       	call   c0028a66 <ThreadControlBlock::ThreadControlBlock()>
c001d5b6:	83 c4 10             	add    esp,0x10
c001d5b9:	83 c6 63             	add    esi,0x63
c001d5bc:	4b                   	dec    ebx
c001d5bd:	eb ea                	jmp    c001d5a9 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d5bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5c3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d5ca:	83 ec 0c             	sub    esp,0xc
c001d5cd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d5d1:	e8 d2 c6 ff ff       	call   c0019ca8 <Krnl::newProcessEnv(Process*)>
c001d5d6:	83 c4 10             	add    esp,0x10
c001d5d9:	89 c2                	mov    edx,eax
c001d5db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5df:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d5e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d5e9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d5f2:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c001d5f7:	8d 50 01             	lea    edx,[eax+0x1]
c001d5fa:	89 15 f0 ce 02 c0    	mov    DWORD PTR ds:0xc002cef0,edx
c001d600:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d604:	89 02                	mov    DWORD PTR [edx],eax
c001d606:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001d60e:	83 ec 0c             	sub    esp,0xc
c001d611:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d615:	e8 7f 1f ff ff       	call   c000f599 <malloc>
c001d61a:	83 c4 10             	add    esp,0x10
c001d61d:	89 c3                	mov    ebx,eax
c001d61f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d624:	83 ec 08             	sub    esp,0x8
c001d627:	50                   	push   eax
c001d628:	53                   	push   ebx
c001d629:	e8 40 48 ff ff       	call   c0011e6e <VAS::VAS(bool)>
c001d62e:	83 c4 10             	add    esp,0x10
c001d631:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d635:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d63b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d63f:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d649:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d64d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d651:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d657:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d65b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d661:	85 c0                	test   eax,eax
c001d663:	74 42                	je     c001d6a7 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d665:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d669:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d66f:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d675:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d679:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d67f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d683:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d689:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d68f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d693:	05 0c 01 00 00       	add    eax,0x10c
c001d698:	83 ec 08             	sub    esp,0x8
c001d69b:	52                   	push   edx
c001d69c:	50                   	push   eax
c001d69d:	e8 6a 31 fe ff       	call   c000080c <strcpy>
c001d6a2:	83 c4 10             	add    esp,0x10
c001d6a5:	eb 63                	jmp    c001d70a <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d6a7:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001d6af:	83 ec 0c             	sub    esp,0xc
c001d6b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d6b6:	e8 de 1e ff ff       	call   c000f599 <malloc>
c001d6bb:	83 c4 10             	add    esp,0x10
c001d6be:	89 c3                	mov    ebx,eax
c001d6c0:	83 ec 08             	sub    esp,0x8
c001d6c3:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d6c7:	53                   	push   ebx
c001d6c8:	e8 a3 31 ff ff       	call   c0010870 <VgaText::VgaText(char const*)>
c001d6cd:	83 c4 10             	add    esp,0x10
c001d6d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6d4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d6da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6de:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d6e4:	83 ec 0c             	sub    esp,0xc
c001d6e7:	50                   	push   eax
c001d6e8:	e8 42 29 ff ff       	call   c001002f <addToTerminalCycle(VgaText*)>
c001d6ed:	83 c4 10             	add    esp,0x10
c001d6f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d6f4:	05 0c 01 00 00       	add    eax,0x10c
c001d6f9:	83 ec 08             	sub    esp,0x8
c001d6fc:	68 68 bb 02 c0       	push   0xc002bb68
c001d701:	50                   	push   eax
c001d702:	e8 05 31 fe ff       	call   c000080c <strcpy>
c001d707:	83 c4 10             	add    esp,0x10
c001d70a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d70e:	83 c0 0c             	add    eax,0xc
c001d711:	83 ec 08             	sub    esp,0x8
c001d714:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d718:	50                   	push   eax
c001d719:	e8 ee 30 fe ff       	call   c000080c <strcpy>
c001d71e:	83 c4 10             	add    esp,0x10
c001d721:	83 ec 08             	sub    esp,0x8
c001d724:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d728:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d72c:	e8 1d fc ff ff       	call   c001d34e <Process::addArgs(char**)>
c001d731:	83 c4 10             	add    esp,0x10
c001d734:	90                   	nop
c001d735:	83 c4 24             	add    esp,0x24
c001d738:	5b                   	pop    ebx
c001d739:	5e                   	pop    esi
c001d73a:	c3                   	ret    

c001d73b <taskStartupFunction>:
c001d73b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d740:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001d743:	c3                   	ret    

c001d744 <Semaphore::Semaphore(int)>:
c001d744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d748:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d74c:	89 10                	mov    DWORD PTR [eax],edx
c001d74e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d752:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001d759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d75d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001d764:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d768:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001d76f:	90                   	nop
c001d770:	c3                   	ret    
c001d771:	90                   	nop

c001d772 <Mutex::Mutex()>:
c001d772:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d776:	6a 01                	push   0x1
c001d778:	50                   	push   eax
c001d779:	e8 c6 ff ff ff       	call   c001d744 <Semaphore::Semaphore(int)>
c001d77e:	83 c4 08             	add    esp,0x8
c001d781:	90                   	nop
c001d782:	c3                   	ret    
c001d783:	90                   	nop

c001d784 <Process::createThread(void (*)(void*), void*, int)>:
c001d784:	55                   	push   ebp
c001d785:	31 c9                	xor    ecx,ecx
c001d787:	57                   	push   edi
c001d788:	56                   	push   esi
c001d789:	53                   	push   ebx
c001d78a:	83 ec 1c             	sub    esp,0x1c
c001d78d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d791:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001d798:	89 f2                	mov    edx,esi
c001d79a:	0f b7 c2             	movzx  eax,dx
c001d79d:	83 e2 01             	and    edx,0x1
c001d7a0:	74 16                	je     c001d7b8 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001d7a2:	d1 f8                	sar    eax,1
c001d7a4:	41                   	inc    ecx
c001d7a5:	89 c2                	mov    edx,eax
c001d7a7:	83 f9 10             	cmp    ecx,0x10
c001d7aa:	75 ee                	jne    c001d79a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001d7ac:	83 c4 1c             	add    esp,0x1c
c001d7af:	31 db                	xor    ebx,ebx
c001d7b1:	89 d8                	mov    eax,ebx
c001d7b3:	5b                   	pop    ebx
c001d7b4:	5e                   	pop    esi
c001d7b5:	5f                   	pop    edi
c001d7b6:	5d                   	pop    ebp
c001d7b7:	c3                   	ret    
c001d7b8:	b8 01 00 00 00       	mov    eax,0x1
c001d7bd:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d7c0:	d3 e0                	shl    eax,cl
c001d7c2:	09 c6                	or     esi,eax
c001d7c4:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001d7c7:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001d7ce:	89 c6                	mov    esi,eax
c001d7d0:	c1 e6 05             	shl    esi,0x5
c001d7d3:	01 f0                	add    eax,esi
c001d7d5:	01 d8                	add    eax,ebx
c001d7d7:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001d7de:	75 0a                	jne    c001d7ea <Process::createThread(void (*)(void*), void*, int)+0x66>
c001d7e0:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001d7ea:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d7f0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d7f4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001d7f7:	01 ca                	add    edx,ecx
c001d7f9:	83 ec 08             	sub    esp,0x8
c001d7fc:	89 d0                	mov    eax,edx
c001d7fe:	c1 e0 05             	shl    eax,0x5
c001d801:	01 d0                	add    eax,edx
c001d803:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001d807:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d80b:	01 d8                	add    eax,ebx
c001d80d:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001d813:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001d819:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001d81f:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001d825:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001d82b:	89 cd                	mov    ebp,ecx
c001d82d:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001d831:	f7 dd                	neg    ebp
c001d833:	c1 e5 15             	shl    ebp,0x15
c001d836:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001d83c:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001d842:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001d84c:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001d852:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001d85c:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001d866:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d86a:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001d871:	53                   	push   ebx
c001d872:	68 a4 0e 03 c0       	push   0xc0030ea4
c001d877:	e8 a4 af 00 00       	call   c0028820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d87c:	89 d8                	mov    eax,ebx
c001d87e:	83 c4 10             	add    esp,0x10
c001d881:	83 c4 1c             	add    esp,0x1c
c001d884:	5b                   	pop    ebx
c001d885:	5e                   	pop    esi
c001d886:	5f                   	pop    edi
c001d887:	5d                   	pop    ebp
c001d888:	c3                   	ret    
c001d889:	90                   	nop

c001d88a <Process::createUserThread()>:
c001d88a:	83 ec 0c             	sub    esp,0xc
c001d88d:	68 80 00 00 00       	push   0x80
c001d892:	6a 00                	push   0x0
c001d894:	68 4e d2 01 c0       	push   0xc001d24e
c001d899:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d89d:	e8 e2 fe ff ff       	call   c001d784 <Process::createThread(void (*)(void*), void*, int)>
c001d8a2:	83 c4 1c             	add    esp,0x1c
c001d8a5:	c3                   	ret    

c001d8a6 <setupMultitasking(void (*)())>:
c001d8a6:	56                   	push   esi
c001d8a7:	53                   	push   ebx
c001d8a8:	51                   	push   ecx
c001d8a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d8ad:	eb 10                	jmp    c001d8bf <setupMultitasking(void (*)())+0x19>
c001d8af:	83 ec 0c             	sub    esp,0xc
c001d8b2:	68 a4 0e 03 c0       	push   0xc0030ea4
c001d8b7:	e8 b6 ae 00 00       	call   c0028772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d8bc:	83 c4 10             	add    esp,0x10
c001d8bf:	83 ec 0c             	sub    esp,0xc
c001d8c2:	68 a4 0e 03 c0       	push   0xc0030ea4
c001d8c7:	e8 82 ae 00 00       	call   c002874e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d8cc:	83 c4 10             	add    esp,0x10
c001d8cf:	84 c0                	test   al,al
c001d8d1:	74 dc                	je     c001d8af <setupMultitasking(void (*)())+0x9>
c001d8d3:	83 ec 0c             	sub    esp,0xc
c001d8d6:	68 3f 07 00 00       	push   0x73f
c001d8db:	e8 b9 1c ff ff       	call   c000f599 <malloc>
c001d8e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001d8e7:	89 c3                	mov    ebx,eax
c001d8e9:	6a 00                	push   0x0
c001d8eb:	68 6c bb 02 c0       	push   0xc002bb6c
c001d8f0:	6a 01                	push   0x1
c001d8f2:	50                   	push   eax
c001d8f3:	e8 94 fc ff ff       	call   c001d58c <Process::Process(bool, char const*, Process*, char**)>
c001d8f8:	83 c4 14             	add    esp,0x14
c001d8fb:	89 1d b0 0e 03 c0    	mov    DWORD PTR ds:0xc0030eb0,ebx
c001d901:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d907:	e8 31 2a ff ff       	call   c001033d <setActiveTerminal(VgaText*)>
c001d90c:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d914:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001d91e:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d924:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001d927:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d931:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d937:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d93d:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d947:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d951:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d95b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d961:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d96b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d971:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d97b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d981:	58                   	pop    eax
c001d982:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d988:	5a                   	pop    edx
c001d989:	68 68 bb 02 c0       	push   0xc002bb68
c001d98e:	50                   	push   eax
c001d98f:	e8 78 2e fe ff       	call   c000080c <strcpy>
c001d994:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d99b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d99f:	83 c4 14             	add    esp,0x14
c001d9a2:	5b                   	pop    ebx
c001d9a3:	5e                   	pop    esi
c001d9a4:	e9 ab 29 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001d9a9 <schedule()>:
c001d9a9:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001d9ae:	85 c0                	test   eax,eax
c001d9b0:	74 0b                	je     c001d9bd <schedule()+0x14>
c001d9b2:	c7 05 80 0e 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x1
c001d9bc:	c3                   	ret    
c001d9bd:	53                   	push   ebx
c001d9be:	83 ec 14             	sub    esp,0x14
c001d9c1:	68 a4 0e 03 c0       	push   0xc0030ea4
c001d9c6:	e8 83 ad 00 00       	call   c002874e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d9cb:	83 c4 10             	add    esp,0x10
c001d9ce:	84 c0                	test   al,al
c001d9d0:	75 38                	jne    c001da0a <schedule()+0x61>
c001d9d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d9d7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d9da:	4a                   	dec    edx
c001d9db:	74 32                	je     c001da0f <schedule()+0x66>
c001d9dd:	83 ec 0c             	sub    esp,0xc
c001d9e0:	68 a4 0e 03 c0       	push   0xc0030ea4
c001d9e5:	e8 80 ad 00 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d9ea:	c7 04 24 a4 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ea4
c001d9f1:	89 c3                	mov    ebx,eax
c001d9f3:	e8 7a ad 00 00       	call   c0028772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d9f8:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d9ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da02:	e8 9d f8 ff ff       	call   c001d2a4 <switchToThread(ThreadControlBlock*)>
c001da07:	83 c4 10             	add    esp,0x10
c001da0a:	83 c4 08             	add    esp,0x8
c001da0d:	5b                   	pop    ebx
c001da0e:	c3                   	ret    
c001da0f:	83 ec 08             	sub    esp,0x8
c001da12:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001da19:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001da1f:	68 a4 0e 03 c0       	push   0xc0030ea4
c001da24:	e8 f7 ad 00 00       	call   c0028820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001da29:	83 c4 10             	add    esp,0x10
c001da2c:	eb af                	jmp    c001d9dd <schedule()+0x34>

c001da2e <Semaphore::tryAcquire()>:
c001da2e:	53                   	push   ebx
c001da2f:	83 ec 08             	sub    esp,0x8
c001da32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001da36:	fa                   	cli    
c001da37:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001da3c:	8d 50 01             	lea    edx,[eax+0x1]
c001da3f:	89 15 88 0e 03 c0    	mov    DWORD PTR ds:0xc0030e88,edx
c001da45:	8b 15 84 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e84
c001da4b:	8d 5a 01             	lea    ebx,[edx+0x1]
c001da4e:	89 1d 84 0e 03 c0    	mov    DWORD PTR ds:0xc0030e84,ebx
c001da54:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001da57:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001da59:	7c 2a                	jl     c001da85 <Semaphore::tryAcquire()+0x57>
c001da5b:	89 15 84 0e 03 c0    	mov    DWORD PTR ds:0xc0030e84,edx
c001da61:	85 d2                	test   edx,edx
c001da63:	75 0a                	jne    c001da6f <Semaphore::tryAcquire()+0x41>
c001da65:	8b 15 80 0e 03 c0    	mov    edx,DWORD PTR ds:0xc0030e80
c001da6b:	85 d2                	test   edx,edx
c001da6d:	75 5b                	jne    c001daca <Semaphore::tryAcquire()+0x9c>
c001da6f:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001da74:	85 c0                	test   eax,eax
c001da76:	74 07                	je     c001da7f <Semaphore::tryAcquire()+0x51>
c001da78:	31 c0                	xor    eax,eax
c001da7a:	83 c4 08             	add    esp,0x8
c001da7d:	5b                   	pop    ebx
c001da7e:	c3                   	ret    
c001da7f:	fb                   	sti    
c001da80:	83 c4 08             	add    esp,0x8
c001da83:	5b                   	pop    ebx
c001da84:	c3                   	ret    
c001da85:	43                   	inc    ebx
c001da86:	89 15 84 0e 03 c0    	mov    DWORD PTR ds:0xc0030e84,edx
c001da8c:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001da8f:	85 d2                	test   edx,edx
c001da91:	75 1f                	jne    c001dab2 <Semaphore::tryAcquire()+0x84>
c001da93:	8b 0d 80 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030e80
c001da99:	85 c9                	test   ecx,ecx
c001da9b:	74 15                	je     c001dab2 <Semaphore::tryAcquire()+0x84>
c001da9d:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c001daa7:	e8 fd fe ff ff       	call   c001d9a9 <schedule()>
c001daac:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001dab1:	48                   	dec    eax
c001dab2:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001dab7:	85 c0                	test   eax,eax
c001dab9:	75 08                	jne    c001dac3 <Semaphore::tryAcquire()+0x95>
c001dabb:	fb                   	sti    
c001dabc:	b0 01                	mov    al,0x1
c001dabe:	83 c4 08             	add    esp,0x8
c001dac1:	5b                   	pop    ebx
c001dac2:	c3                   	ret    
c001dac3:	b0 01                	mov    al,0x1
c001dac5:	83 c4 08             	add    esp,0x8
c001dac8:	5b                   	pop    ebx
c001dac9:	c3                   	ret    
c001daca:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c001dad4:	e8 d0 fe ff ff       	call   c001d9a9 <schedule()>
c001dad9:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001dade:	48                   	dec    eax
c001dadf:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001dae4:	85 c0                	test   eax,eax
c001dae6:	75 90                	jne    c001da78 <Semaphore::tryAcquire()+0x4a>
c001dae8:	eb 95                	jmp    c001da7f <Semaphore::tryAcquire()+0x51>

c001daea <Semaphore::assertLocked(char const*)>:
c001daea:	83 ec 0c             	sub    esp,0xc
c001daed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001daf1:	fa                   	cli    
c001daf2:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001daf8:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001dafd:	8d 48 01             	lea    ecx,[eax+0x1]
c001db00:	89 0d 84 0e 03 c0    	mov    DWORD PTR ds:0xc0030e84,ecx
c001db06:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001db08:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001db0b:	7c 24                	jl     c001db31 <Semaphore::assertLocked(char const*)+0x47>
c001db0d:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c001db12:	85 c0                	test   eax,eax
c001db14:	75 09                	jne    c001db1f <Semaphore::assertLocked(char const*)+0x35>
c001db16:	a1 80 0e 03 c0       	mov    eax,ds:0xc0030e80
c001db1b:	85 c0                	test   eax,eax
c001db1d:	75 29                	jne    c001db48 <Semaphore::assertLocked(char const*)+0x5e>
c001db1f:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001db24:	48                   	dec    eax
c001db25:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001db2a:	75 01                	jne    c001db2d <Semaphore::assertLocked(char const*)+0x43>
c001db2c:	fb                   	sti    
c001db2d:	83 c4 0c             	add    esp,0xc
c001db30:	c3                   	ret    
c001db31:	83 ec 0c             	sub    esp,0xc
c001db34:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001db38:	e8 e2 c2 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001db3d:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001db42:	83 c4 10             	add    esp,0x10
c001db45:	48                   	dec    eax
c001db46:	eb c5                	jmp    c001db0d <Semaphore::assertLocked(char const*)+0x23>
c001db48:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c001db52:	e8 52 fe ff ff       	call   c001d9a9 <schedule()>
c001db57:	eb c6                	jmp    c001db1f <Semaphore::assertLocked(char const*)+0x35>

c001db59 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001db59:	83 ec 0c             	sub    esp,0xc
c001db5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db65:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db68:	e8 3c fe ff ff       	call   c001d9a9 <schedule()>
c001db6d:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001db72:	48                   	dec    eax
c001db73:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001db78:	75 01                	jne    c001db7b <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x22>
c001db7a:	fb                   	sti    
c001db7b:	83 c4 0c             	add    esp,0xc
c001db7e:	c3                   	ret    

c001db7f <blockTask(TaskState)>:
c001db7f:	83 ec 0c             	sub    esp,0xc
c001db82:	fa                   	cli    
c001db83:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001db89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001db92:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001db95:	e8 0f fe ff ff       	call   c001d9a9 <schedule()>
c001db9a:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001db9f:	48                   	dec    eax
c001dba0:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001dba5:	75 01                	jne    c001dba8 <blockTask(TaskState)+0x29>
c001dba7:	fb                   	sti    
c001dba8:	83 c4 0c             	add    esp,0xc
c001dbab:	c3                   	ret    

c001dbac <waitTask(int, int*, int)>:
c001dbac:	83 ec 18             	sub    esp,0x18
c001dbaf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbb4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dbb8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001dbbb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dbbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbc4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dbc7:	6a 07                	push   0x7
c001dbc9:	e8 b1 ff ff ff       	call   c001db7f <blockTask(TaskState)>
c001dbce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbd3:	83 c4 10             	add    esp,0x10
c001dbd6:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001dbd9:	85 d2                	test   edx,edx
c001dbdb:	74 0a                	je     c001dbe7 <waitTask(int, int*, int)+0x3b>
c001dbdd:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001dbe0:	89 02                	mov    DWORD PTR [edx],eax
c001dbe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dbe7:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001dbea:	83 c4 0c             	add    esp,0xc
c001dbed:	c3                   	ret    

c001dbee <nanoSleepUntil(unsigned long long)>:
c001dbee:	83 ec 0c             	sub    esp,0xc
c001dbf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dbf9:	3b 05 d0 df 02 c0    	cmp    eax,DWORD PTR ds:0xc002dfd0
c001dbff:	89 d1                	mov    ecx,edx
c001dc01:	1b 0d d4 df 02 c0    	sbb    ecx,DWORD PTR ds:0xc002dfd4
c001dc07:	73 04                	jae    c001dc0d <nanoSleepUntil(unsigned long long)+0x1f>
c001dc09:	83 c4 0c             	add    esp,0xc
c001dc0c:	c3                   	ret    
c001dc0d:	fa                   	cli    
c001dc0e:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001dc14:	83 ec 08             	sub    esp,0x8
c001dc17:	ff 05 84 0e 03 c0    	inc    DWORD PTR ds:0xc0030e84
c001dc1d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dc23:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001dc26:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001dc29:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001dc2f:	68 98 0e 03 c0       	push   0xc0030e98
c001dc34:	e8 e7 ab 00 00       	call   c0028820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc39:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001dc40:	e8 3a ff ff ff       	call   c001db7f <blockTask(TaskState)>
c001dc45:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001dc4a:	83 c4 10             	add    esp,0x10
c001dc4d:	48                   	dec    eax
c001dc4e:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c001dc53:	85 c0                	test   eax,eax
c001dc55:	75 09                	jne    c001dc60 <nanoSleepUntil(unsigned long long)+0x72>
c001dc57:	a1 80 0e 03 c0       	mov    eax,ds:0xc0030e80
c001dc5c:	85 c0                	test   eax,eax
c001dc5e:	75 12                	jne    c001dc72 <nanoSleepUntil(unsigned long long)+0x84>
c001dc60:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001dc65:	48                   	dec    eax
c001dc66:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001dc6b:	75 9c                	jne    c001dc09 <nanoSleepUntil(unsigned long long)+0x1b>
c001dc6d:	fb                   	sti    
c001dc6e:	83 c4 0c             	add    esp,0xc
c001dc71:	c3                   	ret    
c001dc72:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c001dc7c:	e8 28 fd ff ff       	call   c001d9a9 <schedule()>
c001dc81:	eb dd                	jmp    c001dc60 <nanoSleepUntil(unsigned long long)+0x72>

c001dc83 <nanoSleep(unsigned long long)>:
c001dc83:	a1 d0 df 02 c0       	mov    eax,ds:0xc002dfd0
c001dc88:	8b 15 d4 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfd4
c001dc8e:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001dc92:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001dc96:	e9 53 ff ff ff       	jmp    c001dbee <nanoSleepUntil(unsigned long long)>

c001dc9b <sleep(unsigned long long)>:
c001dc9b:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001dca3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001dca8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001dcac:	01 ca                	add    edx,ecx
c001dcae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dcb2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dcb6:	eb cb                	jmp    c001dc83 <nanoSleep(unsigned long long)>

c001dcb8 <Semaphore::acquire()>:
c001dcb8:	83 ec 0c             	sub    esp,0xc
c001dcbb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001dcbf:	fa                   	cli    
c001dcc0:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001dcc5:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001dccb:	8d 48 01             	lea    ecx,[eax+0x1]
c001dcce:	89 0d 84 0e 03 c0    	mov    DWORD PTR ds:0xc0030e84,ecx
c001dcd4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001dcd7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001dcd9:	7d 28                	jge    c001dd03 <Semaphore::acquire()+0x4b>
c001dcdb:	41                   	inc    ecx
c001dcdc:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001dcdf:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c001dce4:	85 c0                	test   eax,eax
c001dce6:	75 09                	jne    c001dcf1 <Semaphore::acquire()+0x39>
c001dce8:	a1 80 0e 03 c0       	mov    eax,ds:0xc0030e80
c001dced:	85 c0                	test   eax,eax
c001dcef:	75 4e                	jne    c001dd3f <Semaphore::acquire()+0x87>
c001dcf1:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001dcf6:	48                   	dec    eax
c001dcf7:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001dcfc:	75 01                	jne    c001dcff <Semaphore::acquire()+0x47>
c001dcfe:	fb                   	sti    
c001dcff:	83 c4 0c             	add    esp,0xc
c001dd02:	c3                   	ret    
c001dd03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd08:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001dd0f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001dd12:	85 c9                	test   ecx,ecx
c001dd14:	74 3a                	je     c001dd50 <Semaphore::acquire()+0x98>
c001dd16:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001dd19:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dd1f:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001dd22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd27:	83 ec 0c             	sub    esp,0xc
c001dd2a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001dd2d:	6a 05                	push   0x5
c001dd2f:	e8 4b fe ff ff       	call   c001db7f <blockTask(TaskState)>
c001dd34:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001dd39:	83 c4 10             	add    esp,0x10
c001dd3c:	48                   	dec    eax
c001dd3d:	eb a0                	jmp    c001dcdf <Semaphore::acquire()+0x27>
c001dd3f:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c001dd49:	e8 5b fc ff ff       	call   c001d9a9 <schedule()>
c001dd4e:	eb a1                	jmp    c001dcf1 <Semaphore::acquire()+0x39>
c001dd50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd55:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001dd58:	eb c8                	jmp    c001dd22 <Semaphore::acquire()+0x6a>

c001dd5a <taskReturned>:
c001dd5a:	83 ec 18             	sub    esp,0x18
c001dd5d:	68 e8 bb 02 c0       	push   0xc002bbe8
c001dd62:	e8 b8 c0 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001dd67:	83 c4 10             	add    esp,0x10
c001dd6a:	83 ec 0c             	sub    esp,0xc
c001dd6d:	6a 02                	push   0x2
c001dd6f:	e8 0b fe ff ff       	call   c001db7f <blockTask(TaskState)>
c001dd74:	fa                   	cli    
c001dd75:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001dd7b:	e8 29 fc ff ff       	call   c001d9a9 <schedule()>
c001dd80:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001dd85:	83 c4 10             	add    esp,0x10
c001dd88:	48                   	dec    eax
c001dd89:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001dd8e:	85 c0                	test   eax,eax
c001dd90:	75 d8                	jne    c001dd6a <taskReturned+0x10>
c001dd92:	fb                   	sti    
c001dd93:	eb d5                	jmp    c001dd6a <taskReturned+0x10>

c001dd95 <Thr::processFromPID(int)>:
c001dd95:	57                   	push   edi
c001dd96:	56                   	push   esi
c001dd97:	53                   	push   ebx
c001dd98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd9c:	fa                   	cli    
c001dd9d:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001dda3:	83 ec 0c             	sub    esp,0xc
c001dda6:	68 a4 0e 03 c0       	push   0xc0030ea4
c001ddab:	e8 ba a9 00 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddb0:	83 c4 10             	add    esp,0x10
c001ddb3:	89 c7                	mov    edi,eax
c001ddb5:	eb 14                	jmp    c001ddcb <Thr::processFromPID(int)+0x36>
c001ddb7:	83 ec 0c             	sub    esp,0xc
c001ddba:	68 a4 0e 03 c0       	push   0xc0030ea4
c001ddbf:	e8 a6 a9 00 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddc4:	83 c4 10             	add    esp,0x10
c001ddc7:	39 f8                	cmp    eax,edi
c001ddc9:	74 49                	je     c001de14 <Thr::processFromPID(int)+0x7f>
c001ddcb:	83 ec 0c             	sub    esp,0xc
c001ddce:	68 a4 0e 03 c0       	push   0xc0030ea4
c001ddd3:	e8 92 a9 00 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ddd8:	c7 04 24 a4 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ea4
c001dddf:	89 c3                	mov    ebx,eax
c001dde1:	e8 8c a9 00 00       	call   c0028772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dde6:	58                   	pop    eax
c001dde7:	5a                   	pop    edx
c001dde8:	53                   	push   ebx
c001dde9:	68 a4 0e 03 c0       	push   0xc0030ea4
c001ddee:	e8 2d aa 00 00       	call   c0028820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddf3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ddf6:	83 c4 10             	add    esp,0x10
c001ddf9:	39 30                	cmp    DWORD PTR [eax],esi
c001ddfb:	75 ba                	jne    c001ddb7 <Thr::processFromPID(int)+0x22>
c001ddfd:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001de02:	48                   	dec    eax
c001de03:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001de08:	74 07                	je     c001de11 <Thr::processFromPID(int)+0x7c>
c001de0a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001de0d:	5b                   	pop    ebx
c001de0e:	5e                   	pop    esi
c001de0f:	5f                   	pop    edi
c001de10:	c3                   	ret    
c001de11:	fb                   	sti    
c001de12:	eb f6                	jmp    c001de0a <Thr::processFromPID(int)+0x75>
c001de14:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001de19:	48                   	dec    eax
c001de1a:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001de1f:	75 05                	jne    c001de26 <Thr::processFromPID(int)+0x91>
c001de21:	fb                   	sti    
c001de22:	5b                   	pop    ebx
c001de23:	5e                   	pop    esi
c001de24:	5f                   	pop    edi
c001de25:	c3                   	ret    
c001de26:	5b                   	pop    ebx
c001de27:	31 c0                	xor    eax,eax
c001de29:	5e                   	pop    esi
c001de2a:	5f                   	pop    edi
c001de2b:	c3                   	ret    

c001de2c <unblockTask(ThreadControlBlock*)>:
c001de2c:	53                   	push   ebx
c001de2d:	83 ec 08             	sub    esp,0x8
c001de30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001de34:	fa                   	cli    
c001de35:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001de3b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de3e:	85 c0                	test   eax,eax
c001de40:	74 5a                	je     c001de9c <unblockTask(ThreadControlBlock*)+0x70>
c001de42:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001de45:	48                   	dec    eax
c001de46:	74 31                	je     c001de79 <unblockTask(ThreadControlBlock*)+0x4d>
c001de48:	83 ec 0c             	sub    esp,0xc
c001de4b:	68 a4 0e 03 c0       	push   0xc0030ea4
c001de50:	e8 15 a9 00 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001de55:	83 c4 10             	add    esp,0x10
c001de58:	85 c0                	test   eax,eax
c001de5a:	75 17                	jne    c001de73 <unblockTask(ThreadControlBlock*)+0x47>
c001de5c:	eb 50                	jmp    c001deae <unblockTask(ThreadControlBlock*)+0x82>
c001de5e:	83 ec 08             	sub    esp,0x8
c001de61:	50                   	push   eax
c001de62:	68 a4 0e 03 c0       	push   0xc0030ea4
c001de67:	e8 86 ac 00 00       	call   c0028af2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001de6c:	83 c4 10             	add    esp,0x10
c001de6f:	85 c0                	test   eax,eax
c001de71:	74 3b                	je     c001deae <unblockTask(ThreadControlBlock*)+0x82>
c001de73:	39 c3                	cmp    ebx,eax
c001de75:	75 e7                	jne    c001de5e <unblockTask(ThreadControlBlock*)+0x32>
c001de77:	eb 10                	jmp    c001de89 <unblockTask(ThreadControlBlock*)+0x5d>
c001de79:	83 ec 0c             	sub    esp,0xc
c001de7c:	68 8a bb 02 c0       	push   0xc002bb8a
c001de81:	e8 2d 48 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001de86:	83 c4 10             	add    esp,0x10
c001de89:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001de8e:	48                   	dec    eax
c001de8f:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001de94:	75 01                	jne    c001de97 <unblockTask(ThreadControlBlock*)+0x6b>
c001de96:	fb                   	sti    
c001de97:	83 c4 08             	add    esp,0x8
c001de9a:	5b                   	pop    ebx
c001de9b:	c3                   	ret    
c001de9c:	83 ec 0c             	sub    esp,0xc
c001de9f:	68 73 bb 02 c0       	push   0xc002bb73
c001dea4:	e8 0a 48 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001dea9:	83 c4 10             	add    esp,0x10
c001deac:	eb db                	jmp    c001de89 <unblockTask(ThreadControlBlock*)+0x5d>
c001deae:	83 ec 08             	sub    esp,0x8
c001deb1:	53                   	push   ebx
c001deb2:	68 a4 0e 03 c0       	push   0xc0030ea4
c001deb7:	e8 64 a9 00 00       	call   c0028820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001debc:	83 c4 10             	add    esp,0x10
c001debf:	eb c8                	jmp    c001de89 <unblockTask(ThreadControlBlock*)+0x5d>

c001dec1 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001dec1:	55                   	push   ebp
c001dec2:	57                   	push   edi
c001dec3:	56                   	push   esi
c001dec4:	53                   	push   ebx
c001dec5:	83 ec 1c             	sub    esp,0x1c
c001dec8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001decc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001decf:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ded5:	85 ff                	test   edi,edi
c001ded7:	7e 20                	jle    c001def9 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ded9:	31 f6                	xor    esi,esi
c001dedb:	83 ec 0c             	sub    esp,0xc
c001dede:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001dee5:	46                   	inc    esi
c001dee6:	e8 be 16 ff ff       	call   c000f5a9 <free>
c001deeb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001deee:	83 c4 10             	add    esp,0x10
c001def1:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001def7:	7f e2                	jg     c001dedb <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001def9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df03:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001df08:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001df0b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001df0e:	d3 c0                	rol    eax,cl
c001df10:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001df17:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df1a:	89 f7                	mov    edi,esi
c001df1c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001df24:	0f 85 64 01 00 00    	jne    c001e08e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001df2a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001df30:	85 ed                	test   ebp,ebp
c001df32:	74 1b                	je     c001df4f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001df34:	83 ec 0c             	sub    esp,0xc
c001df37:	55                   	push   ebp
c001df38:	e8 87 bc ff ff       	call   c0019bc4 <EnvVarContainer::~EnvVarContainer()>
c001df3d:	59                   	pop    ecx
c001df3e:	5e                   	pop    esi
c001df3f:	6a 0c                	push   0xc
c001df41:	55                   	push   ebp
c001df42:	e8 94 46 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c001df47:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001df4a:	83 c4 10             	add    esp,0x10
c001df4d:	89 f7                	mov    edi,esi
c001df4f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df55:	85 c0                	test   eax,eax
c001df57:	0f 84 aa 00 00 00    	je     c001e007 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df5d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001df60:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001df64:	31 c9                	xor    ecx,ecx
c001df66:	eb 10                	jmp    c001df78 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001df68:	41                   	inc    ecx
c001df69:	83 f9 10             	cmp    ecx,0x10
c001df6c:	0f 84 95 00 00 00    	je     c001e007 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001df72:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001df78:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001df7f:	d3 fa                	sar    edx,cl
c001df81:	83 e2 01             	and    edx,0x1
c001df84:	74 e2                	je     c001df68 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df86:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001df89:	01 ca                	add    edx,ecx
c001df8b:	89 d5                	mov    ebp,edx
c001df8d:	c1 e5 05             	shl    ebp,0x5
c001df90:	01 ea                	add    edx,ebp
c001df92:	01 d0                	add    eax,edx
c001df94:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001df9a:	83 fd 07             	cmp    ebp,0x7
c001df9d:	75 c9                	jne    c001df68 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001df9f:	05 40 02 00 00       	add    eax,0x240
c001dfa4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001dfa7:	83 fd ff             	cmp    ebp,0xffffffff
c001dfaa:	0f 8c e6 00 00 00    	jl     c001e096 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d5>
c001dfb0:	0f 84 97 01 00 00    	je     c001e14d <cleanupTerminatedTask(ThreadControlBlock*)+0x28c>
c001dfb6:	85 ed                	test   ebp,ebp
c001dfb8:	0f 84 7e 01 00 00    	je     c001e13c <cleanupTerminatedTask(ThreadControlBlock*)+0x27b>
c001dfbe:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001dfc0:	75 a6                	jne    c001df68 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001dfc2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001dfc8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dfcc:	01 d0                	add    eax,edx
c001dfce:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001dfd2:	83 ec 0c             	sub    esp,0xc
c001dfd5:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001dfdb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001dfde:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dfe4:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001dfeb:	50                   	push   eax
c001dfec:	e8 3b fe ff ff       	call   c001de2c <unblockTask(ThreadControlBlock*)>
c001dff1:	83 c4 10             	add    esp,0x10
c001dff4:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001dff7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dffb:	89 f7                	mov    edi,esi
c001dffd:	41                   	inc    ecx
c001dffe:	83 f9 10             	cmp    ecx,0x10
c001e001:	0f 85 6b ff ff ff    	jne    c001df72 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e007:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e00d:	85 c0                	test   eax,eax
c001e00f:	74 5d                	je     c001e06e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e011:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e017:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e01d:	74 4f                	je     c001e06e <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e01f:	83 ec 0c             	sub    esp,0xc
c001e022:	68 a4 0e 03 c0       	push   0xc0030ea4
c001e027:	e8 3e a7 00 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e02c:	c7 04 24 a4 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ea4
c001e033:	89 c7                	mov    edi,eax
c001e035:	e8 14 a7 00 00       	call   c002874e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e03a:	83 c4 10             	add    esp,0x10
c001e03d:	84 c0                	test   al,al
c001e03f:	0f 84 c2 00 00 00    	je     c001e107 <cleanupTerminatedTask(ThreadControlBlock*)+0x246>
c001e045:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e048:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e04e:	85 d2                	test   edx,edx
c001e050:	74 0f                	je     c001e061 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e052:	83 ec 0c             	sub    esp,0xc
c001e055:	8b 02                	mov    eax,DWORD PTR [edx]
c001e057:	52                   	push   edx
c001e058:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e05b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e05e:	83 c4 10             	add    esp,0x10
c001e061:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e06b:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e06e:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e074:	85 db                	test   ebx,ebx
c001e076:	74 16                	je     c001e08e <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e078:	83 ec 0c             	sub    esp,0xc
c001e07b:	53                   	push   ebx
c001e07c:	e8 c7 37 ff ff       	call   c0011848 <VAS::~VAS()>
c001e081:	58                   	pop    eax
c001e082:	5a                   	pop    edx
c001e083:	6a 14                	push   0x14
c001e085:	53                   	push   ebx
c001e086:	e8 50 45 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c001e08b:	83 c4 10             	add    esp,0x10
c001e08e:	83 c4 1c             	add    esp,0x1c
c001e091:	5b                   	pop    ebx
c001e092:	5e                   	pop    esi
c001e093:	5f                   	pop    edi
c001e094:	5d                   	pop    ebp
c001e095:	c3                   	ret    
c001e096:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e09a:	83 ec 0c             	sub    esp,0xc
c001e09d:	68 1c bc 02 c0       	push   0xc002bc1c
c001e0a2:	e8 78 bd ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001e0a7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e0aa:	83 c4 10             	add    esp,0x10
c001e0ad:	89 f7                	mov    edi,esi
c001e0af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e0b3:	e9 b0 fe ff ff       	jmp    c001df68 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e0b8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e0be:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e0c4:	75 1c                	jne    c001e0e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e0c6:	83 ec 0c             	sub    esp,0xc
c001e0c9:	68 84 bc 02 c0       	push   0xc002bc84
c001e0ce:	e8 e0 45 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001e0d3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e0da:	e8 a0 fa ff ff       	call   c001db7f <blockTask(TaskState)>
c001e0df:	83 c4 10             	add    esp,0x10
c001e0e2:	83 ec 08             	sub    esp,0x8
c001e0e5:	56                   	push   esi
c001e0e6:	68 a4 0e 03 c0       	push   0xc0030ea4
c001e0eb:	e8 30 a7 00 00       	call   c0028820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0f0:	c7 04 24 a4 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ea4
c001e0f7:	e8 6e a6 00 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0fc:	83 c4 10             	add    esp,0x10
c001e0ff:	39 f8                	cmp    eax,edi
c001e101:	0f 84 3e ff ff ff    	je     c001e045 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e107:	83 ec 0c             	sub    esp,0xc
c001e10a:	68 a4 0e 03 c0       	push   0xc0030ea4
c001e10f:	e8 56 a6 00 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e114:	c7 04 24 a4 0e 03 c0 	mov    DWORD PTR [esp],0xc0030ea4
c001e11b:	89 c6                	mov    esi,eax
c001e11d:	e8 50 a6 00 00       	call   c0028772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e122:	83 c4 10             	add    esp,0x10
c001e125:	39 f3                	cmp    ebx,esi
c001e127:	74 b9                	je     c001e0e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e129:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e12c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e12f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e135:	75 ab                	jne    c001e0e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x221>
c001e137:	e9 7c ff ff ff       	jmp    c001e0b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e13c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e140:	83 ec 0c             	sub    esp,0xc
c001e143:	68 50 bc 02 c0       	push   0xc002bc50
c001e148:	e9 55 ff ff ff       	jmp    c001e0a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e1>
c001e14d:	8b 36                	mov    esi,DWORD PTR [esi]
c001e14f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e153:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e156:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e159:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e15f:	01 d7                	add    edi,edx
c001e161:	89 f8                	mov    eax,edi
c001e163:	e9 66 fe ff ff       	jmp    c001dfce <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e168 <cleanerTaskFunction(void*)>:
c001e168:	53                   	push   ebx
c001e169:	83 ec 08             	sub    esp,0x8
c001e16c:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e171:	48                   	dec    eax
c001e172:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e177:	75 01                	jne    c001e17a <cleanerTaskFunction(void*)+0x12>
c001e179:	fb                   	sti    
c001e17a:	fa                   	cli    
c001e17b:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e180:	80 3d 6c 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030e6c,0x0
c001e187:	8d 50 01             	lea    edx,[eax+0x1]
c001e18a:	89 15 88 0e 03 c0    	mov    DWORD PTR ds:0xc0030e88,edx
c001e190:	0f 84 a1 00 00 00    	je     c001e237 <cleanerTaskFunction(void*)+0xcf>
c001e196:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e19b:	85 c0                	test   eax,eax
c001e19d:	75 01                	jne    c001e1a0 <cleanerTaskFunction(void*)+0x38>
c001e19f:	fb                   	sti    
c001e1a0:	c6 05 6c 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e6c,0x0
c001e1a7:	fa                   	cli    
c001e1a8:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001e1ae:	ff 05 84 0e 03 c0    	inc    DWORD PTR ds:0xc0030e84
c001e1b4:	fa                   	cli    
c001e1b5:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001e1bb:	eb 26                	jmp    c001e1e3 <cleanerTaskFunction(void*)+0x7b>
c001e1bd:	83 ec 0c             	sub    esp,0xc
c001e1c0:	68 8c 0e 03 c0       	push   0xc0030e8c
c001e1c5:	e8 a0 a5 00 00       	call   c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e1ca:	c7 04 24 8c 0e 03 c0 	mov    DWORD PTR [esp],0xc0030e8c
c001e1d1:	89 c3                	mov    ebx,eax
c001e1d3:	e8 9a a5 00 00       	call   c0028772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e1d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e1db:	e8 e1 fc ff ff       	call   c001dec1 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e1e0:	83 c4 10             	add    esp,0x10
c001e1e3:	83 ec 0c             	sub    esp,0xc
c001e1e6:	68 8c 0e 03 c0       	push   0xc0030e8c
c001e1eb:	e8 5e a5 00 00       	call   c002874e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1f0:	83 c4 10             	add    esp,0x10
c001e1f3:	84 c0                	test   al,al
c001e1f5:	74 c6                	je     c001e1bd <cleanerTaskFunction(void*)+0x55>
c001e1f7:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e1fc:	48                   	dec    eax
c001e1fd:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e202:	75 01                	jne    c001e205 <cleanerTaskFunction(void*)+0x9d>
c001e204:	fb                   	sti    
c001e205:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001e20a:	48                   	dec    eax
c001e20b:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c001e210:	0f 85 56 ff ff ff    	jne    c001e16c <cleanerTaskFunction(void*)+0x4>
c001e216:	a1 80 0e 03 c0       	mov    eax,ds:0xc0030e80
c001e21b:	85 c0                	test   eax,eax
c001e21d:	0f 84 49 ff ff ff    	je     c001e16c <cleanerTaskFunction(void*)+0x4>
c001e223:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c001e22d:	e8 77 f7 ff ff       	call   c001d9a9 <schedule()>
c001e232:	e9 35 ff ff ff       	jmp    c001e16c <cleanerTaskFunction(void*)+0x4>
c001e237:	83 ec 0c             	sub    esp,0xc
c001e23a:	6a 02                	push   0x2
c001e23c:	e8 18 f9 ff ff       	call   c001db59 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e241:	83 c4 10             	add    esp,0x10
c001e244:	e9 57 ff ff ff       	jmp    c001e1a0 <cleanerTaskFunction(void*)+0x38>

c001e249 <terminateTask(int)>:
c001e249:	83 ec 14             	sub    esp,0x14
c001e24c:	fa                   	cli    
c001e24d:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001e253:	ff 05 84 0e 03 c0    	inc    DWORD PTR ds:0xc0030e84
c001e259:	fa                   	cli    
c001e25a:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001e260:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e264:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e269:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e26c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e271:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e274:	50                   	push   eax
c001e275:	68 8c 0e 03 c0       	push   0xc0030e8c
c001e27a:	e8 a1 a5 00 00       	call   c0028820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e27f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e284:	83 c4 10             	add    esp,0x10
c001e287:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e28e:	a1 68 0e 03 c0       	mov    eax,ds:0xc0030e68
c001e293:	85 c0                	test   eax,eax
c001e295:	74 53                	je     c001e2ea <terminateTask(int)+0xa1>
c001e297:	83 ec 0c             	sub    esp,0xc
c001e29a:	c6 05 6c 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e6c,0x1
c001e2a1:	50                   	push   eax
c001e2a2:	e8 85 fb ff ff       	call   c001de2c <unblockTask(ThreadControlBlock*)>
c001e2a7:	83 c4 10             	add    esp,0x10
c001e2aa:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e2af:	48                   	dec    eax
c001e2b0:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e2b5:	75 01                	jne    c001e2b8 <terminateTask(int)+0x6f>
c001e2b7:	fb                   	sti    
c001e2b8:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001e2bd:	48                   	dec    eax
c001e2be:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c001e2c3:	75 09                	jne    c001e2ce <terminateTask(int)+0x85>
c001e2c5:	83 3d 80 0e 03 c0 00 	cmp    DWORD PTR ds:0xc0030e80,0x0
c001e2cc:	75 2e                	jne    c001e2fc <terminateTask(int)+0xb3>
c001e2ce:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e2d3:	48                   	dec    eax
c001e2d4:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e2d9:	75 01                	jne    c001e2dc <terminateTask(int)+0x93>
c001e2db:	fb                   	sti    
c001e2dc:	fa                   	cli    
c001e2dd:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001e2e3:	e8 c1 f6 ff ff       	call   c001d9a9 <schedule()>
c001e2e8:	eb e4                	jmp    c001e2ce <terminateTask(int)+0x85>
c001e2ea:	83 ec 0c             	sub    esp,0xc
c001e2ed:	68 a1 bb 02 c0       	push   0xc002bba1
c001e2f2:	e8 bc 43 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001e2f7:	83 c4 10             	add    esp,0x10
c001e2fa:	eb ae                	jmp    c001e2aa <terminateTask(int)+0x61>
c001e2fc:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c001e306:	eb db                	jmp    c001e2e3 <terminateTask(int)+0x9a>

c001e308 <Thr::terminateFromIRQ(int)>:
c001e308:	83 ec 18             	sub    esp,0x18
c001e30b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e30f:	e8 35 ff ff ff       	call   c001e249 <terminateTask(int)>

c001e314 <Semaphore::release()>:
c001e314:	83 ec 0c             	sub    esp,0xc
c001e317:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e31b:	fa                   	cli    
c001e31c:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001e321:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001e327:	8d 48 01             	lea    ecx,[eax+0x1]
c001e32a:	89 0d 84 0e 03 c0    	mov    DWORD PTR ds:0xc0030e84,ecx
c001e330:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e333:	85 c9                	test   ecx,ecx
c001e335:	74 3c                	je     c001e373 <Semaphore::release()+0x5f>
c001e337:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001e33a:	83 ec 0c             	sub    esp,0xc
c001e33d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e340:	51                   	push   ecx
c001e341:	e8 e6 fa ff ff       	call   c001de2c <unblockTask(ThreadControlBlock*)>
c001e346:	a1 84 0e 03 c0       	mov    eax,ds:0xc0030e84
c001e34b:	83 c4 10             	add    esp,0x10
c001e34e:	48                   	dec    eax
c001e34f:	a3 84 0e 03 c0       	mov    ds:0xc0030e84,eax
c001e354:	85 c0                	test   eax,eax
c001e356:	75 09                	jne    c001e361 <Semaphore::release()+0x4d>
c001e358:	a1 80 0e 03 c0       	mov    eax,ds:0xc0030e80
c001e35d:	85 c0                	test   eax,eax
c001e35f:	75 17                	jne    c001e378 <Semaphore::release()+0x64>
c001e361:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e366:	48                   	dec    eax
c001e367:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e36c:	75 01                	jne    c001e36f <Semaphore::release()+0x5b>
c001e36e:	fb                   	sti    
c001e36f:	83 c4 0c             	add    esp,0xc
c001e372:	c3                   	ret    
c001e373:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001e376:	eb d7                	jmp    c001e34f <Semaphore::release()+0x3b>
c001e378:	c7 05 80 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030e80,0x0
c001e382:	e8 22 f6 ff ff       	call   c001d9a9 <schedule()>
c001e387:	eb d8                	jmp    c001e361 <Semaphore::release()+0x4d>

c001e389 <__static_initialization_and_destruction_0(int, int)>:
c001e389:	83 ec 0c             	sub    esp,0xc
c001e38c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e391:	0f 85 88 00 00 00    	jne    c001e41f <__static_initialization_and_destruction_0(int, int)+0x96>
c001e397:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e39f:	75 7e                	jne    c001e41f <__static_initialization_and_destruction_0(int, int)+0x96>
c001e3a1:	83 ec 0c             	sub    esp,0xc
c001e3a4:	68 a4 0e 03 c0       	push   0xc0030ea4
c001e3a9:	e8 02 a7 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3ae:	83 c4 10             	add    esp,0x10
c001e3b1:	83 ec 04             	sub    esp,0x4
c001e3b4:	68 38 c7 02 c0       	push   0xc002c738
c001e3b9:	68 a4 0e 03 c0       	push   0xc0030ea4
c001e3be:	68 64 8a 02 c0       	push   0xc0028a64
c001e3c3:	e8 8d 41 ff ff       	call   c0012555 <__cxa_atexit>
c001e3c8:	83 c4 10             	add    esp,0x10
c001e3cb:	83 ec 0c             	sub    esp,0xc
c001e3ce:	68 98 0e 03 c0       	push   0xc0030e98
c001e3d3:	e8 d8 a6 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e3d8:	83 c4 10             	add    esp,0x10
c001e3db:	83 ec 04             	sub    esp,0x4
c001e3de:	68 38 c7 02 c0       	push   0xc002c738
c001e3e3:	68 98 0e 03 c0       	push   0xc0030e98
c001e3e8:	68 64 8a 02 c0       	push   0xc0028a64
c001e3ed:	e8 63 41 ff ff       	call   c0012555 <__cxa_atexit>
c001e3f2:	83 c4 10             	add    esp,0x10
c001e3f5:	83 ec 0c             	sub    esp,0xc
c001e3f8:	68 8c 0e 03 c0       	push   0xc0030e8c
c001e3fd:	e8 ae a6 00 00       	call   c0028ab0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e402:	83 c4 10             	add    esp,0x10
c001e405:	83 ec 04             	sub    esp,0x4
c001e408:	68 38 c7 02 c0       	push   0xc002c738
c001e40d:	68 8c 0e 03 c0       	push   0xc0030e8c
c001e412:	68 64 8a 02 c0       	push   0xc0028a64
c001e417:	e8 39 41 ff ff       	call   c0012555 <__cxa_atexit>
c001e41c:	83 c4 10             	add    esp,0x10
c001e41f:	90                   	nop
c001e420:	83 c4 0c             	add    esp,0xc
c001e423:	c3                   	ret    

c001e424 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e424:	83 ec 0c             	sub    esp,0xc
c001e427:	83 ec 08             	sub    esp,0x8
c001e42a:	68 ff ff 00 00       	push   0xffff
c001e42f:	6a 01                	push   0x1
c001e431:	e8 53 ff ff ff       	call   c001e389 <__static_initialization_and_destruction_0(int, int)>
c001e436:	83 c4 10             	add    esp,0x10
c001e439:	83 c4 0c             	add    esp,0xc
c001e43c:	c3                   	ret    

c001e43d <Vm::inbv(unsigned short)>:
c001e43d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e441:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e446:	75 06                	jne    c001e44e <Vm::inbv(unsigned short)+0x11>
c001e448:	a0 ec 0e 03 c0       	mov    al,ds:0xc0030eec
c001e44d:	c3                   	ret    
c001e44e:	ec                   	in     al,dx
c001e44f:	c3                   	ret    

c001e450 <Vm::outbv(unsigned short, unsigned char)>:
c001e450:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e458:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e45d:	75 25                	jne    c001e484 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001e45f:	8b 0d ec 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030eec
c001e465:	8d 51 01             	lea    edx,[ecx+0x1]
c001e468:	88 81 00 0f 03 c0    	mov    BYTE PTR [ecx-0x3ffcf100],al
c001e46e:	89 15 ec 0e 03 c0    	mov    DWORD PTR ds:0xc0030eec,edx
c001e474:	83 fa 20             	cmp    edx,0x20
c001e477:	75 0c                	jne    c001e485 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001e479:	c7 05 ec 0e 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0030eec,0x1f
c001e483:	c3                   	ret    
c001e484:	ee                   	out    dx,al
c001e485:	c3                   	ret    

c001e486 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e486:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e48b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e490:	c1 e0 04             	shl    eax,0x4
c001e493:	01 d0                	add    eax,edx
c001e495:	c3                   	ret    

c001e496 <Vm::getSegment(unsigned int)>:
c001e496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e49a:	c1 e8 10             	shr    eax,0x10
c001e49d:	c3                   	ret    

c001e49e <Vm::getOffset(unsigned int)>:
c001e49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e4a2:	c3                   	ret    

c001e4a3 <Vm::mainloop2()>:
c001e4a3:	83 ec 18             	sub    esp,0x18
c001e4a6:	fa                   	cli    
c001e4a7:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001e4ad:	6a 02                	push   0x2
c001e4af:	c6 05 e5 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ee5,0x1
c001e4b6:	e8 9e f6 ff ff       	call   c001db59 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e4bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4c0:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e4c4:	52                   	push   edx
c001e4c5:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e4c9:	52                   	push   edx
c001e4ca:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e4ce:	52                   	push   edx
c001e4cf:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e4d3:	50                   	push   eax
c001e4d4:	e8 21 1e fe ff       	call   c00002fa <goToVM86>
c001e4d9:	83 c4 2c             	add    esp,0x2c
c001e4dc:	c3                   	ret    

c001e4dd <Vm::mainVm8086Loop(void*)>:
c001e4dd:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e4e2:	48                   	dec    eax
c001e4e3:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e4e8:	75 01                	jne    c001e4eb <Vm::mainVm8086Loop(void*)+0xe>
c001e4ea:	fb                   	sti    
c001e4eb:	eb b6                	jmp    c001e4a3 <Vm::mainloop2()>

c001e4ed <Vm::mainloop3(unsigned long)>:
c001e4ed:	83 ec 18             	sub    esp,0x18
c001e4f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4f4:	fa                   	cli    
c001e4f5:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001e4fb:	6a 02                	push   0x2
c001e4fd:	c6 05 e4 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030ee4,0x1
c001e504:	a3 e0 0e 03 c0       	mov    ds:0xc0030ee0,eax
c001e509:	e8 4b f6 ff ff       	call   c001db59 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e50e:	83 c4 1c             	add    esp,0x1c
c001e511:	eb 90                	jmp    c001e4a3 <Vm::mainloop2()>

c001e513 <Vm::initialise8086()>:
c001e513:	83 ec 0c             	sub    esp,0xc
c001e516:	68 80 00 00 00       	push   0x80
c001e51b:	6a 00                	push   0x0
c001e51d:	68 dd e4 01 c0       	push   0xc001e4dd
c001e522:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c001e528:	e8 57 f2 ff ff       	call   c001d784 <Process::createThread(void (*)(void*), void*, int)>
c001e52d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e534:	a3 e8 0e 03 c0       	mov    ds:0xc0030ee8,eax
c001e539:	68 00 01 00 00       	push   0x100
c001e53e:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c001e543:	6a 00                	push   0x0
c001e545:	6a 00                	push   0x0
c001e547:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e54d:	e8 68 37 ff ff       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e552:	83 c4 2c             	add    esp,0x2c
c001e555:	c3                   	ret    

c001e556 <Vm::finish8086()>:
c001e556:	53                   	push   ebx
c001e557:	83 ec 08             	sub    esp,0x8
c001e55a:	fa                   	cli    
c001e55b:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001e561:	80 3d e4 0e 03 c0 00 	cmp    BYTE PTR ds:0xc0030ee4,0x0
c001e568:	75 15                	jne    c001e57f <Vm::finish8086()+0x29>
c001e56a:	e8 3a f4 ff ff       	call   c001d9a9 <schedule()>
c001e56f:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e574:	48                   	dec    eax
c001e575:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e57a:	75 de                	jne    c001e55a <Vm::finish8086()+0x4>
c001e57c:	fb                   	sti    
c001e57d:	eb db                	jmp    c001e55a <Vm::finish8086()+0x4>
c001e57f:	83 ec 0c             	sub    esp,0xc
c001e582:	8b 1d e0 0e 03 c0    	mov    ebx,DWORD PTR ds:0xc0030ee0
c001e588:	ff 35 e8 0e 03 c0    	push   DWORD PTR ds:0xc0030ee8
c001e58e:	c6 05 e4 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ee4,0x0
c001e595:	e8 92 f8 ff ff       	call   c001de2c <unblockTask(ThreadControlBlock*)>
c001e59a:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e59f:	83 c4 10             	add    esp,0x10
c001e5a2:	8d 50 ff             	lea    edx,[eax-0x1]
c001e5a5:	89 15 88 0e 03 c0    	mov    DWORD PTR ds:0xc0030e88,edx
c001e5ab:	85 d2                	test   edx,edx
c001e5ad:	75 01                	jne    c001e5b0 <Vm::finish8086()+0x5a>
c001e5af:	fb                   	sti    
c001e5b0:	89 d8                	mov    eax,ebx
c001e5b2:	83 c4 08             	add    esp,0x8
c001e5b5:	5b                   	pop    ebx
c001e5b6:	c3                   	ret    

c001e5b7 <Vm::getOutput8086(unsigned char*)>:
c001e5b7:	57                   	push   edi
c001e5b8:	8b 0d ec 0e 03 c0    	mov    ecx,DWORD PTR ds:0xc0030eec
c001e5be:	56                   	push   esi
c001e5bf:	be 00 0f 03 c0       	mov    esi,0xc0030f00
c001e5c4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e5c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e5ca:	a1 ec 0e 03 c0       	mov    eax,ds:0xc0030eec
c001e5cf:	5e                   	pop    esi
c001e5d0:	c7 05 ec 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030eec,0x0
c001e5da:	5f                   	pop    edi
c001e5db:	c3                   	ret    

c001e5dc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e5dc:	55                   	push   ebp
c001e5dd:	57                   	push   edi
c001e5de:	56                   	push   esi
c001e5df:	53                   	push   ebx
c001e5e0:	83 ec 2c             	sub    esp,0x2c
c001e5e3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e5e7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e5eb:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e5ef:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001e5f3:	fa                   	cli    
c001e5f4:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c001e5fa:	0f b6 35 e5 0e 03 c0 	movzx  esi,BYTE PTR ds:0xc0030ee5
c001e601:	89 f0                	mov    eax,esi
c001e603:	84 c0                	test   al,al
c001e605:	75 1d                	jne    c001e624 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001e607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e60b:	e8 99 f3 ff ff       	call   c001d9a9 <schedule()>
c001e610:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e615:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e619:	48                   	dec    eax
c001e61a:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e61f:	75 d2                	jne    c001e5f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e621:	fb                   	sti    
c001e622:	eb cf                	jmp    c001e5f3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e624:	a1 e8 0e 03 c0       	mov    eax,ds:0xc0030ee8
c001e629:	c7 05 ec 0e 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030eec,0x0
c001e633:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001e637:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001e63b:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001e63f:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001e643:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e647:	50                   	push   eax
c001e648:	6a 20                	push   0x20
c001e64a:	6a 00                	push   0x0
c001e64c:	68 00 0f 03 c0       	push   0xc0030f00
c001e651:	e8 fa 20 fe ff       	call   c0000750 <memset>
c001e656:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e65d:	e8 37 0f ff ff       	call   c000f599 <malloc>
c001e662:	83 c4 0c             	add    esp,0xc
c001e665:	89 c3                	mov    ebx,eax
c001e667:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c001e66d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e671:	50                   	push   eax
c001e672:	e8 9b 45 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c001e677:	83 c4 10             	add    esp,0x10
c001e67a:	85 db                	test   ebx,ebx
c001e67c:	75 0a                	jne    c001e688 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001e67e:	83 ec 0c             	sub    esp,0xc
c001e681:	68 ac bc 02 c0       	push   0xc002bcac
c001e686:	eb 3e                	jmp    c001e6c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e688:	50                   	push   eax
c001e689:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e68d:	50                   	push   eax
c001e68e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e692:	50                   	push   eax
c001e693:	53                   	push   ebx
c001e694:	e8 89 48 ff ff       	call   c0012f22 <File::stat(unsigned long long*, bool*)>
c001e699:	83 c4 10             	add    esp,0x10
c001e69c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001e6a1:	74 0a                	je     c001e6ad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e6a3:	83 ec 0c             	sub    esp,0xc
c001e6a6:	68 c0 bc 02 c0       	push   0xc002bcc0
c001e6ab:	eb 19                	jmp    c001e6c6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001e6ad:	51                   	push   ecx
c001e6ae:	51                   	push   ecx
c001e6af:	6a 01                	push   0x1
c001e6b1:	53                   	push   ebx
c001e6b2:	e8 bf 45 ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c001e6b7:	83 c4 10             	add    esp,0x10
c001e6ba:	85 c0                	test   eax,eax
c001e6bc:	74 24                	je     c001e6e2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001e6be:	83 ec 0c             	sub    esp,0xc
c001e6c1:	68 d9 bc 02 c0       	push   0xc002bcd9
c001e6c6:	e8 54 b7 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001e6cb:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e6d0:	83 c4 10             	add    esp,0x10
c001e6d3:	48                   	dec    eax
c001e6d4:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e6d9:	85 c0                	test   eax,eax
c001e6db:	75 01                	jne    c001e6de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001e6dd:	fb                   	sti    
c001e6de:	31 f6                	xor    esi,esi
c001e6e0:	eb 58                	jmp    c001e73a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001e6e2:	0f b7 ed             	movzx  ebp,bp
c001e6e5:	50                   	push   eax
c001e6e6:	0f b7 ff             	movzx  edi,di
c001e6e9:	50                   	push   eax
c001e6ea:	55                   	push   ebp
c001e6eb:	57                   	push   edi
c001e6ec:	e8 95 fd ff ff       	call   c001e486 <Vm::realToLinear(unsigned short, unsigned short)>
c001e6f1:	5a                   	pop    edx
c001e6f2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001e6f4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e6f8:	51                   	push   ecx
c001e6f9:	50                   	push   eax
c001e6fa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e6fe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e702:	53                   	push   ebx
c001e703:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e706:	83 c4 14             	add    esp,0x14
c001e709:	53                   	push   ebx
c001e70a:	e8 c5 45 ff ff       	call   c0012cd4 <File::close()>
c001e70f:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c001e714:	83 c4 10             	add    esp,0x10
c001e717:	48                   	dec    eax
c001e718:	c6 05 e5 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030ee5,0x0
c001e71f:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c001e724:	85 c0                	test   eax,eax
c001e726:	75 01                	jne    c001e729 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001e728:	fb                   	sti    
c001e729:	83 ec 0c             	sub    esp,0xc
c001e72c:	ff 35 e8 0e 03 c0    	push   DWORD PTR ds:0xc0030ee8
c001e732:	e8 f5 f6 ff ff       	call   c001de2c <unblockTask(ThreadControlBlock*)>
c001e737:	83 c4 10             	add    esp,0x10
c001e73a:	83 c4 2c             	add    esp,0x2c
c001e73d:	89 f0                	mov    eax,esi
c001e73f:	5b                   	pop    ebx
c001e740:	5e                   	pop    esi
c001e741:	5f                   	pop    edi
c001e742:	5d                   	pop    ebp
c001e743:	c3                   	ret    

c001e744 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e744:	57                   	push   edi
c001e745:	56                   	push   esi
c001e746:	53                   	push   ebx
c001e747:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e74b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e74f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e753:	83 e8 06             	sub    eax,0x6
c001e756:	0f b7 c0             	movzx  eax,ax
c001e759:	50                   	push   eax
c001e75a:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e75f:	50                   	push   eax
c001e760:	e8 21 fd ff ff       	call   c001e486 <Vm::realToLinear(unsigned short, unsigned short)>
c001e765:	5a                   	pop    edx
c001e766:	5e                   	pop    esi
c001e767:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e76a:	8d 56 fa             	lea    edx,[esi-0x6]
c001e76d:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e773:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e776:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e779:	83 c2 02             	add    edx,0x2
c001e77c:	66 89 10             	mov    WORD PTR [eax],dx
c001e77f:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e782:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e786:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e789:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e78d:	89 d6                	mov    esi,edx
c001e78f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e795:	66 81 e6 ff fd       	and    si,0xfdff
c001e79a:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e79e:	74 07                	je     c001e7a7 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e7a0:	89 d6                	mov    esi,edx
c001e7a2:	66 81 ce 00 02       	or     si,0x200
c001e7a7:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e7ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e7b0:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e7b4:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e7bc:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e7bf:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e7c7:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e7ca:	5b                   	pop    ebx
c001e7cb:	5e                   	pop    esi
c001e7cc:	5f                   	pop    edi
c001e7cd:	c3                   	ret    

c001e7ce <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e7ce:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7d3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7d8:	c1 e0 04             	shl    eax,0x4
c001e7db:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e7de:	c3                   	ret    

c001e7df <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e7df:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7e4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7e9:	c1 e0 04             	shl    eax,0x4
c001e7ec:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e7f0:	c3                   	ret    

c001e7f1 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e7f1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e7f6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e7fb:	c1 e0 04             	shl    eax,0x4
c001e7fe:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e801:	c3                   	ret    

c001e802 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e802:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e807:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e80c:	c1 e0 04             	shl    eax,0x4
c001e80f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e813:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e816:	c3                   	ret    

c001e817 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e817:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e81c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e821:	c1 e0 04             	shl    eax,0x4
c001e824:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e828:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001e82c:	c3                   	ret    

c001e82d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001e82d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e832:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e837:	c1 e0 04             	shl    eax,0x4
c001e83a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e83e:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001e841:	c3                   	ret    

c001e842 <Vm::faultHandler(regs*)>:
c001e842:	55                   	push   ebp
c001e843:	57                   	push   edi
c001e844:	56                   	push   esi
c001e845:	53                   	push   ebx
c001e846:	83 ec 1c             	sub    esp,0x1c
c001e849:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e84d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001e850:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001e854:	0f b7 f8             	movzx  edi,ax
c001e857:	52                   	push   edx
c001e858:	0f b7 c0             	movzx  eax,ax
c001e85b:	50                   	push   eax
c001e85c:	e8 25 fc ff ff       	call   c001e486 <Vm::realToLinear(unsigned short, unsigned short)>
c001e861:	5a                   	pop    edx
c001e862:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001e865:	59                   	pop    ecx
c001e866:	89 c1                	mov    ecx,eax
c001e868:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e86b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e86f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e874:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e878:	0f b7 c5             	movzx  eax,bp
c001e87b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e87f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001e883:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e887:	e8 fa fb ff ff       	call   c001e486 <Vm::realToLinear(unsigned short, unsigned short)>
c001e88c:	5e                   	pop    esi
c001e88d:	be 06 00 00 00       	mov    esi,0x6
c001e892:	5a                   	pop    edx
c001e893:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001e898:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001e89d:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001e8a0:	80 fa 9d             	cmp    dl,0x9d
c001e8a3:	0f 84 2c 02 00 00    	je     c001ead5 <Vm::faultHandler(regs*)+0x293>
c001e8a9:	0f 87 91 00 00 00    	ja     c001e940 <Vm::faultHandler(regs*)+0xfe>
c001e8af:	80 fa 66             	cmp    dl,0x66
c001e8b2:	0f 84 98 01 00 00    	je     c001ea50 <Vm::faultHandler(regs*)+0x20e>
c001e8b8:	77 47                	ja     c001e901 <Vm::faultHandler(regs*)+0xbf>
c001e8ba:	80 fa 36             	cmp    dl,0x36
c001e8bd:	0f 84 80 01 00 00    	je     c001ea43 <Vm::faultHandler(regs*)+0x201>
c001e8c3:	77 1a                	ja     c001e8df <Vm::faultHandler(regs*)+0x9d>
c001e8c5:	80 fa 26             	cmp    dl,0x26
c001e8c8:	0f 84 4e 01 00 00    	je     c001ea1c <Vm::faultHandler(regs*)+0x1da>
c001e8ce:	80 fa 2e             	cmp    dl,0x2e
c001e8d1:	0f 85 e2 05 00 00    	jne    c001eeb9 <Vm::faultHandler(regs*)+0x677>
c001e8d7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8da:	31 f6                	xor    esi,esi
c001e8dc:	41                   	inc    ecx
c001e8dd:	eb be                	jmp    c001e89d <Vm::faultHandler(regs*)+0x5b>
c001e8df:	80 fa 64             	cmp    dl,0x64
c001e8e2:	0f 84 41 01 00 00    	je     c001ea29 <Vm::faultHandler(regs*)+0x1e7>
c001e8e8:	0f 87 48 01 00 00    	ja     c001ea36 <Vm::faultHandler(regs*)+0x1f4>
c001e8ee:	80 fa 3e             	cmp    dl,0x3e
c001e8f1:	0f 85 c2 05 00 00    	jne    c001eeb9 <Vm::faultHandler(regs*)+0x677>
c001e8f7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001e8fa:	be 01 00 00 00       	mov    esi,0x1
c001e8ff:	eb db                	jmp    c001e8dc <Vm::faultHandler(regs*)+0x9a>
c001e901:	80 fa 6d             	cmp    dl,0x6d
c001e904:	0f 84 ec 02 00 00    	je     c001ebf6 <Vm::faultHandler(regs*)+0x3b4>
c001e90a:	77 17                	ja     c001e923 <Vm::faultHandler(regs*)+0xe1>
c001e90c:	80 fa 67             	cmp    dl,0x67
c001e90f:	0f 84 48 01 00 00    	je     c001ea5d <Vm::faultHandler(regs*)+0x21b>
c001e915:	80 fa 6c             	cmp    dl,0x6c
c001e918:	0f 84 69 02 00 00    	je     c001eb87 <Vm::faultHandler(regs*)+0x345>
c001e91e:	e9 96 05 00 00       	jmp    c001eeb9 <Vm::faultHandler(regs*)+0x677>
c001e923:	80 fa 6f             	cmp    dl,0x6f
c001e926:	0f 84 f4 03 00 00    	je     c001ed20 <Vm::faultHandler(regs*)+0x4de>
c001e92c:	0f 82 59 03 00 00    	jb     c001ec8b <Vm::faultHandler(regs*)+0x449>
c001e932:	80 fa 9c             	cmp    dl,0x9c
c001e935:	0f 84 2f 01 00 00    	je     c001ea6a <Vm::faultHandler(regs*)+0x228>
c001e93b:	e9 79 05 00 00       	jmp    c001eeb9 <Vm::faultHandler(regs*)+0x677>
c001e940:	80 fa ec             	cmp    dl,0xec
c001e943:	0f 84 14 05 00 00    	je     c001ee5d <Vm::faultHandler(regs*)+0x61b>
c001e949:	77 7b                	ja     c001e9c6 <Vm::faultHandler(regs*)+0x184>
c001e94b:	80 fa e4             	cmp    dl,0xe4
c001e94e:	0f 84 93 04 00 00    	je     c001ede7 <Vm::faultHandler(regs*)+0x5a5>
c001e954:	77 53                	ja     c001e9a9 <Vm::faultHandler(regs*)+0x167>
c001e956:	80 fa cd             	cmp    dl,0xcd
c001e959:	0f 84 d9 01 00 00    	je     c001eb38 <Vm::faultHandler(regs*)+0x2f6>
c001e95f:	80 fa cf             	cmp    dl,0xcf
c001e962:	0f 85 51 05 00 00    	jne    c001eeb9 <Vm::faultHandler(regs*)+0x677>
c001e968:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001e96b:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001e96e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001e972:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001e975:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001e979:	81 ca 00 02 02 00    	or     edx,0x20200
c001e97f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001e982:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001e986:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e98c:	66 c1 e8 09          	shr    ax,0x9
c001e990:	83 e0 01             	and    eax,0x1
c001e993:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e996:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001e999:	83 c0 06             	add    eax,0x6
c001e99c:	25 ff ff 00 00       	and    eax,0xffff
c001e9a1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001e9a4:	e9 0c 05 00 00       	jmp    c001eeb5 <Vm::faultHandler(regs*)+0x673>
c001e9a9:	80 fa e6             	cmp    dl,0xe6
c001e9ac:	0f 84 7f 04 00 00    	je     c001ee31 <Vm::faultHandler(regs*)+0x5ef>
c001e9b2:	0f 82 4b 04 00 00    	jb     c001ee03 <Vm::faultHandler(regs*)+0x5c1>
c001e9b8:	80 fa e7             	cmp    dl,0xe7
c001e9bb:	0f 84 87 04 00 00    	je     c001ee48 <Vm::faultHandler(regs*)+0x606>
c001e9c1:	e9 f3 04 00 00       	jmp    c001eeb9 <Vm::faultHandler(regs*)+0x677>
c001e9c6:	80 fa ef             	cmp    dl,0xef
c001e9c9:	0f 84 d1 04 00 00    	je     c001eea0 <Vm::faultHandler(regs*)+0x65e>
c001e9cf:	77 28                	ja     c001e9f9 <Vm::faultHandler(regs*)+0x1b7>
c001e9d1:	80 fa ed             	cmp    dl,0xed
c001e9d4:	0f 84 9f 04 00 00    	je     c001ee79 <Vm::faultHandler(regs*)+0x637>
c001e9da:	80 fa ee             	cmp    dl,0xee
c001e9dd:	0f 85 d6 04 00 00    	jne    c001eeb9 <Vm::faultHandler(regs*)+0x677>
c001e9e3:	50                   	push   eax
c001e9e4:	50                   	push   eax
c001e9e5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001e9e9:	50                   	push   eax
c001e9ea:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001e9ee:	50                   	push   eax
c001e9ef:	e8 5c fa ff ff       	call   c001e450 <Vm::outbv(unsigned short, unsigned char)>
c001e9f4:	e9 9f 04 00 00       	jmp    c001ee98 <Vm::faultHandler(regs*)+0x656>
c001e9f9:	80 fa fa             	cmp    dl,0xfa
c001e9fc:	0f 84 69 01 00 00    	je     c001eb6b <Vm::faultHandler(regs*)+0x329>
c001ea02:	80 fa fb             	cmp    dl,0xfb
c001ea05:	0f 84 6e 01 00 00    	je     c001eb79 <Vm::faultHandler(regs*)+0x337>
c001ea0b:	80 fa f3             	cmp    dl,0xf3
c001ea0e:	0f 85 a5 04 00 00    	jne    c001eeb9 <Vm::faultHandler(regs*)+0x677>
c001ea14:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea17:	e9 c0 fe ff ff       	jmp    c001e8dc <Vm::faultHandler(regs*)+0x9a>
c001ea1c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea1f:	be 02 00 00 00       	mov    esi,0x2
c001ea24:	e9 b3 fe ff ff       	jmp    c001e8dc <Vm::faultHandler(regs*)+0x9a>
c001ea29:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea2c:	be 03 00 00 00       	mov    esi,0x3
c001ea31:	e9 a6 fe ff ff       	jmp    c001e8dc <Vm::faultHandler(regs*)+0x9a>
c001ea36:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea39:	be 04 00 00 00       	mov    esi,0x4
c001ea3e:	e9 99 fe ff ff       	jmp    c001e8dc <Vm::faultHandler(regs*)+0x9a>
c001ea43:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea46:	be 05 00 00 00       	mov    esi,0x5
c001ea4b:	e9 8c fe ff ff       	jmp    c001e8dc <Vm::faultHandler(regs*)+0x9a>
c001ea50:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea53:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001ea58:	e9 7f fe ff ff       	jmp    c001e8dc <Vm::faultHandler(regs*)+0x9a>
c001ea5d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ea60:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ea65:	e9 72 fe ff ff       	jmp    c001e8dc <Vm::faultHandler(regs*)+0x9a>
c001ea6a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea6d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001ea71:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ea76:	74 30                	je     c001eaa8 <Vm::faultHandler(regs*)+0x266>
c001ea78:	83 e9 04             	sub    ecx,0x4
c001ea7b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001ea81:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001ea87:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001ea8a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001ea8d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea93:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001ea97:	0f 84 15 04 00 00    	je     c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001ea9d:	80 ce 02             	or     dh,0x2
c001eaa0:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001eaa3:	e9 0a 04 00 00       	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001eaa8:	83 e9 02             	sub    ecx,0x2
c001eaab:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001eab1:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001eab4:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001eab8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001eabe:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001eac2:	74 05                	je     c001eac9 <Vm::faultHandler(regs*)+0x287>
c001eac4:	80 ce 02             	or     dh,0x2
c001eac7:	eb 03                	jmp    c001eacc <Vm::faultHandler(regs*)+0x28a>
c001eac9:	80 e6 fd             	and    dh,0xfd
c001eacc:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001ead0:	e9 dd 03 00 00       	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001ead5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eada:	74 2a                	je     c001eb06 <Vm::faultHandler(regs*)+0x2c4>
c001eadc:	8b 10                	mov    edx,DWORD PTR [eax]
c001eade:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001eae4:	81 ca 00 02 02 00    	or     edx,0x20200
c001eaea:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eaed:	8b 00                	mov    eax,DWORD PTR [eax]
c001eaef:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eaf5:	c1 e8 09             	shr    eax,0x9
c001eaf8:	83 e0 01             	and    eax,0x1
c001eafb:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eafe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb01:	83 c0 04             	add    eax,0x4
c001eb04:	eb 25                	jmp    c001eb2b <Vm::faultHandler(regs*)+0x2e9>
c001eb06:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001eb09:	81 ca 00 02 02 00    	or     edx,0x20200
c001eb0f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001eb12:	66 8b 00             	mov    ax,WORD PTR [eax]
c001eb15:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb1b:	66 c1 e8 09          	shr    ax,0x9
c001eb1f:	83 e0 01             	and    eax,0x1
c001eb22:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eb25:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001eb28:	83 c0 02             	add    eax,0x2
c001eb2b:	25 ff ff 00 00       	and    eax,0xffff
c001eb30:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001eb33:	e9 7a 03 00 00       	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001eb38:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eb3c:	3c ee                	cmp    al,0xee
c001eb3e:	75 10                	jne    c001eb50 <Vm::faultHandler(regs*)+0x30e>
c001eb40:	83 ec 0c             	sub    esp,0xc
c001eb43:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001eb46:	e8 a2 f9 ff ff       	call   c001e4ed <Vm::mainloop3(unsigned long)>
c001eb4b:	e9 4b 03 00 00       	jmp    c001ee9b <Vm::faultHandler(regs*)+0x659>
c001eb50:	83 ec 0c             	sub    esp,0xc
c001eb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001eb57:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb5b:	51                   	push   ecx
c001eb5c:	50                   	push   eax
c001eb5d:	53                   	push   ebx
c001eb5e:	e8 e1 fb ff ff       	call   c001e744 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001eb63:	83 c4 20             	add    esp,0x20
c001eb66:	e9 4a 03 00 00       	jmp    c001eeb5 <Vm::faultHandler(regs*)+0x673>
c001eb6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb70:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb74:	e9 39 03 00 00       	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001eb79:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb7e:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001eb82:	e9 2b 03 00 00       	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001eb87:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001eb8a:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001eb8f:	74 2b                	je     c001ebbc <Vm::faultHandler(regs*)+0x37a>
c001eb91:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001eb98:	76 22                	jbe    c001ebbc <Vm::faultHandler(regs*)+0x37a>
c001eb9a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eb9e:	50                   	push   eax
c001eb9f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eba3:	50                   	push   eax
c001eba4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eba8:	50                   	push   eax
c001eba9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ebad:	50                   	push   eax
c001ebae:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ebb2:	50                   	push   eax
c001ebb3:	6a 6c                	push   0x6c
c001ebb5:	6a 6c                	push   0x6c
c001ebb7:	e9 b9 01 00 00       	jmp    c001ed75 <Vm::faultHandler(regs*)+0x533>
c001ebbc:	83 ec 0c             	sub    esp,0xc
c001ebbf:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ebc3:	0f b7 f6             	movzx  esi,si
c001ebc6:	50                   	push   eax
c001ebc7:	e8 71 f8 ff ff       	call   c001e43d <Vm::inbv(unsigned short)>
c001ebcc:	83 c4 0c             	add    esp,0xc
c001ebcf:	0f b6 c0             	movzx  eax,al
c001ebd2:	50                   	push   eax
c001ebd3:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001ebd7:	50                   	push   eax
c001ebd8:	56                   	push   esi
c001ebd9:	e8 24 fc ff ff       	call   c001e802 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001ebde:	83 c4 10             	add    esp,0x10
c001ebe1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ebe4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ebe8:	74 03                	je     c001ebed <Vm::faultHandler(regs*)+0x3ab>
c001ebea:	48                   	dec    eax
c001ebeb:	eb 01                	jmp    c001ebee <Vm::faultHandler(regs*)+0x3ac>
c001ebed:	40                   	inc    eax
c001ebee:	0f b7 c0             	movzx  eax,ax
c001ebf1:	e9 8d 00 00 00       	jmp    c001ec83 <Vm::faultHandler(regs*)+0x441>
c001ebf6:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001ebf9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ebfc:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ec01:	74 29                	je     c001ec2c <Vm::faultHandler(regs*)+0x3ea>
c001ec03:	3d ff ff 00 00       	cmp    eax,0xffff
c001ec08:	76 22                	jbe    c001ec2c <Vm::faultHandler(regs*)+0x3ea>
c001ec0a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ec0e:	50                   	push   eax
c001ec0f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ec13:	50                   	push   eax
c001ec14:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ec18:	50                   	push   eax
c001ec19:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ec1d:	50                   	push   eax
c001ec1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ec22:	50                   	push   eax
c001ec23:	6a 6d                	push   0x6d
c001ec25:	6a 6d                	push   0x6d
c001ec27:	e9 49 01 00 00       	jmp    c001ed75 <Vm::faultHandler(regs*)+0x533>
c001ec2c:	0f b7 c8             	movzx  ecx,ax
c001ec2f:	0f b7 f6             	movzx  esi,si
c001ec32:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ec35:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ec3a:	74 20                	je     c001ec5c <Vm::faultHandler(regs*)+0x41a>
c001ec3c:	ed                   	in     eax,dx
c001ec3d:	55                   	push   ebp
c001ec3e:	50                   	push   eax
c001ec3f:	51                   	push   ecx
c001ec40:	56                   	push   esi
c001ec41:	e8 e7 fb ff ff       	call   c001e82d <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001ec46:	83 c4 10             	add    esp,0x10
c001ec49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec4c:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec50:	74 05                	je     c001ec57 <Vm::faultHandler(regs*)+0x415>
c001ec52:	83 e8 04             	sub    eax,0x4
c001ec55:	eb 27                	jmp    c001ec7e <Vm::faultHandler(regs*)+0x43c>
c001ec57:	83 c0 04             	add    eax,0x4
c001ec5a:	eb 22                	jmp    c001ec7e <Vm::faultHandler(regs*)+0x43c>
c001ec5c:	66 ed                	in     ax,dx
c001ec5e:	0f b7 c0             	movzx  eax,ax
c001ec61:	57                   	push   edi
c001ec62:	50                   	push   eax
c001ec63:	51                   	push   ecx
c001ec64:	56                   	push   esi
c001ec65:	e8 ad fb ff ff       	call   c001e817 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ec6a:	83 c4 10             	add    esp,0x10
c001ec6d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ec70:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ec74:	74 05                	je     c001ec7b <Vm::faultHandler(regs*)+0x439>
c001ec76:	83 e8 02             	sub    eax,0x2
c001ec79:	eb 03                	jmp    c001ec7e <Vm::faultHandler(regs*)+0x43c>
c001ec7b:	83 c0 02             	add    eax,0x2
c001ec7e:	25 ff ff 00 00       	and    eax,0xffff
c001ec83:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001ec86:	e9 27 02 00 00       	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001ec8b:	8d 46 ff             	lea    eax,[esi-0x1]
c001ec8e:	3c 05                	cmp    al,0x5
c001ec90:	77 24                	ja     c001ecb6 <Vm::faultHandler(regs*)+0x474>
c001ec92:	0f b6 c0             	movzx  eax,al
c001ec95:	ff 24 85 4c bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd42b4]
c001ec9c:	0f b7 fd             	movzx  edi,bp
c001ec9f:	eb 15                	jmp    c001ecb6 <Vm::faultHandler(regs*)+0x474>
c001eca1:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001eca5:	eb 0f                	jmp    c001ecb6 <Vm::faultHandler(regs*)+0x474>
c001eca7:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001ecab:	eb 09                	jmp    c001ecb6 <Vm::faultHandler(regs*)+0x474>
c001ecad:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001ecb1:	eb 03                	jmp    c001ecb6 <Vm::faultHandler(regs*)+0x474>
c001ecb3:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001ecb6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ecb9:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ecbe:	74 29                	je     c001ece9 <Vm::faultHandler(regs*)+0x4a7>
c001ecc0:	3d ff ff 00 00       	cmp    eax,0xffff
c001ecc5:	76 22                	jbe    c001ece9 <Vm::faultHandler(regs*)+0x4a7>
c001ecc7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eccb:	50                   	push   eax
c001eccc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ecd0:	50                   	push   eax
c001ecd1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ecd5:	50                   	push   eax
c001ecd6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ecda:	50                   	push   eax
c001ecdb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ecdf:	50                   	push   eax
c001ece0:	6a 6e                	push   0x6e
c001ece2:	6a 6e                	push   0x6e
c001ece4:	e9 8c 00 00 00       	jmp    c001ed75 <Vm::faultHandler(regs*)+0x533>
c001ece9:	0f b7 c0             	movzx  eax,ax
c001ecec:	52                   	push   edx
c001eced:	52                   	push   edx
c001ecee:	50                   	push   eax
c001ecef:	57                   	push   edi
c001ecf0:	e8 d9 fa ff ff       	call   c001e7ce <Vm::readByteFromReal(unsigned short, unsigned short)>
c001ecf5:	59                   	pop    ecx
c001ecf6:	0f b6 c0             	movzx  eax,al
c001ecf9:	5e                   	pop    esi
c001ecfa:	50                   	push   eax
c001ecfb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ecff:	50                   	push   eax
c001ed00:	e8 4b f7 ff ff       	call   c001e450 <Vm::outbv(unsigned short, unsigned char)>
c001ed05:	83 c4 10             	add    esp,0x10
c001ed08:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ed0b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001ed0f:	74 03                	je     c001ed14 <Vm::faultHandler(regs*)+0x4d2>
c001ed11:	48                   	dec    eax
c001ed12:	eb 01                	jmp    c001ed15 <Vm::faultHandler(regs*)+0x4d3>
c001ed14:	40                   	inc    eax
c001ed15:	0f b7 c0             	movzx  eax,ax
c001ed18:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ed1b:	e9 92 01 00 00       	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001ed20:	8d 46 ff             	lea    eax,[esi-0x1]
c001ed23:	3c 05                	cmp    al,0x5
c001ed25:	77 1f                	ja     c001ed46 <Vm::faultHandler(regs*)+0x504>
c001ed27:	0f b6 c0             	movzx  eax,al
c001ed2a:	ff 24 85 64 bd 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd429c]
c001ed31:	89 ef                	mov    edi,ebp
c001ed33:	eb 11                	jmp    c001ed46 <Vm::faultHandler(regs*)+0x504>
c001ed35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001ed38:	eb 0c                	jmp    c001ed46 <Vm::faultHandler(regs*)+0x504>
c001ed3a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001ed3d:	eb 07                	jmp    c001ed46 <Vm::faultHandler(regs*)+0x504>
c001ed3f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001ed42:	eb 02                	jmp    c001ed46 <Vm::faultHandler(regs*)+0x504>
c001ed44:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001ed46:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ed49:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001ed4e:	74 37                	je     c001ed87 <Vm::faultHandler(regs*)+0x545>
c001ed50:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001ed56:	76 2f                	jbe    c001ed87 <Vm::faultHandler(regs*)+0x545>
c001ed58:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001ed5c:	50                   	push   eax
c001ed5d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001ed61:	50                   	push   eax
c001ed62:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001ed66:	50                   	push   eax
c001ed67:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001ed6b:	50                   	push   eax
c001ed6c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ed70:	50                   	push   eax
c001ed71:	6a 6f                	push   0x6f
c001ed73:	6a 6f                	push   0x6f
c001ed75:	68 f2 bc 02 c0       	push   0xc002bcf2
c001ed7a:	e8 34 39 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001ed7f:	83 c4 20             	add    esp,0x20
c001ed82:	e9 86 01 00 00       	jmp    c001ef0d <Vm::faultHandler(regs*)+0x6cb>
c001ed87:	0f b7 d7             	movzx  edx,di
c001ed8a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001ed8d:	0f b7 c6             	movzx  eax,si
c001ed90:	81 e1 00 04 00 00    	and    ecx,0x400
c001ed96:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001ed99:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ed9e:	74 1d                	je     c001edbd <Vm::faultHandler(regs*)+0x57b>
c001eda0:	55                   	push   ebp
c001eda1:	55                   	push   ebp
c001eda2:	50                   	push   eax
c001eda3:	52                   	push   edx
c001eda4:	e8 48 fa ff ff       	call   c001e7f1 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001eda9:	83 c4 10             	add    esp,0x10
c001edac:	89 fa                	mov    edx,edi
c001edae:	ef                   	out    dx,eax
c001edaf:	85 c9                	test   ecx,ecx
c001edb1:	74 05                	je     c001edb8 <Vm::faultHandler(regs*)+0x576>
c001edb3:	83 ee 04             	sub    esi,0x4
c001edb6:	eb 21                	jmp    c001edd9 <Vm::faultHandler(regs*)+0x597>
c001edb8:	83 c6 04             	add    esi,0x4
c001edbb:	eb 1c                	jmp    c001edd9 <Vm::faultHandler(regs*)+0x597>
c001edbd:	55                   	push   ebp
c001edbe:	55                   	push   ebp
c001edbf:	50                   	push   eax
c001edc0:	52                   	push   edx
c001edc1:	e8 19 fa ff ff       	call   c001e7df <Vm::readWordFromReal(unsigned short, unsigned short)>
c001edc6:	83 c4 10             	add    esp,0x10
c001edc9:	89 fa                	mov    edx,edi
c001edcb:	66 ef                	out    dx,ax
c001edcd:	85 c9                	test   ecx,ecx
c001edcf:	74 05                	je     c001edd6 <Vm::faultHandler(regs*)+0x594>
c001edd1:	83 ee 02             	sub    esi,0x2
c001edd4:	eb 03                	jmp    c001edd9 <Vm::faultHandler(regs*)+0x597>
c001edd6:	83 c6 02             	add    esi,0x2
c001edd9:	81 e6 ff ff 00 00    	and    esi,0xffff
c001eddf:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001ede2:	e9 cb 00 00 00       	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001ede7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001edee:	83 ec 0c             	sub    esp,0xc
c001edf1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001edf5:	50                   	push   eax
c001edf6:	e8 42 f6 ff ff       	call   c001e43d <Vm::inbv(unsigned short)>
c001edfb:	0f b6 c0             	movzx  eax,al
c001edfe:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee01:	eb 3f                	jmp    c001ee42 <Vm::faultHandler(regs*)+0x600>
c001ee03:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee08:	74 07                	je     c001ee11 <Vm::faultHandler(regs*)+0x5cf>
c001ee0a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee0e:	ed                   	in     eax,dx
c001ee0f:	eb 14                	jmp    c001ee25 <Vm::faultHandler(regs*)+0x5e3>
c001ee11:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001ee14:	66 31 f6             	xor    si,si
c001ee17:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001ee1a:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee1e:	66 ed                	in     ax,dx
c001ee20:	0f b7 c0             	movzx  eax,ax
c001ee23:	09 f0                	or     eax,esi
c001ee25:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee28:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee2c:	e9 84 00 00 00       	jmp    c001eeb5 <Vm::faultHandler(regs*)+0x673>
c001ee31:	52                   	push   edx
c001ee32:	52                   	push   edx
c001ee33:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001ee37:	50                   	push   eax
c001ee38:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001ee3c:	50                   	push   eax
c001ee3d:	e8 0e f6 ff ff       	call   c001e450 <Vm::outbv(unsigned short, unsigned char)>
c001ee42:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ee46:	eb 53                	jmp    c001ee9b <Vm::faultHandler(regs*)+0x659>
c001ee48:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ee4b:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001ee4f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee54:	74 03                	je     c001ee59 <Vm::faultHandler(regs*)+0x617>
c001ee56:	ef                   	out    dx,eax
c001ee57:	eb cf                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x5e6>
c001ee59:	66 ef                	out    dx,ax
c001ee5b:	eb cb                	jmp    c001ee28 <Vm::faultHandler(regs*)+0x5e6>
c001ee5d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001ee64:	83 ec 0c             	sub    esp,0xc
c001ee67:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001ee6b:	50                   	push   eax
c001ee6c:	e8 cc f5 ff ff       	call   c001e43d <Vm::inbv(unsigned short)>
c001ee71:	0f b6 c0             	movzx  eax,al
c001ee74:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001ee77:	eb 1f                	jmp    c001ee98 <Vm::faultHandler(regs*)+0x656>
c001ee79:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001ee7c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001ee81:	74 03                	je     c001ee86 <Vm::faultHandler(regs*)+0x644>
c001ee83:	ed                   	in     eax,dx
c001ee84:	eb 0d                	jmp    c001ee93 <Vm::faultHandler(regs*)+0x651>
c001ee86:	66 ed                	in     ax,dx
c001ee88:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001ee8b:	0f b7 c0             	movzx  eax,ax
c001ee8e:	66 31 d2             	xor    dx,dx
c001ee91:	09 d0                	or     eax,edx
c001ee93:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001ee96:	eb 1a                	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001ee98:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001ee9b:	83 c4 10             	add    esp,0x10
c001ee9e:	eb 15                	jmp    c001eeb5 <Vm::faultHandler(regs*)+0x673>
c001eea0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001eea3:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001eea6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001eeab:	74 03                	je     c001eeb0 <Vm::faultHandler(regs*)+0x66e>
c001eead:	ef                   	out    dx,eax
c001eeae:	eb 02                	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x670>
c001eeb0:	66 ef                	out    dx,ax
c001eeb2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001eeb5:	b0 01                	mov    al,0x1
c001eeb7:	eb 56                	jmp    c001ef0f <Vm::faultHandler(regs*)+0x6cd>
c001eeb9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001eebd:	50                   	push   eax
c001eebe:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001eec2:	50                   	push   eax
c001eec3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001eec7:	50                   	push   eax
c001eec8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001eecc:	50                   	push   eax
c001eecd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001eed1:	50                   	push   eax
c001eed2:	52                   	push   edx
c001eed3:	52                   	push   edx
c001eed4:	68 1f bd 02 c0       	push   0xc002bd1f
c001eed9:	e8 d5 37 ff ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c001eede:	83 c4 20             	add    esp,0x20
c001eee1:	83 ec 0c             	sub    esp,0xc
c001eee4:	6a 60                	push   0x60
c001eee6:	e8 52 f5 ff ff       	call   c001e43d <Vm::inbv(unsigned short)>
c001eeeb:	83 c4 10             	add    esp,0x10
c001eeee:	3c 1c                	cmp    al,0x1c
c001eef0:	74 04                	je     c001eef6 <Vm::faultHandler(regs*)+0x6b4>
c001eef2:	3c 5a                	cmp    al,0x5a
c001eef4:	75 eb                	jne    c001eee1 <Vm::faultHandler(regs*)+0x69f>
c001eef6:	3c 5a                	cmp    al,0x5a
c001eef8:	74 04                	je     c001eefe <Vm::faultHandler(regs*)+0x6bc>
c001eefa:	3c 1c                	cmp    al,0x1c
c001eefc:	75 0f                	jne    c001ef0d <Vm::faultHandler(regs*)+0x6cb>
c001eefe:	83 ec 0c             	sub    esp,0xc
c001ef01:	6a 60                	push   0x60
c001ef03:	e8 35 f5 ff ff       	call   c001e43d <Vm::inbv(unsigned short)>
c001ef08:	83 c4 10             	add    esp,0x10
c001ef0b:	eb e9                	jmp    c001eef6 <Vm::faultHandler(regs*)+0x6b4>
c001ef0d:	31 c0                	xor    eax,eax
c001ef0f:	83 c4 1c             	add    esp,0x1c
c001ef12:	5b                   	pop    ebx
c001ef13:	5e                   	pop    esi
c001ef14:	5f                   	pop    edi
c001ef15:	5d                   	pop    ebp
c001ef16:	c3                   	ret    

c001ef17 <Vm::fpuInternalTo32(unsigned long long)>:
c001ef17:	57                   	push   edi
c001ef18:	56                   	push   esi
c001ef19:	53                   	push   ebx
c001ef1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef22:	89 d6                	mov    esi,edx
c001ef24:	89 d7                	mov    edi,edx
c001ef26:	89 c1                	mov    ecx,eax
c001ef28:	c1 ef 14             	shr    edi,0x14
c001ef2b:	89 d3                	mov    ebx,edx
c001ef2d:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001ef33:	31 d2                	xor    edx,edx
c001ef35:	89 f8                	mov    eax,edi
c001ef37:	81 e6 00 00 00 80    	and    esi,0x80000000
c001ef3d:	bf ff 00 00 00       	mov    edi,0xff
c001ef42:	05 80 fc ff ff       	add    eax,0xfffffc80
c001ef47:	83 d2 ff             	adc    edx,0xffffffff
c001ef4a:	39 c7                	cmp    edi,eax
c001ef4c:	bf 00 00 00 00       	mov    edi,0x0
c001ef51:	19 d7                	sbb    edi,edx
c001ef53:	72 15                	jb     c001ef6a <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001ef55:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001ef59:	c1 e0 17             	shl    eax,0x17
c001ef5c:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001ef62:	09 f1                	or     ecx,esi
c001ef64:	09 c1                	or     ecx,eax
c001ef66:	89 cf                	mov    edi,ecx
c001ef68:	eb 02                	jmp    c001ef6c <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001ef6a:	31 ff                	xor    edi,edi
c001ef6c:	89 f8                	mov    eax,edi
c001ef6e:	5b                   	pop    ebx
c001ef6f:	5e                   	pop    esi
c001ef70:	5f                   	pop    edi
c001ef71:	c3                   	ret    

c001ef72 <Vm::fpuInternalTo64(unsigned long long)>:
c001ef72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ef7a:	c3                   	ret    

c001ef7b <Vm::fpu32ToInternal(unsigned int)>:
c001ef7b:	57                   	push   edi
c001ef7c:	31 ff                	xor    edi,edi
c001ef7e:	56                   	push   esi
c001ef7f:	53                   	push   ebx
c001ef80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef84:	89 cb                	mov    ebx,ecx
c001ef86:	89 ce                	mov    esi,ecx
c001ef88:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ef8e:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ef94:	c1 e9 17             	shr    ecx,0x17
c001ef97:	89 f0                	mov    eax,esi
c001ef99:	0f b6 d1             	movzx  edx,cl
c001ef9c:	81 c2 80 03 00 00    	add    edx,0x380
c001efa2:	89 d1                	mov    ecx,edx
c001efa4:	89 fa                	mov    edx,edi
c001efa6:	c1 e1 14             	shl    ecx,0x14
c001efa9:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001efad:	c1 e0 1d             	shl    eax,0x1d
c001efb0:	89 d7                	mov    edi,edx
c001efb2:	89 c6                	mov    esi,eax
c001efb4:	89 ca                	mov    edx,ecx
c001efb6:	89 f0                	mov    eax,esi
c001efb8:	09 fa                	or     edx,edi
c001efba:	09 da                	or     edx,ebx
c001efbc:	5b                   	pop    ebx
c001efbd:	5e                   	pop    esi
c001efbe:	5f                   	pop    edi
c001efbf:	c3                   	ret    

c001efc0 <Vm::fpu64ToInternal(unsigned long long)>:
c001efc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001efc8:	c3                   	ret    

c001efc9 <Vm::fpuFloatToLong(unsigned long long)>:
c001efc9:	57                   	push   edi
c001efca:	31 c0                	xor    eax,eax
c001efcc:	56                   	push   esi
c001efcd:	31 d2                	xor    edx,edx
c001efcf:	53                   	push   ebx
c001efd0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001efd4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001efd8:	89 d9                	mov    ecx,ebx
c001efda:	c1 e9 14             	shr    ecx,0x14
c001efdd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001efe3:	89 cf                	mov    edi,ecx
c001efe5:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001efeb:	78 33                	js     c001f020 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001efed:	89 d9                	mov    ecx,ebx
c001efef:	89 f0                	mov    eax,esi
c001eff1:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001eff7:	81 c9 00 00 10 00    	or     ecx,0x100000
c001effd:	89 ca                	mov    edx,ecx
c001efff:	b9 34 00 00 00       	mov    ecx,0x34
c001f004:	29 f9                	sub    ecx,edi
c001f006:	0f ad d0             	shrd   eax,edx,cl
c001f009:	d3 fa                	sar    edx,cl
c001f00b:	f6 c1 20             	test   cl,0x20
c001f00e:	74 05                	je     c001f015 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f010:	89 d0                	mov    eax,edx
c001f012:	c1 fa 1f             	sar    edx,0x1f
c001f015:	85 db                	test   ebx,ebx
c001f017:	79 07                	jns    c001f020 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f019:	f7 d8                	neg    eax
c001f01b:	83 d2 00             	adc    edx,0x0
c001f01e:	f7 da                	neg    edx
c001f020:	5b                   	pop    ebx
c001f021:	5e                   	pop    esi
c001f022:	5f                   	pop    edi
c001f023:	c3                   	ret    

c001f024 <Vm::fpuULongToFloat(unsigned long long)>:
c001f024:	57                   	push   edi
c001f025:	31 c9                	xor    ecx,ecx
c001f027:	56                   	push   esi
c001f028:	53                   	push   ebx
c001f029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f02d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f031:	0f ba e7 14          	bt     edi,0x14
c001f035:	72 07                	jb     c001f03e <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f037:	01 f6                	add    esi,esi
c001f039:	11 ff                	adc    edi,edi
c001f03b:	41                   	inc    ecx
c001f03c:	eb f3                	jmp    c001f031 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f03e:	89 fa                	mov    edx,edi
c001f040:	89 f0                	mov    eax,esi
c001f042:	bb 33 04 00 00       	mov    ebx,0x433
c001f047:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f04d:	29 cb                	sub    ebx,ecx
c001f04f:	89 d9                	mov    ecx,ebx
c001f051:	5b                   	pop    ebx
c001f052:	c1 e1 14             	shl    ecx,0x14
c001f055:	5e                   	pop    esi
c001f056:	09 ca                	or     edx,ecx
c001f058:	5f                   	pop    edi
c001f059:	c3                   	ret    

c001f05a <Vm::fpuLongToFloat(long long)>:
c001f05a:	56                   	push   esi
c001f05b:	31 c0                	xor    eax,eax
c001f05d:	53                   	push   ebx
c001f05e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f062:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f066:	39 c8                	cmp    eax,ecx
c001f068:	19 d8                	sbb    eax,ebx
c001f06a:	7d 04                	jge    c001f070 <Vm::fpuLongToFloat(long long)+0x16>
c001f06c:	31 f6                	xor    esi,esi
c001f06e:	eb 0c                	jmp    c001f07c <Vm::fpuLongToFloat(long long)+0x22>
c001f070:	f7 d9                	neg    ecx
c001f072:	be 01 00 00 00       	mov    esi,0x1
c001f077:	83 d3 00             	adc    ebx,0x0
c001f07a:	f7 db                	neg    ebx
c001f07c:	31 c0                	xor    eax,eax
c001f07e:	0f ba e3 14          	bt     ebx,0x14
c001f082:	72 07                	jb     c001f08b <Vm::fpuLongToFloat(long long)+0x31>
c001f084:	01 c9                	add    ecx,ecx
c001f086:	11 db                	adc    ebx,ebx
c001f088:	40                   	inc    eax
c001f089:	eb f3                	jmp    c001f07e <Vm::fpuLongToFloat(long long)+0x24>
c001f08b:	ba 33 04 00 00       	mov    edx,0x433
c001f090:	29 c2                	sub    edx,eax
c001f092:	89 c8                	mov    eax,ecx
c001f094:	c1 e2 14             	shl    edx,0x14
c001f097:	89 d9                	mov    ecx,ebx
c001f099:	89 f3                	mov    ebx,esi
c001f09b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f0a1:	09 ca                	or     edx,ecx
c001f0a3:	84 db                	test   bl,bl
c001f0a5:	74 06                	je     c001f0ad <Vm::fpuLongToFloat(long long)+0x53>
c001f0a7:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f0ad:	5b                   	pop    ebx
c001f0ae:	5e                   	pop    esi
c001f0af:	c3                   	ret    

c001f0b0 <Vm::fpuGet0()>:
c001f0b0:	31 c0                	xor    eax,eax
c001f0b2:	31 d2                	xor    edx,edx
c001f0b4:	c3                   	ret    

c001f0b5 <Vm::fpuGet1()>:
c001f0b5:	b8 01 00 00 00       	mov    eax,0x1
c001f0ba:	31 d2                	xor    edx,edx
c001f0bc:	c3                   	ret    

c001f0bd <Vm::fpuGetPi()>:
c001f0bd:	b8 03 00 00 00       	mov    eax,0x3
c001f0c2:	31 d2                	xor    edx,edx
c001f0c4:	c3                   	ret    

c001f0c5 <Vm::fpuGetLog2E()>:
c001f0c5:	83 ec 18             	sub    esp,0x18
c001f0c8:	68 7c bd 02 c0       	push   0xc002bd7c
c001f0cd:	e8 4d ad ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001f0d2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0d7:	31 d2                	xor    edx,edx
c001f0d9:	83 c4 1c             	add    esp,0x1c
c001f0dc:	c3                   	ret    

c001f0dd <Vm::fpuGetLogE2()>:
c001f0dd:	83 ec 18             	sub    esp,0x18
c001f0e0:	68 88 bd 02 c0       	push   0xc002bd88
c001f0e5:	e8 35 ad ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001f0ea:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f0ef:	31 d2                	xor    edx,edx
c001f0f1:	83 c4 1c             	add    esp,0x1c
c001f0f4:	c3                   	ret    

c001f0f5 <Vm::fpuGetLog210()>:
c001f0f5:	83 ec 18             	sub    esp,0x18
c001f0f8:	68 94 bd 02 c0       	push   0xc002bd94
c001f0fd:	e8 1d ad ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001f102:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f107:	31 d2                	xor    edx,edx
c001f109:	83 c4 1c             	add    esp,0x1c
c001f10c:	c3                   	ret    

c001f10d <Vm::fpuGetLog102()>:
c001f10d:	83 ec 18             	sub    esp,0x18
c001f110:	68 a1 bd 02 c0       	push   0xc002bda1
c001f115:	e8 05 ad ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001f11a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f11f:	31 d2                	xor    edx,edx
c001f121:	83 c4 1c             	add    esp,0x1c
c001f124:	c3                   	ret    

c001f125 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f125:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f129:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f12d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f131:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f135:	0f 92 c0             	setb   al
c001f138:	c3                   	ret    

c001f139 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f139:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f141:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f145:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f149:	09 c2                	or     edx,eax
c001f14b:	0f 94 c0             	sete   al
c001f14e:	c3                   	ret    

c001f14f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f14f:	57                   	push   edi
c001f150:	56                   	push   esi
c001f151:	53                   	push   ebx
c001f152:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f156:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f15a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f15e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f162:	57                   	push   edi
c001f163:	56                   	push   esi
c001f164:	53                   	push   ebx
c001f165:	51                   	push   ecx
c001f166:	e8 ce ff ff ff       	call   c001f139 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f16b:	83 c4 10             	add    esp,0x10
c001f16e:	88 c2                	mov    dl,al
c001f170:	31 c0                	xor    eax,eax
c001f172:	84 d2                	test   dl,dl
c001f174:	75 0c                	jne    c001f182 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f176:	57                   	push   edi
c001f177:	56                   	push   esi
c001f178:	53                   	push   ebx
c001f179:	51                   	push   ecx
c001f17a:	e8 a6 ff ff ff       	call   c001f125 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f17f:	83 c4 10             	add    esp,0x10
c001f182:	83 e0 01             	and    eax,0x1
c001f185:	5b                   	pop    ebx
c001f186:	88 c1                	mov    cl,al
c001f188:	83 e2 01             	and    edx,0x1
c001f18b:	a0 21 0f 03 c0       	mov    al,ds:0xc0030f21
c001f190:	c1 e2 06             	shl    edx,0x6
c001f193:	83 e0 ba             	and    eax,0xffffffba
c001f196:	5e                   	pop    esi
c001f197:	09 c8                	or     eax,ecx
c001f199:	5f                   	pop    edi
c001f19a:	09 d0                	or     eax,edx
c001f19c:	a2 21 0f 03 c0       	mov    ds:0xc0030f21,al
c001f1a1:	c3                   	ret    

c001f1a2 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f1a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1aa:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f1ae:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f1b2:	c3                   	ret    

c001f1b3 <Vm::fpuAbs(unsigned long long)>:
c001f1b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1bb:	c3                   	ret    

c001f1bc <Vm::fpuChs(unsigned long long)>:
c001f1bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f1c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f1c4:	f7 d8                	neg    eax
c001f1c6:	83 d2 00             	adc    edx,0x0
c001f1c9:	f7 da                	neg    edx
c001f1cb:	c3                   	ret    

c001f1cc <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f1cc:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f1d0:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f1d5:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f1d9:	eb c7                	jmp    c001f1a2 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f1db <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f1db:	53                   	push   ebx
c001f1dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f1e0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f1e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f1e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f1ec:	0f af ca             	imul   ecx,edx
c001f1ef:	0f af d8             	imul   ebx,eax
c001f1f2:	f7 e2                	mul    edx
c001f1f4:	01 d9                	add    ecx,ebx
c001f1f6:	5b                   	pop    ebx
c001f1f7:	01 ca                	add    edx,ecx
c001f1f9:	c3                   	ret    

c001f1fa <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f1fa:	83 ec 0c             	sub    esp,0xc
c001f1fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f201:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f205:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f20d:	e8 e2 74 00 00       	call   c00266f4 <__udivdi3>
c001f212:	83 c4 1c             	add    esp,0x1c
c001f215:	c3                   	ret    

c001f216 <Vm::fpuSquare(unsigned long long)>:
c001f216:	50                   	push   eax
c001f217:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f21b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f21f:	52                   	push   edx
c001f220:	50                   	push   eax
c001f221:	52                   	push   edx
c001f222:	50                   	push   eax
c001f223:	e8 b3 ff ff ff       	call   c001f1db <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f228:	83 c4 14             	add    esp,0x14
c001f22b:	c3                   	ret    

c001f22c <Vm::fpuGetReg(int)>:
c001f22c:	83 ec 0c             	sub    esp,0xc
c001f22f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f234:	76 10                	jbe    c001f246 <Vm::fpuGetReg(int)+0x1a>
c001f236:	83 ec 0c             	sub    esp,0xc
c001f239:	68 ae bd 02 c0       	push   0xc002bdae
c001f23e:	e8 dc ab ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001f243:	83 c4 10             	add    esp,0x10
c001f246:	a0 21 0f 03 c0       	mov    al,ds:0xc0030f21
c001f24b:	b9 08 00 00 00       	mov    ecx,0x8
c001f250:	c0 e8 03             	shr    al,0x3
c001f253:	83 e0 07             	and    eax,0x7
c001f256:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f25a:	99                   	cdq    
c001f25b:	f7 f9                	idiv   ecx
c001f25d:	8b 04 d5 24 0f 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcf0dc]
c001f264:	8b 14 d5 28 0f 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcf0d8]
c001f26b:	83 c4 0c             	add    esp,0xc
c001f26e:	c3                   	ret    

c001f26f <Vm::fpuSetReg(int, unsigned long long)>:
c001f26f:	57                   	push   edi
c001f270:	56                   	push   esi
c001f271:	52                   	push   edx
c001f272:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f276:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f27a:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f27f:	76 10                	jbe    c001f291 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f281:	83 ec 0c             	sub    esp,0xc
c001f284:	68 c1 bd 02 c0       	push   0xc002bdc1
c001f289:	e8 91 ab ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c001f28e:	83 c4 10             	add    esp,0x10
c001f291:	a0 21 0f 03 c0       	mov    al,ds:0xc0030f21
c001f296:	b9 08 00 00 00       	mov    ecx,0x8
c001f29b:	c0 e8 03             	shr    al,0x3
c001f29e:	83 e0 07             	and    eax,0x7
c001f2a1:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2a5:	99                   	cdq    
c001f2a6:	f7 f9                	idiv   ecx
c001f2a8:	89 34 d5 24 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf0dc],esi
c001f2af:	89 3c d5 28 0f 03 c0 	mov    DWORD PTR [edx*8-0x3ffcf0d8],edi
c001f2b6:	58                   	pop    eax
c001f2b7:	5e                   	pop    esi
c001f2b8:	5f                   	pop    edi
c001f2b9:	c3                   	ret    

c001f2ba <Vm::fpuPush(unsigned long long)>:
c001f2ba:	a0 21 0f 03 c0       	mov    al,ds:0xc0030f21
c001f2bf:	c0 e8 03             	shr    al,0x3
c001f2c2:	83 e0 07             	and    eax,0x7
c001f2c5:	83 c0 07             	add    eax,0x7
c001f2c8:	88 c2                	mov    dl,al
c001f2ca:	83 e0 07             	and    eax,0x7
c001f2cd:	83 e2 07             	and    edx,0x7
c001f2d0:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f2d7:	8a 15 21 0f 03 c0    	mov    dl,BYTE PTR ds:0xc0030f21
c001f2dd:	83 e2 c7             	and    edx,0xffffffc7
c001f2e0:	09 ca                	or     edx,ecx
c001f2e2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2e6:	88 15 21 0f 03 c0    	mov    BYTE PTR ds:0xc0030f21,dl
c001f2ec:	89 0c c5 28 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf0d8],ecx
c001f2f3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2f7:	89 14 c5 24 0f 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf0dc],edx
c001f2fe:	a1 64 0f 03 c0       	mov    eax,ds:0xc0030f64
c001f303:	83 f8 08             	cmp    eax,0x8
c001f306:	75 08                	jne    c001f310 <Vm::fpuPush(unsigned long long)+0x56>
c001f308:	80 0d 20 0f 03 c0 40 	or     BYTE PTR ds:0xc0030f20,0x40
c001f30f:	c3                   	ret    
c001f310:	40                   	inc    eax
c001f311:	a3 64 0f 03 c0       	mov    ds:0xc0030f64,eax
c001f316:	c3                   	ret    

c001f317 <Vm::fpuPop()>:
c001f317:	8a 0d 21 0f 03 c0    	mov    cl,BYTE PTR ds:0xc0030f21
c001f31d:	53                   	push   ebx
c001f31e:	c0 e9 03             	shr    cl,0x3
c001f321:	8a 1d 21 0f 03 c0    	mov    bl,BYTE PTR ds:0xc0030f21
c001f327:	83 e1 07             	and    ecx,0x7
c001f32a:	83 e3 c7             	and    ebx,0xffffffc7
c001f32d:	8b 04 cd 24 0f 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcf0dc]
c001f334:	8b 14 cd 28 0f 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcf0d8]
c001f33b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f342:	83 e1 38             	and    ecx,0x38
c001f345:	09 d9                	or     ecx,ebx
c001f347:	88 0d 21 0f 03 c0    	mov    BYTE PTR ds:0xc0030f21,cl
c001f34d:	8b 0d 64 0f 03 c0    	mov    ecx,DWORD PTR ds:0xc0030f64
c001f353:	85 c9                	test   ecx,ecx
c001f355:	74 09                	je     c001f360 <Vm::fpuPop()+0x49>
c001f357:	49                   	dec    ecx
c001f358:	89 0d 64 0f 03 c0    	mov    DWORD PTR ds:0xc0030f64,ecx
c001f35e:	eb 07                	jmp    c001f367 <Vm::fpuPop()+0x50>
c001f360:	80 0d 20 0f 03 c0 40 	or     BYTE PTR ds:0xc0030f20,0x40
c001f367:	5b                   	pop    ebx
c001f368:	c3                   	ret    

c001f369 <Vm::x87Handler(regs*)>:
c001f369:	55                   	push   ebp
c001f36a:	57                   	push   edi
c001f36b:	56                   	push   esi
c001f36c:	53                   	push   ebx
c001f36d:	83 ec 1c             	sub    esp,0x1c
c001f370:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f374:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f379:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f37c:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f384:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f388:	50                   	push   eax
c001f389:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f38d:	50                   	push   eax
c001f38e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f392:	50                   	push   eax
c001f393:	53                   	push   ebx
c001f394:	e8 9f a1 ff ff       	call   c0019538 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f399:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f39c:	83 c4 10             	add    esp,0x10
c001f39f:	89 c6                	mov    esi,eax
c001f3a1:	80 fa d9             	cmp    dl,0xd9
c001f3a4:	0f 85 52 01 00 00    	jne    c001f4fc <Vm::x87Handler(regs*)+0x193>
c001f3aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f3ae:	8d 50 20             	lea    edx,[eax+0x20]
c001f3b1:	80 fa 0e             	cmp    dl,0xe
c001f3b4:	0f 87 86 00 00 00    	ja     c001f440 <Vm::x87Handler(regs*)+0xd7>
c001f3ba:	0f b6 d2             	movzx  edx,dl
c001f3bd:	ff 24 95 d4 bd 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd422c]
c001f3c4:	e8 e7 fc ff ff       	call   c001f0b0 <Vm::fpuGet0()>
c001f3c9:	eb 05                	jmp    c001f3d0 <Vm::x87Handler(regs*)+0x67>
c001f3cb:	e8 e5 fc ff ff       	call   c001f0b5 <Vm::fpuGet1()>
c001f3d0:	57                   	push   edi
c001f3d1:	57                   	push   edi
c001f3d2:	52                   	push   edx
c001f3d3:	50                   	push   eax
c001f3d4:	e8 e1 fe ff ff       	call   c001f2ba <Vm::fpuPush(unsigned long long)>
c001f3d9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f3dd:	83 c4 10             	add    esp,0x10
c001f3e0:	b0 01                	mov    al,0x1
c001f3e2:	e9 e3 09 00 00       	jmp    c001fdca <Vm::x87Handler(regs*)+0xa61>
c001f3e7:	83 ec 0c             	sub    esp,0xc
c001f3ea:	6a 00                	push   0x0
c001f3ec:	e8 3b fe ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f3f1:	59                   	pop    ecx
c001f3f2:	5e                   	pop    esi
c001f3f3:	52                   	push   edx
c001f3f4:	50                   	push   eax
c001f3f5:	e8 c2 fd ff ff       	call   c001f1bc <Vm::fpuChs(unsigned long long)>
c001f3fa:	eb 13                	jmp    c001f40f <Vm::x87Handler(regs*)+0xa6>
c001f3fc:	83 ec 0c             	sub    esp,0xc
c001f3ff:	6a 00                	push   0x0
c001f401:	e8 26 fe ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f406:	5f                   	pop    edi
c001f407:	5d                   	pop    ebp
c001f408:	52                   	push   edx
c001f409:	50                   	push   eax
c001f40a:	e8 a4 fd ff ff       	call   c001f1b3 <Vm::fpuAbs(unsigned long long)>
c001f40f:	83 c4 0c             	add    esp,0xc
c001f412:	52                   	push   edx
c001f413:	50                   	push   eax
c001f414:	6a 00                	push   0x0
c001f416:	e8 54 fe ff ff       	call   c001f26f <Vm::fpuSetReg(int, unsigned long long)>
c001f41b:	eb bc                	jmp    c001f3d9 <Vm::x87Handler(regs*)+0x70>
c001f41d:	e8 d3 fc ff ff       	call   c001f0f5 <Vm::fpuGetLog210()>
c001f422:	eb ac                	jmp    c001f3d0 <Vm::x87Handler(regs*)+0x67>
c001f424:	e8 9c fc ff ff       	call   c001f0c5 <Vm::fpuGetLog2E()>
c001f429:	eb a5                	jmp    c001f3d0 <Vm::x87Handler(regs*)+0x67>
c001f42b:	e8 8d fc ff ff       	call   c001f0bd <Vm::fpuGetPi()>
c001f430:	eb 9e                	jmp    c001f3d0 <Vm::x87Handler(regs*)+0x67>
c001f432:	e8 d6 fc ff ff       	call   c001f10d <Vm::fpuGetLog102()>
c001f437:	eb 97                	jmp    c001f3d0 <Vm::x87Handler(regs*)+0x67>
c001f439:	e8 9f fc ff ff       	call   c001f0dd <Vm::fpuGetLogE2()>
c001f43e:	eb 90                	jmp    c001f3d0 <Vm::x87Handler(regs*)+0x67>
c001f440:	8d 50 40             	lea    edx,[eax+0x40]
c001f443:	80 fa 07             	cmp    dl,0x7
c001f446:	77 15                	ja     c001f45d <Vm::x87Handler(regs*)+0xf4>
c001f448:	83 ec 0c             	sub    esp,0xc
c001f44b:	2d c0 00 00 00       	sub    eax,0xc0
c001f450:	50                   	push   eax
c001f451:	e8 d6 fd ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f456:	59                   	pop    ecx
c001f457:	5e                   	pop    esi
c001f458:	e9 75 ff ff ff       	jmp    c001f3d2 <Vm::x87Handler(regs*)+0x69>
c001f45d:	8d 50 38             	lea    edx,[eax+0x38]
c001f460:	80 fa 07             	cmp    dl,0x7
c001f463:	77 3c                	ja     c001f4a1 <Vm::x87Handler(regs*)+0x138>
c001f465:	83 ec 0c             	sub    esp,0xc
c001f468:	2d c8 00 00 00       	sub    eax,0xc8
c001f46d:	50                   	push   eax
c001f46e:	e8 b9 fd ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f473:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f47a:	89 c6                	mov    esi,eax
c001f47c:	89 d7                	mov    edi,edx
c001f47e:	e8 a9 fd ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f483:	83 c4 0c             	add    esp,0xc
c001f486:	52                   	push   edx
c001f487:	50                   	push   eax
c001f488:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f48c:	2d c8 00 00 00       	sub    eax,0xc8
c001f491:	50                   	push   eax
c001f492:	e8 d8 fd ff ff       	call   c001f26f <Vm::fpuSetReg(int, unsigned long long)>
c001f497:	83 c4 0c             	add    esp,0xc
c001f49a:	57                   	push   edi
c001f49b:	56                   	push   esi
c001f49c:	e9 73 ff ff ff       	jmp    c001f414 <Vm::x87Handler(regs*)+0xab>
c001f4a1:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f4a5:	84 d2                	test   dl,dl
c001f4a7:	75 0f                	jne    c001f4b8 <Vm::x87Handler(regs*)+0x14f>
c001f4a9:	83 ec 0c             	sub    esp,0xc
c001f4ac:	ff 36                	push   DWORD PTR [esi]
c001f4ae:	e8 c8 fa ff ff       	call   c001ef7b <Vm::fpu32ToInternal(unsigned int)>
c001f4b3:	e9 bf 00 00 00       	jmp    c001f577 <Vm::x87Handler(regs*)+0x20e>
c001f4b8:	80 fa 03             	cmp    dl,0x3
c001f4bb:	75 13                	jne    c001f4d0 <Vm::x87Handler(regs*)+0x167>
c001f4bd:	e8 55 fe ff ff       	call   c001f317 <Vm::fpuPop()>
c001f4c2:	55                   	push   ebp
c001f4c3:	55                   	push   ebp
c001f4c4:	52                   	push   edx
c001f4c5:	50                   	push   eax
c001f4c6:	e8 4c fa ff ff       	call   c001ef17 <Vm::fpuInternalTo32(unsigned long long)>
c001f4cb:	e9 88 00 00 00       	jmp    c001f558 <Vm::x87Handler(regs*)+0x1ef>
c001f4d0:	80 fa 05             	cmp    dl,0x5
c001f4d3:	75 0e                	jne    c001f4e3 <Vm::x87Handler(regs*)+0x17a>
c001f4d5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f4d8:	66 a3 22 0f 03 c0    	mov    ds:0xc0030f22,ax
c001f4de:	e9 df 00 00 00       	jmp    c001f5c2 <Vm::x87Handler(regs*)+0x259>
c001f4e3:	31 c0                	xor    eax,eax
c001f4e5:	80 fa 07             	cmp    dl,0x7
c001f4e8:	0f 85 dc 08 00 00    	jne    c001fdca <Vm::x87Handler(regs*)+0xa61>
c001f4ee:	66 a1 22 0f 03 c0    	mov    ax,ds:0xc0030f22
c001f4f4:	66 89 06             	mov    WORD PTR [esi],ax
c001f4f7:	e9 c6 00 00 00       	jmp    c001f5c2 <Vm::x87Handler(regs*)+0x259>
c001f4fc:	80 fa d8             	cmp    dl,0xd8
c001f4ff:	0f 84 c9 00 00 00    	je     c001f5ce <Vm::x87Handler(regs*)+0x265>
c001f505:	80 fa dc             	cmp    dl,0xdc
c001f508:	0f 84 0d 02 00 00    	je     c001f71b <Vm::x87Handler(regs*)+0x3b2>
c001f50e:	80 fa de             	cmp    dl,0xde
c001f511:	0f 84 cd 02 00 00    	je     c001f7e4 <Vm::x87Handler(regs*)+0x47b>
c001f517:	80 fa dd             	cmp    dl,0xdd
c001f51a:	0f 84 5f 04 00 00    	je     c001f97f <Vm::x87Handler(regs*)+0x616>
c001f520:	80 fa da             	cmp    dl,0xda
c001f523:	0f 84 24 05 00 00    	je     c001fa4d <Vm::x87Handler(regs*)+0x6e4>
c001f529:	80 fa df             	cmp    dl,0xdf
c001f52c:	0f 84 68 05 00 00    	je     c001fa9a <Vm::x87Handler(regs*)+0x731>
c001f532:	31 c0                	xor    eax,eax
c001f534:	80 fa db             	cmp    dl,0xdb
c001f537:	0f 85 8d 08 00 00    	jne    c001fdca <Vm::x87Handler(regs*)+0xa61>
c001f53d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f541:	80 fa 03             	cmp    dl,0x3
c001f544:	0f 85 70 06 00 00    	jne    c001fbba <Vm::x87Handler(regs*)+0x851>
c001f54a:	e8 c8 fd ff ff       	call   c001f317 <Vm::fpuPop()>
c001f54f:	55                   	push   ebp
c001f550:	55                   	push   ebp
c001f551:	52                   	push   edx
c001f552:	50                   	push   eax
c001f553:	e8 71 fa ff ff       	call   c001efc9 <Vm::fpuFloatToLong(unsigned long long)>
c001f558:	83 c4 10             	add    esp,0x10
c001f55b:	89 06                	mov    DWORD PTR [esi],eax
c001f55d:	eb 63                	jmp    c001f5c2 <Vm::x87Handler(regs*)+0x259>
c001f55f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f563:	84 d2                	test   dl,dl
c001f565:	0f 85 e6 05 00 00    	jne    c001fb51 <Vm::x87Handler(regs*)+0x7e8>
c001f56b:	57                   	push   edi
c001f56c:	57                   	push   edi
c001f56d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f570:	ff 36                	push   DWORD PTR [esi]
c001f572:	e8 49 fa ff ff       	call   c001efc0 <Vm::fpu64ToInternal(unsigned long long)>
c001f577:	5e                   	pop    esi
c001f578:	5f                   	pop    edi
c001f579:	52                   	push   edx
c001f57a:	50                   	push   eax
c001f57b:	e8 3a fd ff ff       	call   c001f2ba <Vm::fpuPush(unsigned long long)>
c001f580:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f584:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f587:	e9 51 fe ff ff       	jmp    c001f3dd <Vm::x87Handler(regs*)+0x74>
c001f58c:	80 fa 03             	cmp    dl,0x3
c001f58f:	0f 85 d7 06 00 00    	jne    c001fc6c <Vm::x87Handler(regs*)+0x903>
c001f595:	57                   	push   edi
c001f596:	57                   	push   edi
c001f597:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f59a:	ff 36                	push   DWORD PTR [esi]
c001f59c:	e8 1f fa ff ff       	call   c001efc0 <Vm::fpu64ToInternal(unsigned long long)>
c001f5a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5a8:	89 c6                	mov    esi,eax
c001f5aa:	89 d7                	mov    edi,edx
c001f5ac:	e8 7b fc ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f5b1:	57                   	push   edi
c001f5b2:	56                   	push   esi
c001f5b3:	52                   	push   edx
c001f5b4:	50                   	push   eax
c001f5b5:	e8 95 fb ff ff       	call   c001f14f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f5ba:	83 c4 20             	add    esp,0x20
c001f5bd:	e8 55 fd ff ff       	call   c001f317 <Vm::fpuPop()>
c001f5c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f5c6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f5c9:	e9 12 fe ff ff       	jmp    c001f3e0 <Vm::x87Handler(regs*)+0x77>
c001f5ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5d2:	8d 50 40             	lea    edx,[eax+0x40]
c001f5d5:	80 fa 07             	cmp    dl,0x7
c001f5d8:	77 29                	ja     c001f603 <Vm::x87Handler(regs*)+0x29a>
c001f5da:	83 ec 0c             	sub    esp,0xc
c001f5dd:	2d c0 00 00 00       	sub    eax,0xc0
c001f5e2:	50                   	push   eax
c001f5e3:	e8 44 fc ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f5e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f5ef:	89 c6                	mov    esi,eax
c001f5f1:	89 d7                	mov    edi,edx
c001f5f3:	e8 34 fc ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f5f8:	57                   	push   edi
c001f5f9:	56                   	push   esi
c001f5fa:	52                   	push   edx
c001f5fb:	50                   	push   eax
c001f5fc:	e8 a1 fb ff ff       	call   c001f1a2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f601:	eb 2f                	jmp    c001f632 <Vm::x87Handler(regs*)+0x2c9>
c001f603:	8d 50 38             	lea    edx,[eax+0x38]
c001f606:	80 fa 07             	cmp    dl,0x7
c001f609:	77 2f                	ja     c001f63a <Vm::x87Handler(regs*)+0x2d1>
c001f60b:	83 ec 0c             	sub    esp,0xc
c001f60e:	2d c8 00 00 00       	sub    eax,0xc8
c001f613:	50                   	push   eax
c001f614:	e8 13 fc ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f619:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f620:	89 c6                	mov    esi,eax
c001f622:	89 d7                	mov    edi,edx
c001f624:	e8 03 fc ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f629:	57                   	push   edi
c001f62a:	56                   	push   esi
c001f62b:	52                   	push   edx
c001f62c:	50                   	push   eax
c001f62d:	e8 a9 fb ff ff       	call   c001f1db <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f632:	83 c4 1c             	add    esp,0x1c
c001f635:	e9 d8 fd ff ff       	jmp    c001f412 <Vm::x87Handler(regs*)+0xa9>
c001f63a:	8d 50 30             	lea    edx,[eax+0x30]
c001f63d:	80 fa 07             	cmp    dl,0x7
c001f640:	77 0d                	ja     c001f64f <Vm::x87Handler(regs*)+0x2e6>
c001f642:	83 ec 0c             	sub    esp,0xc
c001f645:	2d d0 00 00 00       	sub    eax,0xd0
c001f64a:	e9 99 03 00 00       	jmp    c001f9e8 <Vm::x87Handler(regs*)+0x67f>
c001f64f:	8d 50 28             	lea    edx,[eax+0x28]
c001f652:	80 fa 07             	cmp    dl,0x7
c001f655:	77 0d                	ja     c001f664 <Vm::x87Handler(regs*)+0x2fb>
c001f657:	83 ec 0c             	sub    esp,0xc
c001f65a:	2d d8 00 00 00       	sub    eax,0xd8
c001f65f:	e9 c0 03 00 00       	jmp    c001fa24 <Vm::x87Handler(regs*)+0x6bb>
c001f664:	8d 50 20             	lea    edx,[eax+0x20]
c001f667:	80 fa 07             	cmp    dl,0x7
c001f66a:	77 1b                	ja     c001f687 <Vm::x87Handler(regs*)+0x31e>
c001f66c:	83 ec 0c             	sub    esp,0xc
c001f66f:	2d e0 00 00 00       	sub    eax,0xe0
c001f674:	50                   	push   eax
c001f675:	e8 b2 fb ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f67a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f681:	89 c6                	mov    esi,eax
c001f683:	89 d7                	mov    edi,edx
c001f685:	eb 22                	jmp    c001f6a9 <Vm::x87Handler(regs*)+0x340>
c001f687:	8d 50 18             	lea    edx,[eax+0x18]
c001f68a:	80 fa 07             	cmp    dl,0x7
c001f68d:	77 2d                	ja     c001f6bc <Vm::x87Handler(regs*)+0x353>
c001f68f:	83 ec 0c             	sub    esp,0xc
c001f692:	6a 00                	push   0x0
c001f694:	e8 93 fb ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f699:	89 c6                	mov    esi,eax
c001f69b:	89 d7                	mov    edi,edx
c001f69d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6a1:	2d e8 00 00 00       	sub    eax,0xe8
c001f6a6:	89 04 24             	mov    DWORD PTR [esp],eax
c001f6a9:	e8 7e fb ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f6ae:	57                   	push   edi
c001f6af:	56                   	push   esi
c001f6b0:	52                   	push   edx
c001f6b1:	50                   	push   eax
c001f6b2:	e8 15 fb ff ff       	call   c001f1cc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f6b7:	e9 76 ff ff ff       	jmp    c001f632 <Vm::x87Handler(regs*)+0x2c9>
c001f6bc:	8d 50 10             	lea    edx,[eax+0x10]
c001f6bf:	80 fa 07             	cmp    dl,0x7
c001f6c2:	77 1b                	ja     c001f6df <Vm::x87Handler(regs*)+0x376>
c001f6c4:	83 ec 0c             	sub    esp,0xc
c001f6c7:	2d f0 00 00 00       	sub    eax,0xf0
c001f6cc:	50                   	push   eax
c001f6cd:	e8 5a fb ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f6d2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f6d9:	89 c6                	mov    esi,eax
c001f6db:	89 d7                	mov    edi,edx
c001f6dd:	eb 22                	jmp    c001f701 <Vm::x87Handler(regs*)+0x398>
c001f6df:	3c f7                	cmp    al,0xf7
c001f6e1:	0f 86 d1 03 00 00    	jbe    c001fab8 <Vm::x87Handler(regs*)+0x74f>
c001f6e7:	83 ec 0c             	sub    esp,0xc
c001f6ea:	6a 00                	push   0x0
c001f6ec:	e8 3b fb ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f6f1:	89 c6                	mov    esi,eax
c001f6f3:	89 d7                	mov    edi,edx
c001f6f5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6f9:	2d f8 00 00 00       	sub    eax,0xf8
c001f6fe:	89 04 24             	mov    DWORD PTR [esp],eax
c001f701:	e8 26 fb ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f706:	57                   	push   edi
c001f707:	56                   	push   esi
c001f708:	52                   	push   edx
c001f709:	50                   	push   eax
c001f70a:	e8 eb fa ff ff       	call   c001f1fa <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f70f:	83 c4 1c             	add    esp,0x1c
c001f712:	52                   	push   edx
c001f713:	50                   	push   eax
c001f714:	6a 00                	push   0x0
c001f716:	e9 51 02 00 00       	jmp    c001f96c <Vm::x87Handler(regs*)+0x603>
c001f71b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f71f:	8d 50 40             	lea    edx,[eax+0x40]
c001f722:	80 fa 07             	cmp    dl,0x7
c001f725:	77 37                	ja     c001f75e <Vm::x87Handler(regs*)+0x3f5>
c001f727:	83 ec 0c             	sub    esp,0xc
c001f72a:	2d c0 00 00 00       	sub    eax,0xc0
c001f72f:	50                   	push   eax
c001f730:	e8 f7 fa ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f735:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f73c:	89 c6                	mov    esi,eax
c001f73e:	89 d7                	mov    edi,edx
c001f740:	e8 e7 fa ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f745:	57                   	push   edi
c001f746:	56                   	push   esi
c001f747:	52                   	push   edx
c001f748:	50                   	push   eax
c001f749:	e8 54 fa ff ff       	call   c001f1a2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f74e:	83 c4 1c             	add    esp,0x1c
c001f751:	52                   	push   edx
c001f752:	50                   	push   eax
c001f753:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f757:	2d c0 00 00 00       	sub    eax,0xc0
c001f75c:	eb 3d                	jmp    c001f79b <Vm::x87Handler(regs*)+0x432>
c001f75e:	8d 50 38             	lea    edx,[eax+0x38]
c001f761:	80 fa 07             	cmp    dl,0x7
c001f764:	77 3b                	ja     c001f7a1 <Vm::x87Handler(regs*)+0x438>
c001f766:	83 ec 0c             	sub    esp,0xc
c001f769:	2d c8 00 00 00       	sub    eax,0xc8
c001f76e:	50                   	push   eax
c001f76f:	e8 b8 fa ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f774:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f77b:	89 c6                	mov    esi,eax
c001f77d:	89 d7                	mov    edi,edx
c001f77f:	e8 a8 fa ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f784:	57                   	push   edi
c001f785:	56                   	push   esi
c001f786:	52                   	push   edx
c001f787:	50                   	push   eax
c001f788:	e8 4e fa ff ff       	call   c001f1db <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f78d:	83 c4 1c             	add    esp,0x1c
c001f790:	52                   	push   edx
c001f791:	50                   	push   eax
c001f792:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f796:	2d c8 00 00 00       	sub    eax,0xc8
c001f79b:	50                   	push   eax
c001f79c:	e9 75 fc ff ff       	jmp    c001f416 <Vm::x87Handler(regs*)+0xad>
c001f7a1:	83 c0 18             	add    eax,0x18
c001f7a4:	3c 07                	cmp    al,0x7
c001f7a6:	0f 87 3b 04 00 00    	ja     c001fbe7 <Vm::x87Handler(regs*)+0x87e>
c001f7ac:	83 ec 0c             	sub    esp,0xc
c001f7af:	6a 00                	push   0x0
c001f7b1:	e8 76 fa ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f7b6:	89 c6                	mov    esi,eax
c001f7b8:	89 d7                	mov    edi,edx
c001f7ba:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7be:	2d e8 00 00 00       	sub    eax,0xe8
c001f7c3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f7c6:	e8 61 fa ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f7cb:	57                   	push   edi
c001f7cc:	56                   	push   esi
c001f7cd:	52                   	push   edx
c001f7ce:	50                   	push   eax
c001f7cf:	e8 f8 f9 ff ff       	call   c001f1cc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f7d4:	83 c4 1c             	add    esp,0x1c
c001f7d7:	52                   	push   edx
c001f7d8:	50                   	push   eax
c001f7d9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7dd:	2d e8 00 00 00       	sub    eax,0xe8
c001f7e2:	eb b7                	jmp    c001f79b <Vm::x87Handler(regs*)+0x432>
c001f7e4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7e8:	8d 50 40             	lea    edx,[eax+0x40]
c001f7eb:	80 fa 07             	cmp    dl,0x7
c001f7ee:	77 3a                	ja     c001f82a <Vm::x87Handler(regs*)+0x4c1>
c001f7f0:	83 ec 0c             	sub    esp,0xc
c001f7f3:	2d c0 00 00 00       	sub    eax,0xc0
c001f7f8:	50                   	push   eax
c001f7f9:	e8 2e fa ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f7fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f805:	89 c6                	mov    esi,eax
c001f807:	89 d7                	mov    edi,edx
c001f809:	e8 1e fa ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f80e:	57                   	push   edi
c001f80f:	56                   	push   esi
c001f810:	52                   	push   edx
c001f811:	50                   	push   eax
c001f812:	e8 8b f9 ff ff       	call   c001f1a2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f817:	83 c4 1c             	add    esp,0x1c
c001f81a:	52                   	push   edx
c001f81b:	50                   	push   eax
c001f81c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f820:	2d c0 00 00 00       	sub    eax,0xc0
c001f825:	e9 9e 01 00 00       	jmp    c001f9c8 <Vm::x87Handler(regs*)+0x65f>
c001f82a:	8d 50 20             	lea    edx,[eax+0x20]
c001f82d:	80 fa 07             	cmp    dl,0x7
c001f830:	77 3a                	ja     c001f86c <Vm::x87Handler(regs*)+0x503>
c001f832:	83 ec 0c             	sub    esp,0xc
c001f835:	2d e0 00 00 00       	sub    eax,0xe0
c001f83a:	50                   	push   eax
c001f83b:	e8 ec f9 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f840:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f847:	89 c6                	mov    esi,eax
c001f849:	89 d7                	mov    edi,edx
c001f84b:	e8 dc f9 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f850:	57                   	push   edi
c001f851:	56                   	push   esi
c001f852:	52                   	push   edx
c001f853:	50                   	push   eax
c001f854:	e8 73 f9 ff ff       	call   c001f1cc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f859:	83 c4 1c             	add    esp,0x1c
c001f85c:	52                   	push   edx
c001f85d:	50                   	push   eax
c001f85e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f862:	2d e0 00 00 00       	sub    eax,0xe0
c001f867:	e9 5c 01 00 00       	jmp    c001f9c8 <Vm::x87Handler(regs*)+0x65f>
c001f86c:	8d 50 18             	lea    edx,[eax+0x18]
c001f86f:	80 fa 07             	cmp    dl,0x7
c001f872:	77 3b                	ja     c001f8af <Vm::x87Handler(regs*)+0x546>
c001f874:	83 ec 0c             	sub    esp,0xc
c001f877:	6a 00                	push   0x0
c001f879:	e8 ae f9 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f87e:	89 c6                	mov    esi,eax
c001f880:	89 d7                	mov    edi,edx
c001f882:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f886:	2d e8 00 00 00       	sub    eax,0xe8
c001f88b:	89 04 24             	mov    DWORD PTR [esp],eax
c001f88e:	e8 99 f9 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f893:	57                   	push   edi
c001f894:	56                   	push   esi
c001f895:	52                   	push   edx
c001f896:	50                   	push   eax
c001f897:	e8 30 f9 ff ff       	call   c001f1cc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f89c:	83 c4 1c             	add    esp,0x1c
c001f89f:	52                   	push   edx
c001f8a0:	50                   	push   eax
c001f8a1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8a5:	2d e8 00 00 00       	sub    eax,0xe8
c001f8aa:	e9 19 01 00 00       	jmp    c001f9c8 <Vm::x87Handler(regs*)+0x65f>
c001f8af:	8d 50 38             	lea    edx,[eax+0x38]
c001f8b2:	80 fa 07             	cmp    dl,0x7
c001f8b5:	77 37                	ja     c001f8ee <Vm::x87Handler(regs*)+0x585>
c001f8b7:	83 ec 0c             	sub    esp,0xc
c001f8ba:	2d c8 00 00 00       	sub    eax,0xc8
c001f8bf:	50                   	push   eax
c001f8c0:	e8 67 f9 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f8c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8cc:	89 c6                	mov    esi,eax
c001f8ce:	89 d7                	mov    edi,edx
c001f8d0:	e8 57 f9 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f8d5:	57                   	push   edi
c001f8d6:	56                   	push   esi
c001f8d7:	52                   	push   edx
c001f8d8:	50                   	push   eax
c001f8d9:	e8 fd f8 ff ff       	call   c001f1db <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f8de:	83 c4 1c             	add    esp,0x1c
c001f8e1:	52                   	push   edx
c001f8e2:	50                   	push   eax
c001f8e3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f8e7:	2d c8 00 00 00       	sub    eax,0xc8
c001f8ec:	eb 7d                	jmp    c001f96b <Vm::x87Handler(regs*)+0x602>
c001f8ee:	3c f7                	cmp    al,0xf7
c001f8f0:	76 38                	jbe    c001f92a <Vm::x87Handler(regs*)+0x5c1>
c001f8f2:	83 ec 0c             	sub    esp,0xc
c001f8f5:	6a 00                	push   0x0
c001f8f7:	e8 30 f9 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f8fc:	89 c6                	mov    esi,eax
c001f8fe:	89 d7                	mov    edi,edx
c001f900:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f904:	2d f8 00 00 00       	sub    eax,0xf8
c001f909:	89 04 24             	mov    DWORD PTR [esp],eax
c001f90c:	e8 1b f9 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f911:	57                   	push   edi
c001f912:	56                   	push   esi
c001f913:	52                   	push   edx
c001f914:	50                   	push   eax
c001f915:	e8 e0 f8 ff ff       	call   c001f1fa <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f91a:	83 c4 1c             	add    esp,0x1c
c001f91d:	52                   	push   edx
c001f91e:	50                   	push   eax
c001f91f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f923:	2d f8 00 00 00       	sub    eax,0xf8
c001f928:	eb 41                	jmp    c001f96b <Vm::x87Handler(regs*)+0x602>
c001f92a:	8d 50 10             	lea    edx,[eax+0x10]
c001f92d:	80 fa 07             	cmp    dl,0x7
c001f930:	0f 87 5a 01 00 00    	ja     c001fa90 <Vm::x87Handler(regs*)+0x727>
c001f936:	83 ec 0c             	sub    esp,0xc
c001f939:	2d f0 00 00 00       	sub    eax,0xf0
c001f93e:	50                   	push   eax
c001f93f:	e8 e8 f8 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f944:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f94b:	89 c6                	mov    esi,eax
c001f94d:	89 d7                	mov    edi,edx
c001f94f:	e8 d8 f8 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f954:	57                   	push   edi
c001f955:	56                   	push   esi
c001f956:	52                   	push   edx
c001f957:	50                   	push   eax
c001f958:	e8 9d f8 ff ff       	call   c001f1fa <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f95d:	83 c4 1c             	add    esp,0x1c
c001f960:	52                   	push   edx
c001f961:	50                   	push   eax
c001f962:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f966:	2d f0 00 00 00       	sub    eax,0xf0
c001f96b:	50                   	push   eax
c001f96c:	e8 fe f8 ff ff       	call   c001f26f <Vm::fpuSetReg(int, unsigned long long)>
c001f971:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f975:	e8 9d f9 ff ff       	call   c001f317 <Vm::fpuPop()>
c001f97a:	e9 5e fa ff ff       	jmp    c001f3dd <Vm::x87Handler(regs*)+0x74>
c001f97f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f983:	8d 50 30             	lea    edx,[eax+0x30]
c001f986:	80 fa 07             	cmp    dl,0x7
c001f989:	77 1d                	ja     c001f9a8 <Vm::x87Handler(regs*)+0x63f>
c001f98b:	83 ec 0c             	sub    esp,0xc
c001f98e:	6a 00                	push   0x0
c001f990:	e8 97 f8 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f995:	83 c4 0c             	add    esp,0xc
c001f998:	52                   	push   edx
c001f999:	50                   	push   eax
c001f99a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f99e:	2d d0 00 00 00       	sub    eax,0xd0
c001f9a3:	e9 f3 fd ff ff       	jmp    c001f79b <Vm::x87Handler(regs*)+0x432>
c001f9a8:	8d 50 28             	lea    edx,[eax+0x28]
c001f9ab:	80 fa 07             	cmp    dl,0x7
c001f9ae:	77 28                	ja     c001f9d8 <Vm::x87Handler(regs*)+0x66f>
c001f9b0:	83 ec 0c             	sub    esp,0xc
c001f9b3:	6a 00                	push   0x0
c001f9b5:	e8 72 f8 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f9ba:	83 c4 0c             	add    esp,0xc
c001f9bd:	52                   	push   edx
c001f9be:	50                   	push   eax
c001f9bf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9c3:	2d d8 00 00 00       	sub    eax,0xd8
c001f9c8:	50                   	push   eax
c001f9c9:	e8 a1 f8 ff ff       	call   c001f26f <Vm::fpuSetReg(int, unsigned long long)>
c001f9ce:	e8 44 f9 ff ff       	call   c001f317 <Vm::fpuPop()>
c001f9d3:	e9 01 fa ff ff       	jmp    c001f3d9 <Vm::x87Handler(regs*)+0x70>
c001f9d8:	8d 50 20             	lea    edx,[eax+0x20]
c001f9db:	80 fa 07             	cmp    dl,0x7
c001f9de:	77 30                	ja     c001fa10 <Vm::x87Handler(regs*)+0x6a7>
c001f9e0:	83 ec 0c             	sub    esp,0xc
c001f9e3:	2d e0 00 00 00       	sub    eax,0xe0
c001f9e8:	50                   	push   eax
c001f9e9:	e8 3e f8 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f9ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9f5:	89 c6                	mov    esi,eax
c001f9f7:	89 d7                	mov    edi,edx
c001f9f9:	e8 2e f8 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001f9fe:	57                   	push   edi
c001f9ff:	56                   	push   esi
c001fa00:	52                   	push   edx
c001fa01:	50                   	push   eax
c001fa02:	e8 48 f7 ff ff       	call   c001f14f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa07:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa0b:	e9 54 02 00 00       	jmp    c001fc64 <Vm::x87Handler(regs*)+0x8fb>
c001fa10:	8d 50 18             	lea    edx,[eax+0x18]
c001fa13:	80 fa 07             	cmp    dl,0x7
c001fa16:	0f 87 43 fb ff ff    	ja     c001f55f <Vm::x87Handler(regs*)+0x1f6>
c001fa1c:	83 ec 0c             	sub    esp,0xc
c001fa1f:	2d e8 00 00 00       	sub    eax,0xe8
c001fa24:	50                   	push   eax
c001fa25:	e8 02 f8 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fa2a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa31:	89 c6                	mov    esi,eax
c001fa33:	89 d7                	mov    edi,edx
c001fa35:	e8 f2 f7 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fa3a:	57                   	push   edi
c001fa3b:	56                   	push   esi
c001fa3c:	52                   	push   edx
c001fa3d:	50                   	push   eax
c001fa3e:	e8 0c f7 ff ff       	call   c001f14f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa43:	83 c4 20             	add    esp,0x20
c001fa46:	e8 cc f8 ff ff       	call   c001f317 <Vm::fpuPop()>
c001fa4b:	eb 62                	jmp    c001faaf <Vm::x87Handler(regs*)+0x746>
c001fa4d:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fa51:	0f 85 0f 01 00 00    	jne    c001fb66 <Vm::x87Handler(regs*)+0x7fd>
c001fa57:	83 ec 0c             	sub    esp,0xc
c001fa5a:	6a 01                	push   0x1
c001fa5c:	e8 cb f7 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fa61:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa68:	89 c6                	mov    esi,eax
c001fa6a:	89 d7                	mov    edi,edx
c001fa6c:	e8 bb f7 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fa71:	57                   	push   edi
c001fa72:	56                   	push   esi
c001fa73:	52                   	push   edx
c001fa74:	50                   	push   eax
c001fa75:	e8 d5 f6 ff ff       	call   c001f14f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fa7a:	83 c4 20             	add    esp,0x20
c001fa7d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fa81:	e8 91 f8 ff ff       	call   c001f317 <Vm::fpuPop()>
c001fa86:	e8 8c f8 ff ff       	call   c001f317 <Vm::fpuPop()>
c001fa8b:	e9 50 f9 ff ff       	jmp    c001f3e0 <Vm::x87Handler(regs*)+0x77>
c001fa90:	3c d9                	cmp    al,0xd9
c001fa92:	0f 85 b5 02 00 00    	jne    c001fd4d <Vm::x87Handler(regs*)+0x9e4>
c001fa98:	eb bd                	jmp    c001fa57 <Vm::x87Handler(regs*)+0x6ee>
c001fa9a:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fa9e:	0f 85 ea 02 00 00    	jne    c001fd8e <Vm::x87Handler(regs*)+0xa25>
c001faa4:	0f b7 05 20 0f 03 c0 	movzx  eax,WORD PTR ds:0xc0030f20
c001faab:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001faaf:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fab3:	e9 28 f9 ff ff       	jmp    c001f3e0 <Vm::x87Handler(regs*)+0x77>
c001fab8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fabc:	84 d2                	test   dl,dl
c001fabe:	75 0f                	jne    c001facf <Vm::x87Handler(regs*)+0x766>
c001fac0:	83 ec 0c             	sub    esp,0xc
c001fac3:	ff 36                	push   DWORD PTR [esi]
c001fac5:	e8 b1 f4 ff ff       	call   c001ef7b <Vm::fpu32ToInternal(unsigned int)>
c001faca:	e9 2c 01 00 00       	jmp    c001fbfb <Vm::x87Handler(regs*)+0x892>
c001facf:	80 fa 01             	cmp    dl,0x1
c001fad2:	75 0f                	jne    c001fae3 <Vm::x87Handler(regs*)+0x77a>
c001fad4:	83 ec 0c             	sub    esp,0xc
c001fad7:	ff 36                	push   DWORD PTR [esi]
c001fad9:	e8 9d f4 ff ff       	call   c001ef7b <Vm::fpu32ToInternal(unsigned int)>
c001fade:	e9 81 02 00 00       	jmp    c001fd64 <Vm::x87Handler(regs*)+0x9fb>
c001fae3:	80 fa 04             	cmp    dl,0x4
c001fae6:	75 0f                	jne    c001faf7 <Vm::x87Handler(regs*)+0x78e>
c001fae8:	83 ec 0c             	sub    esp,0xc
c001faeb:	ff 36                	push   DWORD PTR [esi]
c001faed:	e8 89 f4 ff ff       	call   c001ef7b <Vm::fpu32ToInternal(unsigned int)>
c001faf2:	e9 86 01 00 00       	jmp    c001fc7d <Vm::x87Handler(regs*)+0x914>
c001faf7:	80 fa 05             	cmp    dl,0x5
c001fafa:	75 1b                	jne    c001fb17 <Vm::x87Handler(regs*)+0x7ae>
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	6a 00                	push   0x0
c001fb01:	e8 26 f7 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fb06:	89 c7                	mov    edi,eax
c001fb08:	89 d5                	mov    ebp,edx
c001fb0a:	58                   	pop    eax
c001fb0b:	ff 36                	push   DWORD PTR [esi]
c001fb0d:	e8 69 f4 ff ff       	call   c001ef7b <Vm::fpu32ToInternal(unsigned int)>
c001fb12:	e9 a3 01 00 00       	jmp    c001fcba <Vm::x87Handler(regs*)+0x951>
c001fb17:	80 fa 06             	cmp    dl,0x6
c001fb1a:	75 0f                	jne    c001fb2b <Vm::x87Handler(regs*)+0x7c2>
c001fb1c:	83 ec 0c             	sub    esp,0xc
c001fb1f:	ff 36                	push   DWORD PTR [esi]
c001fb21:	e8 55 f4 ff ff       	call   c001ef7b <Vm::fpu32ToInternal(unsigned int)>
c001fb26:	e9 ae 01 00 00       	jmp    c001fcd9 <Vm::x87Handler(regs*)+0x970>
c001fb2b:	31 c0                	xor    eax,eax
c001fb2d:	80 fa 07             	cmp    dl,0x7
c001fb30:	0f 85 94 02 00 00    	jne    c001fdca <Vm::x87Handler(regs*)+0xa61>
c001fb36:	83 ec 0c             	sub    esp,0xc
c001fb39:	6a 00                	push   0x0
c001fb3b:	e8 ec f6 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fb40:	89 c7                	mov    edi,eax
c001fb42:	89 d5                	mov    ebp,edx
c001fb44:	58                   	pop    eax
c001fb45:	ff 36                	push   DWORD PTR [esi]
c001fb47:	e8 2f f4 ff ff       	call   c001ef7b <Vm::fpu32ToInternal(unsigned int)>
c001fb4c:	e9 cb 01 00 00       	jmp    c001fd1c <Vm::x87Handler(regs*)+0x9b3>
c001fb51:	80 fa 03             	cmp    dl,0x3
c001fb54:	0f 85 d3 01 00 00    	jne    c001fd2d <Vm::x87Handler(regs*)+0x9c4>
c001fb5a:	e8 b8 f7 ff ff       	call   c001f317 <Vm::fpuPop()>
c001fb5f:	51                   	push   ecx
c001fb60:	51                   	push   ecx
c001fb61:	e9 de 01 00 00       	jmp    c001fd44 <Vm::x87Handler(regs*)+0x9db>
c001fb66:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fb6a:	80 fa 01             	cmp    dl,0x1
c001fb6d:	75 09                	jne    c001fb78 <Vm::x87Handler(regs*)+0x80f>
c001fb6f:	57                   	push   edi
c001fb70:	57                   	push   edi
c001fb71:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb73:	e9 e3 01 00 00       	jmp    c001fd5b <Vm::x87Handler(regs*)+0x9f2>
c001fb78:	80 fa 04             	cmp    dl,0x4
c001fb7b:	75 12                	jne    c001fb8f <Vm::x87Handler(regs*)+0x826>
c001fb7d:	31 d2                	xor    edx,edx
c001fb7f:	51                   	push   ecx
c001fb80:	51                   	push   ecx
c001fb81:	8b 06                	mov    eax,DWORD PTR [esi]
c001fb83:	52                   	push   edx
c001fb84:	50                   	push   eax
c001fb85:	e8 d0 f4 ff ff       	call   c001f05a <Vm::fpuLongToFloat(long long)>
c001fb8a:	e9 ee 00 00 00       	jmp    c001fc7d <Vm::x87Handler(regs*)+0x914>
c001fb8f:	31 c0                	xor    eax,eax
c001fb91:	80 fa 07             	cmp    dl,0x7
c001fb94:	0f 85 30 02 00 00    	jne    c001fdca <Vm::x87Handler(regs*)+0xa61>
c001fb9a:	83 ec 0c             	sub    esp,0xc
c001fb9d:	6a 00                	push   0x0
c001fb9f:	e8 88 f6 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fba4:	89 c7                	mov    edi,eax
c001fba6:	89 d5                	mov    ebp,edx
c001fba8:	58                   	pop    eax
c001fba9:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbab:	5a                   	pop    edx
c001fbac:	31 d2                	xor    edx,edx
c001fbae:	52                   	push   edx
c001fbaf:	50                   	push   eax
c001fbb0:	e8 a5 f4 ff ff       	call   c001f05a <Vm::fpuLongToFloat(long long)>
c001fbb5:	e9 62 01 00 00       	jmp    c001fd1c <Vm::x87Handler(regs*)+0x9b3>
c001fbba:	84 d2                	test   dl,dl
c001fbbc:	75 0d                	jne    c001fbcb <Vm::x87Handler(regs*)+0x862>
c001fbbe:	31 d2                	xor    edx,edx
c001fbc0:	55                   	push   ebp
c001fbc1:	55                   	push   ebp
c001fbc2:	8b 06                	mov    eax,DWORD PTR [esi]
c001fbc4:	52                   	push   edx
c001fbc5:	50                   	push   eax
c001fbc6:	e9 d3 01 00 00       	jmp    c001fd9e <Vm::x87Handler(regs*)+0xa35>
c001fbcb:	31 c0                	xor    eax,eax
c001fbcd:	80 fa 02             	cmp    dl,0x2
c001fbd0:	0f 85 f4 01 00 00    	jne    c001fdca <Vm::x87Handler(regs*)+0xa61>
c001fbd6:	83 ec 0c             	sub    esp,0xc
c001fbd9:	6a 00                	push   0x0
c001fbdb:	e8 4c f6 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fbe0:	59                   	pop    ecx
c001fbe1:	5f                   	pop    edi
c001fbe2:	e9 6a f9 ff ff       	jmp    c001f551 <Vm::x87Handler(regs*)+0x1e8>
c001fbe7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fbeb:	84 d2                	test   dl,dl
c001fbed:	75 2a                	jne    c001fc19 <Vm::x87Handler(regs*)+0x8b0>
c001fbef:	50                   	push   eax
c001fbf0:	50                   	push   eax
c001fbf1:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fbf4:	ff 36                	push   DWORD PTR [esi]
c001fbf6:	e8 c5 f3 ff ff       	call   c001efc0 <Vm::fpu64ToInternal(unsigned long long)>
c001fbfb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc02:	89 c6                	mov    esi,eax
c001fc04:	89 d7                	mov    edi,edx
c001fc06:	e8 21 f6 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fc0b:	57                   	push   edi
c001fc0c:	56                   	push   esi
c001fc0d:	52                   	push   edx
c001fc0e:	50                   	push   eax
c001fc0f:	e8 8e f5 ff ff       	call   c001f1a2 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fc14:	e9 64 01 00 00       	jmp    c001fd7d <Vm::x87Handler(regs*)+0xa14>
c001fc19:	80 fa 01             	cmp    dl,0x1
c001fc1c:	75 11                	jne    c001fc2f <Vm::x87Handler(regs*)+0x8c6>
c001fc1e:	50                   	push   eax
c001fc1f:	50                   	push   eax
c001fc20:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc23:	ff 36                	push   DWORD PTR [esi]
c001fc25:	e8 96 f3 ff ff       	call   c001efc0 <Vm::fpu64ToInternal(unsigned long long)>
c001fc2a:	e9 35 01 00 00       	jmp    c001fd64 <Vm::x87Handler(regs*)+0x9fb>
c001fc2f:	80 fa 02             	cmp    dl,0x2
c001fc32:	0f 85 54 f9 ff ff    	jne    c001f58c <Vm::x87Handler(regs*)+0x223>
c001fc38:	55                   	push   ebp
c001fc39:	55                   	push   ebp
c001fc3a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc3d:	ff 36                	push   DWORD PTR [esi]
c001fc3f:	e8 7c f3 ff ff       	call   c001efc0 <Vm::fpu64ToInternal(unsigned long long)>
c001fc44:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc4b:	89 c6                	mov    esi,eax
c001fc4d:	89 d7                	mov    edi,edx
c001fc4f:	e8 d8 f5 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fc54:	57                   	push   edi
c001fc55:	56                   	push   esi
c001fc56:	52                   	push   edx
c001fc57:	50                   	push   eax
c001fc58:	e8 f2 f4 ff ff       	call   c001f14f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fc5d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fc61:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fc64:	83 c4 20             	add    esp,0x20
c001fc67:	e9 74 f7 ff ff       	jmp    c001f3e0 <Vm::x87Handler(regs*)+0x77>
c001fc6c:	80 fa 04             	cmp    dl,0x4
c001fc6f:	75 2a                	jne    c001fc9b <Vm::x87Handler(regs*)+0x932>
c001fc71:	51                   	push   ecx
c001fc72:	51                   	push   ecx
c001fc73:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fc76:	ff 36                	push   DWORD PTR [esi]
c001fc78:	e8 43 f3 ff ff       	call   c001efc0 <Vm::fpu64ToInternal(unsigned long long)>
c001fc7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc84:	89 c6                	mov    esi,eax
c001fc86:	89 d7                	mov    edi,edx
c001fc88:	e8 9f f5 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fc8d:	57                   	push   edi
c001fc8e:	56                   	push   esi
c001fc8f:	52                   	push   edx
c001fc90:	50                   	push   eax
c001fc91:	e8 36 f5 ff ff       	call   c001f1cc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fc96:	e9 e2 00 00 00       	jmp    c001fd7d <Vm::x87Handler(regs*)+0xa14>
c001fc9b:	80 fa 05             	cmp    dl,0x5
c001fc9e:	75 28                	jne    c001fcc8 <Vm::x87Handler(regs*)+0x95f>
c001fca0:	83 ec 0c             	sub    esp,0xc
c001fca3:	6a 00                	push   0x0
c001fca5:	e8 82 f5 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fcaa:	89 c7                	mov    edi,eax
c001fcac:	89 d5                	mov    ebp,edx
c001fcae:	58                   	pop    eax
c001fcaf:	5a                   	pop    edx
c001fcb0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcb3:	ff 36                	push   DWORD PTR [esi]
c001fcb5:	e8 06 f3 ff ff       	call   c001efc0 <Vm::fpu64ToInternal(unsigned long long)>
c001fcba:	83 c4 10             	add    esp,0x10
c001fcbd:	55                   	push   ebp
c001fcbe:	57                   	push   edi
c001fcbf:	52                   	push   edx
c001fcc0:	50                   	push   eax
c001fcc1:	e8 06 f5 ff ff       	call   c001f1cc <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fcc6:	eb 60                	jmp    c001fd28 <Vm::x87Handler(regs*)+0x9bf>
c001fcc8:	80 fa 06             	cmp    dl,0x6
c001fccb:	75 2a                	jne    c001fcf7 <Vm::x87Handler(regs*)+0x98e>
c001fccd:	51                   	push   ecx
c001fcce:	51                   	push   ecx
c001fccf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fcd2:	ff 36                	push   DWORD PTR [esi]
c001fcd4:	e8 e7 f2 ff ff       	call   c001efc0 <Vm::fpu64ToInternal(unsigned long long)>
c001fcd9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fce0:	89 c6                	mov    esi,eax
c001fce2:	89 d7                	mov    edi,edx
c001fce4:	e8 43 f5 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fce9:	57                   	push   edi
c001fcea:	56                   	push   esi
c001fceb:	52                   	push   edx
c001fcec:	50                   	push   eax
c001fced:	e8 08 f5 ff ff       	call   c001f1fa <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fcf2:	e9 86 00 00 00       	jmp    c001fd7d <Vm::x87Handler(regs*)+0xa14>
c001fcf7:	31 c0                	xor    eax,eax
c001fcf9:	80 fa 07             	cmp    dl,0x7
c001fcfc:	0f 85 c8 00 00 00    	jne    c001fdca <Vm::x87Handler(regs*)+0xa61>
c001fd02:	83 ec 0c             	sub    esp,0xc
c001fd05:	6a 00                	push   0x0
c001fd07:	e8 20 f5 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fd0c:	89 c7                	mov    edi,eax
c001fd0e:	89 d5                	mov    ebp,edx
c001fd10:	58                   	pop    eax
c001fd11:	5a                   	pop    edx
c001fd12:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd15:	ff 36                	push   DWORD PTR [esi]
c001fd17:	e8 a4 f2 ff ff       	call   c001efc0 <Vm::fpu64ToInternal(unsigned long long)>
c001fd1c:	83 c4 10             	add    esp,0x10
c001fd1f:	55                   	push   ebp
c001fd20:	57                   	push   edi
c001fd21:	52                   	push   edx
c001fd22:	50                   	push   eax
c001fd23:	e8 d2 f4 ff ff       	call   c001f1fa <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fd28:	83 c4 0c             	add    esp,0xc
c001fd2b:	eb 53                	jmp    c001fd80 <Vm::x87Handler(regs*)+0xa17>
c001fd2d:	31 c0                	xor    eax,eax
c001fd2f:	80 fa 02             	cmp    dl,0x2
c001fd32:	0f 85 92 00 00 00    	jne    c001fdca <Vm::x87Handler(regs*)+0xa61>
c001fd38:	83 ec 0c             	sub    esp,0xc
c001fd3b:	6a 00                	push   0x0
c001fd3d:	e8 ea f4 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fd42:	59                   	pop    ecx
c001fd43:	5f                   	pop    edi
c001fd44:	52                   	push   edx
c001fd45:	50                   	push   eax
c001fd46:	e8 27 f2 ff ff       	call   c001ef72 <Vm::fpuInternalTo64(unsigned long long)>
c001fd4b:	eb 70                	jmp    c001fdbd <Vm::x87Handler(regs*)+0xa54>
c001fd4d:	31 c0                	xor    eax,eax
c001fd4f:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001fd54:	75 74                	jne    c001fdca <Vm::x87Handler(regs*)+0xa61>
c001fd56:	50                   	push   eax
c001fd57:	50                   	push   eax
c001fd58:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001fd5b:	31 d2                	xor    edx,edx
c001fd5d:	52                   	push   edx
c001fd5e:	50                   	push   eax
c001fd5f:	e8 f6 f2 ff ff       	call   c001f05a <Vm::fpuLongToFloat(long long)>
c001fd64:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6b:	89 c6                	mov    esi,eax
c001fd6d:	89 d7                	mov    edi,edx
c001fd6f:	e8 b8 f4 ff ff       	call   c001f22c <Vm::fpuGetReg(int)>
c001fd74:	57                   	push   edi
c001fd75:	56                   	push   esi
c001fd76:	52                   	push   edx
c001fd77:	50                   	push   eax
c001fd78:	e8 5e f4 ff ff       	call   c001f1db <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fd7d:	83 c4 1c             	add    esp,0x1c
c001fd80:	52                   	push   edx
c001fd81:	50                   	push   eax
c001fd82:	6a 00                	push   0x0
c001fd84:	e8 e6 f4 ff ff       	call   c001f26f <Vm::fpuSetReg(int, unsigned long long)>
c001fd89:	e9 f2 f7 ff ff       	jmp    c001f580 <Vm::x87Handler(regs*)+0x217>
c001fd8e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd92:	80 fa 05             	cmp    dl,0x5
c001fd95:	75 11                	jne    c001fda8 <Vm::x87Handler(regs*)+0xa3f>
c001fd97:	55                   	push   ebp
c001fd98:	55                   	push   ebp
c001fd99:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd9c:	ff 36                	push   DWORD PTR [esi]
c001fd9e:	e8 81 f2 ff ff       	call   c001f024 <Vm::fpuULongToFloat(unsigned long long)>
c001fda3:	e9 cf f7 ff ff       	jmp    c001f577 <Vm::x87Handler(regs*)+0x20e>
c001fda8:	31 c0                	xor    eax,eax
c001fdaa:	80 fa 07             	cmp    dl,0x7
c001fdad:	75 1b                	jne    c001fdca <Vm::x87Handler(regs*)+0xa61>
c001fdaf:	e8 63 f5 ff ff       	call   c001f317 <Vm::fpuPop()>
c001fdb4:	51                   	push   ecx
c001fdb5:	51                   	push   ecx
c001fdb6:	52                   	push   edx
c001fdb7:	50                   	push   eax
c001fdb8:	e8 0c f2 ff ff       	call   c001efc9 <Vm::fpuFloatToLong(unsigned long long)>
c001fdbd:	83 c4 10             	add    esp,0x10
c001fdc0:	89 06                	mov    DWORD PTR [esi],eax
c001fdc2:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001fdc5:	e9 f8 f7 ff ff       	jmp    c001f5c2 <Vm::x87Handler(regs*)+0x259>
c001fdca:	83 c4 1c             	add    esp,0x1c
c001fdcd:	5b                   	pop    ebx
c001fdce:	5e                   	pop    esi
c001fdcf:	5f                   	pop    edi
c001fdd0:	5d                   	pop    ebp
c001fdd1:	c3                   	ret    

c001fdd2 <__static_initialization_and_destruction_0(int, int)>:
c001fdd2:	83 ec 0c             	sub    esp,0xc
c001fdd5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001fdda:	75 1a                	jne    c001fdf6 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fddc:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001fde4:	75 10                	jne    c001fdf6 <__static_initialization_and_destruction_0(int, int)+0x24>
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	68 20 0f 03 c0       	push   0xc0030f20
c001fdee:	e8 07 8d 00 00       	call   c0028afa <Vm::_FPUState::_FPUState()>
c001fdf3:	83 c4 10             	add    esp,0x10
c001fdf6:	90                   	nop
c001fdf7:	83 c4 0c             	add    esp,0xc
c001fdfa:	c3                   	ret    

c001fdfb <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001fdfb:	83 ec 0c             	sub    esp,0xc
c001fdfe:	83 ec 08             	sub    esp,0x8
c001fe01:	68 ff ff 00 00       	push   0xffff
c001fe06:	6a 01                	push   0x1
c001fe08:	e8 c5 ff ff ff       	call   c001fdd2 <__static_initialization_and_destruction_0(int, int)>
c001fe0d:	83 c4 10             	add    esp,0x10
c001fe10:	83 c4 0c             	add    esp,0xc
c001fe13:	c3                   	ret    

c001fe14 <FAT::getName()>:
c001fe14:	b8 10 be 02 c0       	mov    eax,0xc002be10
c001fe19:	c3                   	ret    

c001fe1a <FAT::tell(void*, unsigned long long*)>:
c001fe1a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe1f:	75 06                	jne    c001fe27 <FAT::tell(void*, unsigned long long*)+0xd>
c001fe21:	b8 04 00 00 00       	mov    eax,0x4
c001fe26:	c3                   	ret    
c001fe27:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe2c:	75 06                	jne    c001fe34 <FAT::tell(void*, unsigned long long*)+0x1a>
c001fe2e:	b8 04 00 00 00       	mov    eax,0x4
c001fe33:	c3                   	ret    
c001fe34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe38:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001fe3b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001fe3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe42:	89 01                	mov    DWORD PTR [ecx],eax
c001fe44:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe47:	b8 00 00 00 00       	mov    eax,0x0
c001fe4c:	c3                   	ret    
c001fe4d:	90                   	nop

c001fe4e <FAT::stat(void*, unsigned long long*)>:
c001fe4e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001fe53:	75 06                	jne    c001fe5b <FAT::stat(void*, unsigned long long*)+0xd>
c001fe55:	b8 04 00 00 00       	mov    eax,0x4
c001fe5a:	c3                   	ret    
c001fe5b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001fe60:	75 06                	jne    c001fe68 <FAT::stat(void*, unsigned long long*)+0x1a>
c001fe62:	b8 04 00 00 00       	mov    eax,0x4
c001fe67:	c3                   	ret    
c001fe68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe6c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001fe6f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001fe72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fe76:	89 01                	mov    DWORD PTR [ecx],eax
c001fe78:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe7b:	b8 00 00 00 00       	mov    eax,0x0
c001fe80:	c3                   	ret    
c001fe81:	90                   	nop

c001fe82 <FAT::~FAT()>:
c001fe82:	83 ec 0c             	sub    esp,0xc
c001fe85:	ba 5c be 02 c0       	mov    edx,0xc002be5c
c001fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe8e:	89 10                	mov    DWORD PTR [eax],edx
c001fe90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe94:	83 ec 0c             	sub    esp,0xc
c001fe97:	50                   	push   eax
c001fe98:	e8 45 2b ff ff       	call   c00129e2 <Filesystem::~Filesystem()>
c001fe9d:	83 c4 10             	add    esp,0x10
c001fea0:	90                   	nop
c001fea1:	83 c4 0c             	add    esp,0xc
c001fea4:	c3                   	ret    
c001fea5:	90                   	nop

c001fea6 <FAT::~FAT()>:
c001fea6:	83 ec 0c             	sub    esp,0xc
c001fea9:	83 ec 0c             	sub    esp,0xc
c001feac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feb0:	e8 cd ff ff ff       	call   c001fe82 <FAT::~FAT()>
c001feb5:	83 c4 10             	add    esp,0x10
c001feb8:	83 ec 08             	sub    esp,0x8
c001febb:	6a 08                	push   0x8
c001febd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fec1:	e8 15 27 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c001fec6:	83 c4 10             	add    esp,0x10
c001fec9:	83 c4 0c             	add    esp,0xc
c001fecc:	c3                   	ret    
c001fecd:	90                   	nop

c001fece <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001fece:	83 ec 1c             	sub    esp,0x1c
c001fed1:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001fed8:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001fedd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fee1:	8b 04 85 a0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf060]
c001fee8:	83 f8 ff             	cmp    eax,0xffffffff
c001feeb:	75 34                	jne    c001ff21 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001feed:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001fef1:	88 c2                	mov    dl,al
c001fef3:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001fef8:	01 d0                	add    eax,edx
c001fefa:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001fefe:	8b 15 80 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f80
c001ff04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff08:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c001ff0f:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001ff14:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ff18:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c001ff1f:	eb 17                	jmp    c001ff38 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001ff21:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ff25:	88 c2                	mov    dl,al
c001ff27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ff2b:	8b 04 85 a0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf060]
c001ff32:	01 d0                	add    eax,edx
c001ff34:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ff38:	83 ec 04             	sub    esp,0x4
c001ff3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ff43:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ff47:	50                   	push   eax
c001ff48:	e8 b1 6d fe ff       	call   c0006cfe <f_getlabel>
c001ff4d:	83 c4 10             	add    esp,0x10
c001ff50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ff54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ff59:	75 07                	jne    c001ff62 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001ff5b:	b8 00 00 00 00       	mov    eax,0x0
c001ff60:	eb 05                	jmp    c001ff67 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001ff62:	b8 01 00 00 00       	mov    eax,0x1
c001ff67:	83 c4 1c             	add    esp,0x1c
c001ff6a:	c3                   	ret    
c001ff6b:	90                   	nop

c001ff6c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001ff6c:	57                   	push   edi
c001ff6d:	83 ec 58             	sub    esp,0x58
c001ff70:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001ff78:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ff7c:	b9 0f 00 00 00       	mov    ecx,0xf
c001ff81:	b8 00 00 00 00       	mov    eax,0x0
c001ff86:	fc                   	cld    
c001ff87:	89 d7                	mov    edi,edx
c001ff89:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ff8b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ff8f:	8b 04 85 a0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf060]
c001ff96:	83 f8 ff             	cmp    eax,0xffffffff
c001ff99:	75 34                	jne    c001ffcf <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001ff9b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ff9f:	88 c2                	mov    dl,al
c001ffa1:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001ffa6:	01 d0                	add    eax,edx
c001ffa8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffac:	8b 15 80 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f80
c001ffb2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffb6:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c001ffbd:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c001ffc2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ffc6:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c001ffcd:	eb 17                	jmp    c001ffe6 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001ffcf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ffd3:	88 c2                	mov    dl,al
c001ffd5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ffd9:	8b 04 85 a0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf060]
c001ffe0:	01 d0                	add    eax,edx
c001ffe2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ffe6:	83 ec 08             	sub    esp,0x8
c001ffe9:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ffed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001fff1:	50                   	push   eax
c001fff2:	e8 55 09 fe ff       	call   c000094c <strcat>
c001fff7:	83 c4 10             	add    esp,0x10
c001fffa:	83 ec 0c             	sub    esp,0xc
c001fffd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020001:	50                   	push   eax
c0020002:	e8 e5 6e fe ff       	call   c0006eec <f_setlabel>
c0020007:	83 c4 10             	add    esp,0x10
c002000a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002000e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020013:	75 07                	jne    c002001c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020015:	b8 00 00 00 00       	mov    eax,0x0
c002001a:	eb 05                	jmp    c0020021 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002001c:	b8 01 00 00 00       	mov    eax,0x1
c0020021:	83 c4 58             	add    esp,0x58
c0020024:	5f                   	pop    edi
c0020025:	c3                   	ret    

c0020026 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020026:	83 ec 2c             	sub    esp,0x2c
c0020029:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020031:	83 ec 08             	sub    esp,0x8
c0020034:	68 34 be 02 c0       	push   0xc002be34
c0020039:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002003d:	e8 56 08 fe ff       	call   c0000898 <strcmp>
c0020042:	83 c4 10             	add    esp,0x10
c0020045:	85 c0                	test   eax,eax
c0020047:	0f 94 c0             	sete   al
c002004a:	84 c0                	test   al,al
c002004c:	74 0d                	je     c002005b <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002004e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020056:	e9 a6 00 00 00       	jmp    c0020101 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002005b:	83 ec 08             	sub    esp,0x8
c002005e:	68 26 be 02 c0       	push   0xc002be26
c0020063:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020067:	e8 2c 08 fe ff       	call   c0000898 <strcmp>
c002006c:	83 c4 10             	add    esp,0x10
c002006f:	85 c0                	test   eax,eax
c0020071:	0f 94 c0             	sete   al
c0020074:	84 c0                	test   al,al
c0020076:	74 0a                	je     c0020082 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020078:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020080:	eb 7f                	jmp    c0020101 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020082:	83 ec 08             	sub    esp,0x8
c0020085:	68 2c be 02 c0       	push   0xc002be2c
c002008a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002008e:	e8 05 08 fe ff       	call   c0000898 <strcmp>
c0020093:	83 c4 10             	add    esp,0x10
c0020096:	85 c0                	test   eax,eax
c0020098:	0f 94 c0             	sete   al
c002009b:	84 c0                	test   al,al
c002009d:	74 0a                	je     c00200a9 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002009f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00200a7:	eb 58                	jmp    c0020101 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200a9:	83 ec 08             	sub    esp,0x8
c00200ac:	68 6c 92 02 c0       	push   0xc002926c
c00200b1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200b5:	e8 de 07 fe ff       	call   c0000898 <strcmp>
c00200ba:	83 c4 10             	add    esp,0x10
c00200bd:	85 c0                	test   eax,eax
c00200bf:	0f 94 c0             	sete   al
c00200c2:	84 c0                	test   al,al
c00200c4:	74 0a                	je     c00200d0 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c00200c6:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00200ce:	eb 31                	jmp    c0020101 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200d0:	83 ec 08             	sub    esp,0x8
c00200d3:	68 32 be 02 c0       	push   0xc002be32
c00200d8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00200dc:	e8 b7 07 fe ff       	call   c0000898 <strcmp>
c00200e1:	83 c4 10             	add    esp,0x10
c00200e4:	85 c0                	test   eax,eax
c00200e6:	0f 94 c0             	sete   al
c00200e9:	84 c0                	test   al,al
c00200eb:	74 0a                	je     c00200f7 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00200ed:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00200f5:	eb 0a                	jmp    c0020101 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00200f7:	b8 08 00 00 00       	mov    eax,0x8
c00200fc:	e9 df 00 00 00       	jmp    c00201e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c0020101:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020108:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002010d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020111:	8b 04 85 a0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf060]
c0020118:	83 f8 ff             	cmp    eax,0xffffffff
c002011b:	75 34                	jne    c0020151 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002011d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020121:	88 c2                	mov    dl,al
c0020123:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c0020128:	01 d0                	add    eax,edx
c002012a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002012e:	8b 15 80 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f80
c0020134:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020138:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c002013f:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c0020144:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020148:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c002014f:	eb 17                	jmp    c0020168 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020151:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020155:	88 c2                	mov    dl,al
c0020157:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002015b:	8b 04 85 a0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf060]
c0020162:	01 d0                	add    eax,edx
c0020164:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020168:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002016c:	88 04 24             	mov    BYTE PTR [esp],al
c002016f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020173:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020177:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002017f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020184:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	68 00 20 00 00       	push   0x2000
c0020194:	e8 00 f4 fe ff       	call   c000f599 <malloc>
c0020199:	83 c4 10             	add    esp,0x10
c002019c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00201a0:	68 00 20 00 00       	push   0x2000
c00201a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201ad:	50                   	push   eax
c00201ae:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00201b2:	50                   	push   eax
c00201b3:	e8 7f 71 fe ff       	call   c0007337 <f_mkfs>
c00201b8:	83 c4 10             	add    esp,0x10
c00201bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201bf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201c4:	75 07                	jne    c00201cd <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c00201c6:	b8 00 00 00 00       	mov    eax,0x0
c00201cb:	eb 13                	jmp    c00201e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201cd:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00201d2:	75 07                	jne    c00201db <FAT::format(LogicalDisk*, int, char const*, int)+0x1b5>
c00201d4:	b8 09 00 00 00       	mov    eax,0x9
c00201d9:	eb 05                	jmp    c00201e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x1ba>
c00201db:	b8 01 00 00 00       	mov    eax,0x1
c00201e0:	83 c4 2c             	add    esp,0x2c
c00201e3:	c3                   	ret    

c00201e4 <FAT::tryMount(LogicalDisk*, int)>:
c00201e4:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00201ea:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c00201ef:	83 f8 14             	cmp    eax,0x14
c00201f2:	75 17                	jne    c002020b <FAT::tryMount(LogicalDisk*, int)+0x27>
c00201f4:	83 ec 0c             	sub    esp,0xc
c00201f7:	68 38 be 02 c0       	push   0xc002be38
c00201fc:	e8 1e 9c ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0020201:	83 c4 10             	add    esp,0x10
c0020204:	b0 00                	mov    al,0x0
c0020206:	e9 d7 01 00 00       	jmp    c00203e2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002020b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020212:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020218:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002021e:	3d 00 02 00 00       	cmp    eax,0x200
c0020223:	74 07                	je     c002022c <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020225:	b0 00                	mov    al,0x0
c0020227:	e9 b6 01 00 00       	jmp    c00203e2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002022c:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020234:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002023b:	8b 04 85 a0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf060]
c0020242:	83 f8 ff             	cmp    eax,0xffffffff
c0020245:	74 07                	je     c002024e <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020247:	b0 01                	mov    al,0x1
c0020249:	e9 94 01 00 00       	jmp    c00203e2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002024e:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020258:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020260:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020267:	88 c2                	mov    dl,al
c0020269:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c002026e:	01 d0                	add    eax,edx
c0020270:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020277:	8b 15 80 0f 03 c0    	mov    edx,DWORD PTR ds:0xc0030f80
c002027d:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020284:	89 14 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],edx
c002028b:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c0020290:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020297:	89 14 85 20 10 03 c0 	mov    DWORD PTR [eax*4-0x3ffcefe0],edx
c002029e:	83 ec 0c             	sub    esp,0xc
c00202a1:	68 54 02 00 00       	push   0x254
c00202a6:	e8 ee f2 fe ff       	call   c000f599 <malloc>
c00202ab:	83 c4 10             	add    esp,0x10
c00202ae:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00202b5:	83 ec 04             	sub    esp,0x4
c00202b8:	6a 00                	push   0x0
c00202ba:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00202c1:	50                   	push   eax
c00202c2:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202c9:	e8 27 4c fe ff       	call   c0004ef5 <f_mount>
c00202ce:	83 c4 10             	add    esp,0x10
c00202d1:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00202d8:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00202e0:	74 19                	je     c00202fb <FAT::tryMount(LogicalDisk*, int)+0x117>
c00202e2:	83 ec 0c             	sub    esp,0xc
c00202e5:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00202ec:	e8 c8 f2 fe ff       	call   c000f5b9 <rfree>
c00202f1:	83 c4 10             	add    esp,0x10
c00202f4:	b0 00                	mov    al,0x0
c00202f6:	e9 e7 00 00 00       	jmp    c00203e2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00202fb:	83 ec 04             	sub    esp,0x4
c00202fe:	68 00 01 00 00       	push   0x100
c0020303:	6a 00                	push   0x0
c0020305:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002030c:	50                   	push   eax
c002030d:	e8 3e 04 fe ff       	call   c0000750 <memset>
c0020312:	83 c4 10             	add    esp,0x10
c0020315:	83 ec 08             	sub    esp,0x8
c0020318:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002031f:	50                   	push   eax
c0020320:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020327:	50                   	push   eax
c0020328:	e8 1f 06 fe ff       	call   c000094c <strcat>
c002032d:	83 c4 10             	add    esp,0x10
c0020330:	83 ec 08             	sub    esp,0x8
c0020333:	68 46 be 02 c0       	push   0xc002be46
c0020338:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002033f:	50                   	push   eax
c0020340:	e8 07 06 fe ff       	call   c000094c <strcat>
c0020345:	83 c4 10             	add    esp,0x10
c0020348:	83 ec 04             	sub    esp,0x4
c002034b:	6a 01                	push   0x1
c002034d:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020354:	50                   	push   eax
c0020355:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020359:	50                   	push   eax
c002035a:	e8 f8 4b fe ff       	call   c0004f57 <f_open>
c002035f:	83 c4 10             	add    esp,0x10
c0020362:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020369:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020370:	85 c0                	test   eax,eax
c0020372:	74 0a                	je     c002037e <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020374:	78 2d                	js     c00203a3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020376:	83 e8 04             	sub    eax,0x4
c0020379:	83 f8 01             	cmp    eax,0x1
c002037c:	77 25                	ja     c00203a3 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002037e:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020386:	83 ec 0c             	sub    esp,0xc
c0020389:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002038d:	50                   	push   eax
c002038e:	e8 16 57 fe ff       	call   c0005aa9 <f_close>
c0020393:	83 c4 10             	add    esp,0x10
c0020396:	90                   	nop
c0020397:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002039f:	74 3a                	je     c00203db <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00203a1:	eb 2d                	jmp    c00203d0 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00203a3:	83 ec 0c             	sub    esp,0xc
c00203a6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00203ad:	e8 07 f2 fe ff       	call   c000f5b9 <rfree>
c00203b2:	83 c4 10             	add    esp,0x10
c00203b5:	83 ec 04             	sub    esp,0x4
c00203b8:	6a 00                	push   0x0
c00203ba:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00203c1:	50                   	push   eax
c00203c2:	6a 00                	push   0x0
c00203c4:	e8 2c 4b fe ff       	call   c0004ef5 <f_mount>
c00203c9:	83 c4 10             	add    esp,0x10
c00203cc:	b0 00                	mov    al,0x0
c00203ce:	eb 12                	jmp    c00203e2 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00203d0:	a1 80 0f 03 c0       	mov    eax,ds:0xc0030f80
c00203d5:	40                   	inc    eax
c00203d6:	a3 80 0f 03 c0       	mov    ds:0xc0030f80,eax
c00203db:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00203e2:	81 c4 6c 03 00 00    	add    esp,0x36c
c00203e8:	c3                   	ret    
c00203e9:	90                   	nop

c00203ea <FAT::getFileFirstSector(char const*)>:
c00203ea:	53                   	push   ebx
c00203eb:	83 ec 28             	sub    esp,0x28
c00203ee:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00203f6:	83 ec 0c             	sub    esp,0xc
c00203f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203fd:	e8 97 f1 fe ff       	call   c000f599 <malloc>
c0020402:	83 c4 10             	add    esp,0x10
c0020405:	89 c3                	mov    ebx,eax
c0020407:	a1 b0 0e 03 c0       	mov    eax,ds:0xc0030eb0
c002040c:	83 ec 04             	sub    esp,0x4
c002040f:	50                   	push   eax
c0020410:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020414:	53                   	push   ebx
c0020415:	e8 f8 27 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c002041a:	83 c4 10             	add    esp,0x10
c002041d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020421:	83 ec 08             	sub    esp,0x8
c0020424:	6a 01                	push   0x1
c0020426:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002042a:	e8 47 28 ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c002042f:	83 c4 10             	add    esp,0x10
c0020432:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020436:	8b 00                	mov    eax,DWORD PTR [eax]
c0020438:	83 c0 0c             	add    eax,0xc
c002043b:	8b 00                	mov    eax,DWORD PTR [eax]
c002043d:	83 ec 0c             	sub    esp,0xc
c0020440:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020444:	52                   	push   edx
c0020445:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020449:	52                   	push   edx
c002044a:	6a 00                	push   0x0
c002044c:	6a 04                	push   0x4
c002044e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020452:	ff d0                	call   eax
c0020454:	83 c4 20             	add    esp,0x20
c0020457:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002045b:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020461:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020465:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020469:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002046c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c002046f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020473:	83 ec 0c             	sub    esp,0xc
c0020476:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002047a:	e8 55 28 ff ff       	call   c0012cd4 <File::close()>
c002047f:	83 c4 10             	add    esp,0x10
c0020482:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020486:	ba 00 00 00 00       	mov    edx,0x0
c002048b:	83 c4 28             	add    esp,0x28
c002048e:	5b                   	pop    ebx
c002048f:	c3                   	ret    

c0020490 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020490:	57                   	push   edi
c0020491:	56                   	push   esi
c0020492:	53                   	push   ebx
c0020493:	81 ec 50 02 00 00    	sub    esp,0x250
c0020499:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00204a1:	74 0a                	je     c00204ad <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c00204a3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00204ab:	75 0a                	jne    c00204b7 <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c00204ad:	b8 04 00 00 00       	mov    eax,0x4
c00204b2:	e9 29 01 00 00       	jmp    c00205e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00204b7:	83 ec 08             	sub    esp,0x8
c00204ba:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00204c1:	50                   	push   eax
c00204c2:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00204c9:	e8 e5 5b fe ff       	call   c00060b3 <f_readdir>
c00204ce:	83 c4 10             	add    esp,0x10
c00204d1:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00204d8:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00204df:	83 ec 0c             	sub    esp,0xc
c00204e2:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00204e9:	83 c0 1a             	add    eax,0x1a
c00204ec:	50                   	push   eax
c00204ed:	e8 7a 02 fe ff       	call   c000076c <strlen>
c00204f2:	83 c4 10             	add    esp,0x10
c00204f5:	ba 00 00 00 00       	mov    edx,0x0
c00204fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00204fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020502:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020509:	0f b6 c0             	movzx  eax,al
c002050c:	83 e0 10             	and    eax,0x10
c002050f:	74 07                	je     c0020518 <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020511:	b8 02 00 00 00       	mov    eax,0x2
c0020516:	eb 05                	jmp    c002051d <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020518:	b8 01 00 00 00       	mov    eax,0x1
c002051d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020521:	83 ec 08             	sub    esp,0x8
c0020524:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c002052b:	83 c0 1a             	add    eax,0x1a
c002052e:	50                   	push   eax
c002052f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020533:	83 c0 10             	add    eax,0x10
c0020536:	50                   	push   eax
c0020537:	e8 d0 02 fe ff       	call   c000080c <strcpy>
c002053c:	83 c4 10             	add    esp,0x10
c002053f:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020546:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c002054d:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020551:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020558:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c002055f:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020566:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c002056d:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020574:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c002057b:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020582:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020589:	89 c6                	mov    esi,eax
c002058b:	89 d7                	mov    edi,edx
c002058d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002058f:	89 c8                	mov    eax,ecx
c0020591:	89 fa                	mov    edx,edi
c0020593:	89 f3                	mov    ebx,esi
c0020595:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c002059c:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00205a3:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00205aa:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00205b1:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00205b7:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00205be:	84 c0                	test   al,al
c00205c0:	75 07                	jne    c00205c9 <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c00205c2:	b8 07 00 00 00       	mov    eax,0x7
c00205c7:	eb 17                	jmp    c00205e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205c9:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00205d0:	85 c0                	test   eax,eax
c00205d2:	75 07                	jne    c00205db <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c00205d4:	b8 00 00 00 00       	mov    eax,0x0
c00205d9:	eb 05                	jmp    c00205e0 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00205db:	b8 01 00 00 00       	mov    eax,0x1
c00205e0:	81 c4 50 02 00 00    	add    esp,0x250
c00205e6:	5b                   	pop    ebx
c00205e7:	5e                   	pop    esi
c00205e8:	5f                   	pop    edi
c00205e9:	c3                   	ret    

c00205ea <FAT::read(void*, unsigned long, void*, int*)>:
c00205ea:	83 ec 1c             	sub    esp,0x1c
c00205ed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00205f2:	74 07                	je     c00205fb <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00205f4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00205f9:	75 07                	jne    c0020602 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00205fb:	b8 04 00 00 00       	mov    eax,0x4
c0020600:	eb 3d                	jmp    c002063f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020602:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020606:	50                   	push   eax
c0020607:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002060b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002060f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020613:	e8 7b 4d fe ff       	call   c0005393 <f_read>
c0020618:	83 c4 10             	add    esp,0x10
c002061b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002061f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020623:	89 c2                	mov    edx,eax
c0020625:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020629:	89 10                	mov    DWORD PTR [eax],edx
c002062b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002062f:	85 c0                	test   eax,eax
c0020631:	75 07                	jne    c002063a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020633:	b8 00 00 00 00       	mov    eax,0x0
c0020638:	eb 05                	jmp    c002063f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002063a:	b8 01 00 00 00       	mov    eax,0x1
c002063f:	83 c4 1c             	add    esp,0x1c
c0020642:	c3                   	ret    
c0020643:	90                   	nop

c0020644 <FAT::write(void*, unsigned long, void*, int*)>:
c0020644:	83 ec 1c             	sub    esp,0x1c
c0020647:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002064c:	74 07                	je     c0020655 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c002064e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020653:	75 07                	jne    c002065c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020655:	b8 04 00 00 00       	mov    eax,0x4
c002065a:	eb 3d                	jmp    c0020699 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002065c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020660:	50                   	push   eax
c0020661:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020665:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020669:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002066d:	e8 a1 4f fe ff       	call   c0005613 <f_write>
c0020672:	83 c4 10             	add    esp,0x10
c0020675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020679:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002067d:	89 c2                	mov    edx,eax
c002067f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020683:	89 10                	mov    DWORD PTR [eax],edx
c0020685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020689:	85 c0                	test   eax,eax
c002068b:	75 07                	jne    c0020694 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c002068d:	b8 00 00 00 00       	mov    eax,0x0
c0020692:	eb 05                	jmp    c0020699 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020694:	b8 01 00 00 00       	mov    eax,0x1
c0020699:	83 c4 1c             	add    esp,0x1c
c002069c:	c3                   	ret    
c002069d:	90                   	nop

c002069e <FAT::close(void*)>:
c002069e:	83 ec 1c             	sub    esp,0x1c
c00206a1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206a6:	75 07                	jne    c00206af <FAT::close(void*)+0x11>
c00206a8:	b8 04 00 00 00       	mov    eax,0x4
c00206ad:	eb 36                	jmp    c00206e5 <FAT::close(void*)+0x47>
c00206af:	83 ec 0c             	sub    esp,0xc
c00206b2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206b6:	e8 ee 53 fe ff       	call   c0005aa9 <f_close>
c00206bb:	83 c4 10             	add    esp,0x10
c00206be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00206c2:	83 ec 0c             	sub    esp,0xc
c00206c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00206c9:	e8 db ee fe ff       	call   c000f5a9 <free>
c00206ce:	83 c4 10             	add    esp,0x10
c00206d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00206d5:	85 c0                	test   eax,eax
c00206d7:	75 07                	jne    c00206e0 <FAT::close(void*)+0x42>
c00206d9:	b8 00 00 00 00       	mov    eax,0x0
c00206de:	eb 05                	jmp    c00206e5 <FAT::close(void*)+0x47>
c00206e0:	b8 01 00 00 00       	mov    eax,0x1
c00206e5:	83 c4 1c             	add    esp,0x1c
c00206e8:	c3                   	ret    
c00206e9:	90                   	nop

c00206ea <FAT::closeDir(void*)>:
c00206ea:	83 ec 1c             	sub    esp,0x1c
c00206ed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00206f2:	75 07                	jne    c00206fb <FAT::closeDir(void*)+0x11>
c00206f4:	b8 04 00 00 00       	mov    eax,0x4
c00206f9:	eb 36                	jmp    c0020731 <FAT::closeDir(void*)+0x47>
c00206fb:	83 ec 0c             	sub    esp,0xc
c00206fe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020702:	e8 8a 59 fe ff       	call   c0006091 <f_closedir>
c0020707:	83 c4 10             	add    esp,0x10
c002070a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002070e:	83 ec 0c             	sub    esp,0xc
c0020711:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020715:	e8 8f ee fe ff       	call   c000f5a9 <free>
c002071a:	83 c4 10             	add    esp,0x10
c002071d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020721:	85 c0                	test   eax,eax
c0020723:	75 07                	jne    c002072c <FAT::closeDir(void*)+0x42>
c0020725:	b8 00 00 00 00       	mov    eax,0x0
c002072a:	eb 05                	jmp    c0020731 <FAT::closeDir(void*)+0x47>
c002072c:	b8 01 00 00 00       	mov    eax,0x1
c0020731:	83 c4 1c             	add    esp,0x1c
c0020734:	c3                   	ret    
c0020735:	90                   	nop

c0020736 <FAT::seek(void*, unsigned long long)>:
c0020736:	83 ec 2c             	sub    esp,0x2c
c0020739:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002073d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020741:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020745:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020749:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c002074e:	75 07                	jne    c0020757 <FAT::seek(void*, unsigned long long)+0x21>
c0020750:	b8 04 00 00 00       	mov    eax,0x4
c0020755:	eb 2f                	jmp    c0020786 <FAT::seek(void*, unsigned long long)+0x50>
c0020757:	83 ec 04             	sub    esp,0x4
c002075a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002075e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020762:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020766:	e8 6d 53 fe ff       	call   c0005ad8 <f_lseek>
c002076b:	83 c4 10             	add    esp,0x10
c002076e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020772:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020776:	85 c0                	test   eax,eax
c0020778:	75 07                	jne    c0020781 <FAT::seek(void*, unsigned long long)+0x4b>
c002077a:	b8 00 00 00 00       	mov    eax,0x0
c002077f:	eb 05                	jmp    c0020786 <FAT::seek(void*, unsigned long long)+0x50>
c0020781:	b8 01 00 00 00       	mov    eax,0x1
c0020786:	83 c4 2c             	add    esp,0x2c
c0020789:	c3                   	ret    

c002078a <fatWrapperReadDisk>:
c002078a:	83 ec 1c             	sub    esp,0x1c
c002078d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020791:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020795:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020799:	89 04 24             	mov    DWORD PTR [esp],eax
c002079c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207a0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207a9:	8b 04 85 60 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20a0]
c00207b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207b4:	83 ec 0c             	sub    esp,0xc
c00207b7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00207bb:	52                   	push   edx
c00207bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00207c4:	50                   	push   eax
c00207c5:	e8 3e 58 ff ff       	call   c0016008 <LogicalDisk::read(unsigned long long, int, void*)>
c00207ca:	83 c4 20             	add    esp,0x20
c00207cd:	83 c4 1c             	add    esp,0x1c
c00207d0:	c3                   	ret    

c00207d1 <fatWrapperWriteDisk>:
c00207d1:	83 ec 1c             	sub    esp,0x1c
c00207d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00207d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00207e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00207e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00207e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207eb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00207f0:	8b 04 85 60 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20a0]
c00207f7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00207fb:	83 ec 0c             	sub    esp,0xc
c00207fe:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020802:	52                   	push   edx
c0020803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020807:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002080b:	50                   	push   eax
c002080c:	e8 63 58 ff ff       	call   c0016074 <LogicalDisk::write(unsigned long long, int, void*)>
c0020811:	83 c4 20             	add    esp,0x20
c0020814:	83 c4 1c             	add    esp,0x1c
c0020817:	c3                   	ret    

c0020818 <fatWrapperIoctl>:
c0020818:	53                   	push   ebx
c0020819:	83 ec 28             	sub    esp,0x28
c002081c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020820:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020824:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020828:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002082c:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020831:	75 31                	jne    c0020864 <fatWrapperIoctl+0x4c>
c0020833:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020837:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002083b:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020840:	8b 04 85 60 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20a0]
c0020847:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002084d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020853:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020857:	66 89 02             	mov    WORD PTR [edx],ax
c002085a:	b8 00 00 00 00       	mov    eax,0x0
c002085f:	e9 b2 00 00 00       	jmp    c0020916 <fatWrapperIoctl+0xfe>
c0020864:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020869:	75 6a                	jne    c00208d5 <fatWrapperIoctl+0xbd>
c002086b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002086f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020873:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020878:	8b 04 85 60 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd20a0]
c002087f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020885:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002088b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020891:	89 c8                	mov    eax,ecx
c0020893:	89 da                	mov    edx,ebx
c0020895:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020899:	c1 e0 0a             	shl    eax,0xa
c002089c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00208a1:	8b 0c 8d 60 df 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd20a0]
c00208a8:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00208ae:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00208b4:	89 cb                	mov    ebx,ecx
c00208b6:	c1 fb 1f             	sar    ebx,0x1f
c00208b9:	53                   	push   ebx
c00208ba:	51                   	push   ecx
c00208bb:	52                   	push   edx
c00208bc:	50                   	push   eax
c00208bd:	e8 32 5e 00 00       	call   c00266f4 <__udivdi3>
c00208c2:	83 c4 10             	add    esp,0x10
c00208c5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00208c9:	89 01                	mov    DWORD PTR [ecx],eax
c00208cb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00208ce:	b8 00 00 00 00       	mov    eax,0x0
c00208d3:	eb 41                	jmp    c0020916 <fatWrapperIoctl+0xfe>
c00208d5:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00208da:	75 07                	jne    c00208e3 <fatWrapperIoctl+0xcb>
c00208dc:	b8 00 00 00 00       	mov    eax,0x0
c00208e1:	eb 33                	jmp    c0020916 <fatWrapperIoctl+0xfe>
c00208e3:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00208e8:	75 19                	jne    c0020903 <fatWrapperIoctl+0xeb>
c00208ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00208f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00208f6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00208fc:	b8 00 00 00 00       	mov    eax,0x0
c0020901:	eb 13                	jmp    c0020916 <fatWrapperIoctl+0xfe>
c0020903:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020908:	75 07                	jne    c0020911 <fatWrapperIoctl+0xf9>
c002090a:	b8 00 00 00 00       	mov    eax,0x0
c002090f:	eb 05                	jmp    c0020916 <fatWrapperIoctl+0xfe>
c0020911:	b8 04 00 00 00       	mov    eax,0x4
c0020916:	83 c4 28             	add    esp,0x28
c0020919:	5b                   	pop    ebx
c002091a:	c3                   	ret    
c002091b:	90                   	nop

c002091c <FAT::FAT()>:
c002091c:	83 ec 1c             	sub    esp,0x1c
c002091f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020923:	83 ec 0c             	sub    esp,0xc
c0020926:	50                   	push   eax
c0020927:	e8 92 20 ff ff       	call   c00129be <Filesystem::Filesystem()>
c002092c:	83 c4 10             	add    esp,0x10
c002092f:	ba 5c be 02 c0       	mov    edx,0xc002be5c
c0020934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020938:	89 10                	mov    DWORD PTR [eax],edx
c002093a:	c7 05 80 0f 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0030f80,0x0
c0020944:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002094c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020951:	7f 15                	jg     c0020968 <FAT::FAT()+0x4c>
c0020953:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020957:	c7 04 85 a0 0f 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcf060],0xffffffff
c0020962:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020966:	eb e4                	jmp    c002094c <FAT::FAT()+0x30>
c0020968:	90                   	nop
c0020969:	83 c4 1c             	add    esp,0x1c
c002096c:	c3                   	ret    
c002096d:	90                   	nop

c002096e <FAT::fixFilepath(char*)>:
c002096e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020972:	8a 00                	mov    al,BYTE PTR [eax]
c0020974:	3c 40                	cmp    al,0x40
c0020976:	7e 2c                	jle    c00209a4 <FAT::fixFilepath(char*)+0x36>
c0020978:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002097c:	8a 00                	mov    al,BYTE PTR [eax]
c002097e:	83 e8 41             	sub    eax,0x41
c0020981:	88 c2                	mov    dl,al
c0020983:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020987:	88 10                	mov    BYTE PTR [eax],dl
c0020989:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002098d:	8a 00                	mov    al,BYTE PTR [eax]
c002098f:	0f be c0             	movsx  eax,al
c0020992:	8b 04 85 a0 0f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf060]
c0020999:	83 c0 30             	add    eax,0x30
c002099c:	88 c2                	mov    dl,al
c002099e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209a2:	88 10                	mov    BYTE PTR [eax],dl
c00209a4:	90                   	nop
c00209a5:	c3                   	ret    

c00209a6 <FAT::open(char const*, void**, FileOpenMode)>:
c00209a6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00209ac:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00209b4:	74 0a                	je     c00209c0 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00209b6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00209be:	75 0a                	jne    c00209ca <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00209c0:	b8 04 00 00 00       	mov    eax,0x4
c00209c5:	e9 fd 00 00 00       	jmp    c0020ac7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00209ca:	83 ec 08             	sub    esp,0x8
c00209cd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209d4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00209d8:	50                   	push   eax
c00209d9:	e8 2e fe fd ff       	call   c000080c <strcpy>
c00209de:	83 c4 10             	add    esp,0x10
c00209e1:	83 ec 08             	sub    esp,0x8
c00209e4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00209e8:	50                   	push   eax
c00209e9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00209f0:	e8 79 ff ff ff       	call   c002096e <FAT::fixFilepath(char*)>
c00209f5:	83 c4 10             	add    esp,0x10
c00209f8:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020a00:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a07:	83 e0 01             	and    eax,0x1
c0020a0a:	74 08                	je     c0020a14 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020a0c:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020a14:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a1b:	83 e0 04             	and    eax,0x4
c0020a1e:	74 10                	je     c0020a30 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020a20:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020a28:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a30:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a37:	83 e0 02             	and    eax,0x2
c0020a3a:	74 08                	je     c0020a44 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020a3c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020a44:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a4b:	83 e0 08             	and    eax,0x8
c0020a4e:	74 08                	je     c0020a58 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020a50:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020a58:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020a5f:	83 e0 10             	and    eax,0x10
c0020a62:	74 08                	je     c0020a6c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020a64:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020a6c:	83 ec 0c             	sub    esp,0xc
c0020a6f:	68 50 02 00 00       	push   0x250
c0020a74:	e8 20 eb fe ff       	call   c000f599 <malloc>
c0020a79:	83 c4 10             	add    esp,0x10
c0020a7c:	89 c2                	mov    edx,eax
c0020a7e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a85:	89 10                	mov    DWORD PTR [eax],edx
c0020a87:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020a8f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0020a98:	83 ec 04             	sub    esp,0x4
c0020a9b:	52                   	push   edx
c0020a9c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020aa0:	52                   	push   edx
c0020aa1:	50                   	push   eax
c0020aa2:	e8 b0 44 fe ff       	call   c0004f57 <f_open>
c0020aa7:	83 c4 10             	add    esp,0x10
c0020aaa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020ab1:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020ab9:	74 07                	je     c0020ac2 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020abb:	b8 01 00 00 00       	mov    eax,0x1
c0020ac0:	eb 05                	jmp    c0020ac7 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020ac2:	b8 00 00 00 00       	mov    eax,0x0
c0020ac7:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020acd:	c3                   	ret    

c0020ace <FAT::openDir(char const*, void**)>:
c0020ace:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ad4:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020adc:	74 0a                	je     c0020ae8 <FAT::openDir(char const*, void**)+0x1a>
c0020ade:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020ae6:	75 07                	jne    c0020aef <FAT::openDir(char const*, void**)+0x21>
c0020ae8:	b8 04 00 00 00       	mov    eax,0x4
c0020aed:	eb 7d                	jmp    c0020b6c <FAT::openDir(char const*, void**)+0x9e>
c0020aef:	83 ec 08             	sub    esp,0x8
c0020af2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020af9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020afd:	50                   	push   eax
c0020afe:	e8 09 fd fd ff       	call   c000080c <strcpy>
c0020b03:	83 c4 10             	add    esp,0x10
c0020b06:	83 ec 08             	sub    esp,0x8
c0020b09:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020b0d:	50                   	push   eax
c0020b0e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020b15:	e8 54 fe ff ff       	call   c002096e <FAT::fixFilepath(char*)>
c0020b1a:	83 c4 10             	add    esp,0x10
c0020b1d:	83 ec 0c             	sub    esp,0xc
c0020b20:	6a 4c                	push   0x4c
c0020b22:	e8 72 ea fe ff       	call   c000f599 <malloc>
c0020b27:	83 c4 10             	add    esp,0x10
c0020b2a:	89 c2                	mov    edx,eax
c0020b2c:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b33:	89 10                	mov    DWORD PTR [eax],edx
c0020b35:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b3e:	83 ec 08             	sub    esp,0x8
c0020b41:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020b45:	52                   	push   edx
c0020b46:	50                   	push   eax
c0020b47:	e8 43 54 fe ff       	call   c0005f8f <f_opendir>
c0020b4c:	83 c4 10             	add    esp,0x10
c0020b4f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020b56:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020b5e:	74 07                	je     c0020b67 <FAT::openDir(char const*, void**)+0x99>
c0020b60:	b8 01 00 00 00       	mov    eax,0x1
c0020b65:	eb 05                	jmp    c0020b6c <FAT::openDir(char const*, void**)+0x9e>
c0020b67:	b8 00 00 00 00       	mov    eax,0x0
c0020b6c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020b72:	c3                   	ret    
c0020b73:	90                   	nop

c0020b74 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020b74:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020b7a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020b82:	75 0a                	jne    c0020b8e <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020b84:	b8 04 00 00 00       	mov    eax,0x4
c0020b89:	e9 c9 00 00 00       	jmp    c0020c57 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020b8e:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020b96:	75 0a                	jne    c0020ba2 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020b98:	b8 04 00 00 00       	mov    eax,0x4
c0020b9d:	e9 b5 00 00 00       	jmp    c0020c57 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ba2:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020baa:	75 0a                	jne    c0020bb6 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020bac:	b8 04 00 00 00       	mov    eax,0x4
c0020bb1:	e9 a1 00 00 00       	jmp    c0020c57 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020bb6:	83 ec 08             	sub    esp,0x8
c0020bb9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020bc0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020bc7:	50                   	push   eax
c0020bc8:	e8 3f fc fd ff       	call   c000080c <strcpy>
c0020bcd:	83 c4 10             	add    esp,0x10
c0020bd0:	83 ec 08             	sub    esp,0x8
c0020bd3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020bda:	50                   	push   eax
c0020bdb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020be2:	e8 87 fd ff ff       	call   c002096e <FAT::fixFilepath(char*)>
c0020be7:	83 c4 10             	add    esp,0x10
c0020bea:	83 ec 08             	sub    esp,0x8
c0020bed:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020bf1:	50                   	push   eax
c0020bf2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020bf9:	50                   	push   eax
c0020bfa:	e8 4f 55 fe ff       	call   c000614e <f_stat>
c0020bff:	83 c4 10             	add    esp,0x10
c0020c02:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020c09:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020c10:	85 c0                	test   eax,eax
c0020c12:	74 07                	je     c0020c1b <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020c14:	83 f8 04             	cmp    eax,0x4
c0020c17:	74 32                	je     c0020c4b <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020c19:	eb 37                	jmp    c0020c52 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020c1b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020c1f:	0f b6 c0             	movzx  eax,al
c0020c22:	83 e0 10             	and    eax,0x10
c0020c25:	0f 95 c2             	setne  dl
c0020c28:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020c2f:	88 10                	mov    BYTE PTR [eax],dl
c0020c31:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020c34:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020c38:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020c3f:	89 01                	mov    DWORD PTR [ecx],eax
c0020c41:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020c44:	b8 00 00 00 00       	mov    eax,0x0
c0020c49:	eb 0c                	jmp    c0020c57 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c4b:	b8 02 00 00 00       	mov    eax,0x2
c0020c50:	eb 05                	jmp    c0020c57 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020c52:	b8 01 00 00 00       	mov    eax,0x1
c0020c57:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020c5d:	c3                   	ret    

c0020c5e <FAT::unlink(char const*)>:
c0020c5e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c64:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c6c:	75 07                	jne    c0020c75 <FAT::unlink(char const*)+0x17>
c0020c6e:	b8 04 00 00 00       	mov    eax,0x4
c0020c73:	eb 5c                	jmp    c0020cd1 <FAT::unlink(char const*)+0x73>
c0020c75:	83 ec 08             	sub    esp,0x8
c0020c78:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c7f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020c83:	50                   	push   eax
c0020c84:	e8 83 fb fd ff       	call   c000080c <strcpy>
c0020c89:	83 c4 10             	add    esp,0x10
c0020c8c:	83 ec 08             	sub    esp,0x8
c0020c8f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c93:	50                   	push   eax
c0020c94:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c9b:	e8 ce fc ff ff       	call   c002096e <FAT::fixFilepath(char*)>
c0020ca0:	83 c4 10             	add    esp,0x10
c0020ca3:	83 ec 0c             	sub    esp,0xc
c0020ca6:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020caa:	50                   	push   eax
c0020cab:	e8 f0 57 fe ff       	call   c00064a0 <f_unlink>
c0020cb0:	83 c4 10             	add    esp,0x10
c0020cb3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020cba:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020cc1:	85 c0                	test   eax,eax
c0020cc3:	75 07                	jne    c0020ccc <FAT::unlink(char const*)+0x6e>
c0020cc5:	b8 00 00 00 00       	mov    eax,0x0
c0020cca:	eb 05                	jmp    c0020cd1 <FAT::unlink(char const*)+0x73>
c0020ccc:	b8 01 00 00 00       	mov    eax,0x1
c0020cd1:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020cd7:	c3                   	ret    

c0020cd8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020cd8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020cde:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020ce5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020cec:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020cf0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020cf4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020cfc:	75 0a                	jne    c0020d08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020cfe:	b8 04 00 00 00       	mov    eax,0x4
c0020d03:	e9 1c 01 00 00       	jmp    c0020e24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020d08:	83 ec 08             	sub    esp,0x8
c0020d0b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d12:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020d16:	50                   	push   eax
c0020d17:	e8 f0 fa fd ff       	call   c000080c <strcpy>
c0020d1c:	83 c4 10             	add    esp,0x10
c0020d1f:	83 ec 08             	sub    esp,0x8
c0020d22:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020d26:	50                   	push   eax
c0020d27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020d2e:	e8 3b fc ff ff       	call   c002096e <FAT::fixFilepath(char*)>
c0020d33:	83 c4 10             	add    esp,0x10
c0020d36:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020d3e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020d46:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d4b:	83 e0 01             	and    eax,0x1
c0020d4e:	74 08                	je     c0020d58 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020d50:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020d58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d5d:	83 e0 02             	and    eax,0x2
c0020d60:	74 08                	je     c0020d6a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020d62:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020d6a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d6f:	83 e0 04             	and    eax,0x4
c0020d72:	74 08                	je     c0020d7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020d74:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020d7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020d81:	83 e0 08             	and    eax,0x8
c0020d84:	74 08                	je     c0020d8e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020d86:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020d8e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020d93:	83 e0 01             	and    eax,0x1
c0020d96:	74 08                	je     c0020da0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0020d98:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020da0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020da5:	83 e0 02             	and    eax,0x2
c0020da8:	74 08                	je     c0020db2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0020daa:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020db2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020db7:	83 e0 04             	and    eax,0x4
c0020dba:	74 08                	je     c0020dc4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0020dbc:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020dc4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020dc9:	83 e0 08             	and    eax,0x8
c0020dcc:	74 08                	je     c0020dd6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020dce:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020dd6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0020ddd:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0020de4:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0020dec:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0020df4:	83 ec 04             	sub    esp,0x4
c0020df7:	52                   	push   edx
c0020df8:	50                   	push   eax
c0020df9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020dfd:	50                   	push   eax
c0020dfe:	e8 3f 5d fe ff       	call   c0006b42 <f_chmod>
c0020e03:	83 c4 10             	add    esp,0x10
c0020e06:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0020e0d:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0020e14:	85 c0                	test   eax,eax
c0020e16:	75 07                	jne    c0020e1f <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0020e18:	b8 00 00 00 00       	mov    eax,0x0
c0020e1d:	eb 05                	jmp    c0020e24 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020e1f:	b8 01 00 00 00       	mov    eax,0x1
c0020e24:	81 c4 2c 01 00 00    	add    esp,0x12c
c0020e2a:	c3                   	ret    
c0020e2b:	90                   	nop

c0020e2c <FAT::rename(char const*, char const*)>:
c0020e2c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0020e32:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0020e3a:	74 0a                	je     c0020e46 <FAT::rename(char const*, char const*)+0x1a>
c0020e3c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020e44:	75 0a                	jne    c0020e50 <FAT::rename(char const*, char const*)+0x24>
c0020e46:	b8 04 00 00 00       	mov    eax,0x4
c0020e4b:	e9 98 00 00 00       	jmp    c0020ee8 <FAT::rename(char const*, char const*)+0xbc>
c0020e50:	83 ec 08             	sub    esp,0x8
c0020e53:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e5a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020e61:	50                   	push   eax
c0020e62:	e8 a5 f9 fd ff       	call   c000080c <strcpy>
c0020e67:	83 c4 10             	add    esp,0x10
c0020e6a:	83 ec 08             	sub    esp,0x8
c0020e6d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020e74:	50                   	push   eax
c0020e75:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020e7c:	e8 ed fa ff ff       	call   c002096e <FAT::fixFilepath(char*)>
c0020e81:	83 c4 10             	add    esp,0x10
c0020e84:	83 ec 08             	sub    esp,0x8
c0020e87:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020e8e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020e92:	50                   	push   eax
c0020e93:	e8 74 f9 fd ff       	call   c000080c <strcpy>
c0020e98:	83 c4 10             	add    esp,0x10
c0020e9b:	83 ec 08             	sub    esp,0x8
c0020e9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ea2:	50                   	push   eax
c0020ea3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0020eaa:	e8 bf fa ff ff       	call   c002096e <FAT::fixFilepath(char*)>
c0020eaf:	83 c4 10             	add    esp,0x10
c0020eb2:	83 ec 08             	sub    esp,0x8
c0020eb5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020eb9:	50                   	push   eax
c0020eba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020ec1:	50                   	push   eax
c0020ec2:	e8 88 59 fe ff       	call   c000684f <f_rename>
c0020ec7:	83 c4 10             	add    esp,0x10
c0020eca:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020ed1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0020ed8:	85 c0                	test   eax,eax
c0020eda:	75 07                	jne    c0020ee3 <FAT::rename(char const*, char const*)+0xb7>
c0020edc:	b8 00 00 00 00       	mov    eax,0x0
c0020ee1:	eb 05                	jmp    c0020ee8 <FAT::rename(char const*, char const*)+0xbc>
c0020ee3:	b8 01 00 00 00       	mov    eax,0x1
c0020ee8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0020eee:	c3                   	ret    
c0020eef:	90                   	nop

c0020ef0 <FAT::mkdir(char const*)>:
c0020ef0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ef6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020efe:	75 07                	jne    c0020f07 <FAT::mkdir(char const*)+0x17>
c0020f00:	b8 04 00 00 00       	mov    eax,0x4
c0020f05:	eb 5c                	jmp    c0020f63 <FAT::mkdir(char const*)+0x73>
c0020f07:	83 ec 08             	sub    esp,0x8
c0020f0a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f11:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f15:	50                   	push   eax
c0020f16:	e8 f1 f8 fd ff       	call   c000080c <strcpy>
c0020f1b:	83 c4 10             	add    esp,0x10
c0020f1e:	83 ec 08             	sub    esp,0x8
c0020f21:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020f25:	50                   	push   eax
c0020f26:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f2d:	e8 3c fa ff ff       	call   c002096e <FAT::fixFilepath(char*)>
c0020f32:	83 c4 10             	add    esp,0x10
c0020f35:	83 ec 0c             	sub    esp,0xc
c0020f38:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f3c:	50                   	push   eax
c0020f3d:	e8 e1 56 fe ff       	call   c0006623 <f_mkdir>
c0020f42:	83 c4 10             	add    esp,0x10
c0020f45:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f4c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f53:	85 c0                	test   eax,eax
c0020f55:	75 07                	jne    c0020f5e <FAT::mkdir(char const*)+0x6e>
c0020f57:	b8 00 00 00 00       	mov    eax,0x0
c0020f5c:	eb 05                	jmp    c0020f63 <FAT::mkdir(char const*)+0x73>
c0020f5e:	b8 01 00 00 00       	mov    eax,0x1
c0020f63:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f69:	c3                   	ret    

c0020f6a <FAT::exists(char const*)>:
c0020f6a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020f70:	83 ec 08             	sub    esp,0x8
c0020f73:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f7a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020f7e:	50                   	push   eax
c0020f7f:	e8 88 f8 fd ff       	call   c000080c <strcpy>
c0020f84:	83 c4 10             	add    esp,0x10
c0020f87:	83 ec 08             	sub    esp,0x8
c0020f8a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f8e:	50                   	push   eax
c0020f8f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020f96:	e8 d3 f9 ff ff       	call   c002096e <FAT::fixFilepath(char*)>
c0020f9b:	83 c4 10             	add    esp,0x10
c0020f9e:	83 ec 08             	sub    esp,0x8
c0020fa1:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0020fa8:	50                   	push   eax
c0020fa9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020fad:	50                   	push   eax
c0020fae:	e8 9b 51 fe ff       	call   c000614e <f_stat>
c0020fb3:	83 c4 10             	add    esp,0x10
c0020fb6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020fbd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020fc4:	85 c0                	test   eax,eax
c0020fc6:	75 04                	jne    c0020fcc <FAT::exists(char const*)+0x62>
c0020fc8:	b0 01                	mov    al,0x1
c0020fca:	eb 02                	jmp    c0020fce <FAT::exists(char const*)+0x64>
c0020fcc:	b0 00                	mov    al,0x0
c0020fce:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020fd4:	c3                   	ret    
c0020fd5:	90                   	nop

c0020fd6 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020fd6:	b8 08 00 00 00       	mov    eax,0x8
c0020fdb:	c3                   	ret    

c0020fdc <ISO9660::seek(void*, unsigned long long)>:
c0020fdc:	53                   	push   ebx
c0020fdd:	b8 04 00 00 00       	mov    eax,0x4
c0020fe2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020fe6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020fea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0020fee:	85 d2                	test   edx,edx
c0020ff0:	74 17                	je     c0021009 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0020ff2:	89 c8                	mov    eax,ecx
c0020ff4:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0020ff7:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0020ffa:	b8 01 00 00 00       	mov    eax,0x1
c0020fff:	73 08                	jae    c0021009 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021001:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021004:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021007:	31 c0                	xor    eax,eax
c0021009:	5b                   	pop    ebx
c002100a:	c3                   	ret    
c002100b:	90                   	nop

c002100c <ISO9660::tell(void*, unsigned long long*)>:
c002100c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021010:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021014:	85 d2                	test   edx,edx
c0021016:	74 12                	je     c002102a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021018:	85 c0                	test   eax,eax
c002101a:	74 0e                	je     c002102a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002101c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c002101f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021022:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021025:	89 10                	mov    DWORD PTR [eax],edx
c0021027:	31 c0                	xor    eax,eax
c0021029:	c3                   	ret    
c002102a:	b8 04 00 00 00       	mov    eax,0x4
c002102f:	c3                   	ret    

c0021030 <ISO9660::getName()>:
c0021030:	b8 bc be 02 c0       	mov    eax,0xc002bebc
c0021035:	c3                   	ret    

c0021036 <ISO9660::stat(void*, unsigned long long*)>:
c0021036:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002103a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002103e:	85 d2                	test   edx,edx
c0021040:	74 12                	je     c0021054 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021042:	85 c0                	test   eax,eax
c0021044:	74 0e                	je     c0021054 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021046:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021049:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002104c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002104f:	89 10                	mov    DWORD PTR [eax],edx
c0021051:	31 c0                	xor    eax,eax
c0021053:	c3                   	ret    
c0021054:	b8 04 00 00 00       	mov    eax,0x4
c0021059:	c3                   	ret    

c002105a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002105a:	b8 01 00 00 00       	mov    eax,0x1
c002105f:	c3                   	ret    

c0021060 <ISO9660::unlink(char const*)>:
c0021060:	b8 01 00 00 00       	mov    eax,0x1
c0021065:	c3                   	ret    

c0021066 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021066:	b8 01 00 00 00       	mov    eax,0x1
c002106b:	c3                   	ret    

c002106c <ISO9660::rename(char const*, char const*)>:
c002106c:	b8 01 00 00 00       	mov    eax,0x1
c0021071:	c3                   	ret    

c0021072 <ISO9660::mkdir(char const*)>:
c0021072:	b8 01 00 00 00       	mov    eax,0x1
c0021077:	c3                   	ret    

c0021078 <ISO9660::close(void*)>:
c0021078:	83 ec 0c             	sub    esp,0xc
c002107b:	b8 04 00 00 00       	mov    eax,0x4
c0021080:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021084:	85 d2                	test   edx,edx
c0021086:	74 0e                	je     c0021096 <ISO9660::close(void*)+0x1e>
c0021088:	83 ec 0c             	sub    esp,0xc
c002108b:	52                   	push   edx
c002108c:	e8 18 e5 fe ff       	call   c000f5a9 <free>
c0021091:	83 c4 10             	add    esp,0x10
c0021094:	31 c0                	xor    eax,eax
c0021096:	83 c4 0c             	add    esp,0xc
c0021099:	c3                   	ret    

c002109a <ISO9660::closeDir(void*)>:
c002109a:	83 ec 0c             	sub    esp,0xc
c002109d:	b8 04 00 00 00       	mov    eax,0x4
c00210a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210a6:	85 d2                	test   edx,edx
c00210a8:	74 0e                	je     c00210b8 <ISO9660::closeDir(void*)+0x1e>
c00210aa:	83 ec 0c             	sub    esp,0xc
c00210ad:	52                   	push   edx
c00210ae:	e8 f6 e4 fe ff       	call   c000f5a9 <free>
c00210b3:	83 c4 10             	add    esp,0x10
c00210b6:	31 c0                	xor    eax,eax
c00210b8:	83 c4 0c             	add    esp,0xc
c00210bb:	c3                   	ret    

c00210bc <ISO9660::~ISO9660()>:
c00210bc:	83 ec 0c             	sub    esp,0xc
c00210bf:	ba e0 be 02 c0       	mov    edx,0xc002bee0
c00210c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210c8:	89 10                	mov    DWORD PTR [eax],edx
c00210ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210ce:	83 ec 0c             	sub    esp,0xc
c00210d1:	50                   	push   eax
c00210d2:	e8 0b 19 ff ff       	call   c00129e2 <Filesystem::~Filesystem()>
c00210d7:	83 c4 10             	add    esp,0x10
c00210da:	90                   	nop
c00210db:	83 c4 0c             	add    esp,0xc
c00210de:	c3                   	ret    
c00210df:	90                   	nop

c00210e0 <ISO9660::~ISO9660()>:
c00210e0:	83 ec 0c             	sub    esp,0xc
c00210e3:	83 ec 0c             	sub    esp,0xc
c00210e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210ea:	e8 cd ff ff ff       	call   c00210bc <ISO9660::~ISO9660()>
c00210ef:	83 c4 10             	add    esp,0x10
c00210f2:	83 ec 08             	sub    esp,0x8
c00210f5:	6a 08                	push   0x8
c00210f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00210fb:	e8 db 14 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0021100:	83 c4 10             	add    esp,0x10
c0021103:	83 c4 0c             	add    esp,0xc
c0021106:	c3                   	ret    

c0021107 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021107:	55                   	push   ebp
c0021108:	31 c9                	xor    ecx,ecx
c002110a:	57                   	push   edi
c002110b:	56                   	push   esi
c002110c:	53                   	push   ebx
c002110d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021111:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021115:	89 eb                	mov    ebx,ebp
c0021117:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002111b:	39 ce                	cmp    esi,ecx
c002111d:	7e 17                	jle    c0021136 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c002111f:	31 d2                	xor    edx,edx
c0021121:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021125:	7d 13                	jge    c002113a <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021127:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002112b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002112e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021131:	75 0d                	jne    c0021140 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021133:	42                   	inc    edx
c0021134:	eb eb                	jmp    c0021121 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021136:	31 c0                	xor    eax,eax
c0021138:	eb 0a                	jmp    c0021144 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002113a:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c002113e:	eb 04                	jmp    c0021144 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021140:	41                   	inc    ecx
c0021141:	43                   	inc    ebx
c0021142:	eb d7                	jmp    c002111b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021144:	5b                   	pop    ebx
c0021145:	5e                   	pop    esi
c0021146:	5f                   	pop    edi
c0021147:	5d                   	pop    ebp
c0021148:	c3                   	ret    

c0021149 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021149:	57                   	push   edi
c002114a:	56                   	push   esi
c002114b:	53                   	push   ebx
c002114c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021150:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021154:	39 0d 80 10 03 c0    	cmp    DWORD PTR ds:0xc0031080,ecx
c002115a:	75 08                	jne    c0021164 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c002115c:	38 05 f4 ce 02 c0    	cmp    BYTE PTR ds:0xc002cef4,al
c0021162:	74 2b                	je     c002118f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021164:	83 ec 0c             	sub    esp,0xc
c0021167:	a2 f4 ce 02 c0       	mov    ds:0xc002cef4,al
c002116c:	68 a0 10 03 c0       	push   0xc00310a0
c0021171:	0f be c0             	movsx  eax,al
c0021174:	6a 01                	push   0x1
c0021176:	89 0d 80 10 03 c0    	mov    DWORD PTR ds:0xc0031080,ecx
c002117c:	31 db                	xor    ebx,ebx
c002117e:	53                   	push   ebx
c002117f:	51                   	push   ecx
c0021180:	ff 34 85 5c de 02 c0 	push   DWORD PTR [eax*4-0x3ffd21a4]
c0021187:	e8 7c 4e ff ff       	call   c0016008 <LogicalDisk::read(unsigned long long, int, void*)>
c002118c:	83 c4 20             	add    esp,0x20
c002118f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021193:	be a0 10 03 c0       	mov    esi,0xc00310a0
c0021198:	b9 00 08 00 00       	mov    ecx,0x800
c002119d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002119f:	5b                   	pop    ebx
c00211a0:	5e                   	pop    esi
c00211a1:	5f                   	pop    edi
c00211a2:	c3                   	ret    
c00211a3:	90                   	nop

c00211a4 <ISO9660::tryMount(LogicalDisk*, int)>:
c00211a4:	81 ec 10 08 00 00    	sub    esp,0x810
c00211aa:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00211b1:	83 c0 41             	add    eax,0x41
c00211b4:	0f be c0             	movsx  eax,al
c00211b7:	50                   	push   eax
c00211b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211bc:	50                   	push   eax
c00211bd:	6a 10                	push   0x10
c00211bf:	e8 85 ff ff ff       	call   c0021149 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00211c4:	83 c4 10             	add    esp,0x10
c00211c7:	31 c0                	xor    eax,eax
c00211c9:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00211ce:	75 1d                	jne    c00211ed <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211d0:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00211d5:	75 16                	jne    c00211ed <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211d7:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00211dc:	75 0f                	jne    c00211ed <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211de:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00211e3:	75 08                	jne    c00211ed <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00211e5:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00211ea:	0f 94 c0             	sete   al
c00211ed:	81 c4 0c 08 00 00    	add    esp,0x80c
c00211f3:	c3                   	ret    

c00211f4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00211f4:	55                   	push   ebp
c00211f5:	57                   	push   edi
c00211f6:	56                   	push   esi
c00211f7:	53                   	push   ebx
c00211f8:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00211fe:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021205:	85 ed                	test   ebp,ebp
c0021207:	0f 84 da 01 00 00    	je     c00213e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002120d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021215:	0f 84 cc 01 00 00    	je     c00213e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c002121b:	b8 01 00 00 00       	mov    eax,0x1
c0021220:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021224:	0f 85 c2 01 00 00    	jne    c00213ec <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c002122a:	31 d2                	xor    edx,edx
c002122c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021233:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021236:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021239:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c002123c:	89 04 24             	mov    DWORD PTR [esp],eax
c002123f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021243:	01 c8                	add    eax,ecx
c0021245:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021248:	11 da                	adc    edx,ebx
c002124a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c002124e:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021252:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021256:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002125a:	19 d7                	sbb    edi,edx
c002125c:	72 11                	jb     c002126f <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c002125e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021261:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021269:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002126d:	eb 0c                	jmp    c002127b <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002126f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021273:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021277:	29 ce                	sub    esi,ecx
c0021279:	19 df                	sbb    edi,ebx
c002127b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002127e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021281:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021285:	c1 e0 0b             	shl    eax,0xb
c0021288:	01 c8                	add    eax,ecx
c002128a:	11 da                	adc    edx,ebx
c002128c:	89 04 24             	mov    DWORD PTR [esp],eax
c002128f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021293:	51                   	push   ecx
c0021294:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021298:	50                   	push   eax
c0021299:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002129d:	53                   	push   ebx
c002129e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00212a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212a6:	0f ac d0 0b          	shrd   eax,edx,0xb
c00212aa:	50                   	push   eax
c00212ab:	e8 99 fe ff ff       	call   c0021149 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00212b0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00212b3:	b8 00 08 00 00       	mov    eax,0x800
c00212b8:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00212be:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c00212c2:	29 d0                	sub    eax,edx
c00212c4:	83 c4 10             	add    esp,0x10
c00212c7:	89 f9                	mov    ecx,edi
c00212c9:	39 c6                	cmp    esi,eax
c00212cb:	83 d9 00             	sbb    ecx,0x0
c00212ce:	7d 1b                	jge    c00212eb <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c00212d0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00212d5:	75 12                	jne    c00212e9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c00212d7:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00212de:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212e4:	e9 fa 00 00 00       	jmp    c00213e3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00212e9:	89 f0                	mov    eax,esi
c00212eb:	01 d3                	add    ebx,edx
c00212ed:	31 d2                	xor    edx,edx
c00212ef:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00212f3:	39 c2                	cmp    edx,eax
c00212f5:	7d 14                	jge    c002130b <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00212f7:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00212fe:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021302:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021305:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021308:	42                   	inc    edx
c0021309:	eb e8                	jmp    c00212f3 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c002130b:	89 c2                	mov    edx,eax
c002130d:	85 c0                	test   eax,eax
c002130f:	79 02                	jns    c0021313 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021311:	31 d2                	xor    edx,edx
c0021313:	01 c2                	add    edx,eax
c0021315:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021318:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c002131f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021323:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021327:	99                   	cdq    
c0021328:	01 c1                	add    ecx,eax
c002132a:	11 d3                	adc    ebx,edx
c002132c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021330:	29 c6                	sub    esi,eax
c0021332:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021336:	19 d7                	sbb    edi,edx
c0021338:	89 34 24             	mov    DWORD PTR [esp],esi
c002133b:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c002133f:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021344:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021347:	b8 00 00 00 00       	mov    eax,0x0
c002134c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021350:	7d 43                	jge    c0021395 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021352:	52                   	push   edx
c0021353:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021357:	50                   	push   eax
c0021358:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002135c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021360:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021364:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021368:	50                   	push   eax
c0021369:	e8 db fd ff ff       	call   c0021149 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002136e:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021376:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c002137b:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021383:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002138b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021390:	83 c4 10             	add    esp,0x10
c0021393:	eb aa                	jmp    c002133f <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021395:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021399:	0b 04 24             	or     eax,DWORD PTR [esp]
c002139c:	74 2a                	je     c00213c8 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c002139e:	50                   	push   eax
c002139f:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00213a3:	50                   	push   eax
c00213a4:	8d 74 24 28          	lea    esi,[esp+0x28]
c00213a8:	56                   	push   esi
c00213a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00213ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00213b1:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c00213b5:	51                   	push   ecx
c00213b6:	e8 8e fd ff ff       	call   c0021149 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00213bb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00213bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00213c5:	83 c4 10             	add    esp,0x10
c00213c8:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00213cf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00213d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00213d7:	89 18                	mov    DWORD PTR [eax],ebx
c00213d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213dd:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00213e0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00213e3:	31 c0                	xor    eax,eax
c00213e5:	eb 05                	jmp    c00213ec <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00213e7:	b8 04 00 00 00       	mov    eax,0x4
c00213ec:	81 c4 2c 08 00 00    	add    esp,0x82c
c00213f2:	5b                   	pop    ebx
c00213f3:	5e                   	pop    esi
c00213f4:	5f                   	pop    edi
c00213f5:	5d                   	pop    ebp
c00213f6:	c3                   	ret    
c00213f7:	90                   	nop

c00213f8 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00213f8:	55                   	push   ebp
c00213f9:	57                   	push   edi
c00213fa:	56                   	push   esi
c00213fb:	53                   	push   ebx
c00213fc:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021402:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021409:	85 ed                	test   ebp,ebp
c002140b:	0f 84 51 02 00 00    	je     c0021662 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021411:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021419:	0f 84 43 02 00 00    	je     c0021662 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c002141f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021422:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021425:	75 0a                	jne    c0021431 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021427:	b8 07 00 00 00       	mov    eax,0x7
c002142c:	e9 36 02 00 00       	jmp    c0021667 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021431:	50                   	push   eax
c0021432:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021436:	50                   	push   eax
c0021437:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002143e:	53                   	push   ebx
c002143f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021442:	c1 e0 0b             	shl    eax,0xb
c0021445:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021448:	c1 e8 0b             	shr    eax,0xb
c002144b:	50                   	push   eax
c002144c:	e8 f8 fc ff ff       	call   c0021149 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021451:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021454:	83 c4 10             	add    esp,0x10
c0021457:	89 c1                	mov    ecx,eax
c0021459:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002145c:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021462:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021465:	84 db                	test   bl,bl
c0021467:	0f 85 8b 00 00 00    	jne    c00214f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c002146d:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021473:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021476:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002147c:	29 c6                	sub    esi,eax
c002147e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021482:	89 f3                	mov    ebx,esi
c0021484:	89 f1                	mov    ecx,esi
c0021486:	c1 fb 1f             	sar    ebx,0x1f
c0021489:	01 f0                	add    eax,esi
c002148b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002148e:	11 da                	adc    edx,ebx
c0021490:	89 04 24             	mov    DWORD PTR [esp],eax
c0021493:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021497:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002149a:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c002149d:	89 d8                	mov    eax,ebx
c002149f:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c00214a3:	ba 00 00 00 00       	mov    edx,0x0
c00214a8:	19 f8                	sbb    eax,edi
c00214aa:	b8 00 00 00 00       	mov    eax,0x0
c00214af:	73 08                	jae    c00214b9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c00214b1:	89 f0                	mov    eax,esi
c00214b3:	89 fa                	mov    edx,edi
c00214b5:	29 c8                	sub    eax,ecx
c00214b7:	19 da                	sbb    edx,ebx
c00214b9:	89 d7                	mov    edi,edx
c00214bb:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00214be:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00214c1:	09 c7                	or     edi,eax
c00214c3:	0f 84 5e ff ff ff    	je     c0021427 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c00214c9:	57                   	push   edi
c00214ca:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00214ce:	50                   	push   eax
c00214cf:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00214d6:	53                   	push   ebx
c00214d7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214da:	c1 e0 0b             	shl    eax,0xb
c00214dd:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00214e1:	c1 e8 0b             	shr    eax,0xb
c00214e4:	50                   	push   eax
c00214e5:	e8 5f fc ff ff       	call   c0021149 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00214ea:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00214ed:	83 c4 10             	add    esp,0x10
c00214f0:	25 ff 07 00 00       	and    eax,0x7ff
c00214f5:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00214f8:	31 ff                	xor    edi,edi
c00214fa:	56                   	push   esi
c00214fb:	6a 28                	push   0x28
c00214fd:	6a 00                	push   0x0
c00214ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021503:	50                   	push   eax
c0021504:	e8 47 f2 fd ff       	call   c0000750 <memset>
c0021509:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002150c:	25 ff 07 00 00       	and    eax,0x7ff
c0021511:	89 c6                	mov    esi,eax
c0021513:	83 c6 21             	add    esi,0x21
c0021516:	83 d7 00             	adc    edi,0x0
c0021519:	83 c4 10             	add    esp,0x10
c002151c:	31 c9                	xor    ecx,ecx
c002151e:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021525:	83 f9 28             	cmp    ecx,0x28
c0021528:	88 04 24             	mov    BYTE PTR [esp],al
c002152b:	0f 94 c2             	sete   dl
c002152e:	88 d0                	mov    al,dl
c0021530:	ba ff 07 00 00       	mov    edx,0x7ff
c0021535:	39 f2                	cmp    edx,esi
c0021537:	ba 00 00 00 00       	mov    edx,0x0
c002153c:	19 fa                	sbb    edx,edi
c002153e:	0f 92 c2             	setb   dl
c0021541:	09 c2                	or     edx,eax
c0021543:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021547:	0f 94 c0             	sete   al
c002154a:	08 d0                	or     al,dl
c002154c:	75 16                	jne    c0021564 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002154e:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021552:	74 10                	je     c0021564 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021554:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021557:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c002155b:	41                   	inc    ecx
c002155c:	83 c6 01             	add    esi,0x1
c002155f:	83 d7 00             	adc    edi,0x0
c0021562:	eb ba                	jmp    c002151e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021564:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c002156b:	83 ec 0c             	sub    esp,0xc
c002156e:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021572:	56                   	push   esi
c0021573:	e8 f4 f1 fd ff       	call   c000076c <strlen>
c0021578:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c002157f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021583:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c002158b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002158e:	5a                   	pop    edx
c002158f:	25 ff 07 00 00       	and    eax,0x7ff
c0021594:	59                   	pop    ecx
c0021595:	01 f8                	add    eax,edi
c0021597:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002159d:	83 e0 02             	and    eax,0x2
c00215a0:	3c 01                	cmp    al,0x1
c00215a2:	19 c0                	sbb    eax,eax
c00215a4:	83 c0 02             	add    eax,0x2
c00215a7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00215ab:	56                   	push   esi
c00215ac:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00215b0:	50                   	push   eax
c00215b1:	e8 56 f2 fd ff       	call   c000080c <strcpy>
c00215b6:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c00215ba:	83 c4 10             	add    esp,0x10
c00215bd:	84 c0                	test   al,al
c00215bf:	75 21                	jne    c00215e2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c00215c1:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c00215c9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215d1:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215d9:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00215e0:	eb 28                	jmp    c002160a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00215e2:	fe c8                	dec    al
c00215e4:	75 24                	jne    c002160a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00215e6:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00215ee:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00215f6:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00215fe:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021605:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c002160a:	8d 74 24 40          	lea    esi,[esp+0x40]
c002160e:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021615:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c002161c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002161e:	0f b6 f3             	movzx  esi,bl
c0021621:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021628:	31 db                	xor    ebx,ebx
c002162a:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021630:	89 df                	mov    edi,ebx
c0021632:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021635:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021638:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c002163b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002163e:	39 c6                	cmp    esi,eax
c0021640:	19 d7                	sbb    edi,edx
c0021642:	72 10                	jb     c0021654 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021644:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c002164b:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021652:	eb 0a                	jmp    c002165e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021654:	29 f0                	sub    eax,esi
c0021656:	19 da                	sbb    edx,ebx
c0021658:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c002165b:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c002165e:	31 c0                	xor    eax,eax
c0021660:	eb 05                	jmp    c0021667 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021662:	b8 04 00 00 00       	mov    eax,0x4
c0021667:	81 c4 5c 09 00 00    	add    esp,0x95c
c002166d:	5b                   	pop    ebx
c002166e:	5e                   	pop    esi
c002166f:	5f                   	pop    edi
c0021670:	5d                   	pop    ebp
c0021671:	c3                   	ret    

c0021672 <readRoot(unsigned int*, unsigned int*, char)>:
c0021672:	57                   	push   edi
c0021673:	56                   	push   esi
c0021674:	81 ec 38 08 00 00    	sub    esp,0x838
c002167a:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021682:	50                   	push   eax
c0021683:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021687:	50                   	push   eax
c0021688:	6a 10                	push   0x10
c002168a:	e8 ba fa ff ff       	call   c0021149 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002168f:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021696:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c002169a:	b9 22 00 00 00       	mov    ecx,0x22
c002169f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00216a1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00216a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00216ac:	89 10                	mov    DWORD PTR [eax],edx
c00216ae:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00216b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00216b9:	89 10                	mov    DWORD PTR [eax],edx
c00216bb:	81 c4 44 08 00 00    	add    esp,0x844
c00216c1:	b0 01                	mov    al,0x1
c00216c3:	5e                   	pop    esi
c00216c4:	5f                   	pop    edi
c00216c5:	c3                   	ret    

c00216c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c00216c6:	55                   	push   ebp
c00216c7:	57                   	push   edi
c00216c8:	56                   	push   esi
c00216c9:	53                   	push   ebx
c00216ca:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216d0:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c00216d7:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00216de:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00216e2:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00216e6:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00216ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00216ee:	75 03                	jne    c00216f3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00216f0:	83 c3 02             	add    ebx,0x2
c00216f3:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00216f6:	75 03                	jne    c00216fb <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00216f8:	43                   	inc    ebx
c00216f9:	eb f8                	jmp    c00216f3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00216fb:	51                   	push   ecx
c00216fc:	68 00 01 00 00       	push   0x100
c0021701:	6a 00                	push   0x0
c0021703:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021707:	50                   	push   eax
c0021708:	e8 43 f0 fd ff       	call   c0000750 <memset>
c002170d:	83 c4 10             	add    esp,0x10
c0021710:	31 d2                	xor    edx,edx
c0021712:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021715:	84 c0                	test   al,al
c0021717:	74 21                	je     c002173a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021719:	3c 2f                	cmp    al,0x2f
c002171b:	75 0b                	jne    c0021728 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c002171d:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021721:	bd 01 00 00 00       	mov    ebp,0x1
c0021726:	eb 14                	jmp    c002173c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021728:	8d 48 9f             	lea    ecx,[eax-0x61]
c002172b:	80 f9 19             	cmp    cl,0x19
c002172e:	77 03                	ja     c0021733 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021730:	83 e8 20             	sub    eax,0x20
c0021733:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021737:	42                   	inc    edx
c0021738:	eb d8                	jmp    c0021712 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c002173a:	31 ed                	xor    ebp,ebp
c002173c:	83 ec 0c             	sub    esp,0xc
c002173f:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021746:	e8 4e de fe ff       	call   c000f599 <malloc>
c002174b:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021752:	89 c6                	mov    esi,eax
c0021754:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c002175a:	c1 ef 0b             	shr    edi,0xb
c002175d:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021764:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021768:	83 c4 10             	add    esp,0x10
c002176b:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021770:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021774:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c002177b:	74 28                	je     c00217a5 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c002177d:	52                   	push   edx
c002177e:	57                   	push   edi
c002177f:	50                   	push   eax
c0021780:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021784:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c002178b:	e8 b9 f9 ff ff       	call   c0021149 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021794:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c002179b:	05 00 08 00 00       	add    eax,0x800
c00217a0:	83 c4 10             	add    esp,0x10
c00217a3:	eb cb                	jmp    c0021770 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c00217a5:	83 ec 0c             	sub    esp,0xc
c00217a8:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00217ac:	57                   	push   edi
c00217ad:	e8 ba ef fd ff       	call   c000076c <strlen>
c00217b2:	50                   	push   eax
c00217b3:	57                   	push   edi
c00217b4:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c00217bb:	56                   	push   esi
c00217bc:	e8 46 f9 ff ff       	call   c0021107 <__memmem(unsigned char*, int, unsigned char*, int)>
c00217c1:	83 c4 20             	add    esp,0x20
c00217c4:	85 c0                	test   eax,eax
c00217c6:	75 13                	jne    c00217db <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c00217c8:	83 ec 0c             	sub    esp,0xc
c00217cb:	56                   	push   esi
c00217cc:	e8 d8 dd fe ff       	call   c000f5a9 <free>
c00217d1:	83 c4 10             	add    esp,0x10
c00217d4:	31 c0                	xor    eax,eax
c00217d6:	e9 b3 00 00 00       	jmp    c002188e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00217db:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00217df:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00217e3:	c1 e7 08             	shl    edi,0x8
c00217e6:	c1 e2 10             	shl    edx,0x10
c00217e9:	09 d7                	or     edi,edx
c00217eb:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00217ef:	09 d7                	or     edi,edx
c00217f1:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00217f5:	c1 e2 18             	shl    edx,0x18
c00217f8:	09 d7                	or     edi,edx
c00217fa:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00217fe:	89 d1                	mov    ecx,edx
c0021800:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021804:	c1 e1 08             	shl    ecx,0x8
c0021807:	c1 e2 10             	shl    edx,0x10
c002180a:	09 ca                	or     edx,ecx
c002180c:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021810:	09 ca                	or     edx,ecx
c0021812:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021816:	c1 e1 18             	shl    ecx,0x18
c0021819:	09 ca                	or     edx,ecx
c002181b:	89 e9                	mov    ecx,ebp
c002181d:	84 c9                	test   cl,cl
c002181f:	74 3c                	je     c002185d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021821:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021825:	83 ec 0c             	sub    esp,0xc
c0021828:	56                   	push   esi
c0021829:	e8 7b dd fe ff       	call   c000f5a9 <free>
c002182e:	83 c4 0c             	add    esp,0xc
c0021831:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021838:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c002183d:	50                   	push   eax
c002183e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021845:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002184c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021850:	52                   	push   edx
c0021851:	57                   	push   edi
c0021852:	53                   	push   ebx
c0021853:	e8 6e fe ff ff       	call   c00216c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021858:	83 c4 20             	add    esp,0x20
c002185b:	eb 31                	jmp    c002188e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c002185d:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021860:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021867:	d0 e8                	shr    al,1
c0021869:	89 3b                	mov    DWORD PTR [ebx],edi
c002186b:	83 e0 01             	and    eax,0x1
c002186e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021875:	83 ec 0c             	sub    esp,0xc
c0021878:	89 13                	mov    DWORD PTR [ebx],edx
c002187a:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021881:	89 03                	mov    DWORD PTR [ebx],eax
c0021883:	56                   	push   esi
c0021884:	e8 20 dd fe ff       	call   c000f5a9 <free>
c0021889:	83 c4 10             	add    esp,0x10
c002188c:	b0 01                	mov    al,0x1
c002188e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021894:	5b                   	pop    ebx
c0021895:	5e                   	pop    esi
c0021896:	5f                   	pop    edi
c0021897:	5d                   	pop    ebp
c0021898:	c3                   	ret    

c0021899 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021899:	55                   	push   ebp
c002189a:	57                   	push   edi
c002189b:	56                   	push   esi
c002189c:	53                   	push   ebx
c002189d:	83 ec 20             	sub    esp,0x20
c00218a0:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00218a4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00218a8:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00218ac:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00218b4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00218bc:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00218c1:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00218c7:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00218cd:	57                   	push   edi
c00218ce:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218d2:	50                   	push   eax
c00218d3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00218d7:	50                   	push   eax
c00218d8:	e8 95 fd ff ff       	call   c0021672 <readRoot(unsigned int*, unsigned int*, char)>
c00218dd:	5a                   	pop    edx
c00218de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00218e2:	e8 85 ee fd ff       	call   c000076c <strlen>
c00218e7:	83 c4 10             	add    esp,0x10
c00218ea:	83 f8 03             	cmp    eax,0x3
c00218ed:	77 17                	ja     c0021906 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00218ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00218f3:	89 03                	mov    DWORD PTR [ebx],eax
c00218f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00218f9:	89 06                	mov    DWORD PTR [esi],eax
c00218fb:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021902:	b0 01                	mov    al,0x1
c0021904:	eb 19                	jmp    c002191f <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021906:	50                   	push   eax
c0021907:	55                   	push   ebp
c0021908:	57                   	push   edi
c0021909:	56                   	push   esi
c002190a:	53                   	push   ebx
c002190b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002190f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021913:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021917:	e8 aa fd ff ff       	call   c00216c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002191c:	83 c4 20             	add    esp,0x20
c002191f:	83 c4 1c             	add    esp,0x1c
c0021922:	5b                   	pop    ebx
c0021923:	5e                   	pop    esi
c0021924:	5f                   	pop    edi
c0021925:	5d                   	pop    ebp
c0021926:	c3                   	ret    
c0021927:	90                   	nop

c0021928 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021928:	57                   	push   edi
c0021929:	56                   	push   esi
c002192a:	53                   	push   ebx
c002192b:	83 ec 10             	sub    esp,0x10
c002192e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021932:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021936:	85 ff                	test   edi,edi
c0021938:	0f 84 8b 00 00 00    	je     c00219c9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c002193e:	85 f6                	test   esi,esi
c0021940:	0f 84 83 00 00 00    	je     c00219c9 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c0021946:	b8 03 00 00 00       	mov    eax,0x3
c002194b:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021950:	75 7c                	jne    c00219ce <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021952:	83 ec 0c             	sub    esp,0xc
c0021955:	6a 1c                	push   0x1c
c0021957:	e8 3d dc fe ff       	call   c000f599 <malloc>
c002195c:	89 07                	mov    DWORD PTR [edi],eax
c002195e:	89 c3                	mov    ebx,eax
c0021960:	58                   	pop    eax
c0021961:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021965:	50                   	push   eax
c0021966:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021969:	50                   	push   eax
c002196a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002196e:	50                   	push   eax
c002196f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021973:	50                   	push   eax
c0021974:	56                   	push   esi
c0021975:	e8 1f ff ff ff       	call   c0021899 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002197a:	83 c4 20             	add    esp,0x20
c002197d:	84 c0                	test   al,al
c002197f:	74 07                	je     c0021988 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c0021981:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021986:	74 0b                	je     c0021993 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c0021988:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002198c:	b8 01 00 00 00       	mov    eax,0x1
c0021991:	eb 3b                	jmp    c00219ce <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c0021993:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021997:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c002199b:	89 03                	mov    DWORD PTR [ebx],eax
c002199d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00219a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00219a8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00219af:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00219b6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00219b9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00219c0:	8a 06                	mov    al,BYTE PTR [esi]
c00219c2:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00219c5:	31 c0                	xor    eax,eax
c00219c7:	eb 05                	jmp    c00219ce <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c00219c9:	b8 04 00 00 00       	mov    eax,0x4
c00219ce:	83 c4 10             	add    esp,0x10
c00219d1:	5b                   	pop    ebx
c00219d2:	5e                   	pop    esi
c00219d3:	5f                   	pop    edi
c00219d4:	c3                   	ret    
c00219d5:	90                   	nop

c00219d6 <ISO9660::exists(char const*)>:
c00219d6:	83 ec 28             	sub    esp,0x28
c00219d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00219dd:	8d 54 24 18          	lea    edx,[esp+0x18]
c00219e1:	52                   	push   edx
c00219e2:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00219e5:	52                   	push   edx
c00219e6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00219ea:	52                   	push   edx
c00219eb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00219ef:	52                   	push   edx
c00219f0:	50                   	push   eax
c00219f1:	e8 a3 fe ff ff       	call   c0021899 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00219f6:	83 c4 3c             	add    esp,0x3c
c00219f9:	c3                   	ret    

c00219fa <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00219fa:	56                   	push   esi
c00219fb:	53                   	push   ebx
c00219fc:	83 ec 14             	sub    esp,0x14
c00219ff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021a03:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021a07:	85 db                	test   ebx,ebx
c0021a09:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021a0d:	0f 94 c2             	sete   dl
c0021a10:	85 f6                	test   esi,esi
c0021a12:	0f 94 c0             	sete   al
c0021a15:	08 c2                	or     dl,al
c0021a17:	75 68                	jne    c0021a81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a19:	85 c9                	test   ecx,ecx
c0021a1b:	74 64                	je     c0021a81 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021a1d:	83 ec 0c             	sub    esp,0xc
c0021a20:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021a23:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a27:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a2d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a34:	50                   	push   eax
c0021a35:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021a38:	50                   	push   eax
c0021a39:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a3d:	50                   	push   eax
c0021a3e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021a42:	50                   	push   eax
c0021a43:	51                   	push   ecx
c0021a44:	e8 50 fe ff ff       	call   c0021899 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021a49:	83 c4 20             	add    esp,0x20
c0021a4c:	ba 01 00 00 00       	mov    edx,0x1
c0021a51:	84 c0                	test   al,al
c0021a53:	74 31                	je     c0021a86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021a59:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a60:	89 03                	mov    DWORD PTR [ebx],eax
c0021a62:	ba 00 00 00 00       	mov    edx,0x0
c0021a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021a6b:	85 c0                	test   eax,eax
c0021a6d:	0f 95 06             	setne  BYTE PTR [esi]
c0021a70:	74 14                	je     c0021a86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a72:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021a78:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021a7f:	eb 05                	jmp    c0021a86 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021a81:	ba 04 00 00 00       	mov    edx,0x4
c0021a86:	83 c4 14             	add    esp,0x14
c0021a89:	89 d0                	mov    eax,edx
c0021a8b:	5b                   	pop    ebx
c0021a8c:	5e                   	pop    esi
c0021a8d:	c3                   	ret    

c0021a8e <ISO9660::openDir(char const*, void**)>:
c0021a8e:	57                   	push   edi
c0021a8f:	56                   	push   esi
c0021a90:	53                   	push   ebx
c0021a91:	83 ec 10             	sub    esp,0x10
c0021a94:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021a98:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021a9c:	85 ff                	test   edi,edi
c0021a9e:	74 7b                	je     c0021b1b <ISO9660::openDir(char const*, void**)+0x8d>
c0021aa0:	85 f6                	test   esi,esi
c0021aa2:	74 77                	je     c0021b1b <ISO9660::openDir(char const*, void**)+0x8d>
c0021aa4:	83 ec 0c             	sub    esp,0xc
c0021aa7:	6a 1c                	push   0x1c
c0021aa9:	e8 eb da fe ff       	call   c000f599 <malloc>
c0021aae:	89 07                	mov    DWORD PTR [edi],eax
c0021ab0:	89 c3                	mov    ebx,eax
c0021ab2:	58                   	pop    eax
c0021ab3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ab7:	50                   	push   eax
c0021ab8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021abb:	50                   	push   eax
c0021abc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ac0:	50                   	push   eax
c0021ac1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021ac5:	50                   	push   eax
c0021ac6:	56                   	push   esi
c0021ac7:	e8 cd fd ff ff       	call   c0021899 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021acc:	83 c4 20             	add    esp,0x20
c0021acf:	84 c0                	test   al,al
c0021ad1:	74 07                	je     c0021ada <ISO9660::openDir(char const*, void**)+0x4c>
c0021ad3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021ad8:	75 0b                	jne    c0021ae5 <ISO9660::openDir(char const*, void**)+0x57>
c0021ada:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021ade:	b8 01 00 00 00       	mov    eax,0x1
c0021ae3:	eb 3b                	jmp    c0021b20 <ISO9660::openDir(char const*, void**)+0x92>
c0021ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ae9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021aed:	89 03                	mov    DWORD PTR [ebx],eax
c0021aef:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021af6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021afa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021b01:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021b08:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021b0b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021b12:	8a 06                	mov    al,BYTE PTR [esi]
c0021b14:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021b17:	31 c0                	xor    eax,eax
c0021b19:	eb 05                	jmp    c0021b20 <ISO9660::openDir(char const*, void**)+0x92>
c0021b1b:	b8 04 00 00 00       	mov    eax,0x4
c0021b20:	83 c4 10             	add    esp,0x10
c0021b23:	5b                   	pop    ebx
c0021b24:	5e                   	pop    esi
c0021b25:	5f                   	pop    edi
c0021b26:	c3                   	ret    
c0021b27:	90                   	nop

c0021b28 <ISO9660::ISO9660()>:
c0021b28:	83 ec 0c             	sub    esp,0xc
c0021b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b2f:	83 ec 0c             	sub    esp,0xc
c0021b32:	50                   	push   eax
c0021b33:	e8 86 0e ff ff       	call   c00129be <Filesystem::Filesystem()>
c0021b38:	83 c4 10             	add    esp,0x10
c0021b3b:	ba e0 be 02 c0       	mov    edx,0xc002bee0
c0021b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b44:	89 10                	mov    DWORD PTR [eax],edx
c0021b46:	90                   	nop
c0021b47:	83 c4 0c             	add    esp,0xc
c0021b4a:	c3                   	ret    
c0021b4b:	90                   	nop

c0021b4c <SoundChannel::SoundChannel(int, int, int, int)>:
c0021b4c:	83 ec 1c             	sub    esp,0x1c
c0021b4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b53:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021b57:	89 10                	mov    DWORD PTR [eax],edx
c0021b59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021b61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021b6c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b6f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021b74:	75 23                	jne    c0021b99 <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c0021b76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0021b7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b80:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021b83:	0f af c2             	imul   eax,edx
c0021b86:	85 c0                	test   eax,eax
c0021b88:	79 03                	jns    c0021b8d <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c0021b8a:	83 c0 03             	add    eax,0x3
c0021b8d:	c1 f8 02             	sar    eax,0x2
c0021b90:	05 a0 0f 00 00       	add    eax,0xfa0
c0021b95:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021b99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021b9d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021ba1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021ba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ba8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021baf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bb3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021bba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bbe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021bc1:	c1 e0 02             	shl    eax,0x2
c0021bc4:	83 ec 0c             	sub    esp,0xc
c0021bc7:	50                   	push   eax
c0021bc8:	e8 cc d9 fe ff       	call   c000f599 <malloc>
c0021bcd:	83 c4 10             	add    esp,0x10
c0021bd0:	89 c2                	mov    edx,eax
c0021bd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bd6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021bd9:	83 ec 04             	sub    esp,0x4
c0021bdc:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021be0:	50                   	push   eax
c0021be1:	6a 01                	push   0x1
c0021be3:	6a 04                	push   0x4
c0021be5:	e8 7b 6f fe ff       	call   c0008b65 <src_new>
c0021bea:	83 c4 10             	add    esp,0x10
c0021bed:	89 c2                	mov    edx,eax
c0021bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021bf3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bfa:	85 c0                	test   eax,eax
c0021bfc:	74 10                	je     c0021c0e <SoundChannel::SoundChannel(int, int, int, int)+0xc2>
c0021bfe:	83 ec 0c             	sub    esp,0xc
c0021c01:	68 40 bf 02 c0       	push   0xc002bf40
c0021c06:	e8 14 82 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0021c0b:	83 c4 10             	add    esp,0x10
c0021c0e:	a0 a0 1c 03 c0       	mov    al,ds:0xc0031ca0
c0021c13:	83 f0 01             	xor    eax,0x1
c0021c16:	84 c0                	test   al,al
c0021c18:	74 57                	je     c0021c71 <SoundChannel::SoundChannel(int, int, int, int)+0x125>
c0021c1a:	a1 5c bf 02 c0       	mov    eax,ds:0xc002bf5c
c0021c1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021c23:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021c2b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021c33:	7f 35                	jg     c0021c6a <SoundChannel::SoundChannel(int, int, int, int)+0x11e>
c0021c35:	83 ec 0c             	sub    esp,0xc
c0021c38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021c3c:	e8 de 53 00 00       	call   c002701f <__floatsisf>
c0021c41:	83 c4 10             	add    esp,0x10
c0021c44:	8b 15 5c bf 02 c0    	mov    edx,DWORD PTR ds:0xc002bf5c
c0021c4a:	83 ec 08             	sub    esp,0x8
c0021c4d:	52                   	push   edx
c0021c4e:	50                   	push   eax
c0021c4f:	e8 dd 4f 00 00       	call   c0026c31 <__mulsf3>
c0021c54:	83 c4 10             	add    esp,0x10
c0021c57:	89 c2                	mov    edx,eax
c0021c59:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021c5d:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c0021c64:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021c68:	eb c1                	jmp    c0021c2b <SoundChannel::SoundChannel(int, int, int, int)+0xdf>
c0021c6a:	c6 05 a0 1c 03 c0 01 	mov    BYTE PTR ds:0xc0031ca0,0x1
c0021c71:	90                   	nop
c0021c72:	83 c4 1c             	add    esp,0x1c
c0021c75:	c3                   	ret    

c0021c76 <SoundChannel::~SoundChannel()>:
c0021c76:	83 ec 0c             	sub    esp,0xc
c0021c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021c80:	83 ec 0c             	sub    esp,0xc
c0021c83:	50                   	push   eax
c0021c84:	e8 20 d9 fe ff       	call   c000f5a9 <free>
c0021c89:	83 c4 10             	add    esp,0x10
c0021c8c:	90                   	nop
c0021c8d:	83 c4 0c             	add    esp,0xc
c0021c90:	c3                   	ret    
c0021c91:	90                   	nop

c0021c92 <SoundChannel::getSampleRate()>:
c0021c92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c96:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c98:	c3                   	ret    
c0021c99:	90                   	nop

c0021c9a <SoundChannel::getBits()>:
c0021c9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ca1:	c3                   	ret    

c0021ca2 <SoundChannel::getBufferUsed()>:
c0021ca2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021ca6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021ca9:	c3                   	ret    

c0021caa <SoundChannel::getBufferSize()>:
c0021caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021cae:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021cb1:	c3                   	ret    

c0021cb2 <SoundChannel::unbuffer(float*, int, int)>:
c0021cb2:	56                   	push   esi
c0021cb3:	53                   	push   ebx
c0021cb4:	83 ec 40             	sub    esp,0x40
c0021cb7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021cbb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021cbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cc2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021cc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021cc9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021ccd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0021cd1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021cd5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021cd9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021cdd:	e8 3d 53 00 00       	call   c002701f <__floatsisf>
c0021ce2:	5a                   	pop    edx
c0021ce3:	89 c6                	mov    esi,eax
c0021ce5:	ff 33                	push   DWORD PTR [ebx]
c0021ce7:	e8 33 53 00 00       	call   c002701f <__floatsisf>
c0021cec:	59                   	pop    ecx
c0021ced:	5a                   	pop    edx
c0021cee:	50                   	push   eax
c0021cef:	56                   	push   esi
c0021cf0:	e8 ff 50 00 00       	call   c0026df4 <__divsf3>
c0021cf5:	89 04 24             	mov    DWORD PTR [esp],eax
c0021cf8:	e8 f2 65 00 00       	call   c00282ef <__extendsfdf2>
c0021cfd:	59                   	pop    ecx
c0021cfe:	5e                   	pop    esi
c0021cff:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d03:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0021d07:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0021d0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021d13:	50                   	push   eax
c0021d14:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0021d17:	e8 3e 6a fe ff       	call   c000875a <src_process>
c0021d1c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021d20:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0021d23:	83 c4 0c             	add    esp,0xc
c0021d26:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0021d29:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0021d2c:	29 d0                	sub    eax,edx
c0021d2e:	c1 e0 02             	shl    eax,0x2
c0021d31:	50                   	push   eax
c0021d32:	8d 04 91             	lea    eax,[ecx+edx*4]
c0021d35:	50                   	push   eax
c0021d36:	51                   	push   ecx
c0021d37:	e8 4c e9 fd ff       	call   c0000688 <memmove>
c0021d3c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021d40:	83 c4 44             	add    esp,0x44
c0021d43:	5b                   	pop    ebx
c0021d44:	5e                   	pop    esi
c0021d45:	c3                   	ret    

c0021d46 <SoundChannel::buffer16(short*, int)>:
c0021d46:	55                   	push   ebp
c0021d47:	57                   	push   edi
c0021d48:	56                   	push   esi
c0021d49:	53                   	push   ebx
c0021d4a:	83 ec 1c             	sub    esp,0x1c
c0021d4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0021d51:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d54:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d57:	0f 84 d2 00 00 00    	je     c0021e2f <SoundChannel::buffer16(short*, int)+0xe9>
c0021d5d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0021d61:	85 ed                	test   ebp,ebp
c0021d63:	0f 8e c6 00 00 00    	jle    c0021e2f <SoundChannel::buffer16(short*, int)+0xe9>
c0021d69:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021d6d:	bd 00 00 00 38       	mov    ebp,0x38000000
c0021d72:	83 ec 0c             	sub    esp,0xc
c0021d75:	0f bf 00             	movsx  eax,WORD PTR [eax]
c0021d78:	50                   	push   eax
c0021d79:	e8 a1 52 00 00       	call   c002701f <__floatsisf>
c0021d7e:	59                   	pop    ecx
c0021d7f:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021d82:	5f                   	pop    edi
c0021d83:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021d86:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021d89:	55                   	push   ebp
c0021d8a:	50                   	push   eax
c0021d8b:	e8 a1 4e 00 00       	call   c0026c31 <__mulsf3>
c0021d90:	83 c4 10             	add    esp,0x10
c0021d93:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021d96:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0021d99:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c0021d9c:	0f 84 99 00 00 00    	je     c0021e3b <SoundChannel::buffer16(short*, int)+0xf5>
c0021da2:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c0021da7:	74 78                	je     c0021e21 <SoundChannel::buffer16(short*, int)+0xdb>
c0021da9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021dad:	83 ec 0c             	sub    esp,0xc
c0021db0:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c0021db4:	50                   	push   eax
c0021db5:	e8 65 52 00 00       	call   c002701f <__floatsisf>
c0021dba:	5f                   	pop    edi
c0021dbb:	8d 4e 01             	lea    ecx,[esi+0x1]
c0021dbe:	5a                   	pop    edx
c0021dbf:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0021dc2:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021dc5:	55                   	push   ebp
c0021dc6:	50                   	push   eax
c0021dc7:	e8 65 4e 00 00       	call   c0026c31 <__mulsf3>
c0021dcc:	83 c4 10             	add    esp,0x10
c0021dcf:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0021dd2:	be 02 00 00 00       	mov    esi,0x2
c0021dd7:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021dda:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021ddd:	74 46                	je     c0021e25 <SoundChannel::buffer16(short*, int)+0xdf>
c0021ddf:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0021de3:	eb 36                	jmp    c0021e1b <SoundChannel::buffer16(short*, int)+0xd5>
c0021de5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021de9:	83 ec 0c             	sub    esp,0xc
c0021dec:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0021df0:	46                   	inc    esi
c0021df1:	50                   	push   eax
c0021df2:	e8 28 52 00 00       	call   c002701f <__floatsisf>
c0021df7:	5a                   	pop    edx
c0021df8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0021dfb:	59                   	pop    ecx
c0021dfc:	8d 4f 01             	lea    ecx,[edi+0x1]
c0021dff:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0021e02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021e06:	50                   	push   eax
c0021e07:	e8 25 4e 00 00       	call   c0026c31 <__mulsf3>
c0021e0c:	83 c4 10             	add    esp,0x10
c0021e0f:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0021e13:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c0021e16:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0021e19:	74 0a                	je     c0021e25 <SoundChannel::buffer16(short*, int)+0xdf>
c0021e1b:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0021e1f:	75 c4                	jne    c0021de5 <SoundChannel::buffer16(short*, int)+0x9f>
c0021e21:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0021e25:	83 c4 1c             	add    esp,0x1c
c0021e28:	89 f0                	mov    eax,esi
c0021e2a:	5b                   	pop    ebx
c0021e2b:	5e                   	pop    esi
c0021e2c:	5f                   	pop    edi
c0021e2d:	5d                   	pop    ebp
c0021e2e:	c3                   	ret    
c0021e2f:	83 c4 1c             	add    esp,0x1c
c0021e32:	31 f6                	xor    esi,esi
c0021e34:	5b                   	pop    ebx
c0021e35:	89 f0                	mov    eax,esi
c0021e37:	5e                   	pop    esi
c0021e38:	5f                   	pop    edi
c0021e39:	5d                   	pop    ebp
c0021e3a:	c3                   	ret    
c0021e3b:	be 01 00 00 00       	mov    esi,0x1
c0021e40:	eb e3                	jmp    c0021e25 <SoundChannel::buffer16(short*, int)+0xdf>

c0021e42 <SoundChannel::buffer8(unsigned char*, int)>:
c0021e42:	55                   	push   ebp
c0021e43:	57                   	push   edi
c0021e44:	56                   	push   esi
c0021e45:	53                   	push   ebx
c0021e46:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e4a:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0021e4e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e51:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e55:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e58:	74 7a                	je     c0021ed4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e5a:	85 ff                	test   edi,edi
c0021e5c:	7e 76                	jle    c0021ed4 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021e5e:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0021e62:	8d 70 01             	lea    esi,[eax+0x1]
c0021e65:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e68:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e6b:	8b 1c 9d a0 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce760]
c0021e72:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e75:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021e78:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021e7b:	74 5e                	je     c0021edb <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021e7d:	83 ff 01             	cmp    edi,0x1
c0021e80:	74 4b                	je     c0021ecd <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0021e82:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021e86:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021e89:	8d 70 01             	lea    esi,[eax+0x1]
c0021e8c:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021e8f:	8b 1c 9d a0 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce760]
c0021e96:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021e99:	b8 02 00 00 00       	mov    eax,0x2
c0021e9e:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ea1:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ea4:	75 23                	jne    c0021ec9 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021ea6:	eb 27                	jmp    c0021ecf <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ea8:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021ead:	8d 71 01             	lea    esi,[ecx+0x1]
c0021eb0:	40                   	inc    eax
c0021eb1:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021eb4:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021eb7:	8b 1c 9d a0 18 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce760]
c0021ebe:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0021ec1:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021ec4:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021ec7:	74 06                	je     c0021ecf <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021ec9:	39 c7                	cmp    edi,eax
c0021ecb:	75 db                	jne    c0021ea8 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021ecd:	89 f8                	mov    eax,edi
c0021ecf:	5b                   	pop    ebx
c0021ed0:	5e                   	pop    esi
c0021ed1:	5f                   	pop    edi
c0021ed2:	5d                   	pop    ebp
c0021ed3:	c3                   	ret    
c0021ed4:	5b                   	pop    ebx
c0021ed5:	31 c0                	xor    eax,eax
c0021ed7:	5e                   	pop    esi
c0021ed8:	5f                   	pop    edi
c0021ed9:	5d                   	pop    ebp
c0021eda:	c3                   	ret    
c0021edb:	b8 01 00 00 00       	mov    eax,0x1
c0021ee0:	eb ed                	jmp    c0021ecf <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0021ee2 <SoundDevice::SoundDevice(char const*)>:
c0021ee2:	83 ec 1c             	sub    esp,0x1c
c0021ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ee9:	83 ec 08             	sub    esp,0x8
c0021eec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021ef0:	50                   	push   eax
c0021ef1:	e8 fa 1d ff ff       	call   c0013cf0 <Device::Device(char const*)>
c0021ef6:	83 c4 10             	add    esp,0x10
c0021ef9:	ba 68 bf 02 c0       	mov    edx,0xc002bf68
c0021efe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f02:	89 10                	mov    DWORD PTR [eax],edx
c0021f04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f08:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0021f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f16:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0021f20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f28:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f2d:	7f 19                	jg     c0021f48 <SoundDevice::SoundDevice(char const*)+0x66>
c0021f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f37:	83 c2 54             	add    edx,0x54
c0021f3a:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0021f42:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021f46:	eb e0                	jmp    c0021f28 <SoundDevice::SoundDevice(char const*)+0x46>
c0021f48:	90                   	nop
c0021f49:	83 c4 1c             	add    esp,0x1c
c0021f4c:	c3                   	ret    
c0021f4d:	90                   	nop

c0021f4e <SoundDevice::~SoundDevice()>:
c0021f4e:	53                   	push   ebx
c0021f4f:	83 ec 18             	sub    esp,0x18
c0021f52:	ba 68 bf 02 c0       	mov    edx,0xc002bf68
c0021f57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f5b:	89 10                	mov    DWORD PTR [eax],edx
c0021f5d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f65:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021f6a:	7f 46                	jg     c0021fb2 <SoundDevice::~SoundDevice()+0x64>
c0021f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f70:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f74:	83 c2 54             	add    edx,0x54
c0021f77:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021f7b:	85 c0                	test   eax,eax
c0021f7d:	74 2d                	je     c0021fac <SoundDevice::~SoundDevice()+0x5e>
c0021f7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021f87:	83 c2 54             	add    edx,0x54
c0021f8a:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0021f8e:	85 db                	test   ebx,ebx
c0021f90:	74 1a                	je     c0021fac <SoundDevice::~SoundDevice()+0x5e>
c0021f92:	83 ec 0c             	sub    esp,0xc
c0021f95:	53                   	push   ebx
c0021f96:	e8 db fc ff ff       	call   c0021c76 <SoundChannel::~SoundChannel()>
c0021f9b:	83 c4 10             	add    esp,0x10
c0021f9e:	83 ec 08             	sub    esp,0x8
c0021fa1:	6a 2c                	push   0x2c
c0021fa3:	53                   	push   ebx
c0021fa4:	e8 32 06 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0021fa9:	83 c4 10             	add    esp,0x10
c0021fac:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fb0:	eb b3                	jmp    c0021f65 <SoundDevice::~SoundDevice()+0x17>
c0021fb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fb6:	83 ec 0c             	sub    esp,0xc
c0021fb9:	50                   	push   eax
c0021fba:	e8 fb 19 ff ff       	call   c00139ba <Device::~Device()>
c0021fbf:	83 c4 10             	add    esp,0x10
c0021fc2:	90                   	nop
c0021fc3:	83 c4 18             	add    esp,0x18
c0021fc6:	5b                   	pop    ebx
c0021fc7:	c3                   	ret    

c0021fc8 <SoundDevice::~SoundDevice()>:
c0021fc8:	83 ec 0c             	sub    esp,0xc
c0021fcb:	83 ec 0c             	sub    esp,0xc
c0021fce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fd2:	e8 77 ff ff ff       	call   c0021f4e <SoundDevice::~SoundDevice()>
c0021fd7:	83 c4 10             	add    esp,0x10
c0021fda:	83 ec 08             	sub    esp,0x8
c0021fdd:	68 e4 01 00 00       	push   0x1e4
c0021fe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fe6:	e8 f0 05 ff ff       	call   c00125db <operator delete(void*, unsigned long)>
c0021feb:	83 c4 10             	add    esp,0x10
c0021fee:	83 c4 0c             	add    esp,0xc
c0021ff1:	c3                   	ret    

c0021ff2 <SoundDevice::getFreeChannelNum()>:
c0021ff2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021ff6:	31 c0                	xor    eax,eax
c0021ff8:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022000:	74 09                	je     c002200b <SoundDevice::getFreeChannelNum()+0x19>
c0022002:	40                   	inc    eax
c0022003:	83 f8 20             	cmp    eax,0x20
c0022006:	75 f0                	jne    c0021ff8 <SoundDevice::getFreeChannelNum()+0x6>
c0022008:	83 c8 ff             	or     eax,0xffffffff
c002200b:	c3                   	ret    

c002200c <SoundDevice::addChannel(SoundChannel*)>:
c002200c:	56                   	push   esi
c002200d:	53                   	push   ebx
c002200e:	51                   	push   ecx
c002200f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022013:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022017:	53                   	push   ebx
c0022018:	e8 d5 ff ff ff       	call   c0021ff2 <SoundDevice::getFreeChannelNum()>
c002201d:	5a                   	pop    edx
c002201e:	83 f8 ff             	cmp    eax,0xffffffff
c0022021:	74 51                	je     c0022074 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022023:	85 f6                	test   esi,esi
c0022025:	74 4d                	je     c0022074 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022027:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c002202e:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022035:	75 30                	jne    c0022067 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022037:	83 ec 0c             	sub    esp,0xc
c002203a:	56                   	push   esi
c002203b:	e8 52 fc ff ff       	call   c0021c92 <SoundChannel::getSampleRate()>
c0022040:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022046:	89 34 24             	mov    DWORD PTR [esp],esi
c0022049:	e8 4c fc ff ff       	call   c0021c9a <SoundChannel::getBits()>
c002204e:	83 c4 0c             	add    esp,0xc
c0022051:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022057:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022059:	50                   	push   eax
c002205a:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022060:	53                   	push   ebx
c0022061:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0022064:	83 c4 10             	add    esp,0x10
c0022067:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c002206d:	b8 01 00 00 00       	mov    eax,0x1
c0022072:	eb 03                	jmp    c0022077 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022074:	83 c8 ff             	or     eax,0xffffffff
c0022077:	5a                   	pop    edx
c0022078:	5b                   	pop    ebx
c0022079:	5e                   	pop    esi
c002207a:	c3                   	ret    
c002207b:	90                   	nop

c002207c <SoundDevice::removeChannel(int)>:
c002207c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022080:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022084:	83 fa 1f             	cmp    edx,0x1f
c0022087:	77 23                	ja     c00220ac <SoundDevice::removeChannel(int)+0x30>
c0022089:	8d 14 90             	lea    edx,[eax+edx*4]
c002208c:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022093:	74 17                	je     c00220ac <SoundDevice::removeChannel(int)+0x30>
c0022095:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002209f:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00220a5:	75 05                	jne    c00220ac <SoundDevice::removeChannel(int)+0x30>
c00220a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00220a9:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00220ac:	c3                   	ret    
c00220ad:	90                   	nop

c00220ae <SoundDevice::floatTo16(float*, short*, int)>:
c00220ae:	57                   	push   edi
c00220af:	56                   	push   esi
c00220b0:	53                   	push   ebx
c00220b1:	31 db                	xor    ebx,ebx
c00220b3:	83 ec 10             	sub    esp,0x10
c00220b6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00220ba:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00220be:	0f 8d d0 00 00 00    	jge    c0022194 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c00220c4:	83 ec 0c             	sub    esp,0xc
c00220c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220cb:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00220ce:	e8 1c 62 00 00       	call   c00282ef <__extendsfdf2>
c00220d3:	83 c4 10             	add    esp,0x10
c00220d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220de:	68 00 00 f0 3f       	push   0x3ff00000
c00220e3:	6a 00                	push   0x0
c00220e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00220ed:	e8 89 51 00 00       	call   c002727b <__adddf3>
c00220f2:	83 c4 10             	add    esp,0x10
c00220f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00220f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00220fd:	68 00 00 e0 3f       	push   0x3fe00000
c0022102:	6a 00                	push   0x0
c0022104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002210c:	e8 e7 57 00 00       	call   c00278f8 <__muldf3>
c0022111:	83 c4 10             	add    esp,0x10
c0022114:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022118:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002211c:	68 c0 ff df 40       	push   0x40dfffc0
c0022121:	6a 00                	push   0x0
c0022123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002212b:	e8 c8 57 00 00       	call   c00278f8 <__muldf3>
c0022130:	59                   	pop    ecx
c0022131:	5f                   	pop    edi
c0022132:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022136:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002213a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002213e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022142:	e8 84 60 00 00       	call   c00281cb <__truncdfsf2>
c0022147:	5a                   	pop    edx
c0022148:	89 c7                	mov    edi,eax
c002214a:	59                   	pop    ecx
c002214b:	68 00 fe ff 46       	push   0x46fffe00
c0022150:	50                   	push   eax
c0022151:	e8 1f 51 00 00       	call   c0027275 <__gesf2>
c0022156:	83 c4 10             	add    esp,0x10
c0022159:	85 c0                	test   eax,eax
c002215b:	78 08                	js     c0022165 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c002215d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0022163:	eb 29                	jmp    c002218e <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c0022165:	50                   	push   eax
c0022166:	50                   	push   eax
c0022167:	6a 00                	push   0x0
c0022169:	57                   	push   edi
c002216a:	e8 0a 51 00 00       	call   c0027279 <__lesf2>
c002216f:	83 c4 10             	add    esp,0x10
c0022172:	85 c0                	test   eax,eax
c0022174:	7f 08                	jg     c002217e <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c0022176:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c002217c:	eb 10                	jmp    c002218e <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c002217e:	83 ec 0c             	sub    esp,0xc
c0022181:	57                   	push   edi
c0022182:	e8 05 62 00 00       	call   c002838c <lrintf>
c0022187:	83 c4 10             	add    esp,0x10
c002218a:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c002218e:	43                   	inc    ebx
c002218f:	e9 26 ff ff ff       	jmp    c00220ba <SoundDevice::floatTo16(float*, short*, int)+0xc>
c0022194:	83 c4 10             	add    esp,0x10
c0022197:	5b                   	pop    ebx
c0022198:	5e                   	pop    esi
c0022199:	5f                   	pop    edi
c002219a:	c3                   	ret    
c002219b:	90                   	nop

c002219c <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002219c:	57                   	push   edi
c002219d:	56                   	push   esi
c002219e:	53                   	push   ebx
c002219f:	31 db                	xor    ebx,ebx
c00221a1:	83 ec 10             	sub    esp,0x10
c00221a4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00221a8:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00221ac:	0f 8d cb 00 00 00    	jge    c002227d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00221b2:	83 ec 0c             	sub    esp,0xc
c00221b5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221b9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c00221bc:	e8 2e 61 00 00       	call   c00282ef <__extendsfdf2>
c00221c1:	83 c4 10             	add    esp,0x10
c00221c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221cc:	68 00 00 f0 3f       	push   0x3ff00000
c00221d1:	6a 00                	push   0x0
c00221d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221db:	e8 9b 50 00 00       	call   c002727b <__adddf3>
c00221e0:	83 c4 10             	add    esp,0x10
c00221e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221eb:	68 00 00 e0 3f       	push   0x3fe00000
c00221f0:	6a 00                	push   0x0
c00221f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00221fa:	e8 f9 56 00 00       	call   c00278f8 <__muldf3>
c00221ff:	83 c4 10             	add    esp,0x10
c0022202:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022206:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002220a:	68 00 00 60 40       	push   0x40600000
c002220f:	6a 00                	push   0x0
c0022211:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022215:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022219:	e8 da 56 00 00       	call   c00278f8 <__muldf3>
c002221e:	59                   	pop    ecx
c002221f:	5f                   	pop    edi
c0022220:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022224:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002222c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022230:	e8 96 5f 00 00       	call   c00281cb <__truncdfsf2>
c0022235:	5a                   	pop    edx
c0022236:	89 c7                	mov    edi,eax
c0022238:	59                   	pop    ecx
c0022239:	68 00 00 fe 42       	push   0x42fe0000
c002223e:	50                   	push   eax
c002223f:	e8 31 50 00 00       	call   c0027275 <__gesf2>
c0022244:	83 c4 10             	add    esp,0x10
c0022247:	85 c0                	test   eax,eax
c0022249:	78 06                	js     c0022251 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c002224b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002224f:	eb 26                	jmp    c0022277 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022251:	50                   	push   eax
c0022252:	50                   	push   eax
c0022253:	6a 00                	push   0x0
c0022255:	57                   	push   edi
c0022256:	e8 1e 50 00 00       	call   c0027279 <__lesf2>
c002225b:	83 c4 10             	add    esp,0x10
c002225e:	85 c0                	test   eax,eax
c0022260:	7f 06                	jg     c0022268 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022262:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022266:	eb 0f                	jmp    c0022277 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022268:	83 ec 0c             	sub    esp,0xc
c002226b:	57                   	push   edi
c002226c:	e8 1b 61 00 00       	call   c002838c <lrintf>
c0022271:	83 c4 10             	add    esp,0x10
c0022274:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022277:	43                   	inc    ebx
c0022278:	e9 2b ff ff ff       	jmp    c00221a8 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002227d:	83 c4 10             	add    esp,0x10
c0022280:	5b                   	pop    ebx
c0022281:	5e                   	pop    esi
c0022282:	5f                   	pop    edi
c0022283:	c3                   	ret    

c0022284 <SoundDevice::getAudio(int, float*, float*)>:
c0022284:	55                   	push   ebp
c0022285:	31 ed                	xor    ebp,ebp
c0022287:	57                   	push   edi
c0022288:	56                   	push   esi
c0022289:	31 f6                	xor    esi,esi
c002228b:	53                   	push   ebx
c002228c:	83 ec 20             	sub    esp,0x20
c002228f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022293:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022297:	c1 e0 02             	shl    eax,0x2
c002229a:	50                   	push   eax
c002229b:	6a 00                	push   0x0
c002229d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00222a1:	e8 aa e4 fd ff       	call   c0000750 <memset>
c00222a6:	83 c4 10             	add    esp,0x10
c00222a9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00222b1:	8b 8c b3 5c 01 00 00 	mov    ecx,DWORD PTR [ebx+esi*4+0x15c]
c00222b8:	85 c9                	test   ecx,ecx
c00222ba:	74 52                	je     c002230e <SoundDevice::getAudio(int, float*, float*)+0x8a>
c00222bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00222c0:	99                   	cdq    
c00222c1:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c00222c7:	50                   	push   eax
c00222c8:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00222ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00222d2:	51                   	push   ecx
c00222d3:	e8 da f9 ff ff       	call   c0021cb2 <SoundChannel::unbuffer(float*, int, int)>
c00222d8:	31 d2                	xor    edx,edx
c00222da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00222de:	83 c4 10             	add    esp,0x10
c00222e1:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00222e5:	7d 1e                	jge    c0022305 <SoundDevice::getAudio(int, float*, float*)+0x81>
c00222e7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00222eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00222ef:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c00222f2:	89 cf                	mov    edi,ecx
c00222f4:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c00222fa:	0f af ca             	imul   ecx,edx
c00222fd:	42                   	inc    edx
c00222fe:	01 e9                	add    ecx,ebp
c0022300:	89 3c 88             	mov    DWORD PTR [eax+ecx*4],edi
c0022303:	eb dc                	jmp    c00222e1 <SoundDevice::getAudio(int, float*, float*)+0x5d>
c0022305:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0022309:	45                   	inc    ebp
c002230a:	01 7c 24 0c          	add    DWORD PTR [esp+0xc],edi
c002230e:	46                   	inc    esi
c002230f:	83 fe 20             	cmp    esi,0x20
c0022312:	75 9d                	jne    c00222b1 <SoundDevice::getAudio(int, float*, float*)+0x2d>
c0022314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022318:	83 c4 1c             	add    esp,0x1c
c002231b:	5b                   	pop    ebx
c002231c:	5e                   	pop    esi
c002231d:	5f                   	pop    edi
c002231e:	5d                   	pop    ebp
c002231f:	c3                   	ret    

c0022320 <PCI::open(int, int, void*)>:
c0022320:	83 ec 18             	sub    esp,0x18
c0022323:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022327:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002232b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022331:	8b 10                	mov    edx,DWORD PTR [eax]
c0022333:	50                   	push   eax
c0022334:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022337:	31 c0                	xor    eax,eax
c0022339:	83 c4 1c             	add    esp,0x1c
c002233c:	c3                   	ret    
c002233d:	90                   	nop

c002233e <PCI::close(int, int, void*)>:
c002233e:	31 c0                	xor    eax,eax
c0022340:	c3                   	ret    
c0022341:	90                   	nop

c0022342 <PCI::PCI()>:
c0022342:	83 ec 0c             	sub    esp,0xc
c0022345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022349:	83 ec 08             	sub    esp,0x8
c002234c:	68 98 bf 02 c0       	push   0xc002bf98
c0022351:	50                   	push   eax
c0022352:	e8 fd 0f ff ff       	call   c0013354 <Bus::Bus(char const*)>
c0022357:	83 c4 10             	add    esp,0x10
c002235a:	ba 84 c0 02 c0       	mov    edx,0xc002c084
c002235f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022363:	89 10                	mov    DWORD PTR [eax],edx
c0022365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022369:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022377:	a3 a4 1c 03 c0       	mov    ds:0xc0031ca4,eax
c002237c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022380:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022386:	0f b6 d0             	movzx  edx,al
c0022389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002238d:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022398:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002239e:	0f b6 d0             	movzx  edx,al
c00223a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223a5:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00223aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223ae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00223b4:	8d 50 01             	lea    edx,[eax+0x1]
c00223b7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00223bb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00223c1:	0f b6 d0             	movzx  edx,al
c00223c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00223c8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00223cc:	83 c9 c0             	or     ecx,0xffffffc0
c00223cf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00223d3:	90                   	nop
c00223d4:	83 c4 0c             	add    esp,0xc
c00223d7:	c3                   	ret    

c00223d8 <PCI::readBAR8(unsigned int, int)>:
c00223d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223e0:	f6 c2 01             	test   dl,0x1
c00223e3:	74 07                	je     c00223ec <PCI::readBAR8(unsigned int, int)+0x14>
c00223e5:	83 e2 fc             	and    edx,0xfffffffc
c00223e8:	01 c2                	add    edx,eax
c00223ea:	ec                   	in     al,dx
c00223eb:	c3                   	ret    
c00223ec:	83 e2 f0             	and    edx,0xfffffff0
c00223ef:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00223f2:	c3                   	ret    
c00223f3:	90                   	nop

c00223f4 <PCI::readBAR16(unsigned int, int)>:
c00223f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00223f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00223fc:	f6 c2 01             	test   dl,0x1
c00223ff:	74 08                	je     c0022409 <PCI::readBAR16(unsigned int, int)+0x15>
c0022401:	83 e2 fc             	and    edx,0xfffffffc
c0022404:	01 c2                	add    edx,eax
c0022406:	66 ed                	in     ax,dx
c0022408:	c3                   	ret    
c0022409:	83 e2 f0             	and    edx,0xfffffff0
c002240c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022410:	c3                   	ret    
c0022411:	90                   	nop

c0022412 <PCI::readBAR32(unsigned int, int)>:
c0022412:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002241a:	f6 c2 01             	test   dl,0x1
c002241d:	74 07                	je     c0022426 <PCI::readBAR32(unsigned int, int)+0x14>
c002241f:	83 e2 fc             	and    edx,0xfffffffc
c0022422:	01 c2                	add    edx,eax
c0022424:	ed                   	in     eax,dx
c0022425:	c3                   	ret    
c0022426:	83 e2 f0             	and    edx,0xfffffff0
c0022429:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002242c:	c3                   	ret    
c002242d:	90                   	nop

c002242e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002242e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022432:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022436:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002243a:	f6 c2 01             	test   dl,0x1
c002243d:	74 07                	je     c0022446 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002243f:	83 e2 fc             	and    edx,0xfffffffc
c0022442:	01 ca                	add    edx,ecx
c0022444:	ee                   	out    dx,al
c0022445:	c3                   	ret    
c0022446:	83 e2 f0             	and    edx,0xfffffff0
c0022449:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002244c:	c3                   	ret    
c002244d:	90                   	nop

c002244e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002244e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022456:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002245a:	f6 c2 01             	test   dl,0x1
c002245d:	74 08                	je     c0022467 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002245f:	83 e2 fc             	and    edx,0xfffffffc
c0022462:	01 ca                	add    edx,ecx
c0022464:	66 ef                	out    dx,ax
c0022466:	c3                   	ret    
c0022467:	83 e2 f0             	and    edx,0xfffffff0
c002246a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002246e:	c3                   	ret    
c002246f:	90                   	nop

c0022470 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022470:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022474:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022478:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002247c:	f6 c2 01             	test   dl,0x1
c002247f:	74 07                	je     c0022488 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022481:	83 e2 fc             	and    edx,0xfffffffc
c0022484:	01 ca                	add    edx,ecx
c0022486:	ef                   	out    dx,eax
c0022487:	c3                   	ret    
c0022488:	83 e2 f0             	and    edx,0xfffffff0
c002248b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002248e:	c3                   	ret    
c002248f:	90                   	nop

c0022490 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022490:	55                   	push   ebp
c0022491:	57                   	push   edi
c0022492:	56                   	push   esi
c0022493:	53                   	push   ebx
c0022494:	83 ec 0c             	sub    esp,0xc
c0022497:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002249b:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c002249f:	89 f0                	mov    eax,esi
c00224a1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00224a5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00224a9:	3c 07                	cmp    al,0x7
c00224ab:	76 10                	jbe    c00224bd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00224ad:	83 ec 0c             	sub    esp,0xc
c00224b0:	68 a0 bf 02 c0       	push   0xc002bfa0
c00224b5:	e8 65 79 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00224ba:	83 c4 10             	add    esp,0x10
c00224bd:	80 fb 0f             	cmp    bl,0xf
c00224c0:	76 10                	jbe    c00224d2 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00224c2:	83 ec 0c             	sub    esp,0xc
c00224c5:	68 d0 bf 02 c0       	push   0xc002bfd0
c00224ca:	e8 50 79 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00224cf:	83 c4 10             	add    esp,0x10
c00224d2:	8d 04 36             	lea    eax,[esi+esi*1]
c00224d5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00224da:	83 c8 f0             	or     eax,0xfffffff0
c00224dd:	ee                   	out    dx,al
c00224de:	ba fa 0c 00 00       	mov    edx,0xcfa
c00224e3:	89 e8                	mov    eax,ebp
c00224e5:	ee                   	out    dx,al
c00224e6:	83 c4 0c             	add    esp,0xc
c00224e9:	89 d8                	mov    eax,ebx
c00224eb:	66 81 e7 fc 00       	and    di,0xfc
c00224f0:	5b                   	pop    ebx
c00224f1:	c1 e0 08             	shl    eax,0x8
c00224f4:	5e                   	pop    esi
c00224f5:	09 f8                	or     eax,edi
c00224f7:	5f                   	pop    edi
c00224f8:	66 0d 00 c0          	or     ax,0xc000
c00224fc:	5d                   	pop    ebp
c00224fd:	c3                   	ret    

c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00224fe:	57                   	push   edi
c00224ff:	56                   	push   esi
c0022500:	53                   	push   ebx
c0022501:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022505:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022509:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c002250f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022513:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022517:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002251b:	83 ff 01             	cmp    edi,0x1
c002251e:	75 3e                	jne    c002255e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022520:	89 de                	mov    esi,ebx
c0022522:	0f b6 c0             	movzx  eax,al
c0022525:	81 e6 fc 00 00 00    	and    esi,0xfc
c002252b:	c1 e0 10             	shl    eax,0x10
c002252e:	0f b6 c9             	movzx  ecx,cl
c0022531:	09 f0                	or     eax,esi
c0022533:	c1 e1 08             	shl    ecx,0x8
c0022536:	0f b6 d2             	movzx  edx,dl
c0022539:	09 c8                	or     eax,ecx
c002253b:	c1 e2 0b             	shl    edx,0xb
c002253e:	09 d0                	or     eax,edx
c0022540:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022545:	0d 00 00 00 80       	or     eax,0x80000000
c002254a:	ef                   	out    dx,eax
c002254b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022550:	ed                   	in     eax,dx
c0022551:	83 e3 02             	and    ebx,0x2
c0022554:	0f b6 cb             	movzx  ecx,bl
c0022557:	c1 e1 03             	shl    ecx,0x3
c002255a:	d3 e8                	shr    eax,cl
c002255c:	eb 43                	jmp    c00225a1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002255e:	83 ff 02             	cmp    edi,0x2
c0022561:	75 2c                	jne    c002258f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022563:	83 ec 0c             	sub    esp,0xc
c0022566:	0f b6 c9             	movzx  ecx,cl
c0022569:	0f b6 d2             	movzx  edx,dl
c002256c:	0f b6 fb             	movzx  edi,bl
c002256f:	0f b6 c0             	movzx  eax,al
c0022572:	57                   	push   edi
c0022573:	51                   	push   ecx
c0022574:	52                   	push   edx
c0022575:	50                   	push   eax
c0022576:	56                   	push   esi
c0022577:	e8 14 ff ff ff       	call   c0022490 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002257c:	89 c2                	mov    edx,eax
c002257e:	ed                   	in     eax,dx
c002257f:	83 e3 02             	and    ebx,0x2
c0022582:	83 c4 20             	add    esp,0x20
c0022585:	0f b6 cb             	movzx  ecx,bl
c0022588:	c1 e1 03             	shl    ecx,0x3
c002258b:	d3 e8                	shr    eax,cl
c002258d:	eb 12                	jmp    c00225a1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c002258f:	83 ec 0c             	sub    esp,0xc
c0022592:	68 00 c0 02 c0       	push   0xc002c000
c0022597:	e8 83 78 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c002259c:	83 c4 10             	add    esp,0x10
c002259f:	31 c0                	xor    eax,eax
c00225a1:	5b                   	pop    ebx
c00225a2:	5e                   	pop    esi
c00225a3:	5f                   	pop    edi
c00225a4:	c3                   	ret    
c00225a5:	90                   	nop

c00225a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00225a6:	83 ec 18             	sub    esp,0x18
c00225a9:	6a 00                	push   0x0
c00225ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225b0:	50                   	push   eax
c00225b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225b6:	50                   	push   eax
c00225b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225bc:	50                   	push   eax
c00225bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225c1:	e8 38 ff ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225c6:	83 c4 2c             	add    esp,0x2c
c00225c9:	c3                   	ret    

c00225ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00225ca:	83 ec 18             	sub    esp,0x18
c00225cd:	6a 0e                	push   0xe
c00225cf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225d4:	50                   	push   eax
c00225d5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225da:	50                   	push   eax
c00225db:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00225e0:	50                   	push   eax
c00225e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225e5:	e8 14 ff ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225ea:	83 c4 2c             	add    esp,0x2c
c00225ed:	0f b6 c0             	movzx  eax,al
c00225f0:	c3                   	ret    
c00225f1:	90                   	nop

c00225f2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00225f2:	55                   	push   ebp
c00225f3:	57                   	push   edi
c00225f4:	56                   	push   esi
c00225f5:	53                   	push   ebx
c00225f6:	83 ec 18             	sub    esp,0x18
c00225f9:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00225fe:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022603:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022608:	6a 0a                	push   0xa
c002260a:	56                   	push   esi
c002260b:	55                   	push   ebp
c002260c:	57                   	push   edi
c002260d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022611:	e8 e8 fe ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022616:	83 c4 14             	add    esp,0x14
c0022619:	89 c3                	mov    ebx,eax
c002261b:	6a 0a                	push   0xa
c002261d:	0f b6 db             	movzx  ebx,bl
c0022620:	56                   	push   esi
c0022621:	55                   	push   ebp
c0022622:	57                   	push   edi
c0022623:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022627:	e8 d2 fe ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002262c:	83 c4 2c             	add    esp,0x2c
c002262f:	25 00 ff 00 00       	and    eax,0xff00
c0022634:	09 d8                	or     eax,ebx
c0022636:	5b                   	pop    ebx
c0022637:	5e                   	pop    esi
c0022638:	5f                   	pop    edi
c0022639:	5d                   	pop    ebp
c002263a:	c3                   	ret    
c002263b:	90                   	nop

c002263c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c002263c:	83 ec 18             	sub    esp,0x18
c002263f:	6a 08                	push   0x8
c0022641:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022646:	50                   	push   eax
c0022647:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002264c:	50                   	push   eax
c002264d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022652:	50                   	push   eax
c0022653:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022657:	e8 a2 fe ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002265c:	83 c4 2c             	add    esp,0x2c
c002265f:	0f b6 c4             	movzx  eax,ah
c0022662:	c3                   	ret    
c0022663:	90                   	nop

c0022664 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022664:	83 ec 18             	sub    esp,0x18
c0022667:	6a 08                	push   0x8
c0022669:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002266e:	50                   	push   eax
c002266f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022674:	50                   	push   eax
c0022675:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002267a:	50                   	push   eax
c002267b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002267f:	e8 7a fe ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022684:	83 c4 2c             	add    esp,0x2c
c0022687:	c3                   	ret    

c0022688 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022688:	83 ec 18             	sub    esp,0x18
c002268b:	6a 3c                	push   0x3c
c002268d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022692:	50                   	push   eax
c0022693:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022698:	50                   	push   eax
c0022699:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c002269e:	50                   	push   eax
c002269f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226a3:	e8 56 fe ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226a8:	83 c4 2c             	add    esp,0x2c
c00226ab:	c3                   	ret    

c00226ac <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00226ac:	83 ec 18             	sub    esp,0x18
c00226af:	6a 18                	push   0x18
c00226b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226b6:	50                   	push   eax
c00226b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226bc:	50                   	push   eax
c00226bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00226c2:	50                   	push   eax
c00226c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00226c7:	e8 32 fe ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226cc:	83 c4 2c             	add    esp,0x2c
c00226cf:	0f b6 c4             	movzx  eax,ah
c00226d2:	c3                   	ret    
c00226d3:	90                   	nop

c00226d4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00226d4:	55                   	push   ebp
c00226d5:	57                   	push   edi
c00226d6:	56                   	push   esi
c00226d7:	53                   	push   ebx
c00226d8:	83 ec 28             	sub    esp,0x28
c00226db:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00226df:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00226e4:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00226e9:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00226ee:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00226f5:	8d 43 12             	lea    eax,[ebx+0x12]
c00226f8:	83 c3 10             	add    ebx,0x10
c00226fb:	0f b6 c0             	movzx  eax,al
c00226fe:	0f b6 db             	movzx  ebx,bl
c0022701:	50                   	push   eax
c0022702:	51                   	push   ecx
c0022703:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0022707:	57                   	push   edi
c0022708:	55                   	push   ebp
c0022709:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002270d:	e8 ec fd ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022712:	83 c4 14             	add    esp,0x14
c0022715:	89 c6                	mov    esi,eax
c0022717:	53                   	push   ebx
c0022718:	c1 e6 10             	shl    esi,0x10
c002271b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002271f:	51                   	push   ecx
c0022720:	57                   	push   edi
c0022721:	55                   	push   ebp
c0022722:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022726:	e8 d3 fd ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002272b:	83 c4 3c             	add    esp,0x3c
c002272e:	0f b7 c0             	movzx  eax,ax
c0022731:	5b                   	pop    ebx
c0022732:	09 f0                	or     eax,esi
c0022734:	5e                   	pop    esi
c0022735:	5f                   	pop    edi
c0022736:	5d                   	pop    ebp
c0022737:	c3                   	ret    

c0022738 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022738:	55                   	push   ebp
c0022739:	57                   	push   edi
c002273a:	56                   	push   esi
c002273b:	53                   	push   ebx
c002273c:	83 ec 0c             	sub    esp,0xc
c002273f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022743:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022747:	89 f5                	mov    ebp,esi
c0022749:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002274f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022753:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022757:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002275b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002275f:	83 f9 01             	cmp    ecx,0x1
c0022762:	75 5d                	jne    c00227c1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0022764:	0f b6 c8             	movzx  ecx,al
c0022767:	0f b6 d2             	movzx  edx,dl
c002276a:	c1 e1 10             	shl    ecx,0x10
c002276d:	c1 e2 0b             	shl    edx,0xb
c0022770:	89 f0                	mov    eax,esi
c0022772:	25 fc 00 00 00       	and    eax,0xfc
c0022777:	09 c1                	or     ecx,eax
c0022779:	89 e8                	mov    eax,ebp
c002277b:	0f b6 c0             	movzx  eax,al
c002277e:	c1 e0 08             	shl    eax,0x8
c0022781:	09 c1                	or     ecx,eax
c0022783:	09 d1                	or     ecx,edx
c0022785:	ba f8 0c 00 00       	mov    edx,0xcf8
c002278a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022790:	89 c8                	mov    eax,ecx
c0022792:	ef                   	out    dx,eax
c0022793:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022798:	ed                   	in     eax,dx
c0022799:	0f b7 db             	movzx  ebx,bx
c002279c:	83 e6 02             	and    esi,0x2
c002279f:	74 0a                	je     c00227ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00227a1:	0f b7 d0             	movzx  edx,ax
c00227a4:	c1 e3 10             	shl    ebx,0x10
c00227a7:	09 d3                	or     ebx,edx
c00227a9:	eb 05                	jmp    c00227b0 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00227ab:	66 31 c0             	xor    ax,ax
c00227ae:	09 c3                	or     ebx,eax
c00227b0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227b5:	89 c8                	mov    eax,ecx
c00227b7:	ef                   	out    dx,eax
c00227b8:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227bd:	89 d8                	mov    eax,ebx
c00227bf:	eb 41                	jmp    c0022802 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227c1:	83 f9 02             	cmp    ecx,0x2
c00227c4:	75 45                	jne    c002280b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00227c6:	83 ec 0c             	sub    esp,0xc
c00227c9:	0f b6 d2             	movzx  edx,dl
c00227cc:	89 f1                	mov    ecx,esi
c00227ce:	0f b6 c0             	movzx  eax,al
c00227d1:	0f b6 f1             	movzx  esi,cl
c00227d4:	89 e9                	mov    ecx,ebp
c00227d6:	56                   	push   esi
c00227d7:	0f b6 c9             	movzx  ecx,cl
c00227da:	51                   	push   ecx
c00227db:	52                   	push   edx
c00227dc:	50                   	push   eax
c00227dd:	57                   	push   edi
c00227de:	e8 ad fc ff ff       	call   c0022490 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00227e3:	89 c2                	mov    edx,eax
c00227e5:	ed                   	in     eax,dx
c00227e6:	83 c4 20             	add    esp,0x20
c00227e9:	0f b7 db             	movzx  ebx,bx
c00227ec:	f6 c2 02             	test   dl,0x2
c00227ef:	74 0c                	je     c00227fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00227f1:	0f b7 c8             	movzx  ecx,ax
c00227f4:	89 d8                	mov    eax,ebx
c00227f6:	c1 e0 10             	shl    eax,0x10
c00227f9:	09 c8                	or     eax,ecx
c00227fb:	eb 05                	jmp    c0022802 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00227fd:	66 31 c0             	xor    ax,ax
c0022800:	09 d8                	or     eax,ebx
c0022802:	ef                   	out    dx,eax
c0022803:	83 c4 0c             	add    esp,0xc
c0022806:	5b                   	pop    ebx
c0022807:	5e                   	pop    esi
c0022808:	5f                   	pop    edi
c0022809:	5d                   	pop    ebp
c002280a:	c3                   	ret    
c002280b:	c7 44 24 20 00 c0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c000
c0022813:	83 c4 0c             	add    esp,0xc
c0022816:	5b                   	pop    ebx
c0022817:	5e                   	pop    esi
c0022818:	5f                   	pop    edi
c0022819:	5d                   	pop    ebp
c002281a:	e9 00 76 ff ff       	jmp    c0019e1f <Krnl::panic(char const*)>
c002281f:	90                   	nop

c0022820 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0022820:	55                   	push   ebp
c0022821:	57                   	push   edi
c0022822:	56                   	push   esi
c0022823:	53                   	push   ebx
c0022824:	81 ec 2c 01 00 00    	sub    esp,0x12c
c002282a:	80 3d b0 1c 03 c0 00 	cmp    BYTE PTR ds:0xc0031cb0,0x0
c0022831:	0f 85 84 00 00 00    	jne    c00228bb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0022837:	83 ec 0c             	sub    esp,0xc
c002283a:	68 14 01 00 00       	push   0x114
c002283f:	e8 55 cd fe ff       	call   c000f599 <malloc>
c0022844:	83 c4 0c             	add    esp,0xc
c0022847:	89 c3                	mov    ebx,eax
c0022849:	ff 35 b0 0e 03 c0    	push   DWORD PTR ds:0xc0030eb0
c002284f:	68 06 c0 02 c0       	push   0xc002c006
c0022854:	50                   	push   eax
c0022855:	e8 b8 03 ff ff       	call   c0012c12 <File::File(char const*, Process*)>
c002285a:	5a                   	pop    edx
c002285b:	59                   	pop    ecx
c002285c:	6a 01                	push   0x1
c002285e:	53                   	push   ebx
c002285f:	e8 12 04 ff ff       	call   c0012c76 <File::open(FileOpenMode)>
c0022864:	83 c4 0c             	add    esp,0xc
c0022867:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c002286b:	50                   	push   eax
c002286c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022870:	50                   	push   eax
c0022871:	53                   	push   ebx
c0022872:	e8 ab 06 ff ff       	call   c0012f22 <File::stat(unsigned long long*, bool*)>
c0022877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002287b:	40                   	inc    eax
c002287c:	89 04 24             	mov    DWORD PTR [esp],eax
c002287f:	e8 15 cd fe ff       	call   c000f599 <malloc>
c0022884:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022888:	a3 ac 1c 03 c0       	mov    ds:0xc0031cac,eax
c002288d:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0022891:	5e                   	pop    esi
c0022892:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022894:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0022898:	51                   	push   ecx
c0022899:	50                   	push   eax
c002289a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002289e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00228a2:	53                   	push   ebx
c00228a3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00228a6:	83 c4 14             	add    esp,0x14
c00228a9:	53                   	push   ebx
c00228aa:	e8 25 04 ff ff       	call   c0012cd4 <File::close()>
c00228af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00228b3:	83 c4 10             	add    esp,0x10
c00228b6:	a3 a8 1c 03 c0       	mov    ds:0xc0031ca8,eax
c00228bb:	a1 a8 1c 03 c0       	mov    eax,ds:0xc0031ca8
c00228c0:	8b 15 ac 1c 03 c0    	mov    edx,DWORD PTR ds:0xc0031cac
c00228c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00228c9:	31 ff                	xor    edi,edi
c00228cb:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00228d3:	31 f6                	xor    esi,esi
c00228d5:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00228da:	31 db                	xor    ebx,ebx
c00228dc:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00228e4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00228e9:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00228f0:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00228f4:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00228fb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00228ff:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0022902:	0f 8e 6b 01 00 00    	jle    c0022a73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0022908:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c002290b:	d4 40                	aam    0x40
c002290d:	d5 39                	aad    0x39
c002290f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022913:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0022917:	d4 40                	aam    0x40
c0022919:	d5 39                	aad    0x39
c002291b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002291f:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0022923:	d4 40                	aam    0x40
c0022925:	d5 39                	aad    0x39
c0022927:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c002292b:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002292f:	d4 40                	aam    0x40
c0022931:	d5 39                	aad    0x39
c0022933:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0022937:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c002293b:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002293f:	3c 56                	cmp    al,0x56
c0022941:	74 45                	je     c0022988 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c0022943:	d4 40                	aam    0x40
c0022945:	d5 39                	aad    0x39
c0022947:	8d 48 d0             	lea    ecx,[eax-0x30]
c002294a:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002294e:	0f b6 c9             	movzx  ecx,cl
c0022951:	c1 e1 04             	shl    ecx,0x4
c0022954:	d4 40                	aam    0x40
c0022956:	d5 39                	aad    0x39
c0022958:	8d 58 d0             	lea    ebx,[eax-0x30]
c002295b:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c002295f:	0f b6 db             	movzx  ebx,bl
c0022962:	09 cb                	or     ebx,ecx
c0022964:	c1 e3 04             	shl    ebx,0x4
c0022967:	d4 40                	aam    0x40
c0022969:	d5 39                	aad    0x39
c002296b:	8d 48 d0             	lea    ecx,[eax-0x30]
c002296e:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c0022972:	0f b6 c9             	movzx  ecx,cl
c0022975:	09 cb                	or     ebx,ecx
c0022977:	c1 e3 04             	shl    ebx,0x4
c002297a:	89 d9                	mov    ecx,ebx
c002297c:	d4 40                	aam    0x40
c002297e:	d5 39                	aad    0x39
c0022980:	8d 58 d0             	lea    ebx,[eax-0x30]
c0022983:	0f b6 db             	movzx  ebx,bl
c0022986:	09 cb                	or     ebx,ecx
c0022988:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c002298c:	80 f9 44             	cmp    cl,0x44
c002298f:	74 47                	je     c00229d8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0022991:	88 c8                	mov    al,cl
c0022993:	d4 40                	aam    0x40
c0022995:	d5 39                	aad    0x39
c0022997:	83 e8 30             	sub    eax,0x30
c002299a:	0f b6 e8             	movzx  ebp,al
c002299d:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00229a1:	c1 e5 04             	shl    ebp,0x4
c00229a4:	d4 40                	aam    0x40
c00229a6:	d5 39                	aad    0x39
c00229a8:	83 e8 30             	sub    eax,0x30
c00229ab:	0f b6 f0             	movzx  esi,al
c00229ae:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00229b2:	09 ee                	or     esi,ebp
c00229b4:	c1 e6 04             	shl    esi,0x4
c00229b7:	d4 40                	aam    0x40
c00229b9:	d5 39                	aad    0x39
c00229bb:	83 e8 30             	sub    eax,0x30
c00229be:	0f b6 e8             	movzx  ebp,al
c00229c1:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00229c5:	09 ee                	or     esi,ebp
c00229c7:	c1 e6 04             	shl    esi,0x4
c00229ca:	89 f5                	mov    ebp,esi
c00229cc:	d4 40                	aam    0x40
c00229ce:	d5 39                	aad    0x39
c00229d0:	83 e8 30             	sub    eax,0x30
c00229d3:	0f b6 f0             	movzx  esi,al
c00229d6:	09 ee                	or     esi,ebp
c00229d8:	83 c7 10             	add    edi,0x10
c00229db:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00229df:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00229e2:	3c 0a                	cmp    al,0xa
c00229e4:	74 09                	je     c00229ef <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00229e6:	45                   	inc    ebp
c00229e7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00229ea:	75 16                	jne    c0022a02 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00229ec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00229ef:	3c 0a                	cmp    al,0xa
c00229f1:	0f 94 c0             	sete   al
c00229f4:	0f b6 c0             	movzx  eax,al
c00229f7:	01 c7                	add    edi,eax
c00229f9:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00229fe:	75 0c                	jne    c0022a0c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c0022a00:	eb 15                	jmp    c0022a17 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c0022a02:	47                   	inc    edi
c0022a03:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0022a06:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0022a0a:	eb d3                	jmp    c00229df <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0022a0c:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0022a11:	0f 85 e8 fe ff ff    	jne    c00228ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a17:	80 f9 44             	cmp    cl,0x44
c0022a1a:	74 0b                	je     c0022a27 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0022a1c:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0022a21:	0f 85 d8 fe ff ff    	jne    c00228ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a27:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0022a2b:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0022a2f:	c1 e1 04             	shl    ecx,0x4
c0022a32:	83 e8 30             	sub    eax,0x30
c0022a35:	09 c8                	or     eax,ecx
c0022a37:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0022a3b:	0f 85 be fe ff ff    	jne    c00228ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a41:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0022a45:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022a49:	c1 e1 04             	shl    ecx,0x4
c0022a4c:	83 e8 30             	sub    eax,0x30
c0022a4f:	09 c8                	or     eax,ecx
c0022a51:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0022a55:	0f 85 a4 fe ff ff    	jne    c00228ff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0022a5b:	50                   	push   eax
c0022a5c:	50                   	push   eax
c0022a5d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022a61:	50                   	push   eax
c0022a62:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0022a69:	e8 9e dd fd ff       	call   c000080c <strcpy>
c0022a6e:	83 c4 10             	add    esp,0x10
c0022a71:	eb 15                	jmp    c0022a88 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c0022a73:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a7a:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0022a85:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0022a88:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0022a8f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0022a95:	5b                   	pop    ebx
c0022a96:	5e                   	pop    esi
c0022a97:	5f                   	pop    edi
c0022a98:	5d                   	pop    ebp
c0022a99:	c3                   	ret    

c0022a9a <PCI::checkBus(unsigned char)>:
c0022a9a:	56                   	push   esi
c0022a9b:	53                   	push   ebx
c0022a9c:	31 db                	xor    ebx,ebx
c0022a9e:	51                   	push   ecx
c0022a9f:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022aa4:	52                   	push   edx
c0022aa5:	53                   	push   ebx
c0022aa6:	43                   	inc    ebx
c0022aa7:	56                   	push   esi
c0022aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022aac:	e8 37 03 00 00       	call   c0022de8 <PCI::checkDevice(unsigned char, unsigned char)>
c0022ab1:	83 c4 10             	add    esp,0x10
c0022ab4:	83 fb 20             	cmp    ebx,0x20
c0022ab7:	75 eb                	jne    c0022aa4 <PCI::checkBus(unsigned char)+0xa>
c0022ab9:	58                   	pop    eax
c0022aba:	5b                   	pop    ebx
c0022abb:	5e                   	pop    esi
c0022abc:	c3                   	ret    
c0022abd:	90                   	nop

c0022abe <PCI::foundDevice(PCIDeviceInfo)>:
c0022abe:	55                   	push   ebp
c0022abf:	57                   	push   edi
c0022ac0:	56                   	push   esi
c0022ac1:	53                   	push   ebx
c0022ac2:	83 ec 1c             	sub    esp,0x1c
c0022ac5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022ac9:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022acf:	0f 84 52 01 00 00    	je     c0022c27 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022ad5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022ad9:	66 81 f9 06 04       	cmp    cx,0x406
c0022ade:	75 2c                	jne    c0022b0c <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022ae0:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022ae5:	50                   	push   eax
c0022ae6:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022aeb:	50                   	push   eax
c0022aec:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022af1:	50                   	push   eax
c0022af2:	56                   	push   esi
c0022af3:	e8 b4 fb ff ff       	call   c00226ac <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022af8:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022afc:	0f b6 c0             	movzx  eax,al
c0022aff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022b03:	83 c4 2c             	add    esp,0x2c
c0022b06:	5b                   	pop    ebx
c0022b07:	5e                   	pop    esi
c0022b08:	5f                   	pop    edi
c0022b09:	5d                   	pop    ebp
c0022b0a:	eb 8e                	jmp    c0022a9a <PCI::checkBus(unsigned char)>
c0022b0c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022b10:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022b16:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022b1a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022b1e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022b22:	88 d3                	mov    bl,dl
c0022b24:	85 c0                	test   eax,eax
c0022b26:	74 33                	je     c0022b5b <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022b28:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022b2b:	85 d2                	test   edx,edx
c0022b2d:	74 28                	je     c0022b57 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b2f:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022b35:	31 ef                	xor    edi,ebp
c0022b37:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022b3d:	75 18                	jne    c0022b57 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b3f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022b43:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022b49:	75 0c                	jne    c0022b57 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022b4b:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022b51:	0f 84 d0 00 00 00    	je     c0022c27 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022b57:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b59:	eb c9                	jmp    c0022b24 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022b5b:	66 81 f9 01 06       	cmp    cx,0x601
c0022b60:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022b64:	75 19                	jne    c0022b7f <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022b66:	83 ec 0c             	sub    esp,0xc
c0022b69:	68 64 01 00 00       	push   0x164
c0022b6e:	e8 26 ca fe ff       	call   c000f599 <malloc>
c0022b73:	89 c5                	mov    ebp,eax
c0022b75:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b78:	e8 85 0e 00 00       	call   c0023a02 <SATABus::SATABus()>
c0022b7d:	eb 1e                	jmp    c0022b9d <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022b7f:	66 81 f9 01 01       	cmp    cx,0x101
c0022b84:	75 60                	jne    c0022be6 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022b86:	83 ec 0c             	sub    esp,0xc
c0022b89:	68 70 02 00 00       	push   0x270
c0022b8e:	e8 06 ca fe ff       	call   c000f599 <malloc>
c0022b93:	89 c5                	mov    ebp,eax
c0022b95:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b98:	e8 0f 03 00 00       	call   c0022eac <IDE::IDE()>
c0022b9d:	58                   	pop    eax
c0022b9e:	5a                   	pop    edx
c0022b9f:	55                   	push   ebp
c0022ba0:	56                   	push   esi
c0022ba1:	e8 46 0f ff ff       	call   c0013aec <Device::addChild(Device*)>
c0022ba6:	83 ec 1c             	sub    esp,0x1c
c0022ba9:	b9 09 00 00 00       	mov    ecx,0x9
c0022bae:	fc                   	cld    
c0022baf:	89 e7                	mov    edi,esp
c0022bb1:	89 de                	mov    esi,ebx
c0022bb3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022bb5:	55                   	push   ebp
c0022bb6:	e8 43 0e ff ff       	call   c00139fe <Device::preOpenPCI(PCIDeviceInfo)>
c0022bbb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022bbe:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022bc2:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022bca:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022bd2:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022bda:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022bdd:	83 c4 4c             	add    esp,0x4c
c0022be0:	5b                   	pop    ebx
c0022be1:	5e                   	pop    esi
c0022be2:	5f                   	pop    edi
c0022be3:	5d                   	pop    ebp
c0022be4:	ff e0                	jmp    eax
c0022be6:	83 ec 0c             	sub    esp,0xc
c0022be9:	68 58 01 00 00       	push   0x158
c0022bee:	e8 a6 c9 fe ff       	call   c000f599 <malloc>
c0022bf3:	89 c5                	mov    ebp,eax
c0022bf5:	58                   	pop    eax
c0022bf6:	5a                   	pop    edx
c0022bf7:	68 1f c0 02 c0       	push   0xc002c01f
c0022bfc:	55                   	push   ebp
c0022bfd:	e8 f4 11 ff ff       	call   c0013df6 <DriverlessDevice::DriverlessDevice(char const*)>
c0022c02:	59                   	pop    ecx
c0022c03:	5f                   	pop    edi
c0022c04:	55                   	push   ebp
c0022c05:	56                   	push   esi
c0022c06:	e8 e1 0e ff ff       	call   c0013aec <Device::addChild(Device*)>
c0022c0b:	b9 09 00 00 00       	mov    ecx,0x9
c0022c10:	fc                   	cld    
c0022c11:	89 df                	mov    edi,ebx
c0022c13:	89 de                	mov    esi,ebx
c0022c15:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022c17:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022c1b:	83 c4 2c             	add    esp,0x2c
c0022c1e:	5b                   	pop    ebx
c0022c1f:	5e                   	pop    esi
c0022c20:	5f                   	pop    edi
c0022c21:	5d                   	pop    ebp
c0022c22:	e9 d7 0d ff ff       	jmp    c00139fe <Device::preOpenPCI(PCIDeviceInfo)>
c0022c27:	83 c4 1c             	add    esp,0x1c
c0022c2a:	5b                   	pop    ebx
c0022c2b:	5e                   	pop    esi
c0022c2c:	5f                   	pop    edi
c0022c2d:	5d                   	pop    ebp
c0022c2e:	c3                   	ret    
c0022c2f:	90                   	nop

c0022c30 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022c30:	55                   	push   ebp
c0022c31:	57                   	push   edi
c0022c32:	56                   	push   esi
c0022c33:	53                   	push   ebx
c0022c34:	83 ec 68             	sub    esp,0x68
c0022c37:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0022c3b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0022c42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022c46:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0022c4d:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0022c52:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022c56:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0022c5d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0022c62:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022c66:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c0022c6b:	6a 0c                	push   0xc
c0022c6d:	57                   	push   edi
c0022c6e:	53                   	push   ebx
c0022c6f:	56                   	push   esi
c0022c70:	55                   	push   ebp
c0022c71:	e8 88 f8 ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022c76:	83 c4 20             	add    esp,0x20
c0022c79:	57                   	push   edi
c0022c7a:	53                   	push   ebx
c0022c7b:	56                   	push   esi
c0022c7c:	55                   	push   ebp
c0022c7d:	e8 70 f9 ff ff       	call   c00225f2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022c82:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c0022c87:	57                   	push   edi
c0022c88:	53                   	push   ebx
c0022c89:	56                   	push   esi
c0022c8a:	55                   	push   ebp
c0022c8b:	e8 f8 f9 ff ff       	call   c0022688 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022c90:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0022c94:	83 c4 14             	add    esp,0x14
c0022c97:	6a 3c                	push   0x3c
c0022c99:	57                   	push   edi
c0022c9a:	53                   	push   ebx
c0022c9b:	56                   	push   esi
c0022c9c:	55                   	push   ebp
c0022c9d:	e8 5c f8 ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ca2:	0f b6 c4             	movzx  eax,ah
c0022ca5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0022ca9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0022cad:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c0022cb1:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0022cb6:	83 c4 20             	add    esp,0x20
c0022cb9:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022cbf:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022cc6:	74 7c                	je     c0022d44 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022cc8:	31 c0                	xor    eax,eax
c0022cca:	8b 15 68 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d968
c0022cd0:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022cd6:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c0022cdc:	7e 66                	jle    c0022d44 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0022cde:	8d 14 c2             	lea    edx,[edx+eax*8]
c0022ce1:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022ce8:	39 cb                	cmp    ebx,ecx
c0022cea:	75 55                	jne    c0022d41 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022cec:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022cf3:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0022cf7:	75 48                	jne    c0022d41 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0022cf9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022cfd:	83 ec 0c             	sub    esp,0xc
c0022d00:	68 39 c0 02 c0       	push   0xc002c039
c0022d05:	e8 a9 f9 fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0022d0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022d0e:	8b 15 68 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d968
c0022d14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0022d18:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022d1e:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0022d26:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0022d2a:	52                   	push   edx
c0022d2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d2f:	53                   	push   ebx
c0022d30:	68 5e c0 02 c0       	push   0xc002c05e
c0022d35:	e8 79 f9 fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0022d3a:	83 c4 20             	add    esp,0x20
c0022d3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022d41:	40                   	inc    eax
c0022d42:	eb 86                	jmp    c0022cca <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0022d44:	31 d2                	xor    edx,edx
c0022d46:	83 ec 0c             	sub    esp,0xc
c0022d49:	57                   	push   edi
c0022d4a:	53                   	push   ebx
c0022d4b:	56                   	push   esi
c0022d4c:	52                   	push   edx
c0022d4d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0022d51:	55                   	push   ebp
c0022d52:	e8 7d f9 ff ff       	call   c00226d4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d57:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022d5b:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022d5f:	42                   	inc    edx
c0022d60:	83 c4 20             	add    esp,0x20
c0022d63:	83 fa 06             	cmp    edx,0x6
c0022d66:	75 de                	jne    c0022d46 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c0022d68:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0022d6d:	83 ec 0c             	sub    esp,0xc
c0022d70:	86 e0                	xchg   al,ah
c0022d72:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0022d77:	6a 02                	push   0x2
c0022d79:	57                   	push   edi
c0022d7a:	53                   	push   ebx
c0022d7b:	56                   	push   esi
c0022d7c:	55                   	push   ebp
c0022d7d:	e8 7c f7 ff ff       	call   c00224fe <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022d82:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0022d87:	83 c4 20             	add    esp,0x20
c0022d8a:	57                   	push   edi
c0022d8b:	53                   	push   ebx
c0022d8c:	56                   	push   esi
c0022d8d:	55                   	push   ebp
c0022d8e:	e8 a9 f8 ff ff       	call   c002263c <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022d93:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022d97:	57                   	push   edi
c0022d98:	53                   	push   ebx
c0022d99:	56                   	push   esi
c0022d9a:	55                   	push   ebp
c0022d9b:	e8 06 f8 ff ff       	call   c00225a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022da0:	b9 09 00 00 00       	mov    ecx,0x9
c0022da5:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0022daa:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0022dae:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0022db2:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0022db6:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0022dba:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022dbe:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0022dc2:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0022dc6:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0022dca:	83 ec 0c             	sub    esp,0xc
c0022dcd:	fc                   	cld    
c0022dce:	89 e7                	mov    edi,esp
c0022dd0:	8d 74 24 58          	lea    esi,[esp+0x58]
c0022dd4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022dd6:	55                   	push   ebp
c0022dd7:	e8 e2 fc ff ff       	call   c0022abe <PCI::foundDevice(PCIDeviceInfo)>
c0022ddc:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022de2:	5b                   	pop    ebx
c0022de3:	5e                   	pop    esi
c0022de4:	5f                   	pop    edi
c0022de5:	5d                   	pop    ebp
c0022de6:	c3                   	ret    
c0022de7:	90                   	nop

c0022de8 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022de8:	55                   	push   ebp
c0022de9:	57                   	push   edi
c0022dea:	56                   	push   esi
c0022deb:	53                   	push   ebx
c0022dec:	83 ec 0c             	sub    esp,0xc
c0022def:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022df3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022df8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022dfd:	6a 00                	push   0x0
c0022dff:	56                   	push   esi
c0022e00:	57                   	push   edi
c0022e01:	55                   	push   ebp
c0022e02:	e8 9f f7 ff ff       	call   c00225a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e07:	6a 00                	push   0x0
c0022e09:	56                   	push   esi
c0022e0a:	57                   	push   edi
c0022e0b:	55                   	push   ebp
c0022e0c:	e8 1f fe ff ff       	call   c0022c30 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e11:	83 c4 20             	add    esp,0x20
c0022e14:	6a 00                	push   0x0
c0022e16:	56                   	push   esi
c0022e17:	57                   	push   edi
c0022e18:	55                   	push   ebp
c0022e19:	e8 ac f7 ff ff       	call   c00225ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e1e:	83 c4 10             	add    esp,0x10
c0022e21:	84 c0                	test   al,al
c0022e23:	79 27                	jns    c0022e4c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022e25:	bb 01 00 00 00       	mov    ebx,0x1
c0022e2a:	53                   	push   ebx
c0022e2b:	56                   	push   esi
c0022e2c:	57                   	push   edi
c0022e2d:	55                   	push   ebp
c0022e2e:	e8 73 f7 ff ff       	call   c00225a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e33:	83 c4 10             	add    esp,0x10
c0022e36:	66 40                	inc    ax
c0022e38:	74 0c                	je     c0022e46 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022e3a:	53                   	push   ebx
c0022e3b:	56                   	push   esi
c0022e3c:	57                   	push   edi
c0022e3d:	55                   	push   ebp
c0022e3e:	e8 ed fd ff ff       	call   c0022c30 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022e43:	83 c4 10             	add    esp,0x10
c0022e46:	43                   	inc    ebx
c0022e47:	83 fb 08             	cmp    ebx,0x8
c0022e4a:	75 de                	jne    c0022e2a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022e4c:	83 c4 0c             	add    esp,0xc
c0022e4f:	5b                   	pop    ebx
c0022e50:	5e                   	pop    esi
c0022e51:	5f                   	pop    edi
c0022e52:	5d                   	pop    ebp
c0022e53:	c3                   	ret    

c0022e54 <PCI::detect()>:
c0022e54:	56                   	push   esi
c0022e55:	53                   	push   ebx
c0022e56:	53                   	push   ebx
c0022e57:	31 db                	xor    ebx,ebx
c0022e59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e5d:	6a 00                	push   0x0
c0022e5f:	6a 00                	push   0x0
c0022e61:	6a 00                	push   0x0
c0022e63:	56                   	push   esi
c0022e64:	e8 61 f7 ff ff       	call   c00225ca <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022e69:	83 c4 10             	add    esp,0x10
c0022e6c:	a8 80                	test   al,0x80
c0022e6e:	75 21                	jne    c0022e91 <PCI::detect()+0x3d>
c0022e70:	51                   	push   ecx
c0022e71:	51                   	push   ecx
c0022e72:	6a 00                	push   0x0
c0022e74:	56                   	push   esi
c0022e75:	e8 20 fc ff ff       	call   c0022a9a <PCI::checkBus(unsigned char)>
c0022e7a:	83 c4 10             	add    esp,0x10
c0022e7d:	eb 24                	jmp    c0022ea3 <PCI::detect()+0x4f>
c0022e7f:	52                   	push   edx
c0022e80:	52                   	push   edx
c0022e81:	53                   	push   ebx
c0022e82:	43                   	inc    ebx
c0022e83:	56                   	push   esi
c0022e84:	e8 11 fc ff ff       	call   c0022a9a <PCI::checkBus(unsigned char)>
c0022e89:	83 c4 10             	add    esp,0x10
c0022e8c:	83 fb 08             	cmp    ebx,0x8
c0022e8f:	74 12                	je     c0022ea3 <PCI::detect()+0x4f>
c0022e91:	53                   	push   ebx
c0022e92:	6a 00                	push   0x0
c0022e94:	6a 00                	push   0x0
c0022e96:	56                   	push   esi
c0022e97:	e8 0a f7 ff ff       	call   c00225a6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022e9c:	83 c4 10             	add    esp,0x10
c0022e9f:	66 40                	inc    ax
c0022ea1:	74 dc                	je     c0022e7f <PCI::detect()+0x2b>
c0022ea3:	58                   	pop    eax
c0022ea4:	5b                   	pop    ebx
c0022ea5:	5e                   	pop    esi
c0022ea6:	c3                   	ret    
c0022ea7:	90                   	nop

c0022ea8 <IDE::close(int, int, void*)>:
c0022ea8:	83 c8 ff             	or     eax,0xffffffff
c0022eab:	c3                   	ret    

c0022eac <IDE::IDE()>:
c0022eac:	83 ec 0c             	sub    esp,0xc
c0022eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022eb3:	83 ec 08             	sub    esp,0x8
c0022eb6:	68 a8 c0 02 c0       	push   0xc002c0a8
c0022ebb:	50                   	push   eax
c0022ebc:	e8 d9 0f ff ff       	call   c0013e9a <HardDiskController::HardDiskController(char const*)>
c0022ec1:	83 c4 10             	add    esp,0x10
c0022ec4:	ba 38 c1 02 c0       	mov    edx,0xc002c138
c0022ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ecd:	89 10                	mov    DWORD PTR [eax],edx
c0022ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ed3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022eda:	90                   	nop
c0022edb:	83 c4 0c             	add    esp,0xc
c0022ede:	c3                   	ret    
c0022edf:	90                   	nop

c0022ee0 <IDE::prepareInterrupt(unsigned char)>:
c0022ee0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022ee5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022ee9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022ef1:	c3                   	ret    

c0022ef2 <selectDrive(unsigned char, unsigned char)>:
c0022ef2:	c3                   	ret    
c0022ef3:	90                   	nop

c0022ef4 <IDE::getBase(unsigned char)>:
c0022ef4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022ef9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022efd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022f05:	c3                   	ret    

c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022f06:	55                   	push   ebp
c0022f07:	57                   	push   edi
c0022f08:	56                   	push   esi
c0022f09:	53                   	push   ebx
c0022f0a:	83 ec 1c             	sub    esp,0x1c
c0022f0d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022f11:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022f15:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022f18:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022f1c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022f20:	80 f9 03             	cmp    cl,0x3
c0022f23:	77 51                	ja     c0022f76 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022f25:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022f29:	0f b6 f2             	movzx  esi,dl
c0022f2c:	0f b6 db             	movzx  ebx,bl
c0022f2f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022f32:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022f36:	83 ca 80             	or     edx,0xffffff80
c0022f39:	0f b6 d2             	movzx  edx,dl
c0022f3c:	52                   	push   edx
c0022f3d:	6a 0c                	push   0xc
c0022f3f:	56                   	push   esi
c0022f40:	57                   	push   edi
c0022f41:	e8 c0 ff ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f46:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022f4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022f4f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022f53:	ee                   	out    dx,al
c0022f54:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022f59:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022f5d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022f61:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022f65:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022f6d:	83 c4 2c             	add    esp,0x2c
c0022f70:	5b                   	pop    ebx
c0022f71:	5e                   	pop    esi
c0022f72:	5f                   	pop    edi
c0022f73:	5d                   	pop    ebp
c0022f74:	eb 90                	jmp    c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022f76:	80 fb 07             	cmp    bl,0x7
c0022f79:	77 12                	ja     c0022f8d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022f7b:	0f b6 d2             	movzx  edx,dl
c0022f7e:	0f b6 db             	movzx  ebx,bl
c0022f81:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022f89:	89 da                	mov    edx,ebx
c0022f8b:	eb 2f                	jmp    c0022fbc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022f8d:	80 fb 0d             	cmp    bl,0xd
c0022f90:	77 13                	ja     c0022fa5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022f92:	0f b6 d2             	movzx  edx,dl
c0022f95:	0f b6 db             	movzx  ebx,bl
c0022f98:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022f9f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022fa3:	eb 17                	jmp    c0022fbc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022fa5:	80 fb 15             	cmp    bl,0x15
c0022fa8:	77 13                	ja     c0022fbd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022faa:	0f b6 d2             	movzx  edx,dl
c0022fad:	0f b6 db             	movzx  ebx,bl
c0022fb0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022fb8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022fbc:	ee                   	out    dx,al
c0022fbd:	83 c4 1c             	add    esp,0x1c
c0022fc0:	5b                   	pop    ebx
c0022fc1:	5e                   	pop    esi
c0022fc2:	5f                   	pop    edi
c0022fc3:	5d                   	pop    ebp
c0022fc4:	c3                   	ret    
c0022fc5:	90                   	nop

c0022fc6 <IDE::read(unsigned char, unsigned char)>:
c0022fc6:	55                   	push   ebp
c0022fc7:	57                   	push   edi
c0022fc8:	56                   	push   esi
c0022fc9:	53                   	push   ebx
c0022fca:	83 ec 1c             	sub    esp,0x1c
c0022fcd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022fd1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022fd5:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022fd8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022fdc:	3c 03                	cmp    al,0x3
c0022fde:	77 43                	ja     c0023023 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022fe0:	0f b6 f2             	movzx  esi,dl
c0022fe3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022fe6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022fea:	83 c8 80             	or     eax,0xffffff80
c0022fed:	0f b6 c0             	movzx  eax,al
c0022ff0:	50                   	push   eax
c0022ff1:	6a 0c                	push   0xc
c0022ff3:	56                   	push   esi
c0022ff4:	57                   	push   edi
c0022ff5:	e8 0c ff ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022ffa:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022fff:	0f b6 c3             	movzx  eax,bl
c0023002:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023006:	ec                   	in     al,dx
c0023007:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002300b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023010:	52                   	push   edx
c0023011:	6a 0c                	push   0xc
c0023013:	56                   	push   esi
c0023014:	57                   	push   edi
c0023015:	e8 ec fe ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002301a:	83 c4 20             	add    esp,0x20
c002301d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023021:	eb 49                	jmp    c002306c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023023:	80 fb 07             	cmp    bl,0x7
c0023026:	77 12                	ja     c002303a <IDE::read(unsigned char, unsigned char)+0x74>
c0023028:	0f b6 d2             	movzx  edx,dl
c002302b:	0f b6 c3             	movzx  eax,bl
c002302e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023036:	89 c2                	mov    edx,eax
c0023038:	eb 31                	jmp    c002306b <IDE::read(unsigned char, unsigned char)+0xa5>
c002303a:	80 fb 0d             	cmp    bl,0xd
c002303d:	77 13                	ja     c0023052 <IDE::read(unsigned char, unsigned char)+0x8c>
c002303f:	0f b6 d2             	movzx  edx,dl
c0023042:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023049:	0f b6 d3             	movzx  edx,bl
c002304c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023050:	eb 19                	jmp    c002306b <IDE::read(unsigned char, unsigned char)+0xa5>
c0023052:	31 c0                	xor    eax,eax
c0023054:	80 fb 15             	cmp    bl,0x15
c0023057:	77 13                	ja     c002306c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023059:	0f b6 d2             	movzx  edx,dl
c002305c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023064:	0f b6 d3             	movzx  edx,bl
c0023067:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002306b:	ec                   	in     al,dx
c002306c:	83 c4 1c             	add    esp,0x1c
c002306f:	5b                   	pop    ebx
c0023070:	5e                   	pop    esi
c0023071:	5f                   	pop    edi
c0023072:	5d                   	pop    ebp
c0023073:	c3                   	ret    

c0023074 <IDE::waitInterrupt(unsigned char)>:
c0023074:	55                   	push   ebp
c0023075:	57                   	push   edi
c0023076:	56                   	push   esi
c0023077:	53                   	push   ebx
c0023078:	31 db                	xor    ebx,ebx
c002307a:	83 ec 0c             	sub    esp,0xc
c002307d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023081:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023086:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002308e:	89 e8                	mov    eax,ebp
c0023090:	84 c0                	test   al,al
c0023092:	75 34                	jne    c00230c8 <IDE::waitInterrupt(unsigned char)+0x54>
c0023094:	52                   	push   edx
c0023095:	6a 0c                	push   0xc
c0023097:	56                   	push   esi
c0023098:	57                   	push   edi
c0023099:	e8 28 ff ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c002309e:	83 c4 10             	add    esp,0x10
c00230a1:	a8 01                	test   al,0x1
c00230a3:	75 2b                	jne    c00230d0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230a5:	f6 c3 04             	test   bl,0x4
c00230a8:	75 16                	jne    c00230c0 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230aa:	83 fb 32             	cmp    ebx,0x32
c00230ad:	7e 11                	jle    c00230c0 <IDE::waitInterrupt(unsigned char)+0x4c>
c00230af:	50                   	push   eax
c00230b0:	50                   	push   eax
c00230b1:	6a 00                	push   0x0
c00230b3:	68 80 96 98 00       	push   0x989680
c00230b8:	e8 c6 ab ff ff       	call   c001dc83 <nanoSleep(unsigned long long)>
c00230bd:	83 c4 10             	add    esp,0x10
c00230c0:	83 fb 3c             	cmp    ebx,0x3c
c00230c3:	74 0b                	je     c00230d0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00230c5:	43                   	inc    ebx
c00230c6:	eb be                	jmp    c0023086 <IDE::waitInterrupt(unsigned char)+0x12>
c00230c8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00230d0:	83 c4 0c             	add    esp,0xc
c00230d3:	89 e8                	mov    eax,ebp
c00230d5:	5b                   	pop    ebx
c00230d6:	5e                   	pop    esi
c00230d7:	5f                   	pop    edi
c00230d8:	5d                   	pop    ebp
c00230d9:	c3                   	ret    

c00230da <ideChannel0IRQHandler(regs*, void*)>:
c00230da:	83 ec 10             	sub    esp,0x10
c00230dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230e1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00230e8:	6a 07                	push   0x7
c00230ea:	6a 00                	push   0x0
c00230ec:	50                   	push   eax
c00230ed:	e8 d4 fe ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00230f2:	83 c4 1c             	add    esp,0x1c
c00230f5:	c3                   	ret    

c00230f6 <ideChannel1IRQHandler(regs*, void*)>:
c00230f6:	83 ec 10             	sub    esp,0x10
c00230f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00230fd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023104:	6a 07                	push   0x7
c0023106:	6a 01                	push   0x1
c0023108:	50                   	push   eax
c0023109:	e8 b8 fe ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c002310e:	83 c4 1c             	add    esp,0x1c
c0023111:	c3                   	ret    

c0023112 <IDE::enableIRQs(unsigned char, bool)>:
c0023112:	57                   	push   edi
c0023113:	56                   	push   esi
c0023114:	be 04 00 00 00       	mov    esi,0x4
c0023119:	53                   	push   ebx
c002311a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c002311f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023123:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023128:	0f 94 c0             	sete   al
c002312b:	d1 e0                	shl    eax,1
c002312d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023134:	0f b6 c0             	movzx  eax,al
c0023137:	50                   	push   eax
c0023138:	6a 0c                	push   0xc
c002313a:	57                   	push   edi
c002313b:	53                   	push   ebx
c002313c:	e8 c5 fd ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023141:	83 c4 10             	add    esp,0x10
c0023144:	50                   	push   eax
c0023145:	6a 0c                	push   0xc
c0023147:	57                   	push   edi
c0023148:	53                   	push   ebx
c0023149:	e8 78 fe ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c002314e:	83 c4 10             	add    esp,0x10
c0023151:	4e                   	dec    esi
c0023152:	75 f0                	jne    c0023144 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023154:	5b                   	pop    ebx
c0023155:	5e                   	pop    esi
c0023156:	5f                   	pop    edi
c0023157:	c3                   	ret    

c0023158 <IDE::open(int, int, void*)>:
c0023158:	55                   	push   ebp
c0023159:	57                   	push   edi
c002315a:	56                   	push   esi
c002315b:	53                   	push   ebx
c002315c:	83 ec 1c             	sub    esp,0x1c
c002315f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023163:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c002316c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023175:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002317c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023183:	0f 85 b0 02 00 00    	jne    c0023439 <IDE::open(int, int, void*)+0x2e1>
c0023189:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002318f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023193:	83 e0 7f             	and    eax,0x7f
c0023196:	3c 05                	cmp    al,0x5
c0023198:	74 04                	je     c002319e <IDE::open(int, int, void*)+0x46>
c002319a:	3c 0f                	cmp    al,0xf
c002319c:	75 32                	jne    c00231d0 <IDE::open(int, int, void*)+0x78>
c002319e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c00231a4:	83 e0 fc             	and    eax,0xfffffffc
c00231a7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00231ae:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c00231b4:	83 e0 fc             	and    eax,0xfffffffc
c00231b7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c00231be:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c00231c4:	83 e0 fc             	and    eax,0xfffffffc
c00231c7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00231ce:	eb 14                	jmp    c00231e4 <IDE::open(int, int, void*)+0x8c>
c00231d0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00231da:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00231e4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c00231eb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c00231f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00231f6:	89 c6                	mov    esi,eax
c00231f8:	bf f8 0c 00 00       	mov    edi,0xcf8
c00231fd:	c1 e6 10             	shl    esi,0x10
c0023200:	89 e8                	mov    eax,ebp
c0023202:	89 fa                	mov    edx,edi
c0023204:	c1 e0 0b             	shl    eax,0xb
c0023207:	09 f0                	or     eax,esi
c0023209:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023210:	c1 e6 08             	shl    esi,0x8
c0023213:	09 c6                	or     esi,eax
c0023215:	89 f0                	mov    eax,esi
c0023217:	0d 08 00 00 80       	or     eax,0x80000008
c002321c:	ef                   	out    dx,eax
c002321d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023222:	89 ca                	mov    edx,ecx
c0023224:	ed                   	in     eax,dx
c0023225:	c1 e8 10             	shr    eax,0x10
c0023228:	3d ff ff 00 00       	cmp    eax,0xffff
c002322d:	0f 84 f5 00 00 00    	je     c0023328 <IDE::open(int, int, void*)+0x1d0>
c0023233:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023239:	89 fa                	mov    edx,edi
c002323b:	89 f0                	mov    eax,esi
c002323d:	ef                   	out    dx,eax
c002323e:	b0 fe                	mov    al,0xfe
c0023240:	89 ca                	mov    edx,ecx
c0023242:	ee                   	out    dx,al
c0023243:	89 f0                	mov    eax,esi
c0023245:	89 fa                	mov    edx,edi
c0023247:	ef                   	out    dx,eax
c0023248:	89 ca                	mov    edx,ecx
c002324a:	ed                   	in     eax,dx
c002324b:	3c fe                	cmp    al,0xfe
c002324d:	0f 85 a9 00 00 00    	jne    c00232fc <IDE::open(int, int, void*)+0x1a4>
c0023253:	8b 15 68 d9 02 c0    	mov    edx,DWORD PTR ds:0xc002d968
c0023259:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023260:	74 33                	je     c0023295 <IDE::open(int, int, void*)+0x13d>
c0023262:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023268:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c002326c:	40                   	inc    eax
c002326d:	83 ec 0c             	sub    esp,0xc
c0023270:	0f b6 c0             	movzx  eax,al
c0023273:	50                   	push   eax
c0023274:	55                   	push   ebp
c0023275:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023279:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002327f:	51                   	push   ecx
c0023280:	e8 53 48 ff ff       	call   c0017ad8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023285:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002328a:	83 c4 1c             	add    esp,0x1c
c002328d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023293:	eb 0a                	jmp    c002329f <IDE::open(int, int, void*)+0x147>
c0023295:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002329f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c00232a6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c00232ad:	c1 e1 10             	shl    ecx,0x10
c00232b0:	c1 e0 08             	shl    eax,0x8
c00232b3:	bf f8 0c 00 00       	mov    edi,0xcf8
c00232b8:	09 c1                	or     ecx,eax
c00232ba:	89 fa                	mov    edx,edi
c00232bc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c00232c3:	c1 e0 0b             	shl    eax,0xb
c00232c6:	09 c1                	or     ecx,eax
c00232c8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c00232ce:	89 c8                	mov    eax,ecx
c00232d0:	ef                   	out    dx,eax
c00232d1:	be fc 0c 00 00       	mov    esi,0xcfc
c00232d6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c00232dc:	89 f2                	mov    edx,esi
c00232de:	ee                   	out    dx,al
c00232df:	89 c8                	mov    eax,ecx
c00232e1:	89 fa                	mov    edx,edi
c00232e3:	ef                   	out    dx,eax
c00232e4:	89 f2                	mov    edx,esi
c00232e6:	ed                   	in     eax,dx
c00232e7:	0f b6 c0             	movzx  eax,al
c00232ea:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c00232f0:	74 46                	je     c0023338 <IDE::open(int, int, void*)+0x1e0>
c00232f2:	83 ec 0c             	sub    esp,0xc
c00232f5:	68 c0 c0 02 c0       	push   0xc002c0c0
c00232fa:	eb 34                	jmp    c0023330 <IDE::open(int, int, void*)+0x1d8>
c00232fc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023305:	75 17                	jne    c002331e <IDE::open(int, int, void*)+0x1c6>
c0023307:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002330c:	74 07                	je     c0023315 <IDE::open(int, int, void*)+0x1bd>
c002330e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023313:	75 09                	jne    c002331e <IDE::open(int, int, void*)+0x1c6>
c0023315:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002331c:	eb 1a                	jmp    c0023338 <IDE::open(int, int, void*)+0x1e0>
c002331e:	83 ec 0c             	sub    esp,0xc
c0023321:	68 c8 c0 02 c0       	push   0xc002c0c8
c0023326:	eb 08                	jmp    c0023330 <IDE::open(int, int, void*)+0x1d8>
c0023328:	83 ec 0c             	sub    esp,0xc
c002332b:	68 f9 c0 02 c0       	push   0xc002c0f9
c0023330:	e8 ea 6a ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0023335:	83 c4 10             	add    esp,0x10
c0023338:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002333f:	79 1a                	jns    c002335b <IDE::open(int, int, void*)+0x203>
c0023341:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023347:	83 e0 fc             	and    eax,0xfffffffc
c002334a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023351:	83 c0 08             	add    eax,0x8
c0023354:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002335b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023361:	89 c2                	mov    edx,eax
c0023363:	83 e2 0f             	and    edx,0xf
c0023366:	66 83 fa 08          	cmp    dx,0x8
c002336a:	75 0a                	jne    c0023376 <IDE::open(int, int, void*)+0x21e>
c002336c:	83 e8 02             	sub    eax,0x2
c002336f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023376:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002337c:	89 c2                	mov    edx,eax
c002337e:	83 e2 0f             	and    edx,0xf
c0023381:	66 83 fa 08          	cmp    dx,0x8
c0023385:	75 0a                	jne    c0023391 <IDE::open(int, int, void*)+0x239>
c0023387:	83 e8 02             	sub    eax,0x2
c002338a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023391:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023398:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002339f:	89 d0                	mov    eax,edx
c00233a1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233a4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233a8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00233ac:	8d 4a 01             	lea    ecx,[edx+0x1]
c00233af:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233b4:	0f b6 c9             	movzx  ecx,cl
c00233b7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00233be:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233c1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233c5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00233c9:	8d 50 02             	lea    edx,[eax+0x2]
c00233cc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00233d1:	0f b6 d2             	movzx  edx,dl
c00233d4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00233da:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00233dd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00233e1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00233e5:	8d 48 03             	lea    ecx,[eax+0x3]
c00233e8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00233ed:	0f b6 c9             	movzx  ecx,cl
c00233f0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00233f6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00233f9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00233fd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023401:	8d 50 04             	lea    edx,[eax+0x4]
c0023404:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002340a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002340f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023416:	66 85 f6             	test   si,si
c0023419:	74 5b                	je     c0023476 <IDE::open(int, int, void*)+0x31e>
c002341b:	0f b6 d2             	movzx  edx,dl
c002341e:	83 c0 05             	add    eax,0x5
c0023421:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023424:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023428:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002342c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023432:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023437:	eb 3d                	jmp    c0023476 <IDE::open(int, int, void*)+0x31e>
c0023439:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c002343f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023446:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002344d:	66 05 06 02          	add    ax,0x206
c0023451:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023458:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c002345f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023466:	66 05 06 02          	add    ax,0x206
c002346a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023471:	e9 e5 fe ff ff       	jmp    c002335b <IDE::open(int, int, void*)+0x203>
c0023476:	50                   	push   eax
c0023477:	50                   	push   eax
c0023478:	6a 00                	push   0x0
c002347a:	53                   	push   ebx
c002347b:	e8 60 fa ff ff       	call   c0022ee0 <IDE::prepareInterrupt(unsigned char)>
c0023480:	5a                   	pop    edx
c0023481:	59                   	pop    ecx
c0023482:	6a 01                	push   0x1
c0023484:	53                   	push   ebx
c0023485:	e8 56 fa ff ff       	call   c0022ee0 <IDE::prepareInterrupt(unsigned char)>
c002348a:	83 c4 0c             	add    esp,0xc
c002348d:	6a 00                	push   0x0
c002348f:	6a 00                	push   0x0
c0023491:	53                   	push   ebx
c0023492:	e8 7b fc ff ff       	call   c0023112 <IDE::enableIRQs(unsigned char, bool)>
c0023497:	83 c4 0c             	add    esp,0xc
c002349a:	6a 00                	push   0x0
c002349c:	6a 01                	push   0x1
c002349e:	53                   	push   ebx
c002349f:	e8 6e fc ff ff       	call   c0023112 <IDE::enableIRQs(unsigned char, bool)>
c00234a4:	83 c4 10             	add    esp,0x10
c00234a7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00234ae:	74 34                	je     c00234e4 <IDE::open(int, int, void*)+0x38c>
c00234b0:	83 ec 0c             	sub    esp,0xc
c00234b3:	53                   	push   ebx
c00234b4:	6a 01                	push   0x1
c00234b6:	68 da 30 02 c0       	push   0xc00230da
c00234bb:	6a 0e                	push   0xe
c00234bd:	53                   	push   ebx
c00234be:	e8 a1 05 ff ff       	call   c0013a64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234c3:	83 c4 14             	add    esp,0x14
c00234c6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00234cc:	53                   	push   ebx
c00234cd:	6a 01                	push   0x1
c00234cf:	68 f6 30 02 c0       	push   0xc00230f6
c00234d4:	6a 0f                	push   0xf
c00234d6:	53                   	push   ebx
c00234d7:	e8 88 05 ff ff       	call   c0013a64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00234dc:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00234e2:	eb 38                	jmp    c002351c <IDE::open(int, int, void*)+0x3c4>
c00234e4:	83 ec 0c             	sub    esp,0xc
c00234e7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00234f1:	53                   	push   ebx
c00234f2:	6a 00                	push   0x0
c00234f4:	68 da 30 02 c0       	push   0xc00230da
c00234f9:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00234ff:	53                   	push   ebx
c0023500:	e8 5f 05 ff ff       	call   c0013a64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023505:	83 c4 14             	add    esp,0x14
c0023508:	53                   	push   ebx
c0023509:	6a 00                	push   0x0
c002350b:	68 f6 30 02 c0       	push   0xc00230f6
c0023510:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023516:	53                   	push   ebx
c0023517:	e8 48 05 ff ff       	call   c0013a64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002351c:	8b 03                	mov    eax,DWORD PTR [ebx]
c002351e:	83 c4 20             	add    esp,0x20
c0023521:	83 ec 0c             	sub    esp,0xc
c0023524:	53                   	push   ebx
c0023525:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023528:	83 c4 0c             	add    esp,0xc
c002352b:	6a 07                	push   0x7
c002352d:	6a 00                	push   0x0
c002352f:	53                   	push   ebx
c0023530:	e8 91 fa ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c0023535:	83 c4 0c             	add    esp,0xc
c0023538:	6a 07                	push   0x7
c002353a:	6a 01                	push   0x1
c002353c:	53                   	push   ebx
c002353d:	e8 84 fa ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c0023542:	83 c4 0c             	add    esp,0xc
c0023545:	6a 01                	push   0x1
c0023547:	6a 00                	push   0x0
c0023549:	53                   	push   ebx
c002354a:	e8 c3 fb ff ff       	call   c0023112 <IDE::enableIRQs(unsigned char, bool)>
c002354f:	83 c4 0c             	add    esp,0xc
c0023552:	6a 01                	push   0x1
c0023554:	6a 01                	push   0x1
c0023556:	53                   	push   ebx
c0023557:	e8 b6 fb ff ff       	call   c0023112 <IDE::enableIRQs(unsigned char, bool)>
c002355c:	83 c4 2c             	add    esp,0x2c
c002355f:	31 c0                	xor    eax,eax
c0023561:	5b                   	pop    ebx
c0023562:	5e                   	pop    esi
c0023563:	5f                   	pop    edi
c0023564:	5d                   	pop    ebp
c0023565:	c3                   	ret    

c0023566 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023566:	55                   	push   ebp
c0023567:	57                   	push   edi
c0023568:	56                   	push   esi
c0023569:	53                   	push   ebx
c002356a:	83 ec 1c             	sub    esp,0x1c
c002356d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023571:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023575:	8d 50 f8             	lea    edx,[eax-0x8]
c0023578:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002357c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023580:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023584:	80 fa 03             	cmp    dl,0x3
c0023587:	77 5d                	ja     c00235e6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023589:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002358d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023591:	0f b6 db             	movzx  ebx,bl
c0023594:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023597:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002359b:	83 ca 80             	or     edx,0xffffff80
c002359e:	0f b6 d2             	movzx  edx,dl
c00235a1:	52                   	push   edx
c00235a2:	6a 0c                	push   0xc
c00235a4:	53                   	push   ebx
c00235a5:	56                   	push   esi
c00235a6:	e8 5b f9 ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235ab:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00235b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00235b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00235b8:	0f b6 c0             	movzx  eax,al
c00235bb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00235bf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00235c1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00235c6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00235ca:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00235ce:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00235d2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00235da:	83 c4 2c             	add    esp,0x2c
c00235dd:	5b                   	pop    ebx
c00235de:	5e                   	pop    esi
c00235df:	5f                   	pop    edi
c00235e0:	5d                   	pop    ebp
c00235e1:	e9 20 f9 ff ff       	jmp    c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00235e6:	3c 07                	cmp    al,0x7
c00235e8:	77 10                	ja     c00235fa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00235ea:	0f b6 db             	movzx  ebx,bl
c00235ed:	0f b6 d0             	movzx  edx,al
c00235f0:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00235f8:	eb 2d                	jmp    c0023627 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00235fa:	3c 0d                	cmp    al,0xd
c00235fc:	77 13                	ja     c0023611 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00235fe:	0f b6 db             	movzx  ebx,bl
c0023601:	0f b6 c0             	movzx  eax,al
c0023604:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002360b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002360f:	eb 16                	jmp    c0023627 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023611:	3c 15                	cmp    al,0x15
c0023613:	77 14                	ja     c0023629 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023615:	0f b6 db             	movzx  ebx,bl
c0023618:	0f b6 c0             	movzx  eax,al
c002361b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023623:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023627:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023629:	83 c4 1c             	add    esp,0x1c
c002362c:	5b                   	pop    ebx
c002362d:	5e                   	pop    esi
c002362e:	5f                   	pop    edi
c002362f:	5d                   	pop    ebp
c0023630:	c3                   	ret    
c0023631:	90                   	nop

c0023632 <IDE::detect()>:
c0023632:	55                   	push   ebp
c0023633:	57                   	push   edi
c0023634:	56                   	push   esi
c0023635:	53                   	push   ebx
c0023636:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002363c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023643:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002364a:	0f 85 9d 02 00 00    	jne    c00238ed <IDE::detect()+0x2bb>
c0023650:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023657:	31 f6                	xor    esi,esi
c0023659:	31 ed                	xor    ebp,ebp
c002365b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023663:	89 e8                	mov    eax,ebp
c0023665:	c1 e0 06             	shl    eax,0x6
c0023668:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023670:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023678:	c1 e0 04             	shl    eax,0x4
c002367b:	83 c8 a0             	or     eax,0xffffffa0
c002367e:	0f b6 c0             	movzx  eax,al
c0023681:	50                   	push   eax
c0023682:	6a 06                	push   0x6
c0023684:	56                   	push   esi
c0023685:	53                   	push   ebx
c0023686:	e8 7b f8 ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368b:	83 c4 0c             	add    esp,0xc
c002368e:	6a 0c                	push   0xc
c0023690:	56                   	push   esi
c0023691:	53                   	push   ebx
c0023692:	e8 2f f9 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c0023697:	83 c4 0c             	add    esp,0xc
c002369a:	6a 0c                	push   0xc
c002369c:	56                   	push   esi
c002369d:	53                   	push   ebx
c002369e:	e8 23 f9 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00236a3:	83 c4 0c             	add    esp,0xc
c00236a6:	6a 0c                	push   0xc
c00236a8:	56                   	push   esi
c00236a9:	53                   	push   ebx
c00236aa:	e8 17 f9 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00236af:	83 c4 0c             	add    esp,0xc
c00236b2:	6a 0c                	push   0xc
c00236b4:	56                   	push   esi
c00236b5:	53                   	push   ebx
c00236b6:	e8 0b f9 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00236bb:	68 ec 00 00 00       	push   0xec
c00236c0:	6a 07                	push   0x7
c00236c2:	56                   	push   esi
c00236c3:	53                   	push   ebx
c00236c4:	e8 3d f8 ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236c9:	83 c4 1c             	add    esp,0x1c
c00236cc:	6a 0c                	push   0xc
c00236ce:	56                   	push   esi
c00236cf:	53                   	push   ebx
c00236d0:	e8 f1 f8 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00236d5:	83 c4 0c             	add    esp,0xc
c00236d8:	6a 0c                	push   0xc
c00236da:	56                   	push   esi
c00236db:	53                   	push   ebx
c00236dc:	e8 e5 f8 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00236e1:	83 c4 0c             	add    esp,0xc
c00236e4:	6a 0c                	push   0xc
c00236e6:	56                   	push   esi
c00236e7:	53                   	push   ebx
c00236e8:	e8 d9 f8 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00236ed:	83 c4 0c             	add    esp,0xc
c00236f0:	6a 0c                	push   0xc
c00236f2:	56                   	push   esi
c00236f3:	53                   	push   ebx
c00236f4:	e8 cd f8 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00236f9:	83 c4 0c             	add    esp,0xc
c00236fc:	6a 0c                	push   0xc
c00236fe:	56                   	push   esi
c00236ff:	53                   	push   ebx
c0023700:	e8 c1 f8 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c0023705:	83 c4 10             	add    esp,0x10
c0023708:	84 c0                	test   al,al
c002370a:	0f 84 63 01 00 00    	je     c0023873 <IDE::detect()+0x241>
c0023710:	31 ff                	xor    edi,edi
c0023712:	50                   	push   eax
c0023713:	6a 0c                	push   0xc
c0023715:	56                   	push   esi
c0023716:	53                   	push   ebx
c0023717:	e8 aa f8 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c002371c:	83 c4 10             	add    esp,0x10
c002371f:	a8 01                	test   al,0x1
c0023721:	0f 85 6d 01 00 00    	jne    c0023894 <IDE::detect()+0x262>
c0023727:	84 c0                	test   al,al
c0023729:	78 04                	js     c002372f <IDE::detect()+0xfd>
c002372b:	a8 08                	test   al,0x8
c002372d:	75 27                	jne    c0023756 <IDE::detect()+0x124>
c002372f:	47                   	inc    edi
c0023730:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023736:	7e da                	jle    c0023712 <IDE::detect()+0xe0>
c0023738:	50                   	push   eax
c0023739:	50                   	push   eax
c002373a:	6a 00                	push   0x0
c002373c:	68 40 4b 4c 00       	push   0x4c4b40
c0023741:	e8 3d a5 ff ff       	call   c001dc83 <nanoSleep(unsigned long long)>
c0023746:	83 c4 10             	add    esp,0x10
c0023749:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002374f:	75 c1                	jne    c0023712 <IDE::detect()+0xe0>
c0023751:	e9 3e 01 00 00       	jmp    c0023894 <IDE::detect()+0x262>
c0023756:	31 c9                	xor    ecx,ecx
c0023758:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002375c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0023760:	83 ec 0c             	sub    esp,0xc
c0023763:	68 80 00 00 00       	push   0x80
c0023768:	57                   	push   edi
c0023769:	6a 00                	push   0x0
c002376b:	56                   	push   esi
c002376c:	53                   	push   ebx
c002376d:	e8 f4 fd ff ff       	call   c0023566 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0023772:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023777:	89 e8                	mov    eax,ebp
c0023779:	89 d1                	mov    ecx,edx
c002377b:	c1 e0 06             	shl    eax,0x6
c002377e:	01 d8                	add    eax,ebx
c0023780:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023787:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002378e:	89 f2                	mov    edx,esi
c0023790:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023796:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002379a:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00237a0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00237a4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00237ab:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00237b3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00237ba:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00237c2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00237c8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00237cf:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00237d5:	8d 54 24 58          	lea    edx,[esp+0x58]
c00237d9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00237dd:	83 c4 20             	add    esp,0x20
c00237e0:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00237e3:	83 c0 02             	add    eax,0x2
c00237e6:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00237ec:	83 c7 02             	add    edi,0x2
c00237ef:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00237f2:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00237f8:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00237fc:	75 e2                	jne    c00237e0 <IDE::detect()+0x1ae>
c00237fe:	89 e8                	mov    eax,ebp
c0023800:	c1 e0 06             	shl    eax,0x6
c0023803:	01 d8                	add    eax,ebx
c0023805:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002380b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023812:	66 c1 ea 09          	shr    dx,0x9
c0023816:	83 e2 01             	and    edx,0x1
c0023819:	84 c9                	test   cl,cl
c002381b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023821:	75 22                	jne    c0023845 <IDE::detect()+0x213>
c0023823:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c002382a:	74 46                	je     c0023872 <IDE::detect()+0x240>
c002382c:	83 ec 0c             	sub    esp,0xc
c002382f:	68 7c 01 00 00       	push   0x17c
c0023834:	e8 60 bd fe ff       	call   c000f599 <malloc>
c0023839:	89 c7                	mov    edi,eax
c002383b:	89 04 24             	mov    DWORD PTR [esp],eax
c002383e:	e8 15 05 00 00       	call   c0023d58 <ATA::ATA()>
c0023843:	eb 17                	jmp    c002385c <IDE::detect()+0x22a>
c0023845:	83 ec 0c             	sub    esp,0xc
c0023848:	68 80 01 00 00       	push   0x180
c002384d:	e8 47 bd fe ff       	call   c000f599 <malloc>
c0023852:	89 c7                	mov    edi,eax
c0023854:	89 04 24             	mov    DWORD PTR [esp],eax
c0023857:	e8 04 0b 00 00       	call   c0024360 <ATAPI::ATAPI()>
c002385c:	5a                   	pop    edx
c002385d:	59                   	pop    ecx
c002385e:	57                   	push   edi
c002385f:	53                   	push   ebx
c0023860:	e8 87 02 ff ff       	call   c0013aec <Device::addChild(Device*)>
c0023865:	8b 07                	mov    eax,DWORD PTR [edi]
c0023867:	53                   	push   ebx
c0023868:	55                   	push   ebp
c0023869:	6a 00                	push   0x0
c002386b:	57                   	push   edi
c002386c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002386f:	83 c4 20             	add    esp,0x20
c0023872:	45                   	inc    ebp
c0023873:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0023878:	74 0d                	je     c0023887 <IDE::detect()+0x255>
c002387a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0023882:	e9 dc fd ff ff       	jmp    c0023663 <IDE::detect()+0x31>
c0023887:	4e                   	dec    esi
c0023888:	74 63                	je     c00238ed <IDE::detect()+0x2bb>
c002388a:	be 01 00 00 00       	mov    esi,0x1
c002388f:	e9 c7 fd ff ff       	jmp    c002365b <IDE::detect()+0x29>
c0023894:	50                   	push   eax
c0023895:	6a 04                	push   0x4
c0023897:	56                   	push   esi
c0023898:	53                   	push   ebx
c0023899:	e8 28 f7 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c002389e:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238a2:	83 c4 0c             	add    esp,0xc
c00238a5:	6a 05                	push   0x5
c00238a7:	56                   	push   esi
c00238a8:	53                   	push   ebx
c00238a9:	e8 18 f7 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00238ae:	83 c4 10             	add    esp,0x10
c00238b1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00238b5:	80 fa 14             	cmp    dl,0x14
c00238b8:	75 04                	jne    c00238be <IDE::detect()+0x28c>
c00238ba:	3c eb                	cmp    al,0xeb
c00238bc:	eb 07                	jmp    c00238c5 <IDE::detect()+0x293>
c00238be:	3c 96                	cmp    al,0x96
c00238c0:	75 b1                	jne    c0023873 <IDE::detect()+0x241>
c00238c2:	80 fa 69             	cmp    dl,0x69
c00238c5:	75 ac                	jne    c0023873 <IDE::detect()+0x241>
c00238c7:	68 a1 00 00 00       	push   0xa1
c00238cc:	6a 07                	push   0x7
c00238ce:	56                   	push   esi
c00238cf:	53                   	push   ebx
c00238d0:	e8 31 f6 ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238d5:	5f                   	pop    edi
c00238d6:	58                   	pop    eax
c00238d7:	6a 00                	push   0x0
c00238d9:	68 40 42 0f 00       	push   0xf4240
c00238de:	e8 a0 a3 ff ff       	call   c001dc83 <nanoSleep(unsigned long long)>
c00238e3:	83 c4 10             	add    esp,0x10
c00238e6:	b1 01                	mov    cl,0x1
c00238e8:	e9 6b fe ff ff       	jmp    c0023758 <IDE::detect()+0x126>
c00238ed:	81 c4 1c 02 00 00    	add    esp,0x21c
c00238f3:	5b                   	pop    ebx
c00238f4:	5e                   	pop    esi
c00238f5:	5f                   	pop    edi
c00238f6:	5d                   	pop    ebp
c00238f7:	c3                   	ret    

c00238f8 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00238f8:	55                   	push   ebp
c00238f9:	57                   	push   edi
c00238fa:	56                   	push   esi
c00238fb:	53                   	push   ebx
c00238fc:	83 ec 1c             	sub    esp,0x1c
c00238ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023903:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023907:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002390b:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002390f:	88 c3                	mov    bl,al
c0023911:	84 c0                	test   al,al
c0023913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023917:	0f 84 81 00 00 00    	je     c002399e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002391d:	83 ec 0c             	sub    esp,0xc
c0023920:	68 23 c1 02 c0       	push   0xc002c123
c0023925:	e8 89 ed fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c002392a:	83 c4 10             	add    esp,0x10
c002392d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023931:	3c 01                	cmp    al,0x1
c0023933:	74 63                	je     c0023998 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c0023935:	3c 02                	cmp    al,0x2
c0023937:	75 53                	jne    c002398c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c0023939:	d1 e6                	shl    esi,1
c002393b:	09 ee                	or     esi,ebp
c002393d:	50                   	push   eax
c002393e:	89 f0                	mov    eax,esi
c0023940:	6a 01                	push   0x1
c0023942:	0f b6 f0             	movzx  esi,al
c0023945:	c1 e6 06             	shl    esi,0x6
c0023948:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023950:	50                   	push   eax
c0023951:	57                   	push   edi
c0023952:	e8 6f f6 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c0023957:	83 c4 10             	add    esp,0x10
c002395a:	a8 01                	test   al,0x1
c002395c:	74 02                	je     c0023960 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c002395e:	b3 07                	mov    bl,0x7
c0023960:	a8 02                	test   al,0x2
c0023962:	74 02                	je     c0023966 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0023964:	b3 03                	mov    bl,0x3
c0023966:	a8 04                	test   al,0x4
c0023968:	74 02                	je     c002396c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c002396a:	b3 14                	mov    bl,0x14
c002396c:	a8 08                	test   al,0x8
c002396e:	74 02                	je     c0023972 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0023970:	b3 03                	mov    bl,0x3
c0023972:	a8 10                	test   al,0x10
c0023974:	74 02                	je     c0023978 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0023976:	b3 15                	mov    bl,0x15
c0023978:	a8 20                	test   al,0x20
c002397a:	74 02                	je     c002397e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c002397c:	b3 03                	mov    bl,0x3
c002397e:	a8 40                	test   al,0x40
c0023980:	74 02                	je     c0023984 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0023982:	b3 16                	mov    bl,0x16
c0023984:	84 c0                	test   al,al
c0023986:	79 16                	jns    c002399e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023988:	b3 0d                	mov    bl,0xd
c002398a:	eb 12                	jmp    c002399e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002398c:	3c 03                	cmp    al,0x3
c002398e:	74 0c                	je     c002399c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0023990:	3c 04                	cmp    al,0x4
c0023992:	75 0a                	jne    c002399e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023994:	b3 08                	mov    bl,0x8
c0023996:	eb 06                	jmp    c002399e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0023998:	b3 13                	mov    bl,0x13
c002399a:	eb 02                	jmp    c002399e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c002399c:	b3 17                	mov    bl,0x17
c002399e:	83 c4 1c             	add    esp,0x1c
c00239a1:	88 d8                	mov    al,bl
c00239a3:	5b                   	pop    ebx
c00239a4:	5e                   	pop    esi
c00239a5:	5f                   	pop    edi
c00239a6:	5d                   	pop    ebp
c00239a7:	c3                   	ret    

c00239a8 <IDE::polling(unsigned char, unsigned int)>:
c00239a8:	57                   	push   edi
c00239a9:	56                   	push   esi
c00239aa:	53                   	push   ebx
c00239ab:	bb 04 00 00 00       	mov    ebx,0x4
c00239b0:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00239b4:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00239b9:	52                   	push   edx
c00239ba:	6a 0c                	push   0xc
c00239bc:	56                   	push   esi
c00239bd:	57                   	push   edi
c00239be:	e8 03 f6 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00239c3:	83 c4 10             	add    esp,0x10
c00239c6:	4b                   	dec    ebx
c00239c7:	75 f0                	jne    c00239b9 <IDE::polling(unsigned char, unsigned int)+0x11>
c00239c9:	bb a0 86 01 00       	mov    ebx,0x186a0
c00239ce:	50                   	push   eax
c00239cf:	6a 0c                	push   0xc
c00239d1:	56                   	push   esi
c00239d2:	57                   	push   edi
c00239d3:	e8 ee f5 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00239d8:	83 c4 10             	add    esp,0x10
c00239db:	a8 01                	test   al,0x1
c00239dd:	75 17                	jne    c00239f6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c00239df:	a8 20                	test   al,0x20
c00239e1:	75 0f                	jne    c00239f2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c00239e3:	4b                   	dec    ebx
c00239e4:	74 10                	je     c00239f6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c00239e6:	84 c0                	test   al,al
c00239e8:	78 e4                	js     c00239ce <IDE::polling(unsigned char, unsigned int)+0x26>
c00239ea:	a8 08                	test   al,0x8
c00239ec:	74 e0                	je     c00239ce <IDE::polling(unsigned char, unsigned int)+0x26>
c00239ee:	31 c0                	xor    eax,eax
c00239f0:	eb 06                	jmp    c00239f8 <IDE::polling(unsigned char, unsigned int)+0x50>
c00239f2:	b0 01                	mov    al,0x1
c00239f4:	eb 02                	jmp    c00239f8 <IDE::polling(unsigned char, unsigned int)+0x50>
c00239f6:	b0 02                	mov    al,0x2
c00239f8:	5b                   	pop    ebx
c00239f9:	5e                   	pop    esi
c00239fa:	5f                   	pop    edi
c00239fb:	c3                   	ret    

c00239fc <SATABus::close(int, int, void*)>:
c00239fc:	31 c0                	xor    eax,eax
c00239fe:	c3                   	ret    
c00239ff:	90                   	nop

c0023a00 <SATABus::detect()>:
c0023a00:	c3                   	ret    
c0023a01:	90                   	nop

c0023a02 <SATABus::SATABus()>:
c0023a02:	83 ec 0c             	sub    esp,0xc
c0023a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a09:	83 ec 08             	sub    esp,0x8
c0023a0c:	68 5c c1 02 c0       	push   0xc002c15c
c0023a11:	50                   	push   eax
c0023a12:	e8 83 04 ff ff       	call   c0013e9a <HardDiskController::HardDiskController(char const*)>
c0023a17:	83 c4 10             	add    esp,0x10
c0023a1a:	ba b0 c1 02 c0       	mov    edx,0xc002c1b0
c0023a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a23:	89 10                	mov    DWORD PTR [eax],edx
c0023a25:	83 ec 0c             	sub    esp,0xc
c0023a28:	6a 50                	push   0x50
c0023a2a:	e8 3a c0 fe ff       	call   c000fa69 <Phys::allocateContiguousPages(int)>
c0023a2f:	83 c4 10             	add    esp,0x10
c0023a32:	89 c2                	mov    edx,eax
c0023a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a38:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023a3e:	83 ec 0c             	sub    esp,0xc
c0023a41:	6a 50                	push   0x50
c0023a43:	e8 bf d7 fe ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c0023a48:	83 c4 10             	add    esp,0x10
c0023a4b:	89 c2                	mov    edx,eax
c0023a4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a51:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023a57:	a1 d0 da 02 c0       	mov    eax,ds:0xc002dad0
c0023a5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a60:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023a66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023a6a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023a70:	83 ec 0c             	sub    esp,0xc
c0023a73:	6a 03                	push   0x3
c0023a75:	6a 50                	push   0x50
c0023a77:	51                   	push   ecx
c0023a78:	52                   	push   edx
c0023a79:	50                   	push   eax
c0023a7a:	e8 3b e2 fe ff       	call   c0011cba <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023a7f:	83 c4 20             	add    esp,0x20
c0023a82:	90                   	nop
c0023a83:	83 c4 0c             	add    esp,0xc
c0023a86:	c3                   	ret    
c0023a87:	90                   	nop

c0023a88 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023a88:	83 ec 0c             	sub    esp,0xc
c0023a8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023a8f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023a92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023a95:	09 c2                	or     edx,eax
c0023a97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023a9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023aa1:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023aa3:	31 c0                	xor    eax,eax
c0023aa5:	c1 e9 08             	shr    ecx,0x8
c0023aa8:	83 e1 0f             	and    ecx,0xf
c0023aab:	39 c8                	cmp    eax,ecx
c0023aad:	74 0a                	je     c0023ab9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023aaf:	f6 c2 01             	test   dl,0x1
c0023ab2:	74 18                	je     c0023acc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ab4:	d1 ea                	shr    edx,1
c0023ab6:	40                   	inc    eax
c0023ab7:	eb f2                	jmp    c0023aab <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023ab9:	83 ec 0c             	sub    esp,0xc
c0023abc:	68 80 c1 02 c0       	push   0xc002c180
c0023ac1:	e8 59 63 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0023ac6:	83 c4 10             	add    esp,0x10
c0023ac9:	83 c8 ff             	or     eax,0xffffffff
c0023acc:	83 c4 0c             	add    esp,0xc
c0023acf:	c3                   	ret    

c0023ad0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023ad0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ad4:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023ad7:	89 c2                	mov    edx,eax
c0023ad9:	c1 ea 08             	shr    edx,0x8
c0023adc:	83 e2 0f             	and    edx,0xf
c0023adf:	fe ca                	dec    dl
c0023ae1:	75 31                	jne    c0023b14 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023ae3:	83 e0 0f             	and    eax,0xf
c0023ae6:	3c 03                	cmp    al,0x3
c0023ae8:	75 2a                	jne    c0023b14 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023aea:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023aed:	b8 02 00 00 00       	mov    eax,0x2
c0023af2:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023af8:	74 1c                	je     c0023b16 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023afa:	b8 04 00 00 00       	mov    eax,0x4
c0023aff:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023b05:	74 0f                	je     c0023b16 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023b07:	31 c0                	xor    eax,eax
c0023b09:	83 fa 03             	cmp    edx,0x3
c0023b0c:	0f 94 c0             	sete   al
c0023b0f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023b13:	c3                   	ret    
c0023b14:	31 c0                	xor    eax,eax
c0023b16:	c3                   	ret    
c0023b17:	90                   	nop

c0023b18 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b1c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b1f:	0f ba e2 0f          	bt     edx,0xf
c0023b23:	72 f7                	jb     c0023b1c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023b25:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b28:	83 ca 10             	or     edx,0x10
c0023b2b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b2e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b31:	83 ca 01             	or     edx,0x1
c0023b34:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b37:	c3                   	ret    

c0023b38 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023b38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023b3c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b3f:	83 e2 fe             	and    edx,0xfffffffe
c0023b42:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b45:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b48:	83 e2 ef             	and    edx,0xffffffef
c0023b4b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023b4e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b51:	0f ba e2 0e          	bt     edx,0xe
c0023b55:	72 f7                	jb     c0023b4e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b57:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023b5a:	0f ba e2 0f          	bt     edx,0xf
c0023b5e:	72 ee                	jb     c0023b4e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023b60:	c3                   	ret    
c0023b61:	90                   	nop

c0023b62 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023b62:	55                   	push   ebp
c0023b63:	57                   	push   edi
c0023b64:	56                   	push   esi
c0023b65:	53                   	push   ebx
c0023b66:	83 ec 1c             	sub    esp,0x1c
c0023b69:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023b6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023b71:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023b75:	53                   	push   ebx
c0023b76:	89 fd                	mov    ebp,edi
c0023b78:	56                   	push   esi
c0023b79:	c1 e5 0a             	shl    ebp,0xa
c0023b7c:	e8 b7 ff ff ff       	call   c0023b38 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023b81:	83 ec 0c             	sub    esp,0xc
c0023b84:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023b8a:	01 e8                	add    eax,ebp
c0023b8c:	89 03                	mov    DWORD PTR [ebx],eax
c0023b8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023b90:	68 00 04 00 00       	push   0x400
c0023b95:	6a 00                	push   0x0
c0023b97:	50                   	push   eax
c0023b98:	e8 b3 cb fd ff       	call   c0000750 <memset>
c0023b9d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023ba3:	89 fa                	mov    edx,edi
c0023ba5:	01 e8                	add    eax,ebp
c0023ba7:	c1 e7 0d             	shl    edi,0xd
c0023baa:	89 03                	mov    DWORD PTR [ebx],eax
c0023bac:	c1 e2 08             	shl    edx,0x8
c0023baf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023bb6:	81 c2 00 80 00 00    	add    edx,0x8000
c0023bbc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023bc0:	89 d0                	mov    eax,edx
c0023bc2:	83 c4 1c             	add    esp,0x1c
c0023bc5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023bcb:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023bce:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023bd1:	68 00 01 00 00       	push   0x100
c0023bd6:	6a 00                	push   0x0
c0023bd8:	50                   	push   eax
c0023bd9:	e8 72 cb fd ff       	call   c0000750 <memset>
c0023bde:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023be2:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023be8:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023bee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023bf2:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023bf5:	83 c4 10             	add    esp,0x10
c0023bf8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023bff:	31 ff                	xor    edi,edi
c0023c01:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023c07:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023c0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023c11:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023c17:	83 c5 20             	add    ebp,0x20
c0023c1a:	01 f8                	add    eax,edi
c0023c1c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c1f:	52                   	push   edx
c0023c20:	68 00 01 00 00       	push   0x100
c0023c25:	6a 00                	push   0x0
c0023c27:	50                   	push   eax
c0023c28:	e8 23 cb fd ff       	call   c0000750 <memset>
c0023c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c31:	83 c4 10             	add    esp,0x10
c0023c34:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023c3a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023c41:	01 f8                	add    eax,edi
c0023c43:	81 c7 00 01 00 00    	add    edi,0x100
c0023c49:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023c4c:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023c52:	75 b3                	jne    c0023c07 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023c54:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023c58:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023c5c:	83 c4 1c             	add    esp,0x1c
c0023c5f:	5b                   	pop    ebx
c0023c60:	5e                   	pop    esi
c0023c61:	5f                   	pop    edi
c0023c62:	5d                   	pop    ebp
c0023c63:	e9 b0 fe ff ff       	jmp    c0023b18 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023c68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023c68:	55                   	push   ebp
c0023c69:	57                   	push   edi
c0023c6a:	56                   	push   esi
c0023c6b:	53                   	push   ebx
c0023c6c:	31 db                	xor    ebx,ebx
c0023c6e:	83 ec 0c             	sub    esp,0xc
c0023c71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023c75:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023c79:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023c7c:	f7 c7 01 00 00 00    	test   edi,0x1
c0023c82:	74 7a                	je     c0023cfe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023c84:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0023c88:	89 d8                	mov    eax,ebx
c0023c8a:	c1 e0 07             	shl    eax,0x7
c0023c8d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0023c94:	55                   	push   ebp
c0023c95:	56                   	push   esi
c0023c96:	e8 35 fe ff ff       	call   c0023ad0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023c9b:	5a                   	pop    edx
c0023c9c:	83 f8 01             	cmp    eax,0x1
c0023c9f:	59                   	pop    ecx
c0023ca0:	75 21                	jne    c0023cc3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0023ca2:	50                   	push   eax
c0023ca3:	53                   	push   ebx
c0023ca4:	55                   	push   ebp
c0023ca5:	56                   	push   esi
c0023ca6:	e8 b7 fe ff ff       	call   c0023b62 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023cab:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023cb2:	e8 e2 b8 fe ff       	call   c000f599 <malloc>
c0023cb7:	89 c5                	mov    ebp,eax
c0023cb9:	89 04 24             	mov    DWORD PTR [esp],eax
c0023cbc:	e8 03 0d 00 00       	call   c00249c4 <SATA::SATA()>
c0023cc1:	eb 24                	jmp    c0023ce7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0023cc3:	83 f8 04             	cmp    eax,0x4
c0023cc6:	75 36                	jne    c0023cfe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0023cc8:	51                   	push   ecx
c0023cc9:	53                   	push   ebx
c0023cca:	55                   	push   ebp
c0023ccb:	56                   	push   esi
c0023ccc:	e8 91 fe ff ff       	call   c0023b62 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023cd1:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023cd8:	e8 bc b8 fe ff       	call   c000f599 <malloc>
c0023cdd:	89 c5                	mov    ebp,eax
c0023cdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0023ce2:	e8 53 10 00 00       	call   c0024d3a <SATAPI::SATAPI()>
c0023ce7:	58                   	pop    eax
c0023ce8:	5a                   	pop    edx
c0023ce9:	55                   	push   ebp
c0023cea:	56                   	push   esi
c0023ceb:	e8 fc fd fe ff       	call   c0013aec <Device::addChild(Device*)>
c0023cf0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0023cf3:	56                   	push   esi
c0023cf4:	6a 00                	push   0x0
c0023cf6:	53                   	push   ebx
c0023cf7:	55                   	push   ebp
c0023cf8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0023cfb:	83 c4 20             	add    esp,0x20
c0023cfe:	d1 ef                	shr    edi,1
c0023d00:	43                   	inc    ebx
c0023d01:	83 fb 20             	cmp    ebx,0x20
c0023d04:	0f 85 72 ff ff ff    	jne    c0023c7c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023d0a:	83 c4 0c             	add    esp,0xc
c0023d0d:	5b                   	pop    ebx
c0023d0e:	5e                   	pop    esi
c0023d0f:	5f                   	pop    edi
c0023d10:	5d                   	pop    ebp
c0023d11:	c3                   	ret    

c0023d12 <SATABus::open(int, int, void*)>:
c0023d12:	83 ec 14             	sub    esp,0x14
c0023d15:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023d19:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023d1f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023d25:	52                   	push   edx
c0023d26:	50                   	push   eax
c0023d27:	e8 3c ff ff ff       	call   c0023c68 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023d2c:	31 c0                	xor    eax,eax
c0023d2e:	83 c4 1c             	add    esp,0x1c
c0023d31:	c3                   	ret    

c0023d32 <ATA::close(int, int, void*)>:
c0023d32:	83 ec 0c             	sub    esp,0xc
c0023d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d39:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023d3f:	85 c0                	test   eax,eax
c0023d41:	74 0c                	je     c0023d4f <ATA::close(int, int, void*)+0x1d>
c0023d43:	83 ec 0c             	sub    esp,0xc
c0023d46:	8b 10                	mov    edx,DWORD PTR [eax]
c0023d48:	50                   	push   eax
c0023d49:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023d4c:	83 c4 10             	add    esp,0x10
c0023d4f:	31 c0                	xor    eax,eax
c0023d51:	83 c4 0c             	add    esp,0xc
c0023d54:	c3                   	ret    
c0023d55:	90                   	nop

c0023d56 <ATA::powerSaving(PowerSavingLevel)>:
c0023d56:	c3                   	ret    
c0023d57:	90                   	nop

c0023d58 <ATA::ATA()>:
c0023d58:	83 ec 0c             	sub    esp,0xc
c0023d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d5f:	83 ec 04             	sub    esp,0x4
c0023d62:	68 00 02 00 00       	push   0x200
c0023d67:	68 79 c2 02 c0       	push   0xc002c279
c0023d6c:	50                   	push   eax
c0023d6d:	e8 b0 01 ff ff       	call   c0013f22 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023d72:	83 c4 10             	add    esp,0x10
c0023d75:	ba fc c1 02 c0       	mov    edx,0xc002c1fc
c0023d7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d7e:	89 10                	mov    DWORD PTR [eax],edx
c0023d80:	90                   	nop
c0023d81:	83 c4 0c             	add    esp,0xc
c0023d84:	c3                   	ret    
c0023d85:	90                   	nop

c0023d86 <ATA::flush(bool)>:
c0023d86:	53                   	push   ebx
c0023d87:	83 ec 08             	sub    esp,0x8
c0023d8a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023d8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023d93:	19 c0                	sbb    eax,eax
c0023d95:	83 e0 fd             	and    eax,0xfffffffd
c0023d98:	05 ea 00 00 00       	add    eax,0xea
c0023d9d:	50                   	push   eax
c0023d9e:	6a 07                	push   0x7
c0023da0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023da7:	50                   	push   eax
c0023da8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dae:	e8 53 f1 ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023db3:	83 c4 0c             	add    esp,0xc
c0023db6:	6a 00                	push   0x0
c0023db8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023dbf:	50                   	push   eax
c0023dc0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023dc6:	e8 dd fb ff ff       	call   c00239a8 <IDE::polling(unsigned char, unsigned int)>
c0023dcb:	83 c4 18             	add    esp,0x18
c0023dce:	5b                   	pop    ebx
c0023dcf:	c3                   	ret    

c0023dd0 <ATA::readyForCommand()>:
c0023dd0:	56                   	push   esi
c0023dd1:	53                   	push   ebx
c0023dd2:	31 db                	xor    ebx,ebx
c0023dd4:	50                   	push   eax
c0023dd5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023dd9:	50                   	push   eax
c0023dda:	6a 0c                	push   0xc
c0023ddc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023de3:	50                   	push   eax
c0023de4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023dea:	e8 d7 f1 ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c0023def:	83 c4 10             	add    esp,0x10
c0023df2:	a8 88                	test   al,0x88
c0023df4:	74 23                	je     c0023e19 <ATA::readyForCommand()+0x49>
c0023df6:	43                   	inc    ebx
c0023df7:	83 fb 63             	cmp    ebx,0x63
c0023dfa:	7e dd                	jle    c0023dd9 <ATA::readyForCommand()+0x9>
c0023dfc:	51                   	push   ecx
c0023dfd:	51                   	push   ecx
c0023dfe:	6a 00                	push   0x0
c0023e00:	68 40 42 0f 00       	push   0xf4240
c0023e05:	e8 79 9e ff ff       	call   c001dc83 <nanoSleep(unsigned long long)>
c0023e0a:	83 c4 10             	add    esp,0x10
c0023e0d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023e13:	75 c4                	jne    c0023dd9 <ATA::readyForCommand()+0x9>
c0023e15:	31 c0                	xor    eax,eax
c0023e17:	eb 02                	jmp    c0023e1b <ATA::readyForCommand()+0x4b>
c0023e19:	b0 01                	mov    al,0x1
c0023e1b:	5a                   	pop    edx
c0023e1c:	5b                   	pop    ebx
c0023e1d:	5e                   	pop    esi
c0023e1e:	c3                   	ret    
c0023e1f:	90                   	nop

c0023e20 <ATA::access(unsigned long long, int, void*, bool)>:
c0023e20:	55                   	push   ebp
c0023e21:	57                   	push   edi
c0023e22:	56                   	push   esi
c0023e23:	53                   	push   ebx
c0023e24:	83 ec 2c             	sub    esp,0x2c
c0023e27:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023e2b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023e2f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023e33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023e37:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023e3b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023e3f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023e43:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023e49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e4d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023e53:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023e57:	c1 e0 06             	shl    eax,0x6
c0023e5a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023e62:	74 5d                	je     c0023ec1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023e64:	89 fa                	mov    edx,edi
c0023e66:	89 f0                	mov    eax,esi
c0023e68:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023e6c:	c1 ea 1c             	shr    edx,0x1c
c0023e6f:	89 d1                	mov    ecx,edx
c0023e71:	09 c1                	or     ecx,eax
c0023e73:	74 25                	je     c0023e9a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023e75:	31 ed                	xor    ebp,ebp
c0023e77:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023e7e:	89 fa                	mov    edx,edi
c0023e80:	89 f0                	mov    eax,esi
c0023e82:	0f ad d0             	shrd   eax,edx,cl
c0023e85:	d3 ea                	shr    edx,cl
c0023e87:	f6 c1 20             	test   cl,0x20
c0023e8a:	74 02                	je     c0023e8e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023e8c:	89 d0                	mov    eax,edx
c0023e8e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023e92:	45                   	inc    ebp
c0023e93:	83 fd 06             	cmp    ebp,0x6
c0023e96:	75 df                	jne    c0023e77 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023e98:	eb 76                	jmp    c0023f10 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023e9a:	89 f0                	mov    eax,esi
c0023e9c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023ea1:	89 fa                	mov    edx,edi
c0023ea3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023eaa:	0f ac d0 10          	shrd   eax,edx,0x10
c0023eae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023eb3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023eb7:	c1 ee 18             	shr    esi,0x18
c0023eba:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023ebf:	eb 56                	jmp    c0023f17 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023ec1:	6a 00                	push   0x0
c0023ec3:	6a 3f                	push   0x3f
c0023ec5:	57                   	push   edi
c0023ec6:	56                   	push   esi
c0023ec7:	e8 28 29 00 00       	call   c00267f4 <__umoddi3>
c0023ecc:	83 c4 10             	add    esp,0x10
c0023ecf:	40                   	inc    eax
c0023ed0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023ed4:	6a 00                	push   0x0
c0023ed6:	68 f0 03 00 00       	push   0x3f0
c0023edb:	57                   	push   edi
c0023edc:	56                   	push   esi
c0023edd:	e8 12 28 00 00       	call   c00266f4 <__udivdi3>
c0023ee2:	83 c4 10             	add    esp,0x10
c0023ee5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023eea:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023ef1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023ef6:	6a 00                	push   0x0
c0023ef8:	6a 3f                	push   0x3f
c0023efa:	57                   	push   edi
c0023efb:	56                   	push   esi
c0023efc:	e8 f3 27 00 00       	call   c00266f4 <__udivdi3>
c0023f01:	83 c4 10             	add    esp,0x10
c0023f04:	89 c6                	mov    esi,eax
c0023f06:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023f0b:	83 e6 0f             	and    esi,0xf
c0023f0e:	eb 07                	jmp    c0023f17 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023f10:	31 f6                	xor    esi,esi
c0023f12:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023f17:	bf 01 00 00 00       	mov    edi,0x1
c0023f1c:	50                   	push   eax
c0023f1d:	6a 00                	push   0x0
c0023f1f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f26:	50                   	push   eax
c0023f27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023f2b:	e8 e2 f1 ff ff       	call   c0023112 <IDE::enableIRQs(unsigned char, bool)>
c0023f30:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023f33:	e8 98 fe ff ff       	call   c0023dd0 <ATA::readyForCommand()>
c0023f38:	83 c4 10             	add    esp,0x10
c0023f3b:	84 c0                	test   al,al
c0023f3d:	0f 84 5a 02 00 00    	je     c002419d <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023f43:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023f49:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023f4f:	c1 e0 04             	shl    eax,0x4
c0023f52:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023f59:	09 c6                	or     esi,eax
c0023f5b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023f60:	75 05                	jne    c0023f67 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023f62:	83 ce a0             	or     esi,0xffffffa0
c0023f65:	eb 03                	jmp    c0023f6a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023f67:	83 ce e0             	or     esi,0xffffffe0
c0023f6a:	89 f0                	mov    eax,esi
c0023f6c:	0f b6 f0             	movzx  esi,al
c0023f6f:	56                   	push   esi
c0023f70:	6a 06                	push   0x6
c0023f72:	51                   	push   ecx
c0023f73:	52                   	push   edx
c0023f74:	e8 8d ef ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f79:	83 c4 10             	add    esp,0x10
c0023f7c:	6a 00                	push   0x0
c0023f7e:	6a 01                	push   0x1
c0023f80:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f87:	50                   	push   eax
c0023f88:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f8e:	e8 73 ef ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f93:	83 c4 10             	add    esp,0x10
c0023f96:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023f9b:	75 6e                	jne    c002400b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023f9d:	6a 00                	push   0x0
c0023f9f:	6a 08                	push   0x8
c0023fa1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fa8:	50                   	push   eax
c0023fa9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023faf:	e8 52 ef ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fb4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023fb9:	50                   	push   eax
c0023fba:	6a 09                	push   0x9
c0023fbc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fc3:	50                   	push   eax
c0023fc4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fca:	e8 37 ef ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fcf:	83 c4 20             	add    esp,0x20
c0023fd2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023fd7:	50                   	push   eax
c0023fd8:	6a 0a                	push   0xa
c0023fda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fe1:	50                   	push   eax
c0023fe2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fe8:	e8 19 ef ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fed:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023ff2:	50                   	push   eax
c0023ff3:	6a 0b                	push   0xb
c0023ff5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ffc:	50                   	push   eax
c0023ffd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024003:	e8 fe ee ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024008:	83 c4 20             	add    esp,0x20
c002400b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024010:	50                   	push   eax
c0024011:	6a 02                	push   0x2
c0024013:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002401a:	50                   	push   eax
c002401b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024021:	e8 e0 ee ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024026:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002402b:	50                   	push   eax
c002402c:	6a 03                	push   0x3
c002402e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024035:	50                   	push   eax
c0024036:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002403c:	e8 c5 ee ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024041:	83 c4 20             	add    esp,0x20
c0024044:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024049:	50                   	push   eax
c002404a:	6a 04                	push   0x4
c002404c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024053:	50                   	push   eax
c0024054:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002405a:	e8 a7 ee ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002405f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024064:	50                   	push   eax
c0024065:	6a 05                	push   0x5
c0024067:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002406e:	50                   	push   eax
c002406f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024075:	e8 8c ee ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002407a:	83 c4 20             	add    esp,0x20
c002407d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024082:	0f 94 c0             	sete   al
c0024085:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002408a:	74 09                	je     c0024095 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002408c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024093:	eb 07                	jmp    c002409c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024095:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002409c:	0f b6 c0             	movzx  eax,al
c002409f:	50                   	push   eax
c00240a0:	6a 07                	push   0x7
c00240a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240a9:	50                   	push   eax
c00240aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240b0:	e8 51 ee ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240b5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00240b9:	83 c4 10             	add    esp,0x10
c00240bc:	85 f6                	test   esi,esi
c00240be:	0f 84 ba 00 00 00    	je     c002417e <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00240c4:	50                   	push   eax
c00240c5:	6a 01                	push   0x1
c00240c7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240ce:	50                   	push   eax
c00240cf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240d5:	e8 ce f8 ff ff       	call   c00239a8 <IDE::polling(unsigned char, unsigned int)>
c00240da:	83 c4 10             	add    esp,0x10
c00240dd:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00240e3:	84 c0                	test   al,al
c00240e5:	74 2c                	je     c0024113 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00240e7:	0f b6 f8             	movzx  edi,al
c00240ea:	0f b6 d2             	movzx  edx,dl
c00240ed:	57                   	push   edi
c00240ee:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00240f5:	50                   	push   eax
c00240f6:	52                   	push   edx
c00240f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240fd:	e8 f6 f7 ff ff       	call   c00238f8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024102:	c7 04 24 d4 c1 02 c0 	mov    DWORD PTR [esp],0xc002c1d4
c0024109:	e8 a5 e5 fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c002410e:	e9 87 00 00 00       	jmp    c002419a <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024113:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024118:	74 33                	je     c002414d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002411a:	31 ed                	xor    ebp,ebp
c002411c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024120:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024124:	50                   	push   eax
c0024125:	50                   	push   eax
c0024126:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002412d:	50                   	push   eax
c002412e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024134:	e8 bb ed ff ff       	call   c0022ef4 <IDE::getBase(unsigned char)>
c0024139:	89 c2                	mov    edx,eax
c002413b:	89 f8                	mov    eax,edi
c002413d:	66 ef                	out    dx,ax
c002413f:	45                   	inc    ebp
c0024140:	83 c4 10             	add    esp,0x10
c0024143:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024149:	75 d1                	jne    c002411c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002414b:	eb 23                	jmp    c0024170 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002414d:	0f b6 d2             	movzx  edx,dl
c0024150:	51                   	push   ecx
c0024151:	51                   	push   ecx
c0024152:	52                   	push   edx
c0024153:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024159:	e8 96 ed ff ff       	call   c0022ef4 <IDE::getBase(unsigned char)>
c002415e:	b9 00 01 00 00       	mov    ecx,0x100
c0024163:	89 c2                	mov    edx,eax
c0024165:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024169:	fc                   	cld    
c002416a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002416d:	83 c4 10             	add    esp,0x10
c0024170:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024178:	4e                   	dec    esi
c0024179:	e9 3e ff ff ff       	jmp    c00240bc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002417e:	31 ff                	xor    edi,edi
c0024180:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024185:	74 16                	je     c002419d <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024187:	50                   	push   eax
c0024188:	50                   	push   eax
c0024189:	31 c0                	xor    eax,eax
c002418b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024190:	0f 94 c0             	sete   al
c0024193:	50                   	push   eax
c0024194:	53                   	push   ebx
c0024195:	e8 ec fb ff ff       	call   c0023d86 <ATA::flush(bool)>
c002419a:	83 c4 10             	add    esp,0x10
c002419d:	83 c4 2c             	add    esp,0x2c
c00241a0:	89 f8                	mov    eax,edi
c00241a2:	5b                   	pop    ebx
c00241a3:	5e                   	pop    esi
c00241a4:	5f                   	pop    edi
c00241a5:	5d                   	pop    ebp
c00241a6:	c3                   	ret    
c00241a7:	90                   	nop

c00241a8 <ATA::read(unsigned long long, int, void*)>:
c00241a8:	57                   	push   edi
c00241a9:	b8 04 00 00 00       	mov    eax,0x4
c00241ae:	56                   	push   esi
c00241af:	53                   	push   ebx
c00241b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00241b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00241b8:	8d 7a ff             	lea    edi,[edx-0x1]
c00241bb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00241bf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00241c3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00241c9:	77 25                	ja     c00241f0 <ATA::read(unsigned long long, int, void*)+0x48>
c00241cb:	b8 06 00 00 00       	mov    eax,0x6
c00241d0:	85 f6                	test   esi,esi
c00241d2:	74 1c                	je     c00241f0 <ATA::read(unsigned long long, int, void*)+0x48>
c00241d4:	50                   	push   eax
c00241d5:	50                   	push   eax
c00241d6:	6a 00                	push   0x0
c00241d8:	56                   	push   esi
c00241d9:	52                   	push   edx
c00241da:	53                   	push   ebx
c00241db:	51                   	push   ecx
c00241dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00241e0:	e8 3b fc ff ff       	call   c0023e20 <ATA::access(unsigned long long, int, void*, bool)>
c00241e5:	83 c4 20             	add    esp,0x20
c00241e8:	85 c0                	test   eax,eax
c00241ea:	0f 95 c0             	setne  al
c00241ed:	0f b6 c0             	movzx  eax,al
c00241f0:	5b                   	pop    ebx
c00241f1:	5e                   	pop    esi
c00241f2:	5f                   	pop    edi
c00241f3:	c3                   	ret    

c00241f4 <ATA::write(unsigned long long, int, void*)>:
c00241f4:	57                   	push   edi
c00241f5:	b8 04 00 00 00       	mov    eax,0x4
c00241fa:	56                   	push   esi
c00241fb:	53                   	push   ebx
c00241fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024200:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024204:	8d 7a ff             	lea    edi,[edx-0x1]
c0024207:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002420b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002420f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024215:	77 25                	ja     c002423c <ATA::write(unsigned long long, int, void*)+0x48>
c0024217:	b8 06 00 00 00       	mov    eax,0x6
c002421c:	85 f6                	test   esi,esi
c002421e:	74 1c                	je     c002423c <ATA::write(unsigned long long, int, void*)+0x48>
c0024220:	50                   	push   eax
c0024221:	50                   	push   eax
c0024222:	6a 01                	push   0x1
c0024224:	56                   	push   esi
c0024225:	52                   	push   edx
c0024226:	53                   	push   ebx
c0024227:	51                   	push   ecx
c0024228:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002422c:	e8 ef fb ff ff       	call   c0023e20 <ATA::access(unsigned long long, int, void*, bool)>
c0024231:	83 c4 20             	add    esp,0x20
c0024234:	85 c0                	test   eax,eax
c0024236:	0f 95 c0             	setne  al
c0024239:	0f b6 c0             	movzx  eax,al
c002423c:	5b                   	pop    ebx
c002423d:	5e                   	pop    esi
c002423e:	5f                   	pop    edi
c002423f:	c3                   	ret    

c0024240 <ATA::detectCHS()>:
c0024240:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024244:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c002424a:	c1 e0 06             	shl    eax,0x6
c002424d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024253:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002425d:	c7 44 24 04 df c1 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c1df
c0024265:	e9 b5 5b ff ff       	jmp    c0019e1f <Krnl::panic(char const*)>

c002426a <ATA::open(int, int, void*)>:
c002426a:	53                   	push   ebx
c002426b:	83 ec 08             	sub    esp,0x8
c002426e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024272:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024276:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002427a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024280:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024286:	c1 e0 06             	shl    eax,0x6
c0024289:	01 d0                	add    eax,edx
c002428b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024292:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024298:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002429f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00242a9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00242af:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00242b6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00242bd:	75 0c                	jne    c00242cb <ATA::open(int, int, void*)+0x61>
c00242bf:	83 ec 0c             	sub    esp,0xc
c00242c2:	53                   	push   ebx
c00242c3:	e8 78 ff ff ff       	call   c0024240 <ATA::detectCHS()>
c00242c8:	83 c4 10             	add    esp,0x10
c00242cb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00242d1:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00242d7:	c1 e0 06             	shl    eax,0x6
c00242da:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00242e1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00242eb:	d1 e8                	shr    eax,1
c00242ed:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00242f3:	6a 04                	push   0x4
c00242f5:	6a 0c                	push   0xc
c00242f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242fe:	50                   	push   eax
c00242ff:	52                   	push   edx
c0024300:	e8 01 ec ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024305:	90                   	nop
c0024306:	90                   	nop
c0024307:	6a 00                	push   0x0
c0024309:	6a 0c                	push   0xc
c002430b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024312:	50                   	push   eax
c0024313:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024319:	e8 e8 eb ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002431e:	83 c4 14             	add    esp,0x14
c0024321:	53                   	push   ebx
c0024322:	e8 63 fc fe ff       	call   c0013f8a <PhysicalDisk::startCache()>
c0024327:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002432a:	e8 dd 1e ff ff       	call   c001620c <createPartitionsForDisk(PhysicalDisk*)>
c002432f:	31 c0                	xor    eax,eax
c0024331:	83 c4 18             	add    esp,0x18
c0024334:	5b                   	pop    ebx
c0024335:	c3                   	ret    

c0024336 <ATAPI::write(unsigned long long, int, void*)>:
c0024336:	b8 03 00 00 00       	mov    eax,0x3
c002433b:	c3                   	ret    

c002433c <ATAPI::close(int, int, void*)>:
c002433c:	83 ec 0c             	sub    esp,0xc
c002433f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024343:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024349:	85 c0                	test   eax,eax
c002434b:	74 0c                	je     c0024359 <ATAPI::close(int, int, void*)+0x1d>
c002434d:	83 ec 0c             	sub    esp,0xc
c0024350:	8b 10                	mov    edx,DWORD PTR [eax]
c0024352:	50                   	push   eax
c0024353:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024356:	83 c4 10             	add    esp,0x10
c0024359:	31 c0                	xor    eax,eax
c002435b:	83 c4 0c             	add    esp,0xc
c002435e:	c3                   	ret    
c002435f:	90                   	nop

c0024360 <ATAPI::ATAPI()>:
c0024360:	83 ec 0c             	sub    esp,0xc
c0024363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024367:	83 ec 04             	sub    esp,0x4
c002436a:	68 00 08 00 00       	push   0x800
c002436f:	68 19 c3 02 c0       	push   0xc002c319
c0024374:	50                   	push   eax
c0024375:	e8 a8 fb fe ff       	call   c0013f22 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002437a:	83 c4 10             	add    esp,0x10
c002437d:	ba 34 c2 02 c0       	mov    edx,0xc002c234
c0024382:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024386:	89 10                	mov    DWORD PTR [eax],edx
c0024388:	90                   	nop
c0024389:	83 c4 0c             	add    esp,0xc
c002438c:	c3                   	ret    
c002438d:	90                   	nop

c002438e <ATAPI::readyForCommand()>:
c002438e:	56                   	push   esi
c002438f:	53                   	push   ebx
c0024390:	31 db                	xor    ebx,ebx
c0024392:	50                   	push   eax
c0024393:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024397:	50                   	push   eax
c0024398:	6a 0c                	push   0xc
c002439a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00243a1:	50                   	push   eax
c00243a2:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00243a8:	e8 19 ec ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00243ad:	83 c4 10             	add    esp,0x10
c00243b0:	a8 88                	test   al,0x88
c00243b2:	74 23                	je     c00243d7 <ATAPI::readyForCommand()+0x49>
c00243b4:	43                   	inc    ebx
c00243b5:	83 fb 63             	cmp    ebx,0x63
c00243b8:	7e dd                	jle    c0024397 <ATAPI::readyForCommand()+0x9>
c00243ba:	51                   	push   ecx
c00243bb:	51                   	push   ecx
c00243bc:	6a 00                	push   0x0
c00243be:	68 40 42 0f 00       	push   0xf4240
c00243c3:	e8 bb 98 ff ff       	call   c001dc83 <nanoSleep(unsigned long long)>
c00243c8:	83 c4 10             	add    esp,0x10
c00243cb:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00243d1:	75 c4                	jne    c0024397 <ATAPI::readyForCommand()+0x9>
c00243d3:	31 c0                	xor    eax,eax
c00243d5:	eb 02                	jmp    c00243d9 <ATAPI::readyForCommand()+0x4b>
c00243d7:	b0 01                	mov    al,0x1
c00243d9:	5a                   	pop    edx
c00243da:	5b                   	pop    ebx
c00243db:	5e                   	pop    esi
c00243dc:	c3                   	ret    
c00243dd:	90                   	nop

c00243de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00243de:	55                   	push   ebp
c00243df:	57                   	push   edi
c00243e0:	56                   	push   esi
c00243e1:	53                   	push   ebx
c00243e2:	83 ec 20             	sub    esp,0x20
c00243e5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00243e9:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00243ed:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00243f1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00243f5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00243f9:	6a 01                	push   0x1
c00243fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024402:	50                   	push   eax
c0024403:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024409:	e8 04 ed ff ff       	call   c0023112 <IDE::enableIRQs(unsigned char, bool)>
c002440e:	5e                   	pop    esi
c002440f:	58                   	pop    eax
c0024410:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024417:	50                   	push   eax
c0024418:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002441e:	e8 bd ea ff ff       	call   c0022ee0 <IDE::prepareInterrupt(unsigned char)>
c0024423:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024426:	e8 63 ff ff ff       	call   c002438e <ATAPI::readyForCommand()>
c002442b:	83 c4 10             	add    esp,0x10
c002442e:	84 c0                	test   al,al
c0024430:	75 0a                	jne    c002443c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024432:	bb 01 00 00 00       	mov    ebx,0x1
c0024437:	e9 57 02 00 00       	jmp    c0024693 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002443c:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024442:	c1 e0 04             	shl    eax,0x4
c0024445:	0f b6 c0             	movzx  eax,al
c0024448:	50                   	push   eax
c0024449:	6a 06                	push   0x6
c002444b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024452:	50                   	push   eax
c0024453:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024459:	e8 a8 ea ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002445e:	6a 00                	push   0x0
c0024460:	6a 01                	push   0x1
c0024462:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024469:	50                   	push   eax
c002446a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024470:	e8 91 ea ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024475:	83 c4 20             	add    esp,0x20
c0024478:	0f b6 c3             	movzx  eax,bl
c002447b:	0f b6 df             	movzx  ebx,bh
c002447e:	50                   	push   eax
c002447f:	6a 04                	push   0x4
c0024481:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024488:	50                   	push   eax
c0024489:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002448f:	e8 72 ea ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024494:	53                   	push   ebx
c0024495:	6a 05                	push   0x5
c0024497:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002449e:	50                   	push   eax
c002449f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244a5:	e8 5c ea ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244aa:	83 c4 20             	add    esp,0x20
c00244ad:	68 a0 00 00 00       	push   0xa0
c00244b2:	6a 07                	push   0x7
c00244b4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244bb:	50                   	push   eax
c00244bc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244c2:	e8 3f ea ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00244c7:	83 c4 0c             	add    esp,0xc
c00244ca:	6a 01                	push   0x1
c00244cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00244d3:	50                   	push   eax
c00244d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00244da:	e8 c9 f4 ff ff       	call   c00239a8 <IDE::polling(unsigned char, unsigned int)>
c00244df:	83 c4 10             	add    esp,0x10
c00244e2:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00244e8:	84 c0                	test   al,al
c00244ea:	74 23                	je     c002450f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00244ec:	0f b6 d8             	movzx  ebx,al
c00244ef:	0f b6 d2             	movzx  edx,dl
c00244f2:	53                   	push   ebx
c00244f3:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00244fa:	50                   	push   eax
c00244fb:	52                   	push   edx
c00244fc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024502:	e8 f1 f3 ff ff       	call   c00238f8 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024507:	83 c4 10             	add    esp,0x10
c002450a:	e9 84 01 00 00       	jmp    c0024693 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002450f:	0f b6 d2             	movzx  edx,dl
c0024512:	53                   	push   ebx
c0024513:	53                   	push   ebx
c0024514:	52                   	push   edx
c0024515:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002451b:	e8 d4 e9 ff ff       	call   c0022ef4 <IDE::getBase(unsigned char)>
c0024520:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024524:	b9 06 00 00 00       	mov    ecx,0x6
c0024529:	89 c2                	mov    edx,eax
c002452b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002452e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024532:	83 c4 10             	add    esp,0x10
c0024535:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002453b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024542:	85 db                	test   ebx,ebx
c0024544:	0f 84 ec 00 00 00    	je     c0024636 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c002454a:	51                   	push   ecx
c002454b:	51                   	push   ecx
c002454c:	52                   	push   edx
c002454d:	50                   	push   eax
c002454e:	e8 21 eb ff ff       	call   c0023074 <IDE::waitInterrupt(unsigned char)>
c0024553:	83 c4 10             	add    esp,0x10
c0024556:	84 c0                	test   al,al
c0024558:	0f 84 d4 fe ff ff    	je     c0024432 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002455e:	56                   	push   esi
c002455f:	56                   	push   esi
c0024560:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024567:	50                   	push   eax
c0024568:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002456e:	e8 6d e9 ff ff       	call   c0022ee0 <IDE::prepareInterrupt(unsigned char)>
c0024573:	83 c4 0c             	add    esp,0xc
c0024576:	6a 04                	push   0x4
c0024578:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002457f:	50                   	push   eax
c0024580:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024586:	e8 3b ea ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c002458b:	83 c4 0c             	add    esp,0xc
c002458e:	89 c6                	mov    esi,eax
c0024590:	6a 05                	push   0x5
c0024592:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024599:	50                   	push   eax
c002459a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00245a0:	e8 21 ea ff ff       	call   c0022fc6 <IDE::read(unsigned char, unsigned char)>
c00245a5:	89 f1                	mov    ecx,esi
c00245a7:	0f b6 c0             	movzx  eax,al
c00245aa:	0f b6 f1             	movzx  esi,cl
c00245ad:	c1 e0 08             	shl    eax,0x8
c00245b0:	09 c6                	or     esi,eax
c00245b2:	d1 fe                	sar    esi,1
c00245b4:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00245b8:	83 c4 10             	add    esp,0x10
c00245bb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00245c0:	74 41                	je     c0024603 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00245c2:	31 c9                	xor    ecx,ecx
c00245c4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00245ca:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00245d1:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00245d5:	75 0a                	jne    c00245e1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00245d7:	01 c9                	add    ecx,ecx
c00245d9:	01 cd                	add    ebp,ecx
c00245db:	4b                   	dec    ebx
c00245dc:	e9 54 ff ff ff       	jmp    c0024535 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00245e1:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00245e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00245ea:	51                   	push   ecx
c00245eb:	51                   	push   ecx
c00245ec:	52                   	push   edx
c00245ed:	50                   	push   eax
c00245ee:	e8 01 e9 ff ff       	call   c0022ef4 <IDE::getBase(unsigned char)>
c00245f3:	89 c2                	mov    edx,eax
c00245f5:	89 f0                	mov    eax,esi
c00245f7:	66 ef                	out    dx,ax
c00245f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00245fd:	83 c4 10             	add    esp,0x10
c0024600:	41                   	inc    ecx
c0024601:	eb c1                	jmp    c00245c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0024603:	31 f6                	xor    esi,esi
c0024605:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002460b:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024612:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0024616:	75 06                	jne    c002461e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024618:	01 f6                	add    esi,esi
c002461a:	01 f5                	add    ebp,esi
c002461c:	eb bd                	jmp    c00245db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002461e:	51                   	push   ecx
c002461f:	51                   	push   ecx
c0024620:	52                   	push   edx
c0024621:	50                   	push   eax
c0024622:	e8 cd e8 ff ff       	call   c0022ef4 <IDE::getBase(unsigned char)>
c0024627:	89 c2                	mov    edx,eax
c0024629:	66 ed                	in     ax,dx
c002462b:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024630:	83 c4 10             	add    esp,0x10
c0024633:	46                   	inc    esi
c0024634:	eb cf                	jmp    c0024605 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0024636:	51                   	push   ecx
c0024637:	51                   	push   ecx
c0024638:	52                   	push   edx
c0024639:	50                   	push   eax
c002463a:	e8 35 ea ff ff       	call   c0023074 <IDE::waitInterrupt(unsigned char)>
c002463f:	83 c4 10             	add    esp,0x10
c0024642:	84 c0                	test   al,al
c0024644:	0f 84 e8 fd ff ff    	je     c0024432 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002464a:	bb a0 86 01 00       	mov    ebx,0x186a0
c002464f:	52                   	push   edx
c0024650:	52                   	push   edx
c0024651:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024658:	50                   	push   eax
c0024659:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002465f:	e8 7c e8 ff ff       	call   c0022ee0 <IDE::prepareInterrupt(unsigned char)>
c0024664:	83 c4 10             	add    esp,0x10
c0024667:	50                   	push   eax
c0024668:	50                   	push   eax
c0024669:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024670:	50                   	push   eax
c0024671:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024677:	e8 78 e8 ff ff       	call   c0022ef4 <IDE::getBase(unsigned char)>
c002467c:	8d 50 07             	lea    edx,[eax+0x7]
c002467f:	ec                   	in     al,dx
c0024680:	83 c4 10             	add    esp,0x10
c0024683:	a8 88                	test   al,0x88
c0024685:	74 0a                	je     c0024691 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0024687:	4b                   	dec    ebx
c0024688:	75 dd                	jne    c0024667 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002468a:	bb 02 00 00 00       	mov    ebx,0x2
c002468f:	eb 02                	jmp    c0024693 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024691:	31 db                	xor    ebx,ebx
c0024693:	83 c4 1c             	add    esp,0x1c
c0024696:	89 d8                	mov    eax,ebx
c0024698:	5b                   	pop    ebx
c0024699:	5e                   	pop    esi
c002469a:	5f                   	pop    edi
c002469b:	5d                   	pop    ebp
c002469c:	c3                   	ret    
c002469d:	90                   	nop

c002469e <ATAPI::diskRemoved()>:
c002469e:	83 ec 18             	sub    esp,0x18
c00246a1:	68 25 c3 02 c0       	push   0xc002c325
c00246a6:	e8 08 e0 fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00246ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00246af:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00246b6:	83 c4 1c             	add    esp,0x1c
c00246b9:	c3                   	ret    

c00246ba <ATAPI::eject()>:
c00246ba:	57                   	push   edi
c00246bb:	b9 03 00 00 00       	mov    ecx,0x3
c00246c0:	53                   	push   ebx
c00246c1:	83 ec 14             	sub    esp,0x14
c00246c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00246c8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00246cc:	fc                   	cld    
c00246cd:	31 c0                	xor    eax,eax
c00246cf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00246d1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00246d6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00246db:	50                   	push   eax
c00246dc:	50                   	push   eax
c00246dd:	6a 00                	push   0x0
c00246df:	6a 00                	push   0x0
c00246e1:	6a 00                	push   0x0
c00246e3:	6a 02                	push   0x2
c00246e5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00246e9:	50                   	push   eax
c00246ea:	53                   	push   ebx
c00246eb:	e8 ee fc ff ff       	call   c00243de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00246f0:	83 c4 14             	add    esp,0x14
c00246f3:	53                   	push   ebx
c00246f4:	e8 a5 ff ff ff       	call   c002469e <ATAPI::diskRemoved()>
c00246f9:	83 c4 24             	add    esp,0x24
c00246fc:	31 c0                	xor    eax,eax
c00246fe:	5b                   	pop    ebx
c00246ff:	5f                   	pop    edi
c0024700:	c3                   	ret    
c0024701:	90                   	nop

c0024702 <ATAPI::diskInserted()>:
c0024702:	53                   	push   ebx
c0024703:	83 ec 14             	sub    esp,0x14
c0024706:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002470a:	68 3c c3 02 c0       	push   0xc002c33c
c002470f:	e8 9f df fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0024714:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c002471b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002471e:	e8 67 f8 fe ff       	call   c0013f8a <PhysicalDisk::startCache()>
c0024723:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024727:	83 c4 18             	add    esp,0x18
c002472a:	5b                   	pop    ebx
c002472b:	e9 dc 1a ff ff       	jmp    c001620c <createPartitionsForDisk(PhysicalDisk*)>

c0024730 <ATAPI::detectMedia()>:
c0024730:	56                   	push   esi
c0024731:	53                   	push   ebx
c0024732:	83 ec 28             	sub    esp,0x28
c0024735:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024739:	6a 0c                	push   0xc
c002473b:	6a 00                	push   0x0
c002473d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024741:	56                   	push   esi
c0024742:	e8 09 c0 fd ff       	call   c0000750 <memset>
c0024747:	58                   	pop    eax
c0024748:	5a                   	pop    edx
c0024749:	6a 00                	push   0x0
c002474b:	6a 00                	push   0x0
c002474d:	6a 00                	push   0x0
c002474f:	6a 00                	push   0x0
c0024751:	56                   	push   esi
c0024752:	53                   	push   ebx
c0024753:	e8 86 fc ff ff       	call   c00243de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024758:	83 c4 1c             	add    esp,0x1c
c002475b:	6a 0c                	push   0xc
c002475d:	6a 00                	push   0x0
c002475f:	56                   	push   esi
c0024760:	e8 eb bf fd ff       	call   c0000750 <memset>
c0024765:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002476a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002476f:	59                   	pop    ecx
c0024770:	58                   	pop    eax
c0024771:	6a 01                	push   0x1
c0024773:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024777:	50                   	push   eax
c0024778:	6a 00                	push   0x0
c002477a:	6a 12                	push   0x12
c002477c:	56                   	push   esi
c002477d:	53                   	push   ebx
c002477e:	e8 5b fc ff ff       	call   c00243de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024783:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024787:	83 c4 20             	add    esp,0x20
c002478a:	83 e0 7f             	and    eax,0x7f
c002478d:	3c 70                	cmp    al,0x70
c002478f:	74 15                	je     c00247a6 <ATAPI::detectMedia()+0x76>
c0024791:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024798:	75 0c                	jne    c00247a6 <ATAPI::detectMedia()+0x76>
c002479a:	83 ec 0c             	sub    esp,0xc
c002479d:	53                   	push   ebx
c002479e:	e8 5f ff ff ff       	call   c0024702 <ATAPI::diskInserted()>
c00247a3:	83 c4 10             	add    esp,0x10
c00247a6:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00247aa:	83 e0 0f             	and    eax,0xf
c00247ad:	3c 02                	cmp    al,0x2
c00247af:	75 1b                	jne    c00247cc <ATAPI::detectMedia()+0x9c>
c00247b1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00247b6:	75 2d                	jne    c00247e5 <ATAPI::detectMedia()+0xb5>
c00247b8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247bf:	74 24                	je     c00247e5 <ATAPI::detectMedia()+0xb5>
c00247c1:	83 ec 0c             	sub    esp,0xc
c00247c4:	53                   	push   ebx
c00247c5:	e8 d4 fe ff ff       	call   c002469e <ATAPI::diskRemoved()>
c00247ca:	eb 16                	jmp    c00247e2 <ATAPI::detectMedia()+0xb2>
c00247cc:	84 c0                	test   al,al
c00247ce:	75 15                	jne    c00247e5 <ATAPI::detectMedia()+0xb5>
c00247d0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00247d7:	75 0c                	jne    c00247e5 <ATAPI::detectMedia()+0xb5>
c00247d9:	83 ec 0c             	sub    esp,0xc
c00247dc:	53                   	push   ebx
c00247dd:	e8 20 ff ff ff       	call   c0024702 <ATAPI::diskInserted()>
c00247e2:	83 c4 10             	add    esp,0x10
c00247e5:	83 c4 24             	add    esp,0x24
c00247e8:	5b                   	pop    ebx
c00247e9:	5e                   	pop    esi
c00247ea:	c3                   	ret    
c00247eb:	90                   	nop

c00247ec <ATAPI::open(int, int, void*)>:
c00247ec:	53                   	push   ebx
c00247ed:	83 ec 08             	sub    esp,0x8
c00247f0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00247f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00247fc:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024802:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024808:	c1 e0 06             	shl    eax,0x6
c002480b:	01 d0                	add    eax,edx
c002480d:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024814:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c002481a:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024821:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002482b:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024831:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024838:	6a 04                	push   0x4
c002483a:	6a 0c                	push   0xc
c002483c:	51                   	push   ecx
c002483d:	52                   	push   edx
c002483e:	e8 c3 e6 ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024843:	90                   	nop
c0024844:	90                   	nop
c0024845:	6a 00                	push   0x0
c0024847:	6a 0c                	push   0xc
c0024849:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024850:	50                   	push   eax
c0024851:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024857:	e8 aa e6 ff ff       	call   c0022f06 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002485c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024863:	83 c4 14             	add    esp,0x14
c0024866:	53                   	push   ebx
c0024867:	e8 c4 fe ff ff       	call   c0024730 <ATAPI::detectMedia()>
c002486c:	31 c0                	xor    eax,eax
c002486e:	83 c4 18             	add    esp,0x18
c0024871:	5b                   	pop    ebx
c0024872:	c3                   	ret    
c0024873:	90                   	nop

c0024874 <ATAPI::read(unsigned long long, int, void*)>:
c0024874:	55                   	push   ebp
c0024875:	57                   	push   edi
c0024876:	56                   	push   esi
c0024877:	53                   	push   ebx
c0024878:	83 ec 1c             	sub    esp,0x1c
c002487b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002487f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024883:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024887:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002488e:	74 41                	je     c00248d1 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024890:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024894:	b9 03 00 00 00       	mov    ecx,0x3
c0024899:	fc                   	cld    
c002489a:	31 c0                	xor    eax,eax
c002489c:	86 fb                	xchg   bl,bh
c002489e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00248a0:	c1 c3 10             	rol    ebx,0x10
c00248a3:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00248a8:	89 e8                	mov    eax,ebp
c00248aa:	86 fb                	xchg   bl,bh
c00248ac:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00248b0:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00248b4:	50                   	push   eax
c00248b5:	50                   	push   eax
c00248b6:	55                   	push   ebp
c00248b7:	c1 e5 0b             	shl    ebp,0xb
c00248ba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00248be:	6a 00                	push   0x0
c00248c0:	55                   	push   ebp
c00248c1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00248c5:	50                   	push   eax
c00248c6:	56                   	push   esi
c00248c7:	e8 12 fb ff ff       	call   c00243de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00248cc:	83 c4 20             	add    esp,0x20
c00248cf:	eb 1a                	jmp    c00248eb <ATAPI::read(unsigned long long, int, void*)+0x77>
c00248d1:	83 ec 0c             	sub    esp,0xc
c00248d4:	56                   	push   esi
c00248d5:	e8 56 fe ff ff       	call   c0024730 <ATAPI::detectMedia()>
c00248da:	83 c4 10             	add    esp,0x10
c00248dd:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00248e4:	75 aa                	jne    c0024890 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00248e6:	b8 02 00 00 00       	mov    eax,0x2
c00248eb:	83 c4 1c             	add    esp,0x1c
c00248ee:	5b                   	pop    ebx
c00248ef:	5e                   	pop    esi
c00248f0:	5f                   	pop    edi
c00248f1:	5d                   	pop    ebp
c00248f2:	c3                   	ret    
c00248f3:	90                   	nop

c00248f4 <SATA::close(int, int, void*)>:
c00248f4:	83 ec 0c             	sub    esp,0xc
c00248f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248fb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024901:	85 c0                	test   eax,eax
c0024903:	74 0c                	je     c0024911 <SATA::close(int, int, void*)+0x1d>
c0024905:	83 ec 0c             	sub    esp,0xc
c0024908:	8b 10                	mov    edx,DWORD PTR [eax]
c002490a:	50                   	push   eax
c002490b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002490e:	83 c4 10             	add    esp,0x10
c0024911:	31 c0                	xor    eax,eax
c0024913:	83 c4 0c             	add    esp,0xc
c0024916:	c3                   	ret    
c0024917:	90                   	nop

c0024918 <SATA::powerSaving(PowerSavingLevel)>:
c0024918:	c3                   	ret    
c0024919:	90                   	nop

c002491a <SATA::open(int, int, void*)>:
c002491a:	56                   	push   esi
c002491b:	53                   	push   ebx
c002491c:	50                   	push   eax
c002491d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024921:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024925:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002492f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024935:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002493f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024943:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002494d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024953:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002495a:	e8 12 b0 fe ff       	call   c000f971 <Phys::allocatePage()>
c002495f:	89 c6                	mov    esi,eax
c0024961:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024967:	81 c6 00 10 00 00    	add    esi,0x1000
c002496d:	e8 ff af fe ff       	call   c000f971 <Phys::allocatePage()>
c0024972:	39 c6                	cmp    esi,eax
c0024974:	74 10                	je     c0024986 <SATA::open(int, int, void*)+0x6c>
c0024976:	83 ec 0c             	sub    esp,0xc
c0024979:	68 64 c2 02 c0       	push   0xc002c264
c002497e:	e8 9c 54 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0024983:	83 c4 10             	add    esp,0x10
c0024986:	83 ec 0c             	sub    esp,0xc
c0024989:	6a 02                	push   0x2
c002498b:	e8 77 c8 fe ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c0024990:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024996:	6a 03                	push   0x3
c0024998:	50                   	push   eax
c0024999:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002499f:	ff 35 d0 da 02 c0    	push   DWORD PTR ds:0xc002dad0
c00249a5:	e8 1a d0 fe ff       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c00249aa:	83 c4 14             	add    esp,0x14
c00249ad:	53                   	push   ebx
c00249ae:	e8 d7 f5 fe ff       	call   c0013f8a <PhysicalDisk::startCache()>
c00249b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249b6:	e8 51 18 ff ff       	call   c001620c <createPartitionsForDisk(PhysicalDisk*)>
c00249bb:	83 c4 14             	add    esp,0x14
c00249be:	31 c0                	xor    eax,eax
c00249c0:	5b                   	pop    ebx
c00249c1:	5e                   	pop    esi
c00249c2:	c3                   	ret    
c00249c3:	90                   	nop

c00249c4 <SATA::SATA()>:
c00249c4:	83 ec 0c             	sub    esp,0xc
c00249c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249cb:	83 ec 04             	sub    esp,0x4
c00249ce:	68 00 02 00 00       	push   0x200
c00249d3:	68 78 c2 02 c0       	push   0xc002c278
c00249d8:	50                   	push   eax
c00249d9:	e8 44 f5 fe ff       	call   c0013f22 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00249de:	83 c4 10             	add    esp,0x10
c00249e1:	ba e8 c2 02 c0       	mov    edx,0xc002c2e8
c00249e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00249ea:	89 10                	mov    DWORD PTR [eax],edx
c00249ec:	90                   	nop
c00249ed:	83 c4 0c             	add    esp,0xc
c00249f0:	c3                   	ret    
c00249f1:	90                   	nop

c00249f2 <SATA::access(unsigned long long, int, void*, bool)>:
c00249f2:	55                   	push   ebp
c00249f3:	57                   	push   edi
c00249f4:	56                   	push   esi
c00249f5:	53                   	push   ebx
c00249f6:	83 ec 2c             	sub    esp,0x2c
c00249f9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00249fd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024a01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024a05:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024a09:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024a0d:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024a12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024a16:	7e 10                	jle    c0024a28 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024a18:	83 ec 0c             	sub    esp,0xc
c0024a1b:	68 88 c2 02 c0       	push   0xc002c288
c0024a20:	e8 fa 53 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0024a25:	83 c4 10             	add    esp,0x10
c0024a28:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a2e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0024a34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024a3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024a3e:	89 d0                	mov    eax,edx
c0024a40:	c1 e0 07             	shl    eax,0x7
c0024a43:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024a47:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024a51:	51                   	push   ecx
c0024a52:	8d 42 02             	lea    eax,[edx+0x2]
c0024a55:	51                   	push   ecx
c0024a56:	c1 e0 07             	shl    eax,0x7
c0024a59:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024a5d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024a61:	50                   	push   eax
c0024a62:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0024a68:	e8 1b f0 ff ff       	call   c0023a88 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024a6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024a71:	83 c4 10             	add    esp,0x10
c0024a74:	b8 01 00 00 00       	mov    eax,0x1
c0024a79:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024a7e:	0f 84 cb 01 00 00    	je     c0024c4f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024a84:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024a88:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a8c:	c1 e0 09             	shl    eax,0x9
c0024a8f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024a94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024a98:	74 0e                	je     c0024aa8 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0024a9a:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0024aa0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0024aa4:	89 c1                	mov    ecx,eax
c0024aa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024aa8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0024aac:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024ab2:	8d 42 02             	lea    eax,[edx+0x2]
c0024ab5:	c1 e0 07             	shl    eax,0x7
c0024ab8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0024abe:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024ac4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024aca:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024ace:	c1 e1 05             	shl    ecx,0x5
c0024ad1:	01 c8                	add    eax,ecx
c0024ad3:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0024ad7:	83 e1 01             	and    ecx,0x1
c0024ada:	89 ce                	mov    esi,ecx
c0024adc:	8a 08                	mov    cl,BYTE PTR [eax]
c0024ade:	c1 e6 06             	shl    esi,0x6
c0024ae1:	83 e1 bf             	and    ecx,0xffffffbf
c0024ae4:	09 f1                	or     ecx,esi
c0024ae6:	88 08                	mov    BYTE PTR [eax],cl
c0024ae8:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024aea:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024af0:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024af6:	89 08                	mov    DWORD PTR [eax],ecx
c0024af8:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0024afe:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c0024b04:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c0024b0a:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c0024b0d:	50                   	push   eax
c0024b0e:	68 90 00 00 00       	push   0x90
c0024b13:	6a 00                	push   0x0
c0024b15:	56                   	push   esi
c0024b16:	e8 35 bc fd ff       	call   c0000750 <memset>
c0024b1b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024b21:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0024b25:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0024b2b:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0024b2f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024b33:	83 c4 10             	add    esp,0x10
c0024b36:	48                   	dec    eax
c0024b37:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024b3c:	89 c1                	mov    ecx,eax
c0024b3e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0024b44:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024b49:	09 c8                	or     eax,ecx
c0024b4b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0024b51:	66 8b 06             	mov    ax,WORD PTR [esi]
c0024b54:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0024b5b:	66 25 00 7f          	and    ax,0x7f00
c0024b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b63:	66 0d 27 80          	or     ax,0x8027
c0024b67:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0024b6c:	66 89 06             	mov    WORD PTR [esi],ax
c0024b6f:	19 c0                	sbb    eax,eax
c0024b71:	83 e0 f0             	and    eax,0xfffffff0
c0024b74:	83 c0 35             	add    eax,0x35
c0024b77:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0024b7a:	89 e8                	mov    eax,ebp
c0024b7c:	c1 e8 10             	shr    eax,0x10
c0024b7f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0024b82:	89 e8                	mov    eax,ebp
c0024b84:	c1 e8 18             	shr    eax,0x18
c0024b87:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0024b8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0024b8e:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0024b91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b95:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0024b98:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024b9c:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0024ba0:	89 d6                	mov    esi,edx
c0024ba2:	31 c0                	xor    eax,eax
c0024ba4:	c1 e6 07             	shl    esi,0x7
c0024ba7:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0024bab:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0024bb1:	80 e1 88             	and    cl,0x88
c0024bb4:	74 0a                	je     c0024bc0 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0024bb6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bbb:	74 0a                	je     c0024bc7 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0024bbd:	40                   	inc    eax
c0024bbe:	eb eb                	jmp    c0024bab <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0024bc0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024bc5:	75 0a                	jne    c0024bd1 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0024bc7:	83 ec 0c             	sub    esp,0xc
c0024bca:	68 c1 c2 02 c0       	push   0xc002c2c1
c0024bcf:	eb 56                	jmp    c0024c27 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0024bd1:	b8 01 00 00 00       	mov    eax,0x1
c0024bd6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024bda:	c1 e2 07             	shl    edx,0x7
c0024bdd:	d3 e0                	shl    eax,cl
c0024bdf:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0024be3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0024be9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0024bef:	85 c8                	test   eax,ecx
c0024bf1:	74 20                	je     c0024c13 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0024bf3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0024bf9:	0f ba e1 1e          	bt     ecx,0x1e
c0024bfd:	73 ea                	jae    c0024be9 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0024bff:	83 ec 0c             	sub    esp,0xc
c0024c02:	68 cf c2 02 c0       	push   0xc002c2cf
c0024c07:	e8 13 52 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0024c0c:	83 c4 10             	add    esp,0x10
c0024c0f:	31 c0                	xor    eax,eax
c0024c11:	eb 3c                	jmp    c0024c4f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c13:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0024c19:	0f ba e0 1e          	bt     eax,0x1e
c0024c1d:	73 17                	jae    c0024c36 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0024c1f:	83 ec 0c             	sub    esp,0xc
c0024c22:	68 cf c2 02 c0       	push   0xc002c2cf
c0024c27:	e8 f3 51 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0024c2c:	83 c4 10             	add    esp,0x10
c0024c2f:	b8 01 00 00 00       	mov    eax,0x1
c0024c34:	eb 19                	jmp    c0024c4f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c36:	31 c0                	xor    eax,eax
c0024c38:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0024c3d:	75 10                	jne    c0024c4f <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0024c3f:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0024c45:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0024c49:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024c4f:	83 c4 2c             	add    esp,0x2c
c0024c52:	5b                   	pop    ebx
c0024c53:	5e                   	pop    esi
c0024c54:	5f                   	pop    edi
c0024c55:	5d                   	pop    ebp
c0024c56:	c3                   	ret    
c0024c57:	90                   	nop

c0024c58 <SATA::read(unsigned long long, int, void*)>:
c0024c58:	57                   	push   edi
c0024c59:	b8 04 00 00 00       	mov    eax,0x4
c0024c5e:	56                   	push   esi
c0024c5f:	53                   	push   ebx
c0024c60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c64:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c68:	8d 7a ff             	lea    edi,[edx-0x1]
c0024c6b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024c6f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024c73:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024c79:	77 25                	ja     c0024ca0 <SATA::read(unsigned long long, int, void*)+0x48>
c0024c7b:	b8 06 00 00 00       	mov    eax,0x6
c0024c80:	85 f6                	test   esi,esi
c0024c82:	74 1c                	je     c0024ca0 <SATA::read(unsigned long long, int, void*)+0x48>
c0024c84:	50                   	push   eax
c0024c85:	50                   	push   eax
c0024c86:	6a 00                	push   0x0
c0024c88:	56                   	push   esi
c0024c89:	52                   	push   edx
c0024c8a:	53                   	push   ebx
c0024c8b:	51                   	push   ecx
c0024c8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c90:	e8 5d fd ff ff       	call   c00249f2 <SATA::access(unsigned long long, int, void*, bool)>
c0024c95:	83 c4 20             	add    esp,0x20
c0024c98:	85 c0                	test   eax,eax
c0024c9a:	0f 95 c0             	setne  al
c0024c9d:	0f b6 c0             	movzx  eax,al
c0024ca0:	5b                   	pop    ebx
c0024ca1:	5e                   	pop    esi
c0024ca2:	5f                   	pop    edi
c0024ca3:	c3                   	ret    

c0024ca4 <SATA::write(unsigned long long, int, void*)>:
c0024ca4:	55                   	push   ebp
c0024ca5:	b8 04 00 00 00       	mov    eax,0x4
c0024caa:	57                   	push   edi
c0024cab:	56                   	push   esi
c0024cac:	53                   	push   ebx
c0024cad:	83 ec 0c             	sub    esp,0xc
c0024cb0:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024cb4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024cb8:	8d 73 ff             	lea    esi,[ebx-0x1]
c0024cbb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024cbf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0024cc3:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024cc9:	77 3d                	ja     c0024d08 <SATA::write(unsigned long long, int, void*)+0x64>
c0024ccb:	b8 06 00 00 00       	mov    eax,0x6
c0024cd0:	85 ed                	test   ebp,ebp
c0024cd2:	74 34                	je     c0024d08 <SATA::write(unsigned long long, int, void*)+0x64>
c0024cd4:	c1 e3 09             	shl    ebx,0x9
c0024cd7:	01 eb                	add    ebx,ebp
c0024cd9:	89 d6                	mov    esi,edx
c0024cdb:	89 cf                	mov    edi,ecx
c0024cdd:	83 c6 01             	add    esi,0x1
c0024ce0:	83 d7 00             	adc    edi,0x0
c0024ce3:	50                   	push   eax
c0024ce4:	50                   	push   eax
c0024ce5:	6a 01                	push   0x1
c0024ce7:	55                   	push   ebp
c0024ce8:	81 c5 00 02 00 00    	add    ebp,0x200
c0024cee:	6a 01                	push   0x1
c0024cf0:	51                   	push   ecx
c0024cf1:	52                   	push   edx
c0024cf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024cf6:	e8 f7 fc ff ff       	call   c00249f2 <SATA::access(unsigned long long, int, void*, bool)>
c0024cfb:	83 c4 20             	add    esp,0x20
c0024cfe:	89 f2                	mov    edx,esi
c0024d00:	89 f9                	mov    ecx,edi
c0024d02:	39 dd                	cmp    ebp,ebx
c0024d04:	75 d3                	jne    c0024cd9 <SATA::write(unsigned long long, int, void*)+0x35>
c0024d06:	31 c0                	xor    eax,eax
c0024d08:	83 c4 0c             	add    esp,0xc
c0024d0b:	5b                   	pop    ebx
c0024d0c:	5e                   	pop    esi
c0024d0d:	5f                   	pop    edi
c0024d0e:	5d                   	pop    ebp
c0024d0f:	c3                   	ret    

c0024d10 <SATAPI::write(unsigned long long, int, void*)>:
c0024d10:	b8 03 00 00 00       	mov    eax,0x3
c0024d15:	c3                   	ret    

c0024d16 <SATAPI::close(int, int, void*)>:
c0024d16:	83 ec 0c             	sub    esp,0xc
c0024d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d1d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024d23:	85 c0                	test   eax,eax
c0024d25:	74 0c                	je     c0024d33 <SATAPI::close(int, int, void*)+0x1d>
c0024d27:	83 ec 0c             	sub    esp,0xc
c0024d2a:	8b 10                	mov    edx,DWORD PTR [eax]
c0024d2c:	50                   	push   eax
c0024d2d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024d30:	83 c4 10             	add    esp,0x10
c0024d33:	31 c0                	xor    eax,eax
c0024d35:	83 c4 0c             	add    esp,0xc
c0024d38:	c3                   	ret    
c0024d39:	90                   	nop

c0024d3a <SATAPI::SATAPI()>:
c0024d3a:	83 ec 0c             	sub    esp,0xc
c0024d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d41:	83 ec 04             	sub    esp,0x4
c0024d44:	68 00 08 00 00       	push   0x800
c0024d49:	68 18 c3 02 c0       	push   0xc002c318
c0024d4e:	50                   	push   eax
c0024d4f:	e8 ce f1 fe ff       	call   c0013f22 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d54:	83 c4 10             	add    esp,0x10
c0024d57:	ba c4 c3 02 c0       	mov    edx,0xc002c3c4
c0024d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d60:	89 10                	mov    DWORD PTR [eax],edx
c0024d62:	90                   	nop
c0024d63:	83 c4 0c             	add    esp,0xc
c0024d66:	c3                   	ret    
c0024d67:	90                   	nop

c0024d68 <SATAPI::diskRemoved()>:
c0024d68:	83 ec 18             	sub    esp,0x18
c0024d6b:	68 24 c3 02 c0       	push   0xc002c324
c0024d70:	e8 3e d9 fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0024d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024d79:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024d80:	83 c4 1c             	add    esp,0x1c
c0024d83:	c3                   	ret    

c0024d84 <SATAPI::diskInserted()>:
c0024d84:	53                   	push   ebx
c0024d85:	83 ec 14             	sub    esp,0x14
c0024d88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024d8c:	68 3b c3 02 c0       	push   0xc002c33b
c0024d91:	e8 1d d9 fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0024d96:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024d9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024da0:	e8 e5 f1 fe ff       	call   c0013f8a <PhysicalDisk::startCache()>
c0024da5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024da9:	83 c4 18             	add    esp,0x18
c0024dac:	5b                   	pop    ebx
c0024dad:	e9 5a 14 ff ff       	jmp    c001620c <createPartitionsForDisk(PhysicalDisk*)>

c0024db2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024db2:	55                   	push   ebp
c0024db3:	57                   	push   edi
c0024db4:	56                   	push   esi
c0024db5:	53                   	push   ebx
c0024db6:	83 ec 34             	sub    esp,0x34
c0024db9:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0024dbd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024dc1:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0024dc5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024dc9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0024dcd:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024dd3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024dd9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024ddd:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0024de3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024de7:	c1 e0 07             	shl    eax,0x7
c0024dea:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0024dee:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024df2:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024dfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024e00:	8d 58 02             	lea    ebx,[eax+0x2]
c0024e03:	c1 e3 07             	shl    ebx,0x7
c0024e06:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0024e0a:	53                   	push   ebx
c0024e0b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024e11:	e8 72 ec ff ff       	call   c0023a88 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024e16:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0024e1a:	83 c4 10             	add    esp,0x10
c0024e1d:	b8 01 00 00 00       	mov    eax,0x1
c0024e22:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0024e27:	0f 84 85 01 00 00    	je     c0024fb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024e2d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e33:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024e35:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e3b:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e41:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e45:	c1 e1 05             	shl    ecx,0x5
c0024e48:	01 c8                	add    eax,ecx
c0024e4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e4c:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024e52:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024e58:	89 08                	mov    DWORD PTR [eax],ecx
c0024e5a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e60:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e66:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e6c:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e6f:	8d 7b 40             	lea    edi,[ebx+0x40]
c0024e72:	50                   	push   eax
c0024e73:	68 90 00 00 00       	push   0x90
c0024e78:	6a 00                	push   0x0
c0024e7a:	53                   	push   ebx
c0024e7b:	e8 d0 b8 fd ff       	call   c0000750 <memset>
c0024e80:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0024e84:	b9 0c 00 00 00       	mov    ecx,0xc
c0024e89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024e8b:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0024e91:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024e95:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e9b:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e9f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024ea3:	48                   	dec    eax
c0024ea4:	25 ff ff 3f 00       	and    eax,0x3fffff
c0024ea9:	89 c1                	mov    ecx,eax
c0024eab:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024eb1:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024eb6:	09 c8                	or     eax,ecx
c0024eb8:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024ebe:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024ec1:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ec8:	66 25 00 7f          	and    ax,0x7f00
c0024ecc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0024ed0:	66 0d 27 80          	or     ax,0x8027
c0024ed4:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0024ed8:	66 89 03             	mov    WORD PTR [ebx],ax
c0024edb:	89 d0                	mov    eax,edx
c0024edd:	c1 ea 18             	shr    edx,0x18
c0024ee0:	c1 e8 10             	shr    eax,0x10
c0024ee3:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024ee6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ee9:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0024eed:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ef0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024ef4:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024ef7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0024efb:	83 c4 10             	add    esp,0x10
c0024efe:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024f02:	31 c0                	xor    eax,eax
c0024f04:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0024f08:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0024f0e:	80 e2 88             	and    dl,0x88
c0024f11:	74 0a                	je     c0024f1d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024f13:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f18:	74 0a                	je     c0024f24 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0024f1a:	40                   	inc    eax
c0024f1b:	eb eb                	jmp    c0024f08 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0024f1d:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f22:	75 0f                	jne    c0024f33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0024f24:	83 ec 0c             	sub    esp,0xc
c0024f27:	68 c1 c2 02 c0       	push   0xc002c2c1
c0024f2c:	e8 ee 4e ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0024f31:	eb 3f                	jmp    c0024f72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0024f33:	ba 01 00 00 00       	mov    edx,0x1
c0024f38:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024f3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f40:	d3 e2                	shl    edx,cl
c0024f42:	c1 e0 07             	shl    eax,0x7
c0024f45:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0024f4b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024f4f:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0024f55:	85 ca                	test   edx,ecx
c0024f57:	74 23                	je     c0024f7c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0024f59:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0024f5f:	0f ba e1 1e          	bt     ecx,0x1e
c0024f63:	73 ea                	jae    c0024f4f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0024f65:	83 ec 0c             	sub    esp,0xc
c0024f68:	68 53 c3 02 c0       	push   0xc002c353
c0024f6d:	e8 41 d7 fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0024f72:	83 c4 10             	add    esp,0x10
c0024f75:	b8 01 00 00 00       	mov    eax,0x1
c0024f7a:	eb 36                	jmp    c0024fb2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0024f7c:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0024f82:	0f ba e0 1e          	bt     eax,0x1e
c0024f86:	73 0a                	jae    c0024f92 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0024f88:	83 ec 0c             	sub    esp,0xc
c0024f8b:	68 66 c3 02 c0       	push   0xc002c366
c0024f90:	eb db                	jmp    c0024f6d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0024f92:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0024f97:	74 17                	je     c0024fb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024f99:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0024f9e:	74 10                	je     c0024fb0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0024fa0:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0024fa6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0024faa:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0024fae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0024fb0:	31 c0                	xor    eax,eax
c0024fb2:	83 c4 2c             	add    esp,0x2c
c0024fb5:	5b                   	pop    ebx
c0024fb6:	5e                   	pop    esi
c0024fb7:	5f                   	pop    edi
c0024fb8:	5d                   	pop    ebp
c0024fb9:	c3                   	ret    

c0024fba <SATAPI::eject()>:
c0024fba:	57                   	push   edi
c0024fbb:	b9 03 00 00 00       	mov    ecx,0x3
c0024fc0:	53                   	push   ebx
c0024fc1:	83 ec 14             	sub    esp,0x14
c0024fc4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024fc8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024fcc:	fc                   	cld    
c0024fcd:	31 c0                	xor    eax,eax
c0024fcf:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024fd1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024fd6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024fdb:	50                   	push   eax
c0024fdc:	6a 00                	push   0x0
c0024fde:	6a 00                	push   0x0
c0024fe0:	6a 00                	push   0x0
c0024fe2:	6a 00                	push   0x0
c0024fe4:	6a 02                	push   0x2
c0024fe6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024fea:	50                   	push   eax
c0024feb:	53                   	push   ebx
c0024fec:	e8 c1 fd ff ff       	call   c0024db2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024ff1:	83 c4 14             	add    esp,0x14
c0024ff4:	53                   	push   ebx
c0024ff5:	e8 6e fd ff ff       	call   c0024d68 <SATAPI::diskRemoved()>
c0024ffa:	83 c4 24             	add    esp,0x24
c0024ffd:	31 c0                	xor    eax,eax
c0024fff:	5b                   	pop    ebx
c0025000:	5f                   	pop    edi
c0025001:	c3                   	ret    

c0025002 <SATAPI::detectMedia()>:
c0025002:	56                   	push   esi
c0025003:	53                   	push   ebx
c0025004:	83 ec 28             	sub    esp,0x28
c0025007:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002500b:	6a 0c                	push   0xc
c002500d:	6a 00                	push   0x0
c002500f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025013:	56                   	push   esi
c0025014:	e8 37 b7 fd ff       	call   c0000750 <memset>
c0025019:	83 c4 0c             	add    esp,0xc
c002501c:	6a 00                	push   0x0
c002501e:	6a 00                	push   0x0
c0025020:	6a 00                	push   0x0
c0025022:	6a 00                	push   0x0
c0025024:	6a 00                	push   0x0
c0025026:	56                   	push   esi
c0025027:	53                   	push   ebx
c0025028:	e8 85 fd ff ff       	call   c0024db2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002502d:	83 c4 1c             	add    esp,0x1c
c0025030:	6a 0c                	push   0xc
c0025032:	6a 00                	push   0x0
c0025034:	56                   	push   esi
c0025035:	e8 16 b7 fd ff       	call   c0000750 <memset>
c002503a:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002503f:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025044:	83 c4 0c             	add    esp,0xc
c0025047:	6a 01                	push   0x1
c0025049:	8d 44 24 16          	lea    eax,[esp+0x16]
c002504d:	50                   	push   eax
c002504e:	6a 00                	push   0x0
c0025050:	6a 00                	push   0x0
c0025052:	6a 12                	push   0x12
c0025054:	56                   	push   esi
c0025055:	53                   	push   ebx
c0025056:	e8 57 fd ff ff       	call   c0024db2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002505b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002505f:	83 c4 20             	add    esp,0x20
c0025062:	83 e0 7f             	and    eax,0x7f
c0025065:	3c 70                	cmp    al,0x70
c0025067:	74 15                	je     c002507e <SATAPI::detectMedia()+0x7c>
c0025069:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025070:	75 0c                	jne    c002507e <SATAPI::detectMedia()+0x7c>
c0025072:	83 ec 0c             	sub    esp,0xc
c0025075:	53                   	push   ebx
c0025076:	e8 09 fd ff ff       	call   c0024d84 <SATAPI::diskInserted()>
c002507b:	83 c4 10             	add    esp,0x10
c002507e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025082:	83 e0 0f             	and    eax,0xf
c0025085:	3c 02                	cmp    al,0x2
c0025087:	75 1b                	jne    c00250a4 <SATAPI::detectMedia()+0xa2>
c0025089:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002508e:	75 2d                	jne    c00250bd <SATAPI::detectMedia()+0xbb>
c0025090:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025097:	74 24                	je     c00250bd <SATAPI::detectMedia()+0xbb>
c0025099:	83 ec 0c             	sub    esp,0xc
c002509c:	53                   	push   ebx
c002509d:	e8 c6 fc ff ff       	call   c0024d68 <SATAPI::diskRemoved()>
c00250a2:	eb 16                	jmp    c00250ba <SATAPI::detectMedia()+0xb8>
c00250a4:	84 c0                	test   al,al
c00250a6:	75 15                	jne    c00250bd <SATAPI::detectMedia()+0xbb>
c00250a8:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00250af:	75 0c                	jne    c00250bd <SATAPI::detectMedia()+0xbb>
c00250b1:	83 ec 0c             	sub    esp,0xc
c00250b4:	53                   	push   ebx
c00250b5:	e8 ca fc ff ff       	call   c0024d84 <SATAPI::diskInserted()>
c00250ba:	83 c4 10             	add    esp,0x10
c00250bd:	83 c4 24             	add    esp,0x24
c00250c0:	5b                   	pop    ebx
c00250c1:	5e                   	pop    esi
c00250c2:	c3                   	ret    
c00250c3:	90                   	nop

c00250c4 <SATAPI::open(int, int, void*)>:
c00250c4:	56                   	push   esi
c00250c5:	53                   	push   ebx
c00250c6:	50                   	push   eax
c00250c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00250cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00250cf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00250d9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00250df:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00250e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00250ed:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00250f7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00250fd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025104:	e8 68 a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c0025109:	89 c6                	mov    esi,eax
c002510b:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025111:	81 c6 00 10 00 00    	add    esi,0x1000
c0025117:	e8 55 a8 fe ff       	call   c000f971 <Phys::allocatePage()>
c002511c:	39 c6                	cmp    esi,eax
c002511e:	74 10                	je     c0025130 <SATAPI::open(int, int, void*)+0x6c>
c0025120:	83 ec 0c             	sub    esp,0xc
c0025123:	68 7b c3 02 c0       	push   0xc002c37b
c0025128:	e8 f2 4c ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c002512d:	83 c4 10             	add    esp,0x10
c0025130:	83 ec 0c             	sub    esp,0xc
c0025133:	6a 02                	push   0x2
c0025135:	e8 cd c0 fe ff       	call   c0011207 <Virt::allocateKernelVirtualPages(int)>
c002513a:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025140:	6a 03                	push   0x3
c0025142:	50                   	push   eax
c0025143:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025149:	ff 35 d0 da 02 c0    	push   DWORD PTR ds:0xc002dad0
c002514f:	e8 70 c8 fe ff       	call   c00119c4 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025154:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002515b:	83 c4 14             	add    esp,0x14
c002515e:	53                   	push   ebx
c002515f:	e8 9e fe ff ff       	call   c0025002 <SATAPI::detectMedia()>
c0025164:	83 c4 14             	add    esp,0x14
c0025167:	31 c0                	xor    eax,eax
c0025169:	5b                   	pop    ebx
c002516a:	5e                   	pop    esi
c002516b:	c3                   	ret    

c002516c <SATAPI::read(unsigned long long, int, void*)>:
c002516c:	55                   	push   ebp
c002516d:	57                   	push   edi
c002516e:	56                   	push   esi
c002516f:	53                   	push   ebx
c0025170:	83 ec 1c             	sub    esp,0x1c
c0025173:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025177:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002517b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002517f:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025186:	74 19                	je     c00251a1 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025188:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c002518d:	7e 2e                	jle    c00251bd <SATAPI::read(unsigned long long, int, void*)+0x51>
c002518f:	83 ec 0c             	sub    esp,0xc
c0025192:	68 91 c3 02 c0       	push   0xc002c391
c0025197:	e8 83 4c ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c002519c:	83 c4 10             	add    esp,0x10
c002519f:	eb 1c                	jmp    c00251bd <SATAPI::read(unsigned long long, int, void*)+0x51>
c00251a1:	83 ec 0c             	sub    esp,0xc
c00251a4:	55                   	push   ebp
c00251a5:	e8 58 fe ff ff       	call   c0025002 <SATAPI::detectMedia()>
c00251aa:	83 c4 10             	add    esp,0x10
c00251ad:	b8 02 00 00 00       	mov    eax,0x2
c00251b2:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00251b9:	75 cd                	jne    c0025188 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00251bb:	eb 49                	jmp    c0025206 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00251bd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00251c1:	b9 03 00 00 00       	mov    ecx,0x3
c00251c6:	fc                   	cld    
c00251c7:	31 c0                	xor    eax,eax
c00251c9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00251cb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00251d0:	89 d8                	mov    eax,ebx
c00251d2:	86 e0                	xchg   al,ah
c00251d4:	c1 c0 10             	rol    eax,0x10
c00251d7:	86 e0                	xchg   al,ah
c00251d9:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00251dd:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00251e1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00251e5:	50                   	push   eax
c00251e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00251ea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00251ee:	56                   	push   esi
c00251ef:	53                   	push   ebx
c00251f0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00251f4:	c1 e0 0b             	shl    eax,0xb
c00251f7:	50                   	push   eax
c00251f8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00251fc:	50                   	push   eax
c00251fd:	55                   	push   ebp
c00251fe:	e8 af fb ff ff       	call   c0024db2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025203:	83 c4 20             	add    esp,0x20
c0025206:	83 c4 1c             	add    esp,0x1c
c0025209:	5b                   	pop    ebx
c002520a:	5e                   	pop    esi
c002520b:	5f                   	pop    edi
c002520c:	5d                   	pop    ebp
c002520d:	c3                   	ret    

c002520e <AVX::open(int, int, void*)>:
c002520e:	83 ec 0c             	sub    esp,0xc
c0025211:	e8 42 11 00 00       	call   c0026358 <avxInit>
c0025216:	b8 00 00 00 00       	mov    eax,0x0
c002521b:	83 c4 0c             	add    esp,0xc
c002521e:	c3                   	ret    
c002521f:	90                   	nop

c0025220 <AVX::close(int, int, void*)>:
c0025220:	83 ec 0c             	sub    esp,0xc
c0025223:	e8 31 11 00 00       	call   c0026359 <avxClose>
c0025228:	b8 00 00 00 00       	mov    eax,0x0
c002522d:	83 c4 0c             	add    esp,0xc
c0025230:	c3                   	ret    
c0025231:	90                   	nop

c0025232 <AVX::available()>:
c0025232:	83 ec 0c             	sub    esp,0xc
c0025235:	e8 16 11 00 00       	call   c0026350 <avxDetect>
c002523a:	85 c0                	test   eax,eax
c002523c:	0f 95 c0             	setne  al
c002523f:	83 c4 0c             	add    esp,0xc
c0025242:	c3                   	ret    
c0025243:	90                   	nop

c0025244 <AVX::save(void*)>:
c0025244:	83 ec 0c             	sub    esp,0xc
c0025247:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002524b:	83 ec 0c             	sub    esp,0xc
c002524e:	50                   	push   eax
c002524f:	e8 02 11 00 00       	call   c0026356 <avxSave>
c0025254:	83 c4 10             	add    esp,0x10
c0025257:	90                   	nop
c0025258:	83 c4 0c             	add    esp,0xc
c002525b:	c3                   	ret    

c002525c <AVX::load(void*)>:
c002525c:	83 ec 0c             	sub    esp,0xc
c002525f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025263:	83 ec 0c             	sub    esp,0xc
c0025266:	50                   	push   eax
c0025267:	e8 eb 10 00 00       	call   c0026357 <avxLoad>
c002526c:	83 c4 10             	add    esp,0x10
c002526f:	90                   	nop
c0025270:	83 c4 0c             	add    esp,0xc
c0025273:	c3                   	ret    

c0025274 <AVX::AVX()>:
c0025274:	83 ec 0c             	sub    esp,0xc
c0025277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002527b:	83 ec 08             	sub    esp,0x8
c002527e:	68 f4 c3 02 c0       	push   0xc002c3f4
c0025283:	50                   	push   eax
c0025284:	e8 77 ed fe ff       	call   c0014000 <FPU::FPU(char const*)>
c0025289:	83 c4 10             	add    esp,0x10
c002528c:	ba 04 c4 02 c0       	mov    edx,0xc002c404
c0025291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025295:	89 10                	mov    DWORD PTR [eax],edx
c0025297:	90                   	nop
c0025298:	83 c4 0c             	add    esp,0xc
c002529b:	c3                   	ret    

c002529c <MMX::available()>:
c002529c:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00252a1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00252a7:	83 e0 20             	and    eax,0x20
c00252aa:	84 c0                	test   al,al
c00252ac:	0f 95 c0             	setne  al
c00252af:	c3                   	ret    

c00252b0 <MMX::open(int, int, void*)>:
c00252b0:	83 ec 0c             	sub    esp,0xc
c00252b3:	e8 2a 11 00 00       	call   c00263e2 <x87Init>
c00252b8:	b8 00 00 00 00       	mov    eax,0x0
c00252bd:	83 c4 0c             	add    esp,0xc
c00252c0:	c3                   	ret    
c00252c1:	90                   	nop

c00252c2 <MMX::close(int, int, void*)>:
c00252c2:	83 ec 0c             	sub    esp,0xc
c00252c5:	e8 32 11 00 00       	call   c00263fc <x87Close>
c00252ca:	b8 00 00 00 00       	mov    eax,0x0
c00252cf:	83 c4 0c             	add    esp,0xc
c00252d2:	c3                   	ret    
c00252d3:	90                   	nop

c00252d4 <MMX::save(void*)>:
c00252d4:	83 ec 0c             	sub    esp,0xc
c00252d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252db:	83 ec 0c             	sub    esp,0xc
c00252de:	50                   	push   eax
c00252df:	e8 ed 10 00 00       	call   c00263d1 <x87Save>
c00252e4:	83 c4 10             	add    esp,0x10
c00252e7:	90                   	nop
c00252e8:	83 c4 0c             	add    esp,0xc
c00252eb:	c3                   	ret    

c00252ec <MMX::load(void*)>:
c00252ec:	83 ec 0c             	sub    esp,0xc
c00252ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00252f3:	83 ec 0c             	sub    esp,0xc
c00252f6:	50                   	push   eax
c00252f7:	e8 de 10 00 00       	call   c00263da <x87Load>
c00252fc:	83 c4 10             	add    esp,0x10
c00252ff:	90                   	nop
c0025300:	83 c4 0c             	add    esp,0xc
c0025303:	c3                   	ret    

c0025304 <MMX::MMX()>:
c0025304:	83 ec 0c             	sub    esp,0xc
c0025307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002530b:	83 ec 08             	sub    esp,0x8
c002530e:	68 34 c4 02 c0       	push   0xc002c434
c0025313:	50                   	push   eax
c0025314:	e8 e7 ec fe ff       	call   c0014000 <FPU::FPU(char const*)>
c0025319:	83 c4 10             	add    esp,0x10
c002531c:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c0025321:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025325:	89 10                	mov    DWORD PTR [eax],edx
c0025327:	90                   	nop
c0025328:	83 c4 0c             	add    esp,0xc
c002532b:	c3                   	ret    

c002532c <SSE::open(int, int, void*)>:
c002532c:	83 ec 0c             	sub    esp,0xc
c002532f:	e8 60 10 00 00       	call   c0026394 <sseInit>
c0025334:	b8 00 00 00 00       	mov    eax,0x0
c0025339:	83 c4 0c             	add    esp,0xc
c002533c:	c3                   	ret    
c002533d:	90                   	nop

c002533e <SSE::close(int, int, void*)>:
c002533e:	83 ec 0c             	sub    esp,0xc
c0025341:	e8 5e 10 00 00       	call   c00263a4 <sseClose>
c0025346:	b8 00 00 00 00       	mov    eax,0x0
c002534b:	83 c4 0c             	add    esp,0xc
c002534e:	c3                   	ret    
c002534f:	90                   	nop

c0025350 <SSE::available()>:
c0025350:	83 ec 1c             	sub    esp,0x1c
c0025353:	e8 18 10 00 00       	call   c0026370 <absolutelyNoChanceInHell>
c0025358:	85 c0                	test   eax,eax
c002535a:	0f 95 c0             	setne  al
c002535d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025361:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025365:	83 c4 1c             	add    esp,0x1c
c0025368:	c3                   	ret    
c0025369:	90                   	nop

c002536a <SSE::save(void*)>:
c002536a:	83 ec 0c             	sub    esp,0xc
c002536d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025371:	83 ec 0c             	sub    esp,0xc
c0025374:	50                   	push   eax
c0025375:	e8 0e 10 00 00       	call   c0026388 <sseSave>
c002537a:	83 c4 10             	add    esp,0x10
c002537d:	90                   	nop
c002537e:	83 c4 0c             	add    esp,0xc
c0025381:	c3                   	ret    

c0025382 <SSE::load(void*)>:
c0025382:	83 ec 0c             	sub    esp,0xc
c0025385:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025389:	83 ec 0c             	sub    esp,0xc
c002538c:	50                   	push   eax
c002538d:	e8 fc 0f 00 00       	call   c002638e <sseLoad>
c0025392:	83 c4 10             	add    esp,0x10
c0025395:	90                   	nop
c0025396:	83 c4 0c             	add    esp,0xc
c0025399:	c3                   	ret    

c002539a <SSE::SSE()>:
c002539a:	83 ec 0c             	sub    esp,0xc
c002539d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253a1:	83 ec 08             	sub    esp,0x8
c00253a4:	68 74 c4 02 c0       	push   0xc002c474
c00253a9:	50                   	push   eax
c00253aa:	e8 51 ec fe ff       	call   c0014000 <FPU::FPU(char const*)>
c00253af:	83 c4 10             	add    esp,0x10
c00253b2:	ba 84 c4 02 c0       	mov    edx,0xc002c484
c00253b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253bb:	89 10                	mov    DWORD PTR [eax],edx
c00253bd:	90                   	nop
c00253be:	83 c4 0c             	add    esp,0xc
c00253c1:	c3                   	ret    

c00253c2 <x87::open(int, int, void*)>:
c00253c2:	83 ec 0c             	sub    esp,0xc
c00253c5:	e8 18 10 00 00       	call   c00263e2 <x87Init>
c00253ca:	b8 00 00 00 00       	mov    eax,0x0
c00253cf:	83 c4 0c             	add    esp,0xc
c00253d2:	c3                   	ret    
c00253d3:	90                   	nop

c00253d4 <x87::close(int, int, void*)>:
c00253d4:	83 ec 0c             	sub    esp,0xc
c00253d7:	e8 20 10 00 00       	call   c00263fc <x87Close>
c00253dc:	b8 00 00 00 00       	mov    eax,0x0
c00253e1:	83 c4 0c             	add    esp,0xc
c00253e4:	c3                   	ret    
c00253e5:	90                   	nop

c00253e6 <x87::available()>:
c00253e6:	83 ec 0c             	sub    esp,0xc
c00253e9:	e8 c8 0f 00 00       	call   c00263b6 <x87Detect>
c00253ee:	85 c0                	test   eax,eax
c00253f0:	0f 95 c0             	setne  al
c00253f3:	83 c4 0c             	add    esp,0xc
c00253f6:	c3                   	ret    
c00253f7:	90                   	nop

c00253f8 <x87::save(void*)>:
c00253f8:	83 ec 0c             	sub    esp,0xc
c00253fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253ff:	83 ec 0c             	sub    esp,0xc
c0025402:	50                   	push   eax
c0025403:	e8 c9 0f 00 00       	call   c00263d1 <x87Save>
c0025408:	83 c4 10             	add    esp,0x10
c002540b:	90                   	nop
c002540c:	83 c4 0c             	add    esp,0xc
c002540f:	c3                   	ret    

c0025410 <x87::load(void*)>:
c0025410:	83 ec 0c             	sub    esp,0xc
c0025413:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025417:	83 ec 0c             	sub    esp,0xc
c002541a:	50                   	push   eax
c002541b:	e8 ba 0f 00 00       	call   c00263da <x87Load>
c0025420:	83 c4 10             	add    esp,0x10
c0025423:	90                   	nop
c0025424:	83 c4 0c             	add    esp,0xc
c0025427:	c3                   	ret    

c0025428 <x87::x87()>:
c0025428:	83 ec 0c             	sub    esp,0xc
c002542b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002542f:	83 ec 08             	sub    esp,0x8
c0025432:	68 b4 c4 02 c0       	push   0xc002c4b4
c0025437:	50                   	push   eax
c0025438:	e8 c3 eb fe ff       	call   c0014000 <FPU::FPU(char const*)>
c002543d:	83 c4 10             	add    esp,0x10
c0025440:	ba c4 c4 02 c0       	mov    edx,0xc002c4c4
c0025445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025449:	89 10                	mov    DWORD PTR [eax],edx
c002544b:	90                   	nop
c002544c:	83 c4 0c             	add    esp,0xc
c002544f:	c3                   	ret    

c0025450 <APIC::disable()>:
c0025450:	90                   	nop
c0025451:	c3                   	ret    

c0025452 <APIC::close(int, int, void*)>:
c0025452:	55                   	push   ebp
c0025453:	89 e5                	mov    ebp,esp
c0025455:	83 ec 08             	sub    esp,0x8
c0025458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002545b:	8b 00                	mov    eax,DWORD PTR [eax]
c002545d:	83 c0 3c             	add    eax,0x3c
c0025460:	8b 00                	mov    eax,DWORD PTR [eax]
c0025462:	83 ec 0c             	sub    esp,0xc
c0025465:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025468:	ff d0                	call   eax
c002546a:	83 c4 10             	add    esp,0x10
c002546d:	b8 00 00 00 00       	mov    eax,0x0
c0025472:	c9                   	leave  
c0025473:	c3                   	ret    

c0025474 <IOAPIC::close(int, int, void*)>:
c0025474:	b8 00 00 00 00       	mov    eax,0x0
c0025479:	c3                   	ret    

c002547a <APIC::io_wait()>:
c002547a:	eb 00                	jmp    c002547c <APIC::io_wait()+0x2>
c002547c:	eb 00                	jmp    c002547e <APIC::io_wait()+0x4>
c002547e:	90                   	nop
c002547f:	c3                   	ret    

c0025480 <APIC::getBase()>:
c0025480:	55                   	push   ebp
c0025481:	89 e5                	mov    ebp,esp
c0025483:	83 ec 18             	sub    esp,0x18
c0025486:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c002548b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025491:	83 e0 08             	and    eax,0x8
c0025494:	84 c0                	test   al,al
c0025496:	75 07                	jne    c002549f <APIC::getBase()+0x1f>
c0025498:	b8 00 00 00 00       	mov    eax,0x0
c002549d:	eb 21                	jmp    c00254c0 <APIC::getBase()+0x40>
c002549f:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00254a4:	83 ec 08             	sub    esp,0x8
c00254a7:	6a 1b                	push   0x1b
c00254a9:	50                   	push   eax
c00254aa:	e8 91 96 fe ff       	call   c000eb40 <Computer::rdmsr(unsigned int)>
c00254af:	83 c4 10             	add    esp,0x10
c00254b2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00254b5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00254b8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00254bb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00254c0:	c9                   	leave  
c00254c1:	c3                   	ret    

c00254c2 <APIC::eoi(unsigned char)>:
c00254c2:	55                   	push   ebp
c00254c3:	89 e5                	mov    ebp,esp
c00254c5:	83 ec 28             	sub    esp,0x28
c00254c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00254cb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00254ce:	83 ec 0c             	sub    esp,0xc
c00254d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254d4:	e8 a7 ff ff ff       	call   c0025480 <APIC::getBase()>
c00254d9:	83 c4 10             	add    esp,0x10
c00254dc:	05 b0 00 00 00       	add    eax,0xb0
c00254e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00254e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00254e7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00254ed:	90                   	nop
c00254ee:	c9                   	leave  
c00254ef:	c3                   	ret    

c00254f0 <APIC::open(int, int, void*)>:
c00254f0:	55                   	push   ebp
c00254f1:	89 e5                	mov    ebp,esp
c00254f3:	57                   	push   edi
c00254f4:	56                   	push   esi
c00254f5:	53                   	push   ebx
c00254f6:	83 ec 2c             	sub    esp,0x2c
c00254f9:	83 ec 0c             	sub    esp,0xc
c00254fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254ff:	e8 7c ff ff ff       	call   c0025480 <APIC::getBase()>
c0025504:	83 c4 10             	add    esp,0x10
c0025507:	89 c2                	mov    edx,eax
c0025509:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002550c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025512:	0f b6 f8             	movzx  edi,al
c0025515:	89 d0                	mov    eax,edx
c0025517:	ba 00 00 00 00       	mov    edx,0x0
c002551c:	89 c1                	mov    ecx,eax
c002551e:	80 e5 ff             	and    ch,0xff
c0025521:	89 cb                	mov    ebx,ecx
c0025523:	0f b6 f2             	movzx  esi,dl
c0025526:	89 d8                	mov    eax,ebx
c0025528:	89 f2                	mov    edx,esi
c002552a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002552d:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025530:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025534:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025538:	83 e0 00             	and    eax,0x0
c002553b:	09 d0                	or     eax,edx
c002553d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025544:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002554a:	8d 50 01             	lea    edx,[eax+0x1]
c002554d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025550:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025556:	0f b6 d0             	movzx  edx,al
c0025559:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002555c:	83 c2 08             	add    edx,0x8
c002555f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025563:	0f b6 c9             	movzx  ecx,cl
c0025566:	81 c9 00 00 01 00    	or     ecx,0x10000
c002556c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025570:	83 ec 0c             	sub    esp,0xc
c0025573:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025576:	e8 05 ff ff ff       	call   c0025480 <APIC::getBase()>
c002557b:	83 c4 10             	add    esp,0x10
c002557e:	05 f0 00 00 00       	add    eax,0xf0
c0025583:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025586:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025589:	8b 00                	mov    eax,DWORD PTR [eax]
c002558b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002558e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025595:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002559c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002559f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00255a2:	89 10                	mov    DWORD PTR [eax],edx
c00255a4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00255ab:	a1 30 02 03 c0       	mov    eax,ds:0xc0030230
c00255b0:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00255b3:	7d 7c                	jge    c0025631 <APIC::open(int, int, void*)+0x141>
c00255b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255b8:	8b 04 85 40 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfdc0]
c00255bf:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00255c2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255c5:	8b 04 85 40 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfdc0]
c00255cc:	c1 e8 08             	shr    eax,0x8
c00255cf:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00255d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00255d6:	8b 04 85 40 02 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcfdc0]
c00255dd:	c1 e8 18             	shr    eax,0x18
c00255e0:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00255e3:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00255e7:	75 40                	jne    c0025629 <APIC::open(int, int, void*)+0x139>
c00255e9:	83 ec 0c             	sub    esp,0xc
c00255ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00255ef:	e8 8c fe ff ff       	call   c0025480 <APIC::getBase()>
c00255f4:	83 c4 10             	add    esp,0x10
c00255f7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00255fb:	75 07                	jne    c0025604 <APIC::open(int, int, void*)+0x114>
c00255fd:	ba 60 03 00 00       	mov    edx,0x360
c0025602:	eb 05                	jmp    c0025609 <APIC::open(int, int, void*)+0x119>
c0025604:	ba 50 03 00 00       	mov    edx,0x350
c0025609:	01 d0                	add    eax,edx
c002560b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002560e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025611:	8b 00                	mov    eax,DWORD PTR [eax]
c0025613:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0025616:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c002561d:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025621:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025624:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025627:	89 10                	mov    DWORD PTR [eax],edx
c0025629:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c002562c:	e9 7a ff ff ff       	jmp    c00255ab <APIC::open(int, int, void*)+0xbb>
c0025631:	b8 00 00 00 00       	mov    eax,0x0
c0025636:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025639:	5b                   	pop    ebx
c002563a:	5e                   	pop    esi
c002563b:	5f                   	pop    edi
c002563c:	5d                   	pop    ebp
c002563d:	c3                   	ret    

c002563e <IOAPIC::IOAPIC()>:
c002563e:	83 ec 0c             	sub    esp,0xc
c0025641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025645:	83 ec 08             	sub    esp,0x8
c0025648:	68 f4 c4 02 c0       	push   0xc002c4f4
c002564d:	50                   	push   eax
c002564e:	e8 9d e6 fe ff       	call   c0013cf0 <Device::Device(char const*)>
c0025653:	83 c4 10             	add    esp,0x10
c0025656:	ba 1c c6 02 c0       	mov    edx,0xc002c61c
c002565b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002565f:	89 10                	mov    DWORD PTR [eax],edx
c0025661:	90                   	nop
c0025662:	83 c4 0c             	add    esp,0xc
c0025665:	c3                   	ret    

c0025666 <APIC::APIC()>:
c0025666:	53                   	push   ebx
c0025667:	83 ec 18             	sub    esp,0x18
c002566a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002566e:	83 ec 08             	sub    esp,0x8
c0025671:	68 fc c4 02 c0       	push   0xc002c4fc
c0025676:	50                   	push   eax
c0025677:	e8 de ed fe ff       	call   c001445a <InterruptController::InterruptController(char const*)>
c002567c:	83 c4 10             	add    esp,0x10
c002567f:	ba d4 c5 02 c0       	mov    edx,0xc002c5d4
c0025684:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025688:	89 10                	mov    DWORD PTR [eax],edx
c002568a:	a0 00 1d 03 c0       	mov    al,ds:0xc0031d00
c002568f:	83 f0 01             	xor    eax,0x1
c0025692:	84 c0                	test   al,al
c0025694:	0f 84 a1 00 00 00    	je     c002573b <APIC::APIC()+0xd5>
c002569a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002569f:	a0 e0 02 03 c0       	mov    al,ds:0xc00302e0
c00256a4:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00256a8:	0f 83 86 00 00 00    	jae    c0025734 <APIC::APIC()+0xce>
c00256ae:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00256b6:	83 ec 0c             	sub    esp,0xc
c00256b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00256bd:	e8 d7 9e fe ff       	call   c000f599 <malloc>
c00256c2:	83 c4 10             	add    esp,0x10
c00256c5:	89 c3                	mov    ebx,eax
c00256c7:	83 ec 0c             	sub    esp,0xc
c00256ca:	53                   	push   ebx
c00256cb:	e8 6e ff ff ff       	call   c002563e <IOAPIC::IOAPIC()>
c00256d0:	83 c4 10             	add    esp,0x10
c00256d3:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00256d7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00256dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00256e0:	89 14 85 e0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce320],edx
c00256e7:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c00256ec:	40                   	inc    eax
c00256ed:	a3 c0 1c 03 c0       	mov    ds:0xc0031cc0,eax
c00256f2:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c00256f7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00256fd:	83 ec 08             	sub    esp,0x8
c0025700:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025704:	50                   	push   eax
c0025705:	e8 e2 e3 fe ff       	call   c0013aec <Device::addChild(Device*)>
c002570a:	83 c4 10             	add    esp,0x10
c002570d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025711:	8b 00                	mov    eax,DWORD PTR [eax]
c0025713:	83 c0 08             	add    eax,0x8
c0025716:	8b 00                	mov    eax,DWORD PTR [eax]
c0025718:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c002571d:	6a 00                	push   0x0
c002571f:	6a 00                	push   0x0
c0025721:	52                   	push   edx
c0025722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025726:	ff d0                	call   eax
c0025728:	83 c4 10             	add    esp,0x10
c002572b:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c002572f:	e9 6b ff ff ff       	jmp    c002569f <APIC::APIC()+0x39>
c0025734:	c6 05 00 1d 03 c0 01 	mov    BYTE PTR ds:0xc0031d00,0x1
c002573b:	90                   	nop
c002573c:	83 c4 18             	add    esp,0x18
c002573f:	5b                   	pop    ebx
c0025740:	c3                   	ret    
c0025741:	90                   	nop

c0025742 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025742:	55                   	push   ebp
c0025743:	89 e5                	mov    ebp,esp
c0025745:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025748:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002574e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025751:	72 1d                	jb     c0025770 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025756:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002575c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002575f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025765:	01 d0                	add    eax,edx
c0025767:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002576a:	73 04                	jae    c0025770 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002576c:	b0 01                	mov    al,0x1
c002576e:	eb 02                	jmp    c0025772 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025770:	b0 00                	mov    al,0x0
c0025772:	5d                   	pop    ebp
c0025773:	c3                   	ret    

c0025774 <IOAPIC::read(int)>:
c0025774:	55                   	push   ebp
c0025775:	89 e5                	mov    ebp,esp
c0025777:	83 ec 10             	sub    esp,0x10
c002577a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002577d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025783:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025786:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025789:	0f b6 d0             	movzx  edx,al
c002578c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002578f:	89 10                	mov    DWORD PTR [eax],edx
c0025791:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025794:	83 c0 10             	add    eax,0x10
c0025797:	8b 00                	mov    eax,DWORD PTR [eax]
c0025799:	c9                   	leave  
c002579a:	c3                   	ret    
c002579b:	90                   	nop

c002579c <IOAPIC::open(int, int, void*)>:
c002579c:	55                   	push   ebp
c002579d:	89 e5                	mov    ebp,esp
c002579f:	57                   	push   edi
c00257a0:	56                   	push   esi
c00257a1:	53                   	push   ebx
c00257a2:	83 ec 0c             	sub    esp,0xc
c00257a5:	83 ec 0c             	sub    esp,0xc
c00257a8:	68 27 c5 02 c0       	push   0xc002c527
c00257ad:	e8 01 cf fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c00257b2:	83 c4 10             	add    esp,0x10
c00257b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00257bb:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00257c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257c4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257ca:	8b 14 85 20 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfce0]
c00257d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257d4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00257da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257dd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257e3:	8b 14 85 a0 03 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcfc60]
c00257ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ed:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00257f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257f6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00257fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257ff:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025805:	0f b6 f8             	movzx  edi,al
c0025808:	89 d0                	mov    eax,edx
c002580a:	ba 00 00 00 00       	mov    edx,0x0
c002580f:	89 c1                	mov    ecx,eax
c0025811:	80 e5 ff             	and    ch,0xff
c0025814:	89 cb                	mov    ebx,ecx
c0025816:	0f b6 f2             	movzx  esi,dl
c0025819:	89 d8                	mov    eax,ebx
c002581b:	89 f2                	mov    edx,esi
c002581d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025820:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025823:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025827:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002582b:	83 e0 00             	and    eax,0x0
c002582e:	09 d0                	or     eax,edx
c0025830:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025834:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025837:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002583d:	8d 50 01             	lea    edx,[eax+0x1]
c0025840:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025843:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025849:	0f b6 d0             	movzx  edx,al
c002584c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002584f:	83 c2 08             	add    edx,0x8
c0025852:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025856:	0f b6 c9             	movzx  ecx,cl
c0025859:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002585f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025863:	83 ec 08             	sub    esp,0x8
c0025866:	6a 01                	push   0x1
c0025868:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002586b:	e8 04 ff ff ff       	call   c0025774 <IOAPIC::read(int)>
c0025870:	83 c4 10             	add    esp,0x10
c0025873:	c1 f8 10             	sar    eax,0x10
c0025876:	0f b6 c0             	movzx  eax,al
c0025879:	8d 50 01             	lea    edx,[eax+0x1]
c002587c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002587f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025885:	b8 00 00 00 00       	mov    eax,0x0
c002588a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002588d:	5b                   	pop    ebx
c002588e:	5e                   	pop    esi
c002588f:	5f                   	pop    edi
c0025890:	5d                   	pop    ebp
c0025891:	c3                   	ret    

c0025892 <IOAPIC::write(int, int)>:
c0025892:	55                   	push   ebp
c0025893:	89 e5                	mov    ebp,esp
c0025895:	83 ec 10             	sub    esp,0x10
c0025898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002589b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00258a1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00258a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258a7:	0f b6 d0             	movzx  edx,al
c00258aa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258ad:	89 10                	mov    DWORD PTR [eax],edx
c00258af:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00258b2:	8d 50 10             	lea    edx,[eax+0x10]
c00258b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258b8:	89 02                	mov    DWORD PTR [edx],eax
c00258ba:	90                   	nop
c00258bb:	c9                   	leave  
c00258bc:	c3                   	ret    
c00258bd:	90                   	nop

c00258be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00258be:	55                   	push   ebp
c00258bf:	89 e5                	mov    ebp,esp
c00258c1:	53                   	push   ebx
c00258c2:	83 ec 2c             	sub    esp,0x2c
c00258c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258c8:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00258cb:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00258ce:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00258d1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00258d4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00258d7:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00258da:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258dd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00258e0:	88 d8                	mov    al,bl
c00258e2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00258e5:	88 c8                	mov    al,cl
c00258e7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00258ea:	88 d0                	mov    al,dl
c00258ec:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00258ef:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00258f3:	83 c0 08             	add    eax,0x8
c00258f6:	01 c0                	add    eax,eax
c00258f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00258fb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00258ff:	83 c0 08             	add    eax,0x8
c0025902:	01 c0                	add    eax,eax
c0025904:	40                   	inc    eax
c0025905:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025908:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002590b:	50                   	push   eax
c002590c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002590f:	e8 60 fe ff ff       	call   c0025774 <IOAPIC::read(int)>
c0025914:	83 c4 08             	add    esp,0x8
c0025917:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002591a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025921:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025924:	c1 e0 18             	shl    eax,0x18
c0025927:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002592a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002592d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025930:	52                   	push   edx
c0025931:	50                   	push   eax
c0025932:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025935:	e8 58 ff ff ff       	call   c0025892 <IOAPIC::write(int, int)>
c002593a:	83 c4 0c             	add    esp,0xc
c002593d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025940:	50                   	push   eax
c0025941:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025944:	e8 2b fe ff ff       	call   c0025774 <IOAPIC::read(int)>
c0025949:	83 c4 08             	add    esp,0x8
c002594c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002594f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025956:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002595d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025964:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025968:	74 09                	je     c0025973 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002596a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025971:	eb 07                	jmp    c002597a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025973:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002597a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002597e:	74 09                	je     c0025989 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025980:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025987:	eb 07                	jmp    c0025990 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025989:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025990:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025997:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002599b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002599e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00259a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00259a4:	52                   	push   edx
c00259a5:	50                   	push   eax
c00259a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00259a9:	e8 e4 fe ff ff       	call   c0025892 <IOAPIC::write(int, int)>
c00259ae:	83 c4 0c             	add    esp,0xc
c00259b1:	90                   	nop
c00259b2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00259b5:	c9                   	leave  
c00259b6:	c3                   	ret    
c00259b7:	90                   	nop

c00259b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00259b8:	55                   	push   ebp
c00259b9:	89 e5                	mov    ebp,esp
c00259bb:	57                   	push   edi
c00259bc:	56                   	push   esi
c00259bd:	53                   	push   ebx
c00259be:	83 ec 2c             	sub    esp,0x2c
c00259c1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00259c4:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00259c7:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00259cb:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00259cf:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00259d3:	74 5a                	je     c0025a2f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00259d5:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00259d9:	7f 44                	jg     c0025a1f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00259db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259de:	05 c0 cb 02 c0       	add    eax,0xc002cbc0
c00259e3:	8a 00                	mov    al,BYTE PTR [eax]
c00259e5:	0f b6 c0             	movzx  eax,al
c00259e8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00259eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00259ee:	66 8b 84 00 c0 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd40]
c00259f6:	0f b7 c0             	movzx  eax,ax
c00259f9:	83 e0 02             	and    eax,0x2
c00259fc:	85 c0                	test   eax,eax
c00259fe:	74 04                	je     c0025a04 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025a00:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025a04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a07:	66 8b 84 00 c0 02 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcfd40]
c0025a0f:	0f b7 c0             	movzx  eax,ax
c0025a12:	83 e0 08             	and    eax,0x8
c0025a15:	85 c0                	test   eax,eax
c0025a17:	74 16                	je     c0025a2f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a19:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025a1d:	eb 10                	jmp    c0025a2f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025a1f:	83 ec 0c             	sub    esp,0xc
c0025a22:	68 38 c5 02 c0       	push   0xc002c538
c0025a27:	e8 f3 43 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0025a2c:	83 c4 10             	add    esp,0x10
c0025a2f:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025a33:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c0025a38:	83 ec 08             	sub    esp,0x8
c0025a3b:	50                   	push   eax
c0025a3c:	68 70 c5 02 c0       	push   0xc002c570
c0025a41:	e8 6d cc fe ff       	call   c00126b3 <Dbg::kprintf(char const*, ...)>
c0025a46:	83 c4 10             	add    esp,0x10
c0025a49:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025a50:	a1 c0 1c 03 c0       	mov    eax,ds:0xc0031cc0
c0025a55:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025a58:	7d 67                	jge    c0025ac1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025a5a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a5d:	8b 04 85 e0 1c 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce320]
c0025a64:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a67:	83 ec 08             	sub    esp,0x8
c0025a6a:	52                   	push   edx
c0025a6b:	50                   	push   eax
c0025a6c:	e8 d1 fc ff ff       	call   c0025742 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025a71:	83 c4 10             	add    esp,0x10
c0025a74:	84 c0                	test   al,al
c0025a76:	74 44                	je     c0025abc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025a78:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025a7b:	8b 1c 85 e0 1c 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffce320]
c0025a82:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025a86:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025a89:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025a8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a90:	83 c0 20             	add    eax,0x20
c0025a93:	0f b6 f0             	movzx  esi,al
c0025a96:	b8 00 00 00 00       	mov    eax,0x0
c0025a9b:	99                   	cdq    
c0025a9c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025a9f:	0f b6 c9             	movzx  ecx,cl
c0025aa2:	83 ec 04             	sub    esp,0x4
c0025aa5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025aa8:	57                   	push   edi
c0025aa9:	56                   	push   esi
c0025aaa:	52                   	push   edx
c0025aab:	50                   	push   eax
c0025aac:	51                   	push   ecx
c0025aad:	53                   	push   ebx
c0025aae:	e8 0b fe ff ff       	call   c00258be <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025ab3:	83 c4 20             	add    esp,0x20
c0025ab6:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025aba:	eb 05                	jmp    c0025ac1 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025abc:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025abf:	eb 8f                	jmp    c0025a50 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025ac1:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025ac4:	83 f0 01             	xor    eax,0x1
c0025ac7:	84 c0                	test   al,al
c0025ac9:	74 10                	je     c0025adb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025acb:	83 ec 0c             	sub    esp,0xc
c0025ace:	68 87 c5 02 c0       	push   0xc002c587
c0025ad3:	e8 47 43 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0025ad8:	83 c4 10             	add    esp,0x10
c0025adb:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025adf:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025ae6:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025aea:	7f 65                	jg     c0025b51 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025aec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025af2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025af9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025afc:	01 ca                	add    edx,ecx
c0025afe:	83 c2 54             	add    edx,0x54
c0025b01:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025b05:	85 c0                	test   eax,eax
c0025b07:	75 43                	jne    c0025b4c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025b09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b0c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b0f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b16:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b19:	01 ca                	add    edx,ecx
c0025b1b:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025b1e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025b21:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b28:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b2b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025b32:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025b35:	01 ca                	add    edx,ecx
c0025b37:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025b3d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025b40:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025b44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b47:	83 e8 20             	sub    eax,0x20
c0025b4a:	eb 1a                	jmp    c0025b66 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025b4c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025b4f:	eb 95                	jmp    c0025ae6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025b51:	83 ec 0c             	sub    esp,0xc
c0025b54:	68 94 c5 02 c0       	push   0xc002c594
c0025b59:	e8 c1 42 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0025b5e:	83 c4 10             	add    esp,0x10
c0025b61:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025b66:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025b69:	5b                   	pop    ebx
c0025b6a:	5e                   	pop    esi
c0025b6b:	5f                   	pop    edi
c0025b6c:	5d                   	pop    ebp
c0025b6d:	c3                   	ret    

c0025b6e <PIC::disable()>:
c0025b6e:	55                   	push   ebp
c0025b6f:	89 e5                	mov    ebp,esp
c0025b71:	83 ec 10             	sub    esp,0x10
c0025b74:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025b7a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025b7e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025b81:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025b85:	ee                   	out    dx,al
c0025b86:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025b8c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025b90:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025b93:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025b97:	ee                   	out    dx,al
c0025b98:	90                   	nop
c0025b99:	c9                   	leave  
c0025b9a:	c3                   	ret    
c0025b9b:	90                   	nop

c0025b9c <PIC::close(int, int, void*)>:
c0025b9c:	55                   	push   ebp
c0025b9d:	89 e5                	mov    ebp,esp
c0025b9f:	83 ec 08             	sub    esp,0x8
c0025ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ba5:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ba7:	83 c0 3c             	add    eax,0x3c
c0025baa:	8b 00                	mov    eax,DWORD PTR [eax]
c0025bac:	83 ec 0c             	sub    esp,0xc
c0025baf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bb2:	ff d0                	call   eax
c0025bb4:	83 c4 10             	add    esp,0x10
c0025bb7:	b8 00 00 00 00       	mov    eax,0x0
c0025bbc:	c9                   	leave  
c0025bbd:	c3                   	ret    

c0025bbe <PIC::PIC()>:
c0025bbe:	83 ec 0c             	sub    esp,0xc
c0025bc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bc5:	83 ec 08             	sub    esp,0x8
c0025bc8:	68 40 c6 02 c0       	push   0xc002c640
c0025bcd:	50                   	push   eax
c0025bce:	e8 87 e8 fe ff       	call   c001445a <InterruptController::InterruptController(char const*)>
c0025bd3:	83 c4 10             	add    esp,0x10
c0025bd6:	ba 6c c6 02 c0       	mov    edx,0xc002c66c
c0025bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bdf:	89 10                	mov    DWORD PTR [eax],edx
c0025be1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025be5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025beb:	0f b6 d0             	movzx  edx,al
c0025bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bf2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025bfd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c03:	0f b6 d0             	movzx  edx,al
c0025c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c0a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c13:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c19:	8d 50 01             	lea    edx,[eax+0x1]
c0025c1c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c20:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c26:	0f b6 d0             	movzx  edx,al
c0025c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c2d:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c31:	83 e1 3f             	and    ecx,0x3f
c0025c34:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c42:	0f b6 d0             	movzx  edx,al
c0025c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c49:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c5a:	0f b6 d0             	movzx  edx,al
c0025c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025c66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025c70:	8d 50 01             	lea    edx,[eax+0x1]
c0025c73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025c77:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025c7d:	0f b6 d0             	movzx  edx,al
c0025c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c84:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025c88:	83 e1 3f             	and    ecx,0x3f
c0025c8b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025c8f:	90                   	nop
c0025c90:	83 c4 0c             	add    esp,0xc
c0025c93:	c3                   	ret    

c0025c94 <PIC::ioWait()>:
c0025c94:	eb 00                	jmp    c0025c96 <PIC::ioWait()+0x2>
c0025c96:	eb 00                	jmp    c0025c98 <PIC::ioWait()+0x4>
c0025c98:	90                   	nop
c0025c99:	c3                   	ret    

c0025c9a <PIC::getIRQReg(int)>:
c0025c9a:	55                   	push   ebp
c0025c9b:	89 e5                	mov    ebp,esp
c0025c9d:	83 ec 10             	sub    esp,0x10
c0025ca0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ca3:	0f b6 c0             	movzx  eax,al
c0025ca6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025cac:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025caf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025cb2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025cb6:	ee                   	out    dx,al
c0025cb7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025cba:	0f b6 c0             	movzx  eax,al
c0025cbd:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025cc3:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025cc6:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025cc9:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025ccd:	ee                   	out    dx,al
c0025cce:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025cd4:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025cd8:	89 c2                	mov    edx,eax
c0025cda:	ec                   	in     al,dx
c0025cdb:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025cde:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025ce1:	0f b6 c0             	movzx  eax,al
c0025ce4:	c1 e0 08             	shl    eax,0x8
c0025ce7:	89 c1                	mov    ecx,eax
c0025ce9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025cef:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025cf3:	89 c2                	mov    edx,eax
c0025cf5:	ec                   	in     al,dx
c0025cf6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025cf9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025cfc:	0f b6 c0             	movzx  eax,al
c0025cff:	09 c8                	or     eax,ecx
c0025d01:	c9                   	leave  
c0025d02:	c3                   	ret    
c0025d03:	90                   	nop

c0025d04 <PIC::eoi(unsigned char)>:
c0025d04:	55                   	push   ebp
c0025d05:	89 e5                	mov    ebp,esp
c0025d07:	83 ec 14             	sub    esp,0x14
c0025d0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d0d:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025d10:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d14:	75 1e                	jne    c0025d34 <PIC::eoi(unsigned char)+0x30>
c0025d16:	6a 0b                	push   0xb
c0025d18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d1b:	e8 7a ff ff ff       	call   c0025c9a <PIC::getIRQReg(int)>
c0025d20:	83 c4 08             	add    esp,0x8
c0025d23:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025d27:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025d2b:	25 80 00 00 00       	and    eax,0x80
c0025d30:	85 c0                	test   eax,eax
c0025d32:	74 5f                	je     c0025d93 <PIC::eoi(unsigned char)+0x8f>
c0025d34:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025d38:	75 2d                	jne    c0025d67 <PIC::eoi(unsigned char)+0x63>
c0025d3a:	6a 0b                	push   0xb
c0025d3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d3f:	e8 56 ff ff ff       	call   c0025c9a <PIC::getIRQReg(int)>
c0025d44:	83 c4 08             	add    esp,0x8
c0025d47:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025d4b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025d4e:	66 85 c0             	test   ax,ax
c0025d51:	78 14                	js     c0025d67 <PIC::eoi(unsigned char)+0x63>
c0025d53:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025d59:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025d5d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025d60:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025d64:	ee                   	out    dx,al
c0025d65:	eb 2d                	jmp    c0025d94 <PIC::eoi(unsigned char)+0x90>
c0025d67:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025d6b:	76 12                	jbe    c0025d7f <PIC::eoi(unsigned char)+0x7b>
c0025d6d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025d73:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025d77:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025d7a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025d7e:	ee                   	out    dx,al
c0025d7f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025d85:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025d89:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025d8c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025d90:	ee                   	out    dx,al
c0025d91:	eb 01                	jmp    c0025d94 <PIC::eoi(unsigned char)+0x90>
c0025d93:	90                   	nop
c0025d94:	c9                   	leave  
c0025d95:	c3                   	ret    

c0025d96 <PIC::remap()>:
c0025d96:	55                   	push   ebp
c0025d97:	89 e5                	mov    ebp,esp
c0025d99:	83 ec 48             	sub    esp,0x48
c0025d9c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025da3:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025daa:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025db0:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025db3:	89 c2                	mov    edx,eax
c0025db5:	ec                   	in     al,dx
c0025db6:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025db9:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025dbc:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025dbf:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025dc5:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025dc8:	89 c2                	mov    edx,eax
c0025dca:	ec                   	in     al,dx
c0025dcb:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025dce:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025dd1:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025dd4:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025dda:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025dde:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025de1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025de4:	ee                   	out    dx,al
c0025de5:	83 ec 0c             	sub    esp,0xc
c0025de8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025deb:	e8 a4 fe ff ff       	call   c0025c94 <PIC::ioWait()>
c0025df0:	83 c4 10             	add    esp,0x10
c0025df3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025df9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025dfd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025e00:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025e03:	ee                   	out    dx,al
c0025e04:	83 ec 0c             	sub    esp,0xc
c0025e07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e0a:	e8 85 fe ff ff       	call   c0025c94 <PIC::ioWait()>
c0025e0f:	83 c4 10             	add    esp,0x10
c0025e12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025e15:	0f b6 c0             	movzx  eax,al
c0025e18:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025e1e:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025e21:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025e24:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025e27:	ee                   	out    dx,al
c0025e28:	83 ec 0c             	sub    esp,0xc
c0025e2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e2e:	e8 61 fe ff ff       	call   c0025c94 <PIC::ioWait()>
c0025e33:	83 c4 10             	add    esp,0x10
c0025e36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025e39:	0f b6 c0             	movzx  eax,al
c0025e3c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025e42:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025e45:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025e48:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025e4b:	ee                   	out    dx,al
c0025e4c:	83 ec 0c             	sub    esp,0xc
c0025e4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e52:	e8 3d fe ff ff       	call   c0025c94 <PIC::ioWait()>
c0025e57:	83 c4 10             	add    esp,0x10
c0025e5a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025e60:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025e64:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025e67:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025e6a:	ee                   	out    dx,al
c0025e6b:	83 ec 0c             	sub    esp,0xc
c0025e6e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e71:	e8 1e fe ff ff       	call   c0025c94 <PIC::ioWait()>
c0025e76:	83 c4 10             	add    esp,0x10
c0025e79:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025e7f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025e83:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025e86:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e89:	ee                   	out    dx,al
c0025e8a:	83 ec 0c             	sub    esp,0xc
c0025e8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e90:	e8 ff fd ff ff       	call   c0025c94 <PIC::ioWait()>
c0025e95:	83 c4 10             	add    esp,0x10
c0025e98:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025e9e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025ea2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025ea5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025ea8:	ee                   	out    dx,al
c0025ea9:	83 ec 0c             	sub    esp,0xc
c0025eac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025eaf:	e8 e0 fd ff ff       	call   c0025c94 <PIC::ioWait()>
c0025eb4:	83 c4 10             	add    esp,0x10
c0025eb7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025ebd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025ec1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025ec4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025ec7:	ee                   	out    dx,al
c0025ec8:	83 ec 0c             	sub    esp,0xc
c0025ecb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ece:	e8 c1 fd ff ff       	call   c0025c94 <PIC::ioWait()>
c0025ed3:	83 c4 10             	add    esp,0x10
c0025ed6:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025eda:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025ee0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025ee3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025ee6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ee9:	ee                   	out    dx,al
c0025eea:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025eee:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025ef4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025ef7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025efa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025efd:	ee                   	out    dx,al
c0025efe:	90                   	nop
c0025eff:	c9                   	leave  
c0025f00:	c3                   	ret    
c0025f01:	90                   	nop

c0025f02 <PIC::open(int, int, void*)>:
c0025f02:	55                   	push   ebp
c0025f03:	89 e5                	mov    ebp,esp
c0025f05:	83 ec 18             	sub    esp,0x18
c0025f08:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025f0e:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025f12:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025f15:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025f19:	ee                   	out    dx,al
c0025f1a:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025f20:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025f24:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025f27:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025f2b:	ee                   	out    dx,al
c0025f2c:	83 ec 0c             	sub    esp,0xc
c0025f2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f32:	e8 5f fe ff ff       	call   c0025d96 <PIC::remap()>
c0025f37:	83 c4 10             	add    esp,0x10
c0025f3a:	b8 00 00 00 00       	mov    eax,0x0
c0025f3f:	c9                   	leave  
c0025f40:	c3                   	ret    
c0025f41:	90                   	nop

c0025f42 <APICTimer::close(int, int, void*)>:
c0025f42:	b8 00 00 00 00       	mov    eax,0x0
c0025f47:	c3                   	ret    

c0025f48 <apicTimerHandler(regs*, void*)>:
c0025f48:	83 ec 0c             	sub    esp,0xc
c0025f4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025f4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f51:	99                   	cdq    
c0025f52:	52                   	push   edx
c0025f53:	50                   	push   eax
c0025f54:	6a 00                	push   0x0
c0025f56:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025f5b:	e8 94 07 00 00       	call   c00266f4 <__udivdi3>
c0025f60:	83 c4 10             	add    esp,0x10
c0025f63:	83 ec 08             	sub    esp,0x8
c0025f66:	52                   	push   edx
c0025f67:	50                   	push   eax
c0025f68:	e8 44 06 ff ff       	call   c00165b1 <timerHandler(unsigned long long)>
c0025f6d:	83 c4 10             	add    esp,0x10
c0025f70:	90                   	nop
c0025f71:	83 c4 0c             	add    esp,0xc
c0025f74:	c3                   	ret    
c0025f75:	90                   	nop

c0025f76 <APICTimer::write(int)>:
c0025f76:	53                   	push   ebx
c0025f77:	83 ec 28             	sub    esp,0x28
c0025f7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f7e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025f82:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025f88:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c0025f8d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025f93:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025f99:	83 ec 0c             	sub    esp,0xc
c0025f9c:	50                   	push   eax
c0025f9d:	e8 de f4 ff ff       	call   c0025480 <APIC::getBase()>
c0025fa2:	83 c4 10             	add    esp,0x10
c0025fa5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025fa9:	a1 d0 df 02 c0       	mov    eax,ds:0xc002dfd0
c0025fae:	8b 15 d4 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfd4
c0025fb4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025fb8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fc0:	05 e0 03 00 00       	add    eax,0x3e0
c0025fc5:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025fcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025fcf:	05 80 03 00 00       	add    eax,0x380
c0025fd4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025fda:	fb                   	sti    
c0025fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fdf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025fe3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025fe8:	83 d2 00             	adc    edx,0x0
c0025feb:	89 c1                	mov    ecx,eax
c0025fed:	89 d3                	mov    ebx,edx
c0025fef:	a1 d0 df 02 c0       	mov    eax,ds:0xc002dfd0
c0025ff4:	8b 15 d4 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfd4
c0025ffa:	39 c8                	cmp    eax,ecx
c0025ffc:	89 d0                	mov    eax,edx
c0025ffe:	19 d8                	sbb    eax,ebx
c0026000:	73 02                	jae    c0026004 <APICTimer::write(int)+0x8e>
c0026002:	eb d7                	jmp    c0025fdb <APICTimer::write(int)+0x65>
c0026004:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026008:	05 20 03 00 00       	add    eax,0x320
c002600d:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026013:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026017:	05 90 03 00 00       	add    eax,0x390
c002601c:	8b 00                	mov    eax,DWORD PTR [eax]
c002601e:	f7 d0                	not    eax
c0026020:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026024:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026028:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002602c:	ba 00 00 00 00       	mov    edx,0x0
c0026031:	f7 f3                	div    ebx
c0026033:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026037:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002603b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026041:	0d 00 00 02 00       	or     eax,0x20000
c0026046:	89 c2                	mov    edx,eax
c0026048:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002604c:	05 20 03 00 00       	add    eax,0x320
c0026051:	89 10                	mov    DWORD PTR [eax],edx
c0026053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026057:	05 e0 03 00 00       	add    eax,0x3e0
c002605c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026062:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026066:	05 80 03 00 00       	add    eax,0x380
c002606b:	89 c2                	mov    edx,eax
c002606d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026071:	89 02                	mov    DWORD PTR [edx],eax
c0026073:	90                   	nop
c0026074:	83 c4 28             	add    esp,0x28
c0026077:	5b                   	pop    ebx
c0026078:	c3                   	ret    
c0026079:	90                   	nop

c002607a <APICTimer::open(int, int, void*)>:
c002607a:	57                   	push   edi
c002607b:	56                   	push   esi
c002607c:	53                   	push   ebx
c002607d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026081:	8b 00                	mov    eax,DWORD PTR [eax]
c0026083:	83 c0 24             	add    eax,0x24
c0026086:	8b 00                	mov    eax,DWORD PTR [eax]
c0026088:	83 ec 08             	sub    esp,0x8
c002608b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002608f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026093:	ff d0                	call   eax
c0026095:	83 c4 10             	add    esp,0x10
c0026098:	a1 68 d9 02 c0       	mov    eax,ds:0xc002d968
c002609d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00260a3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00260a9:	83 ec 0c             	sub    esp,0xc
c00260ac:	50                   	push   eax
c00260ad:	e8 ce f3 ff ff       	call   c0025480 <APIC::getBase()>
c00260b2:	83 c4 10             	add    esp,0x10
c00260b5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c00260bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260bf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260c5:	0f b6 f8             	movzx  edi,al
c00260c8:	89 d0                	mov    eax,edx
c00260ca:	ba 00 00 00 00       	mov    edx,0x0
c00260cf:	89 c1                	mov    ecx,eax
c00260d1:	80 e5 ff             	and    ch,0xff
c00260d4:	89 cb                	mov    ebx,ecx
c00260d6:	0f b6 f2             	movzx  esi,dl
c00260d9:	89 d8                	mov    eax,ebx
c00260db:	89 f2                	mov    edx,esi
c00260dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00260e1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00260e4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00260e8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00260ec:	83 e0 00             	and    eax,0x0
c00260ef:	09 d0                	or     eax,edx
c00260f1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00260f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260f9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00260ff:	8d 50 01             	lea    edx,[eax+0x1]
c0026102:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026106:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002610c:	0f b6 d0             	movzx  edx,al
c002610f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026113:	83 c2 08             	add    edx,0x8
c0026116:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002611a:	0f b6 c9             	movzx  ecx,cl
c002611d:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026123:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002612b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002612f:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026139:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002613d:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026143:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026147:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002614d:	83 ec 0c             	sub    esp,0xc
c0026150:	51                   	push   ecx
c0026151:	6a 01                	push   0x1
c0026153:	68 48 5f 02 c0       	push   0xc0025f48
c0026158:	52                   	push   edx
c0026159:	50                   	push   eax
c002615a:	e8 05 d9 fe ff       	call   c0013a64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002615f:	83 c4 20             	add    esp,0x20
c0026162:	89 c2                	mov    edx,eax
c0026164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026168:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002616e:	b8 00 00 00 00       	mov    eax,0x0
c0026173:	5b                   	pop    ebx
c0026174:	5e                   	pop    esi
c0026175:	5f                   	pop    edi
c0026176:	c3                   	ret    
c0026177:	90                   	nop

c0026178 <APICTimer::APICTimer()>:
c0026178:	83 ec 0c             	sub    esp,0xc
c002617b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002617f:	83 ec 08             	sub    esp,0x8
c0026182:	68 ac c6 02 c0       	push   0xc002c6ac
c0026187:	50                   	push   eax
c0026188:	e8 95 03 ff ff       	call   c0016522 <Timer::Timer(char const*)>
c002618d:	83 c4 10             	add    esp,0x10
c0026190:	ba c0 c6 02 c0       	mov    edx,0xc002c6c0
c0026195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026199:	89 10                	mov    DWORD PTR [eax],edx
c002619b:	90                   	nop
c002619c:	83 c4 0c             	add    esp,0xc
c002619f:	c3                   	ret    

c00261a0 <PIT::write(int)>:
c00261a0:	83 ec 10             	sub    esp,0x10
c00261a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00261ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00261b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00261b5:	a3 04 1d 03 c0       	mov    ds:0xc0031d04,eax
c00261ba:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00261bf:	99                   	cdq    
c00261c0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00261c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00261c8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00261cf:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00261d4:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00261d8:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00261dd:	ee                   	out    dx,al
c00261de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261e2:	0f b6 c0             	movzx  eax,al
c00261e5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00261ec:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00261f0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00261f4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00261f9:	ee                   	out    dx,al
c00261fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00261fe:	c1 f8 08             	sar    eax,0x8
c0026201:	0f b6 c0             	movzx  eax,al
c0026204:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002620b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002620f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026213:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026218:	ee                   	out    dx,al
c0026219:	90                   	nop
c002621a:	83 c4 10             	add    esp,0x10
c002621d:	c3                   	ret    

c002621e <pitHandler(regs*, void*)>:
c002621e:	83 ec 0c             	sub    esp,0xc
c0026221:	a1 04 1d 03 c0       	mov    eax,ds:0xc0031d04
c0026226:	99                   	cdq    
c0026227:	52                   	push   edx
c0026228:	50                   	push   eax
c0026229:	6a 00                	push   0x0
c002622b:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026230:	e8 bf 04 00 00       	call   c00266f4 <__udivdi3>
c0026235:	83 c4 10             	add    esp,0x10
c0026238:	83 ec 08             	sub    esp,0x8
c002623b:	52                   	push   edx
c002623c:	50                   	push   eax
c002623d:	e8 6f 03 ff ff       	call   c00165b1 <timerHandler(unsigned long long)>
c0026242:	83 c4 10             	add    esp,0x10
c0026245:	90                   	nop
c0026246:	83 c4 0c             	add    esp,0xc
c0026249:	c3                   	ret    

c002624a <PIT::open(int, int, void*)>:
c002624a:	83 ec 0c             	sub    esp,0xc
c002624d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026251:	8b 00                	mov    eax,DWORD PTR [eax]
c0026253:	83 c0 24             	add    eax,0x24
c0026256:	8b 00                	mov    eax,DWORD PTR [eax]
c0026258:	83 ec 08             	sub    esp,0x8
c002625b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002625f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026263:	ff d0                	call   eax
c0026265:	83 c4 10             	add    esp,0x10
c0026268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002626c:	83 ec 0c             	sub    esp,0xc
c002626f:	6a 00                	push   0x0
c0026271:	6a 01                	push   0x1
c0026273:	68 1e 62 02 c0       	push   0xc002621e
c0026278:	6a 00                	push   0x0
c002627a:	50                   	push   eax
c002627b:	e8 e4 d7 fe ff       	call   c0013a64 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026280:	83 c4 20             	add    esp,0x20
c0026283:	89 c2                	mov    edx,eax
c0026285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026289:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002628f:	b8 00 00 00 00       	mov    eax,0x0
c0026294:	83 c4 0c             	add    esp,0xc
c0026297:	c3                   	ret    

c0026298 <PIT::close(int, int, void*)>:
c0026298:	83 ec 0c             	sub    esp,0xc
c002629b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002629f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00262a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ad:	6a 01                	push   0x1
c00262af:	68 1e 62 02 c0       	push   0xc002621e
c00262b4:	6a 00                	push   0x0
c00262b6:	50                   	push   eax
c00262b7:	e8 f2 d7 fe ff       	call   c0013aae <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00262bc:	83 c4 10             	add    esp,0x10
c00262bf:	b8 00 00 00 00       	mov    eax,0x0
c00262c4:	83 c4 0c             	add    esp,0xc
c00262c7:	c3                   	ret    

c00262c8 <PIT::PIT()>:
c00262c8:	83 ec 0c             	sub    esp,0xc
c00262cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262cf:	83 ec 08             	sub    esp,0x8
c00262d2:	68 e8 c6 02 c0       	push   0xc002c6e8
c00262d7:	50                   	push   eax
c00262d8:	e8 45 02 ff ff       	call   c0016522 <Timer::Timer(char const*)>
c00262dd:	83 c4 10             	add    esp,0x10
c00262e0:	ba 10 c7 02 c0       	mov    edx,0xc002c710
c00262e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262e9:	89 10                	mov    DWORD PTR [eax],edx
c00262eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262ef:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00262f5:	0f b6 d0             	movzx  edx,al
c00262f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262fc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026307:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002630d:	0f b6 d0             	movzx  edx,al
c0026310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026314:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026319:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002631d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026323:	8d 50 01             	lea    edx,[eax+0x1]
c0026326:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002632a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026330:	0f b6 d0             	movzx  edx,al
c0026333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026337:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002633b:	83 e1 3f             	and    ecx,0x3f
c002633e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026342:	90                   	nop
c0026343:	83 c4 0c             	add    esp,0xc
c0026346:	c3                   	ret    
c0026347:	66 90                	xchg   ax,ax
c0026349:	66 90                	xchg   ax,ax
c002634b:	66 90                	xchg   ax,ax
c002634d:	66 90                	xchg   ax,ax
c002634f:	90                   	nop

c0026350 <avxDetect>:
c0026350:	b8 00 00 00 00       	mov    eax,0x0
c0026355:	c3                   	ret    

c0026356 <avxSave>:
c0026356:	c3                   	ret    

c0026357 <avxLoad>:
c0026357:	c3                   	ret    

c0026358 <avxInit>:
c0026358:	c3                   	ret    

c0026359 <avxClose>:
c0026359:	c3                   	ret    

c002635a <wouldSheSayYes>:
c002635a:	c3                   	ret    
c002635b:	49                   	dec    ecx
c002635c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026360:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026364:	75 20                	jne    c0026386 <sseDetect.noSSE+0x1>
c0026366:	4e                   	dec    esi
c0026367:	79 61                	jns    c00263ca <x87Detect+0x14>
c0026369:	68 2e 2e 2e 00       	push   0x2e2e2e
c002636e:	66 90                	xchg   ax,ax

c0026370 <absolutelyNoChanceInHell>:
c0026370:	b8 01 00 00 00       	mov    eax,0x1
c0026375:	0f a2                	cpuid  
c0026377:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002637d:	74 06                	je     c0026385 <sseDetect.noSSE>
c002637f:	b8 01 00 00 00       	mov    eax,0x1
c0026384:	c3                   	ret    

c0026385 <sseDetect.noSSE>:
c0026385:	31 c0                	xor    eax,eax
c0026387:	c3                   	ret    

c0026388 <sseSave>:
c0026388:	0f ae 44 24 04       	fxsave [esp+0x4]
c002638d:	c3                   	ret    

c002638e <sseLoad>:
c002638e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026393:	c3                   	ret    

c0026394 <sseInit>:
c0026394:	e8 49 00 00 00       	call   c00263e2 <x87Init>
c0026399:	0f 20 e0             	mov    eax,cr4
c002639c:	66 0d 00 06          	or     ax,0x600
c00263a0:	0f 22 e0             	mov    cr4,eax
c00263a3:	c3                   	ret    

c00263a4 <sseClose>:
c00263a4:	c3                   	ret    
c00263a5:	66 90                	xchg   ax,ax
c00263a7:	66 90                	xchg   ax,ax
c00263a9:	66 90                	xchg   ax,ax
c00263ab:	66 90                	xchg   ax,ax
c00263ad:	66 90                	xchg   ax,ax
c00263af:	90                   	nop

c00263b0 <value_37F>:
c00263b0:	7f 03                	jg     c00263b5 <value_37A+0x1>

c00263b2 <value_37E>:
c00263b2:	7e 03                	jle    c00263b7 <x87Detect+0x1>

c00263b4 <value_37A>:
c00263b4:	7a 03                	jp     c00263b9 <x87Detect+0x3>

c00263b6 <x87Detect>:
c00263b6:	b8 01 00 00 00       	mov    eax,0x1
c00263bb:	0f a2                	cpuid  
c00263bd:	f7 c2 01 00 00 00    	test   edx,0x1
c00263c3:	74 06                	je     c00263cb <x87Detect.nox87>
c00263c5:	b8 01 00 00 00       	mov    eax,0x1
c00263ca:	c3                   	ret    

c00263cb <x87Detect.nox87>:
c00263cb:	b8 00 00 00 00       	mov    eax,0x0
c00263d0:	c3                   	ret    

c00263d1 <x87Save>:
c00263d1:	55                   	push   ebp
c00263d2:	89 e5                	mov    ebp,esp
c00263d4:	9b dd 75 08          	fsave  [ebp+0x8]
c00263d8:	c9                   	leave  
c00263d9:	c3                   	ret    

c00263da <x87Load>:
c00263da:	55                   	push   ebp
c00263db:	89 e5                	mov    ebp,esp
c00263dd:	dd 65 08             	frstor [ebp+0x8]
c00263e0:	c9                   	leave  
c00263e1:	c3                   	ret    

c00263e2 <x87Init>:
c00263e2:	9b db e3             	finit  
c00263e5:	0f 20 c0             	mov    eax,cr0
c00263e8:	66 25 fb ff          	and    ax,0xfffb
c00263ec:	66 0d 22 00          	or     ax,0x22
c00263f0:	0f 22 c0             	mov    cr0,eax
c00263f3:	0f 06                	clts   
c00263f5:	d9 2d b4 63 02 c0    	fldcw  WORD PTR ds:0xc00263b4
c00263fb:	c3                   	ret    

c00263fc <x87Close>:
c00263fc:	c3                   	ret    
c00263fd:	66 90                	xchg   ax,ax
c00263ff:	90                   	nop

c0026400 <__do_global_ctors_aux>:
c0026400:	a1 f4 8f 02 c0       	mov    eax,ds:0xc0028ff4
c0026405:	83 f8 ff             	cmp    eax,0xffffffff
c0026408:	74 1a                	je     c0026424 <__do_global_ctors_aux+0x24>
c002640a:	55                   	push   ebp
c002640b:	89 e5                	mov    ebp,esp
c002640d:	53                   	push   ebx
c002640e:	52                   	push   edx
c002640f:	bb f4 8f 02 c0       	mov    ebx,0xc0028ff4
c0026414:	ff d0                	call   eax
c0026416:	83 eb 04             	sub    ebx,0x4
c0026419:	8b 03                	mov    eax,DWORD PTR [ebx]
c002641b:	83 f8 ff             	cmp    eax,0xffffffff
c002641e:	75 f4                	jne    c0026414 <__do_global_ctors_aux+0x14>
c0026420:	58                   	pop    eax
c0026421:	5b                   	pop    ebx
c0026422:	5d                   	pop    ebp
c0026423:	c3                   	ret    
c0026424:	c3                   	ret    
c0026425:	66 90                	xchg   ax,ax
c0026427:	90                   	nop

c0026428 <__divdi3>:
c0026428:	55                   	push   ebp
c0026429:	57                   	push   edi
c002642a:	56                   	push   esi
c002642b:	53                   	push   ebx
c002642c:	83 ec 1c             	sub    esp,0x1c
c002642f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026433:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026437:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002643a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002643e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026442:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026446:	85 db                	test   ebx,ebx
c0026448:	0f 88 8e 00 00 00    	js     c00264dc <__divdi3+0xb4>
c002644e:	89 dd                	mov    ebp,ebx
c0026450:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026458:	89 d3                	mov    ebx,edx
c002645a:	85 d2                	test   edx,edx
c002645c:	79 0d                	jns    c002646b <__divdi3+0x43>
c002645e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026462:	f7 d8                	neg    eax
c0026464:	83 d2 00             	adc    edx,0x0
c0026467:	f7 da                	neg    edx
c0026469:	89 d3                	mov    ebx,edx
c002646b:	89 c7                	mov    edi,eax
c002646d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026470:	85 db                	test   ebx,ebx
c0026472:	75 48                	jne    c00264bc <__divdi3+0x94>
c0026474:	39 ef                	cmp    edi,ebp
c0026476:	76 24                	jbe    c002649c <__divdi3+0x74>
c0026478:	89 ea                	mov    edx,ebp
c002647a:	f7 f7                	div    edi
c002647c:	89 c1                	mov    ecx,eax
c002647e:	31 f6                	xor    esi,esi
c0026480:	89 c8                	mov    eax,ecx
c0026482:	89 f2                	mov    edx,esi
c0026484:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026488:	85 c9                	test   ecx,ecx
c002648a:	74 07                	je     c0026493 <__divdi3+0x6b>
c002648c:	f7 d8                	neg    eax
c002648e:	83 d2 00             	adc    edx,0x0
c0026491:	f7 da                	neg    edx
c0026493:	83 c4 1c             	add    esp,0x1c
c0026496:	5b                   	pop    ebx
c0026497:	5e                   	pop    esi
c0026498:	5f                   	pop    edi
c0026499:	5d                   	pop    ebp
c002649a:	c3                   	ret    
c002649b:	90                   	nop
c002649c:	85 ff                	test   edi,edi
c002649e:	75 0b                	jne    c00264ab <__divdi3+0x83>
c00264a0:	b8 01 00 00 00       	mov    eax,0x1
c00264a5:	31 d2                	xor    edx,edx
c00264a7:	f7 f3                	div    ebx
c00264a9:	89 c7                	mov    edi,eax
c00264ab:	31 d2                	xor    edx,edx
c00264ad:	89 e8                	mov    eax,ebp
c00264af:	f7 f7                	div    edi
c00264b1:	89 c6                	mov    esi,eax
c00264b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00264b6:	f7 f7                	div    edi
c00264b8:	89 c1                	mov    ecx,eax
c00264ba:	eb c4                	jmp    c0026480 <__divdi3+0x58>
c00264bc:	39 eb                	cmp    ebx,ebp
c00264be:	77 3c                	ja     c00264fc <__divdi3+0xd4>
c00264c0:	0f bd f3             	bsr    esi,ebx
c00264c3:	83 f6 1f             	xor    esi,0x1f
c00264c6:	75 40                	jne    c0026508 <__divdi3+0xe0>
c00264c8:	39 eb                	cmp    ebx,ebp
c00264ca:	72 09                	jb     c00264d5 <__divdi3+0xad>
c00264cc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00264cf:	0f 87 97 00 00 00    	ja     c002656c <__divdi3+0x144>
c00264d5:	b9 01 00 00 00       	mov    ecx,0x1
c00264da:	eb a4                	jmp    c0026480 <__divdi3+0x58>
c00264dc:	f7 d9                	neg    ecx
c00264de:	83 d3 00             	adc    ebx,0x0
c00264e1:	f7 db                	neg    ebx
c00264e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00264e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00264ea:	89 dd                	mov    ebp,ebx
c00264ec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00264f4:	e9 5f ff ff ff       	jmp    c0026458 <__divdi3+0x30>
c00264f9:	8d 76 00             	lea    esi,[esi+0x0]
c00264fc:	31 f6                	xor    esi,esi
c00264fe:	31 c9                	xor    ecx,ecx
c0026500:	e9 7b ff ff ff       	jmp    c0026480 <__divdi3+0x58>
c0026505:	8d 76 00             	lea    esi,[esi+0x0]
c0026508:	b8 20 00 00 00       	mov    eax,0x20
c002650d:	29 f0                	sub    eax,esi
c002650f:	89 f1                	mov    ecx,esi
c0026511:	d3 e3                	shl    ebx,cl
c0026513:	89 fa                	mov    edx,edi
c0026515:	88 c1                	mov    cl,al
c0026517:	d3 ea                	shr    edx,cl
c0026519:	09 da                	or     edx,ebx
c002651b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002651f:	89 f1                	mov    ecx,esi
c0026521:	d3 e7                	shl    edi,cl
c0026523:	89 eb                	mov    ebx,ebp
c0026525:	88 c1                	mov    cl,al
c0026527:	d3 eb                	shr    ebx,cl
c0026529:	89 f1                	mov    ecx,esi
c002652b:	d3 e5                	shl    ebp,cl
c002652d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026530:	88 c1                	mov    cl,al
c0026532:	d3 ea                	shr    edx,cl
c0026534:	09 d5                	or     ebp,edx
c0026536:	89 e8                	mov    eax,ebp
c0026538:	89 da                	mov    edx,ebx
c002653a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002653e:	89 d3                	mov    ebx,edx
c0026540:	89 c5                	mov    ebp,eax
c0026542:	f7 e7                	mul    edi
c0026544:	39 d3                	cmp    ebx,edx
c0026546:	72 18                	jb     c0026560 <__divdi3+0x138>
c0026548:	74 0a                	je     c0026554 <__divdi3+0x12c>
c002654a:	89 e9                	mov    ecx,ebp
c002654c:	31 f6                	xor    esi,esi
c002654e:	e9 2d ff ff ff       	jmp    c0026480 <__divdi3+0x58>
c0026553:	90                   	nop
c0026554:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0026557:	89 f1                	mov    ecx,esi
c0026559:	d3 e7                	shl    edi,cl
c002655b:	39 c7                	cmp    edi,eax
c002655d:	73 eb                	jae    c002654a <__divdi3+0x122>
c002655f:	90                   	nop
c0026560:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0026563:	31 f6                	xor    esi,esi
c0026565:	e9 16 ff ff ff       	jmp    c0026480 <__divdi3+0x58>
c002656a:	66 90                	xchg   ax,ax
c002656c:	31 c9                	xor    ecx,ecx
c002656e:	e9 0d ff ff ff       	jmp    c0026480 <__divdi3+0x58>
c0026573:	90                   	nop

c0026574 <__moddi3>:
c0026574:	55                   	push   ebp
c0026575:	57                   	push   edi
c0026576:	56                   	push   esi
c0026577:	53                   	push   ebx
c0026578:	83 ec 2c             	sub    esp,0x2c
c002657b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002657f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0026583:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0026587:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002658b:	85 db                	test   ebx,ebx
c002658d:	0f 88 85 00 00 00    	js     c0026618 <__moddi3+0xa4>
c0026593:	89 de                	mov    esi,ebx
c0026595:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002659d:	89 d7                	mov    edi,edx
c002659f:	85 d2                	test   edx,edx
c00265a1:	79 09                	jns    c00265ac <__moddi3+0x38>
c00265a3:	f7 d8                	neg    eax
c00265a5:	83 d2 00             	adc    edx,0x0
c00265a8:	f7 da                	neg    edx
c00265aa:	89 d7                	mov    edi,edx
c00265ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265b0:	89 cd                	mov    ebp,ecx
c00265b2:	85 ff                	test   edi,edi
c00265b4:	75 52                	jne    c0026608 <__moddi3+0x94>
c00265b6:	89 c3                	mov    ebx,eax
c00265b8:	39 f0                	cmp    eax,esi
c00265ba:	76 24                	jbe    c00265e0 <__moddi3+0x6c>
c00265bc:	89 c8                	mov    eax,ecx
c00265be:	89 f2                	mov    edx,esi
c00265c0:	f7 f3                	div    ebx
c00265c2:	89 d6                	mov    esi,edx
c00265c4:	89 f0                	mov    eax,esi
c00265c6:	31 d2                	xor    edx,edx
c00265c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00265cc:	85 c9                	test   ecx,ecx
c00265ce:	74 07                	je     c00265d7 <__moddi3+0x63>
c00265d0:	f7 d8                	neg    eax
c00265d2:	83 d2 00             	adc    edx,0x0
c00265d5:	f7 da                	neg    edx
c00265d7:	83 c4 2c             	add    esp,0x2c
c00265da:	5b                   	pop    ebx
c00265db:	5e                   	pop    esi
c00265dc:	5f                   	pop    edi
c00265dd:	5d                   	pop    ebp
c00265de:	c3                   	ret    
c00265df:	90                   	nop
c00265e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00265e4:	85 db                	test   ebx,ebx
c00265e6:	75 0d                	jne    c00265f5 <__moddi3+0x81>
c00265e8:	b8 01 00 00 00       	mov    eax,0x1
c00265ed:	31 d2                	xor    edx,edx
c00265ef:	f7 f7                	div    edi
c00265f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00265f5:	89 f0                	mov    eax,esi
c00265f7:	31 d2                	xor    edx,edx
c00265f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00265fd:	f7 f7                	div    edi
c00265ff:	89 e8                	mov    eax,ebp
c0026601:	f7 f7                	div    edi
c0026603:	89 d6                	mov    esi,edx
c0026605:	eb bd                	jmp    c00265c4 <__moddi3+0x50>
c0026607:	90                   	nop
c0026608:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002660c:	39 f7                	cmp    edi,esi
c002660e:	76 20                	jbe    c0026630 <__moddi3+0xbc>
c0026610:	89 c8                	mov    eax,ecx
c0026612:	89 f2                	mov    edx,esi
c0026614:	eb b2                	jmp    c00265c8 <__moddi3+0x54>
c0026616:	66 90                	xchg   ax,ax
c0026618:	f7 d9                	neg    ecx
c002661a:	83 d3 00             	adc    ebx,0x0
c002661d:	f7 db                	neg    ebx
c002661f:	89 de                	mov    esi,ebx
c0026621:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026629:	e9 6f ff ff ff       	jmp    c002659d <__moddi3+0x29>
c002662e:	66 90                	xchg   ax,ax
c0026630:	0f bd c7             	bsr    eax,edi
c0026633:	83 f0 1f             	xor    eax,0x1f
c0026636:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002663a:	75 24                	jne    c0026660 <__moddi3+0xec>
c002663c:	39 f7                	cmp    edi,esi
c002663e:	72 06                	jb     c0026646 <__moddi3+0xd2>
c0026640:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0026644:	77 0c                	ja     c0026652 <__moddi3+0xde>
c0026646:	89 e9                	mov    ecx,ebp
c0026648:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002664c:	19 fe                	sbb    esi,edi
c002664e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026656:	89 f2                	mov    edx,esi
c0026658:	e9 6b ff ff ff       	jmp    c00265c8 <__moddi3+0x54>
c002665d:	8d 76 00             	lea    esi,[esi+0x0]
c0026660:	b8 20 00 00 00       	mov    eax,0x20
c0026665:	89 c2                	mov    edx,eax
c0026667:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002666b:	29 da                	sub    edx,ebx
c002666d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026671:	88 d9                	mov    cl,bl
c0026673:	d3 e7                	shl    edi,cl
c0026675:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026679:	88 d1                	mov    cl,dl
c002667b:	d3 e8                	shr    eax,cl
c002667d:	09 c7                	or     edi,eax
c002667f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0026683:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026687:	89 d8                	mov    eax,ebx
c0026689:	88 d9                	mov    cl,bl
c002668b:	d3 e7                	shl    edi,cl
c002668d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026691:	89 f3                	mov    ebx,esi
c0026693:	88 d1                	mov    cl,dl
c0026695:	d3 eb                	shr    ebx,cl
c0026697:	89 c7                	mov    edi,eax
c0026699:	88 c1                	mov    cl,al
c002669b:	d3 e6                	shl    esi,cl
c002669d:	89 e8                	mov    eax,ebp
c002669f:	88 d1                	mov    cl,dl
c00266a1:	d3 e8                	shr    eax,cl
c00266a3:	09 f0                	or     eax,esi
c00266a5:	89 f9                	mov    ecx,edi
c00266a7:	d3 e5                	shl    ebp,cl
c00266a9:	89 da                	mov    edx,ebx
c00266ab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00266af:	89 d3                	mov    ebx,edx
c00266b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266b5:	89 c6                	mov    esi,eax
c00266b7:	89 d1                	mov    ecx,edx
c00266b9:	39 d3                	cmp    ebx,edx
c00266bb:	72 27                	jb     c00266e4 <__moddi3+0x170>
c00266bd:	74 21                	je     c00266e0 <__moddi3+0x16c>
c00266bf:	29 f5                	sub    ebp,esi
c00266c1:	19 cb                	sbb    ebx,ecx
c00266c3:	89 de                	mov    esi,ebx
c00266c5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00266c9:	d3 e6                	shl    esi,cl
c00266cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00266cf:	89 f9                	mov    ecx,edi
c00266d1:	d3 ed                	shr    ebp,cl
c00266d3:	09 ee                	or     esi,ebp
c00266d5:	89 f0                	mov    eax,esi
c00266d7:	d3 eb                	shr    ebx,cl
c00266d9:	89 da                	mov    edx,ebx
c00266db:	e9 e8 fe ff ff       	jmp    c00265c8 <__moddi3+0x54>
c00266e0:	39 c5                	cmp    ebp,eax
c00266e2:	73 db                	jae    c00266bf <__moddi3+0x14b>
c00266e4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00266e8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00266ec:	89 d1                	mov    ecx,edx
c00266ee:	89 c6                	mov    esi,eax
c00266f0:	eb cd                	jmp    c00266bf <__moddi3+0x14b>
c00266f2:	66 90                	xchg   ax,ax

c00266f4 <__udivdi3>:
c00266f4:	55                   	push   ebp
c00266f5:	57                   	push   edi
c00266f6:	56                   	push   esi
c00266f7:	53                   	push   ebx
c00266f8:	83 ec 1c             	sub    esp,0x1c
c00266fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00266ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026703:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026707:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002670b:	85 d2                	test   edx,edx
c002670d:	75 41                	jne    c0026750 <__udivdi3+0x5c>
c002670f:	39 f7                	cmp    edi,esi
c0026711:	76 15                	jbe    c0026728 <__udivdi3+0x34>
c0026713:	89 e8                	mov    eax,ebp
c0026715:	89 f2                	mov    edx,esi
c0026717:	f7 f7                	div    edi
c0026719:	31 db                	xor    ebx,ebx
c002671b:	89 da                	mov    edx,ebx
c002671d:	83 c4 1c             	add    esp,0x1c
c0026720:	5b                   	pop    ebx
c0026721:	5e                   	pop    esi
c0026722:	5f                   	pop    edi
c0026723:	5d                   	pop    ebp
c0026724:	c3                   	ret    
c0026725:	8d 76 00             	lea    esi,[esi+0x0]
c0026728:	89 f9                	mov    ecx,edi
c002672a:	85 ff                	test   edi,edi
c002672c:	75 0b                	jne    c0026739 <__udivdi3+0x45>
c002672e:	b8 01 00 00 00       	mov    eax,0x1
c0026733:	31 d2                	xor    edx,edx
c0026735:	f7 f7                	div    edi
c0026737:	89 c1                	mov    ecx,eax
c0026739:	31 d2                	xor    edx,edx
c002673b:	89 f0                	mov    eax,esi
c002673d:	f7 f1                	div    ecx
c002673f:	89 c3                	mov    ebx,eax
c0026741:	89 e8                	mov    eax,ebp
c0026743:	f7 f1                	div    ecx
c0026745:	89 da                	mov    edx,ebx
c0026747:	83 c4 1c             	add    esp,0x1c
c002674a:	5b                   	pop    ebx
c002674b:	5e                   	pop    esi
c002674c:	5f                   	pop    edi
c002674d:	5d                   	pop    ebp
c002674e:	c3                   	ret    
c002674f:	90                   	nop
c0026750:	39 f2                	cmp    edx,esi
c0026752:	77 1c                	ja     c0026770 <__udivdi3+0x7c>
c0026754:	0f bd da             	bsr    ebx,edx
c0026757:	83 f3 1f             	xor    ebx,0x1f
c002675a:	75 24                	jne    c0026780 <__udivdi3+0x8c>
c002675c:	39 f2                	cmp    edx,esi
c002675e:	72 08                	jb     c0026768 <__udivdi3+0x74>
c0026760:	39 ef                	cmp    edi,ebp
c0026762:	0f 87 84 00 00 00    	ja     c00267ec <__udivdi3+0xf8>
c0026768:	b8 01 00 00 00       	mov    eax,0x1
c002676d:	eb ac                	jmp    c002671b <__udivdi3+0x27>
c002676f:	90                   	nop
c0026770:	31 db                	xor    ebx,ebx
c0026772:	31 c0                	xor    eax,eax
c0026774:	89 da                	mov    edx,ebx
c0026776:	83 c4 1c             	add    esp,0x1c
c0026779:	5b                   	pop    ebx
c002677a:	5e                   	pop    esi
c002677b:	5f                   	pop    edi
c002677c:	5d                   	pop    ebp
c002677d:	c3                   	ret    
c002677e:	66 90                	xchg   ax,ax
c0026780:	b8 20 00 00 00       	mov    eax,0x20
c0026785:	29 d8                	sub    eax,ebx
c0026787:	88 d9                	mov    cl,bl
c0026789:	d3 e2                	shl    edx,cl
c002678b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002678f:	89 fa                	mov    edx,edi
c0026791:	88 c1                	mov    cl,al
c0026793:	d3 ea                	shr    edx,cl
c0026795:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026799:	09 d1                	or     ecx,edx
c002679b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002679f:	88 d9                	mov    cl,bl
c00267a1:	d3 e7                	shl    edi,cl
c00267a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00267a7:	89 f7                	mov    edi,esi
c00267a9:	88 c1                	mov    cl,al
c00267ab:	d3 ef                	shr    edi,cl
c00267ad:	88 d9                	mov    cl,bl
c00267af:	d3 e6                	shl    esi,cl
c00267b1:	89 ea                	mov    edx,ebp
c00267b3:	88 c1                	mov    cl,al
c00267b5:	d3 ea                	shr    edx,cl
c00267b7:	09 d6                	or     esi,edx
c00267b9:	89 f0                	mov    eax,esi
c00267bb:	89 fa                	mov    edx,edi
c00267bd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267c1:	89 d7                	mov    edi,edx
c00267c3:	89 c6                	mov    esi,eax
c00267c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267c9:	39 d7                	cmp    edi,edx
c00267cb:	72 13                	jb     c00267e0 <__udivdi3+0xec>
c00267cd:	74 09                	je     c00267d8 <__udivdi3+0xe4>
c00267cf:	89 f0                	mov    eax,esi
c00267d1:	31 db                	xor    ebx,ebx
c00267d3:	e9 43 ff ff ff       	jmp    c002671b <__udivdi3+0x27>
c00267d8:	88 d9                	mov    cl,bl
c00267da:	d3 e5                	shl    ebp,cl
c00267dc:	39 c5                	cmp    ebp,eax
c00267de:	73 ef                	jae    c00267cf <__udivdi3+0xdb>
c00267e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00267e3:	31 db                	xor    ebx,ebx
c00267e5:	e9 31 ff ff ff       	jmp    c002671b <__udivdi3+0x27>
c00267ea:	66 90                	xchg   ax,ax
c00267ec:	31 c0                	xor    eax,eax
c00267ee:	e9 28 ff ff ff       	jmp    c002671b <__udivdi3+0x27>
c00267f3:	90                   	nop

c00267f4 <__umoddi3>:
c00267f4:	55                   	push   ebp
c00267f5:	57                   	push   edi
c00267f6:	56                   	push   esi
c00267f7:	53                   	push   ebx
c00267f8:	83 ec 1c             	sub    esp,0x1c
c00267fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00267ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026803:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026807:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002680b:	89 da                	mov    edx,ebx
c002680d:	85 c0                	test   eax,eax
c002680f:	75 37                	jne    c0026848 <__umoddi3+0x54>
c0026811:	39 df                	cmp    edi,ebx
c0026813:	76 13                	jbe    c0026828 <__umoddi3+0x34>
c0026815:	89 f0                	mov    eax,esi
c0026817:	f7 f7                	div    edi
c0026819:	89 d0                	mov    eax,edx
c002681b:	31 d2                	xor    edx,edx
c002681d:	83 c4 1c             	add    esp,0x1c
c0026820:	5b                   	pop    ebx
c0026821:	5e                   	pop    esi
c0026822:	5f                   	pop    edi
c0026823:	5d                   	pop    ebp
c0026824:	c3                   	ret    
c0026825:	8d 76 00             	lea    esi,[esi+0x0]
c0026828:	89 fd                	mov    ebp,edi
c002682a:	85 ff                	test   edi,edi
c002682c:	75 0b                	jne    c0026839 <__umoddi3+0x45>
c002682e:	b8 01 00 00 00       	mov    eax,0x1
c0026833:	31 d2                	xor    edx,edx
c0026835:	f7 f7                	div    edi
c0026837:	89 c5                	mov    ebp,eax
c0026839:	89 d8                	mov    eax,ebx
c002683b:	31 d2                	xor    edx,edx
c002683d:	f7 f5                	div    ebp
c002683f:	89 f0                	mov    eax,esi
c0026841:	f7 f5                	div    ebp
c0026843:	89 d0                	mov    eax,edx
c0026845:	eb d4                	jmp    c002681b <__umoddi3+0x27>
c0026847:	90                   	nop
c0026848:	89 f1                	mov    ecx,esi
c002684a:	39 d8                	cmp    eax,ebx
c002684c:	76 0a                	jbe    c0026858 <__umoddi3+0x64>
c002684e:	89 f0                	mov    eax,esi
c0026850:	83 c4 1c             	add    esp,0x1c
c0026853:	5b                   	pop    ebx
c0026854:	5e                   	pop    esi
c0026855:	5f                   	pop    edi
c0026856:	5d                   	pop    ebp
c0026857:	c3                   	ret    
c0026858:	0f bd e8             	bsr    ebp,eax
c002685b:	83 f5 1f             	xor    ebp,0x1f
c002685e:	75 1c                	jne    c002687c <__umoddi3+0x88>
c0026860:	39 d8                	cmp    eax,ebx
c0026862:	72 04                	jb     c0026868 <__umoddi3+0x74>
c0026864:	39 f7                	cmp    edi,esi
c0026866:	77 08                	ja     c0026870 <__umoddi3+0x7c>
c0026868:	89 da                	mov    edx,ebx
c002686a:	29 fe                	sub    esi,edi
c002686c:	19 c2                	sbb    edx,eax
c002686e:	89 f1                	mov    ecx,esi
c0026870:	89 c8                	mov    eax,ecx
c0026872:	83 c4 1c             	add    esp,0x1c
c0026875:	5b                   	pop    ebx
c0026876:	5e                   	pop    esi
c0026877:	5f                   	pop    edi
c0026878:	5d                   	pop    ebp
c0026879:	c3                   	ret    
c002687a:	66 90                	xchg   ax,ax
c002687c:	ba 20 00 00 00       	mov    edx,0x20
c0026881:	29 ea                	sub    edx,ebp
c0026883:	89 e9                	mov    ecx,ebp
c0026885:	d3 e0                	shl    eax,cl
c0026887:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002688b:	89 f8                	mov    eax,edi
c002688d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026891:	88 d1                	mov    cl,dl
c0026893:	d3 e8                	shr    eax,cl
c0026895:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026899:	09 c1                	or     ecx,eax
c002689b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002689f:	89 e9                	mov    ecx,ebp
c00268a1:	d3 e7                	shl    edi,cl
c00268a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00268a7:	89 d8                	mov    eax,ebx
c00268a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00268ad:	88 d1                	mov    cl,dl
c00268af:	d3 e8                	shr    eax,cl
c00268b1:	89 c7                	mov    edi,eax
c00268b3:	89 e9                	mov    ecx,ebp
c00268b5:	d3 e3                	shl    ebx,cl
c00268b7:	89 f0                	mov    eax,esi
c00268b9:	88 d1                	mov    cl,dl
c00268bb:	d3 e8                	shr    eax,cl
c00268bd:	09 d8                	or     eax,ebx
c00268bf:	89 e9                	mov    ecx,ebp
c00268c1:	d3 e6                	shl    esi,cl
c00268c3:	89 f3                	mov    ebx,esi
c00268c5:	89 fa                	mov    edx,edi
c00268c7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00268cb:	89 d1                	mov    ecx,edx
c00268cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00268d1:	89 c6                	mov    esi,eax
c00268d3:	89 d7                	mov    edi,edx
c00268d5:	39 d1                	cmp    ecx,edx
c00268d7:	72 27                	jb     c0026900 <__umoddi3+0x10c>
c00268d9:	74 21                	je     c00268fc <__umoddi3+0x108>
c00268db:	89 ca                	mov    edx,ecx
c00268dd:	29 f3                	sub    ebx,esi
c00268df:	19 fa                	sbb    edx,edi
c00268e1:	89 d0                	mov    eax,edx
c00268e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00268e7:	d3 e0                	shl    eax,cl
c00268e9:	89 e9                	mov    ecx,ebp
c00268eb:	d3 eb                	shr    ebx,cl
c00268ed:	09 d8                	or     eax,ebx
c00268ef:	d3 ea                	shr    edx,cl
c00268f1:	83 c4 1c             	add    esp,0x1c
c00268f4:	5b                   	pop    ebx
c00268f5:	5e                   	pop    esi
c00268f6:	5f                   	pop    edi
c00268f7:	5d                   	pop    ebp
c00268f8:	c3                   	ret    
c00268f9:	8d 76 00             	lea    esi,[esi+0x0]
c00268fc:	39 c3                	cmp    ebx,eax
c00268fe:	73 db                	jae    c00268db <__umoddi3+0xe7>
c0026900:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026904:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026908:	89 d7                	mov    edi,edx
c002690a:	89 c6                	mov    esi,eax
c002690c:	eb cd                	jmp    c00268db <__umoddi3+0xe7>

c002690e <__addsf3>:
c002690e:	55                   	push   ebp
c002690f:	89 e5                	mov    ebp,esp
c0026911:	57                   	push   edi
c0026912:	56                   	push   esi
c0026913:	53                   	push   ebx
c0026914:	83 ec 08             	sub    esp,0x8
c0026917:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002691a:	89 fa                	mov    edx,edi
c002691c:	89 f8                	mov    eax,edi
c002691e:	c1 f8 17             	sar    eax,0x17
c0026921:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026924:	c1 e2 08             	shl    edx,0x8
c0026927:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002692d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026930:	89 de                	mov    esi,ebx
c0026932:	c1 fe 17             	sar    esi,0x17
c0026935:	c1 e3 08             	shl    ebx,0x8
c0026938:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002693e:	31 f0                	xor    eax,esi
c0026940:	0f 88 3b 01 00 00    	js     c0026a81 <__addsf3+0x173>
c0026946:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026949:	29 f1                	sub    ecx,esi
c002694b:	85 c9                	test   ecx,ecx
c002694d:	7e 54                	jle    c00269a3 <__addsf3+0x95>
c002694f:	89 f0                	mov    eax,esi
c0026951:	84 c0                	test   al,al
c0026953:	75 10                	jne    c0026965 <__addsf3+0x57>
c0026955:	85 db                	test   ebx,ebx
c0026957:	0f 84 aa 02 00 00    	je     c0026c07 <__addsf3+0x2f9>
c002695d:	49                   	dec    ecx
c002695e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026961:	74 38                	je     c002699b <__addsf3+0x8d>
c0026963:	eb 13                	jmp    c0026978 <__addsf3+0x6a>
c0026965:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026968:	f7 d0                	not    eax
c002696a:	84 c0                	test   al,al
c002696c:	0f 84 95 02 00 00    	je     c0026c07 <__addsf3+0x2f9>
c0026972:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026978:	83 f9 1f             	cmp    ecx,0x1f
c002697b:	0f 8f 86 02 00 00    	jg     c0026c07 <__addsf3+0x2f9>
c0026981:	89 de                	mov    esi,ebx
c0026983:	d3 ee                	shr    esi,cl
c0026985:	b8 20 00 00 00       	mov    eax,0x20
c002698a:	29 c8                	sub    eax,ecx
c002698c:	89 c1                	mov    ecx,eax
c002698e:	d3 e3                	shl    ebx,cl
c0026990:	31 c0                	xor    eax,eax
c0026992:	85 db                	test   ebx,ebx
c0026994:	0f 95 c0             	setne  al
c0026997:	09 f0                	or     eax,esi
c0026999:	01 d0                	add    eax,edx
c002699b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002699e:	e9 b6 00 00 00       	jmp    c0026a59 <__addsf3+0x14b>
c00269a3:	74 5c                	je     c0026a01 <__addsf3+0xf3>
c00269a5:	89 f1                	mov    ecx,esi
c00269a7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00269aa:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269ad:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00269b1:	75 14                	jne    c00269c7 <__addsf3+0xb9>
c00269b3:	85 d2                	test   edx,edx
c00269b5:	0f 84 4c 02 00 00    	je     c0026c07 <__addsf3+0x2f9>
c00269bb:	49                   	dec    ecx
c00269bc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00269bf:	0f 84 94 00 00 00    	je     c0026a59 <__addsf3+0x14b>
c00269c5:	eb 12                	jmp    c00269d9 <__addsf3+0xcb>
c00269c7:	89 f0                	mov    eax,esi
c00269c9:	f7 d0                	not    eax
c00269cb:	84 c0                	test   al,al
c00269cd:	0f 84 34 02 00 00    	je     c0026c07 <__addsf3+0x2f9>
c00269d3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00269d9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269dc:	83 f9 1f             	cmp    ecx,0x1f
c00269df:	0f 8f 22 02 00 00    	jg     c0026c07 <__addsf3+0x2f9>
c00269e5:	89 d7                	mov    edi,edx
c00269e7:	d3 ef                	shr    edi,cl
c00269e9:	b8 20 00 00 00       	mov    eax,0x20
c00269ee:	29 c8                	sub    eax,ecx
c00269f0:	89 c1                	mov    ecx,eax
c00269f2:	d3 e2                	shl    edx,cl
c00269f4:	31 c0                	xor    eax,eax
c00269f6:	85 d2                	test   edx,edx
c00269f8:	0f 95 c0             	setne  al
c00269fb:	09 f8                	or     eax,edi
c00269fd:	01 d8                	add    eax,ebx
c00269ff:	eb 58                	jmp    c0026a59 <__addsf3+0x14b>
c0026a01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a04:	8d 70 01             	lea    esi,[eax+0x1]
c0026a07:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026a0d:	75 32                	jne    c0026a41 <__addsf3+0x133>
c0026a0f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026a13:	75 1f                	jne    c0026a34 <__addsf3+0x126>
c0026a15:	85 d2                	test   edx,edx
c0026a17:	0f 84 e0 01 00 00    	je     c0026bfd <__addsf3+0x2ef>
c0026a1d:	85 db                	test   ebx,ebx
c0026a1f:	0f 84 e2 01 00 00    	je     c0026c07 <__addsf3+0x2f9>
c0026a25:	89 d0                	mov    eax,edx
c0026a27:	01 d8                	add    eax,ebx
c0026a29:	0f 89 a9 01 00 00    	jns    c0026bd8 <__addsf3+0x2ca>
c0026a2f:	e9 9d 01 00 00       	jmp    c0026bd1 <__addsf3+0x2c3>
c0026a34:	85 d2                	test   edx,edx
c0026a36:	0f 85 cb 01 00 00    	jne    c0026c07 <__addsf3+0x2f9>
c0026a3c:	e9 bc 01 00 00       	jmp    c0026bfd <__addsf3+0x2ef>
c0026a41:	31 c0                	xor    eax,eax
c0026a43:	89 f1                	mov    ecx,esi
c0026a45:	f7 d1                	not    ecx
c0026a47:	84 c9                	test   cl,cl
c0026a49:	0f 84 90 01 00 00    	je     c0026bdf <__addsf3+0x2d1>
c0026a4f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026a52:	d1 e8                	shr    eax,1
c0026a54:	e9 86 01 00 00       	jmp    c0026bdf <__addsf3+0x2d1>
c0026a59:	85 c0                	test   eax,eax
c0026a5b:	0f 89 7e 01 00 00    	jns    c0026bdf <__addsf3+0x2d1>
c0026a61:	46                   	inc    esi
c0026a62:	89 f2                	mov    edx,esi
c0026a64:	f7 d2                	not    edx
c0026a66:	84 d2                	test   dl,dl
c0026a68:	0f 84 6f 01 00 00    	je     c0026bdd <__addsf3+0x2cf>
c0026a6e:	89 c2                	mov    edx,eax
c0026a70:	83 e2 01             	and    edx,0x1
c0026a73:	d1 e8                	shr    eax,1
c0026a75:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026a7a:	09 d0                	or     eax,edx
c0026a7c:	e9 5e 01 00 00       	jmp    c0026bdf <__addsf3+0x2d1>
c0026a81:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026a85:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026a88:	89 f0                	mov    eax,esi
c0026a8a:	0f b6 c0             	movzx  eax,al
c0026a8d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026a90:	29 c1                	sub    ecx,eax
c0026a92:	85 c9                	test   ecx,ecx
c0026a94:	7e 55                	jle    c0026aeb <__addsf3+0x1dd>
c0026a96:	85 c0                	test   eax,eax
c0026a98:	75 11                	jne    c0026aab <__addsf3+0x19d>
c0026a9a:	85 db                	test   ebx,ebx
c0026a9c:	0f 84 65 01 00 00    	je     c0026c07 <__addsf3+0x2f9>
c0026aa2:	49                   	dec    ecx
c0026aa3:	75 19                	jne    c0026abe <__addsf3+0x1b0>
c0026aa5:	89 d0                	mov    eax,edx
c0026aa7:	29 d8                	sub    eax,ebx
c0026aa9:	eb 38                	jmp    c0026ae3 <__addsf3+0x1d5>
c0026aab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026aae:	f7 d0                	not    eax
c0026ab0:	84 c0                	test   al,al
c0026ab2:	0f 84 4f 01 00 00    	je     c0026c07 <__addsf3+0x2f9>
c0026ab8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026abe:	83 f9 1f             	cmp    ecx,0x1f
c0026ac1:	0f 8f 40 01 00 00    	jg     c0026c07 <__addsf3+0x2f9>
c0026ac7:	89 de                	mov    esi,ebx
c0026ac9:	d3 ee                	shr    esi,cl
c0026acb:	b8 20 00 00 00       	mov    eax,0x20
c0026ad0:	29 c8                	sub    eax,ecx
c0026ad2:	89 c1                	mov    ecx,eax
c0026ad4:	d3 e3                	shl    ebx,cl
c0026ad6:	31 c0                	xor    eax,eax
c0026ad8:	85 db                	test   ebx,ebx
c0026ada:	0f 95 c0             	setne  al
c0026add:	09 f0                	or     eax,esi
c0026adf:	29 c2                	sub    edx,eax
c0026ae1:	89 d0                	mov    eax,edx
c0026ae3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ae6:	e9 af 00 00 00       	jmp    c0026b9a <__addsf3+0x28c>
c0026aeb:	74 5c                	je     c0026b49 <__addsf3+0x23b>
c0026aed:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026af0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026af3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026af7:	75 14                	jne    c0026b0d <__addsf3+0x1ff>
c0026af9:	85 d2                	test   edx,edx
c0026afb:	0f 84 06 01 00 00    	je     c0026c07 <__addsf3+0x2f9>
c0026b01:	48                   	dec    eax
c0026b02:	75 1b                	jne    c0026b1f <__addsf3+0x211>
c0026b04:	89 d8                	mov    eax,ebx
c0026b06:	29 d0                	sub    eax,edx
c0026b08:	e9 8d 00 00 00       	jmp    c0026b9a <__addsf3+0x28c>
c0026b0d:	89 f1                	mov    ecx,esi
c0026b0f:	f7 d1                	not    ecx
c0026b11:	84 c9                	test   cl,cl
c0026b13:	0f 84 ee 00 00 00    	je     c0026c07 <__addsf3+0x2f9>
c0026b19:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b1f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b22:	83 f8 1f             	cmp    eax,0x1f
c0026b25:	0f 8f dc 00 00 00    	jg     c0026c07 <__addsf3+0x2f9>
c0026b2b:	89 d7                	mov    edi,edx
c0026b2d:	88 c1                	mov    cl,al
c0026b2f:	d3 ef                	shr    edi,cl
c0026b31:	b9 20 00 00 00       	mov    ecx,0x20
c0026b36:	29 c1                	sub    ecx,eax
c0026b38:	d3 e2                	shl    edx,cl
c0026b3a:	31 c0                	xor    eax,eax
c0026b3c:	85 d2                	test   edx,edx
c0026b3e:	0f 95 c0             	setne  al
c0026b41:	09 f8                	or     eax,edi
c0026b43:	29 c3                	sub    ebx,eax
c0026b45:	89 d8                	mov    eax,ebx
c0026b47:	eb 51                	jmp    c0026b9a <__addsf3+0x28c>
c0026b49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026b4c:	40                   	inc    eax
c0026b4d:	a8 fe                	test   al,0xfe
c0026b4f:	75 3d                	jne    c0026b8e <__addsf3+0x280>
c0026b51:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026b55:	0f 85 a7 00 00 00    	jne    c0026c02 <__addsf3+0x2f4>
c0026b5b:	85 d2                	test   edx,edx
c0026b5d:	75 12                	jne    c0026b71 <__addsf3+0x263>
c0026b5f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026b62:	85 db                	test   ebx,ebx
c0026b64:	0f 85 9d 00 00 00    	jne    c0026c07 <__addsf3+0x2f9>
c0026b6a:	31 ff                	xor    edi,edi
c0026b6c:	e9 96 00 00 00       	jmp    c0026c07 <__addsf3+0x2f9>
c0026b71:	85 db                	test   ebx,ebx
c0026b73:	0f 84 8e 00 00 00    	je     c0026c07 <__addsf3+0x2f9>
c0026b79:	89 d0                	mov    eax,edx
c0026b7b:	29 d8                	sub    eax,ebx
c0026b7d:	79 06                	jns    c0026b85 <__addsf3+0x277>
c0026b7f:	89 d8                	mov    eax,ebx
c0026b81:	29 d0                	sub    eax,edx
c0026b83:	eb 5a                	jmp    c0026bdf <__addsf3+0x2d1>
c0026b85:	bf 00 00 00 00       	mov    edi,0x0
c0026b8a:	74 7b                	je     c0026c07 <__addsf3+0x2f9>
c0026b8c:	eb 4a                	jmp    c0026bd8 <__addsf3+0x2ca>
c0026b8e:	89 d0                	mov    eax,edx
c0026b90:	29 d8                	sub    eax,ebx
c0026b92:	79 12                	jns    c0026ba6 <__addsf3+0x298>
c0026b94:	89 d8                	mov    eax,ebx
c0026b96:	29 d0                	sub    eax,edx
c0026b98:	eb 09                	jmp    c0026ba3 <__addsf3+0x295>
c0026b9a:	85 c0                	test   eax,eax
c0026b9c:	79 41                	jns    c0026bdf <__addsf3+0x2d1>
c0026b9e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ba3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026ba6:	31 f6                	xor    esi,esi
c0026ba8:	85 c0                	test   eax,eax
c0026baa:	74 33                	je     c0026bdf <__addsf3+0x2d1>
c0026bac:	0f bd c8             	bsr    ecx,eax
c0026baf:	83 f1 1f             	xor    ecx,0x1f
c0026bb2:	d3 e0                	shl    eax,cl
c0026bb4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026bb8:	39 ca                	cmp    edx,ecx
c0026bba:	7f 10                	jg     c0026bcc <__addsf3+0x2be>
c0026bbc:	29 d1                	sub    ecx,edx
c0026bbe:	41                   	inc    ecx
c0026bbf:	d3 e8                	shr    eax,cl
c0026bc1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bc4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026bca:	eb 13                	jmp    c0026bdf <__addsf3+0x2d1>
c0026bcc:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bcf:	29 ce                	sub    esi,ecx
c0026bd1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026bd6:	eb 07                	jmp    c0026bdf <__addsf3+0x2d1>
c0026bd8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026bdb:	eb 02                	jmp    c0026bdf <__addsf3+0x2d1>
c0026bdd:	31 c0                	xor    eax,eax
c0026bdf:	89 c2                	mov    edx,eax
c0026be1:	c1 ea 08             	shr    edx,0x8
c0026be4:	a8 7f                	test   al,0x7f
c0026be6:	0f 95 c1             	setne  cl
c0026be9:	09 d1                	or     ecx,edx
c0026beb:	83 e1 01             	and    ecx,0x1
c0026bee:	c1 e8 07             	shr    eax,0x7
c0026bf1:	21 c8                	and    eax,ecx
c0026bf3:	c1 e6 17             	shl    esi,0x17
c0026bf6:	09 d6                	or     esi,edx
c0026bf8:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026bfb:	eb 0a                	jmp    c0026c07 <__addsf3+0x2f9>
c0026bfd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026c00:	eb 05                	jmp    c0026c07 <__addsf3+0x2f9>
c0026c02:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026c07:	89 f8                	mov    eax,edi
c0026c09:	5a                   	pop    edx
c0026c0a:	59                   	pop    ecx
c0026c0b:	5b                   	pop    ebx
c0026c0c:	5e                   	pop    esi
c0026c0d:	5f                   	pop    edi
c0026c0e:	5d                   	pop    ebp
c0026c0f:	c3                   	ret    

c0026c10 <__subsf3>:
c0026c10:	55                   	push   ebp
c0026c11:	89 e5                	mov    ebp,esp
c0026c13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c16:	05 00 00 00 80       	add    eax,0x80000000
c0026c1b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026c1e:	5d                   	pop    ebp
c0026c1f:	e9 ea fc ff ff       	jmp    c002690e <__addsf3>

c0026c24 <__negsf2>:
c0026c24:	55                   	push   ebp
c0026c25:	89 e5                	mov    ebp,esp
c0026c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026c2a:	05 00 00 00 80       	add    eax,0x80000000
c0026c2f:	5d                   	pop    ebp
c0026c30:	c3                   	ret    

c0026c31 <__mulsf3>:
c0026c31:	55                   	push   ebp
c0026c32:	89 e5                	mov    ebp,esp
c0026c34:	57                   	push   edi
c0026c35:	56                   	push   esi
c0026c36:	53                   	push   ebx
c0026c37:	83 ec 1c             	sub    esp,0x1c
c0026c3a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026c3d:	89 f0                	mov    eax,esi
c0026c3f:	89 f1                	mov    ecx,esi
c0026c41:	c1 f9 17             	sar    ecx,0x17
c0026c44:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026c47:	c1 e0 08             	shl    eax,0x8
c0026c4a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026c4f:	89 c1                	mov    ecx,eax
c0026c51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c54:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026c57:	89 c7                	mov    edi,eax
c0026c59:	c1 ff 17             	sar    edi,0x17
c0026c5c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026c60:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026c63:	89 f8                	mov    eax,edi
c0026c65:	0f b6 c0             	movzx  eax,al
c0026c68:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026c6b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026c6f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026c72:	42                   	inc    edx
c0026c73:	80 e2 fe             	and    dl,0xfe
c0026c76:	75 7b                	jne    c0026cf3 <__mulsf3+0xc2>
c0026c78:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026c7c:	74 54                	je     c0026cd2 <__mulsf3+0xa1>
c0026c7e:	85 c9                	test   ecx,ecx
c0026c80:	0f 85 64 01 00 00    	jne    c0026dea <__mulsf3+0x1b9>
c0026c86:	8d 57 01             	lea    edx,[edi+0x1]
c0026c89:	80 e2 fe             	and    dl,0xfe
c0026c8c:	75 1f                	jne    c0026cad <__mulsf3+0x7c>
c0026c8e:	85 c0                	test   eax,eax
c0026c90:	b8 00 00 00 00       	mov    eax,0x0
c0026c95:	74 29                	je     c0026cc0 <__mulsf3+0x8f>
c0026c97:	53                   	push   ebx
c0026c98:	53                   	push   ebx
c0026c99:	50                   	push   eax
c0026c9a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c9d:	e8 96 05 00 00       	call   c0027238 <__nesf2>
c0026ca2:	83 c4 10             	add    esp,0x10
c0026ca5:	85 c0                	test   eax,eax
c0026ca7:	0f 85 3a 01 00 00    	jne    c0026de7 <__mulsf3+0x1b6>
c0026cad:	85 ff                	test   edi,edi
c0026caf:	0f 89 35 01 00 00    	jns    c0026dea <__mulsf3+0x1b9>
c0026cb5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026cbb:	e9 2a 01 00 00       	jmp    c0026dea <__mulsf3+0x1b9>
c0026cc0:	51                   	push   ecx
c0026cc1:	51                   	push   ecx
c0026cc2:	50                   	push   eax
c0026cc3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026cc6:	e8 6d 05 00 00       	call   c0027238 <__nesf2>
c0026ccb:	83 c4 10             	add    esp,0x10
c0026cce:	85 c0                	test   eax,eax
c0026cd0:	eb 15                	jmp    c0026ce7 <__mulsf3+0xb6>
c0026cd2:	85 c9                	test   ecx,ecx
c0026cd4:	74 0b                	je     c0026ce1 <__mulsf3+0xb0>
c0026cd6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026cd9:	01 c9                	add    ecx,ecx
c0026cdb:	78 16                	js     c0026cf3 <__mulsf3+0xc2>
c0026cdd:	89 d3                	mov    ebx,edx
c0026cdf:	eb f5                	jmp    c0026cd6 <__mulsf3+0xa5>
c0026ce1:	89 f8                	mov    eax,edi
c0026ce3:	f7 d0                	not    eax
c0026ce5:	84 c0                	test   al,al
c0026ce7:	75 c4                	jne    c0026cad <__mulsf3+0x7c>
c0026ce9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026cee:	e9 f7 00 00 00       	jmp    c0026dea <__mulsf3+0x1b9>
c0026cf3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026cf6:	c1 e6 08             	shl    esi,0x8
c0026cf9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026cff:	8d 57 01             	lea    edx,[edi+0x1]
c0026d02:	80 e2 fe             	and    dl,0xfe
c0026d05:	75 63                	jne    c0026d6a <__mulsf3+0x139>
c0026d07:	85 c0                	test   eax,eax
c0026d09:	74 2f                	je     c0026d3a <__mulsf3+0x109>
c0026d0b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d0f:	0f 89 d2 00 00 00    	jns    c0026de7 <__mulsf3+0x1b6>
c0026d15:	52                   	push   edx
c0026d16:	52                   	push   edx
c0026d17:	6a 00                	push   0x0
c0026d19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d1c:	e8 dc 04 00 00       	call   c00271fd <__eqsf2>
c0026d21:	83 c4 10             	add    esp,0x10
c0026d24:	85 c0                	test   eax,eax
c0026d26:	0f 85 bb 00 00 00    	jne    c0026de7 <__mulsf3+0x1b6>
c0026d2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d2f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026d35:	e9 b0 00 00 00       	jmp    c0026dea <__mulsf3+0x1b9>
c0026d3a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026d3d:	50                   	push   eax
c0026d3e:	50                   	push   eax
c0026d3f:	6a 00                	push   0x0
c0026d41:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d44:	e8 b4 04 00 00       	call   c00271fd <__eqsf2>
c0026d49:	83 c4 10             	add    esp,0x10
c0026d4c:	85 c0                	test   eax,eax
c0026d4e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026d51:	75 0c                	jne    c0026d5f <__mulsf3+0x12e>
c0026d53:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026d57:	0f 89 8a 00 00 00    	jns    c0026de7 <__mulsf3+0x1b6>
c0026d5d:	eb cd                	jmp    c0026d2c <__mulsf3+0xfb>
c0026d5f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026d62:	01 f6                	add    esi,esi
c0026d64:	78 04                	js     c0026d6a <__mulsf3+0x139>
c0026d66:	89 c3                	mov    ebx,eax
c0026d68:	eb f5                	jmp    c0026d5f <__mulsf3+0x12e>
c0026d6a:	89 c8                	mov    eax,ecx
c0026d6c:	0d 00 00 00 80       	or     eax,0x80000000
c0026d71:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026d77:	f7 e6                	mul    esi
c0026d79:	85 c0                	test   eax,eax
c0026d7b:	0f 95 c0             	setne  al
c0026d7e:	0f b6 c0             	movzx  eax,al
c0026d81:	09 c2                	or     edx,eax
c0026d83:	78 03                	js     c0026d88 <__mulsf3+0x157>
c0026d85:	01 d2                	add    edx,edx
c0026d87:	4b                   	dec    ebx
c0026d88:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026d8e:	7f 22                	jg     c0026db2 <__mulsf3+0x181>
c0026d90:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026d96:	85 db                	test   ebx,ebx
c0026d98:	7f 23                	jg     c0026dbd <__mulsf3+0x18c>
c0026d9a:	83 fb e9             	cmp    ebx,0xffffffe9
c0026d9d:	7c 1a                	jl     c0026db9 <__mulsf3+0x188>
c0026d9f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026da5:	b9 01 00 00 00       	mov    ecx,0x1
c0026daa:	29 d9                	sub    ecx,ebx
c0026dac:	d3 ea                	shr    edx,cl
c0026dae:	31 db                	xor    ebx,ebx
c0026db0:	eb 0b                	jmp    c0026dbd <__mulsf3+0x18c>
c0026db2:	bb ff 00 00 00       	mov    ebx,0xff
c0026db7:	eb 02                	jmp    c0026dbb <__mulsf3+0x18a>
c0026db9:	31 db                	xor    ebx,ebx
c0026dbb:	31 d2                	xor    edx,edx
c0026dbd:	89 d0                	mov    eax,edx
c0026dbf:	c1 e8 08             	shr    eax,0x8
c0026dc2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026dc5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026dcb:	09 fb                	or     ebx,edi
c0026dcd:	c1 e3 17             	shl    ebx,0x17
c0026dd0:	09 c3                	or     ebx,eax
c0026dd2:	f6 c2 7f             	test   dl,0x7f
c0026dd5:	0f 95 c1             	setne  cl
c0026dd8:	09 c8                	or     eax,ecx
c0026dda:	83 e0 01             	and    eax,0x1
c0026ddd:	c1 ea 07             	shr    edx,0x7
c0026de0:	21 c2                	and    edx,eax
c0026de2:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026de5:	eb 03                	jmp    c0026dea <__mulsf3+0x1b9>
c0026de7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026dea:	89 f0                	mov    eax,esi
c0026dec:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026def:	5b                   	pop    ebx
c0026df0:	5e                   	pop    esi
c0026df1:	5f                   	pop    edi
c0026df2:	5d                   	pop    ebp
c0026df3:	c3                   	ret    

c0026df4 <__divsf3>:
c0026df4:	55                   	push   ebp
c0026df5:	89 e5                	mov    ebp,esp
c0026df7:	57                   	push   edi
c0026df8:	56                   	push   esi
c0026df9:	53                   	push   ebx
c0026dfa:	83 ec 1c             	sub    esp,0x1c
c0026dfd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026e00:	89 d8                	mov    eax,ebx
c0026e02:	89 d9                	mov    ecx,ebx
c0026e04:	c1 f9 17             	sar    ecx,0x17
c0026e07:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026e0a:	c1 e0 08             	shl    eax,0x8
c0026e0d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026e12:	89 c1                	mov    ecx,eax
c0026e14:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026e17:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026e1a:	89 c7                	mov    edi,eax
c0026e1c:	c1 ff 17             	sar    edi,0x17
c0026e1f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026e23:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026e26:	89 f8                	mov    eax,edi
c0026e28:	0f b6 c0             	movzx  eax,al
c0026e2b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026e2e:	29 c6                	sub    esi,eax
c0026e30:	83 c6 7f             	add    esi,0x7f
c0026e33:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026e36:	42                   	inc    edx
c0026e37:	80 e2 fe             	and    dl,0xfe
c0026e3a:	0f 85 9c 00 00 00    	jne    c0026edc <__divsf3+0xe8>
c0026e40:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026e44:	74 33                	je     c0026e79 <__divsf3+0x85>
c0026e46:	85 c9                	test   ecx,ecx
c0026e48:	0f 85 c7 01 00 00    	jne    c0027015 <__divsf3+0x221>
c0026e4e:	8d 57 01             	lea    edx,[edi+0x1]
c0026e51:	80 e2 fe             	and    dl,0xfe
c0026e54:	75 2f                	jne    c0026e85 <__divsf3+0x91>
c0026e56:	85 c0                	test   eax,eax
c0026e58:	74 2b                	je     c0026e85 <__divsf3+0x91>
c0026e5a:	51                   	push   ecx
c0026e5b:	51                   	push   ecx
c0026e5c:	6a 00                	push   0x0
c0026e5e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e61:	e8 d2 03 00 00       	call   c0027238 <__nesf2>
c0026e66:	83 c4 10             	add    esp,0x10
c0026e69:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026e6c:	85 c0                	test   eax,eax
c0026e6e:	0f 85 a1 01 00 00    	jne    c0027015 <__divsf3+0x221>
c0026e74:	e9 92 01 00 00       	jmp    c002700b <__divsf3+0x217>
c0026e79:	85 c9                	test   ecx,ecx
c0026e7b:	75 1b                	jne    c0026e98 <__divsf3+0xa4>
c0026e7d:	8d 57 01             	lea    edx,[edi+0x1]
c0026e80:	80 e2 fe             	and    dl,0xfe
c0026e83:	74 1e                	je     c0026ea3 <__divsf3+0xaf>
c0026e85:	85 ff                	test   edi,edi
c0026e87:	0f 89 88 01 00 00    	jns    c0027015 <__divsf3+0x221>
c0026e8d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026e93:	e9 7d 01 00 00       	jmp    c0027015 <__divsf3+0x221>
c0026e98:	8d 56 ff             	lea    edx,[esi-0x1]
c0026e9b:	01 c9                	add    ecx,ecx
c0026e9d:	78 3d                	js     c0026edc <__divsf3+0xe8>
c0026e9f:	89 d6                	mov    esi,edx
c0026ea1:	eb f5                	jmp    c0026e98 <__divsf3+0xa4>
c0026ea3:	85 c0                	test   eax,eax
c0026ea5:	b8 00 00 00 00       	mov    eax,0x0
c0026eaa:	74 18                	je     c0026ec4 <__divsf3+0xd0>
c0026eac:	52                   	push   edx
c0026ead:	52                   	push   edx
c0026eae:	50                   	push   eax
c0026eaf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eb2:	e8 81 03 00 00       	call   c0027238 <__nesf2>
c0026eb7:	83 c4 10             	add    esp,0x10
c0026eba:	85 c0                	test   eax,eax
c0026ebc:	0f 85 50 01 00 00    	jne    c0027012 <__divsf3+0x21e>
c0026ec2:	eb c1                	jmp    c0026e85 <__divsf3+0x91>
c0026ec4:	56                   	push   esi
c0026ec5:	56                   	push   esi
c0026ec6:	50                   	push   eax
c0026ec7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eca:	e8 69 03 00 00       	call   c0027238 <__nesf2>
c0026ecf:	83 c4 10             	add    esp,0x10
c0026ed2:	85 c0                	test   eax,eax
c0026ed4:	0f 84 31 01 00 00    	je     c002700b <__divsf3+0x217>
c0026eda:	eb a9                	jmp    c0026e85 <__divsf3+0x91>
c0026edc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026edf:	c1 e3 08             	shl    ebx,0x8
c0026ee2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026ee8:	8d 57 01             	lea    edx,[edi+0x1]
c0026eeb:	80 e2 fe             	and    dl,0xfe
c0026eee:	75 71                	jne    c0026f61 <__divsf3+0x16d>
c0026ef0:	85 c0                	test   eax,eax
c0026ef2:	ba 00 00 00 00       	mov    edx,0x0
c0026ef7:	74 2f                	je     c0026f28 <__divsf3+0x134>
c0026ef9:	51                   	push   ecx
c0026efa:	51                   	push   ecx
c0026efb:	52                   	push   edx
c0026efc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eff:	e8 f9 02 00 00       	call   c00271fd <__eqsf2>
c0026f04:	83 c4 10             	add    esp,0x10
c0026f07:	85 c0                	test   eax,eax
c0026f09:	0f 85 03 01 00 00    	jne    c0027012 <__divsf3+0x21e>
c0026f0f:	31 d2                	xor    edx,edx
c0026f11:	89 d3                	mov    ebx,edx
c0026f13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026f16:	31 f8                	xor    eax,edi
c0026f18:	0f 89 f7 00 00 00    	jns    c0027015 <__divsf3+0x221>
c0026f1e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026f23:	e9 ed 00 00 00       	jmp    c0027015 <__divsf3+0x221>
c0026f28:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026f2b:	50                   	push   eax
c0026f2c:	50                   	push   eax
c0026f2d:	52                   	push   edx
c0026f2e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026f31:	e8 c7 02 00 00       	call   c00271fd <__eqsf2>
c0026f36:	83 c4 10             	add    esp,0x10
c0026f39:	85 c0                	test   eax,eax
c0026f3b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026f3e:	75 16                	jne    c0026f56 <__divsf3+0x162>
c0026f40:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026f43:	31 fb                	xor    ebx,edi
c0026f45:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026f4b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026f51:	e9 bf 00 00 00       	jmp    c0027015 <__divsf3+0x221>
c0026f56:	8d 46 01             	lea    eax,[esi+0x1]
c0026f59:	01 db                	add    ebx,ebx
c0026f5b:	78 04                	js     c0026f61 <__divsf3+0x16d>
c0026f5d:	89 c6                	mov    esi,eax
c0026f5f:	eb f5                	jmp    c0026f56 <__divsf3+0x162>
c0026f61:	89 c8                	mov    eax,ecx
c0026f63:	0d 00 00 00 80       	or     eax,0x80000000
c0026f68:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026f6e:	31 d2                	xor    edx,edx
c0026f70:	39 d8                	cmp    eax,ebx
c0026f72:	72 07                	jb     c0026f7b <__divsf3+0x187>
c0026f74:	29 d8                	sub    eax,ebx
c0026f76:	ba 01 00 00 00       	mov    edx,0x1
c0026f7b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026f82:	01 d2                	add    edx,edx
c0026f84:	89 c1                	mov    ecx,eax
c0026f86:	01 c0                	add    eax,eax
c0026f88:	85 c9                	test   ecx,ecx
c0026f8a:	78 04                	js     c0026f90 <__divsf3+0x19c>
c0026f8c:	39 c3                	cmp    ebx,eax
c0026f8e:	77 05                	ja     c0026f95 <__divsf3+0x1a1>
c0026f90:	29 d8                	sub    eax,ebx
c0026f92:	83 ca 01             	or     edx,0x1
c0026f95:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026f98:	75 e8                	jne    c0026f82 <__divsf3+0x18e>
c0026f9a:	85 c0                	test   eax,eax
c0026f9c:	0f 95 c0             	setne  al
c0026f9f:	0f b6 c0             	movzx  eax,al
c0026fa2:	c1 e2 06             	shl    edx,0x6
c0026fa5:	09 c2                	or     edx,eax
c0026fa7:	78 03                	js     c0026fac <__divsf3+0x1b8>
c0026fa9:	01 d2                	add    edx,edx
c0026fab:	4e                   	dec    esi
c0026fac:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026fb2:	7f 22                	jg     c0026fd6 <__divsf3+0x1e2>
c0026fb4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026fba:	85 f6                	test   esi,esi
c0026fbc:	7f 23                	jg     c0026fe1 <__divsf3+0x1ed>
c0026fbe:	83 fe e9             	cmp    esi,0xffffffe9
c0026fc1:	7c 1a                	jl     c0026fdd <__divsf3+0x1e9>
c0026fc3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026fc9:	b9 01 00 00 00       	mov    ecx,0x1
c0026fce:	29 f1                	sub    ecx,esi
c0026fd0:	d3 ea                	shr    edx,cl
c0026fd2:	31 f6                	xor    esi,esi
c0026fd4:	eb 0b                	jmp    c0026fe1 <__divsf3+0x1ed>
c0026fd6:	be ff 00 00 00       	mov    esi,0xff
c0026fdb:	eb 02                	jmp    c0026fdf <__divsf3+0x1eb>
c0026fdd:	31 f6                	xor    esi,esi
c0026fdf:	31 d2                	xor    edx,edx
c0026fe1:	89 d0                	mov    eax,edx
c0026fe3:	c1 e8 08             	shr    eax,0x8
c0026fe6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026fe9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026fef:	09 fe                	or     esi,edi
c0026ff1:	c1 e6 17             	shl    esi,0x17
c0026ff4:	09 c6                	or     esi,eax
c0026ff6:	f6 c2 7f             	test   dl,0x7f
c0026ff9:	0f 95 c1             	setne  cl
c0026ffc:	09 c8                	or     eax,ecx
c0026ffe:	83 e0 01             	and    eax,0x1
c0027001:	c1 ea 07             	shr    edx,0x7
c0027004:	21 c2                	and    edx,eax
c0027006:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027009:	eb 0a                	jmp    c0027015 <__divsf3+0x221>
c002700b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027010:	eb 03                	jmp    c0027015 <__divsf3+0x221>
c0027012:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027015:	89 d8                	mov    eax,ebx
c0027017:	8d 65 f4             	lea    esp,[ebp-0xc]
c002701a:	5b                   	pop    ebx
c002701b:	5e                   	pop    esi
c002701c:	5f                   	pop    edi
c002701d:	5d                   	pop    ebp
c002701e:	c3                   	ret    

c002701f <__floatsisf>:
c002701f:	55                   	push   ebp
c0027020:	89 e5                	mov    ebp,esp
c0027022:	53                   	push   ebx
c0027023:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027026:	85 d2                	test   edx,edx
c0027028:	7e 2b                	jle    c0027055 <__floatsisf+0x36>
c002702a:	0f bd ca             	bsr    ecx,edx
c002702d:	83 f1 1f             	xor    ecx,0x1f
c0027030:	d3 e2                	shl    edx,cl
c0027032:	89 d0                	mov    eax,edx
c0027034:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027039:	89 c3                	mov    ebx,eax
c002703b:	c1 eb 08             	shr    ebx,0x8
c002703e:	80 e2 7f             	and    dl,0x7f
c0027041:	0f 95 c2             	setne  dl
c0027044:	09 da                	or     edx,ebx
c0027046:	83 e2 01             	and    edx,0x1
c0027049:	c1 e8 07             	shr    eax,0x7
c002704c:	21 c2                	and    edx,eax
c002704e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027053:	eb 32                	jmp    c0027087 <__floatsisf+0x68>
c0027055:	b8 00 00 00 00       	mov    eax,0x0
c002705a:	74 34                	je     c0027090 <__floatsisf+0x71>
c002705c:	f7 da                	neg    edx
c002705e:	0f bd ca             	bsr    ecx,edx
c0027061:	83 f1 1f             	xor    ecx,0x1f
c0027064:	d3 e2                	shl    edx,cl
c0027066:	89 d0                	mov    eax,edx
c0027068:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002706d:	89 c3                	mov    ebx,eax
c002706f:	c1 eb 08             	shr    ebx,0x8
c0027072:	80 e2 7f             	and    dl,0x7f
c0027075:	0f 95 c2             	setne  dl
c0027078:	09 da                	or     edx,ebx
c002707a:	83 e2 01             	and    edx,0x1
c002707d:	c1 e8 07             	shr    eax,0x7
c0027080:	21 c2                	and    edx,eax
c0027082:	b8 9e 01 00 00       	mov    eax,0x19e
c0027087:	29 c8                	sub    eax,ecx
c0027089:	c1 e0 17             	shl    eax,0x17
c002708c:	09 d8                	or     eax,ebx
c002708e:	01 d0                	add    eax,edx
c0027090:	5b                   	pop    ebx
c0027091:	5d                   	pop    ebp
c0027092:	c3                   	ret    

c0027093 <__floatunsisf>:
c0027093:	55                   	push   ebp
c0027094:	89 e5                	mov    ebp,esp
c0027096:	53                   	push   ebx
c0027097:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002709a:	31 c0                	xor    eax,eax
c002709c:	85 d2                	test   edx,edx
c002709e:	74 32                	je     c00270d2 <__floatunsisf+0x3f>
c00270a0:	0f bd ca             	bsr    ecx,edx
c00270a3:	83 f1 1f             	xor    ecx,0x1f
c00270a6:	d3 e2                	shl    edx,cl
c00270a8:	89 d0                	mov    eax,edx
c00270aa:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00270af:	89 c3                	mov    ebx,eax
c00270b1:	c1 eb 08             	shr    ebx,0x8
c00270b4:	80 e2 7f             	and    dl,0x7f
c00270b7:	0f 95 c2             	setne  dl
c00270ba:	09 da                	or     edx,ebx
c00270bc:	83 e2 01             	and    edx,0x1
c00270bf:	c1 e8 07             	shr    eax,0x7
c00270c2:	21 c2                	and    edx,eax
c00270c4:	b8 9e 00 00 00       	mov    eax,0x9e
c00270c9:	29 c8                	sub    eax,ecx
c00270cb:	c1 e0 17             	shl    eax,0x17
c00270ce:	09 d8                	or     eax,ebx
c00270d0:	01 d0                	add    eax,edx
c00270d2:	5b                   	pop    ebx
c00270d3:	5d                   	pop    ebp
c00270d4:	c3                   	ret    

c00270d5 <__fixsfsi>:
c00270d5:	55                   	push   ebp
c00270d6:	89 e5                	mov    ebp,esp
c00270d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00270db:	89 d1                	mov    ecx,edx
c00270dd:	c1 e1 08             	shl    ecx,0x8
c00270e0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c00270e6:	c1 fa 17             	sar    edx,0x17
c00270e9:	78 1c                	js     c0027107 <__fixsfsi+0x32>
c00270eb:	83 ea 7f             	sub    edx,0x7f
c00270ee:	31 c0                	xor    eax,eax
c00270f0:	83 fa 1e             	cmp    edx,0x1e
c00270f3:	77 40                	ja     c0027135 <__fixsfsi+0x60>
c00270f5:	89 c8                	mov    eax,ecx
c00270f7:	0d 00 00 00 80       	or     eax,0x80000000
c00270fc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027101:	29 d1                	sub    ecx,edx
c0027103:	d3 e8                	shr    eax,cl
c0027105:	eb 2e                	jmp    c0027135 <__fixsfsi+0x60>
c0027107:	31 c0                	xor    eax,eax
c0027109:	81 c2 81 00 00 00    	add    edx,0x81
c002710f:	78 24                	js     c0027135 <__fixsfsi+0x60>
c0027111:	83 fa 1e             	cmp    edx,0x1e
c0027114:	7e 09                	jle    c002711f <__fixsfsi+0x4a>
c0027116:	83 fa 1f             	cmp    edx,0x1f
c0027119:	75 18                	jne    c0027133 <__fixsfsi+0x5e>
c002711b:	85 c9                	test   ecx,ecx
c002711d:	75 14                	jne    c0027133 <__fixsfsi+0x5e>
c002711f:	89 c8                	mov    eax,ecx
c0027121:	0d 00 00 00 80       	or     eax,0x80000000
c0027126:	b9 1f 00 00 00       	mov    ecx,0x1f
c002712b:	29 d1                	sub    ecx,edx
c002712d:	d3 e8                	shr    eax,cl
c002712f:	f7 d8                	neg    eax
c0027131:	eb 02                	jmp    c0027135 <__fixsfsi+0x60>
c0027133:	31 c0                	xor    eax,eax
c0027135:	5d                   	pop    ebp
c0027136:	c3                   	ret    

c0027137 <__fixunssfsi>:
c0027137:	55                   	push   ebp
c0027138:	89 e5                	mov    ebp,esp
c002713a:	53                   	push   ebx
c002713b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002713e:	89 d3                	mov    ebx,edx
c0027140:	c1 fb 17             	sar    ebx,0x17
c0027143:	83 eb 7f             	sub    ebx,0x7f
c0027146:	31 c0                	xor    eax,eax
c0027148:	83 fb 1f             	cmp    ebx,0x1f
c002714b:	77 18                	ja     c0027165 <__fixunssfsi+0x2e>
c002714d:	89 d0                	mov    eax,edx
c002714f:	c1 e0 08             	shl    eax,0x8
c0027152:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027157:	0d 00 00 00 80       	or     eax,0x80000000
c002715c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027161:	29 d9                	sub    ecx,ebx
c0027163:	d3 e8                	shr    eax,cl
c0027165:	5b                   	pop    ebx
c0027166:	5d                   	pop    ebp
c0027167:	c3                   	ret    

c0027168 <__cmpsf2>:
c0027168:	55                   	push   ebp
c0027169:	89 e5                	mov    ebp,esp
c002716b:	57                   	push   edi
c002716c:	56                   	push   esi
c002716d:	53                   	push   ebx
c002716e:	83 ec 24             	sub    esp,0x24
c0027171:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027174:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027177:	e8 4f 10 00 00       	call   c00281cb <__truncdfsf2>
c002717c:	5a                   	pop    edx
c002717d:	59                   	pop    ecx
c002717e:	89 c3                	mov    ebx,eax
c0027180:	c1 e8 17             	shr    eax,0x17
c0027183:	0f b6 f0             	movzx  esi,al
c0027186:	89 d8                	mov    eax,ebx
c0027188:	c1 e8 1f             	shr    eax,0x1f
c002718b:	31 c6                	xor    esi,eax
c002718d:	c1 e3 08             	shl    ebx,0x8
c0027190:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027193:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027196:	e8 30 10 00 00       	call   c00281cb <__truncdfsf2>
c002719b:	83 c4 10             	add    esp,0x10
c002719e:	89 c1                	mov    ecx,eax
c00271a0:	c1 e9 17             	shr    ecx,0x17
c00271a3:	0f b6 c9             	movzx  ecx,cl
c00271a6:	89 c7                	mov    edi,eax
c00271a8:	c1 ef 1f             	shr    edi,0x1f
c00271ab:	89 ca                	mov    edx,ecx
c00271ad:	31 fa                	xor    edx,edi
c00271af:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00271b2:	c1 e0 08             	shl    eax,0x8
c00271b5:	89 c2                	mov    edx,eax
c00271b7:	89 d8                	mov    eax,ebx
c00271b9:	09 d0                	or     eax,edx
c00271bb:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00271c0:	09 f0                	or     eax,esi
c00271c2:	75 08                	jne    c00271cc <__cmpsf2+0x64>
c00271c4:	31 c0                	xor    eax,eax
c00271c6:	39 f9                	cmp    ecx,edi
c00271c8:	75 0c                	jne    c00271d6 <__cmpsf2+0x6e>
c00271ca:	eb 29                	jmp    c00271f5 <__cmpsf2+0x8d>
c00271cc:	b8 01 00 00 00       	mov    eax,0x1
c00271d1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271d4:	7f 1f                	jg     c00271f5 <__cmpsf2+0x8d>
c00271d6:	83 c8 ff             	or     eax,0xffffffff
c00271d9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00271dc:	7c 17                	jl     c00271f5 <__cmpsf2+0x8d>
c00271de:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00271e4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00271ea:	b8 01 00 00 00       	mov    eax,0x1
c00271ef:	39 d3                	cmp    ebx,edx
c00271f1:	77 02                	ja     c00271f5 <__cmpsf2+0x8d>
c00271f3:	19 c0                	sbb    eax,eax
c00271f5:	8d 65 f4             	lea    esp,[ebp-0xc]
c00271f8:	5b                   	pop    ebx
c00271f9:	5e                   	pop    esi
c00271fa:	5f                   	pop    edi
c00271fb:	5d                   	pop    ebp
c00271fc:	c3                   	ret    

c00271fd <__eqsf2>:
c00271fd:	55                   	push   ebp
c00271fe:	89 e5                	mov    ebp,esp
c0027200:	83 ec 24             	sub    esp,0x24
c0027203:	6a 01                	push   0x1
c0027205:	83 ec 0c             	sub    esp,0xc
c0027208:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002720b:	e8 df 10 00 00       	call   c00282ef <__extendsfdf2>
c0027210:	83 c4 10             	add    esp,0x10
c0027213:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027216:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027219:	52                   	push   edx
c002721a:	50                   	push   eax
c002721b:	50                   	push   eax
c002721c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002721f:	e8 cb 10 00 00       	call   c00282ef <__extendsfdf2>
c0027224:	59                   	pop    ecx
c0027225:	59                   	pop    ecx
c0027226:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027229:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002722c:	52                   	push   edx
c002722d:	50                   	push   eax
c002722e:	e8 35 ff ff ff       	call   c0027168 <__cmpsf2>
c0027233:	83 c4 20             	add    esp,0x20
c0027236:	c9                   	leave  
c0027237:	c3                   	ret    

c0027238 <__nesf2>:
c0027238:	eb c3                	jmp    c00271fd <__eqsf2>

c002723a <__gtsf2>:
c002723a:	55                   	push   ebp
c002723b:	89 e5                	mov    ebp,esp
c002723d:	83 ec 24             	sub    esp,0x24
c0027240:	6a ff                	push   0xffffffff
c0027242:	83 ec 0c             	sub    esp,0xc
c0027245:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027248:	e8 a2 10 00 00       	call   c00282ef <__extendsfdf2>
c002724d:	83 c4 10             	add    esp,0x10
c0027250:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027253:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027256:	52                   	push   edx
c0027257:	50                   	push   eax
c0027258:	50                   	push   eax
c0027259:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002725c:	e8 8e 10 00 00       	call   c00282ef <__extendsfdf2>
c0027261:	59                   	pop    ecx
c0027262:	59                   	pop    ecx
c0027263:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027266:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027269:	52                   	push   edx
c002726a:	50                   	push   eax
c002726b:	e8 f8 fe ff ff       	call   c0027168 <__cmpsf2>
c0027270:	83 c4 20             	add    esp,0x20
c0027273:	c9                   	leave  
c0027274:	c3                   	ret    

c0027275 <__gesf2>:
c0027275:	eb c3                	jmp    c002723a <__gtsf2>

c0027277 <__ltsf2>:
c0027277:	eb 84                	jmp    c00271fd <__eqsf2>

c0027279 <__lesf2>:
c0027279:	eb 82                	jmp    c00271fd <__eqsf2>

c002727b <__adddf3>:
c002727b:	55                   	push   ebp
c002727c:	89 e5                	mov    ebp,esp
c002727e:	57                   	push   edi
c002727f:	56                   	push   esi
c0027280:	53                   	push   ebx
c0027281:	83 ec 24             	sub    esp,0x24
c0027284:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027287:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002728a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002728d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027290:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027293:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027296:	89 c8                	mov    eax,ecx
c0027298:	89 ce                	mov    esi,ecx
c002729a:	c1 fe 14             	sar    esi,0x14
c002729d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00272a0:	89 fb                	mov    ebx,edi
c00272a2:	89 fa                	mov    edx,edi
c00272a4:	c1 e2 0b             	shl    edx,0xb
c00272a7:	c1 e0 0b             	shl    eax,0xb
c00272aa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00272af:	c1 eb 15             	shr    ebx,0x15
c00272b2:	09 d8                	or     eax,ebx
c00272b4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00272b7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00272ba:	c1 fe 14             	sar    esi,0x14
c00272bd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00272c0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00272c3:	89 f3                	mov    ebx,esi
c00272c5:	c1 e3 0b             	shl    ebx,0xb
c00272c8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00272cb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00272ce:	c1 e3 0b             	shl    ebx,0xb
c00272d1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00272d7:	c1 ee 15             	shr    esi,0x15
c00272da:	09 f3                	or     ebx,esi
c00272dc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00272df:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00272e2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00272e5:	0f 88 5f 02 00 00    	js     c002754a <__adddf3+0x2cf>
c00272eb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272ee:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00272f1:	85 db                	test   ebx,ebx
c00272f3:	0f 8e c7 00 00 00    	jle    c00273c0 <__adddf3+0x145>
c00272f9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027300:	75 1a                	jne    c002731c <__adddf3+0xa1>
c0027302:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027305:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027308:	0f 84 b2 05 00 00    	je     c00278c0 <__adddf3+0x645>
c002730e:	4b                   	dec    ebx
c002730f:	75 23                	jne    c0027334 <__adddf3+0xb9>
c0027311:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027314:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027317:	e9 99 00 00 00       	jmp    c00273b5 <__adddf3+0x13a>
c002731c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002731f:	f7 d6                	not    esi
c0027321:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027327:	0f 84 93 05 00 00    	je     c00278c0 <__adddf3+0x645>
c002732d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027334:	83 fb 1f             	cmp    ebx,0x1f
c0027337:	7e 42                	jle    c002737b <__adddf3+0x100>
c0027339:	83 fb 3f             	cmp    ebx,0x3f
c002733c:	0f 8f 7e 05 00 00    	jg     c00278c0 <__adddf3+0x645>
c0027342:	83 e3 1f             	and    ebx,0x1f
c0027345:	89 d9                	mov    ecx,ebx
c0027347:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002734a:	d3 ef                	shr    edi,cl
c002734c:	31 db                	xor    ebx,ebx
c002734e:	85 c9                	test   ecx,ecx
c0027350:	74 15                	je     c0027367 <__adddf3+0xec>
c0027352:	be 20 00 00 00       	mov    esi,0x20
c0027357:	29 ce                	sub    esi,ecx
c0027359:	89 f1                	mov    ecx,esi
c002735b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002735e:	d3 e6                	shl    esi,cl
c0027360:	31 db                	xor    ebx,ebx
c0027362:	85 f6                	test   esi,esi
c0027364:	0f 95 c3             	setne  bl
c0027367:	31 c9                	xor    ecx,ecx
c0027369:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002736d:	0f 95 c1             	setne  cl
c0027370:	09 cf                	or     edi,ecx
c0027372:	09 fb                	or     ebx,edi
c0027374:	01 da                	add    edx,ebx
c0027376:	83 d0 00             	adc    eax,0x0
c0027379:	eb 3a                	jmp    c00273b5 <__adddf3+0x13a>
c002737b:	bf 20 00 00 00       	mov    edi,0x20
c0027380:	29 df                	sub    edi,ebx
c0027382:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027385:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027388:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002738b:	d3 e6                	shl    esi,cl
c002738d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027390:	88 d9                	mov    cl,bl
c0027392:	d3 ef                	shr    edi,cl
c0027394:	09 fe                	or     esi,edi
c0027396:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027399:	88 d9                	mov    cl,bl
c002739b:	d3 ef                	shr    edi,cl
c002739d:	89 fb                	mov    ebx,edi
c002739f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00273a2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00273a5:	d3 e7                	shl    edi,cl
c00273a7:	85 ff                	test   edi,edi
c00273a9:	0f 95 c1             	setne  cl
c00273ac:	0f b6 c9             	movzx  ecx,cl
c00273af:	09 ce                	or     esi,ecx
c00273b1:	01 f2                	add    edx,esi
c00273b3:	11 d8                	adc    eax,ebx
c00273b5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00273b8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00273bb:	e9 52 01 00 00       	jmp    c0027512 <__adddf3+0x297>
c00273c0:	0f 84 d5 00 00 00    	je     c002749b <__adddf3+0x220>
c00273c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00273c9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00273cc:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00273cf:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00273d2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273d9:	75 20                	jne    c00273fb <__adddf3+0x180>
c00273db:	89 d6                	mov    esi,edx
c00273dd:	09 c6                	or     esi,eax
c00273df:	0f 84 db 04 00 00    	je     c00278c0 <__adddf3+0x645>
c00273e5:	4b                   	dec    ebx
c00273e6:	75 29                	jne    c0027411 <__adddf3+0x196>
c00273e8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00273eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00273ee:	01 d1                	add    ecx,edx
c00273f0:	11 c6                	adc    esi,eax
c00273f2:	89 f0                	mov    eax,esi
c00273f4:	89 ca                	mov    edx,ecx
c00273f6:	e9 17 01 00 00       	jmp    c0027512 <__adddf3+0x297>
c00273fb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00273fe:	f7 d6                	not    esi
c0027400:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027406:	0f 84 b4 04 00 00    	je     c00278c0 <__adddf3+0x645>
c002740c:	0d 00 00 00 80       	or     eax,0x80000000
c0027411:	83 fb 1f             	cmp    ebx,0x1f
c0027414:	7e 48                	jle    c002745e <__adddf3+0x1e3>
c0027416:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027419:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002741c:	83 fb 3f             	cmp    ebx,0x3f
c002741f:	0f 8f 9b 04 00 00    	jg     c00278c0 <__adddf3+0x645>
c0027425:	83 e3 1f             	and    ebx,0x1f
c0027428:	89 d9                	mov    ecx,ebx
c002742a:	89 c7                	mov    edi,eax
c002742c:	d3 ef                	shr    edi,cl
c002742e:	31 db                	xor    ebx,ebx
c0027430:	85 c9                	test   ecx,ecx
c0027432:	74 12                	je     c0027446 <__adddf3+0x1cb>
c0027434:	be 20 00 00 00       	mov    esi,0x20
c0027439:	29 ce                	sub    esi,ecx
c002743b:	89 f1                	mov    ecx,esi
c002743d:	d3 e0                	shl    eax,cl
c002743f:	31 db                	xor    ebx,ebx
c0027441:	85 c0                	test   eax,eax
c0027443:	0f 95 c3             	setne  bl
c0027446:	31 c0                	xor    eax,eax
c0027448:	85 d2                	test   edx,edx
c002744a:	0f 95 c0             	setne  al
c002744d:	09 c7                	or     edi,eax
c002744f:	09 fb                	or     ebx,edi
c0027451:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027454:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027457:	01 da                	add    edx,ebx
c0027459:	83 d6 00             	adc    esi,0x0
c002745c:	eb 39                	jmp    c0027497 <__adddf3+0x21c>
c002745e:	be 20 00 00 00       	mov    esi,0x20
c0027463:	29 de                	sub    esi,ebx
c0027465:	89 c7                	mov    edi,eax
c0027467:	89 f1                	mov    ecx,esi
c0027469:	d3 e7                	shl    edi,cl
c002746b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002746e:	89 d7                	mov    edi,edx
c0027470:	88 d9                	mov    cl,bl
c0027472:	d3 ef                	shr    edi,cl
c0027474:	89 f9                	mov    ecx,edi
c0027476:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027479:	09 cf                	or     edi,ecx
c002747b:	88 d9                	mov    cl,bl
c002747d:	d3 e8                	shr    eax,cl
c002747f:	89 f1                	mov    ecx,esi
c0027481:	d3 e2                	shl    edx,cl
c0027483:	85 d2                	test   edx,edx
c0027485:	0f 95 c2             	setne  dl
c0027488:	0f b6 d2             	movzx  edx,dl
c002748b:	09 d7                	or     edi,edx
c002748d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027490:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027493:	01 fa                	add    edx,edi
c0027495:	11 c6                	adc    esi,eax
c0027497:	89 f0                	mov    eax,esi
c0027499:	eb 77                	jmp    c0027512 <__adddf3+0x297>
c002749b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002749e:	46                   	inc    esi
c002749f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00274a2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00274a8:	75 41                	jne    c00274eb <__adddf3+0x270>
c00274aa:	89 d3                	mov    ebx,edx
c00274ac:	09 c3                	or     ebx,eax
c00274ae:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00274b5:	75 27                	jne    c00274de <__adddf3+0x263>
c00274b7:	85 db                	test   ebx,ebx
c00274b9:	0f 84 fb 03 00 00    	je     c00278ba <__adddf3+0x63f>
c00274bf:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00274c2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00274c5:	0f 84 f5 03 00 00    	je     c00278c0 <__adddf3+0x645>
c00274cb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274ce:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274d1:	85 c0                	test   eax,eax
c00274d3:	0f 89 91 03 00 00    	jns    c002786a <__adddf3+0x5ef>
c00274d9:	e9 85 03 00 00       	jmp    c0027863 <__adddf3+0x5e8>
c00274de:	85 db                	test   ebx,ebx
c00274e0:	0f 85 da 03 00 00    	jne    c00278c0 <__adddf3+0x645>
c00274e6:	e9 cf 03 00 00       	jmp    c00278ba <__adddf3+0x63f>
c00274eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00274ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00274f1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00274f4:	f7 d1                	not    ecx
c00274f6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00274fc:	0f 84 70 03 00 00    	je     c0027872 <__adddf3+0x5f7>
c0027502:	d1 ea                	shr    edx,1
c0027504:	89 c1                	mov    ecx,eax
c0027506:	c1 e1 1f             	shl    ecx,0x1f
c0027509:	09 ca                	or     edx,ecx
c002750b:	d1 e8                	shr    eax,1
c002750d:	e9 6f 03 00 00       	jmp    c0027881 <__adddf3+0x606>
c0027512:	85 c0                	test   eax,eax
c0027514:	0f 89 67 03 00 00    	jns    c0027881 <__adddf3+0x606>
c002751a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002751d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027520:	f7 d1                	not    ecx
c0027522:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027528:	0f 84 44 03 00 00    	je     c0027872 <__adddf3+0x5f7>
c002752e:	89 d1                	mov    ecx,edx
c0027530:	d1 e9                	shr    ecx,1
c0027532:	83 e2 01             	and    edx,0x1
c0027535:	09 ca                	or     edx,ecx
c0027537:	89 c1                	mov    ecx,eax
c0027539:	c1 e1 1f             	shl    ecx,0x1f
c002753c:	09 ca                	or     edx,ecx
c002753e:	d1 e8                	shr    eax,1
c0027540:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027545:	e9 37 03 00 00       	jmp    c0027881 <__adddf3+0x606>
c002754a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002754d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027553:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0027556:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027559:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002755f:	29 de                	sub    esi,ebx
c0027561:	85 f6                	test   esi,esi
c0027563:	0f 8e bd 00 00 00    	jle    c0027626 <__adddf3+0x3ab>
c0027569:	85 db                	test   ebx,ebx
c002756b:	75 17                	jne    c0027584 <__adddf3+0x309>
c002756d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027570:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027573:	0f 84 47 03 00 00    	je     c00278c0 <__adddf3+0x645>
c0027579:	4e                   	dec    esi
c002757a:	75 20                	jne    c002759c <__adddf3+0x321>
c002757c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002757f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027582:	eb 5b                	jmp    c00275df <__adddf3+0x364>
c0027584:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027587:	f7 d3                	not    ebx
c0027589:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002758f:	0f 84 2b 03 00 00    	je     c00278c0 <__adddf3+0x645>
c0027595:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002759c:	83 fe 1f             	cmp    esi,0x1f
c002759f:	7e 49                	jle    c00275ea <__adddf3+0x36f>
c00275a1:	83 fe 3f             	cmp    esi,0x3f
c00275a4:	0f 8f 16 03 00 00    	jg     c00278c0 <__adddf3+0x645>
c00275aa:	83 e6 1f             	and    esi,0x1f
c00275ad:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00275b0:	89 f1                	mov    ecx,esi
c00275b2:	d3 ef                	shr    edi,cl
c00275b4:	31 db                	xor    ebx,ebx
c00275b6:	85 f6                	test   esi,esi
c00275b8:	74 13                	je     c00275cd <__adddf3+0x352>
c00275ba:	b9 20 00 00 00       	mov    ecx,0x20
c00275bf:	29 f1                	sub    ecx,esi
c00275c1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275c4:	d3 e6                	shl    esi,cl
c00275c6:	31 db                	xor    ebx,ebx
c00275c8:	85 f6                	test   esi,esi
c00275ca:	0f 95 c3             	setne  bl
c00275cd:	31 c9                	xor    ecx,ecx
c00275cf:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00275d3:	0f 95 c1             	setne  cl
c00275d6:	09 cf                	or     edi,ecx
c00275d8:	09 fb                	or     ebx,edi
c00275da:	29 da                	sub    edx,ebx
c00275dc:	83 d8 00             	sbb    eax,0x0
c00275df:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275e2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275e5:	e9 aa 01 00 00       	jmp    c0027794 <__adddf3+0x519>
c00275ea:	bf 20 00 00 00       	mov    edi,0x20
c00275ef:	29 f7                	sub    edi,esi
c00275f1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00275f4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00275f7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00275fa:	d3 e3                	shl    ebx,cl
c00275fc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00275ff:	89 f1                	mov    ecx,esi
c0027601:	d3 ef                	shr    edi,cl
c0027603:	09 fb                	or     ebx,edi
c0027605:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027608:	89 f1                	mov    ecx,esi
c002760a:	d3 ef                	shr    edi,cl
c002760c:	89 fe                	mov    esi,edi
c002760e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027611:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027614:	d3 e7                	shl    edi,cl
c0027616:	85 ff                	test   edi,edi
c0027618:	0f 95 c1             	setne  cl
c002761b:	0f b6 c9             	movzx  ecx,cl
c002761e:	09 cb                	or     ebx,ecx
c0027620:	29 da                	sub    edx,ebx
c0027622:	19 f0                	sbb    eax,esi
c0027624:	eb b9                	jmp    c00275df <__adddf3+0x364>
c0027626:	0f 84 cd 00 00 00    	je     c00276f9 <__adddf3+0x47e>
c002762c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002762f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027632:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027635:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027639:	75 1b                	jne    c0027656 <__adddf3+0x3db>
c002763b:	89 d6                	mov    esi,edx
c002763d:	09 c6                	or     esi,eax
c002763f:	0f 84 7b 02 00 00    	je     c00278c0 <__adddf3+0x645>
c0027645:	4b                   	dec    ebx
c0027646:	75 24                	jne    c002766c <__adddf3+0x3f1>
c0027648:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002764b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002764e:	29 d1                	sub    ecx,edx
c0027650:	19 c6                	sbb    esi,eax
c0027652:	89 ca                	mov    edx,ecx
c0027654:	eb 61                	jmp    c00276b7 <__adddf3+0x43c>
c0027656:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027659:	f7 d6                	not    esi
c002765b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027661:	0f 84 59 02 00 00    	je     c00278c0 <__adddf3+0x645>
c0027667:	0d 00 00 00 80       	or     eax,0x80000000
c002766c:	83 fb 1f             	cmp    ebx,0x1f
c002766f:	7e 4d                	jle    c00276be <__adddf3+0x443>
c0027671:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027674:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027677:	83 fb 3f             	cmp    ebx,0x3f
c002767a:	0f 8f 40 02 00 00    	jg     c00278c0 <__adddf3+0x645>
c0027680:	83 e3 1f             	and    ebx,0x1f
c0027683:	89 d9                	mov    ecx,ebx
c0027685:	89 c7                	mov    edi,eax
c0027687:	d3 ef                	shr    edi,cl
c0027689:	31 db                	xor    ebx,ebx
c002768b:	85 c9                	test   ecx,ecx
c002768d:	74 12                	je     c00276a1 <__adddf3+0x426>
c002768f:	be 20 00 00 00       	mov    esi,0x20
c0027694:	29 ce                	sub    esi,ecx
c0027696:	89 f1                	mov    ecx,esi
c0027698:	d3 e0                	shl    eax,cl
c002769a:	31 db                	xor    ebx,ebx
c002769c:	85 c0                	test   eax,eax
c002769e:	0f 95 c3             	setne  bl
c00276a1:	31 c0                	xor    eax,eax
c00276a3:	85 d2                	test   edx,edx
c00276a5:	0f 95 c0             	setne  al
c00276a8:	09 c7                	or     edi,eax
c00276aa:	09 fb                	or     ebx,edi
c00276ac:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276af:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276b2:	29 da                	sub    edx,ebx
c00276b4:	83 de 00             	sbb    esi,0x0
c00276b7:	89 f0                	mov    eax,esi
c00276b9:	e9 d6 00 00 00       	jmp    c0027794 <__adddf3+0x519>
c00276be:	be 20 00 00 00       	mov    esi,0x20
c00276c3:	29 de                	sub    esi,ebx
c00276c5:	89 c7                	mov    edi,eax
c00276c7:	89 f1                	mov    ecx,esi
c00276c9:	d3 e7                	shl    edi,cl
c00276cb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00276ce:	89 d7                	mov    edi,edx
c00276d0:	88 d9                	mov    cl,bl
c00276d2:	d3 ef                	shr    edi,cl
c00276d4:	89 f9                	mov    ecx,edi
c00276d6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276d9:	09 cf                	or     edi,ecx
c00276db:	88 d9                	mov    cl,bl
c00276dd:	d3 e8                	shr    eax,cl
c00276df:	89 f1                	mov    ecx,esi
c00276e1:	d3 e2                	shl    edx,cl
c00276e3:	85 d2                	test   edx,edx
c00276e5:	0f 95 c2             	setne  dl
c00276e8:	0f b6 d2             	movzx  edx,dl
c00276eb:	09 d7                	or     edi,edx
c00276ed:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276f0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00276f3:	29 fa                	sub    edx,edi
c00276f5:	19 c6                	sbb    esi,eax
c00276f7:	eb be                	jmp    c00276b7 <__adddf3+0x43c>
c00276f9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00276fc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00276ff:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027705:	75 6a                	jne    c0027771 <__adddf3+0x4f6>
c0027707:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002770b:	75 58                	jne    c0027765 <__adddf3+0x4ea>
c002770d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027710:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027713:	89 d6                	mov    esi,edx
c0027715:	09 c6                	or     esi,eax
c0027717:	75 17                	jne    c0027730 <__adddf3+0x4b5>
c0027719:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002771c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002771f:	85 db                	test   ebx,ebx
c0027721:	0f 85 99 01 00 00    	jne    c00278c0 <__adddf3+0x645>
c0027727:	31 ff                	xor    edi,edi
c0027729:	31 c9                	xor    ecx,ecx
c002772b:	e9 90 01 00 00       	jmp    c00278c0 <__adddf3+0x645>
c0027730:	85 db                	test   ebx,ebx
c0027732:	0f 84 88 01 00 00    	je     c00278c0 <__adddf3+0x645>
c0027738:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002773b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002773e:	85 c0                	test   eax,eax
c0027740:	79 10                	jns    c0027752 <__adddf3+0x4d7>
c0027742:	31 c9                	xor    ecx,ecx
c0027744:	f7 da                	neg    edx
c0027746:	0f 95 c1             	setne  cl
c0027749:	01 c8                	add    eax,ecx
c002774b:	f7 d8                	neg    eax
c002774d:	e9 2f 01 00 00       	jmp    c0027881 <__adddf3+0x606>
c0027752:	31 ff                	xor    edi,edi
c0027754:	31 c9                	xor    ecx,ecx
c0027756:	89 c3                	mov    ebx,eax
c0027758:	09 d3                	or     ebx,edx
c002775a:	0f 84 60 01 00 00    	je     c00278c0 <__adddf3+0x645>
c0027760:	e9 05 01 00 00       	jmp    c002786a <__adddf3+0x5ef>
c0027765:	31 ff                	xor    edi,edi
c0027767:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002776c:	e9 4f 01 00 00       	jmp    c00278c0 <__adddf3+0x645>
c0027771:	89 c1                	mov    ecx,eax
c0027773:	89 d0                	mov    eax,edx
c0027775:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027778:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002777b:	89 ca                	mov    edx,ecx
c002777d:	85 c9                	test   ecx,ecx
c002777f:	79 2c                	jns    c00277ad <__adddf3+0x532>
c0027781:	31 c9                	xor    ecx,ecx
c0027783:	f7 d8                	neg    eax
c0027785:	0f 95 c1             	setne  cl
c0027788:	01 ca                	add    edx,ecx
c002778a:	f7 da                	neg    edx
c002778c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002778f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027792:	eb 19                	jmp    c00277ad <__adddf3+0x532>
c0027794:	85 c0                	test   eax,eax
c0027796:	0f 89 e5 00 00 00    	jns    c0027881 <__adddf3+0x606>
c002779c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00277a1:	89 c1                	mov    ecx,eax
c00277a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00277a6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00277a9:	89 d0                	mov    eax,edx
c00277ab:	89 ca                	mov    edx,ecx
c00277ad:	85 d2                	test   edx,edx
c00277af:	74 59                	je     c002780a <__adddf3+0x58f>
c00277b1:	0f bd da             	bsr    ebx,edx
c00277b4:	83 f3 1f             	xor    ebx,0x1f
c00277b7:	88 d9                	mov    cl,bl
c00277b9:	d3 e2                	shl    edx,cl
c00277bb:	bf 20 00 00 00       	mov    edi,0x20
c00277c0:	89 f9                	mov    ecx,edi
c00277c2:	29 d9                	sub    ecx,ebx
c00277c4:	89 c6                	mov    esi,eax
c00277c6:	d3 ee                	shr    esi,cl
c00277c8:	09 d6                	or     esi,edx
c00277ca:	88 d9                	mov    cl,bl
c00277cc:	d3 e0                	shl    eax,cl
c00277ce:	89 c2                	mov    edx,eax
c00277d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00277d3:	25 ff 07 00 00       	and    eax,0x7ff
c00277d8:	39 d8                	cmp    eax,ebx
c00277da:	7f 22                	jg     c00277fe <__adddf3+0x583>
c00277dc:	29 c3                	sub    ebx,eax
c00277de:	43                   	inc    ebx
c00277df:	88 d9                	mov    cl,bl
c00277e1:	d3 ea                	shr    edx,cl
c00277e3:	29 df                	sub    edi,ebx
c00277e5:	89 f9                	mov    ecx,edi
c00277e7:	89 f0                	mov    eax,esi
c00277e9:	d3 e0                	shl    eax,cl
c00277eb:	09 c2                	or     edx,eax
c00277ed:	89 f0                	mov    eax,esi
c00277ef:	88 d9                	mov    cl,bl
c00277f1:	d3 e8                	shr    eax,cl
c00277f3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277f6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00277fc:	eb 6f                	jmp    c002786d <__adddf3+0x5f2>
c00277fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027801:	29 d8                	sub    eax,ebx
c0027803:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027806:	89 f0                	mov    eax,esi
c0027808:	eb 59                	jmp    c0027863 <__adddf3+0x5e8>
c002780a:	85 c0                	test   eax,eax
c002780c:	74 6a                	je     c0027878 <__adddf3+0x5fd>
c002780e:	0f bd c8             	bsr    ecx,eax
c0027811:	83 f1 1f             	xor    ecx,0x1f
c0027814:	d3 e0                	shl    eax,cl
c0027816:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027819:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002781f:	83 c1 20             	add    ecx,0x20
c0027822:	39 cb                	cmp    ebx,ecx
c0027824:	7f 35                	jg     c002785b <__adddf3+0x5e0>
c0027826:	29 d9                	sub    ecx,ebx
c0027828:	8d 71 01             	lea    esi,[ecx+0x1]
c002782b:	83 fe 1f             	cmp    esi,0x1f
c002782e:	7e 09                	jle    c0027839 <__adddf3+0x5be>
c0027830:	83 e9 1f             	sub    ecx,0x1f
c0027833:	d3 e8                	shr    eax,cl
c0027835:	89 c3                	mov    ebx,eax
c0027837:	eb 11                	jmp    c002784a <__adddf3+0x5cf>
c0027839:	b9 20 00 00 00       	mov    ecx,0x20
c002783e:	29 f1                	sub    ecx,esi
c0027840:	89 c3                	mov    ebx,eax
c0027842:	d3 e3                	shl    ebx,cl
c0027844:	89 f1                	mov    ecx,esi
c0027846:	d3 e8                	shr    eax,cl
c0027848:	89 c2                	mov    edx,eax
c002784a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002784d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027852:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027855:	89 d0                	mov    eax,edx
c0027857:	89 da                	mov    edx,ebx
c0027859:	eb 26                	jmp    c0027881 <__adddf3+0x606>
c002785b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002785e:	29 cf                	sub    edi,ecx
c0027860:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027863:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027868:	eb 17                	jmp    c0027881 <__adddf3+0x606>
c002786a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002786d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027870:	eb 0f                	jmp    c0027881 <__adddf3+0x606>
c0027872:	31 d2                	xor    edx,edx
c0027874:	31 c0                	xor    eax,eax
c0027876:	eb 09                	jmp    c0027881 <__adddf3+0x606>
c0027878:	89 c2                	mov    edx,eax
c002787a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027881:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027884:	c1 e1 14             	shl    ecx,0x14
c0027887:	89 c3                	mov    ebx,eax
c0027889:	c1 eb 0b             	shr    ebx,0xb
c002788c:	09 d9                	or     ecx,ebx
c002788e:	89 d3                	mov    ebx,edx
c0027890:	c1 eb 0b             	shr    ebx,0xb
c0027893:	c1 e0 15             	shl    eax,0x15
c0027896:	09 d8                	or     eax,ebx
c0027898:	89 c7                	mov    edi,eax
c002789a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00278a0:	0f 95 c0             	setne  al
c00278a3:	89 c6                	mov    esi,eax
c00278a5:	09 f3                	or     ebx,esi
c00278a7:	83 e3 01             	and    ebx,0x1
c00278aa:	c1 ea 0a             	shr    edx,0xa
c00278ad:	21 da                	and    edx,ebx
c00278af:	89 f8                	mov    eax,edi
c00278b1:	01 d0                	add    eax,edx
c00278b3:	83 d1 00             	adc    ecx,0x0
c00278b6:	89 c7                	mov    edi,eax
c00278b8:	eb 06                	jmp    c00278c0 <__adddf3+0x645>
c00278ba:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00278bd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00278c0:	89 f8                	mov    eax,edi
c00278c2:	89 ca                	mov    edx,ecx
c00278c4:	83 c4 24             	add    esp,0x24
c00278c7:	5b                   	pop    ebx
c00278c8:	5e                   	pop    esi
c00278c9:	5f                   	pop    edi
c00278ca:	5d                   	pop    ebp
c00278cb:	c3                   	ret    

c00278cc <__subdf3>:
c00278cc:	55                   	push   ebp
c00278cd:	89 e5                	mov    ebp,esp
c00278cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00278d2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00278d5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278db:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00278de:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00278e1:	5d                   	pop    ebp
c00278e2:	e9 94 f9 ff ff       	jmp    c002727b <__adddf3>

c00278e7 <__negdf2>:
c00278e7:	55                   	push   ebp
c00278e8:	89 e5                	mov    ebp,esp
c00278ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00278ed:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00278f0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00278f6:	5d                   	pop    ebp
c00278f7:	c3                   	ret    

c00278f8 <__muldf3>:
c00278f8:	55                   	push   ebp
c00278f9:	89 e5                	mov    ebp,esp
c00278fb:	57                   	push   edi
c00278fc:	56                   	push   esi
c00278fd:	53                   	push   ebx
c00278fe:	83 ec 24             	sub    esp,0x24
c0027901:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027904:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027907:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002790a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002790d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027910:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027913:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027916:	89 c8                	mov    eax,ecx
c0027918:	c1 f8 14             	sar    eax,0x14
c002791b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002791e:	89 f8                	mov    eax,edi
c0027920:	89 fb                	mov    ebx,edi
c0027922:	c1 e3 0b             	shl    ebx,0xb
c0027925:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027928:	c1 e1 0b             	shl    ecx,0xb
c002792b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027931:	c1 e8 15             	shr    eax,0x15
c0027934:	09 c1                	or     ecx,eax
c0027936:	89 d6                	mov    esi,edx
c0027938:	89 d0                	mov    eax,edx
c002793a:	c1 f8 14             	sar    eax,0x14
c002793d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027940:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027943:	89 c3                	mov    ebx,eax
c0027945:	c1 e3 0b             	shl    ebx,0xb
c0027948:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002794b:	c1 e6 0b             	shl    esi,0xb
c002794e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027954:	c1 e8 15             	shr    eax,0x15
c0027957:	09 c6                	or     esi,eax
c0027959:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002795c:	25 ff 07 00 00       	and    eax,0x7ff
c0027961:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027964:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027967:	25 ff 07 00 00       	and    eax,0x7ff
c002796c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002796f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027972:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027975:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002797c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002797f:	40                   	inc    eax
c0027980:	a9 fe 07 00 00       	test   eax,0x7fe
c0027985:	0f 85 8d 00 00 00    	jne    c0027a18 <__muldf3+0x120>
c002798b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002798e:	09 c8                	or     eax,ecx
c0027990:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027994:	74 44                	je     c00279da <__muldf3+0xe2>
c0027996:	85 c0                	test   eax,eax
c0027998:	0f 85 31 02 00 00    	jne    c0027bcf <__muldf3+0x2d7>
c002799e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00279a1:	40                   	inc    eax
c00279a2:	a9 fe 07 00 00       	test   eax,0x7fe
c00279a7:	75 13                	jne    c00279bc <__muldf3+0xc4>
c00279a9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279ac:	09 f1                	or     ecx,esi
c00279ae:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279b2:	74 22                	je     c00279d6 <__muldf3+0xde>
c00279b4:	85 c9                	test   ecx,ecx
c00279b6:	0f 85 0d 02 00 00    	jne    c0027bc9 <__muldf3+0x2d1>
c00279bc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00279c0:	0f 89 09 02 00 00    	jns    c0027bcf <__muldf3+0x2d7>
c00279c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00279c9:	05 00 00 00 80       	add    eax,0x80000000
c00279ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279d1:	e9 f9 01 00 00       	jmp    c0027bcf <__muldf3+0x2d7>
c00279d6:	85 c9                	test   ecx,ecx
c00279d8:	eb 2e                	jmp    c0027a08 <__muldf3+0x110>
c00279da:	85 c0                	test   eax,eax
c00279dc:	74 20                	je     c00279fe <__muldf3+0x106>
c00279de:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00279e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279e4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00279e7:	c1 ef 1f             	shr    edi,0x1f
c00279ea:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00279ed:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00279f0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00279f3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279f6:	09 f9                	or     ecx,edi
c00279f8:	78 1e                	js     c0027a18 <__muldf3+0x120>
c00279fa:	89 c3                	mov    ebx,eax
c00279fc:	eb e0                	jmp    c00279de <__muldf3+0xe6>
c00279fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a01:	f7 d0                	not    eax
c0027a03:	a9 ff 07 00 00       	test   eax,0x7ff
c0027a08:	75 b2                	jne    c00279bc <__muldf3+0xc4>
c0027a0a:	31 ff                	xor    edi,edi
c0027a0c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027a13:	e9 b7 01 00 00       	jmp    c0027bcf <__muldf3+0x2d7>
c0027a18:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027a1b:	40                   	inc    eax
c0027a1c:	a9 fe 07 00 00       	test   eax,0x7fe
c0027a21:	75 57                	jne    c0027a7a <__muldf3+0x182>
c0027a23:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027a26:	09 f0                	or     eax,esi
c0027a28:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a2c:	74 23                	je     c0027a51 <__muldf3+0x159>
c0027a2e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a32:	0f 89 91 01 00 00    	jns    c0027bc9 <__muldf3+0x2d1>
c0027a38:	85 c0                	test   eax,eax
c0027a3a:	0f 85 89 01 00 00    	jne    c0027bc9 <__muldf3+0x2d1>
c0027a40:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027a43:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027a49:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a4c:	e9 7e 01 00 00       	jmp    c0027bcf <__muldf3+0x2d7>
c0027a51:	85 c0                	test   eax,eax
c0027a53:	75 0c                	jne    c0027a61 <__muldf3+0x169>
c0027a55:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027a59:	0f 89 6a 01 00 00    	jns    c0027bc9 <__muldf3+0x2d1>
c0027a5f:	eb df                	jmp    c0027a40 <__muldf3+0x148>
c0027a61:	01 f6                	add    esi,esi
c0027a63:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a66:	c1 ea 1f             	shr    edx,0x1f
c0027a69:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027a6c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027a6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027a72:	09 d6                	or     esi,edx
c0027a74:	78 04                	js     c0027a7a <__muldf3+0x182>
c0027a76:	89 c3                	mov    ebx,eax
c0027a78:	eb e7                	jmp    c0027a61 <__muldf3+0x169>
c0027a7a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027a80:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a86:	89 c8                	mov    eax,ecx
c0027a88:	f7 e6                	mul    esi
c0027a8a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027a8d:	89 c7                	mov    edi,eax
c0027a8f:	89 c8                	mov    eax,ecx
c0027a91:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027a94:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027a97:	89 c1                	mov    ecx,eax
c0027a99:	89 f0                	mov    eax,esi
c0027a9b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027a9e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027aa1:	89 c6                	mov    esi,eax
c0027aa3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027aa6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027aa9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027aac:	31 c0                	xor    eax,eax
c0027aae:	01 f1                	add    ecx,esi
c0027ab0:	0f 92 c0             	setb   al
c0027ab3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027ab6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027ab9:	83 d6 00             	adc    esi,0x0
c0027abc:	01 c7                	add    edi,eax
c0027abe:	83 d6 00             	adc    esi,0x0
c0027ac1:	01 ca                	add    edx,ecx
c0027ac3:	0f 92 c1             	setb   cl
c0027ac6:	0f b6 c9             	movzx  ecx,cl
c0027ac9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027acc:	83 d6 00             	adc    esi,0x0
c0027acf:	01 cf                	add    edi,ecx
c0027ad1:	83 d6 00             	adc    esi,0x0
c0027ad4:	31 c9                	xor    ecx,ecx
c0027ad6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027ad9:	0f 95 c1             	setne  cl
c0027adc:	09 cf                	or     edi,ecx
c0027ade:	85 f6                	test   esi,esi
c0027ae0:	78 0c                	js     c0027aee <__muldf3+0x1f6>
c0027ae2:	01 f6                	add    esi,esi
c0027ae4:	89 f8                	mov    eax,edi
c0027ae6:	c1 e8 1f             	shr    eax,0x1f
c0027ae9:	09 c6                	or     esi,eax
c0027aeb:	01 ff                	add    edi,edi
c0027aed:	4b                   	dec    ebx
c0027aee:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027af4:	0f 8f 85 00 00 00    	jg     c0027b7f <__muldf3+0x287>
c0027afa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027b00:	85 db                	test   ebx,ebx
c0027b02:	0f 8f 84 00 00 00    	jg     c0027b8c <__muldf3+0x294>
c0027b08:	83 fb cc             	cmp    ebx,0xffffffcc
c0027b0b:	7c 79                	jl     c0027b86 <__muldf3+0x28e>
c0027b0d:	ba 01 00 00 00       	mov    edx,0x1
c0027b12:	29 da                	sub    edx,ebx
c0027b14:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027b1a:	83 fa 1f             	cmp    edx,0x1f
c0027b1d:	7e 30                	jle    c0027b4f <__muldf3+0x257>
c0027b1f:	83 fa 20             	cmp    edx,0x20
c0027b22:	75 0b                	jne    c0027b2f <__muldf3+0x237>
c0027b24:	31 c0                	xor    eax,eax
c0027b26:	85 ff                	test   edi,edi
c0027b28:	0f 95 c0             	setne  al
c0027b2b:	89 c7                	mov    edi,eax
c0027b2d:	eb 1a                	jmp    c0027b49 <__muldf3+0x251>
c0027b2f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027b32:	89 f0                	mov    eax,esi
c0027b34:	d3 e0                	shl    eax,cl
c0027b36:	09 f8                	or     eax,edi
c0027b38:	0f 95 c0             	setne  al
c0027b3b:	0f b6 c0             	movzx  eax,al
c0027b3e:	89 c7                	mov    edi,eax
c0027b40:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027b45:	29 d9                	sub    ecx,ebx
c0027b47:	d3 ee                	shr    esi,cl
c0027b49:	09 f7                	or     edi,esi
c0027b4b:	31 db                	xor    ebx,ebx
c0027b4d:	eb 3b                	jmp    c0027b8a <__muldf3+0x292>
c0027b4f:	83 c3 1f             	add    ebx,0x1f
c0027b52:	89 f0                	mov    eax,esi
c0027b54:	88 d9                	mov    cl,bl
c0027b56:	d3 e0                	shl    eax,cl
c0027b58:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b5b:	89 f8                	mov    eax,edi
c0027b5d:	88 d1                	mov    cl,dl
c0027b5f:	d3 e8                	shr    eax,cl
c0027b61:	89 c1                	mov    ecx,eax
c0027b63:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b66:	09 c8                	or     eax,ecx
c0027b68:	88 d9                	mov    cl,bl
c0027b6a:	d3 e7                	shl    edi,cl
c0027b6c:	31 db                	xor    ebx,ebx
c0027b6e:	85 ff                	test   edi,edi
c0027b70:	0f 95 c3             	setne  bl
c0027b73:	89 df                	mov    edi,ebx
c0027b75:	09 c7                	or     edi,eax
c0027b77:	88 d1                	mov    cl,dl
c0027b79:	d3 ee                	shr    esi,cl
c0027b7b:	31 db                	xor    ebx,ebx
c0027b7d:	eb 0d                	jmp    c0027b8c <__muldf3+0x294>
c0027b7f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027b84:	eb 02                	jmp    c0027b88 <__muldf3+0x290>
c0027b86:	31 db                	xor    ebx,ebx
c0027b88:	31 ff                	xor    edi,edi
c0027b8a:	31 f6                	xor    esi,esi
c0027b8c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b8f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027b92:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027b97:	09 c3                	or     ebx,eax
c0027b99:	c1 e3 14             	shl    ebx,0x14
c0027b9c:	89 f0                	mov    eax,esi
c0027b9e:	c1 e8 0b             	shr    eax,0xb
c0027ba1:	09 c3                	or     ebx,eax
c0027ba3:	89 f8                	mov    eax,edi
c0027ba5:	c1 e8 0b             	shr    eax,0xb
c0027ba8:	c1 e6 15             	shl    esi,0x15
c0027bab:	09 c6                	or     esi,eax
c0027bad:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027bb3:	0f 95 c1             	setne  cl
c0027bb6:	09 c8                	or     eax,ecx
c0027bb8:	83 e0 01             	and    eax,0x1
c0027bbb:	c1 ef 0a             	shr    edi,0xa
c0027bbe:	21 c7                	and    edi,eax
c0027bc0:	01 f7                	add    edi,esi
c0027bc2:	83 d3 00             	adc    ebx,0x0
c0027bc5:	89 da                	mov    edx,ebx
c0027bc7:	eb 03                	jmp    c0027bcc <__muldf3+0x2d4>
c0027bc9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027bcc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027bcf:	89 f8                	mov    eax,edi
c0027bd1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027bd4:	83 c4 24             	add    esp,0x24
c0027bd7:	5b                   	pop    ebx
c0027bd8:	5e                   	pop    esi
c0027bd9:	5f                   	pop    edi
c0027bda:	5d                   	pop    ebp
c0027bdb:	c3                   	ret    

c0027bdc <__divdf3>:
c0027bdc:	55                   	push   ebp
c0027bdd:	89 e5                	mov    ebp,esp
c0027bdf:	57                   	push   edi
c0027be0:	56                   	push   esi
c0027be1:	53                   	push   ebx
c0027be2:	83 ec 2c             	sub    esp,0x2c
c0027be5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027be8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027beb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027bee:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027bf1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027bf4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027bf7:	89 ce                	mov    esi,ecx
c0027bf9:	89 c8                	mov    eax,ecx
c0027bfb:	c1 f8 14             	sar    eax,0x14
c0027bfe:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c01:	89 f8                	mov    eax,edi
c0027c03:	89 fb                	mov    ebx,edi
c0027c05:	c1 e3 0b             	shl    ebx,0xb
c0027c08:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027c0b:	c1 e6 0b             	shl    esi,0xb
c0027c0e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027c14:	c1 e8 15             	shr    eax,0x15
c0027c17:	09 c6                	or     esi,eax
c0027c19:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027c1c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027c1f:	89 c2                	mov    edx,eax
c0027c21:	c1 fa 14             	sar    edx,0x14
c0027c24:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c27:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027c2a:	89 de                	mov    esi,ebx
c0027c2c:	c1 e6 0b             	shl    esi,0xb
c0027c2f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027c32:	c1 e0 0b             	shl    eax,0xb
c0027c35:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027c3a:	c1 eb 15             	shr    ebx,0x15
c0027c3d:	09 d8                	or     eax,ebx
c0027c3f:	89 c2                	mov    edx,eax
c0027c41:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c44:	25 ff 07 00 00       	and    eax,0x7ff
c0027c49:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027c4c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027c4f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027c55:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027c58:	29 d8                	sub    eax,ebx
c0027c5a:	05 ff 03 00 00       	add    eax,0x3ff
c0027c5f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027c62:	46                   	inc    esi
c0027c63:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027c69:	0f 85 a5 00 00 00    	jne    c0027d14 <__divdf3+0x138>
c0027c6f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027c72:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027c75:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027c79:	74 2a                	je     c0027ca5 <__divdf3+0xc9>
c0027c7b:	85 f6                	test   esi,esi
c0027c7d:	0f 85 cc 02 00 00    	jne    c0027f4f <__divdf3+0x373>
c0027c83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027c86:	40                   	inc    eax
c0027c87:	a9 fe 07 00 00       	test   eax,0x7fe
c0027c8c:	75 26                	jne    c0027cb4 <__divdf3+0xd8>
c0027c8e:	85 db                	test   ebx,ebx
c0027c90:	74 22                	je     c0027cb4 <__divdf3+0xd8>
c0027c92:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c95:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c98:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027c9b:	09 d0                	or     eax,edx
c0027c9d:	0f 85 ac 02 00 00    	jne    c0027f4f <__divdf3+0x373>
c0027ca3:	eb 63                	jmp    c0027d08 <__divdf3+0x12c>
c0027ca5:	85 f6                	test   esi,esi
c0027ca7:	75 22                	jne    c0027ccb <__divdf3+0xef>
c0027ca9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027cac:	40                   	inc    eax
c0027cad:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cb2:	74 36                	je     c0027cea <__divdf3+0x10e>
c0027cb4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027cb8:	0f 89 91 02 00 00    	jns    c0027f4f <__divdf3+0x373>
c0027cbe:	89 f8                	mov    eax,edi
c0027cc0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027cc6:	e9 80 02 00 00       	jmp    c0027f4b <__divdf3+0x36f>
c0027ccb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027cce:	01 f6                	add    esi,esi
c0027cd0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027cd3:	c1 ef 1f             	shr    edi,0x1f
c0027cd6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027cd9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027cdc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027cdf:	09 f7                	or     edi,esi
c0027ce1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027ce4:	78 2e                	js     c0027d14 <__divdf3+0x138>
c0027ce6:	89 c8                	mov    eax,ecx
c0027ce8:	eb e1                	jmp    c0027ccb <__divdf3+0xef>
c0027cea:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027ced:	09 d0                	or     eax,edx
c0027cef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027cf3:	74 0f                	je     c0027d04 <__divdf3+0x128>
c0027cf5:	85 c0                	test   eax,eax
c0027cf7:	74 bb                	je     c0027cb4 <__divdf3+0xd8>
c0027cf9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027cfc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027cff:	e9 4b 02 00 00       	jmp    c0027f4f <__divdf3+0x373>
c0027d04:	85 c0                	test   eax,eax
c0027d06:	75 ac                	jne    c0027cb4 <__divdf3+0xd8>
c0027d08:	31 ff                	xor    edi,edi
c0027d0a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027d0f:	e9 3b 02 00 00       	jmp    c0027f4f <__divdf3+0x373>
c0027d14:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d17:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027d1a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027d20:	75 6b                	jne    c0027d8d <__divdf3+0x1b1>
c0027d22:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d25:	09 d6                	or     esi,edx
c0027d27:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027d2b:	74 28                	je     c0027d55 <__divdf3+0x179>
c0027d2d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027d30:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027d33:	85 f6                	test   esi,esi
c0027d35:	0f 85 14 02 00 00    	jne    c0027f4f <__divdf3+0x373>
c0027d3b:	31 ff                	xor    edi,edi
c0027d3d:	31 c9                	xor    ecx,ecx
c0027d3f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d42:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d45:	0f 89 04 02 00 00    	jns    c0027f4f <__divdf3+0x373>
c0027d4b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027d50:	e9 fa 01 00 00       	jmp    c0027f4f <__divdf3+0x373>
c0027d55:	85 f6                	test   esi,esi
c0027d57:	75 1b                	jne    c0027d74 <__divdf3+0x198>
c0027d59:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027d5c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027d5f:	25 00 00 00 80       	and    eax,0x80000000
c0027d64:	31 c9                	xor    ecx,ecx
c0027d66:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027d6b:	89 cf                	mov    edi,ecx
c0027d6d:	89 c1                	mov    ecx,eax
c0027d6f:	e9 db 01 00 00       	jmp    c0027f4f <__divdf3+0x373>
c0027d74:	01 d2                	add    edx,edx
c0027d76:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d79:	c1 eb 1f             	shr    ebx,0x1f
c0027d7c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027d7f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027d82:	8d 48 01             	lea    ecx,[eax+0x1]
c0027d85:	09 da                	or     edx,ebx
c0027d87:	78 04                	js     c0027d8d <__divdf3+0x1b1>
c0027d89:	89 c8                	mov    eax,ecx
c0027d8b:	eb e7                	jmp    c0027d74 <__divdf3+0x198>
c0027d8d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d90:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027d96:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d9c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027d9f:	39 d6                	cmp    esi,edx
c0027da1:	77 0d                	ja     c0027db0 <__divdf3+0x1d4>
c0027da3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027da6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027da9:	72 1b                	jb     c0027dc6 <__divdf3+0x1ea>
c0027dab:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027dae:	75 16                	jne    c0027dc6 <__divdf3+0x1ea>
c0027db0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027db3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027db6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027db9:	83 de 00             	sbb    esi,0x0
c0027dbc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027dbf:	ba 01 00 00 00       	mov    edx,0x1
c0027dc4:	eb 02                	jmp    c0027dc8 <__divdf3+0x1ec>
c0027dc6:	31 d2                	xor    edx,edx
c0027dc8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027dcf:	31 ff                	xor    edi,edi
c0027dd1:	01 ff                	add    edi,edi
c0027dd3:	89 d1                	mov    ecx,edx
c0027dd5:	c1 e9 1f             	shr    ecx,0x1f
c0027dd8:	09 cf                	or     edi,ecx
c0027dda:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027ddd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027de0:	89 da                	mov    edx,ebx
c0027de2:	89 f3                	mov    ebx,esi
c0027de4:	8d 34 36             	lea    esi,[esi+esi*1]
c0027de7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027dea:	c1 e9 1f             	shr    ecx,0x1f
c0027ded:	09 ce                	or     esi,ecx
c0027def:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027df2:	01 c9                	add    ecx,ecx
c0027df4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027df7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027dfa:	85 db                	test   ebx,ebx
c0027dfc:	78 29                	js     c0027e27 <__divdf3+0x24b>
c0027dfe:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027e01:	72 07                	jb     c0027e0a <__divdf3+0x22e>
c0027e03:	75 3c                	jne    c0027e41 <__divdf3+0x265>
c0027e05:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e08:	77 37                	ja     c0027e41 <__divdf3+0x265>
c0027e0a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e0d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027e10:	31 d2                	xor    edx,edx
c0027e12:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027e15:	0f 97 c2             	seta   dl
c0027e18:	29 d6                	sub    esi,edx
c0027e1a:	89 d9                	mov    ecx,ebx
c0027e1c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027e1f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027e22:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027e25:	eb 17                	jmp    c0027e3e <__divdf3+0x262>
c0027e27:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027e2a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027e2d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027e30:	0f 97 c1             	seta   cl
c0027e33:	0f b6 c9             	movzx  ecx,cl
c0027e36:	29 ce                	sub    esi,ecx
c0027e38:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027e3b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027e3e:	83 ca 01             	or     edx,0x1
c0027e41:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027e44:	75 8b                	jne    c0027dd1 <__divdf3+0x1f5>
c0027e46:	c1 e7 09             	shl    edi,0x9
c0027e49:	89 d1                	mov    ecx,edx
c0027e4b:	c1 e9 17             	shr    ecx,0x17
c0027e4e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e51:	09 f3                	or     ebx,esi
c0027e53:	0f 95 c3             	setne  bl
c0027e56:	0f b6 db             	movzx  ebx,bl
c0027e59:	c1 e2 09             	shl    edx,0x9
c0027e5c:	09 d3                	or     ebx,edx
c0027e5e:	89 ca                	mov    edx,ecx
c0027e60:	09 fa                	or     edx,edi
c0027e62:	78 0c                	js     c0027e70 <__divdf3+0x294>
c0027e64:	01 d2                	add    edx,edx
c0027e66:	89 d9                	mov    ecx,ebx
c0027e68:	c1 e9 1f             	shr    ecx,0x1f
c0027e6b:	09 ca                	or     edx,ecx
c0027e6d:	01 db                	add    ebx,ebx
c0027e6f:	48                   	dec    eax
c0027e70:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027e75:	0f 8f 83 00 00 00    	jg     c0027efe <__divdf3+0x322>
c0027e7b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027e81:	85 c0                	test   eax,eax
c0027e83:	0f 8f 82 00 00 00    	jg     c0027f0b <__divdf3+0x32f>
c0027e89:	83 f8 cc             	cmp    eax,0xffffffcc
c0027e8c:	7c 77                	jl     c0027f05 <__divdf3+0x329>
c0027e8e:	be 01 00 00 00       	mov    esi,0x1
c0027e93:	29 c6                	sub    esi,eax
c0027e95:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027e9b:	83 fe 1f             	cmp    esi,0x1f
c0027e9e:	7e 2f                	jle    c0027ecf <__divdf3+0x2f3>
c0027ea0:	83 fe 20             	cmp    esi,0x20
c0027ea3:	75 0a                	jne    c0027eaf <__divdf3+0x2d3>
c0027ea5:	85 db                	test   ebx,ebx
c0027ea7:	0f 95 c3             	setne  bl
c0027eaa:	0f b6 db             	movzx  ebx,bl
c0027ead:	eb 1a                	jmp    c0027ec9 <__divdf3+0x2ed>
c0027eaf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027eb2:	89 d7                	mov    edi,edx
c0027eb4:	d3 e7                	shl    edi,cl
c0027eb6:	89 f9                	mov    ecx,edi
c0027eb8:	09 d9                	or     ecx,ebx
c0027eba:	0f 95 c3             	setne  bl
c0027ebd:	0f b6 db             	movzx  ebx,bl
c0027ec0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ec5:	29 c1                	sub    ecx,eax
c0027ec7:	d3 ea                	shr    edx,cl
c0027ec9:	09 d3                	or     ebx,edx
c0027ecb:	31 c0                	xor    eax,eax
c0027ecd:	eb 3a                	jmp    c0027f09 <__divdf3+0x32d>
c0027ecf:	83 c0 1f             	add    eax,0x1f
c0027ed2:	89 d7                	mov    edi,edx
c0027ed4:	88 c1                	mov    cl,al
c0027ed6:	d3 e7                	shl    edi,cl
c0027ed8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027edb:	89 df                	mov    edi,ebx
c0027edd:	89 f1                	mov    ecx,esi
c0027edf:	d3 ef                	shr    edi,cl
c0027ee1:	89 f9                	mov    ecx,edi
c0027ee3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027ee6:	09 cf                	or     edi,ecx
c0027ee8:	88 c1                	mov    cl,al
c0027eea:	d3 e3                	shl    ebx,cl
c0027eec:	85 db                	test   ebx,ebx
c0027eee:	0f 95 c3             	setne  bl
c0027ef1:	0f b6 db             	movzx  ebx,bl
c0027ef4:	09 fb                	or     ebx,edi
c0027ef6:	89 f1                	mov    ecx,esi
c0027ef8:	d3 ea                	shr    edx,cl
c0027efa:	31 c0                	xor    eax,eax
c0027efc:	eb 0d                	jmp    c0027f0b <__divdf3+0x32f>
c0027efe:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027f03:	eb 02                	jmp    c0027f07 <__divdf3+0x32b>
c0027f05:	31 c0                	xor    eax,eax
c0027f07:	31 db                	xor    ebx,ebx
c0027f09:	31 d2                	xor    edx,edx
c0027f0b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027f0e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027f11:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027f17:	09 c8                	or     eax,ecx
c0027f19:	c1 e0 14             	shl    eax,0x14
c0027f1c:	89 d1                	mov    ecx,edx
c0027f1e:	c1 e9 0b             	shr    ecx,0xb
c0027f21:	09 c8                	or     eax,ecx
c0027f23:	89 c6                	mov    esi,eax
c0027f25:	89 d9                	mov    ecx,ebx
c0027f27:	c1 e9 0b             	shr    ecx,0xb
c0027f2a:	c1 e2 15             	shl    edx,0x15
c0027f2d:	09 ca                	or     edx,ecx
c0027f2f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027f35:	0f 95 c0             	setne  al
c0027f38:	09 c1                	or     ecx,eax
c0027f3a:	83 e1 01             	and    ecx,0x1
c0027f3d:	c1 eb 0a             	shr    ebx,0xa
c0027f40:	21 cb                	and    ebx,ecx
c0027f42:	01 d3                	add    ebx,edx
c0027f44:	89 d8                	mov    eax,ebx
c0027f46:	83 d6 00             	adc    esi,0x0
c0027f49:	89 f2                	mov    edx,esi
c0027f4b:	89 c7                	mov    edi,eax
c0027f4d:	89 d1                	mov    ecx,edx
c0027f4f:	89 f8                	mov    eax,edi
c0027f51:	89 ca                	mov    edx,ecx
c0027f53:	83 c4 2c             	add    esp,0x2c
c0027f56:	5b                   	pop    ebx
c0027f57:	5e                   	pop    esi
c0027f58:	5f                   	pop    edi
c0027f59:	5d                   	pop    ebp
c0027f5a:	c3                   	ret    

c0027f5b <__floatsidf>:
c0027f5b:	55                   	push   ebp
c0027f5c:	89 e5                	mov    ebp,esp
c0027f5e:	56                   	push   esi
c0027f5f:	53                   	push   ebx
c0027f60:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027f63:	85 db                	test   ebx,ebx
c0027f65:	7e 15                	jle    c0027f7c <__floatsidf+0x21>
c0027f67:	0f bd cb             	bsr    ecx,ebx
c0027f6a:	83 f1 1f             	xor    ecx,0x1f
c0027f6d:	d3 e3                	shl    ebx,cl
c0027f6f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f75:	b8 1e 04 00 00       	mov    eax,0x41e
c0027f7a:	eb 21                	jmp    c0027f9d <__floatsidf+0x42>
c0027f7c:	b8 00 00 00 00       	mov    eax,0x0
c0027f81:	ba 00 00 00 00       	mov    edx,0x0
c0027f86:	74 2a                	je     c0027fb2 <__floatsidf+0x57>
c0027f88:	f7 db                	neg    ebx
c0027f8a:	0f bd cb             	bsr    ecx,ebx
c0027f8d:	83 f1 1f             	xor    ecx,0x1f
c0027f90:	d3 e3                	shl    ebx,cl
c0027f92:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027f98:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027f9d:	29 c8                	sub    eax,ecx
c0027f9f:	c1 e0 14             	shl    eax,0x14
c0027fa2:	89 c1                	mov    ecx,eax
c0027fa4:	89 de                	mov    esi,ebx
c0027fa6:	c1 ee 0b             	shr    esi,0xb
c0027fa9:	09 f1                	or     ecx,esi
c0027fab:	89 ca                	mov    edx,ecx
c0027fad:	c1 e3 15             	shl    ebx,0x15
c0027fb0:	89 d8                	mov    eax,ebx
c0027fb2:	5b                   	pop    ebx
c0027fb3:	5e                   	pop    esi
c0027fb4:	5d                   	pop    ebp
c0027fb5:	c3                   	ret    

c0027fb6 <__floatunsidf>:
c0027fb6:	55                   	push   ebp
c0027fb7:	89 e5                	mov    ebp,esp
c0027fb9:	56                   	push   esi
c0027fba:	53                   	push   ebx
c0027fbb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fbe:	85 db                	test   ebx,ebx
c0027fc0:	74 2a                	je     c0027fec <__floatunsidf+0x36>
c0027fc2:	0f bd cb             	bsr    ecx,ebx
c0027fc5:	83 f1 1f             	xor    ecx,0x1f
c0027fc8:	d3 e3                	shl    ebx,cl
c0027fca:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027fd0:	b8 1e 04 00 00       	mov    eax,0x41e
c0027fd5:	29 c8                	sub    eax,ecx
c0027fd7:	c1 e0 14             	shl    eax,0x14
c0027fda:	89 c1                	mov    ecx,eax
c0027fdc:	89 de                	mov    esi,ebx
c0027fde:	c1 ee 0b             	shr    esi,0xb
c0027fe1:	09 f1                	or     ecx,esi
c0027fe3:	89 ca                	mov    edx,ecx
c0027fe5:	c1 e3 15             	shl    ebx,0x15
c0027fe8:	89 d8                	mov    eax,ebx
c0027fea:	eb 04                	jmp    c0027ff0 <__floatunsidf+0x3a>
c0027fec:	31 c0                	xor    eax,eax
c0027fee:	31 d2                	xor    edx,edx
c0027ff0:	5b                   	pop    ebx
c0027ff1:	5e                   	pop    esi
c0027ff2:	5d                   	pop    ebp
c0027ff3:	c3                   	ret    

c0027ff4 <__fixdfsi>:
c0027ff4:	55                   	push   ebp
c0027ff5:	89 e5                	mov    ebp,esp
c0027ff7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027ffa:	89 d1                	mov    ecx,edx
c0027ffc:	c1 e1 0b             	shl    ecx,0xb
c0027fff:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028008:	c1 e8 15             	shr    eax,0x15
c002800b:	09 c1                	or     ecx,eax
c002800d:	c1 fa 14             	sar    edx,0x14
c0028010:	78 1f                	js     c0028031 <__fixdfsi+0x3d>
c0028012:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028018:	31 c0                	xor    eax,eax
c002801a:	83 fa 1e             	cmp    edx,0x1e
c002801d:	77 40                	ja     c002805f <__fixdfsi+0x6b>
c002801f:	89 c8                	mov    eax,ecx
c0028021:	0d 00 00 00 80       	or     eax,0x80000000
c0028026:	b9 1f 00 00 00       	mov    ecx,0x1f
c002802b:	29 d1                	sub    ecx,edx
c002802d:	d3 e8                	shr    eax,cl
c002802f:	eb 2e                	jmp    c002805f <__fixdfsi+0x6b>
c0028031:	31 c0                	xor    eax,eax
c0028033:	81 c2 01 04 00 00    	add    edx,0x401
c0028039:	78 24                	js     c002805f <__fixdfsi+0x6b>
c002803b:	83 fa 1e             	cmp    edx,0x1e
c002803e:	7e 09                	jle    c0028049 <__fixdfsi+0x55>
c0028040:	83 fa 1f             	cmp    edx,0x1f
c0028043:	75 18                	jne    c002805d <__fixdfsi+0x69>
c0028045:	85 c9                	test   ecx,ecx
c0028047:	75 14                	jne    c002805d <__fixdfsi+0x69>
c0028049:	89 c8                	mov    eax,ecx
c002804b:	0d 00 00 00 80       	or     eax,0x80000000
c0028050:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028055:	29 d1                	sub    ecx,edx
c0028057:	d3 e8                	shr    eax,cl
c0028059:	f7 d8                	neg    eax
c002805b:	eb 02                	jmp    c002805f <__fixdfsi+0x6b>
c002805d:	31 c0                	xor    eax,eax
c002805f:	5d                   	pop    ebp
c0028060:	c3                   	ret    

c0028061 <__fixunsdfsi>:
c0028061:	55                   	push   ebp
c0028062:	89 e5                	mov    ebp,esp
c0028064:	53                   	push   ebx
c0028065:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028068:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002806b:	89 d3                	mov    ebx,edx
c002806d:	c1 fb 14             	sar    ebx,0x14
c0028070:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028076:	31 c0                	xor    eax,eax
c0028078:	83 fb 1f             	cmp    ebx,0x1f
c002807b:	77 1d                	ja     c002809a <__fixunsdfsi+0x39>
c002807d:	89 d0                	mov    eax,edx
c002807f:	c1 e0 0b             	shl    eax,0xb
c0028082:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028087:	c1 e9 15             	shr    ecx,0x15
c002808a:	09 c8                	or     eax,ecx
c002808c:	0d 00 00 00 80       	or     eax,0x80000000
c0028091:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028096:	29 d9                	sub    ecx,ebx
c0028098:	d3 e8                	shr    eax,cl
c002809a:	5b                   	pop    ebx
c002809b:	5d                   	pop    ebp
c002809c:	c3                   	ret    

c002809d <__cmpdf2>:
c002809d:	55                   	push   ebp
c002809e:	89 e5                	mov    ebp,esp
c00280a0:	57                   	push   edi
c00280a1:	56                   	push   esi
c00280a2:	53                   	push   ebx
c00280a3:	83 ec 0c             	sub    esp,0xc
c00280a6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00280a9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00280ac:	89 ca                	mov    edx,ecx
c00280ae:	c1 ea 14             	shr    edx,0x14
c00280b1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00280b7:	89 cb                	mov    ebx,ecx
c00280b9:	c1 fb 1f             	sar    ebx,0x1f
c00280bc:	31 da                	xor    edx,ebx
c00280be:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280c1:	89 df                	mov    edi,ebx
c00280c3:	c1 e7 0b             	shl    edi,0xb
c00280c6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280c9:	c1 e1 0b             	shl    ecx,0xb
c00280cc:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00280d2:	c1 eb 15             	shr    ebx,0x15
c00280d5:	09 d9                	or     ecx,ebx
c00280d7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c00280da:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00280dd:	89 ce                	mov    esi,ecx
c00280df:	c1 ee 14             	shr    esi,0x14
c00280e2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00280e8:	89 cb                	mov    ebx,ecx
c00280ea:	c1 fb 1f             	sar    ebx,0x1f
c00280ed:	31 de                	xor    esi,ebx
c00280ef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00280f2:	89 df                	mov    edi,ebx
c00280f4:	c1 e7 0b             	shl    edi,0xb
c00280f7:	c1 e1 0b             	shl    ecx,0xb
c00280fa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028100:	c1 eb 15             	shr    ebx,0x15
c0028103:	09 d9                	or     ecx,ebx
c0028105:	89 d3                	mov    ebx,edx
c0028107:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002810d:	43                   	inc    ebx
c002810e:	83 fb 01             	cmp    ebx,0x1
c0028111:	77 08                	ja     c002811b <__cmpdf2+0x7e>
c0028113:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028116:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028119:	75 68                	jne    c0028183 <__cmpdf2+0xe6>
c002811b:	89 f3                	mov    ebx,esi
c002811d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028123:	43                   	inc    ebx
c0028124:	83 fb 01             	cmp    ebx,0x1
c0028127:	77 06                	ja     c002812f <__cmpdf2+0x92>
c0028129:	89 fb                	mov    ebx,edi
c002812b:	09 cb                	or     ebx,ecx
c002812d:	75 54                	jne    c0028183 <__cmpdf2+0xe6>
c002812f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028132:	09 f8                	or     eax,edi
c0028134:	09 c8                	or     eax,ecx
c0028136:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028139:	75 12                	jne    c002814d <__cmpdf2+0xb0>
c002813b:	8d 42 01             	lea    eax,[edx+0x1]
c002813e:	83 f8 01             	cmp    eax,0x1
c0028141:	77 0a                	ja     c002814d <__cmpdf2+0xb0>
c0028143:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028146:	31 c0                	xor    eax,eax
c0028148:	83 fb 01             	cmp    ebx,0x1
c002814b:	76 36                	jbe    c0028183 <__cmpdf2+0xe6>
c002814d:	b8 01 00 00 00       	mov    eax,0x1
c0028152:	39 f2                	cmp    edx,esi
c0028154:	7f 2d                	jg     c0028183 <__cmpdf2+0xe6>
c0028156:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002815b:	7c 26                	jl     c0028183 <__cmpdf2+0xe6>
c002815d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028160:	77 07                	ja     c0028169 <__cmpdf2+0xcc>
c0028162:	72 16                	jb     c002817a <__cmpdf2+0xdd>
c0028164:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028167:	76 0a                	jbe    c0028173 <__cmpdf2+0xd6>
c0028169:	89 d0                	mov    eax,edx
c002816b:	c1 f8 1f             	sar    eax,0x1f
c002816e:	83 c8 01             	or     eax,0x1
c0028171:	eb 10                	jmp    c0028183 <__cmpdf2+0xe6>
c0028173:	b8 00 00 00 00       	mov    eax,0x0
c0028178:	73 09                	jae    c0028183 <__cmpdf2+0xe6>
c002817a:	89 d0                	mov    eax,edx
c002817c:	c1 f8 1f             	sar    eax,0x1f
c002817f:	83 e0 02             	and    eax,0x2
c0028182:	48                   	dec    eax
c0028183:	83 c4 0c             	add    esp,0xc
c0028186:	5b                   	pop    ebx
c0028187:	5e                   	pop    esi
c0028188:	5f                   	pop    edi
c0028189:	5d                   	pop    ebp
c002818a:	c3                   	ret    

c002818b <__eqdf2>:
c002818b:	55                   	push   ebp
c002818c:	89 e5                	mov    ebp,esp
c002818e:	50                   	push   eax
c002818f:	6a 01                	push   0x1
c0028191:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028194:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028197:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002819a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002819d:	e8 fb fe ff ff       	call   c002809d <__cmpdf2>
c00281a2:	83 c4 18             	add    esp,0x18
c00281a5:	c9                   	leave  
c00281a6:	c3                   	ret    

c00281a7 <__nedf2>:
c00281a7:	eb e2                	jmp    c002818b <__eqdf2>

c00281a9 <__gtdf2>:
c00281a9:	55                   	push   ebp
c00281aa:	89 e5                	mov    ebp,esp
c00281ac:	50                   	push   eax
c00281ad:	6a ff                	push   0xffffffff
c00281af:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00281b2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00281b5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00281b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00281bb:	e8 dd fe ff ff       	call   c002809d <__cmpdf2>
c00281c0:	83 c4 18             	add    esp,0x18
c00281c3:	c9                   	leave  
c00281c4:	c3                   	ret    

c00281c5 <__gedf2>:
c00281c5:	eb e2                	jmp    c00281a9 <__gtdf2>

c00281c7 <__ltdf2>:
c00281c7:	eb c2                	jmp    c002818b <__eqdf2>

c00281c9 <__ledf2>:
c00281c9:	eb c0                	jmp    c002818b <__eqdf2>

c00281cb <__truncdfsf2>:
c00281cb:	55                   	push   ebp
c00281cc:	89 e5                	mov    ebp,esp
c00281ce:	57                   	push   edi
c00281cf:	56                   	push   esi
c00281d0:	53                   	push   ebx
c00281d1:	83 ec 0c             	sub    esp,0xc
c00281d4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00281d7:	89 d1                	mov    ecx,edx
c00281d9:	c1 f9 14             	sar    ecx,0x14
c00281dc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00281df:	89 df                	mov    edi,ebx
c00281e1:	c1 e7 0b             	shl    edi,0xb
c00281e4:	89 d0                	mov    eax,edx
c00281e6:	c1 e0 0b             	shl    eax,0xb
c00281e9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00281ee:	c1 eb 15             	shr    ebx,0x15
c00281f1:	09 d8                	or     eax,ebx
c00281f3:	89 cb                	mov    ebx,ecx
c00281f5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00281fb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028201:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028207:	0f 86 9e 00 00 00    	jbe    c00282ab <__truncdfsf2+0xe0>
c002820d:	85 db                	test   ebx,ebx
c002820f:	75 0a                	jne    c002821b <__truncdfsf2+0x50>
c0028211:	c1 fa 17             	sar    edx,0x17
c0028214:	30 d2                	xor    dl,dl
c0028216:	e9 84 00 00 00       	jmp    c002829f <__truncdfsf2+0xd4>
c002821b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028221:	83 fe 83             	cmp    esi,0xffffff83
c0028224:	7d 4b                	jge    c0028271 <__truncdfsf2+0xa6>
c0028226:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002822b:	29 f1                	sub    ecx,esi
c002822d:	83 f9 1f             	cmp    ecx,0x1f
c0028230:	7f 6b                	jg     c002829d <__truncdfsf2+0xd2>
c0028232:	0d 00 00 00 80       	or     eax,0x80000000
c0028237:	89 c3                	mov    ebx,eax
c0028239:	d3 eb                	shr    ebx,cl
c002823b:	be 01 00 00 00       	mov    esi,0x1
c0028240:	d3 e6                	shl    esi,cl
c0028242:	4e                   	dec    esi
c0028243:	21 f0                	and    eax,esi
c0028245:	09 f8                	or     eax,edi
c0028247:	0f 95 c0             	setne  al
c002824a:	0f b6 c0             	movzx  eax,al
c002824d:	09 c3                	or     ebx,eax
c002824f:	89 d9                	mov    ecx,ebx
c0028251:	c1 e9 08             	shr    ecx,0x8
c0028254:	f6 c3 7f             	test   bl,0x7f
c0028257:	0f 95 c0             	setne  al
c002825a:	09 c8                	or     eax,ecx
c002825c:	83 e0 01             	and    eax,0x1
c002825f:	c1 eb 07             	shr    ebx,0x7
c0028262:	21 c3                	and    ebx,eax
c0028264:	81 e2 00 00 00 80    	and    edx,0x80000000
c002826a:	09 d1                	or     ecx,edx
c002826c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002826f:	eb 76                	jmp    c00282e7 <__truncdfsf2+0x11c>
c0028271:	83 c6 80             	add    esi,0xffffff80
c0028274:	7e 1d                	jle    c0028293 <__truncdfsf2+0xc8>
c0028276:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002827c:	75 0b                	jne    c0028289 <__truncdfsf2+0xbe>
c002827e:	09 f8                	or     eax,edi
c0028280:	74 09                	je     c002828b <__truncdfsf2+0xc0>
c0028282:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028287:	eb 02                	jmp    c002828b <__truncdfsf2+0xc0>
c0028289:	31 c0                	xor    eax,eax
c002828b:	c1 fa 17             	sar    edx,0x17
c002828e:	80 ca ff             	or     dl,0xff
c0028291:	eb 0e                	jmp    c00282a1 <__truncdfsf2+0xd6>
c0028293:	c1 fa 1f             	sar    edx,0x1f
c0028296:	c1 e2 08             	shl    edx,0x8
c0028299:	09 ca                	or     edx,ecx
c002829b:	eb 04                	jmp    c00282a1 <__truncdfsf2+0xd6>
c002829d:	31 d2                	xor    edx,edx
c002829f:	31 c0                	xor    eax,eax
c00282a1:	c1 e2 17             	shl    edx,0x17
c00282a4:	c1 e8 08             	shr    eax,0x8
c00282a7:	09 d0                	or     eax,edx
c00282a9:	eb 3c                	jmp    c00282e7 <__truncdfsf2+0x11c>
c00282ab:	81 e9 80 03 00 00    	sub    ecx,0x380
c00282b1:	89 ca                	mov    edx,ecx
c00282b3:	c1 fa 0b             	sar    edx,0xb
c00282b6:	c1 e2 08             	shl    edx,0x8
c00282b9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00282bc:	31 db                	xor    ebx,ebx
c00282be:	85 ff                	test   edi,edi
c00282c0:	0f 95 c3             	setne  bl
c00282c3:	09 d8                	or     eax,ebx
c00282c5:	89 c3                	mov    ebx,eax
c00282c7:	c1 eb 08             	shr    ebx,0x8
c00282ca:	a8 7f                	test   al,0x7f
c00282cc:	0f 95 c2             	setne  dl
c00282cf:	89 d6                	mov    esi,edx
c00282d1:	09 de                	or     esi,ebx
c00282d3:	83 e6 01             	and    esi,0x1
c00282d6:	c1 e8 07             	shr    eax,0x7
c00282d9:	21 f0                	and    eax,esi
c00282db:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00282de:	09 ca                	or     edx,ecx
c00282e0:	c1 e2 17             	shl    edx,0x17
c00282e3:	09 da                	or     edx,ebx
c00282e5:	01 d0                	add    eax,edx
c00282e7:	83 c4 0c             	add    esp,0xc
c00282ea:	5b                   	pop    ebx
c00282eb:	5e                   	pop    esi
c00282ec:	5f                   	pop    edi
c00282ed:	5d                   	pop    ebp
c00282ee:	c3                   	ret    

c00282ef <__extendsfdf2>:
c00282ef:	55                   	push   ebp
c00282f0:	89 e5                	mov    ebp,esp
c00282f2:	57                   	push   edi
c00282f3:	56                   	push   esi
c00282f4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00282f7:	89 d1                	mov    ecx,edx
c00282f9:	c1 f9 17             	sar    ecx,0x17
c00282fc:	c1 e2 08             	shl    edx,0x8
c00282ff:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028305:	89 c8                	mov    eax,ecx
c0028307:	80 e4 f8             	and    ah,0xf8
c002830a:	8d 71 01             	lea    esi,[ecx+0x1]
c002830d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028313:	75 27                	jne    c002833c <__extendsfdf2+0x4d>
c0028315:	81 e1 ff 00 00 00    	and    ecx,0xff
c002831b:	75 18                	jne    c0028335 <__extendsfdf2+0x46>
c002831d:	85 d2                	test   edx,edx
c002831f:	74 20                	je     c0028341 <__extendsfdf2+0x52>
c0028321:	41                   	inc    ecx
c0028322:	01 d2                	add    edx,edx
c0028324:	79 fb                	jns    c0028321 <__extendsfdf2+0x32>
c0028326:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002832c:	29 c8                	sub    eax,ecx
c002832e:	05 81 03 00 00       	add    eax,0x381
c0028333:	eb 0c                	jmp    c0028341 <__extendsfdf2+0x52>
c0028335:	05 00 07 00 00       	add    eax,0x700
c002833a:	eb 05                	jmp    c0028341 <__extendsfdf2+0x52>
c002833c:	05 80 03 00 00       	add    eax,0x380
c0028341:	c1 e0 14             	shl    eax,0x14
c0028344:	89 c1                	mov    ecx,eax
c0028346:	89 d0                	mov    eax,edx
c0028348:	c1 e8 0b             	shr    eax,0xb
c002834b:	09 c1                	or     ecx,eax
c002834d:	c1 e2 15             	shl    edx,0x15
c0028350:	89 d0                	mov    eax,edx
c0028352:	89 ca                	mov    edx,ecx
c0028354:	5e                   	pop    esi
c0028355:	5f                   	pop    edi
c0028356:	5d                   	pop    ebp
c0028357:	c3                   	ret    
c0028358:	66 90                	xchg   ax,ax
c002835a:	66 90                	xchg   ax,ax
c002835c:	66 90                	xchg   ax,ax
c002835e:	66 90                	xchg   ax,ax

c0028360 <fabs>:
c0028360:	83 ec 0c             	sub    esp,0xc
c0028363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028367:	89 04 24             	mov    DWORD PTR [esp],eax
c002836a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002836e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028373:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028377:	dd 04 24             	fld    QWORD PTR [esp]
c002837a:	83 c4 0c             	add    esp,0xc
c002837d:	c3                   	ret    
c002837e:	66 90                	xchg   ax,ax

c0028380 <lrint>:
c0028380:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028384:	83 ec 04             	sub    esp,0x4
c0028387:	db 1c 24             	fistp  DWORD PTR [esp]
c002838a:	58                   	pop    eax
c002838b:	c3                   	ret    

c002838c <lrintf>:
c002838c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028390:	83 ec 04             	sub    esp,0x4
c0028393:	db 1c 24             	fistp  DWORD PTR [esp]
c0028396:	58                   	pop    eax
c0028397:	c3                   	ret    

Disassembly of section .init:

c0028398 <_init>:
c0028398:	55                   	push   ebp
c0028399:	89 e5                	mov    ebp,esp
c002839b:	e8 78 7d fd ff       	call   c0000118 <frame_dummy>
c00283a0:	e8 5b e0 ff ff       	call   c0026400 <__do_global_ctors_aux>
c00283a5:	5d                   	pop    ebp
c00283a6:	c3                   	ret    

Disassembly of section .fini:

c00283a7 <_fini>:
c00283a7:	55                   	push   ebp
c00283a8:	89 e5                	mov    ebp,esp
c00283aa:	e8 f9 7c fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00283af:	5d                   	pop    ebp
c00283b0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00283b2 <Computer::~Computer()>:
c00283b2:	83 ec 0c             	sub    esp,0xc
c00283b5:	ba 3c 9f 02 c0       	mov    edx,0xc0029f3c
c00283ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283be:	89 10                	mov    DWORD PTR [eax],edx
c00283c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c4:	83 ec 0c             	sub    esp,0xc
c00283c7:	50                   	push   eax
c00283c8:	e8 ed b5 fe ff       	call   c00139ba <Device::~Device()>
c00283cd:	83 c4 10             	add    esp,0x10
c00283d0:	90                   	nop
c00283d1:	83 c4 0c             	add    esp,0xc
c00283d4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00283d6 <Computer::~Computer()>:
c00283d6:	83 ec 0c             	sub    esp,0xc
c00283d9:	83 ec 0c             	sub    esp,0xc
c00283dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283e0:	e8 cd ff ff ff       	call   c00283b2 <Computer::~Computer()>
c00283e5:	83 c4 10             	add    esp,0x10
c00283e8:	83 ec 08             	sub    esp,0x8
c00283eb:	68 ec 01 00 00       	push   0x1ec
c00283f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00283f4:	e8 e2 a1 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c00283f9:	83 c4 10             	add    esp,0x10
c00283fc:	83 c4 0c             	add    esp,0xc
c00283ff:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028400 <idleCommon()>:
c0028400:	83 ec 0c             	sub    esp,0xc
c0028403:	fa                   	cli    
c0028404:	ff 05 88 0e 03 c0    	inc    DWORD PTR ds:0xc0030e88
c002840a:	e8 9a 55 ff ff       	call   c001d9a9 <schedule()>
c002840f:	a1 88 0e 03 c0       	mov    eax,ds:0xc0030e88
c0028414:	48                   	dec    eax
c0028415:	a3 88 0e 03 c0       	mov    ds:0xc0030e88,eax
c002841a:	75 01                	jne    c002841d <idleCommon()+0x1d>
c002841c:	fb                   	sti    
c002841d:	83 c4 0c             	add    esp,0xc
c0028420:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028422 <LinkedList<UnixFile>::~LinkedList()>:
c0028422:	90                   	nop
c0028423:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028424 <LinkedList<UnixFile>::LinkedList()>:
c0028424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028428:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002842e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028432:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028439:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002843d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028444:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028448:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002844e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028452:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028459:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002845d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028464:	90                   	nop
c0028465:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028466 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028466:	83 ec 0c             	sub    esp,0xc
c0028469:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002846e:	75 10                	jne    c0028480 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028470:	83 ec 0c             	sub    esp,0xc
c0028473:	68 e4 a1 02 c0       	push   0xc002a1e4
c0028478:	e8 a2 19 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c002847d:	83 c4 10             	add    esp,0x10
c0028480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028484:	8b 00                	mov    eax,DWORD PTR [eax]
c0028486:	85 c0                	test   eax,eax
c0028488:	74 34                	je     c00284be <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002848a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002848e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028491:	85 c0                	test   eax,eax
c0028493:	74 29                	je     c00284be <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028499:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002849c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284ab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284b5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284bc:	eb 65                	jmp    c0028523 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00284be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00284c4:	85 c0                	test   eax,eax
c00284c6:	75 4b                	jne    c0028513 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284cf:	85 c0                	test   eax,eax
c00284d1:	75 40                	jne    c0028513 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00284d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284db:	89 10                	mov    DWORD PTR [eax],edx
c00284dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00284e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00284e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00284ef:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00284f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284fd:	85 c0                	test   eax,eax
c00284ff:	74 22                	je     c0028523 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028501:	83 ec 0c             	sub    esp,0xc
c0028504:	68 06 a2 02 c0       	push   0xc002a206
c0028509:	e8 11 19 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c002850e:	83 c4 10             	add    esp,0x10
c0028511:	eb 10                	jmp    c0028523 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028513:	83 ec 0c             	sub    esp,0xc
c0028516:	68 10 a2 02 c0       	push   0xc002a210
c002851b:	e8 ff 18 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0028520:	83 c4 10             	add    esp,0x10
c0028523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002852a:	8d 50 01             	lea    edx,[eax+0x1]
c002852d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028531:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028534:	90                   	nop
c0028535:	83 c4 0c             	add    esp,0xc
c0028538:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c002853a <LinkedList<UnixFile>::getFirstElement()>:
c002853a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002853e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028540:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0028542 <LinkedList<UnixFile>::removeFirst()>:
c0028542:	83 ec 0c             	sub    esp,0xc
c0028545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028549:	8b 00                	mov    eax,DWORD PTR [eax]
c002854b:	85 c0                	test   eax,eax
c002854d:	75 12                	jne    c0028561 <LinkedList<UnixFile>::removeFirst()+0x1f>
c002854f:	83 ec 0c             	sub    esp,0xc
c0028552:	68 1c a2 02 c0       	push   0xc002a21c
c0028557:	e8 c3 18 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c002855c:	83 c4 10             	add    esp,0x10
c002855f:	eb 7e                	jmp    c00285df <LinkedList<UnixFile>::removeFirst()+0x9d>
c0028561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028565:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028568:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002856b:	85 c0                	test   eax,eax
c002856d:	74 10                	je     c002857f <LinkedList<UnixFile>::removeFirst()+0x3d>
c002856f:	83 ec 0c             	sub    esp,0xc
c0028572:	68 67 a2 02 c0       	push   0xc002a267
c0028577:	e8 a3 18 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c002857c:	83 c4 10             	add    esp,0x10
c002857f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028583:	8b 00                	mov    eax,DWORD PTR [eax]
c0028585:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028588:	85 c0                	test   eax,eax
c002858a:	75 33                	jne    c00285bf <LinkedList<UnixFile>::removeFirst()+0x7d>
c002858c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028590:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002859a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00285a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285a8:	83 f8 01             	cmp    eax,0x1
c00285ab:	74 21                	je     c00285ce <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285ad:	83 ec 0c             	sub    esp,0xc
c00285b0:	68 40 a2 02 c0       	push   0xc002a240
c00285b5:	e8 65 18 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00285ba:	83 c4 10             	add    esp,0x10
c00285bd:	eb 0f                	jmp    c00285ce <LinkedList<UnixFile>::removeFirst()+0x8c>
c00285bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00285c5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00285c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285cc:	89 10                	mov    DWORD PTR [eax],edx
c00285ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285d2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285d5:	8d 50 ff             	lea    edx,[eax-0x1]
c00285d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285dc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00285df:	83 c4 0c             	add    esp,0xc
c00285e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00285e4 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00285e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00285e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285eb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00285ec <DriverlessDevice::~DriverlessDevice()>:
c00285ec:	ba 9c aa 02 c0       	mov    edx,0xc002aa9c
c00285f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285f5:	89 10                	mov    DWORD PTR [eax],edx
c00285f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00285fb:	50                   	push   eax
c00285fc:	e8 b9 b3 fe ff       	call   c00139ba <Device::~Device()>
c0028601:	83 c4 04             	add    esp,0x4
c0028604:	90                   	nop
c0028605:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028606 <DriverlessDevice::~DriverlessDevice()>:
c0028606:	83 ec 0c             	sub    esp,0xc
c0028609:	83 ec 0c             	sub    esp,0xc
c002860c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028610:	e8 d7 ff ff ff       	call   c00285ec <DriverlessDevice::~DriverlessDevice()>
c0028615:	83 c4 10             	add    esp,0x10
c0028618:	83 ec 08             	sub    esp,0x8
c002861b:	68 58 01 00 00       	push   0x158
c0028620:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028624:	e8 b2 9f fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028629:	83 c4 10             	add    esp,0x10
c002862c:	83 c4 0c             	add    esp,0xc
c002862f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0028630 <LinkedList<Device>::addElement(Device*)>:
c0028630:	83 ec 0c             	sub    esp,0xc
c0028633:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028638:	75 10                	jne    c002864a <LinkedList<Device>::addElement(Device*)+0x1a>
c002863a:	83 ec 0c             	sub    esp,0xc
c002863d:	68 e4 a1 02 c0       	push   0xc002a1e4
c0028642:	e8 d8 17 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0028647:	83 c4 10             	add    esp,0x10
c002864a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002864e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028650:	85 c0                	test   eax,eax
c0028652:	74 3a                	je     c002868e <LinkedList<Device>::addElement(Device*)+0x5e>
c0028654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028658:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002865b:	85 c0                	test   eax,eax
c002865d:	74 2f                	je     c002868e <LinkedList<Device>::addElement(Device*)+0x5e>
c002865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028663:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028666:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002866a:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0028670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028674:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028678:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002867b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002867f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028682:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002868c:	eb 68                	jmp    c00286f6 <LinkedList<Device>::addElement(Device*)+0xc6>
c002868e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028692:	8b 00                	mov    eax,DWORD PTR [eax]
c0028694:	85 c0                	test   eax,eax
c0028696:	75 4e                	jne    c00286e6 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002869c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002869f:	85 c0                	test   eax,eax
c00286a1:	75 43                	jne    c00286e6 <LinkedList<Device>::addElement(Device*)+0xb6>
c00286a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286ab:	89 10                	mov    DWORD PTR [eax],edx
c00286ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00286b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00286b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286bf:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00286c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286d0:	85 c0                	test   eax,eax
c00286d2:	74 22                	je     c00286f6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286d4:	83 ec 0c             	sub    esp,0xc
c00286d7:	68 06 a2 02 c0       	push   0xc002a206
c00286dc:	e8 3e 17 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00286e1:	83 c4 10             	add    esp,0x10
c00286e4:	eb 10                	jmp    c00286f6 <LinkedList<Device>::addElement(Device*)+0xc6>
c00286e6:	83 ec 0c             	sub    esp,0xc
c00286e9:	68 10 a2 02 c0       	push   0xc002a210
c00286ee:	e8 2c 17 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00286f3:	83 c4 10             	add    esp,0x10
c00286f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286fa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286fd:	8d 50 01             	lea    edx,[eax+0x1]
c0028700:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028704:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028707:	90                   	nop
c0028708:	83 c4 0c             	add    esp,0xc
c002870b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c002870c <LinkedList<Device>::LinkedList()>:
c002870c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028710:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002871a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028725:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002872c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028730:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002873a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028745:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002874c:	90                   	nop
c002874d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002874e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002874e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028752:	8b 00                	mov    eax,DWORD PTR [eax]
c0028754:	85 c0                	test   eax,eax
c0028756:	75 0e                	jne    c0028766 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002875c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002875f:	85 c0                	test   eax,eax
c0028761:	75 03                	jne    c0028766 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028763:	b0 01                	mov    al,0x1
c0028765:	c3                   	ret    
c0028766:	b0 00                	mov    al,0x0
c0028768:	90                   	nop
c0028769:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002876a <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002876a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002876e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028770:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028772 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028772:	83 ec 0c             	sub    esp,0xc
c0028775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028779:	8b 00                	mov    eax,DWORD PTR [eax]
c002877b:	85 c0                	test   eax,eax
c002877d:	75 15                	jne    c0028794 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002877f:	83 ec 0c             	sub    esp,0xc
c0028782:	68 1c a2 02 c0       	push   0xc002a21c
c0028787:	e8 93 16 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c002878c:	83 c4 10             	add    esp,0x10
c002878f:	e9 88 00 00 00       	jmp    c002881c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028798:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002879b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002879e:	85 c0                	test   eax,eax
c00287a0:	0f 95 c0             	setne  al
c00287a3:	84 c0                	test   al,al
c00287a5:	74 10                	je     c00287b7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00287a7:	83 ec 0c             	sub    esp,0xc
c00287aa:	68 67 a2 02 c0       	push   0xc002a267
c00287af:	e8 6b 16 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00287b4:	83 c4 10             	add    esp,0x10
c00287b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00287bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00287c0:	85 c0                	test   eax,eax
c00287c2:	0f 94 c0             	sete   al
c00287c5:	84 c0                	test   al,al
c00287c7:	74 33                	je     c00287fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00287c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287d7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287e5:	83 f8 01             	cmp    eax,0x1
c00287e8:	74 21                	je     c002880b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00287ea:	83 ec 0c             	sub    esp,0xc
c00287ed:	68 40 a2 02 c0       	push   0xc002a240
c00287f2:	e8 28 16 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00287f7:	83 c4 10             	add    esp,0x10
c00287fa:	eb 0f                	jmp    c002880b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00287fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028800:	8b 00                	mov    eax,DWORD PTR [eax]
c0028802:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028809:	89 10                	mov    DWORD PTR [eax],edx
c002880b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002880f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028812:	8d 50 ff             	lea    edx,[eax-0x1]
c0028815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028819:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002881c:	83 c4 0c             	add    esp,0xc
c002881f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028820 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028820:	83 ec 0c             	sub    esp,0xc
c0028823:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028828:	75 10                	jne    c002883a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002882a:	83 ec 0c             	sub    esp,0xc
c002882d:	68 e4 a1 02 c0       	push   0xc002a1e4
c0028832:	e8 e8 15 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0028837:	83 c4 10             	add    esp,0x10
c002883a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028840:	85 c0                	test   eax,eax
c0028842:	74 34                	je     c0028878 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028848:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002884b:	85 c0                	test   eax,eax
c002884d:	74 29                	je     c0028878 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002884f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028853:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028856:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002885a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002885d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028861:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028865:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002886c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002886f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028876:	eb 65                	jmp    c00288dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002887c:	8b 00                	mov    eax,DWORD PTR [eax]
c002887e:	85 c0                	test   eax,eax
c0028880:	75 4b                	jne    c00288cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028886:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028889:	85 c0                	test   eax,eax
c002888b:	75 40                	jne    c00288cd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002888d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028891:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028895:	89 10                	mov    DWORD PTR [eax],edx
c0028897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002889b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002889f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00288a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288a9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288b4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288b7:	85 c0                	test   eax,eax
c00288b9:	74 22                	je     c00288dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288bb:	83 ec 0c             	sub    esp,0xc
c00288be:	68 06 a2 02 c0       	push   0xc002a206
c00288c3:	e8 57 15 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00288c8:	83 c4 10             	add    esp,0x10
c00288cb:	eb 10                	jmp    c00288dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00288cd:	83 ec 0c             	sub    esp,0xc
c00288d0:	68 10 a2 02 c0       	push   0xc002a210
c00288d5:	e8 45 15 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00288da:	83 c4 10             	add    esp,0x10
c00288dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e4:	8d 50 01             	lea    edx,[eax+0x1]
c00288e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288eb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288ee:	90                   	nop
c00288ef:	83 c4 0c             	add    esp,0xc
c00288f2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00288f4 <ACPI::~ACPI()>:
c00288f4:	83 ec 0c             	sub    esp,0xc
c00288f7:	ba 08 b3 02 c0       	mov    edx,0xc002b308
c00288fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028900:	89 10                	mov    DWORD PTR [eax],edx
c0028902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028906:	83 ec 0c             	sub    esp,0xc
c0028909:	50                   	push   eax
c002890a:	e8 ab b0 fe ff       	call   c00139ba <Device::~Device()>
c002890f:	83 c4 10             	add    esp,0x10
c0028912:	90                   	nop
c0028913:	83 c4 0c             	add    esp,0xc
c0028916:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028918 <ACPI::~ACPI()>:
c0028918:	83 ec 0c             	sub    esp,0xc
c002891b:	83 ec 0c             	sub    esp,0xc
c002891e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028922:	e8 cd ff ff ff       	call   c00288f4 <ACPI::~ACPI()>
c0028927:	83 c4 10             	add    esp,0x10
c002892a:	83 ec 08             	sub    esp,0x8
c002892d:	68 64 12 00 00       	push   0x1264
c0028932:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028936:	e8 a0 9c fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c002893b:	83 c4 10             	add    esp,0x10
c002893e:	83 c4 0c             	add    esp,0xc
c0028941:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0028942 <LinkedList<Device>::~LinkedList()>:
c0028942:	90                   	nop
c0028943:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0028944 <LinkedList<Device>::isEmpty()>:
c0028944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028948:	8b 00                	mov    eax,DWORD PTR [eax]
c002894a:	85 c0                	test   eax,eax
c002894c:	75 0e                	jne    c002895c <LinkedList<Device>::isEmpty()+0x18>
c002894e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028952:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028955:	85 c0                	test   eax,eax
c0028957:	75 03                	jne    c002895c <LinkedList<Device>::isEmpty()+0x18>
c0028959:	b0 01                	mov    al,0x1
c002895b:	c3                   	ret    
c002895c:	b0 00                	mov    al,0x0
c002895e:	90                   	nop
c002895f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0028960 <LinkedList<Device>::getFirstElement()>:
c0028960:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028964:	8b 00                	mov    eax,DWORD PTR [eax]
c0028966:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0028968 <LinkedList<Device>::removeFirst()>:
c0028968:	83 ec 0c             	sub    esp,0xc
c002896b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002896f:	8b 00                	mov    eax,DWORD PTR [eax]
c0028971:	85 c0                	test   eax,eax
c0028973:	75 15                	jne    c002898a <LinkedList<Device>::removeFirst()+0x22>
c0028975:	83 ec 0c             	sub    esp,0xc
c0028978:	68 1c a2 02 c0       	push   0xc002a21c
c002897d:	e8 9d 14 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c0028982:	83 c4 10             	add    esp,0x10
c0028985:	e9 87 00 00 00       	jmp    c0028a11 <LinkedList<Device>::removeFirst()+0xa9>
c002898a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002898e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028991:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0028997:	85 c0                	test   eax,eax
c0028999:	74 10                	je     c00289ab <LinkedList<Device>::removeFirst()+0x43>
c002899b:	83 ec 0c             	sub    esp,0xc
c002899e:	68 67 a2 02 c0       	push   0xc002a267
c00289a3:	e8 77 14 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00289a8:	83 c4 10             	add    esp,0x10
c00289ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289af:	8b 00                	mov    eax,DWORD PTR [eax]
c00289b1:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00289b7:	85 c0                	test   eax,eax
c00289b9:	75 33                	jne    c00289ee <LinkedList<Device>::removeFirst()+0x86>
c00289bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289bf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00289c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00289d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00289d7:	83 f8 01             	cmp    eax,0x1
c00289da:	74 24                	je     c0028a00 <LinkedList<Device>::removeFirst()+0x98>
c00289dc:	83 ec 0c             	sub    esp,0xc
c00289df:	68 40 a2 02 c0       	push   0xc002a240
c00289e4:	e8 36 14 ff ff       	call   c0019e1f <Krnl::panic(char const*)>
c00289e9:	83 c4 10             	add    esp,0x10
c00289ec:	eb 12                	jmp    c0028a00 <LinkedList<Device>::removeFirst()+0x98>
c00289ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00289f4:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00289fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fe:	89 10                	mov    DWORD PTR [eax],edx
c0028a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a07:	8d 50 ff             	lea    edx,[eax-0x1]
c0028a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a11:	83 c4 0c             	add    esp,0xc
c0028a14:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028a16 <CPU::~CPU()>:
c0028a16:	83 ec 0c             	sub    esp,0xc
c0028a19:	ba 58 b5 02 c0       	mov    edx,0xc002b558
c0028a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a22:	89 10                	mov    DWORD PTR [eax],edx
c0028a24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a28:	83 ec 0c             	sub    esp,0xc
c0028a2b:	50                   	push   eax
c0028a2c:	e8 89 af fe ff       	call   c00139ba <Device::~Device()>
c0028a31:	83 c4 10             	add    esp,0x10
c0028a34:	90                   	nop
c0028a35:	83 c4 0c             	add    esp,0xc
c0028a38:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028a3a <CPU::~CPU()>:
c0028a3a:	83 ec 0c             	sub    esp,0xc
c0028a3d:	83 ec 0c             	sub    esp,0xc
c0028a40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a44:	e8 cd ff ff ff       	call   c0028a16 <CPU::~CPU()>
c0028a49:	83 c4 10             	add    esp,0x10
c0028a4c:	83 ec 08             	sub    esp,0x8
c0028a4f:	68 98 11 00 00       	push   0x1198
c0028a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a58:	e8 7e 9b fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028a5d:	83 c4 10             	add    esp,0x10
c0028a60:	83 c4 0c             	add    esp,0xc
c0028a63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028a64 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028a64:	90                   	nop
c0028a65:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028a66 <ThreadControlBlock::ThreadControlBlock()>:
c0028a66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a6a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028a71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a75:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028a7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a80:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028a87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a8b:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028a92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028a96:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0028a9d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa1:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028aa5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aa9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028aad:	90                   	nop
c0028aae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028ab0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028ab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028abe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ac5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ac9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ad0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ade:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028ae5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028af0:	90                   	nop
c0028af1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028af2 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028af2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028af6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028af9:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028afa <Vm::_FPUState::_FPUState()>:
c0028afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028afe:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028b05:	90                   	nop
c0028b06:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028b08 <PCI::~PCI()>:
c0028b08:	83 ec 0c             	sub    esp,0xc
c0028b0b:	ba 84 c0 02 c0       	mov    edx,0xc002c084
c0028b10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b14:	89 10                	mov    DWORD PTR [eax],edx
c0028b16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b1a:	83 ec 0c             	sub    esp,0xc
c0028b1d:	50                   	push   eax
c0028b1e:	e8 67 a8 fe ff       	call   c001338a <Bus::~Bus()>
c0028b23:	83 c4 10             	add    esp,0x10
c0028b26:	90                   	nop
c0028b27:	83 c4 0c             	add    esp,0xc
c0028b2a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028b2c <PCI::~PCI()>:
c0028b2c:	83 ec 0c             	sub    esp,0xc
c0028b2f:	83 ec 0c             	sub    esp,0xc
c0028b32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b36:	e8 cd ff ff ff       	call   c0028b08 <PCI::~PCI()>
c0028b3b:	83 c4 10             	add    esp,0x10
c0028b3e:	83 ec 08             	sub    esp,0x8
c0028b41:	68 5c 01 00 00       	push   0x15c
c0028b46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b4a:	e8 8c 9a fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028b4f:	83 c4 10             	add    esp,0x10
c0028b52:	83 c4 0c             	add    esp,0xc
c0028b55:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028b56 <IDE::~IDE()>:
c0028b56:	83 ec 0c             	sub    esp,0xc
c0028b59:	ba 38 c1 02 c0       	mov    edx,0xc002c138
c0028b5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b62:	89 10                	mov    DWORD PTR [eax],edx
c0028b64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b68:	83 ec 0c             	sub    esp,0xc
c0028b6b:	50                   	push   eax
c0028b6c:	e8 5f b3 fe ff       	call   c0013ed0 <HardDiskController::~HardDiskController()>
c0028b71:	83 c4 10             	add    esp,0x10
c0028b74:	90                   	nop
c0028b75:	83 c4 0c             	add    esp,0xc
c0028b78:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028b7a <IDE::~IDE()>:
c0028b7a:	83 ec 0c             	sub    esp,0xc
c0028b7d:	83 ec 0c             	sub    esp,0xc
c0028b80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b84:	e8 cd ff ff ff       	call   c0028b56 <IDE::~IDE()>
c0028b89:	83 c4 10             	add    esp,0x10
c0028b8c:	83 ec 08             	sub    esp,0x8
c0028b8f:	68 70 02 00 00       	push   0x270
c0028b94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b98:	e8 3e 9a fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028b9d:	83 c4 10             	add    esp,0x10
c0028ba0:	83 c4 0c             	add    esp,0xc
c0028ba3:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028ba4 <SATABus::~SATABus()>:
c0028ba4:	83 ec 0c             	sub    esp,0xc
c0028ba7:	ba b0 c1 02 c0       	mov    edx,0xc002c1b0
c0028bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb0:	89 10                	mov    DWORD PTR [eax],edx
c0028bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bb6:	83 ec 0c             	sub    esp,0xc
c0028bb9:	50                   	push   eax
c0028bba:	e8 11 b3 fe ff       	call   c0013ed0 <HardDiskController::~HardDiskController()>
c0028bbf:	83 c4 10             	add    esp,0x10
c0028bc2:	90                   	nop
c0028bc3:	83 c4 0c             	add    esp,0xc
c0028bc6:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028bc8 <SATABus::~SATABus()>:
c0028bc8:	83 ec 0c             	sub    esp,0xc
c0028bcb:	83 ec 0c             	sub    esp,0xc
c0028bce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bd2:	e8 cd ff ff ff       	call   c0028ba4 <SATABus::~SATABus()>
c0028bd7:	83 c4 10             	add    esp,0x10
c0028bda:	83 ec 08             	sub    esp,0x8
c0028bdd:	68 64 01 00 00       	push   0x164
c0028be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028be6:	e8 f0 99 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028beb:	83 c4 10             	add    esp,0x10
c0028bee:	83 c4 0c             	add    esp,0xc
c0028bf1:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028bf2 <ATA::~ATA()>:
c0028bf2:	83 ec 0c             	sub    esp,0xc
c0028bf5:	ba fc c1 02 c0       	mov    edx,0xc002c1fc
c0028bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfe:	89 10                	mov    DWORD PTR [eax],edx
c0028c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c04:	83 ec 0c             	sub    esp,0xc
c0028c07:	50                   	push   eax
c0028c08:	e8 a5 b3 fe ff       	call   c0013fb2 <PhysicalDisk::~PhysicalDisk()>
c0028c0d:	83 c4 10             	add    esp,0x10
c0028c10:	90                   	nop
c0028c11:	83 c4 0c             	add    esp,0xc
c0028c14:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028c16 <ATA::~ATA()>:
c0028c16:	83 ec 0c             	sub    esp,0xc
c0028c19:	83 ec 0c             	sub    esp,0xc
c0028c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c20:	e8 cd ff ff ff       	call   c0028bf2 <ATA::~ATA()>
c0028c25:	83 c4 10             	add    esp,0x10
c0028c28:	83 ec 08             	sub    esp,0x8
c0028c2b:	68 7c 01 00 00       	push   0x17c
c0028c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c34:	e8 a2 99 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028c39:	83 c4 10             	add    esp,0x10
c0028c3c:	83 c4 0c             	add    esp,0xc
c0028c3f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028c40 <ATAPI::~ATAPI()>:
c0028c40:	83 ec 0c             	sub    esp,0xc
c0028c43:	ba 34 c2 02 c0       	mov    edx,0xc002c234
c0028c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c4c:	89 10                	mov    DWORD PTR [eax],edx
c0028c4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c52:	83 ec 0c             	sub    esp,0xc
c0028c55:	50                   	push   eax
c0028c56:	e8 57 b3 fe ff       	call   c0013fb2 <PhysicalDisk::~PhysicalDisk()>
c0028c5b:	83 c4 10             	add    esp,0x10
c0028c5e:	90                   	nop
c0028c5f:	83 c4 0c             	add    esp,0xc
c0028c62:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028c64 <ATAPI::~ATAPI()>:
c0028c64:	83 ec 0c             	sub    esp,0xc
c0028c67:	83 ec 0c             	sub    esp,0xc
c0028c6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c6e:	e8 cd ff ff ff       	call   c0028c40 <ATAPI::~ATAPI()>
c0028c73:	83 c4 10             	add    esp,0x10
c0028c76:	83 ec 08             	sub    esp,0x8
c0028c79:	68 80 01 00 00       	push   0x180
c0028c7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c82:	e8 54 99 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028c87:	83 c4 10             	add    esp,0x10
c0028c8a:	83 c4 0c             	add    esp,0xc
c0028c8d:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028c8e <SATA::~SATA()>:
c0028c8e:	83 ec 0c             	sub    esp,0xc
c0028c91:	ba e8 c2 02 c0       	mov    edx,0xc002c2e8
c0028c96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c9a:	89 10                	mov    DWORD PTR [eax],edx
c0028c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ca0:	83 ec 0c             	sub    esp,0xc
c0028ca3:	50                   	push   eax
c0028ca4:	e8 09 b3 fe ff       	call   c0013fb2 <PhysicalDisk::~PhysicalDisk()>
c0028ca9:	83 c4 10             	add    esp,0x10
c0028cac:	90                   	nop
c0028cad:	83 c4 0c             	add    esp,0xc
c0028cb0:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028cb2 <SATA::~SATA()>:
c0028cb2:	83 ec 0c             	sub    esp,0xc
c0028cb5:	83 ec 0c             	sub    esp,0xc
c0028cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cbc:	e8 cd ff ff ff       	call   c0028c8e <SATA::~SATA()>
c0028cc1:	83 c4 10             	add    esp,0x10
c0028cc4:	83 ec 08             	sub    esp,0x8
c0028cc7:	68 7c 01 00 00       	push   0x17c
c0028ccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd0:	e8 06 99 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028cd5:	83 c4 10             	add    esp,0x10
c0028cd8:	83 c4 0c             	add    esp,0xc
c0028cdb:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028cdc <SATAPI::~SATAPI()>:
c0028cdc:	83 ec 0c             	sub    esp,0xc
c0028cdf:	ba c4 c3 02 c0       	mov    edx,0xc002c3c4
c0028ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce8:	89 10                	mov    DWORD PTR [eax],edx
c0028cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cee:	83 ec 0c             	sub    esp,0xc
c0028cf1:	50                   	push   eax
c0028cf2:	e8 bb b2 fe ff       	call   c0013fb2 <PhysicalDisk::~PhysicalDisk()>
c0028cf7:	83 c4 10             	add    esp,0x10
c0028cfa:	90                   	nop
c0028cfb:	83 c4 0c             	add    esp,0xc
c0028cfe:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028d00 <SATAPI::~SATAPI()>:
c0028d00:	83 ec 0c             	sub    esp,0xc
c0028d03:	83 ec 0c             	sub    esp,0xc
c0028d06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d0a:	e8 cd ff ff ff       	call   c0028cdc <SATAPI::~SATAPI()>
c0028d0f:	83 c4 10             	add    esp,0x10
c0028d12:	83 ec 08             	sub    esp,0x8
c0028d15:	68 80 01 00 00       	push   0x180
c0028d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d1e:	e8 b8 98 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028d23:	83 c4 10             	add    esp,0x10
c0028d26:	83 c4 0c             	add    esp,0xc
c0028d29:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028d2a <AVX::~AVX()>:
c0028d2a:	83 ec 0c             	sub    esp,0xc
c0028d2d:	ba 04 c4 02 c0       	mov    edx,0xc002c404
c0028d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d36:	89 10                	mov    DWORD PTR [eax],edx
c0028d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d3c:	83 ec 0c             	sub    esp,0xc
c0028d3f:	50                   	push   eax
c0028d40:	e8 f1 b2 fe ff       	call   c0014036 <FPU::~FPU()>
c0028d45:	83 c4 10             	add    esp,0x10
c0028d48:	90                   	nop
c0028d49:	83 c4 0c             	add    esp,0xc
c0028d4c:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028d4e <AVX::~AVX()>:
c0028d4e:	83 ec 0c             	sub    esp,0xc
c0028d51:	83 ec 0c             	sub    esp,0xc
c0028d54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d58:	e8 cd ff ff ff       	call   c0028d2a <AVX::~AVX()>
c0028d5d:	83 c4 10             	add    esp,0x10
c0028d60:	83 ec 08             	sub    esp,0x8
c0028d63:	68 58 01 00 00       	push   0x158
c0028d68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d6c:	e8 6a 98 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028d71:	83 c4 10             	add    esp,0x10
c0028d74:	83 c4 0c             	add    esp,0xc
c0028d77:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028d78 <MMX::~MMX()>:
c0028d78:	83 ec 0c             	sub    esp,0xc
c0028d7b:	ba 44 c4 02 c0       	mov    edx,0xc002c444
c0028d80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d84:	89 10                	mov    DWORD PTR [eax],edx
c0028d86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d8a:	83 ec 0c             	sub    esp,0xc
c0028d8d:	50                   	push   eax
c0028d8e:	e8 a3 b2 fe ff       	call   c0014036 <FPU::~FPU()>
c0028d93:	83 c4 10             	add    esp,0x10
c0028d96:	90                   	nop
c0028d97:	83 c4 0c             	add    esp,0xc
c0028d9a:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028d9c <MMX::~MMX()>:
c0028d9c:	83 ec 0c             	sub    esp,0xc
c0028d9f:	83 ec 0c             	sub    esp,0xc
c0028da2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028da6:	e8 cd ff ff ff       	call   c0028d78 <MMX::~MMX()>
c0028dab:	83 c4 10             	add    esp,0x10
c0028dae:	83 ec 08             	sub    esp,0x8
c0028db1:	68 58 01 00 00       	push   0x158
c0028db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dba:	e8 1c 98 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028dbf:	83 c4 10             	add    esp,0x10
c0028dc2:	83 c4 0c             	add    esp,0xc
c0028dc5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028dc6 <SSE::~SSE()>:
c0028dc6:	83 ec 0c             	sub    esp,0xc
c0028dc9:	ba 84 c4 02 c0       	mov    edx,0xc002c484
c0028dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd2:	89 10                	mov    DWORD PTR [eax],edx
c0028dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dd8:	83 ec 0c             	sub    esp,0xc
c0028ddb:	50                   	push   eax
c0028ddc:	e8 55 b2 fe ff       	call   c0014036 <FPU::~FPU()>
c0028de1:	83 c4 10             	add    esp,0x10
c0028de4:	90                   	nop
c0028de5:	83 c4 0c             	add    esp,0xc
c0028de8:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028dea <SSE::~SSE()>:
c0028dea:	83 ec 0c             	sub    esp,0xc
c0028ded:	83 ec 0c             	sub    esp,0xc
c0028df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028df4:	e8 cd ff ff ff       	call   c0028dc6 <SSE::~SSE()>
c0028df9:	83 c4 10             	add    esp,0x10
c0028dfc:	83 ec 08             	sub    esp,0x8
c0028dff:	68 58 01 00 00       	push   0x158
c0028e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e08:	e8 ce 97 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028e0d:	83 c4 10             	add    esp,0x10
c0028e10:	83 c4 0c             	add    esp,0xc
c0028e13:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028e14 <x87::~x87()>:
c0028e14:	83 ec 0c             	sub    esp,0xc
c0028e17:	ba c4 c4 02 c0       	mov    edx,0xc002c4c4
c0028e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e20:	89 10                	mov    DWORD PTR [eax],edx
c0028e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e26:	83 ec 0c             	sub    esp,0xc
c0028e29:	50                   	push   eax
c0028e2a:	e8 07 b2 fe ff       	call   c0014036 <FPU::~FPU()>
c0028e2f:	83 c4 10             	add    esp,0x10
c0028e32:	90                   	nop
c0028e33:	83 c4 0c             	add    esp,0xc
c0028e36:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028e38 <x87::~x87()>:
c0028e38:	83 ec 0c             	sub    esp,0xc
c0028e3b:	83 ec 0c             	sub    esp,0xc
c0028e3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e42:	e8 cd ff ff ff       	call   c0028e14 <x87::~x87()>
c0028e47:	83 c4 10             	add    esp,0x10
c0028e4a:	83 ec 08             	sub    esp,0x8
c0028e4d:	68 58 01 00 00       	push   0x158
c0028e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e56:	e8 80 97 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028e5b:	83 c4 10             	add    esp,0x10
c0028e5e:	83 c4 0c             	add    esp,0xc
c0028e61:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028e62 <IOAPIC::~IOAPIC()>:
c0028e62:	83 ec 0c             	sub    esp,0xc
c0028e65:	ba 1c c6 02 c0       	mov    edx,0xc002c61c
c0028e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6e:	89 10                	mov    DWORD PTR [eax],edx
c0028e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e74:	83 ec 0c             	sub    esp,0xc
c0028e77:	50                   	push   eax
c0028e78:	e8 3d ab fe ff       	call   c00139ba <Device::~Device()>
c0028e7d:	83 c4 10             	add    esp,0x10
c0028e80:	90                   	nop
c0028e81:	83 c4 0c             	add    esp,0xc
c0028e84:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028e86 <IOAPIC::~IOAPIC()>:
c0028e86:	83 ec 0c             	sub    esp,0xc
c0028e89:	83 ec 0c             	sub    esp,0xc
c0028e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e90:	e8 cd ff ff ff       	call   c0028e62 <IOAPIC::~IOAPIC()>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	83 ec 08             	sub    esp,0x8
c0028e9b:	68 68 01 00 00       	push   0x168
c0028ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea4:	e8 32 97 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028ea9:	83 c4 10             	add    esp,0x10
c0028eac:	83 c4 0c             	add    esp,0xc
c0028eaf:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028eb0 <APIC::~APIC()>:
c0028eb0:	83 ec 0c             	sub    esp,0xc
c0028eb3:	ba d4 c5 02 c0       	mov    edx,0xc002c5d4
c0028eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ebc:	89 10                	mov    DWORD PTR [eax],edx
c0028ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec2:	83 ec 0c             	sub    esp,0xc
c0028ec5:	50                   	push   eax
c0028ec6:	e8 35 b6 fe ff       	call   c0014500 <InterruptController::~InterruptController()>
c0028ecb:	83 c4 10             	add    esp,0x10
c0028ece:	90                   	nop
c0028ecf:	83 c4 0c             	add    esp,0xc
c0028ed2:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028ed4 <APIC::~APIC()>:
c0028ed4:	83 ec 0c             	sub    esp,0xc
c0028ed7:	83 ec 0c             	sub    esp,0xc
c0028eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ede:	e8 cd ff ff ff       	call   c0028eb0 <APIC::~APIC()>
c0028ee3:	83 c4 10             	add    esp,0x10
c0028ee6:	83 ec 08             	sub    esp,0x8
c0028ee9:	68 58 21 00 00       	push   0x2158
c0028eee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ef2:	e8 e4 96 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028ef7:	83 c4 10             	add    esp,0x10
c0028efa:	83 c4 0c             	add    esp,0xc
c0028efd:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028efe <PIC::~PIC()>:
c0028efe:	83 ec 0c             	sub    esp,0xc
c0028f01:	ba 6c c6 02 c0       	mov    edx,0xc002c66c
c0028f06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0a:	89 10                	mov    DWORD PTR [eax],edx
c0028f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f10:	83 ec 0c             	sub    esp,0xc
c0028f13:	50                   	push   eax
c0028f14:	e8 e7 b5 fe ff       	call   c0014500 <InterruptController::~InterruptController()>
c0028f19:	83 c4 10             	add    esp,0x10
c0028f1c:	90                   	nop
c0028f1d:	83 c4 0c             	add    esp,0xc
c0028f20:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028f22 <PIC::~PIC()>:
c0028f22:	83 ec 0c             	sub    esp,0xc
c0028f25:	83 ec 0c             	sub    esp,0xc
c0028f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f2c:	e8 cd ff ff ff       	call   c0028efe <PIC::~PIC()>
c0028f31:	83 c4 10             	add    esp,0x10
c0028f34:	83 ec 08             	sub    esp,0x8
c0028f37:	68 58 21 00 00       	push   0x2158
c0028f3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f40:	e8 96 96 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028f45:	83 c4 10             	add    esp,0x10
c0028f48:	83 c4 0c             	add    esp,0xc
c0028f4b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028f4c <APICTimer::~APICTimer()>:
c0028f4c:	83 ec 0c             	sub    esp,0xc
c0028f4f:	ba c0 c6 02 c0       	mov    edx,0xc002c6c0
c0028f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f58:	89 10                	mov    DWORD PTR [eax],edx
c0028f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5e:	83 ec 0c             	sub    esp,0xc
c0028f61:	50                   	push   eax
c0028f62:	e8 f1 d5 fe ff       	call   c0016558 <Timer::~Timer()>
c0028f67:	83 c4 10             	add    esp,0x10
c0028f6a:	90                   	nop
c0028f6b:	83 c4 0c             	add    esp,0xc
c0028f6e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028f70 <APICTimer::~APICTimer()>:
c0028f70:	83 ec 0c             	sub    esp,0xc
c0028f73:	83 ec 0c             	sub    esp,0xc
c0028f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f7a:	e8 cd ff ff ff       	call   c0028f4c <APICTimer::~APICTimer()>
c0028f7f:	83 c4 10             	add    esp,0x10
c0028f82:	83 ec 08             	sub    esp,0x8
c0028f85:	68 60 01 00 00       	push   0x160
c0028f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f8e:	e8 48 96 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028f93:	83 c4 10             	add    esp,0x10
c0028f96:	83 c4 0c             	add    esp,0xc
c0028f99:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028f9a <PIT::~PIT()>:
c0028f9a:	83 ec 0c             	sub    esp,0xc
c0028f9d:	ba 10 c7 02 c0       	mov    edx,0xc002c710
c0028fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa6:	89 10                	mov    DWORD PTR [eax],edx
c0028fa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fac:	83 ec 0c             	sub    esp,0xc
c0028faf:	50                   	push   eax
c0028fb0:	e8 a3 d5 fe ff       	call   c0016558 <Timer::~Timer()>
c0028fb5:	83 c4 10             	add    esp,0x10
c0028fb8:	90                   	nop
c0028fb9:	83 c4 0c             	add    esp,0xc
c0028fbc:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028fbe <PIT::~PIT()>:
c0028fbe:	83 ec 0c             	sub    esp,0xc
c0028fc1:	83 ec 0c             	sub    esp,0xc
c0028fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fc8:	e8 cd ff ff ff       	call   c0028f9a <PIT::~PIT()>
c0028fcd:	83 c4 10             	add    esp,0x10
c0028fd0:	83 ec 08             	sub    esp,0x8
c0028fd3:	68 5c 01 00 00       	push   0x15c
c0028fd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fdc:	e8 fa 95 fe ff       	call   c00125db <operator delete(void*, unsigned long)>
c0028fe1:	83 c4 10             	add    esp,0x10
c0028fe4:	83 c4 0c             	add    esp,0xc
c0028fe7:	c3                   	ret    
